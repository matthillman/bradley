!function e(t,n,r){function o(a,s){if(!n[a]){if(!t[a]){var c="function"==typeof require&&require;if(!s&&c)return c(a,!0);if(i)return i(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var u=n[a]={exports:{}};t[a][0].call(u.exports,function(e){var n=t[a][1][e];return o(n?n:e)},u,u.exports,e,t,n,r)}return n[a].exports}for(var i="function"==typeof require&&require,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(e,t,n){"use strict";function r(e,t,n,r,i,a){function s(){var e=u||a.when(!0);e.then(function(){n("left").toggle()}),r.hide()}function c(t){e.selected=t,e.toggleList()}function l(t){function n(e){this.user=a,this.actions=[{name:"Phone",icon:"phone",icon_url:"assets/svg/phone.svg"},{name:"Twitter",icon:"twitter",icon_url:"assets/svg/twitter.svg"},{name:"Google+",icon:"google_plus",icon_url:"assets/svg/google_plus.svg"},{name:"Hangout",icon:"hangouts",icon_url:"assets/svg/hangouts.svg"}],this.submitContact=function(t){e.hide(t)}}var a=e.selected;return u=r.show({parent:o.element(document.getElementById("content")),templateUrl:"/views/partials/contactSheet.html",controller:n,controllerAs:"cp",bindToController:!0,targetEvent:t}).then(function(e){e&&i.debug(e.name+" clicked!")}),n.$inject=["$mdBottomSheet"],u}e.selected=null,e.users=[],e.selectUser=c,e.toggleList=s,e.showContactOptions=l,e.isSidenavOpen=function(){return n("left").isOpen()},t.loadAllUsers().then(function(t){e.users=[].concat(t),e.selected=t[0]});var u}var o=e("angular");e("angular-material"),r.$inject=["$scope","userService","$mdSidenav","$mdBottomSheet","$log","$q"],n.UserController=r},{angular:14,"angular-material":12}],2:[function(e,t,n){"use strict";var r=e("angular"),o=r.module("sample.app"),i=e("./UserController");o.controller("UserController",i.UserController)},{"./UserController":1,angular:14}],3:[function(e,t,n){"use strict";{var r=e("angular");r.module("sample.app")}},{angular:14}],4:[function(e,t,n){"use strict";var r=e("angular");e("angular-aria"),e("angular-animate"),e("angular-material"),r.module("sample.app",["ngMaterial"]),e("./services"),e("./directives"),e("./controllers"),r.bootstrap(document,["sample.app"])},{"./controllers":2,"./directives":3,"./services":6,angular:14,"angular-animate":8,"angular-aria":10,"angular-material":12}],5:[function(e,t,n){"use strict";function r(e){var t=[{name:"Lia Lugo",avatar:"svg-1",content:"I love cheese, especially airedale queso. Cheese and biscuits halloumi cauliflower cheese cottage cheese swiss boursin fondue caerphilly. Cow port-salut camembert de normandie macaroni cheese feta who moved my cheese babybel boursin. Red leicester roquefort boursin squirty cheese jarlsberg blue castello caerphilly chalk and cheese. Lancashire."},{name:"George Duke",avatar:"svg-2",content:"Zombie ipsum reversus ab viral inferno, nam rick grimes malum cerebro. De carne lumbering animata corpora quaeritis. Summus brains sit​​, morbo vel maleficia? De apocalypsi gorger omero undead survivor dictum mauris."},{name:"Gener Delosreyes",avatar:"svg-3",content:"Raw denim pour-over readymade Etsy Pitchfork. Four dollar toast pickled locavore bitters McSweeney's blog. Try-hard art party Shoreditch selfies. Odd Future butcher VHS, disrupt pop-up Thundercats chillwave vinyl jean shorts taxidermy master cleanse letterpress Wes Anderson mustache Helvetica. Schlitz bicycle rights chillwave irony lumberhungry Kickstarter next level sriracha typewriter Intelligentsia, migas kogi heirloom tousled. Disrupt 3 wolf moon lomo four loko. Pug mlkshk fanny pack literally hoodie bespoke, put a bird on it Marfa messenger bag kogi VHS."},{name:"Lawrence Ray",avatar:"svg-4",content:"Scratch the furniture spit up on light gray carpet instead of adjacent linoleum so eat a plant, kill a hand pelt around the house and up and down stairs chasing phantoms run in circles, or claw drapes. Always hungry pelt around the house and up and down stairs chasing phantoms."},{name:"Ernesto Urbina",avatar:"svg-5",content:"Webtwo ipsum dolor sit amet, eskobo chumby doostang bebo. Bubbli greplin stypi prezi mzinga heroku wakoopa, shopify airbnb dogster dopplr gooru jumo, reddit plickers edmodo stypi zillow etsy."},{name:"Gani Ferrer",avatar:"svg-6",content:"Lebowski ipsum yeah? What do you think happens when you get rad? You turn in your library card? Get a new driver's license? Stop being awesome? Dolor sit amet, consectetur adipiscing elit praesent ac magna justo pellentesque ac lectus. You don't go out and make a living dressed like that in the middle of a weekday. Quis elit blandit fringilla a ut turpis praesent felis ligula, malesuada suscipit malesuada."}];return{loadAllUsers:function(){return e.when(t)}}}r.$inject=["$q"],n.UserServiceFactory=r},{}],6:[function(e,t,n){"use strict";var r=e("angular"),o=r.module("sample.app");o.config(["$mdThemingProvider","$mdIconProvider",function(e,t){t.defaultIconSet("./assets/svg/avatars.svg",128).icon("menu","./assets/svg/menu.svg",24).icon("share","./assets/svg/share.svg",24).icon("google_plus","./assets/svg/google_plus.svg",512).icon("hangouts","./assets/svg/hangouts.svg",512).icon("twitter","./assets/svg/twitter.svg",512).icon("phone","./assets/svg/phone.svg",512),e.theme("default").primaryPalette("indigo").accentPalette("blue-grey")}]);var i=e("./UserService");o.service("userService",i.UserServiceFactory)},{"./UserService":5,angular:14}],7:[function(e,t,n){!function(e,t,n){"use strict";function r(e,t,n){if(!e)throw ngMinErr("areq","Argument '{0}' is {1}",t||"?",n||"required");return e}function o(e,t){return e||t?e?t?(j(e)&&(e=e.join(" ")),j(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function i(e){var t={};return e&&(e.to||e.from)&&(t.to=e.to,t.from=e.from),t}function a(e,t,n){var r="";return e=j(e)?e:e&&L(e)&&e.length?e.split(/\s+/):[],P(e,function(e,o){e&&e.length>0&&(r+=o>0?" ":"",r+=n?t+e:e+t)}),r}function s(e,t){var n=e.indexOf(t);t>=0&&e.splice(n,1)}function c(e){if(e instanceof R)switch(e.length){case 0:return[];case 1:if(e[0].nodeType===z)return e;break;default:return R(l(e))}return e.nodeType===z?R(e):void 0}function l(e){if(!e[0])return e;for(var t=0;t<e.length;t++){var n=e[t];if(n.nodeType==z)return n}}function u(e,t,n){P(t,function(t){e.addClass(t,n)})}function d(e,t,n){P(t,function(t){e.removeClass(t,n)})}function m(e){return function(t,n){n.addClass&&(u(e,t,n.addClass),n.addClass=null),n.removeClass&&(d(e,t,n.removeClass),n.removeClass=null)}}function f(e){if(e=e||{},!e.$$prepared){var t=e.domOperation||D;e.domOperation=function(){e.$$domOperationFired=!0,t(),t=D},e.$$prepared=!0}return e}function p(e,t){h(e,t),g(e,t)}function h(e,t){t.from&&(e.css(t.from),t.from=null)}function g(e,t){t.to&&(e.css(t.to),t.to=null)}function v(e,t,n){var r=(t.addClass||"")+" "+(n.addClass||""),o=(t.removeClass||"")+" "+(n.removeClass||""),i=$(e.attr("class"),r,o);return I(t,n),t.addClass=i.addClass?i.addClass:null,t.removeClass=i.removeClass?i.removeClass:null,t}function $(e,t,n){function r(e){L(e)&&(e=e.split(" "));var t={};return P(e,function(e){e.length&&(t[e]=!0)}),t}var o=1,i=-1,a={};e=r(e),t=r(t),P(t,function(e,t){a[t]=o}),n=r(n),P(n,function(e,t){a[t]=a[t]===o?null:i});var s={addClass:"",removeClass:""};return P(a,function(t,n){var r,a;t===o?(r="addClass",a=!e[n]):t===i&&(r="removeClass",a=e[n]),a&&(s[r].length&&(s[r]+=" "),s[r]+=n)}),s}function b(e){return e instanceof t.element?e[0]:e}function E(e,t,n){var r=Object.create(null),o=e.getComputedStyle(t)||{};return P(n,function(e,t){var n=o[e];if(n){var i=n.charAt(0);("-"===i||"+"===i||i>=0)&&(n=y(n)),0===n&&(n=null),r[t]=n}}),r}function y(e){var t=0,n=e.split(/\s*,\s*/);return P(n,function(e){"s"==e.charAt(e.length-1)&&(e=e.substring(0,e.length-1)),e=parseFloat(e)||0,t=t?Math.max(e,t):e}),t}function M(e){return 0===e||null!=e}function w(e,t){var n=N,r=e+"s";return t?n+=Z:r+=" linear all",[n,r]}function C(e){return[ce,e+"s"]}function A(e,t){var n=t?se:le;return[n,e+"s"]}function x(e,t){var n=t?"-"+t+"s":"";return k(e,[le,n]),[le,n]}function T(e,t){var n=t?"paused":"",r=H+ne;return k(e,[r,n]),[r,n]}function k(e,t){var n=t[0],r=t[1];e.style[n]=r}function S(){var e=Object.create(null);return{flush:function(){e=Object.create(null)},count:function(t){var n=e[t];return n?n.total:0},get:function(t){var n=e[t];return n&&n.value},put:function(t,n){e[t]?e[t].total++:e[t]={total:1,value:n}}}}var N,_,H,O,D=t.noop,I=t.extend,R=t.element,P=t.forEach,j=t.isArray,L=t.isString,F=t.isObject,V=t.isUndefined,q=t.isDefined,B=t.isFunction,U=t.isElement,z=1,W="ng-animate",K="$$ngAnimateChildren",Y=["$$rAF",function(e){function t(e){i.push([].concat(e)),n()}function n(){if(i.length){for(var t=[],a=0;a<i.length;a++){var s=i[a];r(s),s.length&&t.push(s)}i=t,o||e(function(){o||n()})}}function r(e){var t=e.shift();t()}var o,i=[];return t.waitUntilQuiet=function(t){o&&o(),o=e(function(){o=null,t(),n()})},t}],G=[function(){return function(e,n,r){var o=r.ngAnimateChildren;t.isString(o)&&0===o.length?n.data(K,!0):r.$observe("ngAnimateChildren",function(e){e="on"===e||"true"===e,n.data(K,e)})}}],X="";e.ontransitionend===n&&e.onwebkittransitionend!==n?(X="-webkit-",N="WebkitTransition",_="webkitTransitionEnd transitionend"):(N="transition",_="transitionend"),e.onanimationend===n&&e.onwebkitanimationend!==n?(X="-webkit-",H="WebkitAnimation",O="webkitAnimationEnd animationend"):(H="animation",O="animationend");var Z="Duration",J="Property",Q="Delay",ee="TimingFunction",te="IterationCount",ne="PlayState",re=3,oe=1.5,ie=1e3,ae=9999,se=H+Q,ce=H+Z,le=N+Q,ue=N+Z,de={transitionDuration:ue,transitionDelay:le,transitionProperty:N+J,animationDuration:ce,animationDelay:se,animationIterationCount:H+te},me={transitionDuration:ue,transitionDelay:le,animationDuration:ce,animationDelay:se},fe=["$animateProvider",function(e){var t=S(),n=S();this.$get=["$window","$$jqLite","$$AnimateRunner","$timeout","$document","$sniffer","$$rAFScheduler",function(e,r,o,c,l,u,d){function v(e,t){var n="$$ngAnimateParentKey",r=e.parentNode,o=r[n]||(r[n]=++L);return o+"-"+e.getAttribute("class")+"-"+t}function $(n,r,o,i){var a=t.get(o);return a||(a=E(e,n,i),"infinite"===a.animationIterationCount&&(a.animationIterationCount=1)),t.put(o,a),a}function y(o,i,s,c){var l;if(t.count(s)>0&&(l=n.get(s),!l)){var u=a(i,"-stagger");r.addClass(o,u),l=E(e,o,c),l.animationDuration=Math.max(l.animationDuration,0),l.transitionDuration=Math.max(l.transitionDuration,0),r.removeClass(o,u),n.put(s,l)}return l||{}}function S(e){V.push(e),d.waitUntilQuiet(function(){t.flush(),n.flush();for(var e=F.offsetWidth+1,r=0;r<V.length;r++)V[r](e);V.length=0})}function D(e,t,n){var r=$(e,t,n,de),o=r.animationDelay,i=r.transitionDelay;return r.maxDelay=o&&i?Math.max(o,i):o||i,r.maxDuration=Math.max(r.animationDuration*r.animationIterationCount,r.transitionDuration),r}function I(e,n){function l(){m()}function d(){m(!0)}function m(t){F||q&&V||(F=!0,V=!1,r.removeClass(e,ce),r.removeClass(e,ue),T(L,!1),x(L,!1),P(G,function(e){L.style[e[0]]=""}),R(e,n),p(e,n),n.onDone&&n.onDone(),B&&B.complete(!t))}function $(e){Ae.blockTransition&&x(L,e),Ae.blockKeyframeAnimation&&T(L,!!e)}function E(){return B=new o({end:l,cancel:d}),m(),{$$willAnimate:!1,start:function(){return B},end:l}}function I(){function t(){if(!F){if($(!1),P(G,function(e){var t=e[0],n=e[1];L.style[t]=n}),R(e,n),r.addClass(e,ue),Ae.recalculateTimingStyles){if(le=L.className+" "+ce,pe=v(L,le),we=D(L,le,pe),Ce=we.maxDelay,z=Math.max(Ce,0),K=we.maxDuration,0===K)return void m();Ae.hasTransitions=we.transitionDuration>0,Ae.hasAnimations=we.animationDuration>0}if(Ae.applyTransitionDelay||Ae.applyAnimationDelay){Ce="boolean"!=typeof n.delay&&M(n.delay)?parseFloat(n.delay):Ce,z=Math.max(Ce,0);var t;Ae.applyTransitionDelay&&(we.transitionDelay=Ce,t=A(Ce),G.push(t),L.style[t[0]]=t[1]),Ae.applyAnimationDelay&&(we.animationDelay=Ce,t=A(Ce,!0),G.push(t),L.style[t[0]]=t[1])}if(W=z*ie,Y=K*ie,n.easing){var s,u=n.easing;Ae.hasTransitions&&(s=N+ee,G.push([s,u]),L.style[s]=u),Ae.hasAnimations&&(s=H+ee,G.push([s,u]),L.style[s]=u)}we.transitionDuration&&l.push(_),we.animationDuration&&l.push(O),a=Date.now(),e.on(l.join(" "),i),c(o,W+oe*Y),g(e,n)}}function o(){m()}function i(e){e.stopPropagation();var t=e.originalEvent||e,n=t.$manualTimeStamp||t.timeStamp||Date.now(),r=parseFloat(t.elapsedTime.toFixed(re));Math.max(n-a,0)>=W&&r>=K&&(q=!0,m())}if(!F){if(!L.parentNode)return void m();var a,l=[],u=function(e){if(q)V&&e&&(V=!1,m());else if(V=!e,we.animationDuration){var t=T(L,V);V?G.push(t):s(G,t)}},d=ye>0&&(we.transitionDuration&&0===he.transitionDuration||we.animationDuration&&0===he.animationDuration)&&Math.max(he.animationDelay,he.transitionDelay);d?c(t,Math.floor(d*ye*ie),!1):t(),U.resume=function(){u(!0)},U.pause=function(){u(!1)}}}var L=b(e);if(!L||!L.parentNode)return E();n=f(n);var F,V,q,B,U,z,W,K,Y,G=[],X=e.attr("class"),Z=i(n);if(0===n.duration||!u.animations&&!u.transitions)return E();var Q=n.event&&j(n.event)?n.event.join(" "):n.event,te=Q&&n.structural,ne="",se="";te?ne=a(Q,"ng-",!0):Q&&(ne=Q),n.addClass&&(se+=a(n.addClass,"-add")),n.removeClass&&(se.length&&(se+=" "),se+=a(n.removeClass,"-remove")),n.applyClassesEarly&&se.length&&(R(e,n),se="");var ce=[ne,se].join(" ").trim(),le=X+" "+ce,ue=a(ce,"-active"),de=Z.to&&Object.keys(Z.to).length>0,fe=(n.keyframeStyle||"").length>0;if(!fe&&!de&&!ce)return E();var pe,he;if(n.stagger>0){var ge=parseFloat(n.stagger);he={transitionDelay:ge,animationDelay:ge,transitionDuration:0,animationDuration:0}}else pe=v(L,le),he=y(L,ce,pe,me);r.addClass(e,ce);var ve;if(n.transitionStyle){var $e=[N,n.transitionStyle];k(L,$e),G.push($e)}if(n.duration>=0){ve=L.style[N].length>0;var be=w(n.duration,ve);k(L,be),G.push(be)}if(n.keyframeStyle){var Ee=[H,n.keyframeStyle];k(L,Ee),G.push(Ee)}var ye=he?n.staggerIndex>=0?n.staggerIndex:t.count(pe):0,Me=0===ye;Me&&x(L,ae);var we=D(L,le,pe),Ce=we.maxDelay;z=Math.max(Ce,0),K=we.maxDuration;var Ae={};return Ae.hasTransitions=we.transitionDuration>0,Ae.hasAnimations=we.animationDuration>0,Ae.hasTransitionAll=Ae.hasTransitions&&"all"==we.transitionProperty,Ae.applyTransitionDuration=de&&(Ae.hasTransitions&&!Ae.hasTransitionAll||Ae.hasAnimations&&!Ae.hasTransitions),Ae.applyAnimationDuration=n.duration&&Ae.hasAnimations,Ae.applyTransitionDelay=M(n.delay)&&(Ae.applyTransitionDuration||Ae.hasTransitions),Ae.applyAnimationDelay=M(n.delay)&&Ae.hasAnimations,Ae.recalculateTimingStyles=se.length>0,(Ae.applyTransitionDuration||Ae.applyAnimationDuration)&&(K=n.duration?parseFloat(n.duration):K,Ae.applyTransitionDuration&&(Ae.hasTransitions=!0,we.transitionDuration=K,ve=L.style[N+J].length>0,G.push(w(K,ve))),Ae.applyAnimationDuration&&(Ae.hasAnimations=!0,we.animationDuration=K,G.push(C(K)))),0!==K||Ae.recalculateTimingStyles?(null==n.duration&&we.transitionDuration>0&&(Ae.recalculateTimingStyles=Ae.recalculateTimingStyles||Me),W=z*ie,Y=K*ie,n.skipBlocking||(Ae.blockTransition=we.transitionDuration>0,Ae.blockKeyframeAnimation=we.animationDuration>0&&he.animationDelay>0&&0===he.animationDuration),h(e,n),Ae.blockTransition||x(L,!1),$(K),{$$willAnimate:!0,end:l,start:function(){return F?void 0:(U={end:l,cancel:d,resume:null,pause:null},B=new o(U),S(I),B)}}):E()}var R=m(r),L=0,F=b(l).body,V=[];return I}]}],pe=["$$animationProvider",function(e){e.drivers.push("$$animateCssDriver");var t="ng-animate-shim",n="ng-anchor",r="ng-anchor-out",o="ng-anchor-in";this.$get=["$animateCss","$rootScope","$$AnimateRunner","$rootElement","$document","$sniffer",function(e,i,a,s,c,l){function u(e){return e.replace(/\bng-\S+\b/g,"")}function d(e,t){return L(e)&&(e=e.split(" ")),L(t)&&(t=t.split(" ")),e.filter(function(e){return-1===t.indexOf(e)}).join(" ")}function m(i,s,c){function l(e){var t={},n=b(e).getBoundingClientRect();return P(["width","height","top","left"],function(e){var r=n[e];switch(e){case"top":r+=h.scrollTop;break;case"left":r+=h.scrollLeft}t[e]=Math.floor(r)+"px"}),t}function m(){var t=e($,{addClass:r,delay:!0,from:l(s)});return t.$$willAnimate?t:null}function f(e){return e.attr("class")||""}function p(){var t=u(f(c)),n=d(t,E),i=d(E,t),a=e($,{to:l(c),addClass:o+" "+n,removeClass:r+" "+i,delay:!0});return a.$$willAnimate?a:null}function g(){$.remove(),s.removeClass(t),c.removeClass(t)}var $=R(b(s).cloneNode(!0)),E=u(f($));s.addClass(t),c.addClass(t),$.addClass(n),v.append($);var y,M=m();if(!M&&(y=p(),!y))return g();var w=M||y;return{start:function(){function e(){n&&n.end()}var t,n=w.start();return n.done(function(){return n=null,!y&&(y=p())?(n=y.start(),n.done(function(){n=null,g(),t.complete()}),n):(g(),void t.complete())}),t=new a({end:e,cancel:e})}}}function f(e,t,n,r){var o=p(e),i=p(t),s=[];return P(r,function(e){var t=e.out,r=e["in"],o=m(n,t,r);o&&s.push(o)}),o||i||0!==s.length?{start:function(){function e(){P(t,function(e){e.end()})}var t=[];o&&t.push(o.start()),i&&t.push(i.start()),P(s,function(e){t.push(e.start())});var n=new a({end:e,cancel:e});return a.all(t,function(e){n.complete(e)}),n}}:void 0}function p(t){var n=t.element,r=t.options||{};t.structural?(r.structural=r.applyClassesEarly=!0,r.event=t.event,"leave"===r.event&&(r.onDone=r.domOperation)):r.event=null;var o=e(n,r);return o.$$willAnimate?o:null}if(!l.animations&&!l.transitions)return D;var h=b(c).body,g=b(s),v=R(h.parentNode===g?h:g);return function(e){return e.from&&e.to?f(e.from,e.to,e.classes,e.anchors):p(e)}}]}],he=["$animateProvider",function(e){this.$get=["$injector","$$AnimateRunner","$$rAFMutex","$$jqLite",function(t,n,r,o){function i(n){n=j(n)?n:n.split(" ");for(var r=[],o={},i=0;i<n.length;i++){var a=n[i],s=e.$$registeredAnimations[a];s&&!o[a]&&(r.push(t.get(s)),o[a]=!0)}return r}var a=m(o);return function(e,t,r,o){function s(){o.domOperation(),a(e,o)}function c(e,t,r,o,i){var a;switch(r){case"animate":a=[t,o.from,o.to,i];break;case"setClass":a=[t,h,g,i];break;case"addClass":a=[t,h,i];break;case"removeClass":a=[t,g,i];break;default:a=[t,i]}a.push(o);var s=e.apply(e,a);if(s)if(B(s.start)&&(s=s.start()),s instanceof n)s.done(i);else if(B(s))return s;return D}function l(e,t,r,o,i){var a=[];return P(o,function(o){var s=o[i];s&&a.push(function(){var o,i,a=!1,l=function(e){a||(a=!0,(i||D)(e),o.complete(!e))};return o=new n({end:function(){l()},cancel:function(){l(!0)}}),i=c(s,e,t,r,function(e){var t=e===!1;l(t)}),o})}),a}function u(e,t,r,o,i){var a=l(e,t,r,o,i);if(0===a.length){var s,c;"beforeSetClass"===i?(s=l(e,"removeClass",r,o,"beforeRemoveClass"),c=l(e,"addClass",r,o,"beforeAddClass")):"setClass"===i&&(s=l(e,"removeClass",r,o,"removeClass"),c=l(e,"addClass",r,o,"addClass")),s&&(a=a.concat(s)),c&&(a=a.concat(c))}if(0!==a.length)return function(e){var t=[];return a.length&&P(a,function(e){t.push(e())}),t.length?n.all(t,e):e(),function(e){P(t,function(t){e?t.cancel():t.end()})}}}3===arguments.length&&F(r)&&(o=r,r=null),o=f(o),r||(r=e.attr("class")||"",o.addClass&&(r+=" "+o.addClass),o.removeClass&&(r+=" "+o.removeClass));var d,m,h=o.addClass,g=o.removeClass,v=i(r);if(v.length){var $,b;"leave"==t?(b="leave",$="afterLeave"):(b="before"+t.charAt(0).toUpperCase()+t.substr(1),$=t),"enter"!==t&&"move"!==t&&(d=u(e,t,o,v,b)),m=u(e,t,o,v,$)}return d||m?{start:function(){function t(t){c=!0,s(),p(e,o),l.complete(t)}function r(e){c||((i||D)(e),t(e))}var i,a=[];d&&a.push(function(e){i=d(e)}),a.length?a.push(function(e){s(),e(!0)}):s(),m&&a.push(function(e){i=m(e)});var c=!1,l=new n({end:function(){r()},cancel:function(){r(!0)}});return n.chain(a,t),l}}:void 0}}]}],ge=["$$animationProvider",function(e){e.drivers.push("$$animateJsDriver"),this.$get=["$$animateJs","$$AnimateRunner",function(e,t){function n(t){var n=t.element,r=t.event,o=t.options,i=t.classes;return e(n,r,i,o)}return function(e){if(e.from&&e.to){var r=n(e.from),o=n(e.to);if(!r&&!o)return;return{start:function(){function e(){return function(){P(i,function(e){e.end()})}}function n(e){a.complete(e)}var i=[];r&&i.push(r.start()),o&&i.push(o.start()),t.all(i,n);var a=new t({end:e(),cancel:e()});return a}}}return n(e)}}]}],ve="data-ng-animate",$e="$ngAnimatePin",be=["$animateProvider",function(e){function t(e,t,n,r){return a[e].some(function(e){return e(t,n,r)})}function n(e,t){e=e||{};var n=(e.addClass||"").length>0,r=(e.removeClass||"").length>0;return t?n&&r:n||r}var o=1,i=2,a=this.rules={skip:[],cancel:[],join:[]};a.join.push(function(e,t,r){return!t.structural&&n(t.options)}),a.skip.push(function(e,t,r){return!t.structural&&!n(t.options)}),a.skip.push(function(e,t,n){return"leave"==n.event&&t.structural}),a.skip.push(function(e,t,n){return n.structural&&!t.structural}),a.cancel.push(function(e,t,n){return n.structural&&t.structural}),a.cancel.push(function(e,t,n){return n.state===i&&t.structural}),a.cancel.push(function(e,t,n){var r=t.options,o=n.options;return r.addClass&&r.addClass===o.removeClass||r.removeClass&&r.removeClass===o.addClass}),this.$get=["$$rAF","$rootScope","$rootElement","$document","$$HashMap","$$animation","$$AnimateRunner","$templateRequest","$$jqLite",function(a,s,u,d,h,g,$,E,y){function M(e,t){return v(e,t,{})}function w(e,t){var n=b(e),r=[],o=W[t];return o&&P(o,function(e){e.node.contains(n)&&r.push(e.callback)}),r}function C(e,t,n,r){a(function(){P(w(t,e),function(e){e(t,n,r)})})}function A(e,r,a){function l(t,n,r,o){C(n,e,r,o),t.progress(n,r,o)}function u(t){X(e,a),p(e,a),a.domOperation(),h.complete(!t)}var d,m;e=c(e),e&&(d=b(e),m=e.parent()),a=f(a);var h=new $;if(!d)return u(),h;j(a.addClass)&&(a.addClass=a.addClass.join(" ")),j(a.removeClass)&&(a.removeClass=a.removeClass.join(" ")),a.from&&!F(a.from)&&(a.from=null),a.to&&!F(a.to)&&(a.to=null);var E=[d.className,a.addClass,a.removeClass].join(" ");if(!G(E))return u(),h;var y=["enter","move","leave"].indexOf(r)>=0,w=!D||O.get(d),A=!w&&H.get(d)||{},k=!!A.state;if(w||k&&A.state==o||(w=!N(e,m,r)),w)return u(),h;y&&x(e);var I={structural:y,element:e,event:r,close:u,options:a,runner:h};if(k){var R=t("skip",e,I,A);if(R)return A.state===i?(u(),h):(v(e,A.options,a),A.runner);var P=t("cancel",e,I,A);if(P)A.state===i?A.runner.end():A.structural?A.close():v(e,I.options,A.options);else{var L=t("join",e,I,A);if(L){if(A.state!==i)return r=I.event=A.event,a=v(e,A.options,I.options),h;M(e,a)}}}else M(e,a);var V=I.structural;if(V||(V="animate"===I.event&&Object.keys(I.options.to||{}).length>0||n(I.options)),!V)return u(),T(e),h;y&&S(m);var q=(A.counter||0)+1;return I.counter=q,_(e,o,I),s.$$postDigest(function(){var t=H.get(d),o=!t;t=t||{};var s=e.parent()||[],c=s.length>0&&("animate"===t.event||t.structural||n(t.options));if(o||t.counter!==q||!c)return o&&(X(e,a),p(e,a)),(o||y&&t.event!==r)&&(a.domOperation(),h.end()),void(c||T(e));r=!t.structural&&n(t.options,!0)?"setClass":t.event,t.structural&&S(s),_(e,i);var m=g(e,r,t.options);m.done(function(t){u(!t);var n=H.get(d);n&&n.counter===q&&T(b(e)),l(h,r,"close",{})}),h.setHost(m),l(h,r,"start",{})}),h}function x(e){var t=b(e),n=t.querySelectorAll("["+ve+"]");P(n,function(e){var t=parseInt(e.getAttribute(ve)),n=H.get(e);switch(t){case i:n.runner.end();case o:n&&H.remove(e)}})}function T(e){var t=b(e);t.removeAttribute(ve),H.remove(t)}function k(e,t){return b(e)===b(t)}function S(e){function t(e,t){!t.structural&&n(t.options)&&(t.state===i&&t.runner.end(),T(e))}for(var r=b(e);;){if(!r||r.nodeType!==z)break;var o=H.get(r);o&&t(r,o),r=r.parentNode}}function N(e,t,n){var r,o=!1,i=!1,a=!1,s=e.data($e);for(s&&(t=s);t&&t.length;){i||(i=k(t,u));var c=t[0];if(c.nodeType!==z)break;var l=H.get(c)||{};if(a||(a=l.structural||O.get(c)),V(r)||r===!0){var d=t.data(K);q(d)&&(r=d)}if(a&&r===!1)break;i||(i=k(t,u),i||(s=t.data($e),s&&(t=s))),o||(o=k(t,B)),t=t.parent()}var m=!a||r;return m&&i&&o}function _(e,t,n){n=n||{},n.state=t;var r=b(e);r.setAttribute(ve,t);var o=H.get(r),i=o?I(o,n):n;H.put(r,i)}var H=new h,O=new h,D=null,L=s.$watch(function(){return 0===E.totalPendingRequests},function(e){e&&(L(),s.$$postDigest(function(){s.$$postDigest(function(){null===D&&(D=!0)})}))}),B=R(d[0].body),W={},Y=e.classNameFilter(),G=Y?function(e){return Y.test(e)}:function(){return!0},X=m(y);return{on:function(e,t,n){var r=l(t);W[e]=W[e]||[],W[e].push({node:r,callback:n})},off:function(e,t,n){function r(e,t,n){var r=l(t);return e.filter(function(e){var t=e.node===r&&(!n||e.callback===n);return!t})}var o=W[e];o&&(W[e]=1===arguments.length?null:r(o,t,n))},pin:function(e,t){r(U(e),"element","not an element"),r(U(t),"parentElement","not an element"),e.data($e,t)},push:function(e,t,n,r){return n=n||{},n.domOperation=r,A(e,t,n)},enabled:function(e,t){var n=arguments.length;if(0===n)t=!!D;else{var r=U(e);if(r){var o=b(e),i=O.get(o);1===n?t=!i:(t=!!t,t?i&&O.remove(o):O.put(o,!0))}else t=D=!!e}return t}}}]}],Ee=["$$rAF",function(e){return function(){var t=!1;return e(function(){t=!0}),function(n){t?n():e(n)}}}],ye=["$q","$$rAFMutex",function(e,t){function n(e){this.setHost(e),this._doneCallbacks=[],this._runInAnimationFrame=t(),this._state=0}var r=0,o=1,i=2;return n.chain=function(e,t){function n(){return r===e.length?void t(!0):void e[r](function(e){return e===!1?void t(!1):(r++,void n())})}var r=0;n()},n.all=function(e,t){function n(n){o=o&&n,++r===e.length&&t(o)}var r=0,o=!0;P(e,function(e){e.done(n)})},n.prototype={setHost:function(e){this.host=e||{}},done:function(e){this._state===i?e():this._doneCallbacks.push(e)},progress:D,getPromise:function(){if(!this.promise){var t=this;this.promise=e(function(e,n){t.done(function(t){t===!1?n():e()})})}return this.promise},then:function(e,t){return this.getPromise().then(e,t)},"catch":function(e){return this.getPromise()["catch"](e)},"finally":function(e){return this.getPromise()["finally"](e)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(e){var t=this;t._state===r&&(t._state=o,t._runInAnimationFrame(function(){t._resolve(e)}))},_resolve:function(e){this._state!==i&&(P(this._doneCallbacks,function(t){t(e)}),this._doneCallbacks.length=0,this._state=i)}},n}],Me=["$animateProvider",function(e){function t(e,t){e.data(s,t)}function n(e){e.removeData(s)}function r(e){return e.data(s)}var i="ng-animate-ref",a=this.drivers=[],s="$$animationRunner";this.$get=["$$jqLite","$rootScope","$injector","$$AnimateRunner","$$rAFScheduler",function(e,s,c,l,u){var d=[],h=m(e),g=0,v=0,$=[];return function(m,E,y){function M(e){var t="["+i+"]",n=e.hasAttribute(i)?[e]:e.querySelectorAll(t),r=[];return P(n,function(e){var t=e.getAttribute(i);t&&t.length&&r.push(e)}),r}function w(e){var t=[],n={};P(e,function(e,r){var o=e.element,a=b(o),s=e.event,c=["enter","move"].indexOf(s)>=0,l=e.structural?M(a):[];if(l.length){var u=c?"to":"from";P(l,function(e){var t=e.getAttribute(i);n[t]=n[t]||{},n[t][u]={animationID:r,element:R(e)}})}else t.push(e)});var r={},o={};return P(n,function(n,i){var a=n.from,s=n.to;if(!a||!s){var c=a?a.animationID:s.animationID,l=c.toString();return void(r[l]||(r[l]=!0,t.push(e[c])))}var u=e[a.animationID],d=e[s.animationID],m=a.animationID.toString();if(!o[m]){var f=o[m]={structural:!0,beforeStart:function(){u.beforeStart(),d.beforeStart()},close:function(){u.close(),d.close()},classes:C(u.classes,d.classes),from:u,to:d,anchors:[]};f.classes.length?t.push(f):(t.push(u),t.push(d))}o[m].anchors.push({out:a.element,"in":s.element})}),t}function C(e,t){e=e.split(" "),t=t.split(" ");for(var n=[],r=0;r<e.length;r++){var o=e[r];if("ng-"!==o.substring(0,3))for(var i=0;i<t.length;i++)if(o===t[i]){n.push(o);break}}return n.join(" ")}function A(e){for(var t=a.length-1;t>=0;t--){var n=a[t];if(c.has(n)){var r=c.get(n),o=r(e);if(o)return o}}}function x(){m.addClass(W),O&&e.addClass(m,O)}function T(e,t){function n(e){r(e).setHost(t)}e.from&&e.to?(n(e.from.element),n(e.to.element)):n(e.element)}function k(){var e=r(m);!e||"leave"===E&&y.$$domOperationFired||e.end()}function S(t){m.off("$destroy",k),n(m),h(m,y),p(m,y),y.domOperation(),O&&e.removeClass(m,O),m.removeClass(W),_.complete(!t)}y=f(y);var N=["enter","move","leave"].indexOf(E)>=0,_=new l({end:function(){S()},cancel:function(){S(!0)}});if(!a.length)return S(),_;t(m,_);var H=o(m.attr("class"),o(y.addClass,y.removeClass)),O=y.tempClasses;O&&(H+=" "+O,y.tempClasses=null);var D;return N||(D=g,g+=1),d.push({element:m,classes:H,event:E,classBasedIndex:D,structural:N,options:y,beforeStart:x,close:S}),m.on("$destroy",k),d.length>1?_:(s.$$postDigest(function(){v=g,g=0,$.length=0;var e=[];P(d,function(t){r(t.element)&&e.push(t)}),d.length=0,P(w(e),function(e){function t(){e.beforeStart();var t,n=e.close,o=e.anchors?e.from.element||e.to.element:e.element;if(r(o)&&b(o).parentNode){var i=A(e);i&&(t=i.start)}if(t){var a=t();a.done(function(e){n(!e)}),T(e,a)}else n()}e.structural?t():($.push({node:b(e.element),fn:t}),e.classBasedIndex===v-1&&($=$.sort(function(e,t){return t.node.contains(e.node)}).map(function(e){return e.fn}),u($)))})}),_)}}]}];t.module("ngAnimate",[]).directive("ngAnimateChildren",G).factory("$$rAFMutex",Ee).factory("$$rAFScheduler",Y).factory("$$AnimateRunner",ye).provider("$$animateQueue",be).provider("$$animation",Me).provider("$animateCss",fe).provider("$$animateCssDriver",pe).provider("$$animateJs",he).provider("$$animateJsDriver",ge)}(window,window.angular)},{}],8:[function(e,t,n){e("./angular-animate"),t.exports="ngAnimate"},{"./angular-animate":7}],9:[function(e,t,n){!function(e,t,n){"use strict";function r(){function e(e,t,r){return function(o,i,a){var s=a.$normalize(t);n[s]&&!a[s]&&o.$watch(a[e],function(e){e=r?!e:!!e,i.attr(t,e)})}}var n={ariaHidden:!0,ariaChecked:!0,ariaDisabled:!0,ariaRequired:!0,ariaInvalid:!0,ariaMultiline:!0,ariaValue:!0,tabindex:!0,bindKeypress:!0,bindRoleForClick:!0};this.config=function(e){n=t.extend(n,e)},this.$get=function(){return{config:function(e){return n[e]},$$watchExpr:e}}}var o=t.module("ngAria",["ng"]).provider("$aria",r);o.directive("ngShow",["$aria",function(e){return e.$$watchExpr("ngShow","aria-hidden",!0)}]).directive("ngHide",["$aria",function(e){return e.$$watchExpr("ngHide","aria-hidden",!1)}]).directive("ngModel",["$aria",function(e){function t(t,n,r){return e.config(n)&&!r.attr(t)}function n(e,t){return!t.attr("role")&&t.attr("type")===e&&"INPUT"!==t[0].nodeName}function r(e,t){var n=e.type,r=e.role;return"checkbox"===(n||r)||"menuitemcheckbox"===r?"checkbox":"radio"===(n||r)||"menuitemradio"===r?"radio":"range"===n||"progressbar"===r||"slider"===r?"range":"textbox"===(n||r)||"TEXTAREA"===t[0].nodeName?"multiline":""}return{restrict:"A",require:"?ngModel",priority:200,compile:function(o,i){var a=r(i,o);return{pre:function(e,t,n,r){"checkbox"===a&&"checkbox"!==n.type&&(r.$isEmpty=function(e){return e===!1})},post:function(r,o,i,s){function c(){return s.$modelValue}function l(){return d?(d=!1,function(e){var t=i.value==s.$viewValue;o.attr("aria-checked",t),o.attr("tabindex",0-!t)}):function(e){o.attr("aria-checked",i.value==s.$viewValue)}}function u(){o.attr("aria-checked",!s.$isEmpty(s.$viewValue))}var d=t("tabindex","tabindex",o);switch(a){case"radio":case"checkbox":n(a,o)&&o.attr("role",a),t("aria-checked","ariaChecked",o)&&r.$watch(c,"radio"===a?l():u);break;case"range":if(n(a,o)&&o.attr("role","slider"),e.config("ariaValue")){var m=!o.attr("aria-valuemin")&&(i.hasOwnProperty("min")||i.hasOwnProperty("ngMin")),f=!o.attr("aria-valuemax")&&(i.hasOwnProperty("max")||i.hasOwnProperty("ngMax")),p=!o.attr("aria-valuenow");m&&i.$observe("min",function(e){o.attr("aria-valuemin",e)}),f&&i.$observe("max",function(e){o.attr("aria-valuemax",e)}),p&&r.$watch(c,function(e){o.attr("aria-valuenow",e)})}break;case"multiline":t("aria-multiline","ariaMultiline",o)&&o.attr("aria-multiline",!0)}d&&o.attr("tabindex",0),s.$validators.required&&t("aria-required","ariaRequired",o)&&r.$watch(function(){return s.$error.required},function(e){o.attr("aria-required",!!e)}),t("aria-invalid","ariaInvalid",o)&&r.$watch(function(){return s.$invalid},function(e){o.attr("aria-invalid",!!e)})}}}}}]).directive("ngDisabled",["$aria",function(e){return e.$$watchExpr("ngDisabled","aria-disabled")}]).directive("ngMessages",function(){
return{restrict:"A",require:"?ngMessages",link:function(e,t,n,r){t.attr("aria-live")||t.attr("aria-live","assertive")}}}).directive("ngClick",["$aria","$parse",function(e,t){return{restrict:"A",compile:function(n,r){var o=t(r.ngClick,null,!0);return function(t,n,r){function i(e,t){return-1!==t.indexOf(e[0].nodeName)?!0:void 0}var a=["BUTTON","A","INPUT","TEXTAREA"];!e.config("bindRoleForClick")||n.attr("role")||i(n,a)||n.attr("role","button"),e.config("tabindex")&&!n.attr("tabindex")&&n.attr("tabindex",0),!e.config("bindKeypress")||r.ngKeypress||i(n,a)||n.on("keypress",function(e){function n(){o(t,{$event:e})}var r=e.which||e.keyCode;(32===r||13===r)&&t.$apply(n)})}}}}]).directive("ngDblclick",["$aria",function(e){return function(t,n,r){e.config("tabindex")&&!n.attr("tabindex")&&n.attr("tabindex",0)}}])}(window,window.angular)},{}],10:[function(e,t,n){e("./angular-aria"),t.exports="ngAria"},{"./angular-aria":9}],11:[function(e,t,n){!function(e,t,n){"use strict";!function(){t.module("ngMaterial",["ng","ngAnimate","ngAria","material.core","material.core.gestures","material.core.theming.palette","material.core.theming","material.components.autocomplete","material.components.backdrop","material.components.bottomSheet","material.components.button","material.components.card","material.components.checkbox","material.components.content","material.components.chips","material.components.dialog","material.components.fabActions","material.components.divider","material.components.fabSpeedDial","material.components.fabToolbar","material.components.gridList","material.components.fabTrigger","material.components.icon","material.components.input","material.components.list","material.components.menu","material.components.progressCircular","material.components.progressLinear","material.components.radioButton","material.components.select","material.components.sidenav","material.components.slider","material.components.subheader","material.components.sticky","material.components.swipe","material.components.switch","material.components.tabs","material.components.toast","material.components.toolbar","material.components.tooltip","material.components.whiteframe"])}(),function(){function e(e,t){e.decorator("$$rAF",["$delegate",n]),t.theme("default").primaryPalette("indigo").accentPalette("pink").warnPalette("red").backgroundPalette("grey")}function n(e){return e.throttle=function(t){var n,r,o,i;return function(){n=arguments,i=this,o=t,r||(r=!0,e(function(){o.apply(i,n),r=!1}))}},e}t.module("material.core",["material.core.gestures","material.core.theming"]).config(e),e.$inject=["$provide","$mdThemingProvider"]}(),function(){function e(e,t){function n(e){return r?"webkit"+e.charAt(0).toUpperCase()+e.substring(1):e}var r=/webkit/i.test(t.vendorPrefix);return{KEY_CODE:{ENTER:13,ESCAPE:27,SPACE:32,LEFT_ARROW:37,UP_ARROW:38,RIGHT_ARROW:39,DOWN_ARROW:40,TAB:9,BACKSPACE:8,DELETE:46},CSS:{TRANSITIONEND:"transitionend"+(r?" webkitTransitionEnd":""),ANIMATIONEND:"animationend"+(r?" webkitAnimationEnd":""),TRANSFORM:n("transform"),TRANSFORM_ORIGIN:n("transformOrigin"),TRANSITION:n("transition"),TRANSITION_DURATION:n("transitionDuration"),ANIMATION_PLAY_STATE:n("animationPlayState"),ANIMATION_DURATION:n("animationDuration"),ANIMATION_NAME:n("animationName"),ANIMATION_TIMING:n("animationTimingFunction"),ANIMATION_DIRECTION:n("animationDirection")},MEDIA:{sm:"(max-width: 600px)","gt-sm":"(min-width: 600px)",md:"(min-width: 600px) and (max-width: 960px)","gt-md":"(min-width: 960px)",lg:"(min-width: 960px) and (max-width: 1200px)","gt-lg":"(min-width: 1200px)"},MEDIA_PRIORITY:["gt-lg","lg","gt-md","md","gt-sm","sm"]}}t.module("material.core").factory("$mdConstant",e),e.$inject=["$$rAF","$sniffer"]}(),function(){function e(e,n){function r(){return[].concat($)}function o(){return $.length}function i(e){return $.length&&e>-1&&e<$.length}function a(e){return e?i(m(e)+1):!1}function s(e){return e?i(m(e)-1):!1}function c(e){return i(e)?$[e]:null}function l(e,t){return $.filter(function(n){return n[e]===t})}function u(e,n){return e?(t.isNumber(n)||(n=$.length),$.splice(n,0,e),m(e)):-1}function d(e){f(e)&&$.splice(m(e),1)}function m(e){return $.indexOf(e)}function f(e){return e&&m(e)>-1}function p(){return $.length?$[0]:null}function h(){return $.length?$[$.length-1]:null}function g(e,r,o,a){o=o||v;for(var s=m(r);;){if(!i(s))return null;var c=s+(e?-1:1),l=null;if(i(c)?l=$[c]:n&&(l=e?h():p(),c=m(l)),null===l||c===a)return null;if(o(l))return l;t.isUndefined(a)&&(a=c),s=c}}var v=function(){return!0};e&&!t.isArray(e)&&(e=Array.prototype.slice.call(e)),n=!!n;var $=e||[];return{items:r,count:o,inRange:i,contains:f,indexOf:m,itemAt:c,findBy:l,add:u,remove:d,first:p,last:h,next:t.bind(null,g,!1),previous:t.bind(null,g,!0),hasPrevious:s,hasNext:a}}t.module("material.core").config(["$provide",function(t){t.decorator("$mdUtil",["$delegate",function(t){return t.iterator=e,t}])}])}(),function(){function e(e,n,r){function o(e){var n=m[e];t.isUndefined(n)&&(n=m[e]=i(e));var r=p[n];return t.isUndefined(r)&&(r=a(n)),r}function i(t){return e.MEDIA[t]||("("!==t.charAt(0)?"("+t+")":t)}function a(e){var t=f[e]=r.matchMedia(e);return t.addListener(s),p[t.media]=!!t.matches}function s(e){n.$evalAsync(function(){p[e.media]=!!e.matches})}function c(e){return f[e]}function l(t,n){for(var r=0;r<e.MEDIA_PRIORITY.length;r++){var o=e.MEDIA_PRIORITY[r];if(f[m[o]].matches){var i=d(t,n+"-"+o);if(t[i])return t[i]}}return t[d(t,n)]}function u(n,r,o){var i=[];return n.forEach(function(n){var a=d(r,n);r[a]&&i.push(r.$observe(a,t.bind(void 0,o,null)));for(var s in e.MEDIA){if(a=d(r,n+"-"+s),!r[a])return;i.push(r.$observe(a,t.bind(void 0,o,s)))}}),function(){i.forEach(function(e){e()})}}function d(e,t){return h[t]||(h[t]=e.$normalize(t))}var m={},f={},p={},h={};return o.getResponsiveAttribute=l,o.getQuery=c,o.watchResponsiveAttributes=u,o}t.module("material.core").factory("$mdMedia",e),e.$inject=["$mdConstant","$rootScope","$window"]}(),function(){var r=0;t.module("material.core").factory("$mdUtil",["$cacheFactory","$document","$timeout","$q","$window","$mdConstant",function(o,i,a,s,c,l){function u(e){return e[0]||e}var d;return d={now:e.performance?t.bind(e.performance,e.performance.now):Date.now,clientRect:function(e,t,n){var r=u(e);t=u(t||r.offsetParent||document.body);var o=r.getBoundingClientRect(),i=n?t.getBoundingClientRect():{left:0,top:0,width:0,height:0};return{left:o.left-i.left,top:o.top-i.top,width:o.width,height:o.height}},offsetRect:function(e,t){return d.clientRect(e,t,!0)},nodesToArray:function(e){for(var t=[],n=0;n<e.length;++n)t.push(e.item(n));return t},disableScrollAround:function(e){function n(){function n(e){}function r(e){e.preventDefault()}var o=c.getComputedStyle(e[0]).zIndex-1;isNaN(o)&&(o=99);var s=t.element('<div class="md-scroll-mask" style="z-index: '+o+'">  <div class="md-scroll-mask-bar"></div></div>');return a.appendChild(s[0]),s.on("wheel",r),s.on("touchmove",r),i.on("keydown",n),function(){s.off("wheel"),s.off("touchmove"),s[0].parentNode.removeChild(s[0]),i.off("keydown",n),delete d.disableScrollAround._enableScrolling}}function r(){var e=a.getAttribute("style")||"",t=a.scrollTop+a.parentElement.scrollTop;return o(a,{position:"fixed",width:"100%",overflowY:"scroll",top:-t+"px"}),function(){a.setAttribute("style",e),a.scrollTop=t}}function o(e,t){for(var n in t)e.style[n]=t[n]}if(d.disableScrollAround._enableScrolling)return d.disableScrollAround._enableScrolling;e=t.element(e);var a=i[0].body,s=r(),l=n();return d.disableScrollAround._enableScrolling=function(){s(),l(),delete d.disableScrollAround._enableScrolling}},enableScrolling:function(){var e=this.disableScrollAround._enableScrolling;e&&e()},floatingScrollbars:function(){if(this.floatingScrollbars.cached===n){var e=t.element('<div style="width: 100%; z-index: -1; position: absolute; height: 35px; overflow-y: scroll"><div style="height: 60;"></div></div>');i[0].body.appendChild(e[0]),this.floatingScrollbars.cached=e[0].offsetWidth==e[0].childNodes[0].offsetWidth,e.remove()}return this.floatingScrollbars.cached},forceFocus:function(t){var n=t[0]||t;document.addEventListener("click",function o(e){e.target===n&&e.$focus&&(n.focus(),e.stopImmediatePropagation(),e.preventDefault(),n.removeEventListener("click",o))},!0);var r=document.createEvent("MouseEvents");r.initMouseEvent("click",!1,!0,e,{},0,0,0,0,!1,!1,!1,!1,0,null),r.$material=!0,r.$focus=!0,n.dispatchEvent(r)},transitionEndPromise:function(e,t){function n(t){t&&t.target!==e[0]||(e.off(l.CSS.TRANSITIONEND,n),r.resolve())}t=t||{};var r=s.defer();return e.on(l.CSS.TRANSITIONEND,n),t.timeout&&a(n,t.timeout),r.promise},fakeNgModel:function(){return{$fake:!0,$setTouched:t.noop,$setViewValue:function(e){this.$viewValue=e,this.$render(e),this.$viewChangeListeners.forEach(function(e){e()})},$isEmpty:function(e){return 0===(""+e).length},$parsers:[],$formatters:[],$viewChangeListeners:[],$render:t.noop}},debounce:function(e,t,r,o){var i;return function(){var s=r,c=Array.prototype.slice.call(arguments);a.cancel(i),i=a(function(){i=n,e.apply(s,c)},t||10,o)}},throttle:function(e,t){var n;return function(){var r=this,o=arguments,i=d.now();(!n||i-n>t)&&(e.apply(r,o),n=i)}},time:function(e){var t=d.now();return e(),d.now()-t},nextUid:function(){return""+r++},disconnectScope:function(e){if(e&&e.$root!==e&&!e.$$destroyed){var t=e.$parent;e.$$disconnected=!0,t.$$childHead===e&&(t.$$childHead=e.$$nextSibling),t.$$childTail===e&&(t.$$childTail=e.$$prevSibling),e.$$prevSibling&&(e.$$prevSibling.$$nextSibling=e.$$nextSibling),e.$$nextSibling&&(e.$$nextSibling.$$prevSibling=e.$$prevSibling),e.$$nextSibling=e.$$prevSibling=null}},reconnectScope:function(e){if(e&&e.$root!==e&&e.$$disconnected){var t=e,n=t.$parent;t.$$disconnected=!1,t.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=t,n.$$childTail=t):n.$$childHead=n.$$childTail=t}},getClosest:function(e,n,r){if(e instanceof t.element&&(e=e[0]),n=n.toUpperCase(),r&&(e=e.parentNode),!e)return null;do if(e.nodeName===n)return e;while(e=e.parentNode);return null},extractElementByName:function(e,n){for(var r=0,o=e.length;o>r;r++)if(e[r].nodeName.toLowerCase()===n)return t.element(e[r]);return e},initOptionalProperties:function(e,n,r){r=r||{},t.forEach(e.$$isolateBindings,function(o,i){if(o.optional&&t.isUndefined(e[i])){var a=n.hasOwnProperty(n.$normalize(o.attrName));e[i]=t.isDefined(r[i])?r[i]:a}})}}}]),t.element.prototype.focus=t.element.prototype.focus||function(){return this.length&&this[0].focus(),this},t.element.prototype.blur=t.element.prototype.blur||function(){return this.length&&this[0].blur(),this}}(),function(){function e(e,n,r){function o(e,r,o){var i=e[0]||e;!i||i.hasAttribute(r)&&0!==i.getAttribute(r).length||c(i,r)||(o=t.isString(o)?o.trim():"",o.length?e.attr(r,o):n.warn('ARIA: Attribute "',r,'", required for accessibility, is missing on node:',i))}function i(t,n,r){e(function(){o(t,n,r())})}function a(e,t){i(e,t,function(){return s(e)})}function s(e){return e.text().trim()}function c(e,t){function n(e){var t=e.currentStyle?e.currentStyle:r.getComputedStyle(e);return"none"===t.display}var o=e.hasChildNodes(),i=!1;if(o)for(var a=e.childNodes,s=0;s<a.length;s++){var c=a[s];1===c.nodeType&&c.hasAttribute(t)&&(n(c)||(i=!0))}return i}return{expect:o,expectAsync:i,expectWithText:a}}t.module("material.core").service("$mdAria",e),e.$inject=["$$rAF","$log","$window"]}(),function(){function e(e,n,r,o,i,a){this.compile=function(s){var c=s.templateUrl,l=s.template||"",u=s.controller,d=s.controllerAs,m=s.resolve||{},f=s.locals||{},p=s.transformTemplate||t.identity,h=s.bindToController;return t.forEach(m,function(e,n){m[n]=t.isString(e)?r.get(e):r.invoke(e)}),t.extend(m,f),m.$template=c?n.get(c,{cache:a}).then(function(e){return e.data}):e.when(l),e.all(m).then(function(e){var n=p(e.$template),r=s.element||t.element("<div>").html(n.trim()).contents(),a=o(r);return{locals:e,element:r,link:function(n){if(e.$scope=n,u){var o=i(u,e,!0);h&&t.extend(o.instance,e);var s=o();r.data("$ngControllerController",s),r.children().data("$ngControllerController",s),d&&(n[d]=s)}return a(n)}}})}}t.module("material.core").service("$mdCompiler",e),e.$inject=["$q","$http","$injector","$compile","$controller","$templateCache"]}(),function(){function n(){}function r(n,r,o){function i(e,t,n){var r=f[t.replace(/^\$md./,"")];if(!r)throw new Error("Failed to register element with handler "+t+". Available handlers: "+Object.keys(f).join(", "));return r.registerElement(e,n)}function a(e,r){var o=new n(e);return t.extend(o,r),f[e]=o,h}var c=navigator.userAgent||navigator.vendor||e.opera,u=c.match(/ipad|iphone|ipod/i),d=c.match(/android/i),m="undefined"!=typeof e.jQuery&&t.element===e.jQuery,h={handler:a,register:i,isHijackingClicks:(u||d)&&!m&&!p};return h.isHijackingClicks&&h.handler("click",{options:{maxDistance:6},onEnd:function(e,t){t.distance<this.state.options.maxDistance&&this.dispatchEvent(e,"click")}}),h.handler("press",{onStart:function(e,t){this.dispatchEvent(e,"$md.pressdown")},onEnd:function(e,t){this.dispatchEvent(e,"$md.pressup")}}).handler("hold",{options:{maxDistance:6,delay:500},onCancel:function(){o.cancel(this.state.timeout)},onStart:function(e,n){return this.state.registeredParent?(this.state.pos={x:n.x,y:n.y},void(this.state.timeout=o(t.bind(this,function(){this.dispatchEvent(e,"$md.hold"),this.cancel()}),this.state.options.delay,!1))):this.cancel()},onMove:function(e,t){e.preventDefault();var n=this.state.pos.x-t.x,r=this.state.pos.y-t.y;Math.sqrt(n*n+r*r)>this.options.maxDistance&&this.cancel()},onEnd:function(){this.onCancel()}}).handler("drag",{options:{minDistance:6,horizontal:!0,cancelMultiplier:1.5},onStart:function(e){this.state.registeredParent||this.cancel()},onMove:function(e,t){var n,r;e.preventDefault(),this.state.dragPointer?this.dispatchDragMove(e):(this.state.options.horizontal?(n=Math.abs(t.distanceX)>this.state.options.minDistance,r=Math.abs(t.distanceY)>this.state.options.minDistance*this.state.options.cancelMultiplier):(n=Math.abs(t.distanceY)>this.state.options.minDistance,r=Math.abs(t.distanceX)>this.state.options.minDistance*this.state.options.cancelMultiplier),n?(this.state.dragPointer=s(e),l(e,this.state.dragPointer),this.dispatchEvent(e,"$md.dragstart",this.state.dragPointer)):r&&this.cancel())},dispatchDragMove:r.throttle(function(e){this.state.isRunning&&(l(e,this.state.dragPointer),this.dispatchEvent(e,"$md.drag",this.state.dragPointer))}),onEnd:function(e,t){this.state.dragPointer&&(l(e,this.state.dragPointer),this.dispatchEvent(e,"$md.dragend",this.state.dragPointer))}}).handler("swipe",{options:{minVelocity:.65,minDistance:10},onEnd:function(e,t){if(Math.abs(t.velocityX)>this.state.options.minVelocity&&Math.abs(t.distanceX)>this.state.options.minDistance){var n="left"==t.directionX?"$md.swipeleft":"$md.swiperight";this.dispatchEvent(e,n)}}})}function o(e){this.name=e,this.state={}}function i(){function n(e,n,r){r=r||d;var o=new t.element.Event(n);o.$material=!0,o.pointer=r,o.srcEvent=e,t.extend(o,{clientX:r.x,clientY:r.y,screenX:r.x,screenY:r.y,pageX:r.x,pageY:r.y,ctrlKey:e.ctrlKey,altKey:e.altKey,shiftKey:e.shiftKey,metaKey:e.metaKey}),t.element(r.target).trigger(o)}function r(t,n,r){r=r||d;var o;"click"===n?(o=document.createEvent("MouseEvents"),o.initMouseEvent("click",!0,!0,e,t.detail,r.x,r.y,r.x,r.y,t.ctrlKey,t.altKey,t.shiftKey,t.metaKey,t.button,t.relatedTarget||null)):(o=document.createEvent("CustomEvent"),o.initCustomEvent(n,!0,!0,{})),o.$material=!0,o.pointer=r,o.srcEvent=t,r.target.dispatchEvent(o)}var i="undefined"!=typeof e.jQuery&&t.element===e.jQuery;return o.prototype={options:{},dispatchEvent:i?n:r,onStart:t.noop,onMove:t.noop,onEnd:t.noop,onCancel:t.noop,start:function(e,n){if(!this.state.isRunning){var r=this.getNearestParent(e.target),o=r&&r.$mdGesture[this.name]||{};this.state={isRunning:!0,options:t.extend({},this.options,o),registeredParent:r},this.onStart(e,n)}},move:function(e,t){this.state.isRunning&&this.onMove(e,t)},end:function(e,t){this.state.isRunning&&(this.onEnd(e,t),this.state.isRunning=!1)},cancel:function(e,t){this.onCancel(e,t),this.state={}},getNearestParent:function(e){for(var t=e;t;){if((t.$mdGesture||{})[this.name])return t;t=t.parentNode}return null},registerElement:function(e,t){function n(){delete e[0].$mdGesture[r.name],e.off("$destroy",n)}var r=this;return e[0].$mdGesture=e[0].$mdGesture||{},e[0].$mdGesture[this.name]=t||{},e.on("$destroy",n),n}},o}function a(e,n){function r(e,t){var r;for(var o in f)r=f[o],r instanceof n&&("start"===e&&r.cancel(),r[e](t,d))}function o(e){if(!d){var t=+Date.now();m&&!c(e,m)&&t-m.endTime<1500||(d=s(e),r("start",e))}}function i(e){d&&c(e,d)&&(l(e,d),r("move",e))}function a(e){d&&c(e,d)&&(l(e,d),d.endTime=+Date.now(),r("end",e),m=d,d=null)}document.contains||(document.contains=function(e){return document.body.contains(e)}),!h&&e.isHijackingClicks&&(document.addEventListener("click",function(e){var t=0===e.clientX&&0===e.clientY;t||e.$material||e.isIonicTap||(e.preventDefault(),e.stopPropagation())},!0),h=!0);var u="mousedown touchstart pointerdown",p="mousemove touchmove pointermove",g="mouseup mouseleave touchend touchcancel pointerup pointercancel";t.element(document).on(u,o).on(p,i).on(g,a).on("$$mdGestureReset",function(){m=d=null})}function s(e){var t=u(e),n={startTime:+Date.now(),target:e.target,type:e.type.charAt(0)};return n.startX=n.x=t.pageX,n.startY=n.y=t.pageY,n}function c(e,t){return e&&t&&e.type.charAt(0)===t.type}function l(e,t){var n=u(e),r=t.x=n.pageX,o=t.y=n.pageY;t.distanceX=r-t.startX,t.distanceY=o-t.startY,t.distance=Math.sqrt(t.distanceX*t.distanceX+t.distanceY*t.distanceY),t.directionX=t.distanceX>0?"right":t.distanceX<0?"left":"",t.directionY=t.distanceY>0?"up":t.distanceY<0?"down":"",t.duration=+Date.now()-t.startTime,t.velocityX=t.distanceX/t.duration,t.velocityY=t.distanceY/t.duration}function u(e){return e=e.originalEvent||e,e.touches&&e.touches[0]||e.changedTouches&&e.changedTouches[0]||e}var d,m,f={},p=!1,h=!1;t.module("material.core.gestures",[]).provider("$mdGesture",n).factory("$$MdGestureHandler",i).run(a),n.prototype={skipClickHijack:function(){return p=!0},$get:["$$MdGestureHandler","$$rAF","$timeout",function(e,t,n){return new r(e,t,n)}]},r.$inject=["$$MdGestureHandler","$$rAF","$timeout"],a.$inject=["$mdGesture","$$MdGestureHandler"]}(),function(){function e(){function e(e){function n(e){return c.optionsFactory=e.options,c.methods=(e.methods||[]).concat(a),l}function r(e,t){return s[e]=t,l}function o(t,n){if(n=n||{},n.methods=n.methods||[],n.options=n.options||function(){return{}},/^cancel|hide|show$/.test(t))throw new Error("Preset '"+t+"' in "+e+" is reserved!");if(n.methods.indexOf("_options")>-1)throw new Error("Method '_options' in "+e+" is reserved!");return c.presets[t]={methods:n.methods.concat(a),optionsFactory:n.options,argOption:n.argOption},l}function i(n,r,o){function i(e){return e&&e._options&&(e=e._options),d.show(t.extend({},u,e))}function a(t,n){var r={};return r[e]=m,o.invoke(t||function(){return n},{},r)}var l,u,d=n(),m={hide:d.hide,cancel:d.cancel,show:i};return l=c.methods||[],u=a(c.optionsFactory,{}),t.forEach(s,function(e,t){m[t]=e}),t.forEach(c.presets,function(e,n){function r(e){this._options=t.extend({},o,e)}var o=a(e.optionsFactory,{}),i=(e.methods||[]).concat(l);if(t.extend(o,{$type:n}),t.forEach(i,function(e){r.prototype[e]=function(t){return this._options[e]=t,this}}),e.argOption){var s="show"+n.charAt(0).toUpperCase()+n.slice(1);m[s]=function(e){var t=m[n](e);return m.show(t)}}m[n]=function(n){return arguments.length&&e.argOption&&!t.isObject(n)&&!t.isArray(n)?(new r)[e.argOption](n):new r(n)}}),m}var a=["onHide","onShow","onRemove"],s={},c={presets:{}},l={setDefaults:n,addPreset:o,addMethod:r,$get:i};return l.addPreset("build",{methods:["controller","controllerAs","resolve","template","templateUrl","themable","transformTemplate","parent"]}),i.$inject=["$$interimElement","$animate","$injector"],l}function r(e,r,o,i,a,s,c,l,u){function d(e){return e&&t.isString(e)?e.replace(/\{\{/g,m).replace(/}}/g,f):e}var m=c.startSymbol(),f=c.endSymbol(),p="{{"===m&&"}}"===f,h=p?t.identity:d;return function(){function c(e){if(g.length)return p.cancel().then(function(){return c(e)});var t=new f(e);return g.push(t),t.show().then(function(){return t.deferred.promise})}function d(e){var t=g.shift();return t&&t.remove().then(function(){t.deferred.resolve(e)})}function m(e){var t=g.shift();return r.when(t&&t.remove().then(function(){t.deferred.reject(e)}))}function f(c){var d,m,f,g,v;return c=c||{},c=t.extend({preserveScope:!1,scope:c.scope||o.$new(c.isolateScope),onShow:function(e,t,n){return s.enter(t,n.parent)},onRemove:function(e,t,n){return t&&s.leave(t)||r.when()}},c),c.template&&(c.template=h(c.template)),d={options:c,deferred:r.defer(),show:function(){var n;return n=c.skipCompile?r(function(e){e({locals:{},link:function(){return c.element}})}):l.compile(c),g=n.then(function(n){function o(){c.hideDelay&&(m=i(p.cancel,c.hideDelay))}if(t.extend(n.locals,d.options),f=n.link(c.scope),t.isFunction(c.parent)?c.parent=c.parent(c.scope,f,c):t.isString(c.parent)&&(c.parent=t.element(e[0].querySelector(c.parent))),!(c.parent||{}).length){var s;a[0]&&a[0].querySelector&&(s=a[0].querySelector(":not(svg) > body")),s||(s=a[0]),"#comment"==s.nodeName&&(s=e[0].body),c.parent=t.element(s)}c.themable&&u(f);var l=c.onShow(c.scope,f,c);return r.when(l).then(function(){(c.onComplete||t.noop)(c.scope,f,c),o()})},function(e){g=!0,d.deferred.reject(e)})},cancelTimeout:function(){m&&(i.cancel(m),m=n)},remove:function(){return d.cancelTimeout(),v=r.when(g).then(function(){var e=f?c.onRemove(c.scope,f,c):!0;return r.when(e).then(function(){c.preserveScope||c.scope.$destroy(),v=!0})})}}}var p,g=[];return p={show:c,hide:d,cancel:m}}}return e.$get=r,r.$inject=["$document","$q","$rootScope","$timeout","$rootElement","$animate","$interpolate","$mdCompiler","$mdTheming"],e}t.module("material.core").provider("$$interimElement",e)}(),function(){function e(e,n){function r(e){return e&&""!==e}var o,i=[],a={};return o={notFoundError:function(t){e.error("No instance found for handle",t)},getInstances:function(){return i},get:function(e){if(!r(e))return null;var t,n,o;for(t=0,n=i.length;n>t;t++)if(o=i[t],o.$$mdHandle===e)return o;return null},register:function(e,n){function r(){var t=i.indexOf(e);-1!==t&&i.splice(t,1)}function o(){var t=a[n];t&&(t.resolve(e),delete a[n])}return n?(e.$$mdHandle=n,i.push(e),o(),r):t.noop},when:function(e){if(r(e)){var t=n.defer(),i=o.get(e);return i?t.resolve(i):a[e]=t,t.promise}return n.reject("Invalid `md-component-id` value.")}}}t.module("material.core").factory("$mdComponentRegistry",e),e.$inject=["$log","$q"]}(),function(){!function(){function e(e){function n(n,o,i){var a=r(o);return e.attach(n,o,t.extend(a,i))}function r(e){return e.hasClass("md-icon-button")?{isMenuItem:e.hasClass("md-menu-item"),fitRipple:!0,center:!0}:{isMenuItem:e.hasClass("md-menu-item"),dimBackground:!0}}return{attach:n}}t.module("material.core").factory("$mdButtonInkRipple",e),e.$inject=["$mdInkRipple"]}()}(),function(){!function(){function e(e){function n(n,r,o){return e.attach(n,r,t.extend({center:!0,dimBackground:!1,fitRipple:!0},o))}return{attach:n}}t.module("material.core").factory("$mdCheckboxInkRipple",e),e.$inject=["$mdInkRipple"]}()}(),function(){!function(){function e(e){function n(n,r,o){return e.attach(n,r,t.extend({center:!1,dimBackground:!0,outline:!1,rippleSize:"full"},o))}return{attach:n}}t.module("material.core").factory("$mdListInkRipple",e),e.$inject=["$mdInkRipple"]}()}(),function(){function e(e,n){return{controller:t.noop,link:function(t,r,o){o.hasOwnProperty("mdInkRippleCheckbox")?n.attach(t,r):e.attach(t,r)}}}function n(e,n){function r(r,o,i){function a(){var e=o.data("$mdRippleContainer");return e?e:(e=t.element('<div class="md-ripple-container">'),o.append(e),o.data("$mdRippleContainer",e),e)}function s(e){function t(e){var t="#"===e.charAt(0)?e.substr(1):e,n=t.length/3,r=t.substr(0,n),o=t.substr(n,n),i=t.substr(2*n);return 1===n&&(r+=r,o+=o,i+=i),"rgba("+parseInt(r,16)+","+parseInt(o,16)+","+parseInt(i,16)+",0.1)"}function n(e){return e.replace(")",", 0.1)").replace("(","a(")}if(e)return 0===e.indexOf("rgba")?e.replace(/\d?\.?\d*\s*\)\s*$/,"0.1)"):0===e.indexOf("rgb")?n(e):0===e.indexOf("#")?t(e):void 0}function c(e,t){v.splice(v.indexOf(e),1),0===v.length&&a().css({backgroundColor:""}),n(function(){e.remove()},t,!1)}function l(e){var t=v.indexOf(e),n=$[t]||{},r=v.length>1?!1:E,o=v.length>1?!1:y;r||n.animating||o?e.addClass("md-ripple-visible"):e&&(e.removeClass("md-ripple-visible"),i.outline&&e.css({width:p+"px",height:p+"px",marginLeft:-1*p+"px",marginTop:-1*p+"px"}),c(e,i.outline?450:650))}function u(r,c){function u(e){var n=t.element('<div class="md-ripple" data-counter="'+g++ +'">');return v.unshift(n),$.unshift({animating:!0}),f.append(n),e&&n.css(e),n}function d(e,t){var n,r,o,a=f.prop("offsetWidth"),s=f.prop("offsetHeight");return i.isMenuItem?r=Math.sqrt(Math.pow(a,2)+Math.pow(s,2)):i.outline?(o=M.getBoundingClientRect(),e-=o.left,t-=o.top,a=Math.max(e,a-e),s=Math.max(t,s-t),r=2*Math.sqrt(Math.pow(a,2)+Math.pow(s,2))):(n=i.fullRipple?1.1:.8,r=Math.sqrt(Math.pow(a,2)+Math.pow(s,2))*n,i.fitRipple&&(r=Math.min(s,a,r))),r}function m(e,t,n){function r(e){return e.replace("rgba","rgb").replace(/,[^\),]+\)/,")")}var o=M.getBoundingClientRect(),a={backgroundColor:r(C),borderColor:r(C),width:e+"px",height:e+"px"};return i.outline?(a.width=0,a.height=0):a.marginLeft=a.marginTop=e*-.5+"px",i.center?a.left=a.top="50%":(a.left=Math.round((t-o.left)/f.prop("offsetWidth")*100)+"%",a.top=Math.round((n-o.top)/f.prop("offsetHeight")*100)+"%"),a}C=s(o.attr("md-ink-ripple"))||s(e.getComputedStyle(i.colorElement[0]).color||"rgb(0, 0, 0)");var f=a(),h=d(r,c),b=m(h,r,c),E=u(b),y=v.indexOf(E),w=$[y]||{};return p=h,w.animating=!0,n(function(){i.dimBackground&&f.css({backgroundColor:C}),E.addClass("md-ripple-placed md-ripple-scaled"),E.css(i.outline?{borderWidth:.5*h+"px",marginLeft:h*-.5+"px",marginTop:h*-.5+"px"}:{left:"50%",top:"50%"}),l(E),n(function(){w.animating=!1,l(E)},i.outline?450:225,!1)},0,!1),E}function d(e){f()&&(u(e.pointer.x,e.pointer.y),y=!0)}function m(){y=!1;var e=v[v.length-1];n(function(){l(e)},0,!1)}function f(){function e(e){return e&&e.hasAttribute&&e.hasAttribute("disabled")}var t=M.parentNode,n=t&&t.parentNode,r=n&&n.parentNode;return!(e(M)||e(t)||e(n)||e(r))}if(o.controller("mdNoInk"))return t.noop;i=t.extend({colorElement:o,mousedown:!0,hover:!0,focus:!0,center:!1,mousedownPauseTime:150,dimBackground:!1,outline:!1,fullRipple:!0,isMenuItem:!1,fitRipple:!1},i);var p,h=o.controller("mdInkRipple")||{},g=0,v=[],$=[],b=o.attr("md-highlight"),E=!1,y=!1,M=o[0],w=o.attr("md-ripple-size"),C=s(o.attr("md-ink-ripple"))||s(i.colorElement.length&&e.getComputedStyle(i.colorElement[0]).color||"rgb(0, 0, 0)");switch(w){case"full":i.fullRipple=!0;break;case"partial":i.fullRipple=!1}return i.mousedown&&o.on("$md.pressdown",d).on("$md.pressup",m),h.createRipple=u,b&&r.$watch(b,function(e){E=e,E&&!v.length&&n(function(){u(0,0)},0,!1),t.forEach(v,l)}),function(){o.off("$md.pressdown",d).off("$md.pressup",m),a().remove()}}return{attach:r}}function r(){return function(){return{controller:t.noop}}}t.module("material.core").factory("$mdInkRipple",n).directive("mdInkRipple",e).directive("mdNoInk",r()).directive("mdNoBar",r()).directive("mdNoStretch",r()),e.$inject=["$mdButtonInkRipple","$mdCheckboxInkRipple"],n.$inject=["$window","$timeout"]}(),function(){!function(){function e(e){function n(n,r,o){return e.attach(n,r,t.extend({center:!1,dimBackground:!0,outline:!1,rippleSize:"full"},o))}return{attach:n}}t.module("material.core").factory("$mdTabInkRipple",e),e.$inject=["$mdInkRipple"]}()}(),function(){t.module("material.core.theming.palette",[]).constant("$mdColorPalette",{red:{50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 400 A100",contrastStrongLightColors:"500 600 700 A200 A400 A700"},pink:{50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 400 A100",contrastStrongLightColors:"500 600 A200 A400 A700"},purple:{50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100",contrastStrongLightColors:"300 400 A200 A400 A700"},"deep-purple":{50:"#ede7f6",100:"#d1c4e9",200:"#b39ddb",300:"#9575cd",400:"#7e57c2",500:"#673ab7",600:"#5e35b1",700:"#512da8",800:"#4527a0",900:"#311b92",A100:"#b388ff",A200:"#7c4dff",A400:"#651fff",A700:"#6200ea",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100",contrastStrongLightColors:"300 400 A200"},indigo:{50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100",contrastStrongLightColors:"300 400 A200 A400"},blue:{50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff",contrastDefaultColor:"light",contrastDarkColors:"100 200 300 400 A100",contrastStrongLightColors:"500 600 700 A200 A400 A700"},"light-blue":{50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea",contrastDefaultColor:"dark",contrastLightColors:"500 600 700 800 900 A700",contrastStrongLightColors:"500 600 700 800 A700"},cyan:{50:"#e0f7fa",100:"#b2ebf2",200:"#80deea",300:"#4dd0e1",400:"#26c6da",500:"#00bcd4",600:"#00acc1",700:"#0097a7",800:"#00838f",900:"#006064",A100:"#84ffff",A200:"#18ffff",A400:"#00e5ff",A700:"#00b8d4",contrastDefaultColor:"dark",contrastLightColors:"500 600 700 800 900",contrastStrongLightColors:"500 600 700 800"},teal:{50:"#e0f2f1",100:"#b2dfdb",200:"#80cbc4",300:"#4db6ac",400:"#26a69a",500:"#009688",600:"#00897b",700:"#00796b",800:"#00695c",900:"#004d40",A100:"#a7ffeb",A200:"#64ffda",A400:"#1de9b6",A700:"#00bfa5",contrastDefaultColor:"dark",contrastLightColors:"500 600 700 800 900",contrastStrongLightColors:"500 600 700"},green:{50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853",contrastDefaultColor:"dark",contrastLightColors:"500 600 700 800 900",contrastStrongLightColors:"500 600 700"},"light-green":{50:"#f1f8e9",100:"#dcedc8",200:"#c5e1a5",300:"#aed581",400:"#9ccc65",500:"#8bc34a",600:"#7cb342",700:"#689f38",800:"#558b2f",900:"#33691e",A100:"#ccff90",A200:"#b2ff59",A400:"#76ff03",A700:"#64dd17",contrastDefaultColor:"dark",contrastLightColors:"800 900",contrastStrongLightColors:"800 900"},lime:{50:"#f9fbe7",100:"#f0f4c3",200:"#e6ee9c",300:"#dce775",400:"#d4e157",500:"#cddc39",600:"#c0ca33",700:"#afb42b",800:"#9e9d24",900:"#827717",A100:"#f4ff81",A200:"#eeff41",A400:"#c6ff00",A700:"#aeea00",contrastDefaultColor:"dark",contrastLightColors:"900",contrastStrongLightColors:"900"},yellow:{50:"#fffde7",100:"#fff9c4",200:"#fff59d",300:"#fff176",400:"#ffee58",500:"#ffeb3b",600:"#fdd835",700:"#fbc02d",800:"#f9a825",900:"#f57f17",A100:"#ffff8d",A200:"#ffff00",A400:"#ffea00",A700:"#ffd600",contrastDefaultColor:"dark"},amber:{50:"#fff8e1",100:"#ffecb3",200:"#ffe082",300:"#ffd54f",
400:"#ffca28",500:"#ffc107",600:"#ffb300",700:"#ffa000",800:"#ff8f00",900:"#ff6f00",A100:"#ffe57f",A200:"#ffd740",A400:"#ffc400",A700:"#ffab00",contrastDefaultColor:"dark"},orange:{50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00",contrastDefaultColor:"dark",contrastLightColors:"800 900",contrastStrongLightColors:"800 900"},"deep-orange":{50:"#fbe9e7",100:"#ffccbc",200:"#ffab91",300:"#ff8a65",400:"#ff7043",500:"#ff5722",600:"#f4511e",700:"#e64a19",800:"#d84315",900:"#bf360c",A100:"#ff9e80",A200:"#ff6e40",A400:"#ff3d00",A700:"#dd2c00",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 400 A100 A200",contrastStrongLightColors:"500 600 700 800 900 A400 A700"},brown:{50:"#efebe9",100:"#d7ccc8",200:"#bcaaa4",300:"#a1887f",400:"#8d6e63",500:"#795548",600:"#6d4c41",700:"#5d4037",800:"#4e342e",900:"#3e2723",A100:"#d7ccc8",A200:"#bcaaa4",A400:"#8d6e63",A700:"#5d4037",contrastDefaultColor:"light",contrastDarkColors:"50 100 200",contrastStrongLightColors:"300 400"},grey:{50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",1000:"#000000",A100:"#ffffff",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161",contrastDefaultColor:"dark",contrastLightColors:"600 700 800 900"},"blue-grey":{50:"#eceff1",100:"#cfd8dc",200:"#b0bec5",300:"#90a4ae",400:"#78909c",500:"#607d8b",600:"#546e7a",700:"#455a64",800:"#37474f",900:"#263238",A100:"#cfd8dc",A200:"#b0bec5",A400:"#78909c",A700:"#455a64",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300",contrastStrongLightColors:"400 500"}})}(),function(){function e(e){function r(e,t){return t=t||{},u[e]=a(e,t),v}function o(e,n){return a(e,t.extend({},u[e]||{},n))}function a(e,t){var n=C.filter(function(e){return!t[e]});if(n.length)throw new Error("Missing colors %1 in palette %2!".replace("%1",n.join(", ")).replace("%2",e));return t}function s(e,n){if(d[e])return d[e];n=n||"default";var r="string"==typeof n?d[n]:n,o=new c(e);return r&&t.forEach(r.colors,function(e,n){o.colors[n]={name:e.name,hues:t.extend({},e.hues)}}),d[e]=o,o}function c(e){function n(e){if(e=0===arguments.length?!0:!!e,e!==r.isDark){r.isDark=e,r.foregroundPalette=r.isDark?p:f,r.foregroundShadow=r.isDark?h:g;var n=r.isDark?w:M,o=r.isDark?M:w;return t.forEach(n,function(e,t){var n=r.colors[t],i=o[t];if(n)for(var a in n.hues)n.hues[a]===i[a]&&(n.hues[a]=e[a])}),r}}var r=this;r.name=e,r.colors={},r.dark=n,n(!1),E.forEach(function(e){var n=(r.isDark?w:M)[e];r[e+"Palette"]=function(o,i){var a=r.colors[e]={name:o,hues:t.extend({},n,i)};return Object.keys(a.hues).forEach(function(e){if(!n[e])throw new Error("Invalid hue name '%1' in theme %2's %3 color %4. Available hue names: %4".replace("%1",e).replace("%2",r.name).replace("%3",o).replace("%4",Object.keys(n).join(", ")))}),Object.keys(a.hues).map(function(e){return a.hues[e]}).forEach(function(t){if(-1==C.indexOf(t))throw new Error("Invalid hue value '%1' in theme %2's %3 color %4. Available hue values: %5".replace("%1",t).replace("%2",r.name).replace("%3",e).replace("%4",o).replace("%5",C.join(", ")))}),r},r[e+"Color"]=function(){var t=Array.prototype.slice.call(arguments);return console.warn("$mdThemingProviderTheme."+e+"Color() has been deprecated. Use $mdThemingProviderTheme."+e+"Palette() instead."),r[e+"Palette"].apply(r,t)}})}function m(e,r){function o(e){return e===n||""===e?!0:i.THEMES[e]!==n}function i(t,r){r===n&&(r=t,t=n),t===n&&(t=e),i.inherit(r,r)}return i.inherit=function(n,i){function a(e){o(e)||r.warn("Attempted to use unregistered theme '"+e+"'. Register it with $mdThemingProvider.theme().");var t=n.data("$mdThemeName");t&&n.removeClass("md-"+t+"-theme"),n.addClass("md-"+e+"-theme"),n.data("$mdThemeName",e)}var s=i.controller("mdTheme"),c=n.attr("md-theme-watch");if((b||t.isDefined(c))&&"false"!=c){var l=e.$watch(function(){return s&&s.$mdTheme||$},a);n.on("$destroy",l)}else{var u=s&&s.$mdTheme||$;a(u)}},i.THEMES=t.extend({},d),i.defaultTheme=function(){return $},i.registered=o,i}u={},d={};var v,$="default",b=!1;return t.extend(u,e),m.$inject=["$rootScope","$log"],v={definePalette:r,extendPalette:o,theme:s,setDefaultTheme:function(e){$=e},alwaysWatchTheme:function(e){b=e},$get:m,_LIGHT_DEFAULT_HUES:M,_DARK_DEFAULT_HUES:w,_PALETTES:u,_THEMES:d,_parseRules:i,_rgba:l}}function r(e,t,n){return{priority:100,link:{pre:function(r,o,i){var a={$setTheme:function(t){e.registered(t)||n.warn("attempted to use unregistered theme '"+t+"'"),a.$mdTheme=t}};o.data("$mdThemeController",a),a.$setTheme(t(i.mdTheme)(r)),i.$observe("mdTheme",a.$setTheme)}}}}function o(e){return e}function i(e,n,r){s(e,n),r=r.replace(/THEME_NAME/g,e.name);var o=[],i=e.colors[n],a=new RegExp(".md-"+e.name+"-theme","g"),c=new RegExp("('|\")?{{\\s*("+n+")-(color|contrast)-?(\\d\\.?\\d*)?\\s*}}(\"|')?","g"),d=/'?"?\{\{\s*([a-zA-Z]+)-(A?\d+|hue\-[0-3]|shadow)-?(\d\.?\d*)?\s*\}\}'?"?/g,m=u[i.name];return r=r.replace(d,function(t,n,r,o){return"foreground"===n?"shadow"==r?e.foregroundShadow:e.foregroundPalette[r]||e.foregroundPalette[1]:(0===r.indexOf("hue")&&(r=e.colors[n].hues[r]),l((u[e.colors[n].name][r]||"").value,o))}),t.forEach(i.hues,function(t,n){var i=r.replace(c,function(e,n,r,o,i){return l(m[t]["color"===o?"value":"contrast"],i)});"default"!==n&&(i=i.replace(a,".md-"+e.name+"-theme.md-"+n)),"default"==e.name&&(i=i.replace(/\.md-default-theme/g,"")),o.push(i)}),o}function a(e){function n(e){var n=e.contrastDefaultColor,r=e.contrastLightColors||[],o=e.contrastStrongLightColors||[],i=e.contrastDarkColors||[];"string"==typeof r&&(r=r.split(" ")),"string"==typeof o&&(o=o.split(" ")),"string"==typeof i&&(i=i.split(" ")),delete e.contrastDefaultColor,delete e.contrastLightColors,delete e.contrastStrongLightColors,delete e.contrastDarkColors,t.forEach(e,function(a,s){function l(){return"light"===n?i.indexOf(s)>-1?v:o.indexOf(s)>-1?b:$:r.indexOf(s)>-1?o.indexOf(s)>-1?b:$:v}if(!t.isObject(a)){var u=c(a);if(!u)throw new Error("Color %1, in palette %2's hue %3, is invalid. Hex or rgb(a) color expected.".replace("%1",a).replace("%2",e.name).replace("%3",s));e[s]={value:u,contrast:l()}}})}var r=document.getElementsByTagName("head")[0],o=r?r.firstElementChild:null,a=e.has("$MD_THEME_CSS")?e.get("$MD_THEME_CSS"):"";if(o&&0!==a.length){t.forEach(u,n);var s={},l=a.split(/\}(?!(\}|'|"|;))/).filter(function(e){return e&&e.length}).map(function(e){return e.trim()+"}"}),f=new RegExp("md-("+E.join("|")+")","g");E.forEach(function(e){s[e]=""}),l.forEach(function(e){for(var t,n=(e.match(f),0);t=E[n];n++)if(e.indexOf(".md-"+t)>-1)return s[t]+=e;for(n=0;t=E[n];n++)if(e.indexOf(t)>-1)return s[t]+=e;return s[y]+=e}),t.forEach(d,function(e){m[e.name]||(E.forEach(function(t){for(var n=i(e,t,s[t]);n.length;){var a=document.createElement("style");a.setAttribute("type","text/css"),a.appendChild(document.createTextNode(n.shift())),r.insertBefore(a,o)}}),e.colors.primary.name==e.colors.accent.name&&console.warn("$mdThemingProvider: Using the same palette for primary and accent. This violates the material design spec."),m[e.name]=!0)})}}function s(e,t){if(!u[(e.colors[t]||{}).name])throw new Error("You supplied an invalid color palette for theme %1's %2 palette. Available palettes: %3".replace("%1",e.name).replace("%2",t).replace("%3",Object.keys(u).join(", ")))}function c(e){if(t.isArray(e)&&3==e.length)return e;if(/^rgb/.test(e))return e.replace(/(^\s*rgba?\(|\)\s*$)/g,"").split(",").map(function(e,t){return 3==t?parseFloat(e,10):parseInt(e,10)});if("#"==e.charAt(0)&&(e=e.substring(1)),/^([a-fA-F0-9]{3}){1,2}$/g.test(e)){var n=e.length/3,r=e.substr(0,n),o=e.substr(n,n),i=e.substr(2*n);return 1===n&&(r+=r,o+=o,i+=i),[parseInt(r,16),parseInt(o,16),parseInt(i,16)]}}function l(e,n){return e?(4==e.length&&(e=t.copy(e),n?e.pop():n=e.pop()),n&&("number"==typeof n||"string"==typeof n&&n.length)?"rgba("+e.join(",")+","+n+")":"rgb("+e.join(",")+")"):"rgb('0,0,0')"}t.module("material.core.theming",["material.core.theming.palette"]).directive("mdTheme",r).directive("mdThemable",o).provider("$mdTheming",e).run(a);var u,d,m={},f={name:"dark",1:"rgba(0,0,0,0.87)",2:"rgba(0,0,0,0.54)",3:"rgba(0,0,0,0.26)",4:"rgba(0,0,0,0.12)"},p={name:"light",1:"rgba(255,255,255,1.0)",2:"rgba(255,255,255,0.7)",3:"rgba(255,255,255,0.3)",4:"rgba(255,255,255,0.12)"},h="1px 1px 0px rgba(0,0,0,0.4), -1px -1px 0px rgba(0,0,0,0.4)",g="",v=c("rgba(0,0,0,0.87)"),$=c("rgba(255,255,255,0.87"),b=c("rgb(255,255,255)"),E=["primary","accent","warn","background"],y="primary",M={accent:{"default":"A200","hue-1":"A100","hue-2":"A400","hue-3":"A700"},background:{"default":"A100","hue-1":"300","hue-2":"800","hue-3":"900"}},w={background:{"default":"800","hue-1":"300","hue-2":"600","hue-3":"900"}};E.forEach(function(e){var t={"default":"500","hue-1":"300","hue-2":"800","hue-3":"A100"};M[e]||(M[e]=t),w[e]||(w[e]=t)});var C=["50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700"];e.$inject=["$mdColorPalette"],r.$inject=["$mdTheming","$interpolate","$log"],o.$inject=["$mdTheming"],a.$inject=["$injector"]}(),function(){t.module("material.components.autocomplete",["material.core","material.components.icon"])}(),function(){function e(e){return e}t.module("material.components.backdrop",["material.core"]).directive("mdBackdrop",e),e.$inject=["$mdTheming"]}(),function(){function e(){return{restrict:"E"}}function n(e){function n(e,n,i,a,s,c,l,u,d){function m(r,o,d){o=i.extractElementByName(o,"md-bottom-sheet"),h=s('<md-backdrop class="md-opaque md-bottom-sheet-backdrop">')(r),h.on("click",function(){a(l.cancel)}),c.inherit(h,d.parent),e.enter(h,d.parent,null);var m=new p(o,d.parent);return d.bottomSheet=m,d.targetEvent&&t.element(d.targetEvent.target).blur(),c.inherit(m.element,d.parent),d.disableParentScroll&&(d.lastOverflow=d.parent.css("overflow"),d.parent.css("overflow","hidden")),e.enter(m.element,d.parent).then(function(){var e=t.element(o[0].querySelector("button")||o[0].querySelector("a")||o[0].querySelector("[ng-click]"));e.focus(),d.escapeToClose&&(d.rootElementKeyupCallback=function(e){e.keyCode===n.KEY_CODE.ESCAPE&&a(l.cancel)},u.on("keyup",d.rootElementKeyupCallback))})}function f(n,r,o){var i=o.bottomSheet;return e.leave(h),e.leave(i.element).then(function(){o.disableParentScroll&&(o.parent.css("overflow",o.lastOverflow),delete o.lastOverflow),i.cleanup(),o.targetEvent&&t.element(o.targetEvent.target).focus()})}function p(e,t){function i(t){e.css(n.CSS.TRANSITION_DURATION,"0ms")}function s(t){var r=t.pointer.distanceY;5>r&&(r=Math.max(-o,r/2)),e.css(n.CSS.TRANSFORM,"translate3d(0,"+(o+r)+"px,0)")}function c(t){if(t.pointer.distanceY>0&&(t.pointer.distanceY>20||Math.abs(t.pointer.velocityY)>r)){var o=e.prop("offsetHeight")-t.pointer.distanceY,i=Math.min(o/t.pointer.velocityY*.75,500);e.css(n.CSS.TRANSITION_DURATION,i+"ms"),a(l.cancel)}else e.css(n.CSS.TRANSITION_DURATION,""),e.css(n.CSS.TRANSFORM,"")}var u=d.register(t,"drag",{horizontal:!1});return t.on("$md.dragstart",i).on("$md.drag",s).on("$md.dragend",c),{element:e,cleanup:function(){u(),t.off("$md.dragstart",i).off("$md.drag",s).off("$md.dragend",c)}}}var h;return{themable:!0,targetEvent:null,onShow:m,onRemove:f,escapeToClose:!0,disableParentScroll:!0}}var r=.5,o=80;return n.$inject=["$animate","$mdConstant","$mdUtil","$timeout","$compile","$mdTheming","$mdBottomSheet","$rootElement","$mdGesture"],e("$mdBottomSheet").setDefaults({methods:["disableParentScroll","escapeToClose","targetEvent"],options:n})}t.module("material.components.bottomSheet",["material.core","material.components.backdrop"]).directive("mdBottomSheet",e).provider("$mdBottomSheet",n),n.$inject=["$$interimElementProvider"]}(),function(){function e(e,n,r,o){function i(e){return t.isDefined(e.href)||t.isDefined(e.ngHref)||t.isDefined(e.ngLink)||t.isDefined(e.uiSref)}function a(e,t){return i(t)?'<a class="md-button" ng-transclude></a>':'<button class="md-button" ng-transclude></button>'}function s(a,s,c){var l=s[0];n(s),e.attach(a,s);var u=l.textContent.trim();u||r.expect(s,"aria-label"),i(c)&&t.isDefined(c.ngDisabled)&&a.$watch(c.ngDisabled,function(e){s.attr("tabindex",e?-1:0)}),s.on("click",function(e){c.disabled===!0&&(e.preventDefault(),e.stopImmediatePropagation())}),a.mouseActive=!1,s.on("mousedown",function(){a.mouseActive=!0,o(function(){a.mouseActive=!1},100)}).on("focus",function(){a.mouseActive===!1&&s.addClass("md-focused")}).on("blur",function(){s.removeClass("md-focused")})}return{restrict:"EA",replace:!0,transclude:!0,template:a,link:s}}t.module("material.components.button",["material.core"]).directive("mdButton",e),e.$inject=["$mdButtonInkRipple","$mdTheming","$mdAria","$timeout"]}(),function(){function e(e){return{restrict:"E",link:function(t,n,r){e(n)}}}t.module("material.components.card",["material.core"]).directive("mdCard",e),e.$inject=["$mdTheming"]}(),function(){function e(e,n,r,o,i,a,s){function c(n,c){return c.type="checkbox",c.tabindex=c.tabindex||"0",n.attr("role",c.type),function(n,c,u,d){function m(e,t,r){u[e]&&n.$watch(u[e],function(e){r[e]&&c.attr(t,r[e])})}function f(e){var t=e.which||e.keyCode;(t===o.KEY_CODE.SPACE||t===o.KEY_CODE.ENTER)&&(e.preventDefault(),c.hasClass("md-focused")||c.addClass("md-focused"),p(e))}function p(e){c[0].hasAttribute("disabled")||n.$apply(function(){var t=u.ngChecked?u.checked:!d.$viewValue;d.$setViewValue(t,e&&e.type),d.$render()})}function h(){d.$viewValue?c.addClass(l):c.removeClass(l)}d=d||a.fakeNgModel(),i(c),u.ngChecked&&n.$watch(n.$eval.bind(n,u.ngChecked),d.$setViewValue.bind(d)),m("ngDisabled","tabindex",{"true":"-1","false":u.tabindex}),r.expectWithText(c,"aria-label"),e.link.pre(n,{on:t.noop,0:{}},u,[d]),n.mouseActive=!1,c.on("click",p).on("keypress",f).on("mousedown",function(){n.mouseActive=!0,s(function(){n.mouseActive=!1},100)}).on("focus",function(){n.mouseActive===!1&&c.addClass("md-focused")}).on("blur",function(){c.removeClass("md-focused")}),d.$render=h}}e=e[0];var l="md-checked";return{restrict:"E",transclude:!0,require:"?ngModel",priority:210,template:'<div class="md-container" md-ink-ripple md-ink-ripple-checkbox><div class="md-icon"></div></div><div ng-transclude class="md-label"></div>',compile:c}}t.module("material.components.checkbox",["material.core"]).directive("mdCheckbox",e),e.$inject=["inputDirective","$mdInkRipple","$mdAria","$mdConstant","$mdTheming","$mdUtil","$timeout"]}(),function(){function e(e){function t(e,t){this.$scope=e,this.$element=t}return{restrict:"E",controller:["$scope","$element",t],link:function(t,r,o){r[0];e(r),t.$broadcast("$mdContentLoaded",r),n(r[0])}}}function n(e){t.element(e).on("$md.pressdown",function(t){"t"===t.pointer.type&&(t.$materialScrollFixed||(t.$materialScrollFixed=!0,0===e.scrollTop?e.scrollTop=1:e.scrollHeight===e.scrollTop+e.offsetHeight&&(e.scrollTop-=1)))})}t.module("material.components.content",["material.core"]).directive("mdContent",e),e.$inject=["$mdTheming"]}(),function(){t.module("material.components.chips",["material.core","material.components.autocomplete"])}(),function(){function e(e,t){return{restrict:"E",link:function(n,r,o){t(r),e(function(){var e=r[0].querySelector("md-dialog-content");e&&e.scrollHeight>e.clientHeight&&r.addClass("md-content-overflow")})}}}function n(e){function n(e,t){return{template:['<md-dialog md-theme="{{ dialog.theme }}" aria-label="{{ dialog.ariaLabel }}">','<md-dialog-content role="document" tabIndex="-1">','<h2 class="md-title">{{ dialog.title }}</h2>',"<p>{{ dialog.content }}</p>","</md-dialog-content>",'<div class="md-actions">','<md-button ng-if="dialog.$type == \'confirm\'" ng-click="dialog.abort()" class="md-primary">',"{{ dialog.cancel }}","</md-button>",'<md-button ng-click="dialog.hide()" class="md-primary">',"{{ dialog.ok }}","</md-button>","</div>","</md-dialog>"].join(""),controller:function(){this.hide=function(){e.hide(!0)},this.abort=function(){e.cancel()}},controllerAs:"dialog",bindToController:!0,theme:t.defaultTheme()}}function r(e,n,r,o,i,a,s,c,l,u,d){function m(e){var t=document.querySelector("md-dialog");t&&!t.contains(e.target)&&(e.stopImmediatePropagation(),t.focus())}function f(e,u,d){function f(){var e=u[0].querySelector(".dialog-close");if(!e){var n=u[0].querySelectorAll(".md-actions button");e=n[n.length-1]}return t.element(e)}t.element(n[0].body).addClass("md-dialog-is-showing"),u=r.extractElementByName(u,"md-dialog"),d.parent=t.element(d.parent),d.popInTarget=t.element((d.targetEvent||{}).target);var p=f();if(d.hasBackdrop){var g=d.parent[0]==n[0].body&&n[0].documentElement&&n[0].documentElement.scrollTop?t.element(n[0].documentElement):d.parent,b=g.prop("scrollTop");d.backdrop=t.element('<md-backdrop class="md-dialog-backdrop md-opaque">'),d.backdrop.css("top",b+"px"),i.inherit(d.backdrop,d.parent),l.enter(d.backdrop,d.parent),u.css("top",b+"px")}var E="dialog",y=p;return"alert"===d.$type&&(E="alertdialog",y=u.find("md-dialog-content")),h(u.find("md-dialog"),E,d),document.addEventListener("focus",m,!0),d.disableParentScroll&&(d.lastOverflow=d.parent.css("overflow"),d.parent.css("overflow","hidden")),$(u,d.parent,d.popInTarget&&d.popInTarget.length&&d.popInTarget).then(function(){v(u,!0),d.escapeToClose&&(d.rootElementKeyupCallback=function(e){e.keyCode===o.KEY_CODE.ESCAPE&&s(a.cancel)},c.on("keyup",d.rootElementKeyupCallback)),d.clickOutsideToClose&&(d.dialogClickOutsideCallback=function(e){e.target===u[0]&&s(a.cancel)},u.on("click",d.dialogClickOutsideCallback)),d.focusOnOpen&&y.focus()})}function p(e,r,o){return t.element(n[0].body).removeClass("md-dialog-is-showing"),o.backdrop&&l.leave(o.backdrop),o.disableParentScroll&&(o.parent.css("overflow",o.lastOverflow),delete o.lastOverflow),o.escapeToClose&&c.off("keyup",o.rootElementKeyupCallback),o.clickOutsideToClose&&r.off("click",o.dialogClickOutsideCallback),v(r,!1),document.removeEventListener("focus",m,!0),b(r,o.parent,o.popInTarget&&o.popInTarget.length&&o.popInTarget).then(function(){r.remove(),o.popInTarget&&o.popInTarget.focus()})}function h(t,n,o){t.attr({role:n,tabIndex:"-1"});var i=t.find("md-dialog-content");0===i.length&&(i=t);var a=t.attr("id")||"dialog_"+r.nextUid();i.attr("id",a),t.attr("aria-describedby",a),o.ariaLabel?e.expect(t,"aria-label",o.ariaLabel):e.expectAsync(t,"aria-label",function(){var e=i.text().split(/\s+/);return e.length>3&&(e=e.slice(0,3).concat("...")),e.join(" ")})}function g(e,t){return-1!==t.indexOf(e.nodeName)?!0:void 0}function v(e,t){function n(e){for(;e.parentNode;){if(e===document.body)return;for(var o=e.parentNode.children,i=0;i<o.length;i++)e===o[i]||g(o[i],["SCRIPT","STYLE"])||o[i].setAttribute(r,t);n(e=e.parentNode)}}var r="aria-hidden";e=e[0],n(e)}function $(e,t,n){var i=e.find("md-dialog");return t.append(e),E(i,n),u(function(){i.addClass("transition-in").css(o.CSS.TRANSFORM,"")}),r.transitionEndPromise(i)}function b(e,t,n){var o=e.find("md-dialog");return o.addClass("transition-out").removeClass("transition-in"),E(o,n),r.transitionEndPromise(o)}function E(e,t){if(t){var n=t[0].getBoundingClientRect(),r=e[0].getBoundingClientRect(),i=Math.min(.5,n.width/r.width),a=Math.min(.5,n.height/r.height);e.css(o.CSS.TRANSFORM,"translate3d("+(-r.left+n.left+n.width/2-r.width/2)+"px,"+(-r.top+n.top+n.height/2-r.height/2)+"px,0) scale("+i+","+a+")")}}return{hasBackdrop:!0,isolateScope:!0,onShow:f,onRemove:p,clickOutsideToClose:!1,escapeToClose:!0,targetEvent:null,focusOnOpen:!0,disableParentScroll:!0,transformTemplate:function(e){return'<div class="md-dialog-container">'+e+"</div>"}}}return n.$inject=["$mdDialog","$mdTheming"],r.$inject=["$mdAria","$document","$mdUtil","$mdConstant","$mdTheming","$mdDialog","$timeout","$rootElement","$animate","$$rAF","$q"],e("$mdDialog").setDefaults({methods:["disableParentScroll","hasBackdrop","clickOutsideToClose","escapeToClose","targetEvent","parent"],options:r}).addPreset("alert",{methods:["title","content","ariaLabel","ok","theme"],options:n}).addPreset("confirm",{methods:["title","content","ariaLabel","ok","cancel","theme"],options:n})}t.module("material.components.dialog",["material.core","material.components.backdrop"]).directive("mdDialog",e).provider("$mdDialog",n),e.$inject=["$$rAF","$mdTheming"],n.$inject=["$$interimElementProvider"]}(),function(){!function(){function e(){return{restrict:"E",require:["^?mdFabSpeedDial","^?mdFabToolbar"],link:function(e,n,r,o){var i=o[0]||o[1];i&&t.forEach(n.children(),function(e){t.element(e).on("focus",i.open),t.element(e).on("blur",i.close)}),n.children().wrap('<div class="md-fab-action-item">')}}}t.module("material.components.fabActions",["material.core"]).directive("mdFabActions",e)}()}(),function(){function e(e){return{restrict:"E",link:e}}t.module("material.components.divider",["material.core"]).directive("mdDivider",e),e.$inject=["$mdTheming"]}(),function(){!function(){function e(){function e(e,t){t.prepend('<div class="md-css-variables"></div>')}function t(e,t,n){function r(){a.direction=a.direction||"down",a.isOpen=a.isOpen||!1}function o(){t.on("mouseenter",a.open),t.on("mouseleave",a.close)}function i(){e.$watch("vm.direction",function(e,r){n.removeClass(t,"md-"+r),n.addClass(t,"md-"+e)}),e.$watch("vm.isOpen",function(e){var r=e?"md-is-open":"",o=e?"":"md-is-open";n.setClass(t,r,o)})}var a=this;a.open=function(){e.$apply("vm.isOpen = true")},a.close=function(){e.$apply("vm.isOpen = false")},r(),o(),i()}return t.$inject=["$scope","$element","$animate"],{restrict:"E",scope:{direction:"@?mdDirection",isOpen:"=?mdOpen"},bindToController:!0,controller:t,controllerAs:"vm",link:e}}function n(){function e(e){var n=e[0],r=e.controller("mdFabSpeedDial"),o=n.querySelectorAll(".md-fab-action-item"),i=n.querySelector(".md-css-variables"),a=i.style.zIndex;t.forEach(o,function(e,t){var n=e.style;n.transform="",n.transitionDelay="",n.opacity=1,e.style.zIndex=o.length-t+a}),r.isOpen||t.forEach(o,function(e,t){var n,o;switch(r.direction){case"up":n=e.scrollHeight*(t+1),o="Y";break;case"down":n=-e.scrollHeight*(t+1),o="Y";break;case"left":n=e.scrollWidth*(t+1),o="X";break;case"right":n=-e.scrollWidth*(t+1),o="X"}e.style.transform="translate"+o+"("+n+"px)"})}return{addClass:function(t,n,r){t.hasClass("md-fling")&&e(t)},removeClass:function(t,n,r){e(t)}}}function r(){function e(e){var r=e[0],o=e.controller("mdFabSpeedDial"),i=r.querySelectorAll(".md-fab-action-item");t.forEach(i,function(e,t){var r=e.style,a=t*n;r.opacity=o.isOpen?1:0,r.transform=o.isOpen?"scale(1)":"scale(0)",r.transitionDelay=(o.isOpen?a:i.length-a)+"ms"})}var n=65;return{addClass:function(t,n,r){e(t)},removeClass:function(t,n,r){e(t)}}}t.module("material.components.fabSpeedDial",["material.core","material.components.fabTrigger","material.components.fabActions"]).directive("mdFabSpeedDial",e).animation(".md-fling",n).animation(".md-scale",r)}()}(),function(){!function(){function n(){function e(e,t,n){var r=this;r.isOpen=r.isOpen||!1,r.open=function(){r.isOpen=!0,e.$apply()},r.close=function(){r.isOpen=!1,e.$apply()},t.addClass("md-fab-toolbar"),t.on("mouseenter",r.open),t.on("mouseleave",r.close),e.$watch("vm.isOpen",function(e){var r=e?"md-is-open":"",o=e?"":"md-is-open";n.setClass(t,r,o)})}function t(e,t,n){t.find("md-fab-trigger").find("button").attr("tabindex","-1"),t.find("md-fab-trigger").find("button").prepend('<div class="md-fab-toolbar-background"></div>')}return e.$inject=["$scope","$element","$animate"],{restrict:"E",transclude:!0,template:'<div class="md-fab-toolbar-wrapper">  <div class="md-fab-toolbar-content" ng-transclude></div></div>',scope:{isOpen:"=?mdOpen"},bindToController:!0,controller:e,controllerAs:"vm",link:t}}function r(){function n(n,r,o){var i=n[0],a=n.controller("mdFabToolbar"),s=i.querySelector(".md-fab-toolbar-background"),c=i.querySelector("md-fab-trigger button"),l=i.querySelector("md-fab-trigger button md-icon"),u=n.find("md-fab-actions").children();if(c&&s){var d=e.getComputedStyle(c).getPropertyValue("background-color"),m=i.offsetWidth,f=(i.offsetHeight,2*m);s.style.backgroundColor=d,s.style.borderRadius=m+"px",a.isOpen?(s.style.width=f+"px",s.style.height=f+"px",s.style.top=-(f/2)+"px",n.hasClass("md-left")&&(s.style.left=-(f/2)+"px",s.style.right=null),n.hasClass("md-right")&&(s.style.right=-(f/2)+"px",s.style.left=null),s.style.transitionDelay="0ms",l.style.transitionDelay=".3s",t.forEach(u,function(e,t){e.style.transitionDelay=25*(u.length-t)+"ms"})):(s.style.width=c.offsetWidth+"px",s.style.height=c.offsetHeight+"px",s.style.top="0px",n.hasClass("md-left")&&(s.style.left="0px",s.style.right=null),n.hasClass("md-right")&&(s.style.right="0px",s.style.left=null),s.style.transitionDelay="200ms",l.style.transitionDelay="0ms",t.forEach(u,function(e,t){e.style.transitionDelay=25*t+"ms"}))}}return{addClass:function(e,t,r){n(e,t,r)},removeClass:function(e,t,r){n(e,t,r)}}}t.module("material.components.fabToolbar",["material.core","material.components.fabTrigger","material.components.fabActions"]).directive("mdFabToolbar",n).animation(".md-fab-toolbar",r)}()}(),function(){function e(e,r,o,i){function a(n,a,s,c){function l(){for(var e in r.MEDIA)i(e),i.getQuery(r.MEDIA[e]).addListener(w);return i.watchResponsiveAttributes(["md-cols","md-row-height"],s,d)}function u(){c.layoutDelegate=t.noop,C();for(var e in r.MEDIA)i.getQuery(r.MEDIA[e]).removeListener(w)}function d(e){null==e?c.invalidateLayout():i(e)&&c.invalidateLayout()}function m(e){var r=g(),i={tileSpans:v(r),colCount:$(),rowMode:y(),rowHeight:E(),gutter:b()};if(e||!t.equals(i,A)){var s=o(i.colCount,i.tileSpans,r).map(function(e,n){return{grid:{element:a,style:h(i.colCount,n,i.gutter,i.rowMode,i.rowHeight)},tiles:e.map(function(e,n){return{element:t.element(r[n]),style:p(e.position,e.spans,i.colCount,i.rowCount,i.gutter,i.rowMode,i.rowHeight)}})}}).reflow().performance();n.mdOnLayout({$event:{performance:s}}),A=i}}function f(e){return x+e+T}function p(e,t,n,r,o,i,a){var s=1/n*100,c=(n-1)/n,l=k({share:s,gutterShare:c,gutter:o}),u={left:S({unit:l,offset:e.col,gutter:o}),width:N({unit:l,span:t.col,gutter:o}),paddingTop:"",marginTop:"",top:"",height:""};switch(i){case"fixed":u.top=S({unit:a,offset:e.row,gutter:o}),u.height=N({unit:a,span:t.row,gutter:o});break;case"ratio":var d=s/a,m=k({share:d,gutterShare:c,gutter:o});u.paddingTop=N({unit:m,span:t.row,gutter:o}),u.marginTop=S({unit:m,offset:e.row,gutter:o});break;case"fit":var f=(r-1)/r,d=1/r*100,m=k({share:d,gutterShare:f,gutter:o});u.top=S({unit:m,offset:e.row,gutter:o}),u.height=N({unit:m,span:t.row,gutter:o})}return u}function h(e,t,n,r,o){var i={height:"",paddingBottom:""};switch(r){case"fixed":i.height=N({unit:o,span:t,gutter:n});break;case"ratio":var a=1===e?0:(e-1)/e,s=1/e*100,c=s*(1/o),l=k({share:c,gutterShare:a,gutter:n});i.paddingBottom=N({unit:l,span:t,gutter:n});break;case"fit":}return i}function g(){return[].filter.call(a.children(),function(e){return"MD-GRID-TILE"==e.tagName})}function v(e){return[].map.call(e,function(e){var n=t.element(e).controller("mdGridTile");return{row:parseInt(i.getResponsiveAttribute(n.$attrs,"md-rowspan"),10)||1,col:parseInt(i.getResponsiveAttribute(n.$attrs,"md-colspan"),10)||1}})}function $(){var e=parseInt(i.getResponsiveAttribute(s,"md-cols"),10);if(isNaN(e))throw"md-grid-list: md-cols attribute was not found, or contained a non-numeric value";return e}function b(){return M(i.getResponsiveAttribute(s,"md-gutter")||1)}function E(){var e=i.getResponsiveAttribute(s,"md-row-height");switch(y()){case"fixed":return M(e);case"ratio":var t=e.split(":");return parseFloat(t[0])/parseFloat(t[1]);case"fit":return 0}}function y(){var e=i.getResponsiveAttribute(s,"md-row-height");return"fit"==e?"fit":-1!==e.indexOf(":")?"ratio":"fixed"}function M(e){return/\D$/.test(e)?e:e+"px"}a.attr("role","list"),c.layoutDelegate=m;var w=t.bind(c,c.invalidateLayout),C=l();n.$on("$destroy",u);var A,x=e.startSymbol(),T=e.endSymbol(),k=e(f("share")+"% - ("+f("gutter")+" * "+f("gutterShare")+")"),S=e("calc(("+f("unit")+" + "+f("gutter")+") * "+f("offset")+")"),N=e("calc(("+f("unit")+") * "+f("span")+" + ("+f("span")+" - 1) * "+f("gutter")+")")}return{restrict:"E",controller:n,scope:{mdOnLayout:"&"},link:a}}function n(e){this.layoutInvalidated=!1,this.tilesInvalidated=!1,this.$timeout_=e,this.layoutDelegate=t.noop}function r(e){function n(t,n){var r,a,s,c,l,u;return c=e.time(function(){a=o(t,n)}),r={layoutInfo:function(){return a},map:function(t){return l=e.time(function(){var e=r.layoutInfo();s=t(e.positioning,e.rowCount)}),r},reflow:function(t){return u=e.time(function(){var e=t||i;e(s.grid,s.tiles)}),r},performance:function(){return{tileCount:n.length,layoutTime:c,mapTime:l,reflowTime:u,totalTime:c+l+u}}}}function r(e,t){e.element.css(e.style),t.forEach(function(e){e.element.css(e.style)})}function o(e,t){function n(t,n){if(t.col>e)throw"md-grid-list: Tile at position "+n+" has a colspan ("+t.col+") that exceeds the column count ("+e+")";for(var a=0,u=0;u-a<t.col;)s>=e?r():(a=l.indexOf(0,s),-1!==a&&-1!==(u=i(a+1))?s=u+1:(a=u=0,r()));return o(a,t.col,t.row),s=a+t.col,{col:a,row:c}}function r(){s=0,c++,o(0,e,-1)}function o(e,t,n){for(var r=e;e+t>r;r++)l[r]=Math.max(l[r]+n,0)}function i(e){var t;for(t=e;t<l.length;t++)if(0!==l[t])return t;return t===l.length?t:void 0}function a(){for(var t=[],n=0;e>n;n++)t.push(0);return t}var s=0,c=0,l=a();return{positioning:t.map(function(e,t){return{spans:e,position:n(e,t)}}),rowCount:c+Math.max.apply(Math,l)}}var i=r;return n.animateWith=function(e){i=t.isFunction(e)?e:r},n}function o(e){function n(n,r,o,i){r.attr("role","listitem");var a=e.watchResponsiveAttributes(["md-colspan","md-rowspan"],o,t.bind(i,i.invalidateLayout));i.invalidateTiles(),n.$on("$destroy",function(){a(),i.invalidateLayout()}),t.isDefined(n.$parent.$index)&&n.$watch(function(){return n.$parent.$index},function(e,t){e!==t&&i.invalidateTiles()})}return{restrict:"E",require:"^mdGridList",template:"<figure ng-transclude></figure>",transclude:!0,scope:{},controller:["$attrs",function(e){this.$attrs=e}],link:n}}function i(){return{template:"<figcaption ng-transclude></figcaption>",transclude:!0}}t.module("material.components.gridList",["material.core"]).directive("mdGridList",e).directive("mdGridTile",o).directive("mdGridTileFooter",i).directive("mdGridTileHeader",i).factory("$mdGridLayout",r),e.$inject=["$interpolate","$mdConstant","$mdGridLayout","$mdMedia"],n.$inject=["$timeout"],n.prototype={invalidateTiles:function(){this.tilesInvalidated=!0,this.invalidateLayout()},invalidateLayout:function(){this.layoutInvalidated||(this.layoutInvalidated=!0,this.$timeout_(t.bind(this,this.layout)))},layout:function(){try{this.layoutDelegate(this.tilesInvalidated)}finally{this.layoutInvalidated=!1,this.tilesInvalidated=!1}}},r.$inject=["$mdUtil"],o.$inject=["$mdMedia"]}(),function(){!function(){function e(){return{restrict:"E",require:["^?mdFabSpeedDial","^?mdFabToolbar"],link:function(e,n,r,o){var i=o[0]||o[1];i&&t.forEach(n.children(),function(e){t.element(e).on("focus",i.open),t.element(e).on("blur",i.close)})}}}t.module("material.components.fabTrigger",["material.core"]).directive("mdFabTrigger",e)}()}(),function(){function e(e,t,n,r){function o(r,o,i){function a(){var e=o.parent();return e.attr("aria-label")||e.text()?!0:e.parent().attr("aria-label")||e.parent().text()?!0:!1}function s(){r.svgIcon||r.svgSrc||(r.fontIcon?(o.addClass("md-font"),o.addClass(r.fontIcon)):o.addClass(e.fontSet(r.fontSet)))}t(o),s();var c=i.alt||r.fontIcon||r.svgIcon||o.text(),l=i.$normalize(i.$attr.mdSvgIcon||i.$attr.mdSvgSrc||"");i["aria-label"]||(""==c||a()?o.text()||n.expect(o,"aria-hidden","true"):(n.expect(o,"aria-label",c),n.expect(o,"role","img"))),l&&i.$observe(l,function(t){o.empty(),t&&e(t).then(function(e){o.append(e)})})}return{scope:{fontSet:"@mdFontSet",fontIcon:"@mdFontIcon",svgIcon:"@mdSvgIcon",svgSrc:"@mdSvgSrc"},restrict:"E",link:o}}t.module("material.components.icon",["material.core"]).directive("mdIcon",e),e.$inject=["$mdIcon","$mdTheming","$mdAria","$interpolate"]}(),function(){function e(){}
function n(e,t){this.url=e,this.viewBoxSize=t||o.defaultViewBoxSize}function r(e,n,r,o,i){function a(e){return e=e||"",$[e]?r.when($[e].clone()):b.test(e)?d(e).then(c(e)):(-1==e.indexOf(":")&&(e="$default:"+e),l(e)["catch"](u)["catch"](m)["catch"](f).then(c(e)))}function s(n){var r=t.isUndefined(n)||!(n&&n.length);if(r)return e.defaultFontSet;var o=n;return t.forEach(e.fontSets,function(e){e.alias==n&&(o=e.fontSet||o)}),o}function c(t){return function(n){return $[t]=p(n)?n:new h(n,e[t]),$[t].clone()}}function l(t){var n=e[t];return n?d(n.url).then(function(e){return new h(e,n)}):r.reject(t)}function u(t){function n(e){var n=t.slice(t.lastIndexOf(":")+1),o=e.querySelector("#"+n);return o?new h(o,i):r.reject(t)}var o=t.substring(0,t.lastIndexOf(":"))||"$default",i=e[o];return i?d(i.url).then(n):r.reject(t)}function d(e){return n.get(e,{cache:i}).then(function(e){return t.element("<div>").append(e.data).find("svg")[0]})}function m(e){var n;return t.isString(e)&&(n="icon "+e+" not found",o.warn(n)),r.reject(n||e)}function f(e){var n=t.isString(e)?e:e.message||e.data||e.statusText;return o.warn(n),r.reject(n)}function p(e){return t.isDefined(e.element)&&t.isDefined(e.config)}function h(e,n){"svg"!=e.tagName&&(e=t.element('<svg xmlns="http://www.w3.org/2000/svg">').append(e)[0]),e.getAttribute("xmlns")||e.setAttribute("xmlns","http://www.w3.org/2000/svg"),this.element=e,this.config=n,this.prepare()}function g(){var n=this.config?this.config.viewBoxSize:e.defaultViewBoxSize;t.forEach({fit:"",height:"100%",width:"100%",preserveAspectRatio:"xMidYMid meet",viewBox:this.element.getAttribute("viewBox")||"0 0 "+n+" "+n},function(e,t){this.element.setAttribute(t,e)},this),t.forEach({"pointer-events":"none",display:"block"},function(e,t){this.element.style[t]=e},this)}function v(){return this.element.cloneNode(!0)}var $={},b=/[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/i;return h.prototype={clone:v,prepare:g},a.fontSet=s,a}t.module("material.components.icon").provider("$mdIcon",e);var o={defaultViewBoxSize:24,defaultFontSet:"material-icons",fontSets:[]};e.prototype={icon:function(e,t,r){return-1==e.indexOf(":")&&(e="$default:"+e),o[e]=new n(t,r),this},iconSet:function(e,t,r){return o[e]=new n(t,r),this},defaultIconSet:function(e,t){var r="$default";return o[r]||(o[r]=new n(e,t)),o[r].viewBoxSize=t||o.defaultViewBoxSize,this},defaultViewBoxSize:function(e){return o.defaultViewBoxSize=e,this},fontSet:function(e,t){o.fontSets.push({alias:e,fontSet:t||e})},defaultFontSet:function(e){return o.defaultFontSet=e?e:"",this},defaultIconSize:function(e){return o.defaultIconSize=e,this},preloadIcons:function(e){var t=this,n=[{id:"md-tabs-arrow",url:"md-tabs-arrow.svg",svg:'<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><polygon points="15.4,7.4 14,6 8,12 14,18 15.4,16.6 10.8,12 "/></g></svg>'},{id:"md-close",url:"md-close.svg",svg:'<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z"/></g></svg>'},{id:"md-cancel",url:"md-cancel.svg",svg:'<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M12 2c-5.53 0-10 4.47-10 10s4.47 10 10 10 10-4.47 10-10-4.47-10-10-10zm5 13.59l-1.41 1.41-3.59-3.59-3.59 3.59-1.41-1.41 3.59-3.59-3.59-3.59 1.41-1.41 3.59 3.59 3.59-3.59 1.41 1.41-3.59 3.59 3.59 3.59z"/></g></svg>'},{id:"md-menu",url:"md-menu.svg",svg:'<svg version="1.1" x="0px" y="0px" viewBox="0 0 100 100"><path d="M 50 0 L 100 14 L 92 80 L 50 100 L 8 80 L 0 14 Z" fill="#b2b2b2"></path><path d="M 50 5 L 6 18 L 13.5 77 L 50 94 Z" fill="#E42939"></path><path d="M 50 5 L 94 18 L 86.5 77 L 50 94 Z" fill="#B72833"></path><path d="M 50 7 L 83 75 L 72 75 L 65 59 L 50 59 L 50 50 L 61 50 L 50 26 Z" fill="#b2b2b2"></path><path d="M 50 7 L 17 75 L 28 75 L 35 59 L 50 59 L 50 50 L 39 50 L 50 26 Z" fill="#fff"></path></svg>'},{id:"md-toggle-arrow",url:"md-toggle-arrow-svg",svg:'<svg version="1.1" x="0px" y="0px" viewBox="0 0 48 48"><path d="M24 16l-12 12 2.83 2.83 9.17-9.17 9.17 9.17 2.83-2.83z"/><path d="M0 0h48v48h-48z" fill="none"/></svg>'}];n.forEach(function(n){t.icon(n.id,n.url),e.put(n.url,n.svg)})},$get:["$http","$q","$log","$templateCache",function(e,t,n,i){return this.preloadIcons(i),r(o,e,t,n,i)}]}}(),function(){function e(e,t){function n(t,n,r){e(n)}function r(e,n,r){var o=this;o.isErrorGetter=r.mdIsError&&t(r.mdIsError),o.delegateClick=function(){o.input.focus()},o.element=n,o.setFocused=function(e){n.toggleClass("md-input-focused",!!e)},o.setHasValue=function(e){n.toggleClass("md-input-has-value",!!e)},o.setInvalid=function(e){n.toggleClass("md-input-invalid",!!e)},e.$watch(function(){return o.label&&o.input},function(e){e&&!o.label.attr("for")&&o.label.attr("for",o.input.attr("id"))})}return r.$inject=["$scope","$element","$attrs"],{restrict:"E",link:n,controller:r}}function n(){return{restrict:"E",require:"^?mdInputContainer",link:function(e,t,n,r){r&&!n.mdNoFloat&&(r.label=t,e.$on("$destroy",function(){r.label=null}))}}}function r(e,n,r){function o(o,i,a,s){function c(e){return d.setHasValue(!m.$isEmpty(e)),e}function l(){d.setHasValue(i.val().length>0||(i[0].validity||{}).badInput)}function u(){function r(e){return u(),e}function a(){l.style.height="auto",l.scrollTop=0;var e=s();e&&(l.style.height=e+"px")}function s(){var e=l.scrollHeight-l.offsetHeight;return l.offsetHeight+(e>0?e:0)}function c(e){l.scrollTop=0;var t=l.scrollHeight-l.offsetHeight,n=l.offsetHeight+t;l.style.height=n+"px"}var l=i[0],u=e.debounce(a,1);m?(m.$formatters.push(r),m.$viewChangeListeners.push(r)):u(),i.on("keydown input",u),i.on("scroll",c),t.element(n).on("resize",u),o.$on("$destroy",function(){t.element(n).off("resize",u)})}var d=s[0],m=s[1]||e.fakeNgModel(),f=t.isDefined(a.readonly);if(d){if(d.input)throw new Error("<md-input-container> can only have *one* <input> or <textarea> child element!");d.input=i,d.label||r.expect(i,"aria-label",i.attr("placeholder")),i.addClass("md-input"),i.attr("id")||i.attr("id","input_"+e.nextUid()),"textarea"===i[0].tagName.toLowerCase()&&u();var p=d.isErrorGetter||function(){return m.$invalid&&m.$touched};o.$watch(p,d.setInvalid),m.$parsers.push(c),m.$formatters.push(c),i.on("input",l),f||i.on("focus",function(e){d.setFocused(!0)}).on("blur",function(e){d.setFocused(!1),l()}),o.$on("$destroy",function(){d.setFocused(!1),d.setHasValue(!1),d.input=null})}}return{restrict:"E",require:["^?mdInputContainer","?ngModel"],link:o}}function o(e){function n(n,r,o,i){function a(e){return u.text((r.val()||e||"").length+"/"+s),e}var s,c=i[0],l=i[1],u=t.element('<div class="md-char-counter">');o.$set("ngTrim","false"),l.element.append(u),c.$formatters.push(a),c.$viewChangeListeners.push(a),r.on("input keydown",function(){a()}),n.$watch(o.mdMaxlength,function(n){s=n,t.isNumber(n)&&n>0?(u.parent().length||e.enter(u,l.element,t.element(l.element[0].lastElementChild)),a()):e.leave(u)}),c.$validators["md-maxlength"]=function(e,n){return!t.isNumber(s)||0>s?!0:(e||r.val()||n||"").length<=s}}return{restrict:"A",require:["ngModel","^mdInputContainer"],link:n}}function i(e){function n(n,o,i,a){if(a&&-1==r.indexOf(o[0].nodeName)&&!t.isDefined(a.element.attr("md-no-float"))){var s=i.placeholder;if(o.removeAttr("placeholder"),0==a.element.find("label").length){var c='<label ng-click="delegateClick()">'+s+"</label>";a.element.addClass("md-icon-float"),a.element.prepend(c)}else e.warn("The placeholder='"+s+"' will be ignored since this md-input-container has a child label element.")}}var r=["MD-SELECT"];return{restrict:"A",require:"^^?mdInputContainer",priority:200,link:n}}t.module("material.components.input",["material.core"]).directive("mdInputContainer",e).directive("label",n).directive("input",r).directive("textarea",r).directive("mdMaxlength",o).directive("placeholder",i),e.$inject=["$mdTheming","$parse"],r.$inject=["$mdUtil","$window","$mdAria"],o.$inject=["$animate"],i.$inject=["$log"]}(),function(){function e(e){return{restrict:"E",compile:function(t){return t[0].setAttribute("role","list"),e}}}function n(e,n,r){var o=["md-checkbox","md-switch"];return{restrict:"E",controller:"MdListController",compile:function(i,a){function s(){for(var e,t,n=["md-switch","md-checkbox"],r=0;t=n[r];++r)if((e=i.find(t)[0])&&!e.hasAttribute("aria-label")){var o=i.find("p")[0];if(!o)return;e.setAttribute("aria-label","Toggle "+o.textContent)}}function c(n){var r;if("div"==n)r=t.element('<div class="md-no-style md-list-item-inner">'),r.append(i.contents()),i.addClass("md-proxy-focus");else{r=t.element('<md-button class="md-no-style"><div class="md-list-item-inner"></div></md-button>');var o=["ng-click","aria-label","ng-disabled"];t.forEach(o,function(e){i[0].hasAttribute(e)&&(r[0].setAttribute(e,i[0].getAttribute(e)),i[0].removeAttribute(e))}),r.children().eq(0).append(i.contents())}if(i[0].setAttribute("tabindex","-1"),i.append(r),f&&f.hasAttribute("ng-click")){e.expect(f,"aria-label");var s=t.element('<md-button class="md-secondary-container md-icon-button">');s.attr("ng-click",f.getAttribute("ng-click")),f.removeAttribute("ng-click"),f.setAttribute("tabindex","-1"),f.classList.remove("md-secondary"),s.append(f),f=s[0]}f&&(f.hasAttribute("ng-click")||a.ngClick&&l(f))&&(i.addClass("md-with-secondary"),i.append(f))}function l(e){return-1!=o.indexOf(e.nodeName.toLowerCase())}function u(e,i,a,s){function c(){var e=i.children();e.length&&!e[0].hasAttribute("ng-click")&&t.forEach(o,function(e){t.forEach(d.querySelectorAll(e),function(e){u.push(e)})})}function l(){(u.length||m)&&(i.addClass("md-clickable"),s.attachRipple(e,t.element(i[0].querySelector(".md-no-style"))))}var u=[],d=i[0].firstElementChild,m=d&&d.hasAttribute("ng-click");c(),l(),i.hasClass("md-proxy-focus")&&u.length&&t.forEach(u,function(n){n=t.element(n),e.mouseActive=!1,n.on("mousedown",function(){e.mouseActive=!0,r(function(){e.mouseActive=!1},100)}).on("focus",function(){e.mouseActive===!1&&i.addClass("md-focused"),n.on("blur",function t(){i.removeClass("md-focused"),n.off("blur",t)})})}),m||u.length||d&&d.addEventListener("keypress",function(e){if("INPUT"!=e.target.nodeName&&"TEXTAREA"!=e.target.nodeName){var t=e.which||e.keyCode;t==n.KEY_CODE.SPACE&&d&&(d.click(),e.preventDefault(),e.stopPropagation())}}),i.off("click"),i.off("keypress"),u.length&&d&&i.children().eq(0).on("click",function(e){d.contains(e.target)&&t.forEach(u,function(n){e.target===n||n.contains(e.target)||t.element(n).triggerHandler("click")})})}var d,m,f=i[0].querySelector(".md-secondary");if(i[0].setAttribute("role","listitem"),a.ngClick)c("button");else{for(var p,h=0;p=o[h];++h)if(m=i[0].querySelector(p)){d=!0;break}d?c("div"):i[0].querySelector("md-button")||i.addClass("md-no-proxy")}return s(),u}}}function r(e,t,n){function r(e,t){var r={};n.attach(e,t,r)}var o=this;o.attachRipple=r}t.module("material.components.list",["material.core"]).controller("MdListController",r).directive("mdList",e).directive("mdListItem",n),e.$inject=["$mdTheming"],n.$inject=["$mdAria","$mdConstant","$timeout"],r.$inject=["$scope","$element","$mdListInkRipple"]}(),function(){function e(e){function n(e){e.addClass("md-menu");var t=e.children()[0];if(t.hasAttribute("ng-click")||(t=t.querySelector("[ng-click]")),t&&t.setAttribute("aria-haspopup","true"),2!=e.children().length)throw Error("Invalid HTML for md-menu. Expected two children elements.");return r}function r(e,n,r,o){var i=t.element('<div class="md-open-menu-container md-whiteframe-z2"></div>'),a=n.children()[1];i.append(a),o.init(i),e.$on("$destroy",function(){o.isOpen&&(i.remove(),o.close())})}return{restrict:"E",require:"mdMenu",controller:"mdMenuCtrl",scope:!0,compile:n}}function n(e,t,n,r){var o,i,a=this;this.init=function(e){o=e,i=n[0].querySelector("[ng-click]")},this.open=function(){a.isOpen=!0,i.setAttribute("aria-expanded","true"),e.show({mdMenuCtrl:a,element:o,target:n[0]})},r.$mdOpenMenu=this.open,this.close=function(t){a.isOpen=!1,i.setAttribute("aria-expanded","false"),e.hide(),t||n.children()[0].focus()},this.positionMode=function(){var e=(t.mdPositionMode||"target").split(" ");return 1==e.length&&e.push(e[0]),{left:e[0],top:e[1]}},this.offsets=function(){var e=(t.mdOffset||"0 0").split(" ").map(parseFloat);if(2==e.length)return{left:e[0],top:e[1]};if(1==e.length)return{top:e[0],left:e[0]};throw Error("Invalid offsets specified. Please follow format <x, y> or <n>")}}t.module("material.components.menu",["material.core","material.components.backdrop"]).directive("mdMenu",e).controller("mdMenuCtrl",n),e.$inject=["$mdMenu"],n.$inject=["$mdMenu","$attrs","$element","$scope"]}(),function(){function e(e){function r(e,r,i,a,s,c,l){function u(n,o,l){function u(){if(!l.target)throw Error("$mdMenu.show() expected a target to animate from in options.target");t.extend(l,{alreadyOpen:!1,isRemoved:!1,target:t.element(l.target),parent:t.element(l.parent),menuContentEl:t.element(o[0].querySelector("md-menu-content")),backdrop:l.hasBackdrop&&t.element('<md-backdrop class="md-menu-backdrop md-click-catcher">')})}function m(){l.resizeFn=function(){p(o,l)},t.element(r).on("resize",l.resizeFn),t.element(r).on("orientationchange",l.resizeFn)}function f(){l.parent.append(o),o.removeClass("md-leave"),e(function(){e(function(){p(o,l),e(function(){o.addClass("md-active"),l.alreadyOpen=!0,o[0].style[c.CSS.TRANSFORM]=""})})})}function h(){o.addClass("md-clickable"),l.backdrop&&l.backdrop.on("click",function(e){e.preventDefault(),e.stopPropagation(),l.mdMenuCtrl.close(!0)}),l.menuContentEl.on("keydown",function(e){n.$apply(function(){switch(e.keyCode){case c.KEY_CODE.ESCAPE:l.mdMenuCtrl.close();break;case c.KEY_CODE.UP_ARROW:d(e,l.menuContentEl,l,-1);break;case c.KEY_CODE.DOWN_ARROW:d(e,l.menuContentEl,l,1)}})}),l.menuContentEl.on("click",function(e){function t(){n.$apply(function(){l.mdMenuCtrl.close()})}var r=e.target;do if(r&&r.hasAttribute("ng-click")){r.hasAttribute("disabled")||t();break}while((r=r.parentNode)&&r!=l.menuContentEl)});var e=l.menuContentEl[0].querySelector("[md-menu-focus-target]");e||(e=l.menuContentEl[0].firstElementChild.firstElementChild),e.focus()}return u(l),a.inherit(l.menuContentEl,l.target),m(),l.disableParentScroll&&(l.restoreScroll=i.disableScrollAround(l.element)),s(h,75,!1),l.backdrop&&(a.inherit(l.backdrop,l.parent),l.parent.append(l.backdrop)),f(),i.transitionEndPromise(o,{timeout:350})}function d(e,t,n,r){for(var o=i.getClosest(e.target,"MD-MENU-ITEM"),a=i.nodesToArray(t[0].children),s=a.indexOf(o),c=s+r;c>=0&&c<a.length;c+=r){var l=a[c].firstElementChild||a[c],u=m(l);if(u)break}}function m(e){return e&&-1!=e.getAttribute("tabindex")?(e.focus(),l[0].activeElement==e?!0:!1):void 0}function f(e,o,a){return a.isRemoved=!0,o.addClass("md-leave").removeClass("md-clickable"),t.element(r).off("resize",a.resizeFn),t.element(r).off("orientationchange",a.resizeFn),a.resizeFn=n,i.transitionEndPromise(o,{timeout:350}).then(function(){o.removeClass("md-active"),a.backdrop&&a.backdrop.remove(),o[0].parentNode===a.parent[0]&&a.parent[0].removeChild(o[0]),a.restoreScroll&&a.restoreScroll()})}function p(e,t){function n(e){e.top=Math.max(Math.min(e.top,h.bottom-s.offsetHeight),h.top),e.left=Math.max(Math.min(e.left,h.right-s.offsetWidth),h.left)}if(!t.isRemoved){var r,i,a,s=e[0],l=e[0].firstElementChild,u=l.getBoundingClientRect(),d=t.parent[0],m=d.getBoundingClientRect(),f=t.target[0].querySelector("[md-menu-origin]")||t.target[0],p=f.getBoundingClientRect(),h={left:m.left+o,top:m.top+o,bottom:m.bottom-o,right:m.right-o},g=t.mdMenuCtrl.positionMode();("target"==g.top||"target"==g.left||"target-right"==g.left)&&(r=l.firstElementChild.firstElementChild||l.firstElementChild,r=r.querySelector("[md-menu-align-target]")||r,i=r.getBoundingClientRect(),a={top:parseFloat(s.style.top||0),left:parseFloat(s.style.left||0)});var v={},$="top ";switch(g.top){case"target":v.top=a.top+p.top-i.top;break;default:throw new Error('Invalid target mode "'+g.top+'" specified for md-menu on Y axis.')}switch(g.left){case"target":v.left=a.left+p.left-i.left,$+="left";break;case"target-right":v.left=p.right-u.width+(u.right-i.right),$+="right";break;default:throw new Error('Invalid target mode "'+g.left+'" specified for md-menu on X axis.')}var b=t.mdMenuCtrl.offsets();v.top+=b.top,v.left+=b.left,n(v),e.css({top:v.top+"px",left:v.left+"px"}),s.style[c.CSS.TRANSFORM_ORIGIN]=$,t.alreadyOpen||(s.style[c.CSS.TRANSFORM]="scale("+Math.min(p.width/s.offsetWidth,1)+","+Math.min(p.height/s.offsetHeight,1)+")")}}return{parent:"body",onShow:u,onRemove:f,hasBackdrop:!0,disableParentScroll:!0,skipCompile:!0,themable:!0}}var o=8;return r.$inject=["$$rAF","$window","$mdUtil","$mdTheming","$timeout","$mdConstant","$document"],e("$mdMenu").setDefaults({methods:["target"],options:r})}t.module("material.components.menu").provider("$mdMenu",e),e.$inject=["$$interimElementProvider"]}(),function(){function e(e,t){function n(e){return e.attr("aria-valuemin",0),e.attr("aria-valuemax",100),e.attr("role","progressbar"),r}function r(n,r,i){t(r);var a=r[0],s=i.mdDiameter||48,c=s/48;a.style[e.CSS.TRANSFORM]="scale("+c+")",i.$observe("value",function(e){var t=o(e);r.attr("aria-valuenow",t)})}function o(e){return Math.max(0,Math.min(e||0,100))}return{restrict:"E",template:'<div class="md-spinner-wrapper"><div class="md-inner"><div class="md-gap"></div><div class="md-left"><div class="md-half-circle"></div></div><div class="md-right"><div class="md-half-circle"></div></div></div></div>',compile:n}}t.module("material.components.progressCircular",["material.core"]).directive("mdProgressCircular",e),e.$inject=["$mdConstant","$mdTheming"]}(),function(){function e(e,r,o){function i(e,t,n){return e.attr("aria-valuemin",0),e.attr("aria-valuemax",100),e.attr("role","progressbar"),a}function a(i,a,c){o(a);var l=a[0].querySelector(".md-bar1").style,u=a[0].querySelector(".md-bar2").style,d=t.element(a[0].querySelector(".md-container"));c.$observe("value",function(e){if("query"!=c.mdMode){var t=s(e);a.attr("aria-valuenow",t),u[r.CSS.TRANSFORM]=n[t]}}),c.$observe("mdBufferValue",function(e){l[r.CSS.TRANSFORM]=n[s(e)]}),e(function(){d.addClass("md-ready")})}function s(e){return e>100?100:0>e?0:Math.ceil(e||0)}return{restrict:"E",template:'<div class="md-container"><div class="md-dashed"></div><div class="md-bar md-bar1"></div><div class="md-bar md-bar2"></div></div>',compile:i}}t.module("material.components.progressLinear",["material.core"]).directive("mdProgressLinear",e),e.$inject=["$$rAF","$mdConstant","$mdTheming"];var n=function(){function e(e){var t=e/100,n=(e-100)/2;return"translateX("+n.toString()+"%) scale("+t.toString()+", 1)"}for(var t=new Array(101),n=0;101>n;n++)t[n]=e(n);return t}()}(),function(){function e(e,n,r,o){function i(i,a,s,c){function l(){a.hasClass("md-focused")||a.addClass("md-focused")}function u(r){var o=r.which||r.keyCode;switch(o){case n.KEY_CODE.LEFT_ARROW:case n.KEY_CODE.UP_ARROW:r.preventDefault(),d.selectPrevious(),l();break;case n.KEY_CODE.RIGHT_ARROW:case n.KEY_CODE.DOWN_ARROW:r.preventDefault(),d.selectNext(),l();break;case n.KEY_CODE.ENTER:var i=t.element(e.getClosest(a[0],"form"));i.length>0&&i.triggerHandler("submit")}}r(a);var d=c[0],m=c[1]||e.fakeNgModel();d.init(m),i.mouseActive=!1,a.attr({role:"radiogroup",tabIndex:a.attr("tabindex")||"0"}).on("keydown",u).on("mousedown",function(e){i.mouseActive=!0,o(function(){i.mouseActive=!1},100)}).on("focus",function(){i.mouseActive===!1&&d.$element.addClass("md-focused")}).on("blur",function(){d.$element.removeClass("md-focused")})}function a(e){this._radioButtonRenderFns=[],this.$element=e}function s(){return{init:function(e){this._ngModelCtrl=e,this._ngModelCtrl.$render=t.bind(this,this.render)},add:function(e){this._radioButtonRenderFns.push(e)},remove:function(e){var t=this._radioButtonRenderFns.indexOf(e);-1!==t&&this._radioButtonRenderFns.splice(t,1)},render:function(){this._radioButtonRenderFns.forEach(function(e){e()})},setViewValue:function(e,t){this._ngModelCtrl.$setViewValue(e,t),this.render()},getViewValue:function(){return this._ngModelCtrl.$viewValue},selectNext:function(){return c(this.$element,1)},selectPrevious:function(){return c(this.$element,-1)},setActiveDescendant:function(e){this.$element.attr("aria-activedescendant",e)}}}function c(n,r){var o=e.iterator(n[0].querySelectorAll("md-radio-button"),!0);if(o.count()){var i=function(e){return!t.element(e).attr("disabled")},a=n[0].querySelector("md-radio-button.md-checked"),s=o[0>r?"previous":"next"](a,i)||o.first();t.element(s).triggerHandler("click")}}return a.prototype=s(),{restrict:"E",controller:["$element",a],require:["mdRadioGroup","?ngModel"],link:{pre:i}}}function n(e,t,n){function r(r,i,a,s){function c(e){i[0].hasAttribute("disabled")||r.$apply(function(){s.setViewValue(a.value,e&&e.type)})}function l(){var e=s.getViewValue()==a.value;e!==d&&(d=e,i.attr("aria-checked",e),e?(i.addClass(o),s.setActiveDescendant(i.attr("id"))):i.removeClass(o))}function u(n,r){function o(){return a.id||"radio_"+t.nextUid()}r.ariaId=o(),n.attr({id:r.ariaId,role:"radio","aria-checked":"false"}),e.expectWithText(n,"aria-label")}var d;n(i),u(i,r),s.add(l),a.$observe("value",l),i.on("click",c).on("$destroy",function(){s.remove(l)})}var o="md-checked";return{restrict:"E",require:"^mdRadioGroup",transclude:!0,template:'<div class="md-container" md-ink-ripple md-ink-ripple-checkbox><div class="md-off"></div><div class="md-on"></div></div><div ng-transclude class="md-label"></div>',link:r}}t.module("material.components.radioButton",["material.core"]).directive("mdRadioGroup",e).directive("mdRadioButton",n),e.$inject=["$mdUtil","$mdConstant","$mdTheming","$timeout"],n.$inject=["$mdAria","$mdUtil","$mdTheming"]}(),function(){function e(e,r,o,i,a,s,c){function l(a,l){var u=a.find("md-select-label").remove();if(u.length){if(!u[0].firstElementChild){var d=t.element("<span>");d.append(u.contents()),u.append(d)}}else u=t.element("<md-select-label><span></span></md-select-label>");if(u.append('<span class="md-select-icon" aria-hidden="true"></span>'),u.addClass("md-select-label"),u[0].hasAttribute("id")||u.attr("id","select_label_"+r.nextUid()),a.find("md-content").length||a.append(t.element("<md-content>").append(a.contents())),l.mdOnOpen&&a.find("md-content").prepend(t.element("<md-progress-circular>").attr("md-mode","indeterminate").attr("ng-hide","$$loadingAsyncDone").wrap("<div>").parent()),l.name){var m=t.element('<select class="md-visually-hidden">');m.attr({name:"."+l.name,"ng-model":l.ngModel,"aria-hidden":"true",tabindex:"-1"});var f=a.find("md-option");t.forEach(f,function(e){var n=t.element("<option>"+e.innerHTML+"</option>");e.hasAttribute("ng-value")?n.attr("ng-value",e.getAttribute("ng-value")):e.hasAttribute("value")&&n.attr("value",e.getAttribute("value")),m.append(n)}),a.parent().append(m)}var p='<div class="md-select-menu-container"><md-select-menu '+(t.isDefined(l.multiple)?"multiple":"")+">"+a.html()+"</md-select-menu></div>";return a.empty().append(u),l.tabindex=l.tabindex||"0",function(a,l,u,d){function m(){var e=l.attr("placeholder");e||(e=l.find("md-select-label").text()),i.expect(l,"aria-label",e)}function f(){E&&(M=M||E.find("md-select-menu").controller("mdSelectMenu"),w.setLabelText(M.selectedLabels()))}function h(){E=t.element(p);var e=E.find("md-select-menu");e.data("$ngModelController",C),e.data("$mdSelectController",w),y=a.$new(),E=s(E)(y),M=E.find("md-select-menu").controller("mdSelectMenu")}function g(e){var n=[32,13,38,40];if(-1!=n.indexOf(e.keyCode))e.preventDefault(),v(e);else if(e.keyCode<=90&&e.keyCode>=31){e.preventDefault();var r=M.optNodeForKeyboardSearch(e);if(!r)return;var o=t.element(r).controller("mdOption");M.isMultiple||M.deselect(Object.keys(M.selected)[0]),M.select(o.hashKey,o.value),M.refreshViewValue(),C.$render()}}function v(){a.$evalAsync(function(){$=!0,e.show({scope:y,preserveScope:!0,skipCompile:!0,element:E,target:l[0],hasBackdrop:!0,loadingAsync:u.mdOnOpen?a.$eval(u.mdOnOpen)||!0:!1}).then(function(e){$=!1})})}var $,b,E,y,M,w=d[0],C=d[1],A=d[2],x=l.find("md-select-label"),T=0!==x.text().length;if(h(),o(l),u.name&&A){var k=l.parent()[0].querySelector('select[name=".'+u.name+'"]');A.$removeControl(t.element(k).controller())}var S=C.$render;C.$render=function(){S(),f()},w.setLabelText=function(e){if(!T){w.setIsPlaceholder(!e),e=e||u.placeholder||"";var t=T?x:x.children().eq(0);t.text(e)}},w.setIsPlaceholder=function(e){e?x.addClass("md-placeholder"):x.removeClass("md-placeholder")},w.triggerClose=function(){c(u.mdOnClose)(a)},a.$$postDigest(function(){m(),f()});var N;u.$observe("ngMultiple",function(e){N&&N();var t=c(e);N=a.$watch(function(){return t(a)},function(e,t){(e!==n||t!==n)&&(e?l.attr("multiple","multiple"):l.removeAttr("multiple"),E&&(M.setMultiple(e),S=C.$render,C.$render=function(){S(),f()},M.refreshViewValue(),C.$render()))})}),u.$observe("disabled",function(e){"string"==typeof e&&(e=!0),(b===n||b!==e)&&(b=e,e?(l.attr({tabindex:-1,"aria-disabled":"true"}),l.off("click",v),l.off("keydown",g)):(l.attr({tabindex:u.tabindex,"aria-disabled":"false"}),l.on("click",v),l.on("keydown",g)))}),u.disabled||u.ngDisabled||(l.attr({tabindex:u.tabindex,"aria-disabled":"false"}),l.on("click",v),l.on("keydown",g));var _={role:"combobox","aria-expanded":"false"};l[0].hasAttribute("id")||(_.id="select_"+r.nextUid()),l.attr(_),a.$on("$destroy",function(){$?e.cancel().then(function(){E.remove()}):E.remove()})}}return{restrict:"E",require:["mdSelect","ngModel","?^form"],compile:l,controller:function(){}}}function r(e,r,o){function i(e,n,i,a){function s(){n.attr({id:"select_menu_"+r.nextUid(),role:"listbox","aria-multiselectable":u.isMultiple?"true":"false"})}function c(e){(13==e.keyCode||32==e.keyCode)&&l(e)}function l(n){var o=r.getClosest(n.target,"md-option"),i=o&&t.element(o).data("$mdOptionController");if(o&&i){var a=u.hashGetter(i.value),s=t.isDefined(u.selected[a]);e.$apply(function(){u.isMultiple?s?u.deselect(a):u.select(a,i.value):s||(u.deselect(Object.keys(u.selected)[0]),u.select(a,i.value)),u.refreshViewValue()})}}var u=a[0],d=a[1];o(n),n.on("click",l),n.on("keypress",c),d&&u.init(d),s()}function a(o,i,a){function s(){var e=u.ngModel.$modelValue||u.ngModel.$viewValue;if(t.isArray(e)){var n=Object.keys(u.selected),r=e.map(u.hashGetter),o=n.filter(function(e){return-1===r.indexOf(e)});o.forEach(u.deselect),r.forEach(function(t,n){u.select(t,e[n])})}}function l(){var e=u.ngModel.$viewValue||u.ngModel.$modelValue;Object.keys(u.selected).forEach(u.deselect),u.select(u.hashGetter(e),e)}var u=this;u.isMultiple=t.isDefined(i.multiple),u.selected={},u.options={},o.$watch(function(){return u.options},function(){u.ngModel.$render()},!0);var d;u.setMultiple=function(e){function n(e,n){return t.isArray(e||n||[])}var r=u.ngModel;u.isMultiple=e,d&&d(),u.isMultiple?(r.$validators["md-multiple"]=n,r.$render=s,o.$watchCollection(i.ngModel,function(e){n(e)&&s(e)})):(delete r.$validators["md-multiple"],r.$render=l)};var m,f,p,h="",g=300;u.optNodeForKeyboardSearch=function(e){m&&clearTimeout(m),m=setTimeout(function(){m=n,h="",p=n,f=n},g),h+=String.fromCharCode(e.keyCode);var r=new RegExp("^"+h,"i");f||(f=a.find("md-option"),p=new Array(f.length),t.forEach(f,function(e,t){p[t]=e.textContent.trim()}));for(var o=0;o<p.length;++o)if(r.test(p[o]))return f[o]},u.init=function(n){if(u.ngModel=n,n.$options&&n.$options.trackBy){var r={},i=e(n.$options.trackBy);u.hashGetter=function(e,t){return r.$value=e,i(t||o,r)}}else u.hashGetter=function(e){return t.isObject(e)?"object_"+(e.$$mdSelectId||(e.$$mdSelectId=++c)):e};u.setMultiple(u.isMultiple)},u.selectedLabels=function(){var e=r.nodesToArray(a[0].querySelectorAll("md-option[selected]"));return e.length?e.map(function(e){return e.textContent}).join(", "):""},u.select=function(e,t){var n=u.options[e];n&&n.setSelected(!0),u.selected[e]=t},u.deselect=function(e){var t=u.options[e];t&&t.setSelected(!1),delete u.selected[e]},u.addOption=function(e,n){if(t.isDefined(u.options[e]))throw new Error('Duplicate md-option values are not allowed in a select. Duplicate value "'+n.value+'" found.');u.options[e]=n,t.isDefined(u.selected[e])&&(u.select(e,n.value),u.refreshViewValue())},u.removeOption=function(e){delete u.options[e]},u.refreshViewValue=function(){var e,t=[];for(var n in u.selected)t.push((e=u.options[n])?e.value:u.selected[n]);u.ngModel.$setViewValue(u.isMultiple?t:t[0])}}return a.$inject=["$scope","$attrs","$element"],{restrict:"E",require:["mdSelectMenu","?ngModel"],controller:a,link:{pre:i}}}function o(e,n){function r(e,n){return e.append(t.element('<div class="md-text">').append(e.contents())),e.attr("tabindex",n.tabindex||"0"),o}function o(r,o,i,a){function s(e,t){var n=u.hashGetter(t,r),o=u.hashGetter(e,r);l.hashKey=o,l.value=e,u.removeOption(n,l),u.addOption(o,l)}function c(){var e={role:"option","aria-selected":"false"};o[0].hasAttribute("id")||(e.id="select_option_"+n.nextUid()),o.attr(e)}var l=a[0],u=a[1];t.isDefined(i.ngValue)?r.$watch(i.ngValue,s):t.isDefined(i.value)?s(i.value):r.$watch(function(){return o.text()},s),r.$$postDigest(function(){i.$observe("selected",function(e){t.isDefined(e)&&(e?(u.isMultiple||u.deselect(Object.keys(u.selected)[0]),u.select(l.hashKey,l.value)):u.deselect(l.hashKey),u.refreshViewValue(),u.ngModel.$render())})}),e.attach(r,o),c(),r.$on("$destroy",function(){u.removeOption(l.hashKey,l)})}function i(e){this.selected=!1,this.setSelected=function(t){t&&!this.selected?e.attr({selected:"selected","aria-selected":"true"}):!t&&this.selected&&(e.removeAttr("selected"),e.attr("aria-selected","false")),this.selected=t}}return i.$inject=["$element"],{restrict:"E",require:["mdOption","^^mdSelectMenu"],controller:i,compile:r}}function i(){function e(e,n){var r=e.find("label");r.length||(r=t.element("<label>"),e.prepend(r)),n.label&&r.text(n.label)}return{restrict:"E",compile:e}}function a(e){function r(e,r,a,c,l,u,d){function m(n,o,i){function s(){i.target.attr("aria-expanded","true")}function m(){function t(e){var t=c.nodesToArray(f),n=t.indexOf(i.focusedNode);-1===n?n=0:"next"===e&&n<t.length-1?n++:"prev"===e&&n>0&&n--;var r=i.focusedNode=t[n];r&&r.focus()}function a(){t("next")}function s(){t("prev")}function l(){u.isMultiple||(i.restoreFocus=!0,n.$evalAsync(function(){e.hide(u.ngModel.$viewValue)}))}if(!i.isRemoved){var u=i.selectEl.controller("mdSelectMenu")||{};o.addClass("md-clickable"),i.backdrop&&i.backdrop.on("click",function(t){t.preventDefault(),t.stopPropagation(),i.restoreFocus=!1,n.$apply(e.cancel)}),i.selectEl.on("keydown",function(t){switch(t.keyCode){case r.KEY_CODE.SPACE:case r.KEY_CODE.ENTER:var o=c.getClosest(t.target,"md-option");o&&(i.selectEl.triggerHandler({type:"click",target:o}),t.preventDefault());break;case r.KEY_CODE.TAB:case r.KEY_CODE.ESCAPE:t.preventDefault(),i.restoreFocus=!0,n.$apply(e.cancel)}}),i.selectEl.on("keydown",function(e){switch(e.keyCode){case r.KEY_CODE.UP_ARROW:return s();case r.KEY_CODE.DOWN_ARROW:return a();default:if(e.keyCode>=31&&e.keyCode<=90){var t=i.selectEl.controller("mdSelectMenu").optNodeForKeyboardSearch(e);t&&t.focus()}}}),i.selectEl.on("click",l),i.selectEl.on("keydown",function(e){(32==e.keyCode||13==e.keyCode)&&l()})}}if(!i.target)throw new Error('$mdSelect.show() expected a target element in options.target but got "'+i.target+'"!');t.extend(i,{isRemoved:!1,target:t.element(i.target),parent:t.element(i.parent),selectEl:o.find("md-select-menu"),contentEl:o.find("md-content"),backdrop:i.hasBackdrop&&t.element('<md-backdrop class="md-select-backdrop md-click-catcher">')}),i.resizeFn=function(){a(function(){a(function(){p(n,o,i)})})},t.element(d).on("resize",i.resizeFn),t.element(d).on("orientationchange",i.resizeFn),s(),o.removeClass("md-leave");var f=i.selectEl[0].getElementsByTagName("md-option");return i.loadingAsync&&i.loadingAsync.then?i.loadingAsync.then(function(){n.$$loadingAsyncDone=!0,a(function(){a(function(){i.isRemoved||p(n,o,i)})})}):i.loadingAsync&&(n.$$loadingAsyncDone=!0),i.disableParentScroll&&!c.getClosest(i.target,"MD-DIALOG")?i.restoreScroll=c.disableScrollAround(i.element):i.disableParentScroll=!1,
u(m,75,!1),i.backdrop&&(l.inherit(i.backdrop,i.parent),i.parent.append(i.backdrop)),i.parent.append(o),a(function(){a(function(){i.isRemoved||p(n,o,i)})}),c.transitionEndPromise(i.selectEl,{timeout:350})}function f(e,r,o){o.isRemoved=!0,r.addClass("md-leave").removeClass("md-clickable"),o.target.attr("aria-expanded","false"),t.element(d).off("resize",o.resizeFn),t.element(d).off("orientationchange",o.resizefn),o.resizeFn=n;var i=o.selectEl.controller("mdSelect");return i&&i.setLabelText(o.selectEl.controller("mdSelectMenu").selectedLabels()),c.transitionEndPromise(r,{timeout:350}).then(function(){r.removeClass("md-active"),o.backdrop&&o.backdrop.remove(),r[0].parentNode===o.parent[0]&&o.parent[0].removeChild(r[0]),o.disableParentScroll&&o.restoreScroll(),o.restoreFocus&&o.target.focus(),i&&i.triggerClose()})}function p(e,t,n){var l,u=t[0],m=n.target[0].firstElementChild.firstElementChild,f=n.parent[0],p=n.selectEl[0],h=n.contentEl[0],g=f.getBoundingClientRect(),v=m.getBoundingClientRect(),$=!1,b={left:g.left+s,top:s,bottom:g.height-s,right:g.width-s-(c.floatingScrollbars()?16:0)},E={top:v.top-b.top,left:v.left-b.left,right:b.right-(v.left+v.width),bottom:b.bottom-(v.top+v.height)},y=g.width-2*s,M=h.scrollHeight>h.offsetHeight,w=p.querySelector("md-option[selected]"),C=p.getElementsByTagName("md-option"),A=p.getElementsByTagName("md-optgroup");l=w?w:A.length?A[0]:C.length?C[0]:h.firstElementChild||h,h.offsetWidth>y&&(h.style["max-width"]=y+"px"),$&&(h.style["min-width"]=v.width+"px"),M&&p.classList.add("md-overflow");var x=p.getBoundingClientRect(),T=i(l);if(l){var k=d.getComputedStyle(l);T.paddingLeft=parseInt(k.paddingLeft,10)||0,T.paddingRight=parseInt(k.paddingRight,10)||0}var S=l;if("MD-OPTGROUP"===(S.tagName||"").toUpperCase()&&(S=C[0]||h.firstElementChild||h),M){var N=h.offsetHeight/2;h.scrollTop=T.top+T.height/2-N,E.top<N?h.scrollTop=Math.min(T.top,h.scrollTop+N-E.top):E.bottom<N&&(h.scrollTop=Math.max(T.top+T.height-x.height,h.scrollTop-N+E.bottom))}var _,H,O;$?(_=v.left,H=v.top+v.height,O="50% 0",H+x.height>b.bottom&&(H=v.top-x.height,O="50% 100%")):(_=v.left+T.left-T.paddingLeft,H=Math.floor(v.top+v.height/2-T.height/2-T.top+h.scrollTop),O=T.left+v.width/2+"px "+(T.top+T.height/2-h.scrollTop)+"px 0px",u.style.minWidth=v.width+T.paddingLeft+T.paddingRight+"px");var D=u.getBoundingClientRect();u.style.left=o(b.left,_,b.right-D.width)+"px",u.style.top=o(b.top,H,b.bottom-D.height)+"px",p.style[r.CSS.TRANSFORM_ORIGIN]=O,p.style[r.CSS.TRANSFORM]="scale("+Math.min(v.width/x.width,1)+","+Math.min(v.height/x.height,1)+")",a(function(){t.addClass("md-active"),p.style[r.CSS.TRANSFORM]="",S&&(n.focusedNode=S,S.focus())})}return{parent:"body",onShow:m,onRemove:f,hasBackdrop:!0,disableParentScroll:!0,themable:!0}}function o(e,t,n){return Math.max(e,Math.min(t,n))}function i(e){return e?{left:e.offsetLeft,top:e.offsetTop,width:e.offsetWidth,height:e.offsetHeight}:{left:0,top:0,width:0,height:0}}return r.$inject=["$mdSelect","$mdConstant","$$rAF","$mdUtil","$mdTheming","$timeout","$window"],e("$mdSelect").setDefaults({methods:["target"],options:r})}var s=8,c=0;t.module("material.components.select",["material.core","material.components.backdrop"]).directive("mdSelect",e).directive("mdSelectMenu",r).directive("mdOption",o).directive("mdOptgroup",i).provider("$mdSelect",a),e.$inject=["$mdSelect","$mdUtil","$mdTheming","$mdAria","$interpolate","$compile","$parse"],r.$inject=["$parse","$mdUtil","$mdTheming"],o.$inject=["$mdButtonInkRipple","$mdUtil"],a.$inject=["$$interimElementProvider"]}(),function(){function e(e,n){return function(r){function o(){return e.when(r).then(function(e){return s=e,e})}var i,a="SideNav '"+r+"' is not available!",s=e.get(r);return s||e.notFoundError(r),i={isOpen:function(){return s&&s.isOpen()},isLockedOpen:function(){return s&&s.isLockedOpen()},toggle:function(){return s?s.toggle():n.reject(a)},open:function(){return s?s.open():n.reject(a)},close:function(){return s?s.close():n.reject(a)},then:function(e){var r=s?n.when(s):o();return r.then(e||t.noop)}}}}function r(){return{restrict:"A",require:"^mdSidenav",link:function(e,t,n,r){r.focusElement(t)}}}function o(e,r,o,i,a,s,c,l,u,d){function m(m,f,p,h){function g(e,t){m.isLockedOpen=e,e===t?f.toggleClass("md-locked-open",!!e):r[e?"addClass":"removeClass"](f,"md-locked-open"),T.toggleClass("md-locked-open",!!e)}function v(e){var t=f.parent();t[e?"on":"off"]("keydown",E),T[e?"on":"off"]("click",y),e&&(w=d[0].activeElement);var n=h.focusElement();return $(e),C=u.all([e?r.enter(T,t):r.leave(T),r[e?"removeClass":"addClass"](f,"md-closed")]).then(function(){m.isOpen&&n&&n.focus()})}function $(e){var r=f.parent();e?(M=r.css("overflow"),r.css("overflow","hidden")):t.isDefined(M)&&(r.css("overflow",M),M=n)}function b(t){if(m.isOpen==t)return u.when(!0);var n=u.defer();return m.isOpen=t,e(function(){C.then(function(e){m.isOpen||(w&&w.focus(),w=null),n.resolve(e)})},0,!1),n.promise}function E(e){var t=e.keyCode===s.KEY_CODE.ESCAPE;return t?y(e):u.when(!0)}function y(e){return e.preventDefault(),e.stopPropagation(),h.close()}var M,w=null,C=u.when(!0),A=o(p.mdIsLockedOpen),x=function(){return A(m.$parent,{$media:function(e){return i.warn("$media is deprecated for is-locked-open. Use $mdMedia instead."),a(e)},$mdMedia:a})},T=c('<md-backdrop class="md-sidenav-backdrop md-opaque ng-enter">')(m);f.on("$destroy",h.destroy),l.inherit(T,f),m.$watch(x,g),m.$watch("isOpen",v),h.$toggleOpen=b,h.focusElement(h.focusElement()||f)}return{restrict:"E",scope:{isOpen:"=?mdIsOpen"},controller:"$mdSidenavController",compile:function(e){return e.addClass("md-closed"),e.attr("tabIndex","-1"),m}}}function i(e,n,r,o,i){var a,s=this;s.isOpen=function(){return!!e.isOpen},s.isLockedOpen=function(){return!!e.isLockedOpen},s.open=function(){return s.$toggleOpen(!0)},s.close=function(){return s.$toggleOpen(!1)},s.toggle=function(){return s.$toggleOpen(!e.isOpen)},s.focusElement=function(e){return t.isDefined(e)&&(a=e),a},s.$toggleOpen=function(){return i.when(e.isOpen)},s.destroy=o.register(s,r.mdComponentId)}t.module("material.components.sidenav",["material.core","material.components.backdrop"]).factory("$mdSidenav",e).directive("mdSidenav",o).directive("mdSidenavFocus",r).controller("$mdSidenavController",i),e.$inject=["$mdComponentRegistry","$q"],o.$inject=["$timeout","$animate","$parse","$log","$mdMedia","$mdConstant","$compile","$mdTheming","$q","$document"],i.$inject=["$scope","$element","$attrs","$mdComponentRegistry","$q"]}(),function(){function e(e,n,r,o,i,a,s,c){function l(e,t){return e.attr({tabIndex:0,role:"slider"}),r.expect(e,"aria-label"),u}function u(r,l,u,d){function m(){$(),M(),v()}function f(e){Y=parseFloat(e),l.attr("aria-valuemin",e),m()}function p(e){G=parseFloat(e),l.attr("aria-valuemax",e),m()}function h(e){X=parseFloat(e),v()}function g(e){l.attr("aria-disabled",!!e)}function v(){if(t.isDefined(u.mdDiscrete)){var e=Math.floor((G-Y)/X);if(!Z){var r=n.getComputedStyle(U[0]);Z=t.element('<canvas style="position:absolute;">'),J=Z[0].getContext("2d"),J.fillStyle=r.backgroundColor||"black",U.append(Z)}var o=b();Z[0].width=o.width,Z[0].height=o.height;for(var i,a=0;e>=a;a++)i=Math.floor(o.width*(a/e)),J.fillRect(i-1,0,2,o.height)}}function $(){Q=q[0].getBoundingClientRect()}function b(){return z(),Q}function E(e){if(!l[0].hasAttribute("disabled")){var t;e.keyCode===i.KEY_CODE.LEFT_ARROW?t=-X:e.keyCode===i.KEY_CODE.RIGHT_ARROW&&(t=X),t&&((e.metaKey||e.ctrlKey||e.altKey)&&(t*=4),e.preventDefault(),e.stopPropagation(),r.$evalAsync(function(){y(d.$viewValue+t)}))}}function y(e){d.$setViewValue(w(C(e)))}function M(){isNaN(d.$viewValue)&&(d.$viewValue=d.$modelValue);var e=(d.$viewValue-Y)/(G-Y);r.modelValue=d.$viewValue,l.attr("aria-valuenow",d.$viewValue),A(e),F.text(d.$viewValue)}function w(e){return t.isNumber(e)?Math.max(Y,Math.min(G,e)):void 0}function C(e){if(t.isNumber(e)){var n=Math.round(e/X)*X;return Math.round(1e3*n)/1e3}}function A(e){B.css("width",100*e+"%"),V.css("left",100*e+"%"),l.toggleClass("md-min",0===e)}function x(e){if(!j()){l.addClass("active"),l[0].focus(),$();var t=I(D(e.pointer.x)),n=w(C(t));r.$apply(function(){y(n),A(R(n))})}}function T(e){if(!j()){l.removeClass("dragging active");var t=I(D(e.pointer.x)),n=w(C(t));r.$apply(function(){y(n),M()})}}function k(e){j()||(ee=!0,e.stopPropagation(),l.addClass("dragging"),_(e))}function S(e){ee&&(e.stopPropagation(),_(e))}function N(e){ee&&(e.stopPropagation(),ee=!1)}function _(e){te?O(e.pointer.x):H(e.pointer.x)}function H(e){r.$evalAsync(function(){y(I(D(e)))})}function O(e){var t=I(D(e)),n=w(C(t));A(D(e)),F.text(n)}function D(e){return Math.max(0,Math.min(1,(e-Q.left)/Q.width))}function I(e){return Y+e*(G-Y)}function R(e){return(e-Y)/(G-Y)}a(l),d=d||{$setViewValue:function(e){this.$viewValue=e,this.$viewChangeListeners.forEach(function(e){e()})},$parsers:[],$formatters:[],$viewChangeListeners:[]};var P=u.ngDisabled&&c(u.ngDisabled),j=P?function(){return P(r.$parent)}:t.noop,L=t.element(l[0].querySelector(".md-thumb")),F=t.element(l[0].querySelector(".md-thumb-text")),V=L.parent(),q=t.element(l[0].querySelector(".md-track-container")),B=t.element(l[0].querySelector(".md-track-fill")),U=t.element(l[0].querySelector(".md-track-ticks")),z=o.throttle($,5e3);t.isDefined(u.min)?u.$observe("min",f):f(0),t.isDefined(u.max)?u.$observe("max",p):p(100),t.isDefined(u.step)?u.$observe("step",h):h(1);var W=t.noop;u.ngDisabled&&(W=r.$parent.$watch(u.ngDisabled,g)),s.register(l,"drag"),l.on("keydown",E).on("$md.pressdown",x).on("$md.pressup",T).on("$md.dragstart",k).on("$md.drag",S).on("$md.dragend",N),setTimeout(m);var K=e.throttle(m);t.element(n).on("resize",K),r.$on("$destroy",function(){t.element(n).off("resize",K),W()}),d.$render=M,d.$viewChangeListeners.push(M),d.$formatters.push(w),d.$formatters.push(C);var Y,G,X,Z,J,Q={};$();var ee=!1,te=t.isDefined(u.mdDiscrete)}return{scope:{},require:"?ngModel",template:'<div class="md-slider-wrapper">        <div class="md-track-container">          <div class="md-track"></div>          <div class="md-track md-track-fill"></div>          <div class="md-track-ticks"></div>        </div>        <div class="md-thumb-container">          <div class="md-thumb"></div>          <div class="md-focus-thumb"></div>          <div class="md-focus-ring"></div>          <div class="md-sign">            <span class="md-thumb-text"></span>          </div>          <div class="md-disabled-thumb"></div>        </div>      </div>',compile:l}}t.module("material.components.slider",["material.core"]).directive("mdSlider",e),e.$inject=["$$rAF","$window","$mdAria","$mdUtil","$mdConstant","$mdTheming","$mdGesture","$parse"]}(),function(){function e(e,n,r){return{restrict:"E",replace:!0,transclude:!0,template:'<h2 class="md-subheader"><div class="md-subheader-inner"><span class="md-subheader-content"></span></div></h2>',compile:function(o,i,a){return function(o,i,s){function c(e){return t.element(e[0].querySelector(".md-subheader-content"))}r(i);var l=i[0].outerHTML;a(o,function(e){c(i).append(e)}),i.hasClass("md-no-sticky")||a(o,function(r){var a=n(t.element(l))(o);c(a).append(r),e(o,i,a)})}}}}t.module("material.components.subheader",["material.core","material.components.sticky"]).directive("mdSubheader",e),e.$inject=["$mdSticky","$compile","$mdTheming"]}(),function(){function e(e,r,o,i,a){function s(e){function t(e,t){t.addClass("md-sticky-clone"),t.css("top",g+"px");var n={element:e,clone:t};return h.items.push(n),f.parent().prepend(n.clone),p(),function(){h.items.forEach(function(t,n){t.element[0]===e[0]&&(h.items.splice(n,1),t.clone.remove())}),p()}}function o(){h.items.forEach(s),h.items=h.items.sort(function(e,t){return e.top<t.top?-1:1});for(var e,t=f.prop("scrollTop"),n=h.items.length-1;n>=0;n--)if(t>h.items[n].top){e=h.items[n];break}u(e)}function s(e){var t=e.element[0];for(e.top=0,e.left=0;t&&t!==f[0];)e.top+=t.offsetTop,e.left+=t.offsetLeft,t=t.offsetParent;e.height=e.element.prop("offsetHeight"),e.clone.css("margin-left",e.left+"px"),a.floatingScrollbars()&&e.clone.css("margin-right","0")}function c(){var e=f.prop("scrollTop"),t=e>(c.prevScrollTop||0);c.prevScrollTop=e,0===e?u(null):t&&h.next?h.next.top-e<=0?u(h.next):h.current&&(h.next.top-e<=h.next.height?m(h.current,h.next.top-h.next.height-e):m(h.current,null)):!t&&h.current&&(e<h.current.top&&u(h.prev),h.current&&h.next&&(e>=h.next.top-h.current.height?m(h.current,h.next.top-e-h.current.height):m(h.current,null)))}function u(e){if(h.current!==e){h.current&&(m(h.current,null),d(h.current,null)),e&&d(e,"active"),h.current=e;var t=h.items.indexOf(e);h.next=h.items[t+1],h.prev=h.items[t-1],d(h.next,"next"),d(h.prev,"prev")}}function d(e,t){e&&e.state!==t&&(e.state&&(e.clone.attr("sticky-prev-state",e.state),e.element.attr("sticky-prev-state",e.state)),e.clone.attr("sticky-state",t),e.element.attr("sticky-state",t),e.state=t)}function m(e,t){e&&(null===t||t===n?e.translateY&&(e.translateY=null,e.clone.css(r.CSS.TRANSFORM,"")):(e.translateY=t,e.clone.css(r.CSS.TRANSFORM,"translate3d("+e.left+"px,"+t+"px,0)")))}var f=e.$element,p=i.throttle(o);l(f),f.on("$scrollstart",p),f.on("$scroll",c);var h,g=f.prop("offsetTop");return h={prev:null,current:null,next:null,items:[],add:t,refreshElements:o}}function c(n){var r,o=t.element("<div>");e[0].body.appendChild(o[0]);for(var i=["sticky","-webkit-sticky"],a=0;a<i.length;++a)if(o.css({position:i[a],top:0,"z-index":2}),o.css("position")==i[a]){r=i[a];break}return o.remove(),r}function l(e){function t(){+a.now()-r>o?(n=!1,e.triggerHandler("$scrollend")):(e.triggerHandler("$scroll"),i(t))}var n,r,o=200;e.on("scroll touchmove",function(){n||(n=!0,i(t),e.triggerHandler("$scrollstart")),e.triggerHandler("$scroll"),r=+a.now()})}var u=c();return function(e,t,n){var r=t.controller("mdContent");if(r)if(u)t.css({position:u,top:0,"z-index":2});else{var o=r.$element.data("$$sticky");o||(o=s(r),r.$element.data("$$sticky",o));var i=o.add(t,n||t.clone());e.$on("$destroy",i)}}}t.module("material.components.sticky",["material.core","material.components.content"]).factory("$mdSticky",e),e.$inject=["$document","$mdConstant","$compile","$$rAF","$mdUtil"]}(),function(){function e(e){function t(e){function t(t,o,i){var a=e(i[n]);o.on(r,function(e){t.$apply(function(){a(t,{$event:e})})})}return{restrict:"A",link:t}}var n="md"+e,r="$md."+e.toLowerCase();return t.$inject=["$parse"],t}t.module("material.components.swipe",["material.core"]).directive("mdSwipeLeft",e("SwipeLeft")).directive("mdSwipeRight",e("SwipeRight"))}(),function(){function e(e,n,r,o,i,a,s,c){function l(e,n){var o=u.compile(e,n);return e.addClass("md-dragging"),function(e,n,l,u){function d(t){h(e)||(t.stopPropagation(),n.addClass("md-dragging"),$={width:g.prop("offsetWidth")},n.removeClass("transition"))}function m(e){if($){e.stopPropagation(),e.srcEvent&&e.srcEvent.preventDefault();var t=e.pointer.distanceX/$.width,n=u.$viewValue?1+t:t;n=Math.max(0,Math.min(1,n)),g.css(i.CSS.TRANSFORM,"translate3d("+100*n+"%,0,0)"),$.translate=n}}function f(e){if($){e.stopPropagation(),n.removeClass("md-dragging"),g.css(i.CSS.TRANSFORM,"");var t=u.$viewValue?$.translate<.5:$.translate>.5;t&&p(!u.$viewValue),$=null}}function p(t){e.$apply(function(){u.$setViewValue(t),u.$render()})}u=u||r.fakeNgModel();var h=a(l.ngDisabled),g=t.element(n[0].querySelector(".md-thumb-container")),v=t.element(n[0].querySelector(".md-container"));s(function(){n.removeClass("md-dragging")}),o(e,n,l,u),t.isDefined(l.ngDisabled)&&e.$watch(h,function(e){n.attr("tabindex",e?-1:0)}),c.register(v,"drag"),v.on("$md.dragstart",d).on("$md.drag",m).on("$md.dragend",f);var $}}var u=e[0];return{restrict:"E",priority:210,transclude:!0,template:'<div class="md-container"><div class="md-bar"></div><div class="md-thumb-container"><div class="md-thumb" md-ink-ripple md-ink-ripple-checkbox></div></div></div><div ng-transclude class="md-label"></div>',require:"?ngModel",compile:l}}t.module("material.components.switch",["material.core","material.components.checkbox"]).directive("mdSwitch",e),e.$inject=["mdCheckboxDirective","$mdTheming","$mdUtil","$document","$mdConstant","$parse","$$rAF","$mdGesture"]}(),function(){t.module("material.components.tabs",["material.core","material.components.icon"])}(),function(){function e(){return{restrict:"E"}}function n(e){function t(e,t,r,o){function i(i,a,c){return a=o.extractElementByName(a,"md-toast"),n=c.content,a.addClass(c.position.split(" ").map(function(e){return"md-"+e}).join(" ")),c.parent.addClass(s(c.position)),c.onSwipe=function(t,n){a.addClass("md-"+t.type.replace("$md.","")),e(r.cancel)},a.on("$md.swipeleft $md.swiperight",c.onSwipe),t.enter(a,c.parent)}function a(e,n,r){return n.off("$md.swipeleft $md.swiperight",r.onSwipe),r.parent.removeClass(s(r.position)),t.leave(n)}function s(e){return"md-toast-open-"+(e.indexOf("top")>-1?"top":"bottom")}return{onShow:i,onRemove:a,position:"bottom left",themable:!0,hideDelay:3e3}}var n,r=e("$mdToast").setDefaults({methods:["position","hideDelay","capsule"],options:t}).addPreset("simple",{argOption:"content",methods:["content","action","highlightAction","theme","parent"],options:["$mdToast","$mdTheming",function(e,t){var r={template:['<md-toast md-theme="{{ toast.theme }}" ng-class="{\'md-capsule\': toast.capsule}">',"<span flex>{{ toast.content }}</span>",'<md-button class="md-action" ng-if="toast.action" ng-click="toast.resolve()" ng-class="{\'md-highlight\': toast.highlightAction}">',"{{ toast.action }}","</md-button>","</md-toast>"].join(""),controller:["$scope",function(t){var r=this;t.$watch(function(){return n},function(){r.content=n}),this.resolve=function(){e.hide()}}],theme:t.defaultTheme(),controllerAs:"toast",bindToController:!0};return r}]}).addMethod("updateContent",function(e){n=e});return t.$inject=["$timeout","$animate","$mdToast","$mdUtil"],r}t.module("material.components.toast",["material.core","material.components.button"]).directive("mdToast",e).provider("$mdToast",n),n.$inject=["$$interimElementProvider"]}(),function(){function e(e,n,r,o,i,a){return{restrict:"E",controller:t.noop,link:function(s,c,l){function u(){function t(t,n){c.parent()[0]===n.parent()[0]&&(m&&m.off("scroll",g),n.on("scroll",g),n.attr("scroll-shrink","true"),m=n,e(o))}function o(){d=c.prop("offsetHeight");var e=-d*h+"px";m.css("margin-top",e),m.css("margin-bottom",e),u()}function u(e){var t=e?e.target.scrollTop:p;v(),f=Math.min(d/h,Math.max(0,f+t-p)),c.css(n.CSS.TRANSFORM,"translate3d(0,"+-f*h+"px,0)"),m.css(n.CSS.TRANSFORM,"translate3d(0,"+(d-f)*h+"px,0)"),p=t,c.hasClass("md-whiteframe-z1")?f||a(function(){i.removeClass(c,"md-whiteframe-z1")}):f&&a(function(){i.addClass(c,"md-whiteframe-z1")})}var d,m,f=0,p=0,h=l.mdShrinkSpeedFactor||.5,g=e.throttle(u),v=r.debounce(o,5e3);s.$on("$mdContentLoaded",t)}o(c),t.isDefined(l.mdScrollShrink)&&u()}}}t.module("material.components.toolbar",["material.core","material.components.content"]).directive("mdToolbar",e),e.$inject=["$$rAF","$mdConstant","$mdUtil","$mdTheming","$animate","$timeout"]}(),function(){function e(e,n,r,o,i,a,s,c,l){function u(u,f,p){function h(){g(),b(),w(),v(),$()}function g(){t.isDefined(p.mdDelay)||(u.delay=d)}function v(){u.$on("$destroy",function(){u.visible=!1,f.remove(),t.element(n).off("resize",D)}),u.$watch("visible",function(e){e?A():x()})}function $(){k.attr("aria-label")||k.text().trim()||k.attr("aria-label",f.text().trim())}function b(){f.detach(),f.attr("role","tooltip")}function E(){for(var e=f.parent();e&&"none"==n.getComputedStyle(e[0])["pointer-events"];)e=e.parent();return e}function y(){for(var e=f.parent()[0];e&&e!==s[0]&&e!==document.body;)e=e.parentNode;return e}function M(e,r){var o=n.getComputedStyle(f[0]);return t.isDefined(o[e])&&o[e]==r}function w(){var e=!1,r=function(){M("pointer-events","none")||C(!0)},i=function(){var t=u.hasOwnProperty("autohide")?u.autohide:p.hasOwnProperty("mdAutohide");(t||e||o[0].activeElement!==k[0])&&C(!1),e=!1};k.on("mousedown",function(){e=!0}),k.on("focus mouseenter touchstart",r),k.on("blur mouseleave touchend touchcancel",i),t.element(n).on("resize",D)}function C(t){C.value=!!t,C.queued||(t?(C.queued=!0,e(function(){u.visible=C.value,C.queued=!1},u.delay)):e(function(){u.visible=!1}))}function A(){return O.append(f),M("display","none")?(u.visible=!1,void f.detach()):(T(),void t.forEach([f,S,N],function(e){c.addClass(e,"md-show")}))}function x(){l.all([c.removeClass(N,"md-show"),c.removeClass(S,"md-show"),c.removeClass(f,"md-show")]).then(function(){u.visible||f.detach()})}function T(){function e(){var e="left"===_||"right"===_?2*Math.sqrt(Math.pow(r.width,2)+Math.pow(r.height/2,2)):2*Math.sqrt(Math.pow(r.width/2,2)+Math.pow(r.height,2)),t="left"===_?{left:100,top:50}:"right"===_?{left:0,top:50}:"top"===_?{left:50,top:100}:{left:50,top:0};S.css({width:e+"px",height:e+"px",left:t.left+"%",top:t.top+"%"})}function t(e){var t={left:e.left,top:e.top};return t.left=Math.min(t.left,O.prop("scrollWidth")-r.width-m),t.left=Math.max(t.left,m),t.top=Math.min(t.top,O.prop("scrollHeight")-r.height-m),t.top=Math.max(t.top,m),t}function n(e){return"left"===e?{left:o.left-r.width-m,top:o.top+o.height/2-r.height/2}:"right"===e?{left:o.left+o.width+m,top:o.top+o.height/2-r.height/2}:"top"===e?{left:o.left+o.width/2-r.width/2,top:o.top-r.height-m}:{left:o.left+o.width/2-r.width/2,top:o.top+o.height+m}}var r=i.offsetRect(f,O),o=i.offsetRect(k,O),a=n(_);_?a=t(a):a.top>f.prop("offsetParent").scrollHeight-r.height-m&&(a=t(n("top"))),f.css({top:a.top+"px",left:a.left+"px"}),e()}a(f);var k=E(),S=t.element(f[0].getElementsByClassName("md-background")[0]),N=t.element(f[0].getElementsByClassName("md-content")[0]),_=p.mdDirection,H=y(),O=t.element(H||document.body),D=r.throttle(function(){u.visible&&T()});return h()}var d=300,m=8;return{restrict:"E",transclude:!0,priority:210,template:'        <div class="md-background"></div>        <div class="md-content" ng-transclude></div>',scope:{visible:"=?mdVisible",delay:"=?mdDelay",autohide:"=?mdAutohide"},link:u}}t.module("material.components.tooltip",["material.core"]).directive("mdTooltip",e),e.$inject=["$timeout","$window","$$rAF","$document","$mdUtil","$mdTheming","$rootElement","$animate","$q"]}(),function(){t.module("material.components.whiteframe",[])}(),function(){function e(e,n,i,a,s,c,l,u,d,m){function f(){i.initOptionalProperties(e,m,{searchText:null,selectedItem:null}),c(n),v(),s(function(){b(),g(),h()})}function p(){function e(){var e=J.ul.getBoundingClientRect(),n={};e.right>i.right-o&&(n.left=t.right-e.width+"px"),J.$.ul.css(n)}if(!J)return s(p,0,!1);var t=J.wrap.getBoundingClientRect(),n=J.snap.getBoundingClientRect(),i=J.root.getBoundingClientRect(),a=n.bottom-i.top,c=i.bottom-n.top,l=t.left-i.left,u=t.width,d={left:l+"px",minWidth:u+"px",maxWidth:Math.max(t.right-i.left,i.right-t.left)-o+"px"};a>c&&i.height-t.bottom-o<r?(d.top="auto",d.bottom=c+"px",d.maxHeight=Math.min(r,t.top-i.top-o)+"px"):(d.top=a+"px",d.bottom="auto",d.maxHeight=Math.min(r,i.bottom-t.bottom-o)+"px"),J.$.ul.css(d),s(e,0,!1)}function h(){J.$.root.length&&(c(J.$.ul),J.$.ul.detach(),J.$.root.append(J.$.ul),u.pin&&u.pin(J.$.ul,d))}function g(){e.autofocus&&J.input.focus()}function v(){var n=parseInt(e.delay,10)||0;m.$observe("disabled",function(e){G.isDisabled=e}),m.$observe("required",function(e){G.isRequired=null!==e}),e.$watch("searchText",n?i.debounce(N,n):N),k(x),e.$watch("selectedItem",T),t.element(l).on("resize",p),e.$on("$destroy",$)}function $(){t.element(l).off("resize",p),J.$.ul.remove()}function b(){J={main:n[0],ul:n.find("ul")[0],input:n.find("input")[0],wrap:n.find("md-autocomplete-wrap")[0],root:document.body},J.li=J.ul.getElementsByTagName("li"),J.snap=E(),J.$=y(J)}function E(){for(var e=n;e.length;e=e.parent())if(t.isDefined(e.attr("md-autocomplete-snap")))return e[0];return J.wrap}function y(e){var n={};for(var r in e)n[r]=t.element(e[r]);return n}function M(e,t){!e&&t&&p(),e?i.enableScrolling():J&&s(function(){i.disableScrollAround(J.ul)},0,!1)}function w(){te=!0}function C(){te=!1,re||(G.hidden=!0)}function A(){J.input.focus()}function x(t,n){t&&(e.searchText=I(t)),e.itemChange&&t!==n&&e.itemChange(R(t))}function T(e,t){for(var n=0;n<ne.length;++n)ne[n](e,t)}function k(e){-1==ne.indexOf(e)&&ne.push(e)}function S(e){var t=ne.indexOf(e);-1!=t&&ne.splice(t,1)}function N(t,n){G.index=P(),t!==n&&t!==I(e.selectedItem)&&(e.selectedItem=null,e.textChange&&t!==n&&e.textChange(R(e.selectedItem)),F()?Y():(G.loading=!1,G.matches=[],G.hidden=j(),z()))}function _(){re=!1,te||(G.hidden=!0)}function H(){re=!0,t.isString(e.searchText)||(e.searchText=""),e.minLength>0||(G.hidden=j(),G.hidden||Y())}function O(e){switch(e.keyCode){case a.KEY_CODE.DOWN_ARROW:if(G.loading)return;e.preventDefault(),G.index=Math.min(G.index+1,G.matches.length-1),K(),z();break;case a.KEY_CODE.UP_ARROW:if(G.loading)return;e.preventDefault(),G.index=G.index<0?G.matches.length-1:Math.max(0,G.index-1),K(),z();break;case a.KEY_CODE.TAB:case a.KEY_CODE.ENTER:if(G.hidden||G.loading||G.index<0||G.matches.length<1)return;e.preventDefault(),q(G.index);break;case a.KEY_CODE.ESCAPE:G.matches=[],G.hidden=!0,G.index=P()}}function D(){return t.isNumber(e.minLength)?e.minLength:1}function I(t){return t&&e.itemText?e.itemText(R(t)):t}function R(e){if(e){var t={};return G.itemName&&(t[G.itemName]=e),t}}function P(){return e.autoselect?0:-1}function j(){return F()?void 0:!0}function L(){return I(G.matches[G.index])}function F(){return t.isDefined(e.searchText)&&e.searchText.length>=D()}function V(e,t,n){Object.defineProperty(G,e,{get:function(){return n},set:function(e){var r=n;n=e,t(e,r)}})}function q(t){e.selectedItem=G.matches[t],G.hidden=!0,G.index=0,G.matches=[],s(function(){J.$.input.controller("ngModel").$setViewValue(I(e.selectedItem)||e.searchText),G.hidden=!0})}function B(){e.searchText="",q(-1);var t=document.createEvent("CustomEvent");t.initCustomEvent("input",!0,!0,{value:e.searchText}),J.input.dispatchEvent(t),J.input.focus()}function U(n){function r(t){ee[i]=t,n===e.searchText&&(G.loading=!1,Q=null,G.matches=t,G.hidden=j(),z(),p())}var o=e.$parent.$eval(Z),i=n.toLowerCase();t.isArray(o)?r(o):o&&(G.loading=!0,o.success&&o.success(r),o.then&&o.then(r),o.error&&o.error(function(){G.loading=!1}))}function z(){G.messages=[W(),L()]}function W(){if(oe===G.matches.length)return"";switch(oe=G.matches.length,G.matches.length){case 0:return"There are no matches available.";case 1:return"There is 1 match available.";default:return"There are "+G.matches.length+" matches available."}}function K(){if(J.li[G.index]){var e=J.li[G.index],t=e.offsetTop,n=t+e.offsetHeight,r=J.ul.clientHeight;t<J.ul.scrollTop?J.ul.scrollTop=t:n>J.ul.scrollTop+r&&(J.ul.scrollTop=n-r)}}function Y(){var t=e.searchText,n=t.toLowerCase();Q&&Q.cancel&&(Q.cancel(),Q=null),!e.noCache&&ee[n]?(G.matches=ee[n],z()):U(t),re&&(G.hidden=j())}var G=this,X=e.itemsExpr.split(/ in /i),Z=X[1],J=null,Q=null,ee={},te=!1,ne=[],re=!1,oe=0;return V("hidden",M,!0),G.scope=e,G.parent=e.$parent,G.itemName=X[0],G.matches=[],G.loading=!1,G.hidden=!0,G.index=null,G.messages=[],G.id=i.nextUid(),G.isDisabled=null,G.isRequired=null,G.keydown=O,G.blur=_,G.focus=H,G.clear=B,G.select=q,G.listEnter=w,G.listLeave=C,G.mouseUp=A,G.getCurrentDisplayValue=L,G.registerSelectedItemWatcher=k,G.unregisterSelectedItemWatcher=S,f()}t.module("material.components.autocomplete").controller("MdAutocompleteCtrl",e);var n=41,r=5.5*n,o=8;e.$inject=["$scope","$element","$mdUtil","$mdConstant","$timeout","$mdTheming","$window","$animate","$rootElement","$attrs"]}(),function(){function e(e,t){return{controller:"MdAutocompleteCtrl",controllerAs:"$mdAutocompleteCtrl",scope:{inputName:"@mdInputName",inputMinlength:"@mdInputMinlength",inputMaxlength:"@mdInputMaxlength",searchText:"=?mdSearchText",selectedItem:"=?mdSelectedItem",itemsExpr:"@mdItems",itemText:"&mdItemText",placeholder:"@placeholder",noCache:"=?mdNoCache",itemChange:"&?mdSelectedItemChange",textChange:"&?mdSearchTextChange",minLength:"=?mdMinLength",delay:"=?mdDelay",autofocus:"=?mdAutofocus",floatingLabel:"@?mdFloatingLabel",autoselect:"=?mdAutoselect",menuClass:"@?mdMenuClass"},template:function(e,t){function n(){var t=e.find("md-item-template").remove(),n=t.length?t.html():e.html();return t.length||e.empty(),n}function r(){var t=e.find("md-not-found").remove(),n=t.length?t.html():"";return n?'<li ng-if="!$mdAutocompleteCtrl.matches.length && !$mdAutocompleteCtrl.loading                         && !$mdAutocompleteCtrl.hidden"                         ng-hide="$mdAutocompleteCtrl.hidden"                         md-autocomplete-parent-scope>'+n+"</li>":""}function o(){return t.mdFloatingLabel?'            <md-input-container flex ng-if="floatingLabel">              <label>{{floatingLabel}}</label>              <input type="search"                  id="fl-input-{{$mdAutocompleteCtrl.id}}"                  name="{{inputName}}"                  autocomplete="off"                  ng-required="isRequired"                  ng-minlength="inputMinlength"                  ng-maxlength="inputMaxlength"                  ng-disabled="$mdAutocompleteCtrl.isDisabled"                  ng-model="$mdAutocompleteCtrl.scope.searchText"                  ng-keydown="$mdAutocompleteCtrl.keydown($event)"                  ng-blur="$mdAutocompleteCtrl.blur()"                  ng-focus="$mdAutocompleteCtrl.focus()"                  aria-owns="ul-{{$mdAutocompleteCtrl.id}}"                  aria-label="{{floatingLabel}}"                  aria-autocomplete="list"                  aria-haspopup="true"                  aria-activedescendant=""                  aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>              <div md-autocomplete-parent-scope md-autocomplete-replace>'+s+"</div>            </md-input-container>":'            <input flex type="search"                id="input-{{$mdAutocompleteCtrl.id}}"                name="{{inputName}}"                ng-if="!floatingLabel"                autocomplete="off"                ng-required="isRequired"                ng-disabled="$mdAutocompleteCtrl.isDisabled"                ng-model="$mdAutocompleteCtrl.scope.searchText"                ng-keydown="$mdAutocompleteCtrl.keydown($event)"                ng-blur="$mdAutocompleteCtrl.blur()"                ng-focus="$mdAutocompleteCtrl.focus()"                placeholder="{{placeholder}}"                aria-owns="ul-{{$mdAutocompleteCtrl.id}}"                aria-label="{{placeholder}}"                aria-autocomplete="list"                aria-haspopup="true"                aria-activedescendant=""                aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>            <button                type="button"                tabindex="-1"                ng-if="$mdAutocompleteCtrl.scope.searchText && !$mdAutocompleteCtrl.isDisabled"                ng-click="$mdAutocompleteCtrl.clear()">              <md-icon md-svg-icon="md-close"></md-icon>              <span class="md-visually-hidden">Clear</span>            </button>                '}var i=r(),a=n(),s=e.html();return'        <md-autocomplete-wrap            layout="row"            ng-class="{ \'md-whiteframe-z1\': !floatingLabel }"            role="listbox">          '+o()+'          <md-progress-linear              ng-if="$mdAutocompleteCtrl.loading"              md-mode="indeterminate"></md-progress-linear>          <ul role="presentation"              class="md-autocomplete-suggestions md-whiteframe-z1 {{menuClass || \'\'}}"              id="ul-{{$mdAutocompleteCtrl.id}}"              ng-hide="$mdAutocompleteCtrl.hidden"              ng-mouseenter="$mdAutocompleteCtrl.listEnter()"              ng-mouseleave="$mdAutocompleteCtrl.listLeave()"              ng-mouseup="$mdAutocompleteCtrl.mouseUp()">            <li ng-repeat="(index, item) in $mdAutocompleteCtrl.matches"                ng-class="{ selected: index === $mdAutocompleteCtrl.index }"                ng-click="$mdAutocompleteCtrl.select(index)"                md-autocomplete-list-item="$mdAutocompleteCtrl.itemName">                '+a+"            </li>            "+i+'          </ul>        </md-autocomplete-wrap>        <aria-status            class="md-visually-hidden"            role="status"            aria-live="assertive">          <p ng-repeat="message in $mdAutocompleteCtrl.messages" ng-if="message">{{message}}</p>        </aria-status>';

}}}t.module("material.components.autocomplete").directive("mdAutocomplete",e),e.$inject=["$mdTheming","$mdUtil"]}(),function(){function e(e,n,r){function o(o){var i=r(n.html())(e),s=t.element("<div>").text(i).html(),c=n.attr("md-highlight-flags")||"",l=e.$watch(o,function(e){var t=a(e,c),r=s.replace(t,'<span class="highlight">$&</span>');n.html(r)});n.on("$destroy",function(){l()})}function i(e){return e?e.replace(/[\\\^\$\*\+\?\.\(\)\|\{\}\[\]]/g,"\\$&"):e}function a(e,t){var n="";return t.indexOf("^")>=1&&(n+="^"),n+=e,t.indexOf("$")>=1&&(n+="$"),new RegExp(i(n),t.replace(/[\$\^]/g,""))}return this.init=o,o()}t.module("material.components.autocomplete").controller("MdHighlightCtrl",e),e.$inject=["$scope","$element","$interpolate"]}(),function(){function e(){return{terminal:!0,scope:!1,controller:"MdHighlightCtrl",link:function(e,t,n,r){r.init(n.mdHighlightText)}}}t.module("material.components.autocomplete").directive("mdHighlightText",e)}(),function(){function e(e,t){function n(n,r,o){var i=n.$parent.$mdAutocompleteCtrl,a=i.parent.$new(!1,i.parent),s=i.scope.$eval(o.mdAutocompleteListItem);a[s]=n.item,e(r.contents())(a),r.attr({role:"option",id:"item_"+t.nextUid()})}return{terminal:!0,link:n,scope:!1}}t.module("material.components.autocomplete").directive("mdAutocompleteListItem",e),e.$inject=["$compile","$mdUtil"]}(),function(){function e(e,t){function n(t,n,r){var o=t.$parent.$mdAutocompleteCtrl;e(n.contents())(o.parent),r.hasOwnProperty("mdAutocompleteReplace")&&(n.after(n.contents()),n.remove())}return{restrict:"A",terminal:!0,link:n,scope:!1}}t.module("material.components.autocomplete").directive("mdAutocompleteParentScope",e),e.$inject=["$compile","$mdUtil"]}(),function(){function e(e){function r(r,o){return r.append(n),function(n,r,o,i){r.addClass("md-chip"),e(r),i&&t.element(r[0].querySelector(".md-chip-content")).on("blur",function(){i.selectedChip=-1})}}return{restrict:"E",require:"^?mdChips",compile:r}}t.module("material.components.chips").directive("mdChip",e);var n='    <span ng-if="!$mdChipsCtrl.readonly" class="md-visually-hidden">      {{$mdChipsCtrl.deleteHint}}    </span>';e.$inject=["$mdTheming"]}(),function(){function e(e){function t(t,n,r,o){n.on("click",function(e){t.$apply(function(){o.removeChip(t.$$replacedScope.$index)})}),e(function(){n.attr({tabindex:-1,ariaHidden:!0}),n.find("button").attr("tabindex","-1")})}return{restrict:"A",require:"^mdChips",scope:!1,link:t}}t.module("material.components.chips").directive("mdChipRemove",e),e.$inject=["$timeout"]}(),function(){function e(e,t){function n(t,n,r){var o=t.$parent.$mdChipsCtrl,i=o.parent.$new(!1,o.parent);i.$$replacedScope=t,i.$chip=t.$chip,i.$mdChipsCtrl=o,n.html(o.$scope.$eval(r.mdChipTransclude)),e(n.contents())(i)}return{restrict:"EA",terminal:!0,link:n,scope:!1}}t.module("material.components.chips").directive("mdChipTransclude",e),e.$inject=["$compile","$mdUtil"]}(),function(){function e(e,t,n,r,o){this.$timeout=o,this.$mdConstant=t,this.$scope=e,this.parent=e.$parent,this.$log=n,this.$element=r,this.ngModelCtrl=null,this.userInputNgModelCtrl=null,this.userInputElement=null,this.items=[],this.selectedChip=-1,this.deleteHint="Press delete to remove this chip.",this.deleteButtonLabel="Remove",this.chipBuffer="",this.useMdOnAppend=!1}t.module("material.components.chips").controller("MdChipsCtrl",e),e.$inject=["$scope","$mdConstant","$log","$element","$timeout"],e.prototype.inputKeydown=function(e){var t=this.getChipBuffer();switch(e.keyCode){case this.$mdConstant.KEY_CODE.ENTER:if(this.$scope.requireMatch||!t)break;e.preventDefault(),this.appendChip(t),this.resetChipBuffer();break;case this.$mdConstant.KEY_CODE.BACKSPACE:if(t)break;e.stopPropagation(),this.items.length&&this.selectAndFocusChipSafe(this.items.length-1)}},e.prototype.chipKeydown=function(e){if(!this.getChipBuffer())switch(e.keyCode){case this.$mdConstant.KEY_CODE.BACKSPACE:case this.$mdConstant.KEY_CODE.DELETE:if(this.selectedChip<0)return;e.preventDefault(),this.removeAndSelectAdjacentChip(this.selectedChip);break;case this.$mdConstant.KEY_CODE.LEFT_ARROW:e.preventDefault(),this.selectedChip<0&&(this.selectedChip=this.items.length),this.items.length&&this.selectAndFocusChipSafe(this.selectedChip-1);break;case this.$mdConstant.KEY_CODE.RIGHT_ARROW:e.preventDefault(),this.selectAndFocusChipSafe(this.selectedChip+1);break;case this.$mdConstant.KEY_CODE.ESCAPE:case this.$mdConstant.KEY_CODE.TAB:if(this.selectedChip<0)return;e.preventDefault(),this.onFocus()}},e.prototype.getPlaceholder=function(){var e=this.items.length&&(""==this.secondaryPlaceholder||this.secondaryPlaceholder);return e?this.placeholder:this.secondaryPlaceholder},e.prototype.removeAndSelectAdjacentChip=function(e){var n=this.getAdjacentChipIndex(e);this.removeChip(e),this.$timeout(t.bind(this,function(){this.selectAndFocusChipSafe(n)}))},e.prototype.resetSelectedChip=function(){this.selectedChip=-1},e.prototype.getAdjacentChipIndex=function(e){var t=this.items.length-1;return 0==t?-1:e==t?e-1:e},e.prototype.appendChip=function(e){this.items.indexOf(e)+1||(this.useMdOnAppend&&this.mdOnAppend&&(e=this.mdOnAppend({$chip:e})),this.items.push(e))},e.prototype.useMdOnAppendExpression=function(){this.useMdOnAppend=!0},e.prototype.getChipBuffer=function(){return this.userInputElement?this.userInputNgModelCtrl?this.userInputNgModelCtrl.$viewValue:this.userInputElement[0].value:this.chipBuffer},e.prototype.resetChipBuffer=function(){this.userInputElement?this.userInputNgModelCtrl?(this.userInputNgModelCtrl.$setViewValue(""),this.userInputNgModelCtrl.$render()):this.userInputElement[0].value="":this.chipBuffer=""},e.prototype.removeChip=function(e){this.items.splice(e,1)},e.prototype.removeChipAndFocusInput=function(e){this.removeChip(e),this.onFocus()},e.prototype.selectAndFocusChipSafe=function(e){return this.items.length?e===this.items.length?this.onFocus():(e=Math.max(e,0),e=Math.min(e,this.items.length-1),this.selectChip(e),void this.focusChip(e)):(this.selectChip(-1),void this.onFocus())},e.prototype.selectChip=function(e){e>=-1&&e<=this.items.length?this.selectedChip=e:this.$log.warn("Selected Chip index out of bounds; ignoring.")},e.prototype.selectAndFocusChip=function(e){this.selectChip(e),-1!=e&&this.focusChip(e)},e.prototype.focusChip=function(e){this.$element[0].querySelector('md-chip[index="'+e+'"] .md-chip-content').focus()},e.prototype.configureNgModel=function(e){this.ngModelCtrl=e;var t=this;e.$render=function(){t.items=t.ngModelCtrl.$viewValue}},e.prototype.onFocus=function(){var e=this.$element[0].querySelector("input");e&&e.focus(),this.resetSelectedChip()},e.prototype.onInputFocus=function(){this.inputHasFocus=!0,this.resetSelectedChip()},e.prototype.onInputBlur=function(){this.inputHasFocus=!1},e.prototype.configureUserInput=function(e){this.userInputElement=e;var n=e.controller("ngModel");n!=this.ngModelCtrl&&(this.userInputNgModelCtrl=n);var r=this.$scope,o=this;e.attr({tabindex:0}).on("keydown",function(e){r.$apply(t.bind(o,function(){o.inputKeydown(e)}))}).on("focus",t.bind(o,o.onInputFocus)).on("blur",t.bind(o,o.onInputBlur))},e.prototype.configureAutocomplete=function(e){e.registerSelectedItemWatcher(t.bind(this,function(e){e&&(this.appendChip(e),this.resetChipBuffer())})),this.$element.find("input").on("focus",t.bind(this,this.onInputFocus)).on("blur",t.bind(this,this.onInputBlur))},e.prototype.hasFocus=function(){return this.inputHasFocus||this.selectedChip>=0}}(),function(){function e(e,t,a,s,c){function l(n,l){function u(e){if(l.ngModel){var t=d[0].querySelector(e);return t&&t.outerHTML}}var d=l.$mdUserTemplate;l.$mdUserTemplate=null;var m=u("md-chips>*[md-chip-remove]")||i,f=u("md-chips>md-chip-template")||o,p=u("md-chips>md-autocomplete")||u("md-chips>input")||r,h=d.find("md-chip");return d[0].querySelector("md-chip-template>*[md-chip-remove]")&&s.warn("invalid placement of md-chip-remove within md-chip-template."),function(n,o,i,s){t.initOptionalProperties(n,l),e(o);var u=s[0];if(u.chipContentsTemplate=f,u.chipRemoveTemplate=m,u.chipInputTemplate=p,o.attr({ariaHidden:!0,tabindex:-1}).on("focus",function(){u.onFocus()}),l.ngModel&&(u.configureNgModel(o.controller("ngModel")),i.mdOnAppend&&u.useMdOnAppendExpression(),p!=r&&c(function(){0===p.indexOf("<md-autocomplete")&&u.configureAutocomplete(o.find("md-autocomplete").controller("mdAutocomplete")),u.configureUserInput(o.find("input"))})),h.length>0){var d=a(h)(n.$parent);c(function(){o.find("md-chips-wrap").prepend(d)})}}}return{template:function(e,t){t.$mdUserTemplate=e.clone();return n},require:["mdChips"],restrict:"E",controller:"MdChipsCtrl",controllerAs:"$mdChipsCtrl",bindToController:!0,compile:l,scope:{readonly:"=readonly",placeholder:"@",secondaryPlaceholder:"@",mdOnAppend:"&",deleteHint:"@",deleteButtonLabel:"@",requireMatch:"=?mdRequireMatch"}}}t.module("material.components.chips").directive("mdChips",e);var n='      <md-chips-wrap          ng-if="!$mdChipsCtrl.readonly || $mdChipsCtrl.items.length > 0"          ng-keydown="$mdChipsCtrl.chipKeydown($event)"          ng-class="{ \'md-focused\': $mdChipsCtrl.hasFocus() }"          class="md-chips">        <md-chip ng-repeat="$chip in $mdChipsCtrl.items"            index="{{$index}}"            ng-class="{\'md-focused\': $mdChipsCtrl.selectedChip == $index}">          <div class="md-chip-content"              tabindex="-1"              aria-hidden="true"              ng-focus="!$mdChipsCtrl.readonly && $mdChipsCtrl.selectChip($index)"              md-chip-transclude="$mdChipsCtrl.chipContentsTemplate"></div>          <div class="md-chip-remove-container"              md-chip-transclude="$mdChipsCtrl.chipRemoveTemplate"></div>        </md-chip>        <div ng-if="!$mdChipsCtrl.readonly && $mdChipsCtrl.ngModelCtrl"            class="md-chip-input-container"            md-chip-transclude="$mdChipsCtrl.chipInputTemplate"></div>        </div>      </md-chips-wrap>',r='        <input            tabindex="0"            placeholder="{{$mdChipsCtrl.getPlaceholder()}}"            aria-label="{{$mdChipsCtrl.getPlaceholder()}}"            ng-model="$mdChipsCtrl.chipBuffer"            ng-focus="$mdChipsCtrl.onInputFocus()"            ng-blur="$mdChipsCtrl.onInputBlur()"            ng-keydown="$mdChipsCtrl.inputKeydown($event)">',o="      <span>{{$chip}}</span>",i='      <button          class="md-chip-remove"          ng-if="!$mdChipsCtrl.readonly"          ng-click="$mdChipsCtrl.removeChipAndFocusInput($$replacedScope.$index)"          type="button"          aria-hidden="true"          tabindex="-1">        <md-icon md-svg-icon="md-close"></md-icon>        <span class="md-visually-hidden">          {{$mdChipsCtrl.deleteButtonLabel}}        </span>      </button>';e.$inject=["$mdTheming","$mdUtil","$compile","$log","$timeout"]}(),function(){function e(){this.selectedItem=null,this.searchText=""}t.module("material.components.chips").controller("MdContactChipsCtrl",e),e.prototype.queryContact=function(e){var n=this.contactQuery({$query:e});return this.filterSelected?n.filter(t.bind(this,this.filterSelectedContacts)):n},e.prototype.filterSelectedContacts=function(e){return-1==this.contacts.indexOf(e)}}(),function(){function e(e,t){function r(n,r){return function(n,o,i,a){t.initOptionalProperties(n,r),e(o),o.attr("tabindex","-1")}}return{template:function(e,t){return n},restrict:"E",controller:"MdContactChipsCtrl",controllerAs:"$mdContactChipsCtrl",bindToController:!0,compile:r,scope:{contactQuery:"&mdContacts",placeholder:"@",secondaryPlaceholder:"@",contactName:"@mdContactName",contactImage:"@mdContactImage",contactEmail:"@mdContactEmail",contacts:"=ngModel",requireMatch:"=?mdRequireMatch"}}}t.module("material.components.chips").directive("mdContactChips",e);var n='      <md-chips class="md-contact-chips"          ng-model="$mdContactChipsCtrl.contacts"          md-require-match="$mdContactChipsCtrl.requireMatch"          md-autocomplete-snap>          <md-autocomplete              md-menu-class="md-contact-chips-suggestions"              md-selected-item="$mdContactChipsCtrl.selectedItem"              md-search-text="$mdContactChipsCtrl.searchText"              md-items="item in $mdContactChipsCtrl.queryContact($mdContactChipsCtrl.searchText)"              md-item-text="$mdContactChipsCtrl.mdContactName"              md-no-cache="true"              md-autoselect              placeholder="{{$mdContactChipsCtrl.contacts.length == 0 ?                  $mdContactChipsCtrl.placeholder : $mdContactChipsCtrl.secondaryPlaceholder}}">            <div class="md-contact-suggestion">              <img                   ng-src="{{item[$mdContactChipsCtrl.contactImage]}}"                  alt="{{item[$mdContactChipsCtrl.contactName]}}" />              <span class="md-contact-name" md-highlight-text="$mdContactChipsCtrl.searchText">                {{item[$mdContactChipsCtrl.contactName]}}              </span>              <span class="md-contact-email" >{{item[$mdContactChipsCtrl.contactEmail]}}</span>            </div>          </md-autocomplete>          <md-chip-template>            <div class="md-contact-avatar">              <img                   ng-src="{{$chip[$mdContactChipsCtrl.contactImage]}}"                  alt="{{$chip[$mdContactChipsCtrl.contactName]}}" />            </div>            <div class="md-contact-name">              {{$chip[$mdContactChipsCtrl.contactName]}}            </div>          </md-chip-template>      </md-chips>';e.$inject=["$mdTheming","$mdUtil"]}(),function(){function e(){function e(e,n,r,o){if(o){var i=n.parent()[0].getElementsByTagName("md-tab"),a=Array.prototype.indexOf.call(i,n[0]),s=n.find("md-tab-body").eq(0).remove(),c=n.find("md-tab-label").eq(0).remove(),l=o.insertTab({scope:e,parent:e.$parent,index:a,element:n,template:s.html(),label:c.html()},a);e.select=e.select||t.noop,e.deselect=e.deselect||t.noop,e.$watch("active",function(e){e&&o.select(l.getIndex())}),e.$watch("disabled",function(){o.refreshIndex()}),e.$watch(function(){return Array.prototype.indexOf.call(i,n[0])},function(e){l.index=e,o.updateTabOrder()}),e.$on("$destroy",function(){o.removeTab(l)})}}return{require:"^?mdTabs",terminal:!0,template:function(e,t){function n(){function n(){return t.label}function r(){var t=e.find("md-tab-label").eq(0);return t.length?t.remove().html():void 0}function o(){var t=e.html();return e.empty(),t}return r()||n()||o()}function r(){var n=e.find("md-tab-body").eq(0),r=n.length?n.html():t.label?e.html():"";return n.length?n.remove():t.label&&e.empty(),r}var o=n(),i=r();return"<md-tab-label>"+o+"</md-tab-label><md-tab-body>"+i+"</md-tab-body>"},scope:{active:"=?mdActive",disabled:"=?ngDisabled",select:"&?mdOnSelect",deselect:"&?mdOnDeselect"},link:e}}t.module("material.components.tabs").directive("mdTab",e)}(),function(){function e(){return{require:"^?mdTabs",link:function(e,t,n,r){r&&r.attachRipple(e,t)}}}t.module("material.components.tabs").directive("mdTabItem",e)}(),function(){function e(){return{terminal:!0}}t.module("material.components.tabs").directive("mdTabLabel",e)}(),function(){function e(e){return{restrict:"A",compile:function(t,n){var r=e(n.mdTabScroll,null,!0);return function(e,t){t.on("mousewheel",function(t){e.$apply(function(){r(e,{$event:t})})})}}}}t.module("material.components.tabs").directive("mdTabScroll",e),e.$inject=["$parse"]}(),function(){function e(e,n,r,o,i,a,s,c,l,u,d){function m(){e.selectedIndex=e.selectedIndex||0,f(),h(),p(),d(n),o(function(){W(),q(),j(),Z.tabs[e.selectedIndex]&&Z.tabs[e.selectedIndex].scope.select(),ne=!0})}function f(){var e=l.$mdTabsTemplate,n=t.element(Q.data);n.html(e),u(n.contents())(Z.parent),delete l.$mdTabsTemplate}function p(){t.element(r).on("resize",T),t.element(Q.paging).on("DOMSubtreeModified",Z.updateInkBarStyles),t.element(Q.paging).on("DOMSubtreeModified",j)}function h(){s.initOptionalProperties(e,l),l.$observe("mdNoBar",function(n){e.noInkBar=t.isDefined(n)}),e.$watch("selectedIndex",E),e.$watch("dynamicHeight",function(e){e?n.addClass("md-dynamic-height"):n.removeClass("md-dynamic-height")}),e.$on("$destroy",g)}function g(){te=!0,t.element(r).off("resize",T),t.element(Q.paging).off("DOMSubtreeModified",Z.updateInkBarStyles),t.element(Q.paging).off("DOMSubtreeModified",j)}function v(e){n[e?"removeClass":"addClass"]("md-no-tab-content")}function $(n){var r=Z.shouldCenterTabs?"":"-"+n+"px";t.element(Q.paging).css(i.CSS.TRANSFORM,"translate3d("+r+", 0, 0)"),e.$broadcast("$mdTabsPaginationChanged")}function b(e,t){e!==t&&Q.tabs[e]&&(q(),V())}function E(t,n){t!==n&&(e.selectedIndex=R(t),Z.lastSelectedIndex=n,Z.updateInkBarStyles(),W(),q(t),e.$broadcast("$mdTabsChanged"),Z.tabs[n]&&Z.tabs[n].scope.deselect(),Z.tabs[t]&&Z.tabs[t].scope.select())}function y(){y.watcher||(y.watcher=e.$watch(function(){o(function(){y.watcher&&n.prop("offsetParent")&&(y.watcher(),y.watcher=null,T())},0,!1)}))}function M(t){switch(t.keyCode){case i.KEY_CODE.LEFT_ARROW:t.preventDefault(),F(-1,!0);break;case i.KEY_CODE.RIGHT_ARROW:t.preventDefault(),F(1,!0);break;case i.KEY_CODE.SPACE:case i.KEY_CODE.ENTER:t.preventDefault(),J||(e.selectedIndex=Z.focusIndex)}Z.lastClick=!1}function w(t){J||(Z.focusIndex=e.selectedIndex=t),Z.lastClick=!0,Z.tabs[t].element.triggerHandler("click")}function C(e){Z.shouldPaginate&&(e.preventDefault(),Z.offsetLeft=G(Z.offsetLeft-e.wheelDelta))}function A(){var e,t,n=Q.canvas.clientWidth,r=n+Z.offsetLeft;for(e=0;e<Q.tabs.length&&(t=Q.tabs[e],!(t.offsetLeft+t.offsetWidth>r));e++);Z.offsetLeft=G(t.offsetLeft)}function x(){var e,t;for(e=0;e<Q.tabs.length&&(t=Q.tabs[e],!(t.offsetLeft+t.offsetWidth>=Z.offsetLeft));e++);Z.offsetLeft=G(t.offsetLeft+t.offsetWidth-Q.canvas.clientWidth)}function T(){e.$apply(function(){Z.lastSelectedIndex=e.selectedIndex,Z.offsetLeft=G(Z.offsetLeft),o(Z.updateInkBarStyles,0,!1),o(j)})}function k(t){var n=e.selectedIndex,r=Z.tabs.splice(t.getIndex(),1)[0];z(),e.selectedIndex!==n||te||(r.scope.deselect(),Z.tabs[e.selectedIndex]&&Z.tabs[e.selectedIndex].scope.select()),o(function(){j(),Z.offsetLeft=G(Z.offsetLeft)})}function S(n,r){var i={getIndex:function(){return Z.tabs.indexOf(a)},isActive:function(){return this.getIndex()===e.selectedIndex},isLeft:function(){return this.getIndex()<e.selectedIndex},isRight:function(){return this.getIndex()>e.selectedIndex},shouldRender:function(){return!e.noDisconnect||this.isActive()},hasFocus:function(){return!Z.lastClick&&Z.hasFocus&&this.getIndex()===Z.focusIndex},id:s.nextUid()},a=t.extend(i,n);return t.isDefined(r)?Z.tabs.splice(r,0,a):Z.tabs.push(a),B(),U(),ne&&e.autoselect&&o(function(){w(Z.tabs.indexOf(a))}),o(j),a}function N(){var e={};return e.wrapper=n[0].getElementsByTagName("md-tabs-wrapper")[0],e.data=n[0].getElementsByTagName("md-tab-data")[0],e.canvas=e.wrapper.getElementsByTagName("md-tabs-canvas")[0],e.paging=e.canvas.getElementsByTagName("md-pagination-wrapper")[0],e.tabs=e.paging.getElementsByTagName("md-tab-item"),e.dummies=e.canvas.getElementsByTagName("md-dummy-tab"),e.inkBar=e.paging.getElementsByTagName("md-ink-bar")[0],e.contentsWrapper=n[0].getElementsByTagName("md-tabs-content-wrapper")[0],e.contents=e.contentsWrapper.getElementsByTagName("md-tab-content"),e}function _(){return Z.offsetLeft>0}function H(){var e=Q.tabs[Q.tabs.length-1];return e&&e.offsetLeft+e.offsetWidth>Q.canvas.clientWidth+Z.offsetLeft}function O(){switch(e.stretchTabs){case"always":return!0;case"never":return!1;default:return!Z.shouldPaginate&&r.matchMedia("(max-width: 600px)").matches}}function D(){return e.centerTabs&&!Z.shouldPaginate}function I(){if(e.noPagination||!ne)return!1;var r=n.prop("clientWidth");return t.forEach(Q.dummies,function(e){r-=e.offsetWidth}),0>r}function R(e){var t,n,r=Math.max(Z.tabs.length-e,e);for(t=0;r>=t;t++){if(n=Z.tabs[e+t],n&&n.scope.disabled!==!0)return n.getIndex();if(n=Z.tabs[e-t],n&&n.scope.disabled!==!0)return n.getIndex()}return e}function P(e,t,n){Object.defineProperty(Z,e,{get:function(){return n},set:function(e){var r=n;n=e,t(e,r)}})}function j(){Z.shouldPaginate=I(),Z.shouldCenterTabs=D(),o(function(){q(e.selectedIndex)})}function L(){var t=Z.tabs[e.selectedIndex],n=Z.tabs[Z.focusIndex];Z.tabs=Z.tabs.sort(function(e,t){return e.index-t.index}),e.selectedIndex=Z.tabs.indexOf(t),Z.focusIndex=Z.tabs.indexOf(n)}function F(e){var t,n=Z.focusIndex;for(t=n+e;Z.tabs[t]&&Z.tabs[t].scope.disabled;t+=e);Z.tabs[t]&&(Z.focusIndex=t)}function V(){Q.dummies[Z.focusIndex].focus()}function q(e){if(!Z.shouldCenterTabs){null==e&&(e=Z.focusIndex);var t=Q.tabs[e],n=t.offsetLeft,r=t.offsetWidth+n;Z.offsetLeft=Math.max(Z.offsetLeft,G(r-Q.canvas.clientWidth)),Z.offsetLeft=Math.min(Z.offsetLeft,G(n))}}function B(){ee.forEach(function(e){o(e)}),ee=[]}function U(){var e=!1;t.forEach(Z.tabs,function(t){t.template&&(e=!0)}),Z.hasContent=e}function z(){e.selectedIndex=R(e.selectedIndex),Z.focusIndex=R(Z.focusIndex)}function W(){if(!e.dynamicHeight)return n.css("height","");if(!Z.tabs.length)return ee.push(W);var t=Q.contents[e.selectedIndex],r=t?t.offsetHeight:0,o=Q.wrapper.offsetHeight,i=r+o,a=n.prop("clientHeight");a!==i&&(J=!0,c.animate(n,{height:a+"px"},{height:i+"px"}).then(function(){n.css("height",""),J=!1}))}function K(){if(Q.tabs[e.selectedIndex]){if(!Z.tabs.length)return ee.push(Z.updateInkBarStyles);if(!n.prop("offsetParent"))return y();var r=e.selectedIndex,o=Q.paging.offsetWidth,i=Q.tabs[r],a=i.offsetLeft,s=o-a-i.offsetWidth;Y(),t.element(Q.inkBar).css({left:a+"px",right:s+"px"})}}function Y(){var n=e.selectedIndex,r=Z.lastSelectedIndex,o=t.element(Q.inkBar);t.isNumber(r)&&(r>n?o.addClass("md-left").removeClass("md-right"):n>r&&o.addClass("md-right").removeClass("md-left"))}function G(e){if(!Q.tabs.length||!Z.shouldPaginate)return 0;var t=Q.tabs[Q.tabs.length-1],n=t.offsetLeft+t.offsetWidth;return e=Math.max(0,e),e=Math.min(n-Q.canvas.clientWidth,e)}function X(e,n){var r={colorElement:t.element(Q.inkBar)};a.attach(e,n,r)}var Z=this,J=!1,Q=N(),ee=[],te=!1,ne=!1;P("focusIndex",b,e.selectedIndex||0),P("offsetLeft",$,0),P("hasContent",v,!1),Z.scope=e,Z.parent=e.$parent,Z.tabs=[],Z.lastSelectedIndex=null,Z.hasFocus=!1,Z.lastClick=!0,Z.shouldPaginate=!1,Z.shouldCenterTabs=D(),Z.redirectFocus=V,Z.attachRipple=X,Z.shouldStretchTabs=O,Z.insertTab=S,Z.removeTab=k,Z.select=w,Z.scroll=C,Z.nextPage=A,Z.previousPage=x,Z.keydown=M,Z.canPageForward=H,Z.canPageBack=_,Z.refreshIndex=z,Z.incrementSelectedIndex=F,Z.updateInkBarStyles=s.debounce(K,100),Z.updateTabOrder=s.debounce(L,100),m()}t.module("material.components.tabs").controller("MdTabsController",e),e.$inject=["$scope","$element","$window","$timeout","$mdConstant","$mdTabInkRipple","$mdUtil","$animate","$attrs","$compile","$mdTheming"]}(),function(){function e(e,t,n){return{scope:{noPagination:"=?mdNoPagination",dynamicHeight:"=?mdDynamicHeight",centerTabs:"=?mdCenterTabs",selectedIndex:"=?mdSelected",stretchTabs:"@?mdStretchTabs",swipeContent:"=?mdSwipeContent",noDisconnect:"=?mdNoDisconnect",autoselect:"=?mdAutoselect"},template:function(e,t){return t.$mdTabsTemplate=e.html(),'        <md-tabs-wrapper ng-class="{ \'md-stretch-tabs\': $mdTabsCtrl.shouldStretchTabs() }">          <md-tab-data></md-tab-data>          <md-prev-button              tabindex="-1"              role="button"              aria-label="Previous Page"              aria-disabled="{{!$mdTabsCtrl.canPageBack()}}"              ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageBack() }"              ng-if="$mdTabsCtrl.shouldPaginate"              ng-click="$mdTabsCtrl.previousPage()">            <md-icon md-svg-icon="md-tabs-arrow"></md-icon>          </md-prev-button>          <md-next-button              tabindex="-1"              role="button"              aria-label="Next Page"              aria-disabled="{{!$mdTabsCtrl.canPageForward()}}"              ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageForward() }"              ng-if="$mdTabsCtrl.shouldPaginate"              ng-click="$mdTabsCtrl.nextPage()">            <md-icon md-svg-icon="md-tabs-arrow"></md-icon>          </md-next-button>          <md-tabs-canvas              tabindex="0"              aria-activedescendant="tab-item-{{$mdTabsCtrl.tabs[$mdTabsCtrl.focusIndex].id}}"              ng-focus="$mdTabsCtrl.redirectFocus()"              ng-class="{                  \'md-paginated\': $mdTabsCtrl.shouldPaginate,                  \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs              }"              ng-keydown="$mdTabsCtrl.keydown($event)"              role="tablist">            <md-pagination-wrapper                ng-class="{ \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs }"                md-tab-scroll="$mdTabsCtrl.scroll($event)">              <md-tab-item                  tabindex="-1"                  class="md-tab"                  style="max-width: {{ tabWidth ? tabWidth + \'px\' : \'none\' }}"                  ng-repeat="tab in $mdTabsCtrl.tabs"                  role="tab"                  aria-controls="tab-content-{{tab.id}}"                  aria-selected="{{tab.isActive()}}"                  aria-disabled="{{tab.scope.disabled || \'false\'}}"                  ng-click="$mdTabsCtrl.select(tab.getIndex())"                  ng-class="{                      \'md-active\':    tab.isActive(),                      \'md-focused\':   tab.hasFocus(),                      \'md-disabled\':  tab.scope.disabled                  }"                  ng-disabled="tab.scope.disabled"                  md-swipe-left="$mdTabsCtrl.nextPage()"                  md-swipe-right="$mdTabsCtrl.previousPage()"                  md-template="tab.label"                  md-scope="tab.parent"></md-tab-item>              <md-ink-bar ng-hide="noInkBar"></md-ink-bar>            </md-pagination-wrapper>            <div class="md-visually-hidden md-dummy-wrapper">              <md-dummy-tab                  class="md-tab"                  tabindex="-1"                  id="tab-item-{{tab.id}}"                  role="tab"                  aria-controls="tab-content-{{tab.id}}"                  aria-selected="{{tab.isActive()}}"                  aria-disabled="{{tab.scope.disabled || \'false\'}}"                  ng-focus="$mdTabsCtrl.hasFocus = true"                  ng-blur="$mdTabsCtrl.hasFocus = false"                  ng-repeat="tab in $mdTabsCtrl.tabs"                  md-template="tab.label"                  md-scope="tab.parent"></md-dummy-tab>            </div>          </md-tabs-canvas>        </md-tabs-wrapper>        <md-tabs-content-wrapper ng-show="$mdTabsCtrl.hasContent">          <md-tab-content              id="tab-content-{{tab.id}}"              role="tabpanel"              aria-labelledby="tab-item-{{tab.id}}"              md-swipe-left="swipeContent && $mdTabsCtrl.incrementSelectedIndex(1)"              md-swipe-right="swipeContent && $mdTabsCtrl.incrementSelectedIndex(-1)"              ng-if="$mdTabsCtrl.hasContent"              ng-repeat="(index, tab) in $mdTabsCtrl.tabs"              md-connected-if="tab.isActive()"              ng-class="{                \'md-no-transition\': $mdTabsCtrl.lastSelectedIndex == null,                \'md-active\':        tab.isActive(),                \'md-left\':          tab.isLeft(),                \'md-right\':         tab.isRight(),                \'md-no-scroll\':     dynamicHeight              }">            <div                md-template="tab.template"                md-scope="tab.parent"                ng-if="tab.shouldRender()"></div>          </md-tab-content>        </md-tabs-content-wrapper>      '},controller:"MdTabsController",controllerAs:"$mdTabsCtrl"}}t.module("material.components.tabs").directive("mdTabs",e),e.$inject=["$mdTheming","$mdUtil","$compile"]}(),function(){function e(e,t,n){function r(r,o,i,a){function s(){r.$watch("connected",function(e){e===!1?c():l()}),r.$on("$destroy",l)}function c(){a.scope.noDisconnect||t.disconnectScope(u)}function l(){a.scope.noDisconnect||t.reconnectScope(u)}if(a){var u=r.compileScope.$new();return o.html(r.template),e(o.contents())(u),n(s)}}return{restrict:"A",link:r,scope:{template:"=mdTemplate",compileScope:"=mdScope",connected:"=?mdConnectedIf"},require:"^?mdTabs"}}t.module("material.components.tabs").directive("mdTemplate",e),e.$inject=["$compile","$mdUtil","$timeout"]}(),function(){t.module("material.core").constant("$MD_THEME_CSS","/* mixin definition ; sets LTR and RTL within the same style call */md-autocomplete.md-THEME_NAME-theme {  background: '{{background-50}}'; }  md-autocomplete.md-THEME_NAME-theme[disabled] {    background: '{{background-100}}'; }  md-autocomplete.md-THEME_NAME-theme button md-icon path {    fill: '{{background-600}}'; }  md-autocomplete.md-THEME_NAME-theme button:after {    background: '{{background-600-0.3}}'; }.md-autocomplete-suggestions.md-THEME_NAME-theme {  background: '{{background-50}}'; }  .md-autocomplete-suggestions.md-THEME_NAME-theme li {    color: '{{background-900}}'; }    .md-autocomplete-suggestions.md-THEME_NAME-theme li .highlight {      color: '{{background-600}}'; }    .md-autocomplete-suggestions.md-THEME_NAME-theme li:hover, .md-autocomplete-suggestions.md-THEME_NAME-theme li.selected {      background: '{{background-200}}'; }md-backdrop.md-opaque.md-THEME_NAME-theme {  background-color: '{{foreground-4-0.5}}'; }md-bottom-sheet.md-THEME_NAME-theme {  background-color: '{{background-50}}';  border-top-color: '{{background-300}}'; }  md-bottom-sheet.md-THEME_NAME-theme.md-list md-list-item {    color: '{{foreground-1}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    background-color: '{{background-50}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    color: '{{foreground-1}}'; }a.md-button.md-THEME_NAME-theme, .md-button.md-THEME_NAME-theme {  border-radius: 3px; }  a.md-button.md-THEME_NAME-theme:not([disabled]):hover, .md-button.md-THEME_NAME-theme:not([disabled]):hover {    background-color: '{{background-500-0.2}}'; }  a.md-button.md-THEME_NAME-theme:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme:not([disabled]).md-focused {    background-color: '{{background-500-0.2}}'; }  a.md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover, .md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover {    background-color: transparent; }  a.md-button.md-THEME_NAME-theme.md-fab, .md-button.md-THEME_NAME-theme.md-fab {    border-radius: 50%;    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-fab md-icon, .md-button.md-THEME_NAME-theme.md-fab md-icon {      color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {      background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {      background-color: '{{accent-A700}}'; }  a.md-button.md-THEME_NAME-theme.md-icon-button, .md-button.md-THEME_NAME-theme.md-icon-button {    border-radius: 50%; }  a.md-button.md-THEME_NAME-theme.md-primary, .md-button.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised, a.md-button.md-THEME_NAME-theme.md-primary.md-fab, .md-button.md-THEME_NAME-theme.md-primary.md-raised, .md-button.md-THEME_NAME-theme.md-primary.md-fab {      color: '{{primary-contrast}}';      background-color: '{{primary-color}}'; }      a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon {        color: '{{primary-contrast}}'; }      a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover {        background-color: '{{primary-color}}'; }      a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused {        background-color: '{{primary-600}}'; }    a.md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon {      color: '{{primary-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab, .md-button.md-THEME_NAME-theme.md-fab {    border-radius: 50%;    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon {      color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {      background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {      background-color: '{{accent-A700}}'; }  a.md-button.md-THEME_NAME-theme.md-raised, .md-button.md-THEME_NAME-theme.md-raised {    color: '{{background-contrast}}';    background-color: '{{background-50}}'; }    a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon {      color: '{{background-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover {      background-color: '{{background-50}}'; }    a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused {      background-color: '{{background-200}}'; }  a.md-button.md-THEME_NAME-theme.md-warn, .md-button.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised, a.md-button.md-THEME_NAME-theme.md-warn.md-fab, .md-button.md-THEME_NAME-theme.md-warn.md-raised, .md-button.md-THEME_NAME-theme.md-warn.md-fab {      color: '{{warn-contrast}}';      background-color: '{{warn-color}}'; }      a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon {        color: '{{warn-contrast}}'; }      a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover {        background-color: '{{warn-color}}'; }      a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused {        background-color: '{{warn-700}}'; }    a.md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon {      color: '{{warn-color}}'; }  a.md-button.md-THEME_NAME-theme.md-accent, .md-button.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised, a.md-button.md-THEME_NAME-theme.md-accent.md-fab, .md-button.md-THEME_NAME-theme.md-accent.md-raised, .md-button.md-THEME_NAME-theme.md-accent.md-fab {      color: '{{accent-contrast}}';      background-color: '{{accent-color}}'; }      a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon {        color: '{{accent-contrast}}'; }      a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover {        background-color: '{{accent-color}}'; }      a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused {        background-color: '{{accent-700}}'; }    a.md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon {      color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme[disabled], a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], a.md-button.md-THEME_NAME-theme.md-accent[disabled], a.md-button.md-THEME_NAME-theme.md-warn[disabled], .md-button.md-THEME_NAME-theme[disabled], .md-button.md-THEME_NAME-theme.md-raised[disabled], .md-button.md-THEME_NAME-theme.md-fab[disabled], .md-button.md-THEME_NAME-theme.md-accent[disabled], .md-button.md-THEME_NAME-theme.md-warn[disabled] {    color: '{{foreground-3}}';    cursor: not-allowed; }    a.md-button.md-THEME_NAME-theme[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon, .md-button.md-THEME_NAME-theme[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon {      color: '{{foreground-3}}'; }  a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], .md-button.md-THEME_NAME-theme.md-raised[disabled], .md-button.md-THEME_NAME-theme.md-fab[disabled] {    background-color: '{{foreground-4}}'; }  a.md-button.md-THEME_NAME-theme[disabled], .md-button.md-THEME_NAME-theme[disabled] {    background-color: transparent; }md-card.md-THEME_NAME-theme {  background-color: '{{background-color}}';  border-radius: 2px; }  md-card.md-THEME_NAME-theme .md-card-image {    border-radius: 2px 2px 0 0; }md-checkbox.md-THEME_NAME-theme .md-ripple {  color: '{{accent-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked.md-focused .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon {  background-color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ripple {  color: '{{primary-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon {  background-color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked.md-focused .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ripple {  color: '{{warn-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon {  background-color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked.md-focused:not([disabled]) .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-icon {  border-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon {  background-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-label {  color: '{{foreground-3}}'; }md-content.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }md-chips.md-THEME_NAME-theme .md-chips {  box-shadow: 0 1px '{{background-300}}'; }  md-chips.md-THEME_NAME-theme .md-chips.md-focused {    box-shadow: 0 2px '{{primary-color}}'; }md-chips.md-THEME_NAME-theme .md-chip {  background: '{{background-300}}';  color: '{{background-800}}'; }  md-chips.md-THEME_NAME-theme .md-chip.md-focused {    background: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-chips.md-THEME_NAME-theme .md-chip.md-focused md-icon {      color: '{{primary-contrast}}'; }md-chips.md-THEME_NAME-theme md-chip-remove .md-button md-icon path {  fill: '{{background-500}}'; }.md-contact-suggestion span.md-contact-email {  color: '{{background-400}}'; }md-dialog.md-THEME_NAME-theme {  border-radius: 4px;  background-color: '{{background-color}}'; }  md-dialog.md-THEME_NAME-theme.md-content-overflow .md-actions {    border-top-color: '{{foreground-4}}'; }md-divider.md-THEME_NAME-theme {  border-top-color: '{{foreground-4}}'; }md-icon.md-THEME_NAME-theme {  color: '{{foreground-2}}'; }  md-icon.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  md-icon.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  md-icon.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-input-container.md-THEME_NAME-theme .md-input {  color: '{{foreground-1}}';  border-color: '{{foreground-4}}';  text-shadow: '{{foreground-shadow}}'; }  md-input-container.md-THEME_NAME-theme .md-input::-webkit-input-placeholder, md-input-container.md-THEME_NAME-theme .md-input::-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-ms-input-placeholder {    color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme > md-icon {  color: '{{foreground-1}}'; }md-input-container.md-THEME_NAME-theme label, md-input-container.md-THEME_NAME-theme .md-placeholder {  text-shadow: '{{foreground-shadow}}';  color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme ng-messages, md-input-container.md-THEME_NAME-theme [ng-message], md-input-container.md-THEME_NAME-theme [data-ng-message], md-input-container.md-THEME_NAME-theme [x-ng-message] {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-has-value label {  color: '{{foreground-2}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused .md-input {  border-color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused label {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused md-icon {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent .md-input {  border-color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent label {  color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn .md-input {  border-color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn label {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid .md-input {  border-color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid.md-input-focused label {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid data-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid x-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid .md-char-counter {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme .md-input[disabled], [disabled] md-input-container.md-THEME_NAME-theme .md-input {  border-bottom-color: transparent;  color: '{{foreground-3}}';  background-image: linear-gradient(to right, '{{foreground-3}}' 0%, '{{foreground-3}}' 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, '{{foreground-3}}' 100%); }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h4, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h4 {  color: '{{foreground-1}}'; }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text p, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text p {  color: '{{foreground-2}}'; }md-list.md-THEME_NAME-theme .md-proxy-focus.md-focused div.md-no-style {  background-color: '{{background-100}}'; }md-list.md-THEME_NAME-theme md-list-item > md-icon {  color: '{{foreground-2}}'; }  md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight {    color: '{{primary-color}}'; }    md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight.md-accent {      color: '{{accent-color}}'; }md-list.md-THEME_NAME-theme md-list-item button {  background-color: '{{background-color}}'; }  md-list.md-THEME_NAME-theme md-list-item button.md-button:not([disabled]):hover {    background-color: '{{background-color}}'; }md-menu-content.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }  md-menu-content.md-THEME_NAME-theme md-menu-divider {    background-color: '{{foreground-4}}'; }md-progress-circular.md-THEME_NAME-theme {  background-color: transparent; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-gap {    border-top-color: '{{primary-color}}';    border-bottom-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-top-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-right-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle {    border-left-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-gap {    border-top-color: '{{warn-color}}';    border-bottom-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-top-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-right-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle {    border-left-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-gap {    border-top-color: '{{accent-color}}';    border-bottom-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-top-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-right-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle {    border-left-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme .md-container {  background-color: '{{primary-100}}'; }md-progress-linear.md-THEME_NAME-theme .md-bar {  background-color: '{{primary-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-container {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-bar {  background-color: '{{warn-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-container {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-bar {  background-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-bar1 {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-dashed:before {  background: radial-gradient('{{warn-100}}' 0%, '{{warn-100}}' 16%, transparent 42%); }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-bar1 {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-dashed:before {  background: radial-gradient('{{accent-100}}' 0%, '{{accent-100}}' 16%, transparent 42%); }md-radio-button.md-THEME_NAME-theme .md-off {  border-color: '{{foreground-2}}'; }md-radio-button.md-THEME_NAME-theme .md-on {  background-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-off {  border-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme .md-container .md-ripple {  color: '{{accent-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-on {  background-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off {  border-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple {  color: '{{primary-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-on {  background-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off {  border-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple {  color: '{{warn-600}}'; }md-radio-group.md-THEME_NAME-theme[disabled], md-radio-button.md-THEME_NAME-theme[disabled] {  color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-off, md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-off {    border-color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-on, md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-on {    border-color: '{{foreground-3}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked:not([disabled]).md-primary .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked.md-primary .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-select.md-THEME_NAME-theme.ng-invalid.ng-dirty .md-select-label {  color: '{{warn-500}}' !important;  border-bottom-color: '{{warn-500}}' !important; }md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-label {  border-bottom-color: '{{primary-color}}';  color: '{{ foreground-1 }}'; }  md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-label.md-placeholder {    color: '{{ foreground-1 }}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-accent .md-select-label {  border-bottom-color: '{{accent-color}}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-warn .md-select-label {  border-bottom-color: '{{warn-color}}'; }md-select.md-THEME_NAME-theme[disabled] .md-select-label {  color: '{{foreground-3}}'; }  md-select.md-THEME_NAME-theme[disabled] .md-select-label.md-placeholder {    color: '{{foreground-3}}'; }md-select.md-THEME_NAME-theme .md-select-label {  border-bottom-color: '{{foreground-4}}'; }  md-select.md-THEME_NAME-theme .md-select-label.md-placeholder {    color: '{{foreground-2}}'; }md-select-menu.md-THEME_NAME-theme md-optgroup {  color: '{{foreground-2}}'; }  md-select-menu.md-THEME_NAME-theme md-optgroup md-option {    color: '{{foreground-1}}'; }md-select-menu.md-THEME_NAME-theme md-option[selected] {  color: '{{primary-500}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected]:focus {    color: '{{primary-600}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent {    color: '{{accent-500}}'; }    md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent:focus {      color: '{{accent-600}}'; }md-select-menu.md-THEME_NAME-theme md-option:focus:not([selected]) {  background: '{{background-200}}'; }md-sidenav.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track {  background-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme .md-track-ticks {  background-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-focus-thumb {  background-color: '{{foreground-2}}'; }md-slider.md-THEME_NAME-theme .md-focus-ring {  border-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-disabled-thumb {  border-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme.md-min .md-thumb:after {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track.md-track-fill {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb:after {  border-color: '{{accent-color}}';  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-sign {  background-color: '{{accent-color}}'; }  md-slider.md-THEME_NAME-theme .md-sign:after {    border-top-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb-text {  color: '{{accent-contrast}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-track.md-track-fill {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb:after {  border-color: '{{warn-color}}';  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-sign {  background-color: '{{warn-color}}'; }  md-slider.md-THEME_NAME-theme.md-warn .md-sign:after {    border-top-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb-text {  color: '{{warn-contrast}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-track.md-track-fill {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb:after {  border-color: '{{primary-color}}';  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-sign {  background-color: '{{primary-color}}'; }  md-slider.md-THEME_NAME-theme.md-primary .md-sign:after {    border-top-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb-text {  color: '{{primary-contrast}}'; }md-slider.md-THEME_NAME-theme[disabled] .md-thumb:after {  border-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme[disabled]:not(.md-min) .md-thumb:after {  background-color: '{{foreground-3}}'; }.md-subheader.md-THEME_NAME-theme {  color: '{{ foreground-2-0.23 }}';  background-color: '{{background-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme .md-thumb {  background-color: '{{background-50}}'; }md-switch.md-THEME_NAME-theme .md-bar {  background-color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-thumb {  background-color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-bar {  background-color: '{{accent-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-focused .md-thumb:before {  background-color: '{{accent-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-thumb {  background-color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-bar {  background-color: '{{primary-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary.md-focused .md-thumb:before {  background-color: '{{primary-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-thumb {  background-color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-bar {  background-color: '{{warn-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn.md-focused .md-thumb:before {  background-color: '{{warn-color-0.26}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-thumb {  background-color: '{{background-400}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-bar {  background-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: transparent;  border-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme .md-paginator md-icon {  color: '{{primary-color}}'; }md-tabs.md-THEME_NAME-theme md-ink-bar {  color: '{{accent-color}}';  background: '{{accent-color}}'; }md-tabs.md-THEME_NAME-theme .md-tab {  color: '{{foreground-2}}'; }  md-tabs.md-THEME_NAME-theme .md-tab[disabled] {    color: '{{foreground-3}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-active, md-tabs.md-THEME_NAME-theme .md-tab.md-focused {    color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-focused {    background: '{{primary-color-0.1}}'; }  md-tabs.md-THEME_NAME-theme .md-tab .md-ripple-container {    color: '{{accent-100}}'; }md-tabs.md-THEME_NAME-theme.md-accent md-tabs-wrapper {  background-color: '{{accent-color}}'; }md-tabs.md-THEME_NAME-theme.md-accent md-tab-item:not([disabled]) {  color: '{{accent-100}}'; }  md-tabs.md-THEME_NAME-theme.md-accent md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-accent md-tab-item:not([disabled]).md-focused {    color: '{{accent-contrast}}'; }  md-tabs.md-THEME_NAME-theme.md-accent md-tab-item:not([disabled]).md-focused {    background: '{{accent-contrast-0.1}}'; }md-tabs.md-THEME_NAME-theme.md-accent md-ink-bar {  color: '{{primary-600-1}}';  background: '{{primary-600-1}}'; }md-tabs.md-THEME_NAME-theme.md-primary md-tabs-wrapper {  background-color: '{{primary-color}}'; }md-tabs.md-THEME_NAME-theme.md-primary md-tab-item:not([disabled]) {  color: '{{primary-100}}'; }  md-tabs.md-THEME_NAME-theme.md-primary md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-primary md-tab-item:not([disabled]).md-focused {    color: '{{primary-contrast}}'; }  md-tabs.md-THEME_NAME-theme.md-primary md-tab-item:not([disabled]).md-focused {    background: '{{primary-contrast-0.1}}'; }md-tabs.md-THEME_NAME-theme.md-warn md-tabs-wrapper {  background-color: '{{warn-color}}'; }md-tabs.md-THEME_NAME-theme.md-warn md-tab-item:not([disabled]) {  color: '{{warn-100}}'; }  md-tabs.md-THEME_NAME-theme.md-warn md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-warn md-tab-item:not([disabled]).md-focused {    color: '{{warn-contrast}}'; }  md-tabs.md-THEME_NAME-theme.md-warn md-tab-item:not([disabled]).md-focused {    background: '{{warn-contrast-0.1}}'; }md-toolbar > md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: '{{primary-color}}'; }md-toolbar > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]) {  color: '{{primary-100}}'; }  md-toolbar > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-active, md-toolbar > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-focused {    color: '{{primary-contrast}}'; }  md-toolbar > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-focused {    background: '{{primary-contrast-0.1}}'; }md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: '{{accent-color}}'; }md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]) {  color: '{{accent-100}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-active, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-focused {    color: '{{accent-contrast}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-focused {    background: '{{accent-contrast-0.1}}'; }md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme md-ink-bar {  color: '{{primary-600-1}}';  background: '{{primary-600-1}}'; }md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: '{{warn-color}}'; }md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]) {  color: '{{warn-100}}'; }  md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-active, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-focused {    color: '{{warn-contrast}}'; }  md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-focused {    background: '{{warn-contrast-0.1}}'; }md-toast.md-THEME_NAME-theme {  background-color: #323232;  color: '{{background-50}}'; }  md-toast.md-THEME_NAME-theme .md-button {    color: '{{background-50}}'; }    md-toast.md-THEME_NAME-theme .md-button.md-highlight {      color: '{{primary-A200}}'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-accent {        color: '{{accent-A200}}'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-warn {        color: '{{warn-A200}}'; }md-toolbar.md-THEME_NAME-theme {  background-color: '{{primary-color}}';  color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme md-icon {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme .md-button {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme.md-accent {    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }  md-toolbar.md-THEME_NAME-theme.md-warn {    background-color: '{{warn-color}}';    color: '{{warn-contrast}}'; }md-tooltip.md-THEME_NAME-theme {  color: '{{background-A100}}'; }  md-tooltip.md-THEME_NAME-theme .md-background {    background-color: '{{foreground-2}}'; }");

}()}(window,window.angular)},{}],12:[function(e,t,n){e("angular"),e("angular-animate"),e("angular-aria"),e("./angular-material"),t.exports="ngMaterial"},{"./angular-material":11,angular:14,"angular-animate":8,"angular-aria":10}],13:[function(e,t,n){!function(e,t,n){"use strict";function r(e,t){return t=t||Error,function(){var n,r,o=2,i=arguments,a=i[0],s="["+(e?e+":":"")+a+"] ",c=i[1];for(s+=c.replace(/\{\d+\}/g,function(e){var t=+e.slice(1,-1),n=t+o;return n<i.length?be(i[n]):e}),s+="\nhttp://errors.angularjs.org/1.4.3/"+(e?e+"/":"")+a,r=o,n="?";r<i.length;r++,n="&")s+=n+"p"+(r-o)+"="+encodeURIComponent(be(i[r]));return new t(s)}}function o(e){if(null==e||k(e))return!1;var t="length"in Object(e)&&e.length;return e.nodeType===Kr&&t?!0:w(e)||jr(e)||0===t||"number"==typeof t&&t>0&&t-1 in e}function i(e,t,n){var r,a;if(e)if(x(e))for(r in e)"prototype"==r||"length"==r||"name"==r||e.hasOwnProperty&&!e.hasOwnProperty(r)||t.call(n,e[r],r,e);else if(jr(e)||o(e)){var s="object"!=typeof e;for(r=0,a=e.length;a>r;r++)(s||r in e)&&t.call(n,e[r],r,e)}else if(e.forEach&&e.forEach!==i)e.forEach(t,n,e);else if(M(e))for(r in e)t.call(n,e[r],r,e);else if("function"==typeof e.hasOwnProperty)for(r in e)e.hasOwnProperty(r)&&t.call(n,e[r],r,e);else for(r in e)yr.call(e,r)&&t.call(n,e[r],r,e);return e}function a(e,t,n){for(var r=Object.keys(e).sort(),o=0;o<r.length;o++)t.call(n,e[r[o]],r[o]);return r}function s(e){return function(t,n){e(n,t)}}function c(){return++Rr}function l(e,t){t?e.$$hashKey=t:delete e.$$hashKey}function u(e,t,n){for(var r=e.$$hashKey,o=0,i=t.length;i>o;++o){var a=t[o];if(y(a)||x(a))for(var s=Object.keys(a),c=0,d=s.length;d>c;c++){var m=s[c],f=a[m];n&&y(f)?A(f)?e[m]=new Date(f.valueOf()):(y(e[m])||(e[m]=jr(f)?[]:{}),u(e[m],[f],!0)):e[m]=f}}return l(e,r),e}function d(e){return u(e,Sr.call(arguments,1),!1)}function m(e){return u(e,Sr.call(arguments,1),!0)}function f(e){return parseInt(e,10)}function p(e,t){return d(Object.create(e),t)}function h(){}function g(e){return e}function v(e){return function(){return e}}function $(e){return x(e.toString)&&e.toString!==Object.prototype.toString}function b(e){return"undefined"==typeof e}function E(e){return"undefined"!=typeof e}function y(e){return null!==e&&"object"==typeof e}function M(e){return null!==e&&"object"==typeof e&&!Or(e)}function w(e){return"string"==typeof e}function C(e){return"number"==typeof e}function A(e){return"[object Date]"===Hr.call(e)}function x(e){return"function"==typeof e}function T(e){return"[object RegExp]"===Hr.call(e)}function k(e){return e&&e.window===e}function S(e){return e&&e.$evalAsync&&e.$watch}function N(e){return"[object File]"===Hr.call(e)}function _(e){return"[object FormData]"===Hr.call(e)}function H(e){return"[object Blob]"===Hr.call(e)}function O(e){return"boolean"==typeof e}function D(e){return e&&x(e.then)}function I(e){return Lr.test(Hr.call(e))}function R(e){return!(!e||!(e.nodeName||e.prop&&e.attr&&e.find))}function P(e){var t,n={},r=e.split(",");for(t=0;t<r.length;t++)n[r[t]]=!0;return n}function j(e){return Er(e.nodeName||e[0]&&e[0].nodeName)}function L(e,t){var n=e.indexOf(t);return n>=0&&e.splice(n,1),n}function F(e,t,n,r){if(k(e)||S(e))throw Dr("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");if(I(t))throw Dr("cpta","Can't copy! TypedArray destination cannot be mutated.");if(t){if(e===t)throw Dr("cpi","Can't copy! Source and destination are identical.");n=n||[],r=r||[],y(e)&&(n.push(e),r.push(t));var o;if(jr(e)){t.length=0;for(var a=0;a<e.length;a++)t.push(F(e[a],null,n,r))}else{var s=t.$$hashKey;if(jr(t)?t.length=0:i(t,function(e,n){delete t[n]}),M(e))for(o in e)t[o]=F(e[o],null,n,r);else if(e&&"function"==typeof e.hasOwnProperty)for(o in e)e.hasOwnProperty(o)&&(t[o]=F(e[o],null,n,r));else for(o in e)yr.call(e,o)&&(t[o]=F(e[o],null,n,r));l(t,s)}}else if(t=e,y(e)){var c;if(n&&-1!==(c=n.indexOf(e)))return r[c];if(jr(e))return F(e,[],n,r);if(I(e))t=new e.constructor(e);else if(A(e))t=new Date(e.getTime());else{if(!T(e)){var u=Object.create(Or(e));return F(e,u,n,r)}t=new RegExp(e.source,e.toString().match(/[^\/]*$/)[0]),t.lastIndex=e.lastIndex}r&&(n.push(e),r.push(t))}return t}function V(e,t){if(jr(e)){t=t||[];for(var n=0,r=e.length;r>n;n++)t[n]=e[n]}else if(y(e)){t=t||{};for(var o in e)("$"!==o.charAt(0)||"$"!==o.charAt(1))&&(t[o]=e[o])}return t||e}function q(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!==e&&t!==t)return!0;var r,o,i,a=typeof e,s=typeof t;if(a==s&&"object"==a){if(!jr(e)){if(A(e))return A(t)?q(e.getTime(),t.getTime()):!1;if(T(e))return T(t)?e.toString()==t.toString():!1;if(S(e)||S(t)||k(e)||k(t)||jr(t)||A(t)||T(t))return!1;i=ge();for(o in e)if("$"!==o.charAt(0)&&!x(e[o])){if(!q(e[o],t[o]))return!1;i[o]=!0}for(o in t)if(!(o in i||"$"===o.charAt(0)||t[o]===n||x(t[o])))return!1;return!0}if(!jr(t))return!1;if((r=e.length)==t.length){for(o=0;r>o;o++)if(!q(e[o],t[o]))return!1;return!0}}return!1}function B(e,t,n){return e.concat(Sr.call(t,n))}function U(e,t){return Sr.call(e,t||0)}function z(e,t){var n=arguments.length>2?U(arguments,2):[];return!x(t)||t instanceof RegExp?t:n.length?function(){return arguments.length?t.apply(e,B(n,arguments,0)):t.apply(e,n)}:function(){return arguments.length?t.apply(e,arguments):t.call(e)}}function W(e,r){var o=r;return"string"==typeof e&&"$"===e.charAt(0)&&"$"===e.charAt(1)?o=n:k(r)?o="$WINDOW":r&&t===r?o="$DOCUMENT":S(r)&&(o="$SCOPE"),o}function K(e,t){return"undefined"==typeof e?n:(C(t)||(t=t?2:null),JSON.stringify(e,W,t))}function Y(e){return w(e)?JSON.parse(e):e}function G(e,t){var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(n)?t:n}function X(e,t){return e=new Date(e.getTime()),e.setMinutes(e.getMinutes()+t),e}function Z(e,t,n){n=n?-1:1;var r=G(t,e.getTimezoneOffset());return X(e,n*(r-e.getTimezoneOffset()))}function J(e){e=xr(e).clone();try{e.empty()}catch(t){}var n=xr("<div>").append(e).html();try{return e[0].nodeType===Gr?Er(n):n.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(e,t){return"<"+Er(t)})}catch(t){return Er(n)}}function Q(e){try{return decodeURIComponent(e)}catch(t){}}function ee(e){var t,n,r={};return i((e||"").split("&"),function(e){if(e&&(t=e.replace(/\+/g,"%20").split("="),n=Q(t[0]),E(n))){var o=E(t[1])?Q(t[1]):!0;yr.call(r,n)?jr(r[n])?r[n].push(o):r[n]=[r[n],o]:r[n]=o}}),r}function te(e){var t=[];return i(e,function(e,n){jr(e)?i(e,function(e){t.push(re(n,!0)+(e===!0?"":"="+re(e,!0)))}):t.push(re(n,!0)+(e===!0?"":"="+re(e,!0)))}),t.length?t.join("&"):""}function ne(e){return re(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function re(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,t?"%20":"+")}function oe(e,t){var n,r,o=Ur.length;for(r=0;o>r;++r)if(n=Ur[r]+t,w(n=e.getAttribute(n)))return n;return null}function ie(e,t){var n,r,o={};i(Ur,function(t){var o=t+"app";!n&&e.hasAttribute&&e.hasAttribute(o)&&(n=e,r=e.getAttribute(o))}),i(Ur,function(t){var o,i=t+"app";!n&&(o=e.querySelector("["+i.replace(":","\\:")+"]"))&&(n=o,r=o.getAttribute(i))}),n&&(o.strictDi=null!==oe(n,"strict-di"),t(n,r?[r]:[],o))}function ae(n,r,o){y(o)||(o={});var a={strictDi:!1};o=d(a,o);var s=function(){if(n=xr(n),n.injector()){var e=n[0]===t?"document":J(n);throw Dr("btstrpd","App Already Bootstrapped with this Element '{0}'",e.replace(/</,"&lt;").replace(/>/,"&gt;"))}r=r||[],r.unshift(["$provide",function(e){e.value("$rootElement",n)}]),o.debugInfoEnabled&&r.push(["$compileProvider",function(e){e.debugInfoEnabled(!0)}]),r.unshift("ng");var i=Je(r,o.strictDi);return i.invoke(["$rootScope","$rootElement","$compile","$injector",function(e,t,n,r){e.$apply(function(){t.data("$injector",r),n(t)(e)})}]),i},c=/^NG_ENABLE_DEBUG_INFO!/,l=/^NG_DEFER_BOOTSTRAP!/;return e&&c.test(e.name)&&(o.debugInfoEnabled=!0,e.name=e.name.replace(c,"")),e&&!l.test(e.name)?s():(e.name=e.name.replace(l,""),Ir.resumeBootstrap=function(e){return i(e,function(e){r.push(e)}),s()},void(x(Ir.resumeDeferredBootstrap)&&Ir.resumeDeferredBootstrap()))}function se(){e.name="NG_ENABLE_DEBUG_INFO!"+e.name,e.location.reload()}function ce(e){var t=Ir.element(e).injector();if(!t)throw Dr("test","no injector found for element argument to getTestability");return t.get("$$testability")}function le(e,t){return t=t||"_",e.replace(zr,function(e,n){return(n?t:"")+e.toLowerCase()})}function ue(){var t;if(!Wr){var r=Br();Tr=e.jQuery,E(r)&&(Tr=null===r?n:e[r]),Tr&&Tr.fn.on?(xr=Tr,d(Tr.fn,{scope:po.scope,isolateScope:po.isolateScope,controller:po.controller,injector:po.injector,inheritedData:po.inheritedData}),t=Tr.cleanData,Tr.cleanData=function(e){var n;if(Pr)Pr=!1;else for(var r,o=0;null!=(r=e[o]);o++)n=Tr._data(r,"events"),n&&n.$destroy&&Tr(r).triggerHandler("$destroy");t(e)}):xr=ke,Ir.element=xr,Wr=!0}}function de(e,t,n){if(!e)throw Dr("areq","Argument '{0}' is {1}",t||"?",n||"required");return e}function me(e,t,n){return n&&jr(e)&&(e=e[e.length-1]),de(x(e),t,"not a function, got "+(e&&"object"==typeof e?e.constructor.name||"Object":typeof e)),e}function fe(e,t){if("hasOwnProperty"===e)throw Dr("badname","hasOwnProperty is not a valid {0} name",t)}function pe(e,t,n){if(!t)return e;for(var r,o=t.split("."),i=e,a=o.length,s=0;a>s;s++)r=o[s],e&&(e=(i=e)[r]);return!n&&x(e)?z(i,e):e}function he(e){var t=e[0],n=e[e.length-1],r=[t];do{if(t=t.nextSibling,!t)break;r.push(t)}while(t!==n);return xr(r)}function ge(){return Object.create(null)}function ve(e){function t(e,t,n){return e[t]||(e[t]=n())}var n=r("$injector"),o=r("ng"),i=t(e,"angular",Object);return i.$$minErr=i.$$minErr||r,t(i,"module",function(){var e={};return function(r,i,a){var s=function(e,t){if("hasOwnProperty"===e)throw o("badname","hasOwnProperty is not a valid {0} name",t)};return s(r,"module"),i&&e.hasOwnProperty(r)&&(e[r]=null),t(e,r,function(){function e(e,t,n,r){return r||(r=o),function(){return r[n||"push"]([e,t,arguments]),u}}function t(e,t){return function(n,i){return i&&x(i)&&(i.$$moduleName=r),o.push([e,t,arguments]),u}}if(!i)throw n("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",r);var o=[],s=[],c=[],l=e("$injector","invoke","push",s),u={_invokeQueue:o,_configBlocks:s,_runBlocks:c,requires:i,name:r,provider:t("$provide","provider"),factory:t("$provide","factory"),service:t("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),decorator:t("$provide","decorator"),animation:t("$animateProvider","register"),filter:t("$filterProvider","register"),controller:t("$controllerProvider","register"),directive:t("$compileProvider","directive"),config:l,run:function(e){return c.push(e),this}};return a&&l(a),u})}})}function $e(e){var t=[];return JSON.stringify(e,function(e,n){if(n=W(e,n),y(n)){if(t.indexOf(n)>=0)return"<<already seen>>";t.push(n)}return n})}function be(e){return"function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof e?"undefined":"string"!=typeof e?$e(e):e}function Ee(t){d(t,{bootstrap:ae,copy:F,extend:d,merge:m,equals:q,element:xr,forEach:i,injector:Je,noop:h,bind:z,toJson:K,fromJson:Y,identity:g,isUndefined:b,isDefined:E,isString:w,isFunction:x,isObject:y,isNumber:C,isElement:R,isArray:jr,version:Qr,isDate:A,lowercase:Er,uppercase:Mr,callbacks:{counter:0},getTestability:ce,$$minErr:r,$$csp:qr,reloadWithDebugInfo:se}),kr=ve(e);try{kr("ngLocale")}catch(n){kr("ngLocale",[]).provider("$locale",_t)}kr("ng",["ngLocale"],["$provide",function(e){e.provider({$$sanitizeUri:vn}),e.provider("$compile",ct).directive({a:ui,input:Ti,textarea:Ti,form:hi,script:ba,select:Ma,style:Ca,option:wa,ngBind:Ni,ngBindHtml:Hi,ngBindTemplate:_i,ngClass:Di,ngClassEven:Ri,ngClassOdd:Ii,ngCloak:Pi,ngController:ji,ngForm:gi,ngHide:fa,ngIf:Vi,ngInclude:qi,ngInit:Ui,ngNonBindable:oa,ngPluralize:ca,ngRepeat:la,ngShow:ma,ngStyle:pa,ngSwitch:ha,ngSwitchWhen:ga,ngSwitchDefault:va,ngOptions:sa,ngTransclude:$a,ngModel:ta,ngList:zi,ngChange:Oi,pattern:xa,ngPattern:xa,required:Aa,ngRequired:Aa,minlength:ka,ngMinlength:ka,maxlength:Ta,ngMaxlength:Ta,ngValue:Si,ngModelOptions:ra}).directive({ngInclude:Bi}).directive(di).directive(Li),e.provider({$anchorScroll:Qe,$animate:So,$$animateQueue:ko,$$AnimateRunner:To,$browser:it,$cacheFactory:at,$controller:ft,$document:pt,$exceptionHandler:ht,$filter:_n,$interpolate:St,$interval:Nt,$http:At,$httpParamSerializer:vt,$httpParamSerializerJQLike:$t,$httpBackend:Tt,$location:zt,$log:Wt,$parse:dn,$rootScope:gn,$q:mn,$$q:fn,$sce:yn,$sceDelegate:En,$sniffer:Mn,$templateCache:st,$templateRequest:wn,$$testability:Cn,$timeout:An,$window:kn,$$rAF:hn,$$jqLite:Ke,$$HashMap:$o,$$cookieReader:Nn})}])}function ye(){return++to}function Me(e){return e.replace(oo,function(e,t,n,r){return r?n.toUpperCase():n}).replace(io,"Moz$1")}function we(e){return!lo.test(e)}function Ce(e){var t=e.nodeType;return t===Kr||!t||t===Zr}function Ae(e){for(var t in eo[e.ng339])return!0;return!1}function xe(e,t){var n,r,o,a,s=t.createDocumentFragment(),c=[];if(we(e))c.push(t.createTextNode(e));else{for(n=n||s.appendChild(t.createElement("div")),r=(uo.exec(e)||["",""])[1].toLowerCase(),o=fo[r]||fo._default,n.innerHTML=o[1]+e.replace(mo,"<$1></$2>")+o[2],a=o[0];a--;)n=n.lastChild;c=B(c,n.childNodes),n=s.firstChild,n.textContent=""}return s.textContent="",s.innerHTML="",i(c,function(e){s.appendChild(e)}),s}function Te(e,n){n=n||t;var r;return(r=co.exec(e))?[n.createElement(r[1])]:(r=xe(e,n))?r.childNodes:[]}function ke(e){if(e instanceof ke)return e;var t;if(w(e)&&(e=Fr(e),t=!0),!(this instanceof ke)){if(t&&"<"!=e.charAt(0))throw so("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new ke(e)}t?je(this,Te(e)):je(this,e)}function Se(e){return e.cloneNode(!0)}function Ne(e,t){if(t||He(e),e.querySelectorAll)for(var n=e.querySelectorAll("*"),r=0,o=n.length;o>r;r++)He(n[r])}function _e(e,t,n,r){if(E(r))throw so("offargs","jqLite#off() does not support the `selector` argument");var o=Oe(e),a=o&&o.events,s=o&&o.handle;if(s)if(t)i(t.split(" "),function(t){if(E(n)){var r=a[t];if(L(r||[],n),r&&r.length>0)return}ro(e,t,s),delete a[t]});else for(t in a)"$destroy"!==t&&ro(e,t,s),delete a[t]}function He(e,t){var r=e.ng339,o=r&&eo[r];if(o){if(t)return void delete o.data[t];o.handle&&(o.events.$destroy&&o.handle({},"$destroy"),_e(e)),delete eo[r],e.ng339=n}}function Oe(e,t){var r=e.ng339,o=r&&eo[r];return t&&!o&&(e.ng339=r=ye(),o=eo[r]={events:{},data:{},handle:n}),o}function De(e,t,n){if(Ce(e)){var r=E(n),o=!r&&t&&!y(t),i=!t,a=Oe(e,!o),s=a&&a.data;if(r)s[t]=n;else{if(i)return s;if(o)return s&&s[t];d(s,t)}}}function Ie(e,t){return e.getAttribute?(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+t+" ")>-1:!1}function Re(e,t){t&&e.setAttribute&&i(t.split(" "),function(t){e.setAttribute("class",Fr((" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+Fr(t)+" "," ")))})}function Pe(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");i(t.split(" "),function(e){e=Fr(e),-1===n.indexOf(" "+e+" ")&&(n+=e+" ")}),e.setAttribute("class",Fr(n))}}function je(e,t){if(t)if(t.nodeType)e[e.length++]=t;else{var n=t.length;if("number"==typeof n&&t.window!==t){if(n)for(var r=0;n>r;r++)e[e.length++]=t[r]}else e[e.length++]=t}}function Le(e,t){return Fe(e,"$"+(t||"ngController")+"Controller")}function Fe(e,t,r){e.nodeType==Zr&&(e=e.documentElement);for(var o=jr(t)?t:[t];e;){for(var i=0,a=o.length;a>i;i++)if((r=xr.data(e,o[i]))!==n)return r;e=e.parentNode||e.nodeType===Jr&&e.host}}function Ve(e){for(Ne(e,!0);e.firstChild;)e.removeChild(e.firstChild)}function qe(e,t){t||Ne(e);var n=e.parentNode;n&&n.removeChild(e)}function Be(t,n){n=n||e,"complete"===n.document.readyState?n.setTimeout(t):xr(n).on("load",t)}function Ue(e,t){var n=ho[t.toLowerCase()];return n&&go[j(e)]&&n}function ze(e,t){var n=e.nodeName;return("INPUT"===n||"TEXTAREA"===n)&&vo[t]}function We(e,t){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var o=t[r||n.type],i=o?o.length:0;if(i){if(b(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return n.immediatePropagationStopped===!0},i>1&&(o=V(o));for(var s=0;i>s;s++)n.isImmediatePropagationStopped()||o[s].call(e,n)}};return n.elem=e,n}function Ke(){this.$get=function(){return d(ke,{hasClass:function(e,t){return e.attr&&(e=e[0]),Ie(e,t)},addClass:function(e,t){return e.attr&&(e=e[0]),Pe(e,t)},removeClass:function(e,t){return e.attr&&(e=e[0]),Re(e,t)}})}}function Ye(e,t){var n=e&&e.$$hashKey;if(n)return"function"==typeof n&&(n=e.$$hashKey()),n;var r=typeof e;return n="function"==r||"object"==r&&null!==e?e.$$hashKey=r+":"+(t||c)():r+":"+e}function Ge(e,t){if(t){var n=0;this.nextUid=function(){return++n}}i(e,this.put,this)}function Xe(e){var t=e.toString().replace(Mo,""),n=t.match(bo);return n?"function("+(n[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function Ze(e,t,n){var r,o,a,s;if("function"==typeof e){if(!(r=e.$inject)){if(r=[],e.length){if(t)throw w(n)&&n||(n=e.name||Xe(e)),wo("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);o=e.toString().replace(Mo,""),a=o.match(bo),i(a[1].split(Eo),function(e){e.replace(yo,function(e,t,n){r.push(n)})})}e.$inject=r}}else jr(e)?(s=e.length-1,me(e[s],"fn"),r=e.slice(0,s)):me(e,"fn",!0);return r}function Je(e,t){function r(e){return function(t,n){return y(t)?void i(t,s(e)):e(t,n)}}function o(e,t){if(fe(e,"service"),(x(t)||jr(t))&&(t=C.instantiate(t)),!t.$get)throw wo("pget","Provider '{0}' must define $get factory method.",e);return M[e+g]=t}function a(e,t){return function(){var n=T.invoke(t,this);if(b(n))throw wo("undef","Provider '{0}' must return a value from $get factory method.",e);return n}}function c(e,t,n){return o(e,{$get:n!==!1?a(e,t):t})}function l(e,t){return c(e,["$injector",function(e){return e.instantiate(t)}])}function u(e,t){return c(e,v(t),!1)}function d(e,t){fe(e,"constant"),M[e]=t,A[e]=t}function m(e,t){var n=C.get(e+g),r=n.$get;n.$get=function(){var e=T.invoke(r,n);return T.invoke(t,null,{$delegate:e})}}function f(e){var t,n=[];return i(e,function(e){function r(e){var t,n;for(t=0,n=e.length;n>t;t++){var r=e[t],o=C.get(r[0]);o[r[1]].apply(o,r[2])}}if(!E.get(e)){E.put(e,!0);try{w(e)?(t=kr(e),n=n.concat(f(t.requires)).concat(t._runBlocks),r(t._invokeQueue),r(t._configBlocks)):x(e)?n.push(C.invoke(e)):jr(e)?n.push(C.invoke(e)):me(e,"module")}catch(o){throw jr(e)&&(e=e[e.length-1]),o.message&&o.stack&&-1==o.stack.indexOf(o.message)&&(o=o.message+"\n"+o.stack),wo("modulerr","Failed to instantiate module {0} due to:\n{1}",e,o.stack||o.message||o)}}}),n}function p(e,n){function r(t,r){if(e.hasOwnProperty(t)){if(e[t]===h)throw wo("cdep","Circular dependency found: {0}",t+" <- "+$.join(" <- "));return e[t]}try{return $.unshift(t),e[t]=h,e[t]=n(t,r)}catch(o){throw e[t]===h&&delete e[t],o}finally{$.shift()}}function o(e,n,o,i){"string"==typeof o&&(i=o,o=null);var a,s,c,l=[],u=Je.$$annotate(e,t,i);for(s=0,a=u.length;a>s;s++){if(c=u[s],"string"!=typeof c)throw wo("itkn","Incorrect injection token! Expected service name as string, got {0}",c);l.push(o&&o.hasOwnProperty(c)?o[c]:r(c,i))}return jr(e)&&(e=e[a]),e.apply(n,l)}function i(e,t,n){var r=Object.create((jr(e)?e[e.length-1]:e).prototype||null),i=o(e,r,t,n);return y(i)||x(i)?i:r}return{invoke:o,instantiate:i,get:r,annotate:Je.$$annotate,has:function(t){return M.hasOwnProperty(t+g)||e.hasOwnProperty(t)}}}t=t===!0;var h={},g="Provider",$=[],E=new Ge([],!0),M={$provide:{provider:r(o),factory:r(c),service:r(l),value:r(u),constant:r(d),decorator:m}},C=M.$injector=p(M,function(e,t){throw Ir.isString(t)&&$.push(t),wo("unpr","Unknown provider: {0}",$.join(" <- "))}),A={},T=A.$injector=p(A,function(e,t){var r=C.get(e+g,t);return T.invoke(r.$get,r,n,e)});return i(f(e),function(e){e&&T.invoke(e)}),T}function Qe(){var e=!0;this.disableAutoScrolling=function(){e=!1},this.$get=["$window","$location","$rootScope",function(t,n,r){function o(e){var t=null;return Array.prototype.some.call(e,function(e){return"a"===j(e)?(t=e,!0):void 0}),t}function i(){var e=s.yOffset;if(x(e))e=e();else if(R(e)){var n=e[0],r=t.getComputedStyle(n);e="fixed"!==r.position?0:n.getBoundingClientRect().bottom}else C(e)||(e=0);return e}function a(e){if(e){e.scrollIntoView();var n=i();if(n){var r=e.getBoundingClientRect().top;t.scrollBy(0,r-n)}}else t.scrollTo(0,0)}function s(e){e=w(e)?e:n.hash();var t;e?(t=c.getElementById(e))?a(t):(t=o(c.getElementsByName(e)))?a(t):"top"===e&&a(null):a(null)}var c=t.document;return e&&r.$watch(function(){return n.hash()},function(e,t){(e!==t||""!==e)&&Be(function(){r.$evalAsync(s)})}),s}]}function et(e,t){return e||t?e?t?(jr(e)&&(e=e.join(" ")),jr(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function tt(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.nodeType===Ao)return n}}function nt(e){w(e)&&(e=e.split(" "));var t=ge();return i(e,function(e){e.length&&(t[e]=!0)}),t}function rt(e){return y(e)?e:{}}function ot(e,t,n,r){function o(e){try{e.apply(null,U(arguments,1))}finally{if($--,0===$)for(;E.length;)try{E.pop()()}catch(t){n.error(t)}}}function a(e){var t=e.indexOf("#");return-1===t?"":e.substr(t)}function s(){l(),u()}function c(){try{return f.state}catch(e){}}function l(){y=c(),y=b(y)?null:y,q(y,k)&&(y=k),k=y}function u(){(w!==d.url()||M!==y)&&(w=d.url(),M=y,i(x,function(e){e(d.url(),y)}))}var d=this,m=(t[0],e.location),f=e.history,p=e.setTimeout,g=e.clearTimeout,v={};d.isMock=!1;var $=0,E=[];d.$$completeOutstandingRequest=o,d.$$incOutstandingRequestCount=function(){$++},d.notifyWhenNoOutstandingRequests=function(e){0===$?e():E.push(e)};var y,M,w=m.href,C=t.find("base"),A=null;l(),M=y,d.url=function(t,n,o){if(b(o)&&(o=null),m!==e.location&&(m=e.location),f!==e.history&&(f=e.history),t){var i=M===o;if(w===t&&(!r.history||i))return d;var s=w&&Rt(w)===Rt(t);return w=t,M=o,!r.history||s&&i?((!s||A)&&(A=t),n?m.replace(t):s?m.hash=a(t):m.href=t):(f[n?"replaceState":"pushState"](o,"",t),l(),M=y),d}return A||m.href.replace(/%27/g,"'")},d.state=function(){return y};var x=[],T=!1,k=null;d.onUrlChange=function(t){return T||(r.history&&xr(e).on("popstate",s),xr(e).on("hashchange",s),T=!0),x.push(t),t},d.$$applicationDestroyed=function(){xr(e).off("hashchange popstate",s)},d.$$checkUrlChange=u,d.baseHref=function(){var e=C.attr("href");return e?e.replace(/^(https?\:)?\/\/[^\/]*/,""):""},d.defer=function(e,t){var n;return $++,n=p(function(){delete v[n],o(e)},t||0),v[n]=!0,n},d.defer.cancel=function(e){return v[e]?(delete v[e],g(e),o(h),!0):!1}}function it(){this.$get=["$window","$log","$sniffer","$document",function(e,t,n,r){return new ot(e,r,t,n)}]}function at(){this.$get=function(){function e(e,n){function o(e){e!=m&&(f?f==e&&(f=e.n):f=e,i(e.n,e.p),i(e,m),m=e,m.n=null)}function i(e,t){e!=t&&(e&&(e.p=t),t&&(t.n=e))}if(e in t)throw r("$cacheFactory")("iid","CacheId '{0}' is already taken!",e);var a=0,s=d({},n,{id:e}),c={},l=n&&n.capacity||Number.MAX_VALUE,u={},m=null,f=null;return t[e]={put:function(e,t){if(!b(t)){if(l<Number.MAX_VALUE){var n=u[e]||(u[e]={key:e});o(n)}return e in c||a++,c[e]=t,a>l&&this.remove(f.key),t}},get:function(e){if(l<Number.MAX_VALUE){var t=u[e];if(!t)return;o(t)}return c[e]},remove:function(e){if(l<Number.MAX_VALUE){var t=u[e];if(!t)return;t==m&&(m=t.p),t==f&&(f=t.n),i(t.n,t.p),delete u[e]}delete c[e],a--},removeAll:function(){c={},a=0,u={},m=f=null},destroy:function(){c=null,s=null,u=null,delete t[e]},info:function(){return d({},s,{size:a})}}}var t={};return e.info=function(){var e={};return i(t,function(t,n){e[n]=t.info()}),e},e.get=function(e){return t[e]},e}}function st(){this.$get=["$cacheFactory",function(e){return e("templates")}]}function ct(e,r){function o(e,t,n){var r=/^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/,o={};return i(e,function(e,i){var a=e.match(r);if(!a)throw No("iscp","Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}",t,i,e,n?"controller bindings definition":"isolate scope definition");o[i]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||i}}),o}function a(e,t){var n={isolateScope:null,bindToController:null};if(y(e.scope)&&(e.bindToController===!0?(n.bindToController=o(e.scope,t,!0),n.isolateScope={}):n.isolateScope=o(e.scope,t,!1)),y(e.bindToController)&&(n.bindToController=o(e.bindToController,t,!0)),y(n.bindToController)){var r=e.controller,i=e.controllerAs;if(!r)throw No("noctrl","Cannot bind to controller without directive '{0}'s controller.",t);if(!mt(r,i))throw No("noident","Cannot bind to controller without identifier for directive '{0}'.",t)}return n}function c(e){var t=e.charAt(0);if(!t||t!==Er(t))throw No("baddir","Directive name '{0}' is invalid. The first character must be a lowercase letter",e);if(e!==e.trim())throw No("baddir","Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces",e)}var l={},u="Directive",m=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,f=/(([\w\-]+)(?:\:([^;]+))?;?)/,$=P("ngSrc,ngSrcset,src,srcset"),b=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,M=/^(on[a-z]+|formaction)$/;this.directive=function A(t,n){return fe(t,"directive"),w(t)?(c(t),de(n,"directiveFactory"),l.hasOwnProperty(t)||(l[t]=[],e.factory(t+u,["$injector","$exceptionHandler",function(e,n){var r=[];return i(l[t],function(o,i){try{var s=e.invoke(o);x(s)?s={compile:v(s)}:!s.compile&&s.link&&(s.compile=v(s.link)),s.priority=s.priority||0,s.index=i,s.name=s.name||t,s.require=s.require||s.controller&&s.name,s.restrict=s.restrict||"EA";var c=s.$$bindings=a(s,s.name);y(c.isolateScope)&&(s.$$isolateBindings=c.isolateScope),s.$$moduleName=o.$$moduleName,r.push(s)}catch(l){n(l)}}),r}])),l[t].push(n)):i(t,s(A)),this},this.aHrefSanitizationWhitelist=function(e){return E(e)?(r.aHrefSanitizationWhitelist(e),this):r.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(e){return E(e)?(r.imgSrcSanitizationWhitelist(e),this):r.imgSrcSanitizationWhitelist()};var C=!0;this.debugInfoEnabled=function(e){return E(e)?(C=e,this):C},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$document","$sce","$animate","$$sanitizeUri",function(e,r,o,a,s,c,v,E,A,T,k){function N(e,t){try{e.addClass(t)}catch(n){}}function _(e,t,n,r,o){e instanceof xr||(e=xr(e)),i(e,function(t,n){t.nodeType==Gr&&t.nodeValue.match(/\S+/)&&(e[n]=xr(t).wrap("<span></span>").parent()[0])});var a=O(e,t,e,n,r,o);_.$$addScopeClass(e);var s=null;return function(t,n,r){de(t,"scope"),r=r||{};var o=r.parentBoundTranscludeFn,i=r.transcludeControllers,c=r.futureParentElement;o&&o.$$boundTransclude&&(o=o.$$boundTransclude),s||(s=H(c));var l;if(l="html"!==s?xr(Z(s,xr("<div>").append(e).html())):n?po.clone.call(e):e,i)for(var u in i)l.data("$"+u+"Controller",i[u].instance);return _.$$addScopeInfo(l,t),n&&n(l,t),a&&a(t,l,l,o),l}}function H(e){var t=e&&e[0];return t&&"foreignobject"!==j(t)&&t.toString().match(/SVG/)?"svg":"html"}function O(e,t,r,o,i,a){function s(e,r,o,i){var a,s,c,l,u,d,m,f,g;if(p){var v=r.length;for(g=new Array(v),u=0;u<h.length;u+=3)m=h[u],g[m]=r[m]}else g=r;for(u=0,d=h.length;d>u;)if(c=g[h[u++]],a=h[u++],s=h[u++],a){if(a.scope){l=e.$new(),_.$$addScopeInfo(xr(c),l);var $=a.$$destroyBindings;$&&(a.$$destroyBindings=null,l.$on("$destroyed",$))}else l=e;f=a.transcludeOnThisElement?D(e,a.transclude,i):!a.templateOnThisElement&&i?i:!i&&t?D(e,t):null,a(s,l,c,o,f,a)}else s&&s(e,c.childNodes,n,i)}for(var c,l,u,d,m,f,p,h=[],g=0;g<e.length;g++)c=new ie,l=I(e[g],[],c,0===g?o:n,i),u=l.length?F(l,e[g],c,t,r,null,[],[],a):null,u&&u.scope&&_.$$addScopeClass(c.$$element),m=u&&u.terminal||!(d=e[g].childNodes)||!d.length?null:O(d,u?(u.transcludeOnThisElement||!u.templateOnThisElement)&&u.transclude:t),(u||m)&&(h.push(g,u,m),f=!0,p=p||u),a=null;return f?s:null}function D(e,t,n){var r=function(r,o,i,a,s){return r||(r=e.$new(!1,s),r.$$transcluded=!0),t(r,o,{parentBoundTranscludeFn:n,transcludeControllers:i,futureParentElement:a})};return r}function I(e,t,n,r,o){var i,a,s=e.nodeType,c=n.$attr;switch(s){case Kr:B(t,lt(j(e)),"E",r,o);for(var l,u,d,p,h,g,v=e.attributes,$=0,b=v&&v.length;b>$;$++){var E=!1,M=!1;l=v[$],u=l.name,h=Fr(l.value),p=lt(u),(g=ue.test(p))&&(u=u.replace(_o,"").substr(8).replace(/_(.)/g,function(e,t){return t.toUpperCase()}));var C=p.replace(/(Start|End)$/,"");z(C)&&p===C+"Start"&&(E=u,M=u.substr(0,u.length-5)+"end",u=u.substr(0,u.length-6)),d=lt(u.toLowerCase()),c[d]=u,(g||!n.hasOwnProperty(d))&&(n[d]=h,Ue(e,d)&&(n[d]=!0)),ee(e,t,h,d,g),B(t,d,"A",r,o,E,M)}if(a=e.className,y(a)&&(a=a.animVal),w(a)&&""!==a)for(;i=f.exec(a);)d=lt(i[2]),B(t,d,"C",r,o)&&(n[d]=Fr(i[3])),a=a.substr(i.index+i[0].length);break;case Gr:if(11===Ar)for(;e.parentNode&&e.nextSibling&&e.nextSibling.nodeType===Gr;)e.nodeValue=e.nodeValue+e.nextSibling.nodeValue,e.parentNode.removeChild(e.nextSibling);X(t,e.nodeValue);break;case Xr:try{i=m.exec(e.nodeValue),i&&(d=lt(i[1]),B(t,d,"M",r,o)&&(n[d]=Fr(i[2])))}catch(A){}}return t.sort(Y),t}function R(e,t,n){var r=[],o=0;if(t&&e.hasAttribute&&e.hasAttribute(t)){do{if(!e)throw No("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",t,n);e.nodeType==Kr&&(e.hasAttribute(t)&&o++,e.hasAttribute(n)&&o--),r.push(e),e=e.nextSibling}while(o>0)}else r.push(e);return xr(r)}function P(e,t,n){return function(r,o,i,a,s){return o=R(o[0],t,n),e(r,o,i,a,s)}}function F(e,r,i,a,s,l,u,d,m){function f(e,t,n,r){e&&(n&&(e=P(e,n,r)),e.require=v.require,e.directiveName=$,(N===v||v.$$isolateScope)&&(e=ne(e,{isolateScope:!0})),u.push(e)),t&&(n&&(t=P(t,n,r)),t.require=v.require,t.directiveName=$,(N===v||v.$$isolateScope)&&(t=ne(t,{isolateScope:!0})),d.push(t))}function p(e,t,n,r){var o;if(w(t)){var i=t.match(b),a=t.substring(i[0].length),s=i[1]||i[3],c="?"===i[2];if("^^"===s?n=n.parent():(o=r&&r[a],o=o&&o.instance),!o){var l="$"+a+"Controller";o=s?n.inheritedData(l):n.data(l)}if(!o&&!c)throw No("ctreq","Controller '{0}', required by directive '{1}', can't be found!",a,e)}else if(jr(t)){o=[];for(var u=0,d=t.length;d>u;u++)o[u]=p(e,t[u],n,r)}return o||null}function h(e,t,n,r,o,i){var a=ge();for(var s in r){var l=r[s],u={$scope:l===N||l.$$isolateScope?o:i,$element:e,$attrs:t,$transclude:n},d=l.controller;"@"==d&&(d=t[l.name]);var m=c(d,u,!0,l.controllerAs);a[l.name]=m,L||e.data("$"+l.name+"Controller",m.instance)}return a}function g(e,t,o,a,s,c){function l(e,t,r){var o;return S(e)||(r=t,t=e,e=n),L&&(o=b),r||(r=L?y.parent():y),s(e,t,o,r,O)}var m,f,g,v,$,b,E,y,M;if(r===o?(M=i,y=i.$$element):(y=xr(o),M=new ie(y,i)),N&&($=t.$new(!0)),s&&(E=l,E.$$boundTransclude=s),k&&(b=h(y,M,E,k,$,t)),N&&(_.$$addScopeInfo(y,$,!0,!(H&&(H===N||H===N.$$originalDirective))),_.$$addScopeClass(y,!0),$.$$isolateBindings=N.$$isolateBindings,oe(t,M,$,$.$$isolateBindings,N,$)),b){var w,C,A=N||T;A&&b[A.name]&&(w=A.$$bindings.bindToController,v=b[A.name],v&&v.identifier&&w&&(C=v,c.$$destroyBindings=oe(t,M,v.instance,w,A)));for(m in b){v=b[m];var x=v();x!==v.instance&&(v.instance=x,y.data("$"+m+"Controller",x),v===C&&(c.$$destroyBindings(),c.$$destroyBindings=oe(t,M,x,w,A)))}}for(m=0,f=u.length;f>m;m++)g=u[m],re(g,g.isolateScope?$:t,y,M,g.require&&p(g.directiveName,g.require,y,b),E);var O=t;for(N&&(N.template||null===N.templateUrl)&&(O=$),e&&e(O,o.childNodes,n,s),m=d.length-1;m>=0;m--)g=d[m],re(g,g.isolateScope?$:t,y,M,g.require&&p(g.directiveName,g.require,y,b),E)}m=m||{};for(var v,$,E,M,C,A=-Number.MAX_VALUE,T=m.newScopeDirective,k=m.controllerDirectives,N=m.newIsolateScopeDirective,H=m.templateDirective,O=m.nonTlbTranscludeDirective,D=!1,j=!1,L=m.hasElementTranscludeDirective,F=i.$$element=xr(r),q=l,B=a,z=0,Y=e.length;Y>z;z++){v=e[z];var X=v.$$start,Q=v.$$end;if(X&&(F=R(r,X,Q)),E=n,A>v.priority)break;if((C=v.scope)&&(v.templateUrl||(y(C)?(G("new/isolated scope",N||T,v,F),
N=v):G("new/isolated scope",N,v,F)),T=T||v),$=v.name,!v.templateUrl&&v.controller&&(C=v.controller,k=k||ge(),G("'"+$+"' controller",k[$],v,F),k[$]=v),(C=v.transclude)&&(D=!0,v.$$tlb||(G("transclusion",O,v,F),O=v),"element"==C?(L=!0,A=v.priority,E=F,F=i.$$element=xr(t.createComment(" "+$+": "+i[$]+" ")),r=F[0],te(s,U(E),r),B=_(E,a,A,q&&q.name,{nonTlbTranscludeDirective:O})):(E=xr(Se(r)).contents(),F.empty(),B=_(E,a))),v.template)if(j=!0,G("template",H,v,F),H=v,C=x(v.template)?v.template(F,i):v.template,C=ce(C),v.replace){if(q=v,E=we(C)?[]:dt(Z(v.templateNamespace,Fr(C))),r=E[0],1!=E.length||r.nodeType!==Kr)throw No("tplrt","Template for directive '{0}' must have exactly one root element. {1}",$,"");te(s,F,r);var ee={$attr:{}},ae=I(r,[],ee),se=e.splice(z+1,e.length-(z+1));N&&V(ae),e=e.concat(ae).concat(se),W(i,ee),Y=e.length}else F.html(C);if(v.templateUrl)j=!0,G("template",H,v,F),H=v,v.replace&&(q=v),g=K(e.splice(z,e.length-z),F,i,s,D&&B,u,d,{controllerDirectives:k,newScopeDirective:T!==v&&T,newIsolateScopeDirective:N,templateDirective:H,nonTlbTranscludeDirective:O}),Y=e.length;else if(v.compile)try{M=v.compile(F,i,B),x(M)?f(null,M,X,Q):M&&f(M.pre,M.post,X,Q)}catch(le){o(le,J(F))}v.terminal&&(g.terminal=!0,A=Math.max(A,v.priority))}return g.scope=T&&T.scope===!0,g.transcludeOnThisElement=D,g.templateOnThisElement=j,g.transclude=B,m.hasElementTranscludeDirective=L,g}function V(e){for(var t=0,n=e.length;n>t;t++)e[t]=p(e[t],{$$isolateScope:!0})}function B(t,r,i,a,s,c,d){if(r===s)return null;var m=null;if(l.hasOwnProperty(r))for(var f,h=e.get(r+u),g=0,v=h.length;v>g;g++)try{f=h[g],(a===n||a>f.priority)&&-1!=f.restrict.indexOf(i)&&(c&&(f=p(f,{$$start:c,$$end:d})),t.push(f),m=f)}catch($){o($)}return m}function z(t){if(l.hasOwnProperty(t))for(var n,r=e.get(t+u),o=0,i=r.length;i>o;o++)if(n=r[o],n.multiElement)return!0;return!1}function W(e,t){var n=t.$attr,r=e.$attr,o=e.$$element;i(e,function(r,o){"$"!=o.charAt(0)&&(t[o]&&t[o]!==r&&(r+=("style"===o?";":" ")+t[o]),e.$set(o,r,!0,n[o]))}),i(t,function(t,i){"class"==i?(N(o,t),e["class"]=(e["class"]?e["class"]+" ":"")+t):"style"==i?(o.attr("style",o.attr("style")+";"+t),e.style=(e.style?e.style+";":"")+t):"$"==i.charAt(0)||e.hasOwnProperty(i)||(e[i]=t,r[i]=n[i])})}function K(e,t,n,r,o,s,c,l){var u,d,m=[],f=t[0],h=e.shift(),g=p(h,{templateUrl:null,transclude:null,replace:null,$$originalDirective:h}),v=x(h.templateUrl)?h.templateUrl(t,n):h.templateUrl,$=h.templateNamespace;return t.empty(),a(v).then(function(a){var p,b,E,M;if(a=ce(a),h.replace){if(E=we(a)?[]:dt(Z($,Fr(a))),p=E[0],1!=E.length||p.nodeType!==Kr)throw No("tplrt","Template for directive '{0}' must have exactly one root element. {1}",h.name,v);b={$attr:{}},te(r,t,p);var w=I(p,[],b);y(h.scope)&&V(w),e=w.concat(e),W(n,b)}else p=f,t.html(a);for(e.unshift(g),u=F(e,p,n,o,t,h,s,c,l),i(r,function(e,n){e==p&&(r[n]=t[0])}),d=O(t[0].childNodes,o);m.length;){var C=m.shift(),A=m.shift(),x=m.shift(),T=m.shift(),k=t[0];if(!C.$$destroyed){if(A!==f){var S=A.className;l.hasElementTranscludeDirective&&h.replace||(k=Se(p)),te(x,xr(A),k),N(xr(k),S)}M=u.transcludeOnThisElement?D(C,u.transclude,T):T,u(d,C,k,r,M,u)}}m=null}),function(e,t,n,r,o){var i=o;t.$$destroyed||(m?m.push(t,n,r,i):(u.transcludeOnThisElement&&(i=D(t,u.transclude,o)),u(d,t,n,r,i,u)))}}function Y(e,t){var n=t.priority-e.priority;return 0!==n?n:e.name!==t.name?e.name<t.name?-1:1:e.index-t.index}function G(e,t,n,r){function o(e){return e?" (module: "+e+")":""}if(t)throw No("multidir","Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}",t.name,o(t.$$moduleName),n.name,o(n.$$moduleName),e,J(r))}function X(e,t){var n=r(t,!0);n&&e.push({priority:0,compile:function(e){var t=e.parent(),r=!!t.length;return r&&_.$$addBindingClass(t),function(e,t){var o=t.parent();r||_.$$addBindingClass(o),_.$$addBindingInfo(o,n.expressions),e.$watch(n,function(e){t[0].nodeValue=e})}}})}function Z(e,n){switch(e=Er(e||"html")){case"svg":case"math":var r=t.createElement("div");return r.innerHTML="<"+e+">"+n+"</"+e+">",r.childNodes[0].childNodes;default:return n}}function Q(e,t){if("srcdoc"==t)return A.HTML;var n=j(e);return"xlinkHref"==t||"form"==n&&"action"==t||"img"!=n&&("src"==t||"ngSrc"==t)?A.RESOURCE_URL:void 0}function ee(e,t,n,o,i){var a=Q(e,o);i=$[o]||i;var s=r(n,!0,a,i);if(s){if("multiple"===o&&"select"===j(e))throw No("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",J(e));t.push({priority:100,compile:function(){return{pre:function(e,t,c){var l=c.$$observers||(c.$$observers={});if(M.test(o))throw No("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");var u=c[o];u!==n&&(s=u&&r(u,!0,a,i),n=u),s&&(c[o]=s(e),(l[o]||(l[o]=[])).$$inter=!0,(c.$$observers&&c.$$observers[o].$$scope||e).$watch(s,function(e,t){"class"===o&&e!=t?c.$updateClass(e,t):c.$set(o,e)}))}}}})}}function te(e,n,r){var o,i,a=n[0],s=n.length,c=a.parentNode;if(e)for(o=0,i=e.length;i>o;o++)if(e[o]==a){e[o++]=r;for(var l=o,u=l+s-1,d=e.length;d>l;l++,u++)d>u?e[l]=e[u]:delete e[l];e.length-=s-1,e.context===a&&(e.context=r);break}c&&c.replaceChild(r,a);var m=t.createDocumentFragment();m.appendChild(a),xr.hasData(a)&&(xr(r).data(xr(a).data()),Tr?(Pr=!0,Tr.cleanData([a])):delete xr.cache[a[xr.expando]]);for(var f=1,p=n.length;p>f;f++){var h=n[f];xr(h).remove(),m.appendChild(h),delete n[f]}n[0]=r,n.length=1}function ne(e,t){return d(function(){return e.apply(null,arguments)},e,t)}function re(e,t,n,r,i,a){try{e(t,n,r,i,a)}catch(s){o(s,J(n))}}function oe(e,t,o,a,c,l){var u;i(a,function(i,a){var l,d,m,f,p=i.attrName,g=i.optional,v=i.mode;switch(yr.call(t,p)||(t[p]=n),v){case"@":t[p]||g||(o[a]=n),t.$observe(p,function(e){o[a]=e}),t.$$observers[p].$$scope=e,t[p]&&(o[a]=r(t[p])(e));break;case"=":if(g&&!t[p])return;d=s(t[p]),f=d.literal?q:function(e,t){return e===t||e!==e&&t!==t},m=d.assign||function(){throw l=o[a]=d(e),No("nonassign","Expression '{0}' used with directive '{1}' is non-assignable!",t[p],c.name)},l=o[a]=d(e);var $=function(t){return f(t,o[a])||(f(t,l)?m(e,t=o[a]):o[a]=t),l=t};$.$stateful=!0;var b;b=i.collection?e.$watchCollection(t[p],$):e.$watch(s(t[p],$),null,d.literal),u=u||[],u.push(b);break;case"&":if(d=s(t[p]),d===h&&g)break;o[a]=function(t){return d(e,t)}}});var d=u?function(){for(var e=0,t=u.length;t>e;++e)u[e]()}:h;return l&&d!==h?(l.$on("$destroy",d),h):d}var ie=function(e,t){if(t){var n,r,o,i=Object.keys(t);for(n=0,r=i.length;r>n;n++)o=i[n],this[o]=t[o]}else this.$attr={};this.$$element=e};ie.prototype={$normalize:lt,$addClass:function(e){e&&e.length>0&&T.addClass(this.$$element,e)},$removeClass:function(e){e&&e.length>0&&T.removeClass(this.$$element,e)},$updateClass:function(e,t){var n=ut(e,t);n&&n.length&&T.addClass(this.$$element,n);var r=ut(t,e);r&&r.length&&T.removeClass(this.$$element,r)},$set:function(e,t,r,a){var s,c=this.$$element[0],l=Ue(c,e),u=ze(c,e),d=e;if(l?(this.$$element.prop(e,t),a=l):u&&(this[u]=t,d=u),this[e]=t,a?this.$attr[e]=a:(a=this.$attr[e],a||(this.$attr[e]=a=le(e,"-"))),s=j(this.$$element),"a"===s&&"href"===e||"img"===s&&"src"===e)this[e]=t=k(t,"src"===e);else if("img"===s&&"srcset"===e){for(var m="",f=Fr(t),p=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,h=/\s/.test(f)?p:/(,)/,g=f.split(h),v=Math.floor(g.length/2),$=0;v>$;$++){var b=2*$;m+=k(Fr(g[b]),!0),m+=" "+Fr(g[b+1])}var E=Fr(g[2*$]).split(/\s/);m+=k(Fr(E[0]),!0),2===E.length&&(m+=" "+Fr(E[1])),this[e]=t=m}r!==!1&&(null===t||t===n?this.$$element.removeAttr(a):this.$$element.attr(a,t));var y=this.$$observers;y&&i(y[d],function(e){try{e(t)}catch(n){o(n)}})},$observe:function(e,t){var n=this,r=n.$$observers||(n.$$observers=ge()),o=r[e]||(r[e]=[]);return o.push(t),v.$evalAsync(function(){!o.$$inter&&n.hasOwnProperty(e)&&t(n[e])}),function(){L(o,t)}}};var ae=r.startSymbol(),se=r.endSymbol(),ce="{{"==ae||"}}"==se?g:function(e){return e.replace(/\{\{/g,ae).replace(/}}/g,se)},ue=/^ngAttr[A-Z]/;return _.$$addBindingInfo=C?function(e,t){var n=e.data("$binding")||[];jr(t)?n=n.concat(t):n.push(t),e.data("$binding",n)}:h,_.$$addBindingClass=C?function(e){N(e,"ng-binding")}:h,_.$$addScopeInfo=C?function(e,t,n,r){var o=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";e.data(o,t)}:h,_.$$addScopeClass=C?function(e,t){N(e,t?"ng-isolate-scope":"ng-scope")}:h,_}]}function lt(e){return Me(e.replace(_o,""))}function ut(e,t){var n="",r=e.split(/\s+/),o=t.split(/\s+/);e:for(var i=0;i<r.length;i++){for(var a=r[i],s=0;s<o.length;s++)if(a==o[s])continue e;n+=(n.length>0?" ":"")+a}return n}function dt(e){e=xr(e);var t=e.length;if(1>=t)return e;for(;t--;){var n=e[t];n.nodeType===Xr&&Nr.call(e,t,1)}return e}function mt(e,t){if(t&&w(t))return t;if(w(e)){var n=Oo.exec(e);if(n)return n[3]}}function ft(){var e={},t=!1;this.register=function(t,n){fe(t,"controller"),y(t)?d(e,t):e[t]=n},this.allowGlobals=function(){t=!0},this.$get=["$injector","$window",function(o,i){function a(e,t,n,o){if(!e||!y(e.$scope))throw r("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",o,t);e.$scope[t]=n}return function(r,s,c,l){var u,m,f,p;if(c=c===!0,l&&w(l)&&(p=l),w(r)){if(m=r.match(Oo),!m)throw Ho("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",r);f=m[1],p=p||m[3],r=e.hasOwnProperty(f)?e[f]:pe(s.$scope,f,!0)||(t?pe(i,f,!0):n),me(r,f,!0)}if(c){var h=(jr(r)?r[r.length-1]:r).prototype;u=Object.create(h||null),p&&a(s,p,u,f||r.name);var g;return g=d(function(){var e=o.invoke(r,u,s,f);return e!==u&&(y(e)||x(e))&&(u=e,p&&a(s,p,u,f||r.name)),u},{instance:u,identifier:p})}return u=o.instantiate(r,s,f),p&&a(s,p,u,f||r.name),u}}]}function pt(){this.$get=["$window",function(e){return xr(e.document)}]}function ht(){this.$get=["$log",function(e){return function(t,n){e.error.apply(e,arguments)}}]}function gt(e){return y(e)?A(e)?e.toISOString():K(e):e}function vt(){this.$get=function(){return function(e){if(!e)return"";var t=[];return a(e,function(e,n){null===e||b(e)||(jr(e)?i(e,function(e,r){t.push(re(n)+"="+re(gt(e)))}):t.push(re(n)+"="+re(gt(e))))}),t.join("&")}}}function $t(){this.$get=function(){return function(e){function t(e,r,o){null===e||b(e)||(jr(e)?i(e,function(e){t(e,r+"[]")}):y(e)&&!A(e)?a(e,function(e,n){t(e,r+(o?"":"[")+n+(o?"":"]"))}):n.push(re(r)+"="+re(gt(e))))}if(!e)return"";var n=[];return t(e,"",!0),n.join("&")}}}function bt(e,t){if(w(e)){var n=e.replace(jo,"").trim();if(n){var r=t("Content-Type");(r&&0===r.indexOf(Do)||Et(n))&&(e=Y(n))}}return e}function Et(e){var t=e.match(Ro);return t&&Po[t[0]].test(e)}function yt(e){function t(e,t){e&&(r[e]=r[e]?r[e]+", "+t:t)}var n,r=ge();return w(e)?i(e.split("\n"),function(e){n=e.indexOf(":"),t(Er(Fr(e.substr(0,n))),Fr(e.substr(n+1)))}):y(e)&&i(e,function(e,n){t(Er(n),Fr(e))}),r}function Mt(e){var t;return function(n){if(t||(t=yt(e)),n){var r=t[Er(n)];return void 0===r&&(r=null),r}return t}}function wt(e,t,n,r){return x(r)?r(e,t,n):(i(r,function(r){e=r(e,t,n)}),e)}function Ct(e){return e>=200&&300>e}function At(){var e=this.defaults={transformResponse:[bt],transformRequest:[function(e){return!y(e)||N(e)||H(e)||_(e)?e:K(e)}],headers:{common:{Accept:"application/json, text/plain, */*"},post:V(Io),put:V(Io),patch:V(Io)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer"},t=!1;this.useApplyAsync=function(e){return E(e)?(t=!!e,this):t};var o=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(a,s,c,l,u,m){function f(t){function o(e){var t=d({},e);return t.data=e.data?wt(e.data,e.headers,e.status,c.transformResponse):e.data,Ct(e.status)?t:u.reject(t)}function a(e,t){var n,r={};return i(e,function(e,o){x(e)?(n=e(t),null!=n&&(r[o]=n)):r[o]=e}),r}function s(t){var n,r,o,i=e.headers,s=d({},t.headers);i=d({},i.common,i[Er(t.method)]);e:for(n in i){r=Er(n);for(o in s)if(Er(o)===r)continue e;s[n]=i[n]}return a(s,V(t))}if(!Ir.isObject(t))throw r("$http")("badreq","Http request configuration must be an object.  Received: {0}",t);var c=d({method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse,paramSerializer:e.paramSerializer},t);c.headers=s(t),c.method=Mr(c.method),c.paramSerializer=w(c.paramSerializer)?m.get(c.paramSerializer):c.paramSerializer;var l=function(t){var r=t.headers,a=wt(t.data,Mt(r),n,t.transformRequest);return b(a)&&i(r,function(e,t){"content-type"===Er(t)&&delete r[t]}),b(t.withCredentials)&&!b(e.withCredentials)&&(t.withCredentials=e.withCredentials),g(t,a).then(o,o)},f=[l,n],p=u.when(c);for(i(M,function(e){(e.request||e.requestError)&&f.unshift(e.request,e.requestError),(e.response||e.responseError)&&f.push(e.response,e.responseError)});f.length;){var h=f.shift(),v=f.shift();p=p.then(h,v)}return p.success=function(e){return me(e,"fn"),p.then(function(t){e(t.data,t.status,t.headers,c)}),p},p.error=function(e){return me(e,"fn"),p.then(null,function(t){e(t.data,t.status,t.headers,c)}),p},p}function p(e){i(arguments,function(e){f[e]=function(t,n){return f(d({},n||{},{method:e,url:t}))}})}function h(e){i(arguments,function(e){f[e]=function(t,n,r){return f(d({},r||{},{method:e,url:t,data:n}))}})}function g(r,o){function i(e,n,r,o){function i(){c(n,e,r,o)}p&&(Ct(e)?p.put(C,[e,n,yt(r),o]):p.remove(C)),t?l.$applyAsync(i):(i(),l.$$phase||l.$apply())}function c(e,t,n,o){t=Math.max(t,0),(Ct(t)?g.resolve:g.reject)({data:e,status:t,headers:Mt(n),config:r,statusText:o})}function d(e){c(e.data,e.status,V(e.headers()),e.statusText)}function m(){var e=f.pendingRequests.indexOf(r);-1!==e&&f.pendingRequests.splice(e,1)}var p,h,g=u.defer(),M=g.promise,w=r.headers,C=v(r.url,r.paramSerializer(r.params));if(f.pendingRequests.push(r),M.then(m,m),!r.cache&&!e.cache||r.cache===!1||"GET"!==r.method&&"JSONP"!==r.method||(p=y(r.cache)?r.cache:y(e.cache)?e.cache:$),p&&(h=p.get(C),E(h)?D(h)?h.then(d,d):jr(h)?c(h[1],h[0],V(h[2]),h[3]):c(h,200,{},"OK"):p.put(C,M)),b(h)){var A=Tn(r.url)?s()[r.xsrfCookieName||e.xsrfCookieName]:n;A&&(w[r.xsrfHeaderName||e.xsrfHeaderName]=A),a(r.method,C,o,i,w,r.timeout,r.withCredentials,r.responseType)}return M}function v(e,t){return t.length>0&&(e+=(-1==e.indexOf("?")?"?":"&")+t),e}var $=c("$http");e.paramSerializer=w(e.paramSerializer)?m.get(e.paramSerializer):e.paramSerializer;var M=[];return i(o,function(e){M.unshift(w(e)?m.get(e):m.invoke(e))}),f.pendingRequests=[],p("get","delete","head","jsonp"),h("post","put","patch"),f.defaults=e,f}]}function xt(){return new e.XMLHttpRequest}function Tt(){this.$get=["$browser","$window","$document",function(e,t,n){return kt(e,xt,e.defer,t.angular.callbacks,n[0])}]}function kt(e,t,r,o,a){function s(e,t,n){var r=a.createElement("script"),i=null;return r.type="text/javascript",r.src=e,r.async=!0,i=function(e){ro(r,"load",i),ro(r,"error",i),a.body.removeChild(r),r=null;var s=-1,c="unknown";e&&("load"!==e.type||o[t].called||(e={type:"error"}),c=e.type,s="error"===e.type?404:200),n&&n(s,c)},no(r,"load",i),no(r,"error",i),a.body.appendChild(r),i}return function(a,c,l,u,d,m,f,p){function g(){b&&b(),y&&y.abort()}function v(t,o,i,a,s){C!==n&&r.cancel(C),b=y=null,t(o,i,a,s),e.$$completeOutstandingRequest(h)}if(e.$$incOutstandingRequestCount(),c=c||e.url(),"jsonp"==Er(a)){var $="_"+(o.counter++).toString(36);o[$]=function(e){o[$].data=e,o[$].called=!0};var b=s(c.replace("JSON_CALLBACK","angular.callbacks."+$),$,function(e,t){v(u,e,o[$].data,"",t),o[$]=h})}else{var y=t();y.open(a,c,!0),i(d,function(e,t){E(e)&&y.setRequestHeader(t,e)}),y.onload=function(){var e=y.statusText||"",t="response"in y?y.response:y.responseText,n=1223===y.status?204:y.status;0===n&&(n=t?200:"file"==xn(c).protocol?404:0),v(u,n,t,y.getAllResponseHeaders(),e)};var M=function(){v(u,-1,null,null,"")};if(y.onerror=M,y.onabort=M,f&&(y.withCredentials=!0),p)try{y.responseType=p}catch(w){if("json"!==p)throw w}y.send(l)}if(m>0)var C=r(g,m);else D(m)&&m.then(g)}}function St(){var e="{{",t="}}";this.startSymbol=function(t){return t?(e=t,this):e},this.endSymbol=function(e){return e?(t=e,this):t},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,o){function i(e){return"\\\\\\"+e}function a(n){return n.replace(m,e).replace(f,t)}function s(e){if(null==e)return"";switch(typeof e){case"string":break;case"number":e=""+e;break;default:e=K(e)}return e}function c(i,c,m,f){function p(e){try{return e=k(e),f&&!E(e)?e:s(e)}catch(t){r(Lo.interr(i,t))}}f=!!f;for(var h,g,v,$=0,y=[],M=[],w=i.length,C=[],A=[];w>$;){if(-1==(h=i.indexOf(e,$))||-1==(g=i.indexOf(t,h+l))){$!==w&&C.push(a(i.substring($)));break}$!==h&&C.push(a(i.substring($,h))),v=i.substring(h+l,g),y.push(v),M.push(n(v,p)),$=g+u,A.push(C.length),C.push("")}if(m&&C.length>1&&Lo.throwNoconcat(i),!c||y.length){var T=function(e){for(var t=0,n=y.length;n>t;t++){if(f&&b(e[t]))return;C[A[t]]=e[t]}return C.join("")},k=function(e){return m?o.getTrusted(m,e):o.valueOf(e)};return d(function(e){var t=0,n=y.length,o=new Array(n);try{for(;n>t;t++)o[t]=M[t](e);return T(o)}catch(a){r(Lo.interr(i,a))}},{exp:i,expressions:y,$$watchDelegate:function(e,t){var n;return e.$watchGroup(M,function(r,o){var i=T(r);x(t)&&t.call(this,i,r!==o?n:i,e),n=i})}})}}var l=e.length,u=t.length,m=new RegExp(e.replace(/./g,i),"g"),f=new RegExp(t.replace(/./g,i),"g");return c.startSymbol=function(){return e},c.endSymbol=function(){return t},c}]}function Nt(){this.$get=["$rootScope","$window","$q","$$q",function(e,t,n,r){function o(o,a,s,c){var l=arguments.length>4,u=l?U(arguments,4):[],d=t.setInterval,m=t.clearInterval,f=0,p=E(c)&&!c,h=(p?r:n).defer(),g=h.promise;return s=E(s)?s:0,g.then(null,null,l?function(){o.apply(null,u)}:o),g.$$intervalId=d(function(){h.notify(f++),s>0&&f>=s&&(h.resolve(f),m(g.$$intervalId),delete i[g.$$intervalId]),p||e.$apply()},a),i[g.$$intervalId]=h,g}var i={};return o.cancel=function(e){return e&&e.$$intervalId in i?(i[e.$$intervalId].reject("canceled"),t.clearInterval(e.$$intervalId),delete i[e.$$intervalId],!0):!1},o}]}function _t(){this.$get=function(){return{id:"en-us",NUMBER_FORMATS:{DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{minInt:1,minFrac:0,maxFrac:3,posPre:"",posSuf:"",negPre:"-",negSuf:"",gSize:3,lgSize:3},{minInt:1,minFrac:2,maxFrac:2,posPre:"¤",posSuf:"",negPre:"(¤",negSuf:")",gSize:3,lgSize:3}],CURRENCY_SYM:"$"},DATETIME_FORMATS:{MONTH:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),SHORTMONTH:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),DAY:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),SHORTDAY:"Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(","),AMPMS:["AM","PM"],medium:"MMM d, y h:mm:ss a","short":"M/d/yy h:mm a",fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",mediumDate:"MMM d, y",shortDate:"M/d/yy",mediumTime:"h:mm:ss a",shortTime:"h:mm a",ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"]},pluralCat:function(e){return 1===e?"one":"other"}}}}function Ht(e){for(var t=e.split("/"),n=t.length;n--;)t[n]=ne(t[n]);return t.join("/")}function Ot(e,t){var n=xn(e);t.$$protocol=n.protocol,t.$$host=n.hostname,t.$$port=f(n.port)||Vo[n.protocol]||null}function Dt(e,t){var n="/"!==e.charAt(0);n&&(e="/"+e);var r=xn(e);t.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),t.$$search=ee(r.search),t.$$hash=decodeURIComponent(r.hash),t.$$path&&"/"!=t.$$path.charAt(0)&&(t.$$path="/"+t.$$path)}function It(e,t){return 0===t.indexOf(e)?t.substr(e.length):void 0}function Rt(e){var t=e.indexOf("#");return-1==t?e:e.substr(0,t)}function Pt(e){return e.replace(/(#.+)|#$/,"$1")}function jt(e){return e.substr(0,Rt(e).lastIndexOf("/")+1)}function Lt(e){return e.substring(0,e.indexOf("/",e.indexOf("//")+2))}function Ft(e,t){this.$$html5=!0,t=t||"";var r=jt(e);Ot(e,this),this.$$parse=function(e){var t=It(r,e);if(!w(t))throw qo("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',e,r);Dt(t,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var e=te(this.$$search),t=this.$$hash?"#"+ne(this.$$hash):"";this.$$url=Ht(this.$$path)+(e?"?"+e:"")+t,this.$$absUrl=r+this.$$url.substr(1)},this.$$parseLinkUrl=function(o,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var a,s,c;return(a=It(e,o))!==n?(s=a,c=(a=It(t,a))!==n?r+(It("/",a)||a):e+s):(a=It(r,o))!==n?c=r+a:r==o+"/"&&(c=r),c&&this.$$parse(c),!!c}}function Vt(e,t){var n=jt(e);Ot(e,this),this.$$parse=function(r){function o(e,t,n){var r,o=/^\/[A-Z]:(\/.*)/;return 0===t.indexOf(n)&&(t=t.replace(n,"")),o.exec(t)?e:(r=o.exec(e),r?r[1]:e)}var i,a=It(e,r)||It(n,r);b(a)||"#"!==a.charAt(0)?this.$$html5?i=a:(i="",b(a)&&(e=r,this.replace())):(i=It(t,a),b(i)&&(i=a)),Dt(i,this),this.$$path=o(this.$$path,i,e),this.$$compose()},this.$$compose=function(){var n=te(this.$$search),r=this.$$hash?"#"+ne(this.$$hash):"";this.$$url=Ht(this.$$path)+(n?"?"+n:"")+r,this.$$absUrl=e+(this.$$url?t+this.$$url:"")},this.$$parseLinkUrl=function(t,n){return Rt(e)==Rt(t)?(this.$$parse(t),!0):!1}}function qt(e,t){this.$$html5=!0,Vt.apply(this,arguments);var n=jt(e);this.$$parseLinkUrl=function(r,o){if(o&&"#"===o[0])return this.hash(o.slice(1)),!0;var i,a;return e==Rt(r)?i=r:(a=It(n,r))?i=e+t+a:n===r+"/"&&(i=n),i&&this.$$parse(i),!!i},this.$$compose=function(){var n=te(this.$$search),r=this.$$hash?"#"+ne(this.$$hash):"";this.$$url=Ht(this.$$path)+(n?"?"+n:"")+r,this.$$absUrl=e+t+this.$$url}}function Bt(e){return function(){return this[e]}}function Ut(e,t){return function(n){return b(n)?this[e]:(this[e]=t(n),this.$$compose(),this)}}function zt(){var e="",t={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(t){return E(t)?(e=t,this):e},this.html5Mode=function(e){return O(e)?(t.enabled=e,this):y(e)?(O(e.enabled)&&(t.enabled=e.enabled),O(e.requireBase)&&(t.requireBase=e.requireBase),O(e.rewriteLinks)&&(t.rewriteLinks=e.rewriteLinks),this):t},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,o,i,a){function s(e,t,n){var o=l.url(),i=l.$$state;try{r.url(e,t,n),l.$$state=r.state()}catch(a){throw l.url(o),l.$$state=i,a}}function c(e,t){n.$broadcast("$locationChangeSuccess",l.absUrl(),e,l.$$state,t)}var l,u,d,m=r.baseHref(),f=r.url();if(t.enabled){if(!m&&t.requireBase)throw qo("nobase","$location in HTML5 mode requires a <base> tag to be present!");d=Lt(f)+(m||"/"),u=o.history?Ft:qt}else d=Rt(f),u=Vt;l=new u(d,"#"+e),l.$$parseLinkUrl(f,f),l.$$state=r.state();var p=/^\s*(javascript|mailto):/i;i.on("click",function(e){if(t.rewriteLinks&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey&&2!=e.which&&2!=e.button){for(var o=xr(e.target);"a"!==j(o[0]);)if(o[0]===i[0]||!(o=o.parent())[0])return;var s=o.prop("href"),c=o.attr("href")||o.attr("xlink:href");y(s)&&"[object SVGAnimatedString]"===s.toString()&&(s=xn(s.animVal).href),p.test(s)||!s||o.attr("target")||e.isDefaultPrevented()||l.$$parseLinkUrl(s,c)&&(e.preventDefault(),l.absUrl()!=r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}),Pt(l.absUrl())!=Pt(f)&&r.url(l.absUrl(),!0);var h=!0;return r.onUrlChange(function(e,t){n.$evalAsync(function(){var r,o=l.absUrl(),i=l.$$state;l.$$parse(e),l.$$state=t,r=n.$broadcast("$locationChangeStart",e,o,t,i).defaultPrevented,l.absUrl()===e&&(r?(l.$$parse(o),l.$$state=i,s(o,!1,i)):(h=!1,c(o,i)))}),n.$$phase||n.$digest()}),n.$watch(function(){var e=Pt(r.url()),t=Pt(l.absUrl()),i=r.state(),a=l.$$replace,u=e!==t||l.$$html5&&o.history&&i!==l.$$state;(h||u)&&(h=!1,n.$evalAsync(function(){var t=l.absUrl(),r=n.$broadcast("$locationChangeStart",t,e,l.$$state,i).defaultPrevented;l.absUrl()===t&&(r?(l.$$parse(e),l.$$state=i):(u&&s(t,a,i===l.$$state?null:l.$$state),c(e,i)))})),l.$$replace=!1}),l}]}function Wt(){var e=!0,t=this;this.debugEnabled=function(t){return E(t)?(e=t,this):e},this.$get=["$window",function(n){function r(e){return e instanceof Error&&(e.stack?e=e.message&&-1===e.stack.indexOf(e.message)?"Error: "+e.message+"\n"+e.stack:e.stack:e.sourceURL&&(e=e.message+"\n"+e.sourceURL+":"+e.line)),e}function o(e){var t=n.console||{},o=t[e]||t.log||h,a=!1;try{a=!!o.apply}catch(s){}return a?function(){var e=[];return i(arguments,function(t){e.push(r(t))}),o.apply(t,e)}:function(e,t){o(e,null==t?"":t)}}return{log:o("log"),info:o("info"),warn:o("warn"),error:o("error"),debug:function(){var n=o("debug");return function(){e&&n.apply(t,arguments)}}()}}]}function Kt(e,t){if("__defineGetter__"===e||"__defineSetter__"===e||"__lookupGetter__"===e||"__lookupSetter__"===e||"__proto__"===e)throw Uo("isecfld","Attempting to access a disallowed field in Angular expressions! Expression: {0}",t);return e}function Yt(e,t){if(e){if(e.constructor===e)throw Uo("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e.window===e)throw Uo("isecwindow","Referencing the Window in Angular expressions is disallowed! Expression: {0}",t);if(e.children&&(e.nodeName||e.prop&&e.attr&&e.find))throw Uo("isecdom","Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}",t);if(e===Object)throw Uo("isecobj","Referencing Object in Angular expressions is disallowed! Expression: {0}",t)}return e}function Gt(e,t){if(e){if(e.constructor===e)throw Uo("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e===zo||e===Wo||e===Ko)throw Uo("isecff","Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}",t)}}function Xt(e,t){return"undefined"!=typeof e?e:t}function Zt(e,t){return"undefined"==typeof e?t:"undefined"==typeof t?e:e+t}function Jt(e,t){var n=e(t);return!n.$stateful}function Qt(e,t){var n,r;switch(e.type){case Zo.Program:n=!0,i(e.body,function(e){Qt(e.expression,t),n=n&&e.expression.constant}),e.constant=n;break;case Zo.Literal:e.constant=!0,e.toWatch=[];break;case Zo.UnaryExpression:Qt(e.argument,t),e.constant=e.argument.constant,e.toWatch=e.argument.toWatch;break;case Zo.BinaryExpression:Qt(e.left,t),Qt(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.left.toWatch.concat(e.right.toWatch);break;case Zo.LogicalExpression:Qt(e.left,t),Qt(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.constant?[]:[e];break;case Zo.ConditionalExpression:Qt(e.test,t),Qt(e.alternate,t),Qt(e.consequent,t),e.constant=e.test.constant&&e.alternate.constant&&e.consequent.constant,e.toWatch=e.constant?[]:[e];break;case Zo.Identifier:e.constant=!1,e.toWatch=[e];break;case Zo.MemberExpression:Qt(e.object,t),e.computed&&Qt(e.property,t),e.constant=e.object.constant&&(!e.computed||e.property.constant),e.toWatch=[e];break;case Zo.CallExpression:n=e.filter?Jt(t,e.callee.name):!1,r=[],i(e.arguments,function(e){Qt(e,t),n=n&&e.constant,e.constant||r.push.apply(r,e.toWatch)}),e.constant=n,e.toWatch=e.filter&&Jt(t,e.callee.name)?r:[e];break;case Zo.AssignmentExpression:Qt(e.left,t),Qt(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=[e];break;case Zo.ArrayExpression:n=!0,r=[],i(e.elements,function(e){Qt(e,t),n=n&&e.constant,e.constant||r.push.apply(r,e.toWatch)}),e.constant=n,e.toWatch=r;break;case Zo.ObjectExpression:n=!0,r=[],i(e.properties,function(e){Qt(e.value,t),n=n&&e.value.constant,e.value.constant||r.push.apply(r,e.value.toWatch)}),e.constant=n,e.toWatch=r;break;case Zo.ThisExpression:e.constant=!1,e.toWatch=[]}}function en(e){if(1==e.length){var t=e[0].expression,r=t.toWatch;return 1!==r.length?r:r[0]!==t?r:n}}function tn(e){return e.type===Zo.Identifier||e.type===Zo.MemberExpression}function nn(e){return 1===e.body.length&&tn(e.body[0].expression)?{type:Zo.AssignmentExpression,left:e.body[0].expression,right:{type:Zo.NGValueParameter},operator:"="}:void 0}function rn(e){return 0===e.body.length||1===e.body.length&&(e.body[0].expression.type===Zo.Literal||e.body[0].expression.type===Zo.ArrayExpression||e.body[0].expression.type===Zo.ObjectExpression)}function on(e){return e.constant}function an(e,t){this.astBuilder=e,this.$filter=t}function sn(e,t){this.astBuilder=e,this.$filter=t}function cn(e,t,n,r){Yt(e,r);for(var o,i=t.split("."),a=0;i.length>1;a++){o=Kt(i.shift(),r);var s=Yt(e[o],r);s||(s={},e[o]=s),e=s}return o=Kt(i.shift(),r),Yt(e[o],r),e[o]=n,n}function ln(e){return"constructor"==e}function un(e){return x(e.valueOf)?e.valueOf():Qo.call(e)}function dn(){var e=ge(),t=ge();this.$get=["$filter","$sniffer",function(r,o){function a(e,t){return null==e||null==t?e===t:"object"==typeof e&&(e=un(e),"object"==typeof e)?!1:e===t||e!==e&&t!==t}function s(e,t,r,o,i){var s,c=o.inputs;if(1===c.length){var l=a;return c=c[0],e.$watch(function(e){var t=c(e);return a(t,l)||(s=o(e,n,n,[t]),l=t&&un(t)),s},t,r,i)}for(var u=[],d=[],m=0,f=c.length;f>m;m++)u[m]=a,d[m]=null;return e.$watch(function(e){for(var t=!1,r=0,i=c.length;i>r;r++){var l=c[r](e);(t||(t=!a(l,u[r])))&&(d[r]=l,u[r]=l&&un(l))}return t&&(s=o(e,n,n,d)),s},t,r,i)}function c(e,t,n,r){var o,i;return o=e.$watch(function(e){return r(e)},function(e,n,r){i=e,x(t)&&t.apply(this,arguments),E(e)&&r.$$postDigest(function(){E(i)&&o()})},n)}function l(e,t,n,r){function o(e){var t=!0;return i(e,function(e){E(e)||(t=!1)}),t}var a,s;return a=e.$watch(function(e){return r(e)},function(e,n,r){s=e,x(t)&&t.call(this,e,n,r),o(e)&&r.$$postDigest(function(){o(s)&&a()})},n)}function u(e,t,n,r){var o;return o=e.$watch(function(e){return r(e)},function(e,n,r){x(t)&&t.apply(this,arguments),o()},n)}function d(e,t){if(!t)return e;var n=e.$$watchDelegate,r=n!==l&&n!==c,o=r?function(n,r,o,i){var a=e(n,r,o,i);return t(a,n,r)}:function(n,r,o,i){var a=e(n,r,o,i),s=t(a,n,r);return E(a)?s:a};return e.$$watchDelegate&&e.$$watchDelegate!==s?o.$$watchDelegate=e.$$watchDelegate:t.$stateful||(o.$$watchDelegate=s,o.inputs=e.inputs?e.inputs:[e]),o}var m={csp:o.csp,expensiveChecks:!1},f={csp:o.csp,expensiveChecks:!0};return function(n,o,i){var a,p,g;switch(typeof n){case"string":n=n.trim(),g=n;var v=i?t:e;if(a=v[g],!a){":"===n.charAt(0)&&":"===n.charAt(1)&&(p=!0,n=n.substring(2));var $=i?f:m,b=new Xo($),E=new Jo(b,r,$);a=E.parse(n),a.constant?a.$$watchDelegate=u:p?a.$$watchDelegate=a.literal?l:c:a.inputs&&(a.$$watchDelegate=s),v[g]=a}return d(a,o);case"function":return d(n,o);default:return h}}}]}function mn(){this.$get=["$rootScope","$exceptionHandler",function(e,t){return pn(function(t){e.$evalAsync(t)},t)}]}function fn(){this.$get=["$browser","$exceptionHandler",function(e,t){return pn(function(t){e.defer(t)},t)}]}function pn(e,t){function o(e,t,n){function r(t){return function(n){o||(o=!0,t.call(e,n))}}var o=!1;return[r(t),r(n)]}function a(){this.$$state={status:0}}function s(e,t){return function(n){t.call(e,n)}}function c(e){var r,o,i;i=e.pending,e.processScheduled=!1,e.pending=n;for(var a=0,s=i.length;s>a;++a){o=i[a][0],r=i[a][e.status];try{x(r)?o.resolve(r(e.value)):1===e.status?o.resolve(e.value):o.reject(e.value)}catch(c){o.reject(c),t(c)}}}function l(t){!t.processScheduled&&t.pending&&(t.processScheduled=!0,e(function(){c(t)}))}function u(){this.promise=new a,this.resolve=s(this,this.resolve),this.reject=s(this,this.reject),this.notify=s(this,this.notify)}function d(e){var t=new u,n=0,r=jr(e)?[]:{};return i(e,function(e,o){n++,v(e).then(function(e){r.hasOwnProperty(o)||(r[o]=e,--n||t.resolve(r))},function(e){r.hasOwnProperty(o)||t.reject(e)})}),0===n&&t.resolve(r),t.promise}var m=r("$q",TypeError),f=function(){return new u};a.prototype={then:function(e,t,n){var r=new u;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,e,t,n]),this.$$state.status>0&&l(this.$$state),r.promise},"catch":function(e){return this.then(null,e)},"finally":function(e,t){return this.then(function(t){return g(t,!0,e)},function(t){return g(t,!1,e)},t)}},u.prototype={resolve:function(e){this.promise.$$state.status||(e===this.promise?this.$$reject(m("qcycle","Expected promise to be resolved with value other than itself '{0}'",e)):this.$$resolve(e))},$$resolve:function(e){var n,r;r=o(this,this.$$resolve,this.$$reject);try{(y(e)||x(e))&&(n=e&&e.then),x(n)?(this.promise.$$state.status=-1,n.call(e,r[0],r[1],this.notify)):(this.promise.$$state.value=e,this.promise.$$state.status=1,l(this.promise.$$state))}catch(i){
r[1](i),t(i)}},reject:function(e){this.promise.$$state.status||this.$$reject(e)},$$reject:function(e){this.promise.$$state.value=e,this.promise.$$state.status=2,l(this.promise.$$state)},notify:function(n){var r=this.promise.$$state.pending;this.promise.$$state.status<=0&&r&&r.length&&e(function(){for(var e,o,i=0,a=r.length;a>i;i++){o=r[i][0],e=r[i][3];try{o.notify(x(e)?e(n):n)}catch(s){t(s)}}})}};var p=function(e){var t=new u;return t.reject(e),t.promise},h=function(e,t){var n=new u;return t?n.resolve(e):n.reject(e),n.promise},g=function(e,t,n){var r=null;try{x(n)&&(r=n())}catch(o){return h(o,!1)}return D(r)?r.then(function(){return h(e,t)},function(e){return h(e,!1)}):h(e,t)},v=function(e,t,n,r){var o=new u;return o.resolve(e),o.promise.then(t,n,r)},$=v,b=function E(e){function t(e){r.resolve(e)}function n(e){r.reject(e)}if(!x(e))throw m("norslvr","Expected resolverFn, got '{0}'",e);if(!(this instanceof E))return new E(e);var r=new u;return e(t,n),r.promise};return b.defer=f,b.reject=p,b.when=v,b.resolve=$,b.all=d,b}function hn(){this.$get=["$window","$timeout",function(e,t){function n(){for(var e=0;e<u.length;e++){var t=u[e];t&&(u[e]=null,t())}l=u.length=0}function r(e){var t=u.length;return l++,u.push(e),0===t&&(c=s(n)),function(){t>=0&&(u[t]=null,t=null,0===--l&&c&&(c(),c=null,u.length=0))}}var o=e.requestAnimationFrame||e.webkitRequestAnimationFrame,i=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,a=!!o,s=a?function(e){var t=o(e);return function(){i(t)}}:function(e){var n=t(e,16.66,!1);return function(){t.cancel(n)}};r.supported=a;var c,l=0,u=[];return r}]}function gn(){function e(e){function t(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=c(),this.$$ChildScope=null}return t.prototype=e,t}var t=10,n=r("$rootScope"),a=null,s=null;this.digestTtl=function(e){return arguments.length&&(t=e),t},this.$get=["$injector","$exceptionHandler","$parse","$browser",function(r,l,u,d){function m(e){e.currentScope.$$destroyed=!0}function f(){this.$id=c(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function p(e){if(C.$$phase)throw n("inprog","{0} already in progress",C.$$phase);C.$$phase=e}function g(){C.$$phase=null}function v(e,t){do e.$$watchersCount+=t;while(e=e.$parent)}function $(e,t,n){do e.$$listenerCount[n]-=t,0===e.$$listenerCount[n]&&delete e.$$listenerCount[n];while(e=e.$parent)}function E(){}function M(){for(;k.length;)try{k.shift()()}catch(e){l(e)}s=null}function w(){null===s&&(s=d.defer(function(){C.$apply(M)}))}f.prototype={constructor:f,$new:function(t,n){var r;return n=n||this,t?(r=new f,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=e(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(t||n!=this)&&r.$on("$destroy",m),r},$watch:function(e,t,n,r){var o=u(e);if(o.$$watchDelegate)return o.$$watchDelegate(this,t,n,o,e);var i=this,s=i.$$watchers,c={fn:t,last:E,get:o,exp:r||e,eq:!!n};return a=null,x(t)||(c.fn=h),s||(s=i.$$watchers=[]),s.unshift(c),v(this,1),function(){L(s,c)>=0&&v(i,-1),a=null}},$watchGroup:function(e,t){function n(){c=!1,l?(l=!1,t(o,o,s)):t(o,r,s)}var r=new Array(e.length),o=new Array(e.length),a=[],s=this,c=!1,l=!0;if(!e.length){var u=!0;return s.$evalAsync(function(){u&&t(o,o,s)}),function(){u=!1}}return 1===e.length?this.$watch(e[0],function(e,n,i){o[0]=e,r[0]=n,t(o,e===n?o:r,i)}):(i(e,function(e,t){var i=s.$watch(e,function(e,i){o[t]=e,r[t]=i,c||(c=!0,s.$evalAsync(n))});a.push(i)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(e,t){function n(e){i=e;var t,n,r,s,c;if(!b(i)){if(y(i))if(o(i)){a!==f&&(a=f,g=a.length=0,d++),t=i.length,g!==t&&(d++,a.length=g=t);for(var l=0;t>l;l++)c=a[l],s=i[l],r=c!==c&&s!==s,r||c===s||(d++,a[l]=s)}else{a!==p&&(a=p={},g=0,d++),t=0;for(n in i)i.hasOwnProperty(n)&&(t++,s=i[n],c=a[n],n in a?(r=c!==c&&s!==s,r||c===s||(d++,a[n]=s)):(g++,a[n]=s,d++));if(g>t){d++;for(n in a)i.hasOwnProperty(n)||(g--,delete a[n])}}else a!==i&&(a=i,d++);return d}}function r(){if(h?(h=!1,t(i,i,c)):t(i,s,c),l)if(y(i))if(o(i)){s=new Array(i.length);for(var e=0;e<i.length;e++)s[e]=i[e]}else{s={};for(var n in i)yr.call(i,n)&&(s[n]=i[n])}else s=i}n.$stateful=!0;var i,a,s,c=this,l=t.length>1,d=0,m=u(e,n),f=[],p={},h=!0,g=0;return this.$watch(m,r)},$digest:function(){var e,r,o,i,c,u,m,f,h,v,$=t,b=this,y=[];p("$digest"),d.$$checkUrlChange(),this===C&&null!==s&&(d.defer.cancel(s),M()),a=null;do{for(u=!1,f=b;A.length;){try{v=A.shift(),v.scope.$eval(v.expression,v.locals)}catch(w){l(w)}a=null}e:do{if(i=f.$$watchers)for(c=i.length;c--;)try{if(e=i[c])if((r=e.get(f))===(o=e.last)||(e.eq?q(r,o):"number"==typeof r&&"number"==typeof o&&isNaN(r)&&isNaN(o))){if(e===a){u=!1;break e}}else u=!0,a=e,e.last=e.eq?F(r,null):r,e.fn(r,o===E?r:o,f),5>$&&(h=4-$,y[h]||(y[h]=[]),y[h].push({msg:x(e.exp)?"fn: "+(e.exp.name||e.exp.toString()):e.exp,newVal:r,oldVal:o}))}catch(w){l(w)}if(!(m=f.$$watchersCount&&f.$$childHead||f!==b&&f.$$nextSibling))for(;f!==b&&!(m=f.$$nextSibling);)f=f.$parent}while(f=m);if((u||A.length)&&!$--)throw g(),n("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",t,y)}while(u||A.length);for(g();T.length;)try{T.shift()()}catch(w){l(w)}},$destroy:function(){if(!this.$$destroyed){var e=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===C&&d.$$applicationDestroyed(),v(this,-this.$$watchersCount);for(var t in this.$$listenerCount)$(this,this.$$listenerCount[t],t);e&&e.$$childHead==this&&(e.$$childHead=this.$$nextSibling),e&&e.$$childTail==this&&(e.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=h,this.$on=this.$watch=this.$watchGroup=function(){return h},this.$$listeners={},this.$parent=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=this.$root=this.$$watchers=null}},$eval:function(e,t){return u(e)(this,t)},$evalAsync:function(e,t){C.$$phase||A.length||d.defer(function(){A.length&&C.$digest()}),A.push({scope:this,expression:e,locals:t})},$$postDigest:function(e){T.push(e)},$apply:function(e){try{return p("$apply"),this.$eval(e)}catch(t){l(t)}finally{g();try{C.$digest()}catch(t){throw l(t),t}}},$applyAsync:function(e){function t(){n.$eval(e)}var n=this;e&&k.push(t),w()},$on:function(e,t){var n=this.$$listeners[e];n||(this.$$listeners[e]=n=[]),n.push(t);var r=this;do r.$$listenerCount[e]||(r.$$listenerCount[e]=0),r.$$listenerCount[e]++;while(r=r.$parent);var o=this;return function(){var r=n.indexOf(t);-1!==r&&(n[r]=null,$(o,1,e))}},$emit:function(e,t){var n,r,o,i=[],a=this,s=!1,c={name:e,targetScope:a,stopPropagation:function(){s=!0},preventDefault:function(){c.defaultPrevented=!0},defaultPrevented:!1},u=B([c],arguments,1);do{for(n=a.$$listeners[e]||i,c.currentScope=a,r=0,o=n.length;o>r;r++)if(n[r])try{n[r].apply(null,u)}catch(d){l(d)}else n.splice(r,1),r--,o--;if(s)return c.currentScope=null,c;a=a.$parent}while(a);return c.currentScope=null,c},$broadcast:function(e,t){var n=this,r=n,o=n,i={name:e,targetScope:n,preventDefault:function(){i.defaultPrevented=!0},defaultPrevented:!1};if(!n.$$listenerCount[e])return i;for(var a,s,c,u=B([i],arguments,1);r=o;){for(i.currentScope=r,a=r.$$listeners[e]||[],s=0,c=a.length;c>s;s++)if(a[s])try{a[s].apply(null,u)}catch(d){l(d)}else a.splice(s,1),s--,c--;if(!(o=r.$$listenerCount[e]&&r.$$childHead||r!==n&&r.$$nextSibling))for(;r!==n&&!(o=r.$$nextSibling);)r=r.$parent}return i.currentScope=null,i}};var C=new f,A=C.$$asyncQueue=[],T=C.$$postDigestQueue=[],k=C.$$applyAsyncQueue=[];return C}]}function vn(){var e=/^\s*(https?|ftp|mailto|tel|file):/,t=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(t){return E(t)?(e=t,this):e},this.imgSrcSanitizationWhitelist=function(e){return E(e)?(t=e,this):t},this.$get=function(){return function(n,r){var o,i=r?t:e;return o=xn(n).href,""===o||o.match(i)?n:"unsafe:"+o}}}function $n(e){if("self"===e)return e;if(w(e)){if(e.indexOf("***")>-1)throw ei("iwcard","Illegal sequence *** in string matcher.  String: {0}",e);return e=Vr(e).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+e+"$")}if(T(e))return new RegExp("^"+e.source+"$");throw ei("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function bn(e){var t=[];return E(e)&&i(e,function(e){t.push($n(e))}),t}function En(){this.SCE_CONTEXTS=ti;var e=["self"],t=[];this.resourceUrlWhitelist=function(t){return arguments.length&&(e=bn(t)),e},this.resourceUrlBlacklist=function(e){return arguments.length&&(t=bn(e)),t},this.$get=["$injector",function(r){function o(e,t){return"self"===e?Tn(t):!!e.exec(t.href)}function i(n){var r,i,a=xn(n.toString()),s=!1;for(r=0,i=e.length;i>r;r++)if(o(e[r],a)){s=!0;break}if(s)for(r=0,i=t.length;i>r;r++)if(o(t[r],a)){s=!1;break}return s}function a(e){var t=function(e){this.$$unwrapTrustedValue=function(){return e}};return e&&(t.prototype=new e),t.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},t.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},t}function s(e,t){var r=m.hasOwnProperty(e)?m[e]:null;if(!r)throw ei("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",e,t);if(null===t||t===n||""===t)return t;if("string"!=typeof t)throw ei("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",e);return new r(t)}function c(e){return e instanceof d?e.$$unwrapTrustedValue():e}function l(e,t){if(null===t||t===n||""===t)return t;var r=m.hasOwnProperty(e)?m[e]:null;if(r&&t instanceof r)return t.$$unwrapTrustedValue();if(e===ti.RESOURCE_URL){if(i(t))return t;throw ei("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",t.toString())}if(e===ti.HTML)return u(t);throw ei("unsafe","Attempting to use an unsafe value in a safe context.")}var u=function(e){throw ei("unsafe","Attempting to use an unsafe value in a safe context.")};r.has("$sanitize")&&(u=r.get("$sanitize"));var d=a(),m={};return m[ti.HTML]=a(d),m[ti.CSS]=a(d),m[ti.URL]=a(d),m[ti.JS]=a(d),m[ti.RESOURCE_URL]=a(m[ti.URL]),{trustAs:s,getTrusted:l,valueOf:c}}]}function yn(){var e=!0;this.enabled=function(t){return arguments.length&&(e=!!t),e},this.$get=["$parse","$sceDelegate",function(t,n){if(e&&8>Ar)throw ei("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var r=V(ti);r.isEnabled=function(){return e},r.trustAs=n.trustAs,r.getTrusted=n.getTrusted,r.valueOf=n.valueOf,e||(r.trustAs=r.getTrusted=function(e,t){return t},r.valueOf=g),r.parseAs=function(e,n){var o=t(n);return o.literal&&o.constant?o:t(n,function(t){return r.getTrusted(e,t)})};var o=r.parseAs,a=r.getTrusted,s=r.trustAs;return i(ti,function(e,t){var n=Er(t);r[Me("parse_as_"+n)]=function(t){return o(e,t)},r[Me("get_trusted_"+n)]=function(t){return a(e,t)},r[Me("trust_as_"+n)]=function(t){return s(e,t)}}),r}]}function Mn(){this.$get=["$window","$document",function(e,t){var n,r,o={},i=f((/android (\d+)/.exec(Er((e.navigator||{}).userAgent))||[])[1]),a=/Boxee/i.test((e.navigator||{}).userAgent),s=t[0]||{},c=/^(Moz|webkit|ms)(?=[A-Z])/,l=s.body&&s.body.style,u=!1,d=!1;if(l){for(var m in l)if(r=c.exec(m)){n=r[0],n=n.substr(0,1).toUpperCase()+n.substr(1);break}n||(n="WebkitOpacity"in l&&"webkit"),u=!!("transition"in l||n+"Transition"in l),d=!!("animation"in l||n+"Animation"in l),!i||u&&d||(u=w(l.webkitTransition),d=w(l.webkitAnimation))}return{history:!(!e.history||!e.history.pushState||4>i||a),hasEvent:function(e){if("input"===e&&11>=Ar)return!1;if(b(o[e])){var t=s.createElement("div");o[e]="on"+e in t}return o[e]},csp:qr(),vendorPrefix:n,transitions:u,animations:d,android:i}}]}function wn(){this.$get=["$templateCache","$http","$q","$sce",function(e,t,n,r){function o(i,a){function s(e){if(!a)throw No("tpload","Failed to load template: {0} (HTTP status: {1} {2})",i,e.status,e.statusText);return n.reject(e)}o.totalPendingRequests++,w(i)&&e.get(i)||(i=r.getTrustedResourceUrl(i));var c=t.defaults&&t.defaults.transformResponse;jr(c)?c=c.filter(function(e){return e!==bt}):c===bt&&(c=null);var l={cache:e,transformResponse:c};return t.get(i,l)["finally"](function(){o.totalPendingRequests--}).then(function(t){return e.put(i,t.data),t.data},s)}return o.totalPendingRequests=0,o}]}function Cn(){this.$get=["$rootScope","$browser","$location",function(e,t,n){var r={};return r.findBindings=function(e,t,n){var r=e.getElementsByClassName("ng-binding"),o=[];return i(r,function(e){var r=Ir.element(e).data("$binding");r&&i(r,function(r){if(n){var i=new RegExp("(^|\\s)"+Vr(t)+"(\\s|\\||$)");i.test(r)&&o.push(e)}else-1!=r.indexOf(t)&&o.push(e)})}),o},r.findModels=function(e,t,n){for(var r=["ng-","data-ng-","ng\\:"],o=0;o<r.length;++o){var i=n?"=":"*=",a="["+r[o]+"model"+i+'"'+t+'"]',s=e.querySelectorAll(a);if(s.length)return s}},r.getLocation=function(){return n.url()},r.setLocation=function(t){t!==n.url()&&(n.url(t),e.$digest())},r.whenStable=function(e){t.notifyWhenNoOutstandingRequests(e)},r}]}function An(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(e,t,n,r,o){function i(i,s,c){x(i)||(c=s,s=i,i=h);var l,u=U(arguments,3),d=E(c)&&!c,m=(d?r:n).defer(),f=m.promise;return l=t.defer(function(){try{m.resolve(i.apply(null,u))}catch(t){m.reject(t),o(t)}finally{delete a[f.$$timeoutId]}d||e.$apply()},s),f.$$timeoutId=l,a[l]=m,f}var a={};return i.cancel=function(e){return e&&e.$$timeoutId in a?(a[e.$$timeoutId].reject("canceled"),delete a[e.$$timeoutId],t.defer.cancel(e.$$timeoutId)):!1},i}]}function xn(e){var t=e;return Ar&&(ni.setAttribute("href",t),t=ni.href),ni.setAttribute("href",t),{href:ni.href,protocol:ni.protocol?ni.protocol.replace(/:$/,""):"",host:ni.host,search:ni.search?ni.search.replace(/^\?/,""):"",hash:ni.hash?ni.hash.replace(/^#/,""):"",hostname:ni.hostname,port:ni.port,pathname:"/"===ni.pathname.charAt(0)?ni.pathname:"/"+ni.pathname}}function Tn(e){var t=w(e)?xn(e):e;return t.protocol===ri.protocol&&t.host===ri.host}function kn(){this.$get=v(e)}function Sn(e){function t(e){try{return decodeURIComponent(e)}catch(t){return e}}var r=e[0]||{},o={},i="";return function(){var e,a,s,c,l,u=r.cookie||"";if(u!==i)for(i=u,e=i.split("; "),o={},s=0;s<e.length;s++)a=e[s],c=a.indexOf("="),c>0&&(l=t(a.substring(0,c)),o[l]===n&&(o[l]=t(a.substring(c+1))));return o}}function Nn(){this.$get=Sn}function _n(e){function t(r,o){if(y(r)){var a={};return i(r,function(e,n){a[n]=t(n,e)}),a}return e.factory(r+n,o)}var n="Filter";this.register=t,this.$get=["$injector",function(e){return function(t){return e.get(t+n)}}],t("currency",Rn),t("date",Gn),t("filter",Hn),t("json",Xn),t("limitTo",Zn),t("lowercase",ci),t("number",Pn),t("orderBy",Jn),t("uppercase",li)}function Hn(){return function(e,t,n){if(!o(e)){if(null==e)return e;throw r("filter")("notarray","Expected array but received: {0}",e)}var i,a,s=In(t);switch(s){case"function":i=t;break;case"boolean":case"null":case"number":case"string":a=!0;case"object":i=On(t,n,a);break;default:return e}return Array.prototype.filter.call(e,i)}}function On(e,t,n){var r,o=y(e)&&"$"in e;return t===!0?t=q:x(t)||(t=function(e,t){return b(e)?!1:null===e||null===t?e===t:y(t)||y(e)&&!$(e)?!1:(e=Er(""+e),t=Er(""+t),-1!==e.indexOf(t))}),r=function(r){return o&&!y(r)?Dn(r,e.$,t,!1):Dn(r,e,t,n)}}function Dn(e,t,n,r,o){var i=In(e),a=In(t);if("string"===a&&"!"===t.charAt(0))return!Dn(e,t.substring(1),n,r);if(jr(e))return e.some(function(e){return Dn(e,t,n,r)});switch(i){case"object":var s;if(r){for(s in e)if("$"!==s.charAt(0)&&Dn(e[s],t,n,!0))return!0;return o?!1:Dn(e,t,n,!1)}if("object"===a){for(s in t){var c=t[s];if(!x(c)&&!b(c)){var l="$"===s,u=l?e:e[s];if(!Dn(u,c,n,l,l))return!1}}return!0}return n(e,t);case"function":return!1;default:return n(e,t)}}function In(e){return null===e?"null":typeof e}function Rn(e){var t=e.NUMBER_FORMATS;return function(e,n,r){return b(n)&&(n=t.CURRENCY_SYM),b(r)&&(r=t.PATTERNS[1].maxFrac),null==e?e:jn(e,t.PATTERNS[1],t.GROUP_SEP,t.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function Pn(e){var t=e.NUMBER_FORMATS;return function(e,n){return null==e?e:jn(e,t.PATTERNS[0],t.GROUP_SEP,t.DECIMAL_SEP,n)}}function jn(e,t,n,r,o){if(y(e))return"";var i=0>e;e=Math.abs(e);var a=e===1/0;if(!a&&!isFinite(e))return"";var s=e+"",c="",l=!1,u=[];if(a&&(c="∞"),!a&&-1!==s.indexOf("e")){var d=s.match(/([\d\.]+)e(-?)(\d+)/);d&&"-"==d[2]&&d[3]>o+1?e=0:(c=s,l=!0)}if(a||l)o>0&&1>e&&(c=e.toFixed(o),e=parseFloat(c));else{var m=(s.split(oi)[1]||"").length;b(o)&&(o=Math.min(Math.max(t.minFrac,m),t.maxFrac)),e=+(Math.round(+(e.toString()+"e"+o)).toString()+"e"+-o);var f=(""+e).split(oi),p=f[0];f=f[1]||"";var h,g=0,v=t.lgSize,$=t.gSize;if(p.length>=v+$)for(g=p.length-v,h=0;g>h;h++)(g-h)%$===0&&0!==h&&(c+=n),c+=p.charAt(h);for(h=g;h<p.length;h++)(p.length-h)%v===0&&0!==h&&(c+=n),c+=p.charAt(h);for(;f.length<o;)f+="0";o&&"0"!==o&&(c+=r+f.substr(0,o))}return 0===e&&(i=!1),u.push(i?t.negPre:t.posPre,c,i?t.negSuf:t.posSuf),u.join("")}function Ln(e,t,n){var r="";for(0>e&&(r="-",e=-e),e=""+e;e.length<t;)e="0"+e;return n&&(e=e.substr(e.length-t)),r+e}function Fn(e,t,n,r){return n=n||0,function(o){var i=o["get"+e]();return(n>0||i>-n)&&(i+=n),0===i&&-12==n&&(i=12),Ln(i,t,r)}}function Vn(e,t){return function(n,r){var o=n["get"+e](),i=Mr(t?"SHORT"+e:e);return r[i][o]}}function qn(e,t,n){var r=-1*n,o=r>=0?"+":"";return o+=Ln(Math[r>0?"floor":"ceil"](r/60),2)+Ln(Math.abs(r%60),2)}function Bn(e){var t=new Date(e,0,1).getDay();return new Date(e,0,(4>=t?5:12)-t)}function Un(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate()+(4-e.getDay()))}function zn(e){return function(t){var n=Bn(t.getFullYear()),r=Un(t),o=+r-+n,i=1+Math.round(o/6048e5);return Ln(i,e)}}function Wn(e,t){return e.getHours()<12?t.AMPMS[0]:t.AMPMS[1]}function Kn(e,t){return e.getFullYear()<=0?t.ERAS[0]:t.ERAS[1]}function Yn(e,t){return e.getFullYear()<=0?t.ERANAMES[0]:t.ERANAMES[1]}function Gn(e){function t(e){var t;if(t=e.match(n)){var r=new Date(0),o=0,i=0,a=t[8]?r.setUTCFullYear:r.setFullYear,s=t[8]?r.setUTCHours:r.setHours;t[9]&&(o=f(t[9]+t[10]),i=f(t[9]+t[11])),a.call(r,f(t[1]),f(t[2])-1,f(t[3]));var c=f(t[4]||0)-o,l=f(t[5]||0)-i,u=f(t[6]||0),d=Math.round(1e3*parseFloat("0."+(t[7]||0)));return s.call(r,c,l,u,d),r}return e}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,o){var a,s,c="",l=[];if(r=r||"mediumDate",r=e.DATETIME_FORMATS[r]||r,w(n)&&(n=si.test(n)?f(n):t(n)),C(n)&&(n=new Date(n)),!A(n)||!isFinite(n.getTime()))return n;for(;r;)s=ai.exec(r),s?(l=B(l,s,1),r=l.pop()):(l.push(r),r=null);var u=n.getTimezoneOffset();return o&&(u=G(o,n.getTimezoneOffset()),n=Z(n,o,!0)),i(l,function(t){a=ii[t],c+=a?a(n,e.DATETIME_FORMATS,u):t.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),c}}function Xn(){return function(e,t){return b(t)&&(t=2),K(e,t)}}function Zn(){return function(e,t,n){return t=Math.abs(Number(t))===1/0?Number(t):f(t),isNaN(t)?e:(C(e)&&(e=e.toString()),jr(e)||w(e)?(n=!n||isNaN(n)?0:f(n),n=0>n&&n>=-e.length?e.length+n:n,t>=0?e.slice(n,n+t):0===n?e.slice(t,e.length):e.slice(Math.max(0,n+t),n)):e)}}function Jn(e){function t(t,n){return n=n?-1:1,t.map(function(t){var r=1,o=g;if(x(t))o=t;else if(w(t)&&(("+"==t.charAt(0)||"-"==t.charAt(0))&&(r="-"==t.charAt(0)?-1:1,t=t.substring(1)),""!==t&&(o=e(t),o.constant))){var i=o();o=function(e){return e[i]}}return{get:o,descending:r*n}})}function n(e){switch(typeof e){case"number":case"boolean":case"string":return!0;default:return!1}}function r(e,t){return"function"==typeof e.valueOf&&(e=e.valueOf(),n(e))?e:$(e)&&(e=e.toString(),n(e))?e:t}function i(e,t){var n=typeof e;return null===e?(n="string",e="null"):"string"===n?e=e.toLowerCase():"object"===n&&(e=r(e,t)),{value:e,type:n}}function a(e,t){var n=0;return e.type===t.type?e.value!==t.value&&(n=e.value<t.value?-1:1):n=e.type<t.type?-1:1,n}return function(e,n,r){function s(e,t){return{value:e,predicateValues:l.map(function(n){return i(n.get(e),t)})}}function c(e,t){for(var n=0,r=0,o=l.length;o>r&&!(n=a(e.predicateValues[r],t.predicateValues[r])*l[r].descending);++r);return n}if(!o(e))return e;jr(n)||(n=[n]),0===n.length&&(n=["+"]);var l=t(n,r),u=Array.prototype.map.call(e,s);return u.sort(c),e=u.map(function(e){return e.value})}}function Qn(e){return x(e)&&(e={link:e}),e.restrict=e.restrict||"AC",v(e)}function er(e,t){e.$name=t}function tr(e,t,r,o,a){var s=this,c=[],l=s.$$parentForm=e.parent().controller("form")||mi;s.$error={},s.$$success={},s.$pending=n,s.$name=a(t.name||t.ngForm||"")(r),s.$dirty=!1,s.$pristine=!0,s.$valid=!0,s.$invalid=!1,s.$submitted=!1,l.$addControl(s),s.$rollbackViewValue=function(){i(c,function(e){e.$rollbackViewValue()})},s.$commitViewValue=function(){i(c,function(e){e.$commitViewValue()})},s.$addControl=function(e){fe(e.$name,"input"),c.push(e),e.$name&&(s[e.$name]=e)},s.$$renameControl=function(e,t){var n=e.$name;s[n]===e&&delete s[n],s[t]=e,e.$name=t},s.$removeControl=function(e){e.$name&&s[e.$name]===e&&delete s[e.$name],i(s.$pending,function(t,n){s.$setValidity(n,null,e)}),i(s.$error,function(t,n){s.$setValidity(n,null,e)}),i(s.$$success,function(t,n){s.$setValidity(n,null,e)}),L(c,e)},gr({ctrl:this,$element:e,set:function(e,t,n){var r=e[t];if(r){var o=r.indexOf(n);-1===o&&r.push(n)}else e[t]=[n]},unset:function(e,t,n){var r=e[t];r&&(L(r,n),0===r.length&&delete e[t])},parentForm:l,$animate:o}),s.$setDirty=function(){o.removeClass(e,Yi),o.addClass(e,Gi),s.$dirty=!0,s.$pristine=!1,l.$setDirty()},s.$setPristine=function(){o.setClass(e,Yi,Gi+" "+fi),s.$dirty=!1,s.$pristine=!0,s.$submitted=!1,i(c,function(e){e.$setPristine()})},s.$setUntouched=function(){i(c,function(e){e.$setUntouched()})},s.$setSubmitted=function(){o.addClass(e,fi),s.$submitted=!0,l.$setSubmitted()}}function nr(e){e.$formatters.push(function(t){return e.$isEmpty(t)?t:t.toString()})}function rr(e,t,n,r,o,i){or(e,t,n,r,o,i),nr(r)}function or(e,t,n,r,o,i){var a=Er(t[0].type);if(!o.android){var s=!1;t.on("compositionstart",function(e){s=!0}),t.on("compositionend",function(){s=!1,c()})}var c=function(e){if(l&&(i.defer.cancel(l),l=null),!s){var o=t.val(),c=e&&e.type;"password"===a||n.ngTrim&&"false"===n.ngTrim||(o=Fr(o)),(r.$viewValue!==o||""===o&&r.$$hasNativeValidators)&&r.$setViewValue(o,c)}};if(o.hasEvent("input"))t.on("input",c);else{var l,u=function(e,t,n){l||(l=i.defer(function(){l=null,t&&t.value===n||c(e)}))};t.on("keydown",function(e){var t=e.keyCode;91===t||t>15&&19>t||t>=37&&40>=t||u(e,this,this.value)}),o.hasEvent("paste")&&t.on("paste cut",u)}t.on("change",c),r.$render=function(){t.val(r.$isEmpty(r.$viewValue)?"":r.$viewValue)}}function ir(e,t){if(A(e))return e;if(w(e)){wi.lastIndex=0;var n=wi.exec(e);if(n){var r=+n[1],o=+n[2],i=0,a=0,s=0,c=0,l=Bn(r),u=7*(o-1);return t&&(i=t.getHours(),a=t.getMinutes(),s=t.getSeconds(),c=t.getMilliseconds()),new Date(r,0,l.getDate()+u,i,a,s,c)}}return 0/0}function ar(e,t){return function(n,r){var o,a;if(A(n))return n;if(w(n)){if('"'==n.charAt(0)&&'"'==n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),vi.test(n))return new Date(n);if(e.lastIndex=0,o=e.exec(n))return o.shift(),a=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},i(o,function(e,n){n<t.length&&(a[t[n]]=+e)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return 0/0}}function sr(e,t,r,o){return function(i,a,s,c,l,u,d){function m(e){return e&&!(e.getTime&&e.getTime()!==e.getTime())}function f(e){return E(e)?A(e)?e:r(e):n}cr(i,a,s,c),or(i,a,s,c,l,u);var p,h=c&&c.$options&&c.$options.timezone;if(c.$$parserName=e,c.$parsers.push(function(e){if(c.$isEmpty(e))return null;if(t.test(e)){var o=r(e,p);return h&&(o=Z(o,h)),o}return n}),c.$formatters.push(function(e){if(e&&!A(e))throw Qi("datefmt","Expected `{0}` to be a date",e);return m(e)?(p=e,p&&h&&(p=Z(p,h,!0)),d("date")(e,o,h)):(p=null,"")}),E(s.min)||s.ngMin){var g;c.$validators.min=function(e){return!m(e)||b(g)||r(e)>=g},s.$observe("min",function(e){g=f(e),c.$validate()})}if(E(s.max)||s.ngMax){var v;c.$validators.max=function(e){return!m(e)||b(v)||r(e)<=v},s.$observe("max",function(e){v=f(e),c.$validate()})}}}function cr(e,t,r,o){var i=t[0],a=o.$$hasNativeValidators=y(i.validity);a&&o.$parsers.push(function(e){var r=t.prop(br)||{};return r.badInput&&!r.typeMismatch?n:e})}function lr(e,t,r,o,i,a){if(cr(e,t,r,o),or(e,t,r,o,i,a),o.$$parserName="number",o.$parsers.push(function(e){return o.$isEmpty(e)?null:Ei.test(e)?parseFloat(e):n}),o.$formatters.push(function(e){if(!o.$isEmpty(e)){if(!C(e))throw Qi("numfmt","Expected `{0}` to be a number",e);e=e.toString()}return e}),E(r.min)||r.ngMin){var s;o.$validators.min=function(e){return o.$isEmpty(e)||b(s)||e>=s},r.$observe("min",function(e){E(e)&&!C(e)&&(e=parseFloat(e,10)),s=C(e)&&!isNaN(e)?e:n,o.$validate()})}if(E(r.max)||r.ngMax){var c;o.$validators.max=function(e){return o.$isEmpty(e)||b(c)||c>=e},r.$observe("max",function(e){E(e)&&!C(e)&&(e=parseFloat(e,10)),c=C(e)&&!isNaN(e)?e:n,o.$validate()})}}function ur(e,t,n,r,o,i){or(e,t,n,r,o,i),nr(r),r.$$parserName="url",r.$validators.url=function(e,t){var n=e||t;return r.$isEmpty(n)||$i.test(n)}}function dr(e,t,n,r,o,i){or(e,t,n,r,o,i),nr(r),r.$$parserName="email",r.$validators.email=function(e,t){var n=e||t;return r.$isEmpty(n)||bi.test(n)}}function mr(e,t,n,r){b(n.name)&&t.attr("name",c());var o=function(e){t[0].checked&&r.$setViewValue(n.value,e&&e.type)};t.on("click",o),r.$render=function(){var e=n.value;t[0].checked=e==r.$viewValue},n.$observe("value",r.$render)}function fr(e,t,n,o,i){var a;if(E(o)){if(a=e(o),!a.constant)throw r("ngModel")("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,o);return a(t)}return i}function pr(e,t,n,r,o,i,a,s){var c=fr(s,e,"ngTrueValue",n.ngTrueValue,!0),l=fr(s,e,"ngFalseValue",n.ngFalseValue,!1),u=function(e){r.$setViewValue(t[0].checked,e&&e.type)};t.on("click",u),r.$render=function(){t[0].checked=r.$viewValue},r.$isEmpty=function(e){return e===!1},r.$formatters.push(function(e){return q(e,c)}),r.$parsers.push(function(e){return e?c:l})}function hr(e,t){return e="ngClass"+e,["$animate",function(n){function r(e,t){var n=[];e:for(var r=0;r<e.length;r++){for(var o=e[r],i=0;i<t.length;i++)if(o==t[i])continue e;n.push(o)}return n}function o(e){var t=[];return jr(e)?(i(e,function(e){t=t.concat(o(e))}),t):w(e)?e.split(" "):y(e)?(i(e,function(e,n){e&&(t=t.concat(n.split(" ")))}),t):e}return{restrict:"AC",link:function(a,s,c){function l(e){var t=d(e,1);c.$addClass(t)}function u(e){var t=d(e,-1);c.$removeClass(t)}function d(e,t){var n=s.data("$classCounts")||ge(),r=[];return i(e,function(e){(t>0||n[e])&&(n[e]=(n[e]||0)+t,n[e]===+(t>0)&&r.push(e))}),s.data("$classCounts",n),r.join(" ")}function m(e,t){var o=r(t,e),i=r(e,t);o=d(o,1),i=d(i,-1),o&&o.length&&n.addClass(s,o),i&&i.length&&n.removeClass(s,i)}function f(e){if(t===!0||a.$index%2===t){var n=o(e||[]);if(p){if(!q(e,p)){var r=o(p);m(r,n)}}else l(n)}p=V(e)}var p;a.$watch(c[e],f,!0),c.$observe("class",function(t){f(a.$eval(c[e]))}),"ngClass"!==e&&a.$watch("$index",function(n,r){var i=1&n;if(i!==(1&r)){var s=o(a.$eval(c[e]));i===t?l(s):u(s)}})}}}]}function gr(e){function t(e,t,c){t===n?r("$pending",e,c):o("$pending",e,c),O(t)?t?(d(s.$error,e,c),u(s.$$success,e,c)):(u(s.$error,e,c),d(s.$$success,e,c)):(d(s.$error,e,c),d(s.$$success,e,c)),s.$pending?(i(Ji,!0),s.$valid=s.$invalid=n,a("",null)):(i(Ji,!1),s.$valid=vr(s.$error),s.$invalid=!s.$valid,a("",s.$valid));var l;l=s.$pending&&s.$pending[e]?n:s.$error[e]?!1:s.$$success[e]?!0:null,a(e,l),m.$setValidity(e,l,s)}function r(e,t,n){s[e]||(s[e]={}),u(s[e],t,n)}function o(e,t,r){s[e]&&d(s[e],t,r),vr(s[e])&&(s[e]=n)}function i(e,t){t&&!l[e]?(f.addClass(c,e),l[e]=!0):!t&&l[e]&&(f.removeClass(c,e),l[e]=!1)}function a(e,t){e=e?"-"+le(e,"-"):"",i(Wi+e,t===!0),i(Ki+e,t===!1)}var s=e.ctrl,c=e.$element,l={},u=e.set,d=e.unset,m=e.parentForm,f=e.$animate;l[Ki]=!(l[Wi]=c.hasClass(Wi)),s.$setValidity=t}function vr(e){if(e)for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}var $r=/^\/(.+)\/([a-z]*)$/,br="validity",Er=function(e){return w(e)?e.toLowerCase():e},yr=Object.prototype.hasOwnProperty,Mr=function(e){return w(e)?e.toUpperCase():e},wr=function(e){return w(e)?e.replace(/[A-Z]/g,function(e){return String.fromCharCode(32|e.charCodeAt(0))}):e},Cr=function(e){return w(e)?e.replace(/[a-z]/g,function(e){return String.fromCharCode(-33&e.charCodeAt(0))}):e};"i"!=="I".toLowerCase()&&(Er=wr,Mr=Cr);var Ar,xr,Tr,kr,Sr=[].slice,Nr=[].splice,_r=[].push,Hr=Object.prototype.toString,Or=Object.getPrototypeOf,Dr=r("ng"),Ir=e.angular||(e.angular={}),Rr=0;Ar=t.documentMode,h.$inject=[],g.$inject=[];var Pr,jr=Array.isArray,Lr=/^\[object (Uint8(Clamped)?)|(Uint16)|(Uint32)|(Int8)|(Int16)|(Int32)|(Float(32)|(64))Array\]$/,Fr=function(e){return w(e)?e.trim():e},Vr=function(e){return e.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},qr=function(){if(E(qr.isActive_))return qr.isActive_;var e=!(!t.querySelector("[ng-csp]")&&!t.querySelector("[data-ng-csp]"));if(!e)try{new Function("")}catch(n){e=!0}return qr.isActive_=e},Br=function(){if(E(Br.name_))return Br.name_;var e,n,r,o,i=Ur.length;for(n=0;i>n;++n)if(r=Ur[n],e=t.querySelector("["+r.replace(":","\\:")+"jq]")){o=e.getAttribute(r+"jq");break}return Br.name_=o},Ur=["ng-","data-ng-","ng:","x-ng-"],zr=/[A-Z]/g,Wr=!1,Kr=1,Yr=2,Gr=3,Xr=8,Zr=9,Jr=11,Qr={full:"1.4.3",major:1,minor:4,dot:3,codeName:"foam-acceleration"};ke.expando="ng339";var eo=ke.cache={},to=1,no=function(e,t,n){e.addEventListener(t,n,!1)},ro=function(e,t,n){e.removeEventListener(t,n,!1)};ke._data=function(e){return this.cache[e[this.expando]]||{}};var oo=/([\:\-\_]+(.))/g,io=/^moz([A-Z])/,ao={mouseleave:"mouseout",mouseenter:"mouseover"},so=r("jqLite"),co=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,lo=/<|&#?\w+;/,uo=/<([\w:]+)/,mo=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,fo={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};fo.optgroup=fo.option,fo.tbody=fo.tfoot=fo.colgroup=fo.caption=fo.thead,fo.th=fo.td;var po=ke.prototype={ready:function(n){function r(){o||(o=!0,n())}var o=!1;"complete"===t.readyState?setTimeout(r):(this.on("DOMContentLoaded",r),ke(e).on("load",r))},toString:function(){var e=[];return i(this,function(t){e.push(""+t)}),"["+e.join(", ")+"]"},eq:function(e){return xr(e>=0?this[e]:this[this.length+e])},length:0,push:_r,sort:[].sort,splice:[].splice},ho={};i("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(e){ho[Er(e)]=e});var go={};i("input,select,option,textarea,button,form,details".split(","),function(e){go[e]=!0});var vo={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};i({data:De,removeData:He,hasData:Ae},function(e,t){ke[t]=e}),i({data:De,inheritedData:Fe,scope:function(e){return xr.data(e,"$scope")||Fe(e.parentNode||e,["$isolateScope","$scope"])},isolateScope:function(e){return xr.data(e,"$isolateScope")||xr.data(e,"$isolateScopeNoTemplate")},controller:Le,injector:function(e){return Fe(e,"$injector")},removeAttr:function(e,t){e.removeAttribute(t)},hasClass:Ie,
css:function(e,t,n){return t=Me(t),E(n)?void(e.style[t]=n):e.style[t]},attr:function(e,t,r){var o=e.nodeType;if(o!==Gr&&o!==Yr&&o!==Xr){var i=Er(t);if(ho[i]){if(!E(r))return e[t]||(e.attributes.getNamedItem(t)||h).specified?i:n;r?(e[t]=!0,e.setAttribute(t,i)):(e[t]=!1,e.removeAttribute(i))}else if(E(r))e.setAttribute(t,r);else if(e.getAttribute){var a=e.getAttribute(t,2);return null===a?n:a}}},prop:function(e,t,n){return E(n)?void(e[t]=n):e[t]},text:function(){function e(e,t){if(b(t)){var n=e.nodeType;return n===Kr||n===Gr?e.textContent:""}e.textContent=t}return e.$dv="",e}(),val:function(e,t){if(b(t)){if(e.multiple&&"select"===j(e)){var n=[];return i(e.options,function(e){e.selected&&n.push(e.value||e.text)}),0===n.length?null:n}return e.value}e.value=t},html:function(e,t){return b(t)?e.innerHTML:(Ne(e,!0),void(e.innerHTML=t))},empty:Ve},function(e,t){ke.prototype[t]=function(t,r){var o,i,a=this.length;if(e!==Ve&&(2==e.length&&e!==Ie&&e!==Le?t:r)===n){if(y(t)){for(o=0;a>o;o++)if(e===De)e(this[o],t);else for(i in t)e(this[o],i,t[i]);return this}for(var s=e.$dv,c=s===n?Math.min(a,1):a,l=0;c>l;l++){var u=e(this[l],t,r);s=s?s+u:u}return s}for(o=0;a>o;o++)e(this[o],t,r);return this}}),i({removeData:He,on:function Sa(e,t,n,r){if(E(r))throw so("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(Ce(e)){var o=Oe(e,!0),i=o.events,a=o.handle;a||(a=o.handle=We(e,i));for(var s=t.indexOf(" ")>=0?t.split(" "):[t],c=s.length;c--;){t=s[c];var l=i[t];l||(i[t]=[],"mouseenter"===t||"mouseleave"===t?Sa(e,ao[t],function(e){var n=this,r=e.relatedTarget;(!r||r!==n&&!n.contains(r))&&a(e,t)}):"$destroy"!==t&&no(e,t,a),l=i[t]),l.push(n)}}},off:_e,one:function(e,t,n){e=xr(e),e.on(t,function r(){e.off(t,n),e.off(t,r)}),e.on(t,n)},replaceWith:function(e,t){var n,r=e.parentNode;Ne(e),i(new ke(t),function(t){n?r.insertBefore(t,n.nextSibling):r.replaceChild(t,e),n=t})},children:function(e){var t=[];return i(e.childNodes,function(e){e.nodeType===Kr&&t.push(e)}),t},contents:function(e){return e.contentDocument||e.childNodes||[]},append:function(e,t){var n=e.nodeType;if(n===Kr||n===Jr){t=new ke(t);for(var r=0,o=t.length;o>r;r++){var i=t[r];e.appendChild(i)}}},prepend:function(e,t){if(e.nodeType===Kr){var n=e.firstChild;i(new ke(t),function(t){e.insertBefore(t,n)})}},wrap:function(e,t){t=xr(t).eq(0).clone()[0];var n=e.parentNode;n&&n.replaceChild(t,e),t.appendChild(e)},remove:qe,detach:function(e){qe(e,!0)},after:function(e,t){var n=e,r=e.parentNode;t=new ke(t);for(var o=0,i=t.length;i>o;o++){var a=t[o];r.insertBefore(a,n.nextSibling),n=a}},addClass:Pe,removeClass:Re,toggleClass:function(e,t,n){t&&i(t.split(" "),function(t){var r=n;b(r)&&(r=!Ie(e,t)),(r?Pe:Re)(e,t)})},parent:function(e){var t=e.parentNode;return t&&t.nodeType!==Jr?t:null},next:function(e){return e.nextElementSibling},find:function(e,t){return e.getElementsByTagName?e.getElementsByTagName(t):[]},clone:Se,triggerHandler:function(e,t,n){var r,o,a,s=t.type||t,c=Oe(e),l=c&&c.events,u=l&&l[s];u&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return this.defaultPrevented===!0},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return this.immediatePropagationStopped===!0},stopPropagation:h,type:s,target:e},t.type&&(r=d(r,t)),o=V(u),a=n?[r].concat(n):[r],i(o,function(t){r.isImmediatePropagationStopped()||t.apply(e,a)}))}},function(e,t){ke.prototype[t]=function(t,n,r){for(var o,i=0,a=this.length;a>i;i++)b(o)?(o=e(this[i],t,n,r),E(o)&&(o=xr(o))):je(o,e(this[i],t,n,r));return E(o)?o:this},ke.prototype.bind=ke.prototype.on,ke.prototype.unbind=ke.prototype.off}),Ge.prototype={put:function(e,t){this[Ye(e,this.nextUid)]=t},get:function(e){return this[Ye(e,this.nextUid)]},remove:function(e){var t=this[e=Ye(e,this.nextUid)];return delete this[e],t}};var $o=[function(){this.$get=[function(){return Ge}]}],bo=/^function\s*[^\(]*\(\s*([^\)]*)\)/m,Eo=/,/,yo=/^\s*(_?)(\S+?)\1\s*$/,Mo=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,wo=r("$injector");Je.$$annotate=Ze;var Co=r("$animate"),Ao=1,xo="ng-animate",To=function(){this.$get=["$q","$$rAF",function(e,t){function n(){}return n.all=h,n.chain=h,n.prototype={end:h,cancel:h,resume:h,pause:h,complete:h,then:function(n,r){return e(function(e){t(function(){e()})}).then(n,r)}},n}]},ko=function(){var e=new Ge,t=[];this.$get=["$$AnimateRunner","$rootScope",function(n,r){function o(n,o,a){var s=e.get(n);s||(e.put(n,s={}),t.push(n)),o&&i(o.split(" "),function(e){e&&(s[e]=!0)}),a&&i(a.split(" "),function(e){e&&(s[e]=!1)}),t.length>1||r.$$postDigest(function(){i(t,function(t){var n=e.get(t);if(n){var r=nt(t.attr("class")),o="",a="";i(n,function(e,t){var n=!!r[t];e!==n&&(e?o+=(o.length?" ":"")+t:a+=(a.length?" ":"")+t)}),i(t,function(e){o&&Pe(e,o),a&&Re(e,a)}),e.remove(t)}}),t.length=0})}return{enabled:h,on:h,off:h,pin:h,push:function(e,t,r,i){return i&&i(),r=r||{},r.from&&e.css(r.from),r.to&&e.css(r.to),(r.addClass||r.removeClass)&&o(e,r.addClass,r.removeClass),new n}}}]},So=["$provide",function(e){var t=this;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw Co("notcsel","Expecting class selector starting with '.' got '{0}'.",n);var o=n+"-animation";t.$$registeredAnimations[n.substr(1)]=o,e.factory(o,r)},this.classNameFilter=function(e){if(1===arguments.length&&(this.$$classNameFilter=e instanceof RegExp?e:null,this.$$classNameFilter)){var t=new RegExp("(\\s+|\\/)"+xo+"(\\s+|\\/)");if(t.test(this.$$classNameFilter.toString()))throw Co("nongcls",'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',xo)}return this.$$classNameFilter},this.$get=["$$animateQueue",function(e){function t(e,t,n){if(n){var r=tt(n);!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(e):t.prepend(e)}return{on:e.on,off:e.off,pin:e.pin,enabled:e.enabled,cancel:function(e){e.end&&e.end()},enter:function(n,r,o,i){return r=r&&xr(r),o=o&&xr(o),r=r||o.parent(),t(n,r,o),e.push(n,"enter",rt(i))},move:function(n,r,o,i){return r=r&&xr(r),o=o&&xr(o),r=r||o.parent(),t(n,r,o),e.push(n,"move",rt(i))},leave:function(t,n){return e.push(t,"leave",rt(n),function(){t.remove()})},addClass:function(t,n,r){return r=rt(r),r.addClass=et(r.addclass,n),e.push(t,"addClass",r)},removeClass:function(t,n,r){return r=rt(r),r.removeClass=et(r.removeClass,n),e.push(t,"removeClass",r)},setClass:function(t,n,r,o){return o=rt(o),o.addClass=et(o.addClass,n),o.removeClass=et(o.removeClass,r),e.push(t,"setClass",o)},animate:function(t,n,r,o,i){return i=rt(i),i.from=i.from?d(i.from,n):n,i.to=i.to?d(i.to,r):r,o=o||"ng-inline-animate",i.tempClasses=et(i.tempClasses,o),e.push(t,"animate",i)}}}]}],No=r("$compile");ct.$inject=["$provide","$$sanitizeUriProvider"];var _o=/^((?:x|data)[\:\-_])/i,Ho=r("$controller"),Oo=/^(\S+)(\s+as\s+(\w+))?$/,Do="application/json",Io={"Content-Type":Do+";charset=utf-8"},Ro=/^\[|^\{(?!\{)/,Po={"[":/]$/,"{":/}$/},jo=/^\)\]\}',?\n/,Lo=Ir.$interpolateMinErr=r("$interpolate");Lo.throwNoconcat=function(e){throw Lo("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",e)},Lo.interr=function(e,t){return Lo("interr","Can't interpolate: {0}\n{1}",e,t.toString())};var Fo=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,Vo={http:80,https:443,ftp:21},qo=r("$location"),Bo={$$html5:!1,$$replace:!1,absUrl:Bt("$$absUrl"),url:function(e){if(b(e))return this.$$url;var t=Fo.exec(e);return(t[1]||""===e)&&this.path(decodeURIComponent(t[1])),(t[2]||t[1]||""===e)&&this.search(t[3]||""),this.hash(t[5]||""),this},protocol:Bt("$$protocol"),host:Bt("$$host"),port:Bt("$$port"),path:Ut("$$path",function(e){return e=null!==e?e.toString():"","/"==e.charAt(0)?e:"/"+e}),search:function(e,t){switch(arguments.length){case 0:return this.$$search;case 1:if(w(e)||C(e))e=e.toString(),this.$$search=ee(e);else{if(!y(e))throw qo("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");e=F(e,{}),i(e,function(t,n){null==t&&delete e[n]}),this.$$search=e}break;default:b(t)||null===t?delete this.$$search[e]:this.$$search[e]=t}return this.$$compose(),this},hash:Ut("$$hash",function(e){return null!==e?e.toString():""}),replace:function(){return this.$$replace=!0,this}};i([qt,Vt,Ft],function(e){e.prototype=Object.create(Bo),e.prototype.state=function(t){if(!arguments.length)return this.$$state;if(e!==Ft||!this.$$html5)throw qo("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=b(t)?null:t,this}});var Uo=r("$parse"),zo=Function.prototype.call,Wo=Function.prototype.apply,Ko=Function.prototype.bind,Yo=ge();i("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(e){Yo[e]=!0});var Go={n:"\n",f:"\f",r:"\r",t:"	",v:"","'":"'",'"':'"'},Xo=function(e){this.options=e};Xo.prototype={constructor:Xo,lex:function(e){for(this.text=e,this.index=0,this.tokens=[];this.index<this.text.length;){var t=this.text.charAt(this.index);if('"'===t||"'"===t)this.readString(t);else if(this.isNumber(t)||"."===t&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdent(t))this.readIdent();else if(this.is(t,"(){}[].,;:?"))this.tokens.push({index:this.index,text:t}),this.index++;else if(this.isWhitespace(t))this.index++;else{var n=t+this.peek(),r=n+this.peek(2),o=Yo[t],i=Yo[n],a=Yo[r];if(o||i||a){var s=a?r:i?n:t;this.tokens.push({index:this.index,text:s,operator:!0}),this.index+=s.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(e,t){return-1!==t.indexOf(e)},peek:function(e){var t=e||1;return this.index+t<this.text.length?this.text.charAt(this.index+t):!1},isNumber:function(e){return e>="0"&&"9">=e&&"string"==typeof e},isWhitespace:function(e){return" "===e||"\r"===e||"	"===e||"\n"===e||""===e||" "===e},isIdent:function(e){return e>="a"&&"z">=e||e>="A"&&"Z">=e||"_"===e||"$"===e},isExpOperator:function(e){return"-"===e||"+"===e||this.isNumber(e)},throwError:function(e,t,n){n=n||this.index;var r=E(t)?"s "+t+"-"+this.index+" ["+this.text.substring(t,n)+"]":" "+n;throw Uo("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",e,r,this.text)},readNumber:function(){for(var e="",t=this.index;this.index<this.text.length;){var n=Er(this.text.charAt(this.index));if("."==n||this.isNumber(n))e+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))e+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==e.charAt(e.length-1))e+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=e.charAt(e.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:t,text:e,constant:!0,value:Number(e)})},readIdent:function(){for(var e=this.index;this.index<this.text.length;){var t=this.text.charAt(this.index);if(!this.isIdent(t)&&!this.isNumber(t))break;this.index++}this.tokens.push({index:e,text:this.text.slice(e,this.index),identifier:!0})},readString:function(e){var t=this.index;this.index++;for(var n="",r=e,o=!1;this.index<this.text.length;){var i=this.text.charAt(this.index);if(r+=i,o){if("u"===i){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{var s=Go[i];n+=s||i}o=!1}else if("\\"===i)o=!0;else{if(i===e)return this.index++,void this.tokens.push({index:t,text:r,constant:!0,value:n});n+=i}this.index++}this.throwError("Unterminated quote",t)}};var Zo=function(e,t){this.lexer=e,this.options=t};Zo.Program="Program",Zo.ExpressionStatement="ExpressionStatement",Zo.AssignmentExpression="AssignmentExpression",Zo.ConditionalExpression="ConditionalExpression",Zo.LogicalExpression="LogicalExpression",Zo.BinaryExpression="BinaryExpression",Zo.UnaryExpression="UnaryExpression",Zo.CallExpression="CallExpression",Zo.MemberExpression="MemberExpression",Zo.Identifier="Identifier",Zo.Literal="Literal",Zo.ArrayExpression="ArrayExpression",Zo.Property="Property",Zo.ObjectExpression="ObjectExpression",Zo.ThisExpression="ThisExpression",Zo.NGValueParameter="NGValueParameter",Zo.prototype={ast:function(e){this.text=e,this.tokens=this.lexer.lex(e);var t=this.program();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),t},program:function(){for(var e=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&e.push(this.expressionStatement()),!this.expect(";"))return{type:Zo.Program,body:e}},expressionStatement:function(){return{type:Zo.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var e,t=this.expression();e=this.expect("|");)t=this.filter(t);return t},expression:function(){return this.assignment()},assignment:function(){var e=this.ternary();return this.expect("=")&&(e={type:Zo.AssignmentExpression,left:e,right:this.assignment(),operator:"="}),e},ternary:function(){var e,t,n=this.logicalOR();return this.expect("?")&&(e=this.expression(),this.consume(":"))?(t=this.expression(),{type:Zo.ConditionalExpression,test:n,alternate:e,consequent:t}):n},logicalOR:function(){for(var e=this.logicalAND();this.expect("||");)e={type:Zo.LogicalExpression,operator:"||",left:e,right:this.logicalAND()};return e},logicalAND:function(){for(var e=this.equality();this.expect("&&");)e={type:Zo.LogicalExpression,operator:"&&",left:e,right:this.equality()};return e},equality:function(){for(var e,t=this.relational();e=this.expect("==","!=","===","!==");)t={type:Zo.BinaryExpression,operator:e.text,left:t,right:this.relational()};return t},relational:function(){for(var e,t=this.additive();e=this.expect("<",">","<=",">=");)t={type:Zo.BinaryExpression,operator:e.text,left:t,right:this.additive()};return t},additive:function(){for(var e,t=this.multiplicative();e=this.expect("+","-");)t={type:Zo.BinaryExpression,operator:e.text,left:t,right:this.multiplicative()};return t},multiplicative:function(){for(var e,t=this.unary();e=this.expect("*","/","%");)t={type:Zo.BinaryExpression,operator:e.text,left:t,right:this.unary()};return t},unary:function(){var e;return(e=this.expect("+","-","!"))?{type:Zo.UnaryExpression,operator:e.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var e;this.expect("(")?(e=this.filterChain(),this.consume(")")):this.expect("[")?e=this.arrayDeclaration():this.expect("{")?e=this.object():this.constants.hasOwnProperty(this.peek().text)?e=F(this.constants[this.consume().text]):this.peek().identifier?e=this.identifier():this.peek().constant?e=this.constant():this.throwError("not a primary expression",this.peek());for(var t;t=this.expect("(","[",".");)"("===t.text?(e={type:Zo.CallExpression,callee:e,arguments:this.parseArguments()},this.consume(")")):"["===t.text?(e={type:Zo.MemberExpression,object:e,property:this.expression(),computed:!0},this.consume("]")):"."===t.text?e={type:Zo.MemberExpression,object:e,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return e},filter:function(e){for(var t=[e],n={type:Zo.CallExpression,callee:this.identifier(),arguments:t,filter:!0};this.expect(":");)t.push(this.expression());return n},parseArguments:function(){var e=[];if(")"!==this.peekToken().text)do e.push(this.expression());while(this.expect(","));return e},identifier:function(){var e=this.consume();return e.identifier||this.throwError("is not a valid identifier",e),{type:Zo.Identifier,name:e.text}},constant:function(){return{type:Zo.Literal,value:this.consume().value}},arrayDeclaration:function(){var e=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;e.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:Zo.ArrayExpression,elements:e}},object:function(){var e,t=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;e={type:Zo.Property,kind:"init"},this.peek().constant?e.key=this.constant():this.peek().identifier?e.key=this.identifier():this.throwError("invalid key",this.peek()),this.consume(":"),e.value=this.expression(),t.push(e)}while(this.expect(","));return this.consume("}"),{type:Zo.ObjectExpression,properties:t}},throwError:function(e,t){throw Uo("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",t.text,e,t.index+1,this.text,this.text.substring(t.index))},consume:function(e){if(0===this.tokens.length)throw Uo("ueoe","Unexpected end of expression: {0}",this.text);var t=this.expect(e);return t||this.throwError("is unexpected, expecting ["+e+"]",this.peek()),t},peekToken:function(){if(0===this.tokens.length)throw Uo("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(e,t,n,r){return this.peekAhead(0,e,t,n,r)},peekAhead:function(e,t,n,r,o){if(this.tokens.length>e){var i=this.tokens[e],a=i.text;if(a===t||a===n||a===r||a===o||!t&&!n&&!r&&!o)return i}return!1},expect:function(e,t,n,r){var o=this.peek(e,t,n,r);return o?(this.tokens.shift(),o):!1},constants:{"true":{type:Zo.Literal,value:!0},"false":{type:Zo.Literal,value:!1},"null":{type:Zo.Literal,value:null},undefined:{type:Zo.Literal,value:n},"this":{type:Zo.ThisExpression}}},an.prototype={compile:function(e,t){var r=this,o=this.astBuilder.ast(e);this.state={nextId:0,filters:{},expensiveChecks:t,fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},Qt(o,r.$filter);var a,s="";if(this.stage="assign",a=nn(o)){this.state.computing="assign";var c=this.nextId();this.recurse(a,c),s="fn.assign="+this.generateFunction("assign","s,v,l")}var l=en(o.body);r.stage="inputs",i(l,function(e,t){var n="fn"+t;r.state[n]={vars:[],body:[],own:{}},r.state.computing=n;var o=r.nextId();r.recurse(e,o),r.return_(o),r.state.inputs.push(n),e.watchId=t}),this.state.computing="fn",this.stage="main",this.recurse(o);var u='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+s+this.watchFns()+"return fn;",d=new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","ifDefined","plus","text",u)(this.$filter,Kt,Yt,Gt,Xt,Zt,e);return this.state=this.stage=n,d.literal=rn(o),d.constant=on(o),d},USE:"use",STRICT:"strict",watchFns:function(){var e=[],t=this.state.inputs,n=this;return i(t,function(t){e.push("var "+t+"="+n.generateFunction(t,"s"))}),t.length&&e.push("fn.inputs=["+t.join(",")+"];"),e.join("")},generateFunction:function(e,t){return"function("+t+"){"+this.varsPrefix(e)+this.body(e)+"};"},filterPrefix:function(){var e=[],t=this;return i(this.state.filters,function(n,r){e.push(n+"=$filter("+t.escape(r)+")")}),e.length?"var "+e.join(",")+";":""},varsPrefix:function(e){return this.state[e].vars.length?"var "+this.state[e].vars.join(",")+";":""},body:function(e){return this.state[e].body.join("")},recurse:function(e,t,r,o,a,s){var c,l,u,d,m=this;if(o=o||h,!s&&E(e.watchId))return t=t||this.nextId(),void this.if_("i",this.lazyAssign(t,this.computedMember("i",e.watchId)),this.lazyRecurse(e,t,r,o,a,!0));switch(e.type){case Zo.Program:i(e.body,function(t,r){m.recurse(t.expression,n,n,function(e){l=e}),r!==e.body.length-1?m.current().body.push(l,";"):m.return_(l)});break;case Zo.Literal:d=this.escape(e.value),this.assign(t,d),o(d);break;case Zo.UnaryExpression:this.recurse(e.argument,n,n,function(e){l=e}),d=e.operator+"("+this.ifDefined(l,0)+")",this.assign(t,d),o(d);break;case Zo.BinaryExpression:this.recurse(e.left,n,n,function(e){c=e}),this.recurse(e.right,n,n,function(e){l=e}),d="+"===e.operator?this.plus(c,l):"-"===e.operator?this.ifDefined(c,0)+e.operator+this.ifDefined(l,0):"("+c+")"+e.operator+"("+l+")",this.assign(t,d),o(d);break;case Zo.LogicalExpression:t=t||this.nextId(),m.recurse(e.left,t),m.if_("&&"===e.operator?t:m.not(t),m.lazyRecurse(e.right,t)),o(t);break;case Zo.ConditionalExpression:t=t||this.nextId(),m.recurse(e.test,t),m.if_(t,m.lazyRecurse(e.alternate,t),m.lazyRecurse(e.consequent,t)),o(t);break;case Zo.Identifier:t=t||this.nextId(),r&&(r.context="inputs"===m.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",e.name)+"?l:s"),r.computed=!1,r.name=e.name),Kt(e.name),m.if_("inputs"===m.stage||m.not(m.getHasOwnProperty("l",e.name)),function(){m.if_("inputs"===m.stage||"s",function(){a&&1!==a&&m.if_(m.not(m.nonComputedMember("s",e.name)),m.lazyAssign(m.nonComputedMember("s",e.name),"{}")),m.assign(t,m.nonComputedMember("s",e.name))})},t&&m.lazyAssign(t,m.nonComputedMember("l",e.name))),(m.state.expensiveChecks||ln(e.name))&&m.addEnsureSafeObject(t),o(t);break;case Zo.MemberExpression:c=r&&(r.context=this.nextId())||this.nextId(),t=t||this.nextId(),m.recurse(e.object,c,n,function(){m.if_(m.notNull(c),function(){e.computed?(l=m.nextId(),m.recurse(e.property,l),m.addEnsureSafeMemberName(l),a&&1!==a&&m.if_(m.not(m.computedMember(c,l)),m.lazyAssign(m.computedMember(c,l),"{}")),d=m.ensureSafeObject(m.computedMember(c,l)),m.assign(t,d),r&&(r.computed=!0,r.name=l)):(Kt(e.property.name),a&&1!==a&&m.if_(m.not(m.nonComputedMember(c,e.property.name)),m.lazyAssign(m.nonComputedMember(c,e.property.name),"{}")),d=m.nonComputedMember(c,e.property.name),(m.state.expensiveChecks||ln(e.property.name))&&(d=m.ensureSafeObject(d)),m.assign(t,d),r&&(r.computed=!1,r.name=e.property.name))},function(){m.assign(t,"undefined")}),o(t)},!!a);break;case Zo.CallExpression:t=t||this.nextId(),e.filter?(l=m.filter(e.callee.name),u=[],i(e.arguments,function(e){var t=m.nextId();m.recurse(e,t),u.push(t)}),d=l+"("+u.join(",")+")",m.assign(t,d),o(t)):(l=m.nextId(),c={},u=[],m.recurse(e.callee,l,c,function(){m.if_(m.notNull(l),function(){m.addEnsureSafeFunction(l),i(e.arguments,function(e){m.recurse(e,m.nextId(),n,function(e){u.push(m.ensureSafeObject(e))})}),c.name?(m.state.expensiveChecks||m.addEnsureSafeObject(c.context),d=m.member(c.context,c.name,c.computed)+"("+u.join(",")+")"):d=l+"("+u.join(",")+")",d=m.ensureSafeObject(d),m.assign(t,d)},function(){m.assign(t,"undefined")}),o(t)}));break;case Zo.AssignmentExpression:if(l=this.nextId(),c={},!tn(e.left))throw Uo("lval","Trying to assing a value to a non l-value");this.recurse(e.left,n,c,function(){m.if_(m.notNull(c.context),function(){m.recurse(e.right,l),m.addEnsureSafeObject(m.member(c.context,c.name,c.computed)),d=m.member(c.context,c.name,c.computed)+e.operator+l,m.assign(t,d),o(t||d)})},1);break;case Zo.ArrayExpression:u=[],i(e.elements,function(e){m.recurse(e,m.nextId(),n,function(e){u.push(e)})}),d="["+u.join(",")+"]",this.assign(t,d),o(d);break;case Zo.ObjectExpression:u=[],i(e.properties,function(e){m.recurse(e.value,m.nextId(),n,function(t){u.push(m.escape(e.key.type===Zo.Identifier?e.key.name:""+e.key.value)+":"+t)})}),d="{"+u.join(",")+"}",this.assign(t,d),o(d);break;case Zo.ThisExpression:this.assign(t,"s"),o("s");break;case Zo.NGValueParameter:this.assign(t,"v"),o("v")}},getHasOwnProperty:function(e,t){var n=e+"."+t,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,e+"&&("+this.escape(t)+" in "+e+")")),r[n]},assign:function(e,t){return e?(this.current().body.push(e,"=",t,";"),e):void 0},filter:function(e){return this.state.filters.hasOwnProperty(e)||(this.state.filters[e]=this.nextId(!0)),this.state.filters[e]},ifDefined:function(e,t){return"ifDefined("+e+","+this.escape(t)+")"},plus:function(e,t){return"plus("+e+","+t+")"},return_:function(e){this.current().body.push("return ",e,";")},if_:function(e,t,n){if(e===!0)t();else{var r=this.current().body;r.push("if(",e,"){"),t(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(e){return"!("+e+")"},notNull:function(e){return e+"!=null"},nonComputedMember:function(e,t){return e+"."+t},computedMember:function(e,t){return e+"["+t+"]"},member:function(e,t,n){return n?this.computedMember(e,t):this.nonComputedMember(e,t)},addEnsureSafeObject:function(e){this.current().body.push(this.ensureSafeObject(e),";")},addEnsureSafeMemberName:function(e){this.current().body.push(this.ensureSafeMemberName(e),";")},addEnsureSafeFunction:function(e){this.current().body.push(this.ensureSafeFunction(e),";")},ensureSafeObject:function(e){return"ensureSafeObject("+e+",text)"},ensureSafeMemberName:function(e){return"ensureSafeMemberName("+e+",text)"},ensureSafeFunction:function(e){return"ensureSafeFunction("+e+",text)"},lazyRecurse:function(e,t,n,r,o,i){var a=this;return function(){a.recurse(e,t,n,r,o,i)}},lazyAssign:function(e,t){var n=this;return function(){n.assign(e,t)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)},escape:function(e){if(w(e))return"'"+e.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(C(e))return e.toString();if(e===!0)return"true";if(e===!1)return"false";if(null===e)return"null";if("undefined"==typeof e)return"undefined";throw Uo("esc","IMPOSSIBLE")},nextId:function(e,t){var n="v"+this.state.nextId++;return e||this.current().vars.push(n+(t?"="+t:"")),n},current:function(){return this.state[this.state.computing]}},sn.prototype={compile:function(e,t){var n=this,r=this.astBuilder.ast(e);this.expression=e,this.expensiveChecks=t,Qt(r,n.$filter);var o,a;(o=nn(r))&&(a=this.recurse(o));var s,c=en(r.body);c&&(s=[],i(c,function(e,t){var r=n.recurse(e);e.input=r,s.push(r),e.watchId=t}));var l=[];i(r.body,function(e){l.push(n.recurse(e.expression))});var u=0===r.body.length?function(){}:1===r.body.length?l[0]:function(e,t){var n;return i(l,function(r){n=r(e,t)}),n};return a&&(u.assign=function(e,t,n){return a(e,n,t)}),s&&(u.inputs=s),u.literal=rn(r),u.constant=on(r),u},recurse:function(e,t,r){var o,a,s,c=this;if(e.input)return this.inputs(e.input,e.watchId);switch(e.type){case Zo.Literal:return this.value(e.value,t);case Zo.UnaryExpression:return a=this.recurse(e.argument),this["unary"+e.operator](a,t);case Zo.BinaryExpression:return o=this.recurse(e.left),a=this.recurse(e.right),this["binary"+e.operator](o,a,t);case Zo.LogicalExpression:return o=this.recurse(e.left),a=this.recurse(e.right),this["binary"+e.operator](o,a,t);case Zo.ConditionalExpression:return this["ternary?:"](this.recurse(e.test),this.recurse(e.alternate),this.recurse(e.consequent),t);case Zo.Identifier:return Kt(e.name,c.expression),c.identifier(e.name,c.expensiveChecks||ln(e.name),t,r,c.expression);case Zo.MemberExpression:return o=this.recurse(e.object,!1,!!r),e.computed||(Kt(e.property.name,c.expression),a=e.property.name),e.computed&&(a=this.recurse(e.property)),e.computed?this.computedMember(o,a,t,r,c.expression):this.nonComputedMember(o,a,c.expensiveChecks,t,r,c.expression);case Zo.CallExpression:return s=[],i(e.arguments,function(e){s.push(c.recurse(e))}),e.filter&&(a=this.$filter(e.callee.name)),e.filter||(a=this.recurse(e.callee,!0)),e.filter?function(e,r,o,i){for(var c=[],l=0;l<s.length;++l)c.push(s[l](e,r,o,i));var u=a.apply(n,c,i);return t?{context:n,name:n,value:u}:u}:function(e,n,r,o){var i,l=a(e,n,r,o);if(null!=l.value){Yt(l.context,c.expression),Gt(l.value,c.expression);for(var u=[],d=0;d<s.length;++d)u.push(Yt(s[d](e,n,r,o),c.expression));i=Yt(l.value.apply(l.context,u),c.expression)}return t?{value:i}:i};case Zo.AssignmentExpression:return o=this.recurse(e.left,!0,1),a=this.recurse(e.right),function(e,n,r,i){var s=o(e,n,r,i),l=a(e,n,r,i);return Yt(s.value,c.expression),s.context[s.name]=l,t?{value:l}:l};case Zo.ArrayExpression:return s=[],i(e.elements,function(e){s.push(c.recurse(e))}),function(e,n,r,o){for(var i=[],a=0;a<s.length;++a)i.push(s[a](e,n,r,o));return t?{value:i}:i};case Zo.ObjectExpression:return s=[],i(e.properties,function(e){s.push({key:e.key.type===Zo.Identifier?e.key.name:""+e.key.value,value:c.recurse(e.value)})}),function(e,n,r,o){for(var i={},a=0;a<s.length;++a)i[s[a].key]=s[a].value(e,n,r,o);return t?{value:i}:i};case Zo.ThisExpression:return function(e){return t?{value:e}:e};case Zo.NGValueParameter:return function(e,n,r,o){return t?{value:r}:r}}},"unary+":function(e,t){return function(n,r,o,i){var a=e(n,r,o,i);return a=E(a)?+a:0,t?{value:a}:a}},"unary-":function(e,t){return function(n,r,o,i){var a=e(n,r,o,i);return a=E(a)?-a:0,t?{value:a}:a}},"unary!":function(e,t){return function(n,r,o,i){var a=!e(n,r,o,i);return t?{value:a}:a}},"binary+":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a),c=t(r,o,i,a),l=Zt(s,c);return n?{value:l}:l}},"binary-":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a),c=t(r,o,i,a),l=(E(s)?s:0)-(E(c)?c:0);return n?{value:l}:l}},"binary*":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)*t(r,o,i,a);return n?{value:s}:s}},"binary/":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)/t(r,o,i,a);return n?{value:s}:s}},"binary%":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)%t(r,o,i,a);return n?{value:s}:s}},"binary===":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)===t(r,o,i,a);return n?{value:s}:s}},"binary!==":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)!==t(r,o,i,a);return n?{value:s}:s}},"binary==":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)==t(r,o,i,a);return n?{value:s}:s}},"binary!=":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)!=t(r,o,i,a);return n?{value:s}:s}},"binary<":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)<t(r,o,i,a);return n?{value:s}:s}},"binary>":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)>t(r,o,i,a);return n?{value:s}:s}},"binary<=":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)<=t(r,o,i,a);return n?{value:s}:s}},"binary>=":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)>=t(r,o,i,a);return n?{value:s}:s}},"binary&&":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)&&t(r,o,i,a);return n?{value:s}:s}},"binary||":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)||t(r,o,i,a);return n?{value:s}:s}},"ternary?:":function(e,t,n,r){return function(o,i,a,s){var c=e(o,i,a,s)?t(o,i,a,s):n(o,i,a,s);return r?{value:c}:c}},value:function(e,t){return function(){return t?{context:n,name:n,value:e}:e}},identifier:function(e,t,r,o,i){return function(a,s,c,l){var u=s&&e in s?s:a;o&&1!==o&&u&&!u[e]&&(u[e]={});var d=u?u[e]:n;return t&&Yt(d,i),r?{context:u,name:e,value:d}:d}},computedMember:function(e,t,n,r,o){return function(i,a,s,c){var l,u,d=e(i,a,s,c);return null!=d&&(l=t(i,a,s,c),Kt(l,o),r&&1!==r&&d&&!d[l]&&(d[l]={}),u=d[l],Yt(u,o)),n?{context:d,name:l,value:u}:u}},nonComputedMember:function(e,t,r,o,i,a){return function(s,c,l,u){var d=e(s,c,l,u);i&&1!==i&&d&&!d[t]&&(d[t]={});var m=null!=d?d[t]:n;return(r||ln(t))&&Yt(m,a),o?{context:d,name:t,value:m}:m}},inputs:function(e,t){return function(n,r,o,i){return i?i[t]:e(n,r,o)}}};var Jo=function(e,t,n){this.lexer=e,this.$filter=t,this.options=n,this.ast=new Zo(this.lexer),this.astCompiler=n.csp?new sn(this.ast,t):new an(this.ast,t)};Jo.prototype={constructor:Jo,parse:function(e){return this.astCompiler.compile(e,this.options.expensiveChecks)}};var Qo=(ge(),ge(),Object.prototype.valueOf),ei=r("$sce"),ti={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},No=r("$compile"),ni=t.createElement("a"),ri=xn(e.location.href);Sn.$inject=["$document"],_n.$inject=["$provide"],Rn.$inject=["$locale"],Pn.$inject=["$locale"];var oi=".",ii={yyyy:Fn("FullYear",4),yy:Fn("FullYear",2,0,!0),y:Fn("FullYear",1),MMMM:Vn("Month"),MMM:Vn("Month",!0),MM:Fn("Month",2,1),M:Fn("Month",1,1),dd:Fn("Date",2),d:Fn("Date",1),HH:Fn("Hours",2),H:Fn("Hours",1),hh:Fn("Hours",2,-12),h:Fn("Hours",1,-12),mm:Fn("Minutes",2),m:Fn("Minutes",1),ss:Fn("Seconds",2),s:Fn("Seconds",1),sss:Fn("Milliseconds",3),EEEE:Vn("Day"),EEE:Vn("Day",!0),a:Wn,Z:qn,ww:zn(2),w:zn(1),G:Kn,GG:Kn,GGG:Kn,GGGG:Yn},ai=/((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,si=/^\-?\d+$/;Gn.$inject=["$locale"];var ci=v(Er),li=v(Mr);Jn.$inject=["$parse"];var ui=v({restrict:"E",compile:function(e,t){return t.href||t.xlinkHref?void 0:function(e,t){if("a"===t[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===Hr.call(t.prop("href"))?"xlink:href":"href";t.on("click",function(e){
t.attr(n)||e.preventDefault()})}}}}),di={};i(ho,function(e,t){function n(e,n,o){e.$watch(o[r],function(e){o.$set(t,!!e)})}if("multiple"!=e){var r=lt("ng-"+t),o=n;"checked"===e&&(o=function(e,t,o){o.ngModel!==o[r]&&n(e,t,o)}),di[r]=function(){return{restrict:"A",priority:100,link:o}}}}),i(vo,function(e,t){di[t]=function(){return{priority:100,link:function(e,n,r){if("ngPattern"===t&&"/"==r.ngPattern.charAt(0)){var o=r.ngPattern.match($r);if(o)return void r.$set("ngPattern",new RegExp(o[1],o[2]))}e.$watch(r[t],function(e){r.$set(t,e)})}}}}),i(["src","srcset","href"],function(e){var t=lt("ng-"+e);di[t]=function(){return{priority:99,link:function(n,r,o){var i=e,a=e;"href"===e&&"[object SVGAnimatedString]"===Hr.call(r.prop("href"))&&(a="xlinkHref",o.$attr[a]="xlink:href",i=null),o.$observe(t,function(t){return t?(o.$set(a,t),void(Ar&&i&&r.prop(i,o[a]))):void("href"===e&&o.$set(a,null))})}}}});var mi={$addControl:h,$$renameControl:er,$removeControl:h,$setValidity:h,$setDirty:h,$setPristine:h,$setSubmitted:h},fi="ng-submitted";tr.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var pi=function(e){return["$timeout",function(t){var r={name:"form",restrict:e?"EAC":"E",controller:tr,compile:function(r,o){r.addClass(Yi).addClass(Wi);var i=o.name?"name":e&&o.ngForm?"ngForm":!1;return{pre:function(e,r,o,a){if(!("action"in o)){var s=function(t){e.$apply(function(){a.$commitViewValue(),a.$setSubmitted()}),t.preventDefault()};no(r[0],"submit",s),r.on("$destroy",function(){t(function(){ro(r[0],"submit",s)},0,!1)})}var c=a.$$parentForm;i&&(cn(e,a.$name,a,a.$name),o.$observe(i,function(t){a.$name!==t&&(cn(e,a.$name,n,a.$name),c.$$renameControl(a,t),cn(e,a.$name,a,a.$name))})),r.on("$destroy",function(){c.$removeControl(a),i&&cn(e,o[i],n,a.$name),d(a,mi)})}}}};return r}]},hi=pi(),gi=pi(!0),vi=/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,$i=/^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/,bi=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,Ei=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,yi=/^(\d{4})-(\d{2})-(\d{2})$/,Mi=/^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,wi=/^(\d{4})-W(\d\d)$/,Ci=/^(\d{4})-(\d\d)$/,Ai=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,xi={text:rr,date:sr("date",yi,ar(yi,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":sr("datetimelocal",Mi,ar(Mi,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:sr("time",Ai,ar(Ai,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:sr("week",wi,ir,"yyyy-Www"),month:sr("month",Ci,ar(Ci,["yyyy","MM"]),"yyyy-MM"),number:lr,url:ur,email:dr,radio:mr,checkbox:pr,hidden:h,button:h,submit:h,reset:h,file:h},Ti=["$browser","$sniffer","$filter","$parse",function(e,t,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(o,i,a,s){s[0]&&(xi[Er(a.type)]||xi.text)(o,i,a,s[0],t,e,n,r)}}}}],ki=/^(true|false|\d+)$/,Si=function(){return{restrict:"A",priority:100,compile:function(e,t){return ki.test(t.ngValue)?function(e,t,n){n.$set("value",e.$eval(n.ngValue))}:function(e,t,n){e.$watch(n.ngValue,function(e){n.$set("value",e)})}}}},Ni=["$compile",function(e){return{restrict:"AC",compile:function(t){return e.$$addBindingClass(t),function(t,r,o){e.$$addBindingInfo(r,o.ngBind),r=r[0],t.$watch(o.ngBind,function(e){r.textContent=e===n?"":e})}}}}],_i=["$interpolate","$compile",function(e,t){return{compile:function(r){return t.$$addBindingClass(r),function(r,o,i){var a=e(o.attr(i.$attr.ngBindTemplate));t.$$addBindingInfo(o,a.expressions),o=o[0],i.$observe("ngBindTemplate",function(e){o.textContent=e===n?"":e})}}}}],Hi=["$sce","$parse","$compile",function(e,t,n){return{restrict:"A",compile:function(r,o){var i=t(o.ngBindHtml),a=t(o.ngBindHtml,function(e){return(e||"").toString()});return n.$$addBindingClass(r),function(t,r,o){n.$$addBindingInfo(r,o.ngBindHtml),t.$watch(a,function(){r.html(e.getTrustedHtml(i(t))||"")})}}}}],Oi=v({restrict:"A",require:"ngModel",link:function(e,t,n,r){r.$viewChangeListeners.push(function(){e.$eval(n.ngChange)})}}),Di=hr("",!0),Ii=hr("Odd",0),Ri=hr("Even",1),Pi=Qn({compile:function(e,t){t.$set("ngCloak",n),e.removeClass("ng-cloak")}}),ji=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],Li={},Fi={blur:!0,focus:!0};i("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(e){var t=lt("ng-"+e);Li[t]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(o,i){var a=n(i[t],null,!0);return function(t,n){n.on(e,function(n){var o=function(){a(t,{$event:n})};Fi[e]&&r.$$phase?t.$evalAsync(o):t.$apply(o)})}}}}]});var Vi=["$animate",function(e){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,o,i,a){var s,c,l;n.$watch(o.ngIf,function(n){n?c||a(function(n,i){c=i,n[n.length++]=t.createComment(" end ngIf: "+o.ngIf+" "),s={clone:n},e.enter(n,r.parent(),r)}):(l&&(l.remove(),l=null),c&&(c.$destroy(),c=null),s&&(l=he(s.clone),e.leave(l).then(function(){l=null}),s=null))})}}}],qi=["$templateRequest","$anchorScroll","$animate",function(e,t,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:Ir.noop,compile:function(r,o){var i=o.ngInclude||o.src,a=o.onload||"",s=o.autoscroll;return function(r,o,c,l,u){var d,m,f,p=0,h=function(){m&&(m.remove(),m=null),d&&(d.$destroy(),d=null),f&&(n.leave(f).then(function(){m=null}),m=f,f=null)};r.$watch(i,function(i){var c=function(){!E(s)||s&&!r.$eval(s)||t()},m=++p;i?(e(i,!0).then(function(e){if(m===p){var t=r.$new();l.template=e;var s=u(t,function(e){h(),n.enter(e,null,o).then(c)});d=t,f=s,d.$emit("$includeContentLoaded",i),r.$eval(a)}},function(){m===p&&(h(),r.$emit("$includeContentError",i))}),r.$emit("$includeContentRequested",i)):(h(),l.template=null)})}}}}],Bi=["$compile",function(e){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,o,i){return/SVG/.test(r[0].toString())?(r.empty(),void e(xe(i.template,t).childNodes)(n,function(e){r.append(e)},{futureParentElement:r})):(r.html(i.template),void e(r.contents())(n))}}}],Ui=Qn({priority:450,compile:function(){return{pre:function(e,t,n){e.$eval(n.ngInit)}}}}),zi=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(e,t,r,o){var a=t.attr(r.$attr.ngList)||", ",s="false"!==r.ngTrim,c=s?Fr(a):a,l=function(e){if(!b(e)){var t=[];return e&&i(e.split(c),function(e){e&&t.push(s?Fr(e):e)}),t}};o.$parsers.push(l),o.$formatters.push(function(e){return jr(e)?e.join(a):n}),o.$isEmpty=function(e){return!e||!e.length}}}},Wi="ng-valid",Ki="ng-invalid",Yi="ng-pristine",Gi="ng-dirty",Xi="ng-untouched",Zi="ng-touched",Ji="ng-pending",Qi=new r("ngModel"),ea=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(e,t,r,o,a,s,c,l,u,d){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=n,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=n,this.$name=d(r.name||"",!1)(e);var m,f=a(r.ngModel),p=f.assign,g=f,v=p,$=null,y=this;this.$$setOptions=function(e){if(y.$options=e,e&&e.getterSetter){var t=a(r.ngModel+"()"),n=a(r.ngModel+"($$$p)");g=function(e){var n=f(e);return x(n)&&(n=t(e)),n},v=function(e,t){x(f(e))?n(e,{$$$p:y.$modelValue}):p(e,y.$modelValue)}}else if(!f.assign)throw Qi("nonassign","Expression '{0}' is non-assignable. Element: {1}",r.ngModel,J(o))},this.$render=h,this.$isEmpty=function(e){return b(e)||""===e||null===e||e!==e};var M=o.inheritedData("$formController")||mi,w=0;gr({ctrl:this,$element:o,set:function(e,t){e[t]=!0},unset:function(e,t){delete e[t]},parentForm:M,$animate:s}),this.$setPristine=function(){y.$dirty=!1,y.$pristine=!0,s.removeClass(o,Gi),s.addClass(o,Yi)},this.$setDirty=function(){y.$dirty=!0,y.$pristine=!1,s.removeClass(o,Yi),s.addClass(o,Gi),M.$setDirty()},this.$setUntouched=function(){y.$touched=!1,y.$untouched=!0,s.setClass(o,Xi,Zi)},this.$setTouched=function(){y.$touched=!0,y.$untouched=!1,s.setClass(o,Zi,Xi)},this.$rollbackViewValue=function(){c.cancel($),y.$viewValue=y.$$lastCommittedViewValue,y.$render()},this.$validate=function(){if(!C(y.$modelValue)||!isNaN(y.$modelValue)){var e=y.$$lastCommittedViewValue,t=y.$$rawModelValue,r=y.$valid,o=y.$modelValue,i=y.$options&&y.$options.allowInvalid;y.$$runValidators(t,e,function(e){i||r===e||(y.$modelValue=e?t:n,y.$modelValue!==o&&y.$$writeModelToScope())})}},this.$$runValidators=function(e,t,r){function o(){var e=y.$$parserName||"parse";return m!==n?(m||(i(y.$validators,function(e,t){c(t,null)}),i(y.$asyncValidators,function(e,t){c(t,null)})),c(e,m),m):(c(e,null),!0)}function a(){var n=!0;return i(y.$validators,function(r,o){var i=r(e,t);n=n&&i,c(o,i)}),n?!0:(i(y.$asyncValidators,function(e,t){c(t,null)}),!1)}function s(){var r=[],o=!0;i(y.$asyncValidators,function(i,a){var s=i(e,t);if(!D(s))throw Qi("$asyncValidators","Expected asynchronous validator to return a promise but got '{0}' instead.",s);c(a,n),r.push(s.then(function(){c(a,!0)},function(e){o=!1,c(a,!1)}))}),r.length?u.all(r).then(function(){l(o)},h):l(!0)}function c(e,t){d===w&&y.$setValidity(e,t)}function l(e){d===w&&r(e)}w++;var d=w;return o()&&a()?void s():void l(!1)},this.$commitViewValue=function(){var e=y.$viewValue;c.cancel($),(y.$$lastCommittedViewValue!==e||""===e&&y.$$hasNativeValidators)&&(y.$$lastCommittedViewValue=e,y.$pristine&&this.$setDirty(),this.$$parseAndValidate())},this.$$parseAndValidate=function(){function t(){y.$modelValue!==a&&y.$$writeModelToScope()}var r=y.$$lastCommittedViewValue,o=r;if(m=b(o)?n:!0)for(var i=0;i<y.$parsers.length;i++)if(o=y.$parsers[i](o),b(o)){m=!1;break}C(y.$modelValue)&&isNaN(y.$modelValue)&&(y.$modelValue=g(e));var a=y.$modelValue,s=y.$options&&y.$options.allowInvalid;y.$$rawModelValue=o,s&&(y.$modelValue=o,t()),y.$$runValidators(o,y.$$lastCommittedViewValue,function(e){s||(y.$modelValue=e?o:n,t())})},this.$$writeModelToScope=function(){v(e,y.$modelValue),i(y.$viewChangeListeners,function(e){try{e()}catch(n){t(n)}})},this.$setViewValue=function(e,t){y.$viewValue=e,(!y.$options||y.$options.updateOnDefault)&&y.$$debounceViewValueCommit(t)},this.$$debounceViewValueCommit=function(t){var n,r=0,o=y.$options;o&&E(o.debounce)&&(n=o.debounce,C(n)?r=n:C(n[t])?r=n[t]:C(n["default"])&&(r=n["default"])),c.cancel($),r?$=c(function(){y.$commitViewValue()},r):l.$$phase?y.$commitViewValue():e.$apply(function(){y.$commitViewValue()})},e.$watch(function(){var t=g(e);if(t!==y.$modelValue&&(y.$modelValue===y.$modelValue||t===t)){y.$modelValue=y.$$rawModelValue=t,m=n;for(var r=y.$formatters,o=r.length,i=t;o--;)i=r[o](i);y.$viewValue!==i&&(y.$viewValue=y.$$lastCommittedViewValue=i,y.$render(),y.$$runValidators(t,i,h))}return t})}],ta=["$rootScope",function(e){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:ea,priority:1,compile:function(t){return t.addClass(Yi).addClass(Xi).addClass(Wi),{pre:function(e,t,n,r){var o=r[0],i=r[1]||mi;o.$$setOptions(r[2]&&r[2].$options),i.$addControl(o),n.$observe("name",function(e){o.$name!==e&&i.$$renameControl(o,e)}),e.$on("$destroy",function(){i.$removeControl(o)})},post:function(t,n,r,o){var i=o[0];i.$options&&i.$options.updateOn&&n.on(i.$options.updateOn,function(e){i.$$debounceViewValueCommit(e&&e.type)}),n.on("blur",function(n){i.$touched||(e.$$phase?t.$evalAsync(i.$setTouched):t.$apply(i.$setTouched))})}}}}}],na=/(\s+|^)default(\s+|$)/,ra=function(){return{restrict:"A",controller:["$scope","$attrs",function(e,t){var r=this;this.$options=F(e.$eval(t.ngModelOptions)),this.$options.updateOn!==n?(this.$options.updateOnDefault=!1,this.$options.updateOn=Fr(this.$options.updateOn.replace(na,function(){return r.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},oa=Qn({terminal:!0,priority:1e3}),ia=r("ngOptions"),aa=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,sa=["$compile","$parse",function(e,n){function r(e,t,r){function i(e,t,n,r,o){this.selectValue=e,this.viewValue=t,this.label=n,this.group=r,this.disabled=o}function a(e){var t;if(!l&&o(e))t=e;else{t=[];for(var n in e)e.hasOwnProperty(n)&&"$"!==n.charAt(0)&&t.push(n)}return t}var s=e.match(aa);if(!s)throw ia("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",e,J(t));var c=s[5]||s[7],l=s[6],u=/ as /.test(s[0])&&s[1],d=s[9],m=n(s[2]?s[1]:c),f=u&&n(u),p=f||m,h=d&&n(d),g=d?function(e,t){return h(r,t)}:function(e){return Ye(e)},v=function(e,t){return g(e,w(e,t))},$=n(s[2]||s[1]),b=n(s[3]||""),E=n(s[4]||""),y=n(s[8]),M={},w=l?function(e,t){return M[l]=t,M[c]=e,M}:function(e){return M[c]=e,M};return{trackBy:d,getTrackByValue:v,getWatchables:n(y,function(e){var t=[];e=e||[];for(var n=a(e),o=n.length,i=0;o>i;i++){var c=e===n?i:n[i],l=(e[c],w(e[c],c)),u=g(e[c],l);if(t.push(u),s[2]||s[1]){var d=$(r,l);t.push(d)}if(s[4]){var m=E(r,l);t.push(m)}}return t}),getOptions:function(){for(var e=[],t={},n=y(r)||[],o=a(n),s=o.length,c=0;s>c;c++){var l=n===o?c:o[c],u=n[l],m=w(u,l),f=p(r,m),h=g(f,m),M=$(r,m),C=b(r,m),A=E(r,m),x=new i(h,f,M,C,A);e.push(x),t[h]=x}return{items:e,selectValueMap:t,getOptionFromViewValue:function(e){return t[v(e)]},getViewValueFromOption:function(e){return d?Ir.copy(e.viewValue):e.viewValue}}}}}var a=t.createElement("option"),s=t.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","?ngModel"],link:function(t,n,o,c){function l(e,t){e.element=t,t.disabled=e.disabled,e.value!==t.value&&(t.value=e.selectValue),e.label!==t.label&&(t.label=e.label,t.textContent=e.label)}function u(e,t,n,r){var o;return t&&Er(t.nodeName)===n?o=t:(o=r.cloneNode(!1),t?e.insertBefore(o,t):e.appendChild(o)),o}function d(e){for(var t;e;)t=e.nextSibling,qe(e),e=t}function m(e){var t=h&&h[0],n=M&&M[0];if(t||n)for(;e&&(e===t||e===n);)e=e.nextSibling;return e}function f(){var e=w&&g.readValue();w=C.getOptions();var t={},r=n[0].firstChild;if(y&&n.prepend(h),r=m(r),w.items.forEach(function(e){var o,i,c;e.group?(o=t[e.group],o||(i=u(n[0],r,"optgroup",s),r=i.nextSibling,i.label=e.group,o=t[e.group]={groupElement:i,currentOptionElement:i.firstChild}),c=u(o.groupElement,o.currentOptionElement,"option",a),l(e,c),o.currentOptionElement=c.nextSibling):(c=u(n[0],r,"option",a),l(e,c),r=c.nextSibling)}),Object.keys(t).forEach(function(e){d(t[e].currentOptionElement)}),d(r),p.$render(),!p.$isEmpty(e)){var o=g.readValue();(C.trackBy?q(e,o):e===o)||(p.$setViewValue(o),p.$render())}}var p=c[1];if(p){for(var h,g=c[0],v=o.multiple,$=0,b=n.children(),E=b.length;E>$;$++)if(""===b[$].value){h=b.eq($);break}var y=!!h,M=xr(a.cloneNode(!1));M.val("?");var w,C=r(o.ngOptions,n,t),A=function(){y||n.prepend(h),n.val(""),h.prop("selected",!0),h.attr("selected",!0)},x=function(){y||h.remove()},T=function(){n.prepend(M),n.val("?"),M.prop("selected",!0),M.attr("selected",!0)},k=function(){M.remove()};v?(p.$isEmpty=function(e){return!e||0===e.length},g.writeValue=function(e){w.items.forEach(function(e){e.element.selected=!1}),e&&e.forEach(function(e){var t=w.getOptionFromViewValue(e);t&&!t.disabled&&(t.element.selected=!0)})},g.readValue=function(){var e=n.val()||[],t=[];return i(e,function(e){var n=w.selectValueMap[e];n.disabled||t.push(w.getViewValueFromOption(n))}),t},C.trackBy&&t.$watchCollection(function(){return jr(p.$viewValue)?p.$viewValue.map(function(e){return C.getTrackByValue(e)}):void 0},function(){p.$render()})):(g.writeValue=function(e){var t=w.getOptionFromViewValue(e);t&&!t.disabled?n[0].value!==t.selectValue&&(k(),x(),n[0].value=t.selectValue,t.element.selected=!0,t.element.setAttribute("selected","selected")):null===e||y?(k(),A()):(x(),T())},g.readValue=function(){var e=w.selectValueMap[n.val()];return e&&!e.disabled?(x(),k(),w.getViewValueFromOption(e)):null},C.trackBy&&t.$watch(function(){return C.getTrackByValue(p.$viewValue)},function(){p.$render()})),y?(h.remove(),e(h)(t),h.removeClass("ng-scope")):h=xr(a.cloneNode(!1)),f(),t.$watchCollection(C.getWatchables,f)}}}}],ca=["$locale","$interpolate","$log",function(e,t,n){var r=/{}/g,o=/^when(Minus)?(.+)$/;return{link:function(a,s,c){function l(e){s.text(e||"")}var u,d=c.count,m=c.$attr.when&&s.attr(c.$attr.when),f=c.offset||0,p=a.$eval(m)||{},g={},v=t.startSymbol(),$=t.endSymbol(),E=v+d+"-"+f+$,y=Ir.noop;i(c,function(e,t){var n=o.exec(t);if(n){var r=(n[1]?"-":"")+Er(n[2]);p[r]=s.attr(c.$attr[t])}}),i(p,function(e,n){g[n]=t(e.replace(r,E))}),a.$watch(d,function(t){var r=parseFloat(t),o=isNaN(r);if(o||r in p||(r=e.pluralCat(r-f)),r!==u&&!(o&&C(u)&&isNaN(u))){y();var i=g[r];b(i)?(null!=t&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+m),y=h,l()):y=a.$watch(i,l),u=r}})}}}],la=["$parse","$animate",function(e,a){var s="$$NG_REMOVED",c=r("ngRepeat"),l=function(e,t,n,r,o,i,a){e[n]=r,o&&(e[o]=i),e.$index=t,e.$first=0===t,e.$last=t===a-1,e.$middle=!(e.$first||e.$last),e.$odd=!(e.$even=0===(1&t))},u=function(e){return e.clone[0]},d=function(e){return e.clone[e.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(r,m){var f=m.ngRepeat,p=t.createComment(" end ngRepeat: "+f+" "),h=f.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!h)throw c("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",f);var g=h[1],v=h[2],$=h[3],b=h[4];if(h=g.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/),!h)throw c("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",g);var E=h[3]||h[1],y=h[2];if($&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test($)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test($)))throw c("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",$);var M,w,C,A,x={$id:Ye};return b?M=e(b):(C=function(e,t){return Ye(t)},A=function(e){return e}),function(e,t,r,m,h){M&&(w=function(t,n,r){return y&&(x[y]=t),x[E]=n,x.$index=r,M(e,x)});var g=ge();e.$watchCollection(v,function(r){var m,v,b,M,x,T,k,S,N,_,H,O,D=t[0],I=ge();if($&&(e[$]=r),o(r))N=r,S=w||C;else{S=w||A,N=[];for(var R in r)r.hasOwnProperty(R)&&"$"!==R.charAt(0)&&N.push(R)}for(M=N.length,H=new Array(M),m=0;M>m;m++)if(x=r===N?m:N[m],T=r[x],k=S(x,T,m),g[k])_=g[k],delete g[k],I[k]=_,H[m]=_;else{if(I[k])throw i(H,function(e){e&&e.scope&&(g[e.id]=e)}),c("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",f,k,T);H[m]={id:k,scope:n,clone:n},I[k]=!0}for(var P in g){if(_=g[P],O=he(_.clone),a.leave(O),O[0].parentNode)for(m=0,v=O.length;v>m;m++)O[m][s]=!0;_.scope.$destroy()}for(m=0;M>m;m++)if(x=r===N?m:N[m],T=r[x],_=H[m],_.scope){b=D;do b=b.nextSibling;while(b&&b[s]);u(_)!=b&&a.move(he(_.clone),null,xr(D)),D=d(_),l(_.scope,m,E,T,y,x,M)}else h(function(e,t){_.scope=t;var n=p.cloneNode(!1);e[e.length++]=n,a.enter(e,null,xr(D)),D=n,_.clone=e,I[_.id]=_,l(_.scope,m,E,T,y,x,M)});g=I})}}}}],ua="ng-hide",da="ng-hide-animate",ma=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngShow,function(t){e[t?"removeClass":"addClass"](n,ua,{tempClasses:da})})}}}],fa=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngHide,function(t){e[t?"addClass":"removeClass"](n,ua,{tempClasses:da})})}}}],pa=Qn(function(e,t,n){e.$watch(n.ngStyle,function(e,n){n&&e!==n&&i(n,function(e,n){t.css(n,"")}),e&&t.css(e)},!0)}),ha=["$animate",function(e){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,r,o,a){var s=o.ngSwitch||o.on,c=[],l=[],u=[],d=[],m=function(e,t){return function(){e.splice(t,1)}};n.$watch(s,function(n){var r,o;for(r=0,o=u.length;o>r;++r)e.cancel(u[r]);for(u.length=0,r=0,o=d.length;o>r;++r){var s=he(l[r].clone);d[r].$destroy();var f=u[r]=e.leave(s);f.then(m(u,r))}l.length=0,d.length=0,(c=a.cases["!"+n]||a.cases["?"])&&i(c,function(n){n.transclude(function(r,o){d.push(o);var i=n.element;r[r.length++]=t.createComment(" end ngSwitchWhen: ");var a={clone:r};l.push(a),e.enter(r,i.parent(),i)})})})}}}],ga=Qn({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,o){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:o,element:t})}}),va=Qn({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,o){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:o,element:t})}}),$a=Qn({restrict:"EAC",link:function(e,t,n,o,i){if(!i)throw r("ngTransclude")("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",J(t));i(function(e){t.empty(),t.append(e)})}}),ba=["$templateCache",function(e){return{restrict:"E",terminal:!0,compile:function(t,n){if("text/ng-template"==n.type){var r=n.id,o=t[0].text;e.put(r,o)}}}}],Ea={$setViewValue:h,$render:h},ya=["$element","$scope","$attrs",function(e,r,o){var i=this,a=new Ge;i.ngModelCtrl=Ea,i.unknownOption=xr(t.createElement("option")),i.renderUnknownOption=function(t){var n="? "+Ye(t)+" ?";i.unknownOption.val(n),e.prepend(i.unknownOption),e.val(n)},r.$on("$destroy",function(){i.renderUnknownOption=h}),i.removeUnknownOption=function(){i.unknownOption.parent()&&i.unknownOption.remove()},i.readValue=function(){return i.removeUnknownOption(),e.val()},i.writeValue=function(t){i.hasOption(t)?(i.removeUnknownOption(),e.val(t),""===t&&i.emptyOption.prop("selected",!0)):null==t&&i.emptyOption?(i.removeUnknownOption(),e.val("")):i.renderUnknownOption(t)},i.addOption=function(e,t){fe(e,'"option value"'),""===e&&(i.emptyOption=t);var n=a.get(e)||0;a.put(e,n+1)},i.removeOption=function(e){var t=a.get(e);t&&(1===t?(a.remove(e),""===e&&(i.emptyOption=n)):a.put(e,t-1))},i.hasOption=function(e){return!!a.get(e)}}],Ma=function(){return{restrict:"E",require:["select","?ngModel"],controller:ya,link:function(e,t,n,r){var o=r[1];if(o){var a=r[0];if(a.ngModelCtrl=o,o.$render=function(){a.writeValue(o.$viewValue)},t.on("change",function(){e.$apply(function(){o.$setViewValue(a.readValue())})}),n.multiple){a.readValue=function(){var e=[];return i(t.find("option"),function(t){t.selected&&e.push(t.value)}),e},a.writeValue=function(e){var n=new Ge(e);i(t.find("option"),function(e){e.selected=E(n.get(e.value))})};var s,c=0/0;e.$watch(function(){c!==o.$viewValue||q(s,o.$viewValue)||(s=V(o.$viewValue),o.$render()),c=o.$viewValue}),o.$isEmpty=function(e){return!e||0===e.length}}}}}},wa=["$interpolate",function(e){function t(e){e[0].hasAttribute("selected")&&(e[0].selected=!0)}return{restrict:"E",priority:100,compile:function(n,r){if(b(r.value)){var o=e(n.text(),!0);o||r.$set("value",n.text())}return function(e,n,r){var i="$selectController",a=n.parent(),s=a.data(i)||a.parent().data(i);s&&s.ngModelCtrl&&(o?e.$watch(o,function(e,o){r.$set("value",e),o!==e&&s.removeOption(o),s.addOption(e,n),s.ngModelCtrl.$render(),t(n)}):(s.addOption(r.value,n),s.ngModelCtrl.$render(),t(n)),n.on("$destroy",function(){s.removeOption(r.value),s.ngModelCtrl.$render()}))}}}}],Ca=v({restrict:"E",terminal:!1}),Aa=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){r&&(n.required=!0,r.$validators.required=function(e,t){return!n.required||!r.$isEmpty(t)},n.$observe("required",function(){r.$validate()}))}}},xa=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,o,i){if(i){var a,s=o.ngPattern||o.pattern;o.$observe("pattern",function(e){if(w(e)&&e.length>0&&(e=new RegExp("^"+e+"$")),e&&!e.test)throw r("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",s,e,J(t));a=e||n,i.$validate()}),i.$validators.pattern=function(e){return i.$isEmpty(e)||b(a)||a.test(e)}}}}},Ta=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var o=-1;n.$observe("maxlength",function(e){var t=f(e);o=isNaN(t)?-1:t,r.$validate()}),r.$validators.maxlength=function(e,t){return 0>o||r.$isEmpty(t)||t.length<=o}}}}},ka=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var o=0;n.$observe("minlength",function(e){o=f(e)||0,r.$validate()}),r.$validators.minlength=function(e,t){return r.$isEmpty(t)||t.length>=o}}}}};return e.angular.bootstrap?void console.log("WARNING: Tried to load angular more than once."):(ue(),Ee(Ir),void xr(t).ready(function(){ie(t,ae)}))}(window,document),!window.angular.$$csp()&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>')},{}],14:[function(e,t,n){e("./angular"),t.exports=angular},{"./angular":13}]},{},[4]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJidWlsZC9jb250cm9sbGVycy9Vc2VyQ29udHJvbGxlci5qcyIsIm1haW4uanMiLCJidWlsZC9jb250cm9sbGVycy9pbmRleC5qcyIsImJ1aWxkL2RpcmVjdGl2ZXMvaW5kZXguanMiLCJidWlsZC9tYWluLmpzIiwiYnVpbGQvc2VydmljZXMvVXNlclNlcnZpY2UuanMiLCJidWlsZC9zZXJ2aWNlcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyLWFuaW1hdGUvYW5ndWxhci1hbmltYXRlLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXItYW5pbWF0ZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyLWFyaWEvYW5ndWxhci1hcmlhLmpzIiwibm9kZV9tb2R1bGVzL2FuZ3VsYXItYXJpYS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyLW1hdGVyaWFsL2FuZ3VsYXItbWF0ZXJpYWwuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhci1tYXRlcmlhbC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9hbmd1bGFyL2FuZ3VsYXIuanMiLCJub2RlX21vZHVsZXMvYW5ndWxhci9pbmRleC5qcyJdLCJuYW1lcyI6WyJlIiwidCIsIm4iLCJyIiwicyIsIm8iLCJ1IiwiYSIsInJlcXVpcmUiLCJpIiwiZiIsIkVycm9yIiwiY29kZSIsImwiLCJleHBvcnRzIiwiY2FsbCIsImxlbmd0aCIsMSwibW9kdWxlIiwiVXNlckNvbnRyb2xsZXIiLCIkc2NvcGUiLCJ1c2VyU2VydmljZSIsIiRtZFNpZGVuYXYiLCIkbWRCb3R0b21TaGVldCIsIiRsb2ciLCIkcSIsInRvZ2dsZVVzZXJzTGlzdCIsInBlbmRpbmciLCJib3R0b21TaGVldFByb21pc2UiLCJ3aGVuIiwidGhlbiIsInRvZ2dsZSIsImhpZGUiLCJzZWxlY3RVc2VyIiwidXNlciIsInNlbGVjdGVkIiwidG9nZ2xlTGlzdCIsInNob3dDb250YWN0T3B0aW9ucyIsIiRldmVudCIsIkNvbnRhY3RQYW5lbENvbnRyb2xsZXIiLCJ0aGlzIiwiYWN0aW9ucyIsIm5hbWUiLCJpY29uIiwiaWNvbl91cmwiLCJzdWJtaXRDb250YWN0IiwiYWN0aW9uIiwic2hvdyIsInBhcmVudCIsImFuZ3VsYXIiLCJlbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsImJpbmRUb0NvbnRyb2xsZXIiLCJ0YXJnZXRFdmVudCIsImNsaWNrZWRJdGVtIiwiZGVidWciLCIkaW5qZWN0IiwidXNlcnMiLCJpc1NpZGVuYXZPcGVuIiwiaXNPcGVuIiwibG9hZEFsbFVzZXJzIiwiY29uY2F0IiwiYW5ndWxhci1tYXRlcmlhbCIsMiwiYXBwIiwiVUMiLCIuL1VzZXJDb250cm9sbGVyIiwzLDQsImJvb3RzdHJhcCIsIi4vY29udHJvbGxlcnMiLCIuL2RpcmVjdGl2ZXMiLCIuL3NlcnZpY2VzIiwiYW5ndWxhci1hbmltYXRlIiwiYW5ndWxhci1hcmlhIiw1LCJVc2VyU2VydmljZUZhY3RvcnkiLCJhdmF0YXIiLCJjb250ZW50Iiw2LCJjb25maWciLCIkbWRUaGVtaW5nUHJvdmlkZXIiLCIkbWRJY29uUHJvdmlkZXIiLCJkZWZhdWx0SWNvblNldCIsInRoZW1lIiwicHJpbWFyeVBhbGV0dGUiLCJhY2NlbnRQYWxldHRlIiwiVVMiLCJzZXJ2aWNlIiwiLi9Vc2VyU2VydmljZSIsNywid2luZG93IiwidW5kZWZpbmVkIiwiYXNzZXJ0QXJnIiwiYXJnIiwicmVhc29uIiwibmdNaW5FcnIiLCJtZXJnZUNsYXNzZXMiLCJiIiwiaXNBcnJheSIsImpvaW4iLCJwYWNrYWdlU3R5bGVzIiwib3B0aW9ucyIsInN0eWxlcyIsInRvIiwiZnJvbSIsInBlbmRDbGFzc2VzIiwiY2xhc3NlcyIsImZpeCIsImlzUHJlZml4IiwiY2xhc3NOYW1lIiwiaXNTdHJpbmciLCJzcGxpdCIsImZvckVhY2giLCJrbGFzcyIsInJlbW92ZUZyb21BcnJheSIsImFyciIsInZhbCIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsInN0cmlwQ29tbWVudHNGcm9tRWxlbWVudCIsImpxTGl0ZSIsIm5vZGVUeXBlIiwiRUxFTUVOVF9OT0RFIiwiZXh0cmFjdEVsZW1lbnROb2RlIiwiZWxtIiwiJCRhZGRDbGFzcyIsIiQkanFMaXRlIiwiYWRkQ2xhc3MiLCIkJHJlbW92ZUNsYXNzIiwicmVtb3ZlQ2xhc3MiLCJhcHBseUFuaW1hdGlvbkNsYXNzZXNGYWN0b3J5IiwicHJlcGFyZUFuaW1hdGlvbk9wdGlvbnMiLCIkJHByZXBhcmVkIiwiZG9tT3BlcmF0aW9uIiwibm9vcCIsIiQkZG9tT3BlcmF0aW9uRmlyZWQiLCJhcHBseUFuaW1hdGlvblN0eWxlcyIsImFwcGx5QW5pbWF0aW9uRnJvbVN0eWxlcyIsImFwcGx5QW5pbWF0aW9uVG9TdHlsZXMiLCJjc3MiLCJtZXJnZUFuaW1hdGlvbk9wdGlvbnMiLCJ0YXJnZXQiLCJuZXdPcHRpb25zIiwidG9BZGQiLCJ0b1JlbW92ZSIsInJlc29sdmVFbGVtZW50Q2xhc3NlcyIsImF0dHIiLCJleHRlbmQiLCJleGlzdGluZyIsInNwbGl0Q2xhc3Nlc1RvTG9va3VwIiwib2JqIiwiQUREX0NMQVNTIiwiUkVNT1ZFX0NMQVNTIiwiZmxhZ3MiLCJ2YWx1ZSIsImtleSIsInByb3AiLCJhbGxvdyIsImdldERvbU5vZGUiLCJjb21wdXRlQ3NzU3R5bGVzIiwiJHdpbmRvdyIsInByb3BlcnRpZXMiLCJPYmplY3QiLCJjcmVhdGUiLCJkZXRlY3RlZFN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJmb3JtYWxTdHlsZU5hbWUiLCJhY3R1YWxTdHlsZU5hbWUiLCJjIiwiY2hhckF0IiwicGFyc2VNYXhUaW1lIiwic3RyIiwibWF4VmFsdWUiLCJ2YWx1ZXMiLCJzdWJzdHJpbmciLCJwYXJzZUZsb2F0IiwiTWF0aCIsIm1heCIsInRydXRoeVRpbWluZ1ZhbHVlIiwiZ2V0Q3NzVHJhbnNpdGlvbkR1cmF0aW9uU3R5bGUiLCJkdXJhdGlvbiIsImFwcGx5T25seUR1cmF0aW9uIiwic3R5bGUiLCJUUkFOU0lUSU9OX1BST1AiLCJEVVJBVElPTl9LRVkiLCJnZXRDc3NLZXlmcmFtZUR1cmF0aW9uU3R5bGUiLCJBTklNQVRJT05fRFVSQVRJT05fUFJPUCIsImdldENzc0RlbGF5U3R5bGUiLCJkZWxheSIsImlzS2V5ZnJhbWVBbmltYXRpb24iLCJBTklNQVRJT05fREVMQVlfUFJPUCIsIlRSQU5TSVRJT05fREVMQVlfUFJPUCIsImJsb2NrVHJhbnNpdGlvbnMiLCJub2RlIiwiYXBwbHlJbmxpbmVTdHlsZSIsImJsb2NrS2V5ZnJhbWVBbmltYXRpb25zIiwiYXBwbHlCbG9jayIsIkFOSU1BVElPTl9QUk9QIiwiQU5JTUFUSU9OX1BMQVlTVEFURV9LRVkiLCJzdHlsZVR1cGxlIiwiY3JlYXRlTG9jYWxDYWNoZUxvb2t1cCIsImNhY2hlIiwiZmx1c2giLCJjb3VudCIsImVudHJ5IiwidG90YWwiLCJnZXQiLCJwdXQiLCJUUkFOU0lUSU9ORU5EX0VWRU5UIiwiQU5JTUFUSU9ORU5EX0VWRU5UIiwiaXNPYmplY3QiLCJpc1VuZGVmaW5lZCIsImlzRGVmaW5lZCIsImlzRnVuY3Rpb24iLCJpc0VsZW1lbnQiLCJOR19BTklNQVRFX0NMQVNTTkFNRSIsIk5HX0FOSU1BVEVfQ0hJTERSRU5fREFUQSIsIiQkckFGU2NoZWR1bGVyRmFjdG9yeSIsIiQkckFGIiwic2NoZWR1bGVyIiwidGFza3MiLCJ0aWNrUXVldWUiLCJwdXNoIiwibmV4dFRpY2siLCJ1cGRhdGVkUXVldWUiLCJpbm5lclF1ZXVlIiwicnVuTmV4dFRhc2siLCJjYW5jZWxGbiIsIm5leHRUYXNrIiwic2hpZnQiLCJ3YWl0VW50aWxRdWlldCIsImZuIiwiJCRBbmltYXRlQ2hpbGRyZW5EaXJlY3RpdmUiLCJzY29wZSIsImF0dHJzIiwibmdBbmltYXRlQ2hpbGRyZW4iLCJkYXRhIiwiJG9ic2VydmUiLCJDU1NfUFJFRklYIiwib250cmFuc2l0aW9uZW5kIiwib253ZWJraXR0cmFuc2l0aW9uZW5kIiwib25hbmltYXRpb25lbmQiLCJvbndlYmtpdGFuaW1hdGlvbmVuZCIsIlBST1BFUlRZX0tFWSIsIkRFTEFZX0tFWSIsIlRJTUlOR19LRVkiLCJBTklNQVRJT05fSVRFUkFUSU9OX0NPVU5UX0tFWSIsIkVMQVBTRURfVElNRV9NQVhfREVDSU1BTF9QTEFDRVMiLCJDTE9TSU5HX1RJTUVfQlVGRkVSIiwiT05FX1NFQ09ORCIsIlNBRkVfRkFTVF9GT1JXQVJEX0RVUkFUSU9OX1ZBTFVFIiwiVFJBTlNJVElPTl9EVVJBVElPTl9QUk9QIiwiREVURUNUX0NTU19QUk9QRVJUSUVTIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvbkRlbGF5IiwidHJhbnNpdGlvblByb3BlcnR5IiwiYW5pbWF0aW9uRHVyYXRpb24iLCJhbmltYXRpb25EZWxheSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiREVURUNUX1NUQUdHRVJfQ1NTX1BST1BFUlRJRVMiLCIkQW5pbWF0ZUNzc1Byb3ZpZGVyIiwiJGFuaW1hdGVQcm92aWRlciIsImdjc0xvb2t1cCIsImdjc1N0YWdnZXJMb29rdXAiLCIkZ2V0IiwiJCRBbmltYXRlUnVubmVyIiwiJHRpbWVvdXQiLCIkZG9jdW1lbnQiLCIkc25pZmZlciIsIiQkckFGU2NoZWR1bGVyIiwiZ2NzSGFzaEZuIiwiZXh0cmFDbGFzc2VzIiwiS0VZIiwicGFyZW50Tm9kZSIsInBhcmVudElEIiwicGFyZW50Q291bnRlciIsImdldEF0dHJpYnV0ZSIsImNvbXB1dGVDYWNoZWRDc3NTdHlsZXMiLCJjYWNoZUtleSIsInRpbWluZ3MiLCJjb21wdXRlQ2FjaGVkQ3NzU3RhZ2dlclN0eWxlcyIsInN0YWdnZXIiLCJzdGFnZ2VyQ2xhc3NOYW1lIiwiY2FsbGJhY2siLCJyYWZXYWl0UXVldWUiLCJ3aWR0aCIsImJvZCIsIm9mZnNldFdpZHRoIiwiY29tcHV0ZVRpbWluZ3MiLCJhRCIsInREIiwibWF4RGVsYXkiLCJtYXhEdXJhdGlvbiIsImluaXQiLCJlbmRGbiIsImNsb3NlIiwicmVqZWN0ZWQiLCJhbmltYXRpb25DbG9zZWQiLCJhbmltYXRpb25Db21wbGV0ZWQiLCJhbmltYXRpb25QYXVzZWQiLCJzZXR1cENsYXNzZXMiLCJhY3RpdmVDbGFzc2VzIiwidGVtcG9yYXJ5U3R5bGVzIiwiYXBwbHlBbmltYXRpb25DbGFzc2VzIiwib25Eb25lIiwicnVubmVyIiwiY29tcGxldGUiLCJhcHBseUJsb2NraW5nIiwiYmxvY2tUcmFuc2l0aW9uIiwiYmxvY2tLZXlmcmFtZUFuaW1hdGlvbiIsImNsb3NlQW5kUmV0dXJuTm9vcEFuaW1hdG9yIiwiZW5kIiwiY2FuY2VsIiwiJCR3aWxsQW5pbWF0ZSIsInN0YXJ0IiwidHJpZ2dlckFuaW1hdGlvblN0YXJ0IiwicmVjYWxjdWxhdGVUaW1pbmdTdHlsZXMiLCJmdWxsQ2xhc3NOYW1lIiwicmVsYXRpdmVEZWxheSIsImhhc1RyYW5zaXRpb25zIiwiaGFzQW5pbWF0aW9ucyIsImFwcGx5VHJhbnNpdGlvbkRlbGF5IiwiYXBwbHlBbmltYXRpb25EZWxheSIsImRlbGF5U3R5bGUiLCJtYXhEZWxheVRpbWUiLCJtYXhEdXJhdGlvblRpbWUiLCJlYXNpbmciLCJlYXNlUHJvcCIsImVhc2VWYWwiLCJldmVudHMiLCJzdGFydFRpbWUiLCJEYXRlIiwibm93Iiwib24iLCJvbkFuaW1hdGlvblByb2dyZXNzIiwib25BbmltYXRpb25FeHBpcmVkIiwiZXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJldiIsIm9yaWdpbmFsRXZlbnQiLCJ0aW1lU3RhbXAiLCIkbWFudWFsVGltZVN0YW1wIiwiZWxhcHNlZFRpbWUiLCJ0b0ZpeGVkIiwicGxheVBhdXNlIiwicGxheUFuaW1hdGlvbiIsIm1heFN0YWdnZXIiLCJpdGVtSW5kZXgiLCJmbG9vciIsInJ1bm5lckhvc3QiLCJyZXN1bWUiLCJwYXVzZSIsImFuaW1hdGlvbnMiLCJ0cmFuc2l0aW9ucyIsIm1ldGhvZCIsImlzU3RydWN0dXJhbCIsInN0cnVjdHVyYWwiLCJzdHJ1Y3R1cmFsQ2xhc3NOYW1lIiwiYWRkUmVtb3ZlQ2xhc3NOYW1lIiwiYXBwbHlDbGFzc2VzRWFybHkiLCJ0cmltIiwiaGFzVG9TdHlsZXMiLCJrZXlzIiwiY29udGFpbnNLZXlmcmFtZUFuaW1hdGlvbiIsImtleWZyYW1lU3R5bGUiLCJzdGFnZ2VyVmFsIiwidHJhbnNpdGlvblN0eWxlIiwiZHVyYXRpb25TdHlsZSIsInN0YWdnZXJJbmRleCIsImlzRmlyc3QiLCJoYXNUcmFuc2l0aW9uQWxsIiwiYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24iLCJhcHBseUFuaW1hdGlvbkR1cmF0aW9uIiwic2tpcEJsb2NraW5nIiwiYm9keSIsIiQkQW5pbWF0ZUNzc0RyaXZlclByb3ZpZGVyIiwiJCRhbmltYXRpb25Qcm92aWRlciIsImRyaXZlcnMiLCJOR19BTklNQVRFX1NISU1fQ0xBU1NfTkFNRSIsIk5HX0FOSU1BVEVfQU5DSE9SX0NMQVNTX05BTUUiLCJOR19PVVRfQU5DSE9SX0NMQVNTX05BTUUiLCJOR19JTl9BTkNIT1JfQ0xBU1NfTkFNRSIsIiRhbmltYXRlQ3NzIiwiJHJvb3RTY29wZSIsIiRyb290RWxlbWVudCIsImZpbHRlckNzc0NsYXNzZXMiLCJyZXBsYWNlIiwiZ2V0VW5pcXVlVmFsdWVzIiwiZmlsdGVyIiwicHJlcGFyZUFuY2hvcmVkQW5pbWF0aW9uIiwib3V0QW5jaG9yIiwiaW5BbmNob3IiLCJjYWxjdWxhdGVBbmNob3JTdHlsZXMiLCJhbmNob3IiLCJjb29yZHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJib2R5Tm9kZSIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJwcmVwYXJlT3V0QW5pbWF0aW9uIiwiYW5pbWF0b3IiLCJjbG9uZSIsImdldENsYXNzVmFsIiwicHJlcGFyZUluQW5pbWF0aW9uIiwiZW5kaW5nQ2xhc3NlcyIsInN0YXJ0aW5nQ2xhc3NlcyIsInJlbW92ZSIsImNsb25lTm9kZSIsInJvb3RCb2R5RWxlbWVudCIsImFwcGVuZCIsImFuaW1hdG9ySW4iLCJhbmltYXRvck91dCIsInN0YXJ0aW5nQW5pbWF0b3IiLCJjdXJyZW50QW5pbWF0aW9uIiwiZG9uZSIsInByZXBhcmVGcm9tVG9BbmNob3JBbmltYXRpb24iLCJhbmNob3JzIiwiZnJvbUFuaW1hdGlvbiIsInByZXBhcmVSZWd1bGFyQW5pbWF0aW9uIiwidG9BbmltYXRpb24iLCJhbmNob3JBbmltYXRpb25zIiwib3V0RWxlbWVudCIsImluRWxlbWVudCIsImFuaW1hdGlvblJ1bm5lcnMiLCJhbmltYXRpb24iLCJhbGwiLCJzdGF0dXMiLCJhbmltYXRpb25EZXRhaWxzIiwicm9vdE5vZGUiLCIkJEFuaW1hdGVKc1Byb3ZpZGVyIiwiJGluamVjdG9yIiwiJCRyQUZNdXRleCIsImxvb2t1cEFuaW1hdGlvbnMiLCJtYXRjaGVzIiwiZmxhZ01hcCIsImFuaW1hdGlvbkZhY3RvcnkiLCIkJHJlZ2lzdGVyZWRBbmltYXRpb25zIiwiYXBwbHlPcHRpb25zIiwiZXhlY3V0ZUFuaW1hdGlvbkZuIiwiYXJncyIsImNsYXNzZXNUb0FkZCIsImNsYXNzZXNUb1JlbW92ZSIsImFwcGx5IiwiZ3JvdXBFdmVudGVkQW5pbWF0aW9ucyIsImZuTmFtZSIsIm9wZXJhdGlvbnMiLCJhbmkiLCJlbmRQcm9ncmVzc0NiIiwicmVzb2x2ZWQiLCJvbkFuaW1hdGlvbkNvbXBsZXRlIiwicmVzdWx0IiwiY2FuY2VsbGVkIiwicGFja2FnZUFuaW1hdGlvbnMiLCJydW5uZXJzIiwiYW5pbWF0ZUZuIiwicmVqZWN0IiwiYXJndW1lbnRzIiwiYmVmb3JlIiwiYWZ0ZXIiLCJhZnRlckZuIiwiYmVmb3JlRm4iLCJ0b1VwcGVyQ2FzZSIsInN1YnN0ciIsIm9uQ29tcGxldGUiLCJzdWNjZXNzIiwiZW5kQW5pbWF0aW9ucyIsImNsb3NlQWN0aXZlQW5pbWF0aW9ucyIsImNoYWluIiwiJCRBbmltYXRlSnNEcml2ZXJQcm92aWRlciIsIiQkYW5pbWF0ZUpzIiwicHJlcGFyZUFuaW1hdGlvbiIsImVuZEZuRmFjdG9yeSIsIk5HX0FOSU1BVEVfQVRUUl9OQU1FIiwiTkdfQU5JTUFURV9QSU5fREFUQSIsIiQkQW5pbWF0ZVF1ZXVlUHJvdmlkZXIiLCJpc0FsbG93ZWQiLCJydWxlVHlwZSIsInByZXZpb3VzQW5pbWF0aW9uIiwicnVsZXMiLCJzb21lIiwiaGFzQW5pbWF0aW9uQ2xhc3NlcyIsImFuZCIsIlBSRV9ESUdFU1RfU1RBVEUiLCJSVU5OSU5HX1NUQVRFIiwic2tpcCIsIm5ld0FuaW1hdGlvbiIsInN0YXRlIiwibk8iLCJjTyIsIiQkSGFzaE1hcCIsIiQkYW5pbWF0aW9uIiwiJHRlbXBsYXRlUmVxdWVzdCIsIm5vcm1hbGl6ZUFuaW1hdGlvbk9wdGlvbnMiLCJmaW5kQ2FsbGJhY2tzIiwidGFyZ2V0Tm9kZSIsImVudHJpZXMiLCJjYWxsYmFja1JlZ2lzdHJ5IiwiY29udGFpbnMiLCJ0cmlnZ2VyQ2FsbGJhY2siLCJwaGFzZSIsInF1ZXVlQW5pbWF0aW9uIiwibm90aWZ5UHJvZ3Jlc3MiLCJwcm9ncmVzcyIsImlzQW5pbWF0YWJsZUNsYXNzTmFtZSIsInNraXBBbmltYXRpb25zIiwiYW5pbWF0aW9uc0VuYWJsZWQiLCJkaXNhYmxlZEVsZW1lbnRzTG9va3VwIiwiZXhpc3RpbmdBbmltYXRpb24iLCJhY3RpdmVBbmltYXRpb25zTG9va3VwIiwiaGFzRXhpc3RpbmdBbmltYXRpb24iLCJhcmVBbmltYXRpb25zQWxsb3dlZCIsImNsb3NlQ2hpbGRBbmltYXRpb25zIiwic2tpcEFuaW1hdGlvbkZsYWciLCJjYW5jZWxBbmltYXRpb25GbGFnIiwiam9pbkFuaW1hdGlvbkZsYWciLCJpc1ZhbGlkQW5pbWF0aW9uIiwiY2xlYXJFbGVtZW50QW5pbWF0aW9uU3RhdGUiLCJjbG9zZVBhcmVudENsYXNzQmFzZWRBbmltYXRpb25zIiwiY291bnRlciIsIm1hcmtFbGVtZW50QW5pbWF0aW9uU3RhdGUiLCIkJHBvc3REaWdlc3QiLCJhbmltYXRpb25DYW5jZWxsZWQiLCJwYXJlbnRFbGVtZW50IiwicmVhbFJ1bm5lciIsInNldEhvc3QiLCJjaGlsZHJlbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjaGlsZCIsInBhcnNlSW50IiwicmVtb3ZlQXR0cmlidXRlIiwiaXNNYXRjaGluZ0VsZW1lbnQiLCJub2RlT3JFbG1BIiwibm9kZU9yRWxtQiIsInN0YXJ0aW5nRWxlbWVudCIsImV4YW1pbmVQYXJlbnRBbmltYXRpb24iLCJhbmltYXRlQ2hpbGRyZW4iLCJib2R5RWxlbWVudERldGVjdGVkIiwicm9vdEVsZW1lbnREZXRlY3RlZCIsInBhcmVudEFuaW1hdGlvbkRldGVjdGVkIiwicGFyZW50SG9zdCIsImRldGFpbHMiLCJib2R5RWxlbWVudCIsImFsbG93QW5pbWF0aW9uIiwic2V0QXR0cmlidXRlIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsImRlcmVnaXN0ZXJXYXRjaCIsIiR3YXRjaCIsInRvdGFsUGVuZGluZ1JlcXVlc3RzIiwiaXNFbXB0eSIsImNsYXNzTmFtZUZpbHRlciIsInRlc3QiLCJjb250YWluZXIiLCJvZmYiLCJmaWx0ZXJGcm9tUmVnaXN0cnkiLCJsaXN0IiwibWF0Y2hDb250YWluZXIiLCJtYXRjaENhbGxiYWNrIiwiY29udGFpbmVyTm9kZSIsImlzTWF0Y2giLCJwaW4iLCJlbmFibGVkIiwiYm9vbCIsImFyZ0NvdW50IiwiaGFzRWxlbWVudCIsInJlY29yZEV4aXN0cyIsIiQkckFGTXV0ZXhGYWN0b3J5IiwicGFzc2VkIiwiJCRBbmltYXRlUnVubmVyRmFjdG9yeSIsIkFuaW1hdGVSdW5uZXIiLCJob3N0IiwiX2RvbmVDYWxsYmFja3MiLCJfcnVuSW5BbmltYXRpb25GcmFtZSIsIl9zdGF0ZSIsIklOSVRJQUxfU1RBVEUiLCJET05FX1BFTkRJTkdfU1RBVEUiLCJET05FX0NPTVBMRVRFX1NUQVRFIiwibmV4dCIsInJlc3BvbnNlIiwib25Qcm9ncmVzcyIsInByb3RvdHlwZSIsImdldFByb21pc2UiLCJwcm9taXNlIiwic2VsZiIsInJlc29sdmUiLCJyZXNvbHZlSGFuZGxlciIsInJlamVjdEhhbmRsZXIiLCJjYXRjaCIsImhhbmRsZXIiLCJmaW5hbGx5IiwiX3Jlc29sdmUiLCIkJEFuaW1hdGlvblByb3ZpZGVyIiwic2V0UnVubmVyIiwiUlVOTkVSX1NUT1JBR0VfS0VZIiwicmVtb3ZlUnVubmVyIiwicmVtb3ZlRGF0YSIsImdldFJ1bm5lciIsIk5HX0FOSU1BVEVfUkVGX0FUVFIiLCJhbmltYXRpb25RdWV1ZSIsInRvdGFsUGVuZGluZ0NsYXNzQmFzZWRBbmltYXRpb25zIiwidG90YWxBY3RpdmVDbGFzc0Jhc2VkQW5pbWF0aW9ucyIsImNsYXNzQmFzZWRBbmltYXRpb25zUXVldWUiLCJnZXRBbmNob3JOb2RlcyIsIlNFTEVDVE9SIiwiaXRlbXMiLCJoYXNBdHRyaWJ1dGUiLCJncm91cEFuaW1hdGlvbnMiLCJwcmVwYXJlZEFuaW1hdGlvbnMiLCJyZWZMb29rdXAiLCJlbnRlck9yTW92ZSIsImFuY2hvck5vZGVzIiwiZGlyZWN0aW9uIiwiYW5pbWF0aW9uSUQiLCJ1c2VkSW5kaWNlc0xvb2t1cCIsImFuY2hvckdyb3VwcyIsImluZGV4S2V5IiwidG9TdHJpbmciLCJsb29rdXBLZXkiLCJncm91cCIsImJlZm9yZVN0YXJ0IiwiY3NzQ2xhc3Nlc0ludGVyc2VjdGlvbiIsIm91dCIsImluIiwiYWEiLCJqIiwiaW52b2tlRmlyc3REcml2ZXIiLCJkcml2ZXJOYW1lIiwiaGFzIiwiZmFjdG9yeSIsImRyaXZlciIsInRlbXBDbGFzc2VzIiwidXBkYXRlQW5pbWF0aW9uUnVubmVycyIsIm5ld1J1bm5lciIsInVwZGF0ZSIsImhhbmRsZURlc3Ryb3llZEVsZW1lbnQiLCJjbGFzc0Jhc2VkSW5kZXgiLCJhbmltYXRpb25FbnRyeSIsInN0YXJ0QW5pbWF0aW9uRm4iLCJjbG9zZUZuIiwidGFyZ2V0RWxlbWVudCIsIm9wZXJhdGlvbiIsImFuaW1hdGlvblJ1bm5lciIsInNvcnQiLCJtYXAiLCJkaXJlY3RpdmUiLCJwcm92aWRlciIsOCwiLi9hbmd1bGFyLWFuaW1hdGUiLDksIiRBcmlhUHJvdmlkZXIiLCJ3YXRjaEV4cHIiLCJhdHRyTmFtZSIsImFyaWFBdHRyIiwibmVnYXRlIiwiZWxlbSIsImFyaWFDYW1lbE5hbWUiLCIkbm9ybWFsaXplIiwiYm9vbFZhbCIsImFyaWFIaWRkZW4iLCJhcmlhQ2hlY2tlZCIsImFyaWFEaXNhYmxlZCIsImFyaWFSZXF1aXJlZCIsImFyaWFJbnZhbGlkIiwiYXJpYU11bHRpbGluZSIsImFyaWFWYWx1ZSIsInRhYmluZGV4IiwiYmluZEtleXByZXNzIiwiYmluZFJvbGVGb3JDbGljayIsIm5ld0NvbmZpZyIsIiQkd2F0Y2hFeHByIiwibmdBcmlhTW9kdWxlIiwiJGFyaWEiLCJzaG91bGRBdHRhY2hBdHRyIiwibm9ybWFsaXplZEF0dHIiLCJzaG91bGRBdHRhY2hSb2xlIiwicm9sZSIsIm5vZGVOYW1lIiwiZ2V0U2hhcGUiLCJ0eXBlIiwicmVzdHJpY3QiLCJwcmlvcml0eSIsImNvbXBpbGUiLCJzaGFwZSIsInByZSIsIm5nTW9kZWwiLCIkaXNFbXB0eSIsInBvc3QiLCJuZ0FyaWFXYXRjaE1vZGVsVmFsdWUiLCIkbW9kZWxWYWx1ZSIsImdldFJhZGlvUmVhY3Rpb24iLCJuZWVkc1RhYkluZGV4IiwibmV3VmFsIiwiJHZpZXdWYWx1ZSIsIm5nQXJpYUNoZWNrYm94UmVhY3Rpb24iLCJuZWVkc0FyaWFWYWx1ZW1pbiIsImhhc093blByb3BlcnR5IiwibmVlZHNBcmlhVmFsdWVtYXgiLCJuZWVkc0FyaWFWYWx1ZW5vdyIsIiR2YWxpZGF0b3JzIiwicmVxdWlyZWQiLCIkZXJyb3IiLCIkaW52YWxpZCIsImxpbmsiLCJuZ01lc3NhZ2VzIiwiJHBhcnNlIiwibmdDbGljayIsImlzTm9kZU9uZU9mIiwibm9kZVR5cGVBcnJheSIsIm5vZGVCbGFja0xpc3QiLCJuZ0tleXByZXNzIiwia2V5Q29kZSIsIndoaWNoIiwiJGFwcGx5IiwxMCwiLi9hbmd1bGFyLWFyaWEiLDExLCJNZENvcmVDb25maWd1cmUiLCIkcHJvdmlkZSIsImRlY29yYXRvciIsInJBRkRlY29yYXRvciIsIndhcm5QYWxldHRlIiwiYmFja2dyb3VuZFBhbGV0dGUiLCIkZGVsZWdhdGUiLCJ0aHJvdHRsZSIsImNiIiwicXVldWVBcmdzIiwiYWxyZWFkeVF1ZXVlZCIsInF1ZXVlQ2IiLCJjb250ZXh0IiwiTWRDb25zdGFudEZhY3RvcnkiLCJ2ZW5kb3JQcm9wZXJ0eSIsIndlYmtpdCIsInZlbmRvclByZWZpeCIsIktFWV9DT0RFIiwiRU5URVIiLCJFU0NBUEUiLCJTUEFDRSIsIkxFRlRfQVJST1ciLCJVUF9BUlJPVyIsIlJJR0hUX0FSUk9XIiwiRE9XTl9BUlJPVyIsIlRBQiIsIkJBQ0tTUEFDRSIsIkRFTEVURSIsIkNTUyIsIlRSQU5TSVRJT05FTkQiLCJBTklNQVRJT05FTkQiLCJUUkFOU0ZPUk0iLCJUUkFOU0ZPUk1fT1JJR0lOIiwiVFJBTlNJVElPTiIsIlRSQU5TSVRJT05fRFVSQVRJT04iLCJBTklNQVRJT05fUExBWV9TVEFURSIsIkFOSU1BVElPTl9EVVJBVElPTiIsIkFOSU1BVElPTl9OQU1FIiwiQU5JTUFUSU9OX1RJTUlORyIsIkFOSU1BVElPTl9ESVJFQ1RJT04iLCJNRURJQSIsInNtIiwiZ3Qtc20iLCJtZCIsImd0LW1kIiwibGciLCJndC1sZyIsIk1FRElBX1BSSU9SSVRZIiwiTWRJdGVyYXRvciIsInJlbG9vcCIsImdldEl0ZW1zIiwiX2l0ZW1zIiwiaW5SYW5nZSIsImhhc05leHQiLCJpdGVtIiwiaGFzUHJldmlvdXMiLCJpdGVtQXQiLCJmaW5kQnkiLCJhZGQiLCJpc051bWJlciIsImZpcnN0IiwibGFzdCIsImZpbmRTdWJzZXF1ZW50SXRlbSIsImJhY2t3YXJkcyIsInZhbGlkYXRlIiwibGltaXQiLCJ0cnVlRm4iLCJjdXJJbmRleCIsIm5leHRJbmRleCIsImZvdW5kSXRlbSIsIkFycmF5Iiwic2xpY2UiLCJiaW5kIiwicHJldmlvdXMiLCJpdGVyYXRvciIsIm1kTWVkaWFGYWN0b3J5IiwiJG1kQ29uc3RhbnQiLCIkbWRNZWRpYSIsInF1ZXJ5IiwidmFsaWRhdGVkIiwicXVlcmllcyIsInJlc3VsdHMiLCJtcWxzIiwibWF0Y2hNZWRpYSIsImFkZExpc3RlbmVyIiwib25RdWVyeUNoYW5nZSIsIm1lZGlhIiwiJGV2YWxBc3luYyIsImdldFF1ZXJ5IiwiZ2V0UmVzcG9uc2l2ZUF0dHJpYnV0ZSIsIm1lZGlhTmFtZSIsIm5vcm1hbGl6ZWROYW1lIiwiZ2V0Tm9ybWFsaXplZE5hbWUiLCJ3YXRjaFJlc3BvbnNpdmVBdHRyaWJ1dGVzIiwiYXR0ck5hbWVzIiwid2F0Y2hGbiIsInVud2F0Y2hGbnMiLCJub3JtYWxpemVDYWNoZSIsIm5leHRVbmlxdWVJZCIsIiRjYWNoZUZhY3RvcnkiLCJnZXROb2RlIiwiZWwiLCJVdGlsIiwicGVyZm9ybWFuY2UiLCJjbGllbnRSZWN0Iiwib2Zmc2V0UGFyZW50IiwiaXNPZmZzZXRSZWN0Iiwibm9kZVJlY3QiLCJvZmZzZXRSZWN0IiwibGVmdCIsInRvcCIsImhlaWdodCIsIm5vZGVzVG9BcnJheSIsIm5vZGVzIiwiZGlzYWJsZVNjcm9sbEFyb3VuZCIsImRpc2FibGVFbGVtZW50U2Nyb2xsIiwiZGlzYWJsZUtleU5hdiIsInByZXZlbnREZWZhdWx0IiwiekluZGV4IiwiaXNOYU4iLCJzY3JvbGxNYXNrIiwiYXBwZW5kQ2hpbGQiLCJyZW1vdmVDaGlsZCIsIl9lbmFibGVTY3JvbGxpbmciLCJkaXNhYmxlQm9keVNjcm9sbCIsInJlc3RvcmVTdHlsZSIsInNjcm9sbE9mZnNldCIsImFwcGx5U3R5bGVzIiwicG9zaXRpb24iLCJvdmVyZmxvd1kiLCJyZXN0b3JlQm9keSIsInJlc3RvcmVFbGVtZW50IiwiZW5hYmxlU2Nyb2xsaW5nIiwiZmxvYXRpbmdTY3JvbGxiYXJzIiwiY2FjaGVkIiwidGVtcE5vZGUiLCJjaGlsZE5vZGVzIiwiZm9yY2VGb2N1cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJmb2N1c09uQ2xpY2siLCIkZm9jdXMiLCJmb2N1cyIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJuZXdFdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCIkbWF0ZXJpYWwiLCJkaXNwYXRjaEV2ZW50IiwidHJhbnNpdGlvbkVuZFByb21pc2UiLCJvcHRzIiwiZmluaXNoZWQiLCJkZWZlcnJlZCIsImRlZmVyIiwidGltZW91dCIsImZha2VOZ01vZGVsIiwiJGZha2UiLCIkc2V0VG91Y2hlZCIsIiRzZXRWaWV3VmFsdWUiLCIkcmVuZGVyIiwiJHZpZXdDaGFuZ2VMaXN0ZW5lcnMiLCIkcGFyc2VycyIsIiRmb3JtYXR0ZXJzIiwiZGVib3VuY2UiLCJmdW5jIiwid2FpdCIsImludm9rZUFwcGx5IiwidGltZXIiLCJyZWNlbnQiLCJ0aW1lIiwibmV4dFVpZCIsImRpc2Nvbm5lY3RTY29wZSIsIiRyb290IiwiJCRkZXN0cm95ZWQiLCIkcGFyZW50IiwiJCRkaXNjb25uZWN0ZWQiLCIkJGNoaWxkSGVhZCIsIiQkbmV4dFNpYmxpbmciLCIkJGNoaWxkVGFpbCIsIiQkcHJldlNpYmxpbmciLCJyZWNvbm5lY3RTY29wZSIsImdldENsb3Nlc3QiLCJ0YWdOYW1lIiwib25seVBhcmVudCIsImV4dHJhY3RFbGVtZW50QnlOYW1lIiwibGVuIiwidG9Mb3dlckNhc2UiLCJpbml0T3B0aW9uYWxQcm9wZXJ0aWVzIiwiZGVmYXVsdHMiLCIkJGlzb2xhdGVCaW5kaW5ncyIsImJpbmRpbmciLCJvcHRpb25hbCIsImhhc0tleSIsImJsdXIiLCJBcmlhU2VydmljZSIsImV4cGVjdCIsImRlZmF1bHRWYWx1ZSIsImNoaWxkSGFzQXR0cmlidXRlIiwid2FybiIsImV4cGVjdEFzeW5jIiwiZGVmYXVsdFZhbHVlR2V0dGVyIiwiZXhwZWN0V2l0aFRleHQiLCJnZXRUZXh0IiwidGV4dCIsImlzSGlkZGVuIiwiY3VycmVudFN0eWxlIiwiZGlzcGxheSIsImhhc0NoaWxkcmVuIiwiaGFzQ2hpbGROb2RlcyIsImhhc0F0dHIiLCJtZENvbXBpbGVyU2VydmljZSIsIiRodHRwIiwiJGNvbXBpbGUiLCIkY29udHJvbGxlciIsIiR0ZW1wbGF0ZUNhY2hlIiwidGVtcGxhdGUiLCJsb2NhbHMiLCJ0cmFuc2Zvcm1UZW1wbGF0ZSIsImlkZW50aXR5IiwiaW52b2tlIiwiJHRlbXBsYXRlIiwiaHRtbCIsImNvbnRlbnRzIiwibGlua0ZuIiwiaW52b2tlQ3RybCIsImluc3RhbmNlIiwiY3RybCIsIk1kR2VzdHVyZVByb3ZpZGVyIiwiTWRHZXN0dXJlIiwiJCRNZEdlc3R1cmVIYW5kbGVyIiwicmVnaXN0ZXIiLCJoYW5kbGVyTmFtZSIsIkhBTkRMRVJTIiwicmVnaXN0ZXJFbGVtZW50IiwiYWRkSGFuZGxlciIsImRlZmluaXRpb24iLCJ1c2VyQWdlbnQiLCJuYXZpZ2F0b3IiLCJ2ZW5kb3IiLCJvcGVyYSIsImlzSW9zIiwibWF0Y2giLCJpc0FuZHJvaWQiLCJoYXNKUXVlcnkiLCJqUXVlcnkiLCJpc0hpamFja2luZ0NsaWNrcyIsImZvcmNlU2tpcENsaWNrSGlqYWNrIiwibWF4RGlzdGFuY2UiLCJvbkVuZCIsInBvaW50ZXIiLCJkaXN0YW5jZSIsIm9uU3RhcnQiLCJvbkNhbmNlbCIsInJlZ2lzdGVyZWRQYXJlbnQiLCJwb3MiLCJ4IiwieSIsIm9uTW92ZSIsImR4IiwiZHkiLCJzcXJ0IiwibWluRGlzdGFuY2UiLCJob3Jpem9udGFsIiwiY2FuY2VsTXVsdGlwbGllciIsInNob3VsZFN0YXJ0RHJhZyIsInNob3VsZENhbmNlbCIsImRyYWdQb2ludGVyIiwiZGlzcGF0Y2hEcmFnTW92ZSIsImFicyIsImRpc3RhbmNlWCIsImRpc3RhbmNlWSIsIm1ha2VTdGFydFBvaW50ZXIiLCJ1cGRhdGVQb2ludGVyU3RhdGUiLCJpc1J1bm5pbmciLCJtaW5WZWxvY2l0eSIsInZlbG9jaXR5WCIsImV2ZW50VHlwZSIsImRpcmVjdGlvblgiLCJHZXN0dXJlSGFuZGxlciIsIk1kR2VzdHVyZUhhbmRsZXIiLCJqUXVlcnlEaXNwYXRjaEV2ZW50Iiwic3JjRXZlbnQiLCJldmVudFBvaW50ZXIiLCJldmVudE9iaiIsIkV2ZW50IiwiY2xpZW50WCIsImNsaWVudFkiLCJzY3JlZW5YIiwic2NyZWVuWSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5IiwiYWx0S2V5Iiwic2hpZnRLZXkiLCJtZXRhS2V5IiwidHJpZ2dlciIsIm5hdGl2ZURpc3BhdGNoRXZlbnQiLCJkZXRhaWwiLCJidXR0b24iLCJyZWxhdGVkVGFyZ2V0IiwiaW5pdEN1c3RvbUV2ZW50IiwicGFyZW50VGFyZ2V0IiwiZ2V0TmVhcmVzdFBhcmVudCIsInBhcmVudFRhcmdldE9wdGlvbnMiLCIkbWRHZXN0dXJlIiwibW92ZSIsImN1cnJlbnQiLCJvbkRlc3Ryb3kiLCJhdHRhY2hUb0RvY3VtZW50IiwicnVuSGFuZGxlcnMiLCJoYW5kbGVyRXZlbnQiLCJnZXN0dXJlU3RhcnQiLCJsYXN0UG9pbnRlciIsInR5cGVzTWF0Y2giLCJlbmRUaW1lIiwiZ2VzdHVyZU1vdmUiLCJnZXN0dXJlRW5kIiwiaXNJbml0aWFsaXplZCIsImlzS2V5Q2xpY2siLCJpc0lvbmljVGFwIiwiU1RBUlRfRVZFTlRTIiwiTU9WRV9FVkVOVFMiLCJFTkRfRVZFTlRTIiwicG9pbnQiLCJnZXRFdmVudFBvaW50Iiwic3RhcnRQb2ludGVyIiwic3RhcnRYIiwic3RhcnRZIiwiZGlyZWN0aW9uWSIsInZlbG9jaXR5WSIsInRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsInJ1biIsInNraXBDbGlja0hpamFjayIsIkludGVyaW1FbGVtZW50UHJvdmlkZXIiLCJjcmVhdGVJbnRlcmltRWxlbWVudFByb3ZpZGVyIiwiaW50ZXJpbUZhY3RvcnlOYW1lIiwic2V0RGVmYXVsdHMiLCJwcm92aWRlckNvbmZpZyIsIm9wdGlvbnNGYWN0b3J5IiwibWV0aG9kcyIsIkVYUE9TRURfTUVUSE9EUyIsImFkZE1ldGhvZCIsImN1c3RvbU1ldGhvZHMiLCJhZGRQcmVzZXQiLCJwcmVzZXRzIiwiYXJnT3B0aW9uIiwiJCRpbnRlcmltRWxlbWVudCIsIiRhbmltYXRlIiwic2hvd0ludGVyaW1FbGVtZW50IiwiX29wdGlvbnMiLCJpbnRlcmltRWxlbWVudFNlcnZpY2UiLCJkZWZhdWx0T3B0aW9ucyIsImludm9rZUZhY3RvcnkiLCJkZWZhdWx0VmFsIiwicHVibGljU2VydmljZSIsImRlZmF1bHRNZXRob2RzIiwiUHJlc2V0IiwicHJlc2V0RGVmYXVsdHMiLCJwcmVzZXRNZXRob2RzIiwiJHR5cGUiLCJtZXRob2ROYW1lIiwiSW50ZXJpbUVsZW1lbnRGYWN0b3J5IiwiJGludGVycG9sYXRlIiwiJG1kQ29tcGlsZXIiLCIkbWRUaGVtaW5nIiwicmVwbGFjZUludGVycG9sYXRpb25TeW1ib2xzIiwic3RhcnRTeW1ib2wiLCJlbmRTeW1ib2wiLCJ1c2VzU3RhbmRhcmRTeW1ib2xzIiwicHJvY2Vzc1RlbXBsYXRlIiwic3RhY2siLCJpbnRlcmltRWxlbWVudCIsIkludGVyaW1FbGVtZW50IiwiaGlkZVRpbWVvdXQiLCJzaG93RG9uZSIsInJlbW92ZURvbmUiLCJwcmVzZXJ2ZVNjb3BlIiwiJG5ldyIsImlzb2xhdGVTY29wZSIsIm9uU2hvdyIsImVudGVyIiwib25SZW1vdmUiLCJsZWF2ZSIsImNvbXBpbGVQcm9taXNlIiwic2tpcENvbXBpbGUiLCJjb21waWxlRGF0YSIsInN0YXJ0SGlkZVRpbWVvdXQiLCJoaWRlRGVsYXkiLCJxdWVyeVNlbGVjdG9yIiwidGhlbWFibGUiLCJyZXQiLCJjYW5jZWxUaW1lb3V0IiwiJGRlc3Ryb3kiLCJDb21wb25lbnRSZWdpc3RyeSIsImlzVmFsaWRJRCIsImhhbmRsZSIsImluc3RhbmNlcyIsInBlbmRpbmdzIiwibm90Rm91bmRFcnJvciIsImVycm9yIiwiZ2V0SW5zdGFuY2VzIiwiJCRtZEhhbmRsZSIsImRlcmVnaXN0ZXIiLCJyZXNvbHZlV2hlbiIsImRmZCIsIk1kQnV0dG9uSW5rUmlwcGxlIiwiJG1kSW5rUmlwcGxlIiwiYXR0YWNoIiwiZWxlbWVudE9wdGlvbnMiLCJvcHRpb25zRm9yRWxlbWVudCIsImhhc0NsYXNzIiwiaXNNZW51SXRlbSIsImZpdFJpcHBsZSIsImNlbnRlciIsImRpbUJhY2tncm91bmQiLCJNZENoZWNrYm94SW5rUmlwcGxlIiwiTWRMaXN0SW5rUmlwcGxlIiwib3V0bGluZSIsInJpcHBsZVNpemUiLCJJbmtSaXBwbGVEaXJlY3RpdmUiLCIkbWRCdXR0b25JbmtSaXBwbGUiLCIkbWRDaGVja2JveElua1JpcHBsZSIsIklua1JpcHBsZVNlcnZpY2UiLCJnZXRSaXBwbGVDb250YWluZXIiLCJwYXJzZUNvbG9yIiwiY29sb3IiLCJoZXhUb1JHQkEiLCJoZXgiLCJkaWciLCJyZWQiLCJncm4iLCJibHUiLCJyZ2JUb1JHQkEiLCJyZW1vdmVFbGVtZW50IiwicmlwcGxlcyIsImJhY2tncm91bmRDb2xvciIsInVwZGF0ZUVsZW1lbnQiLCJzdGF0ZXMiLCJlbGVtSXNBY3RpdmUiLCJpc0FjdGl2ZSIsImVsZW1Jc0hlbGQiLCJpc0hlbGQiLCJhbmltYXRpbmciLCJtYXJnaW5MZWZ0IiwibWFyZ2luVG9wIiwiY3JlYXRlUmlwcGxlIiwiZ2V0UmlwcGxlRWxlbWVudCIsInVuc2hpZnQiLCJnZXRSaXBwbGVTaXplIiwibXVsdGlwbGllciIsInNpemUiLCJyZWN0IiwicG93IiwiZnVsbFJpcHBsZSIsIm1pbiIsImdldFJpcHBsZUNzcyIsInJnYmFUb1JHQiIsImJvcmRlckNvbG9yIiwicm91bmQiLCJjb2xvckVsZW1lbnQiLCJib3JkZXJXaWR0aCIsIm9uUHJlc3NEb3duIiwiaXNSaXBwbGVBbGxvd2VkIiwib25QcmVzc1VwIiwicmlwcGxlIiwiaXNEaXNhYmxlZCIsImdyYW5kcGFyZW50IiwiYW5jZXN0b3IiLCJtb3VzZWRvd24iLCJob3ZlciIsIm1vdXNlZG93blBhdXNlVGltZSIsImlzQWN0aXZlRXhwciIsInJpcHBsZVNpemVTZXR0aW5nIiwiYXR0ck5vRGlyZWN0aXZlIiwiTWRUYWJJbmtSaXBwbGUiLCJjb25zdGFudCIsIjUwIiwiMTAwIiwiMjAwIiwiMzAwIiwiNDAwIiwiNTAwIiwiNjAwIiwiNzAwIiwiODAwIiwiOTAwIiwiQTEwMCIsIkEyMDAiLCJBNDAwIiwiQTcwMCIsImNvbnRyYXN0RGVmYXVsdENvbG9yIiwiY29udHJhc3REYXJrQ29sb3JzIiwiY29udHJhc3RTdHJvbmdMaWdodENvbG9ycyIsInBpbmsiLCJwdXJwbGUiLCJkZWVwLXB1cnBsZSIsImluZGlnbyIsImJsdWUiLCJsaWdodC1ibHVlIiwiY29udHJhc3RMaWdodENvbG9ycyIsImN5YW4iLCJ0ZWFsIiwiZ3JlZW4iLCJsaWdodC1ncmVlbiIsImxpbWUiLCJ5ZWxsb3ciLCJhbWJlciIsIm9yYW5nZSIsImRlZXAtb3JhbmdlIiwiYnJvd24iLCJncmV5IiwiMTAwMCIsImJsdWUtZ3JleSIsIlRoZW1pbmdQcm92aWRlciIsIiRtZENvbG9yUGFsZXR0ZSIsImRlZmluZVBhbGV0dGUiLCJQQUxFVFRFUyIsImNoZWNrUGFsZXR0ZVZhbGlkIiwidGhlbWluZ1Byb3ZpZGVyIiwiZXh0ZW5kUGFsZXR0ZSIsIm1pc3NpbmdDb2xvcnMiLCJWQUxJRF9IVUVfVkFMVUVTIiwiZmllbGQiLCJyZWdpc3RlclRoZW1lIiwiaW5oZXJpdEZyb20iLCJUSEVNRVMiLCJwYXJlbnRUaGVtZSIsIlRoZW1lIiwiY29sb3JzIiwiY29sb3JUeXBlIiwiaHVlcyIsInNldERhcmsiLCJpc0RhcmsiLCJmb3JlZ3JvdW5kUGFsZXR0ZSIsIkxJR0hUX0ZPUkVHUk9VTkQiLCJEQVJLX0ZPUkVHUk9VTkQiLCJmb3JlZ3JvdW5kU2hhZG93IiwiREFSS19TSEFET1ciLCJMSUdIVF9TSEFET1ciLCJuZXdEZWZhdWx0SHVlcyIsIkRBUktfREVGQVVMVF9IVUVTIiwiTElHSFRfREVGQVVMVF9IVUVTIiwib2xkRGVmYXVsdEh1ZXMiLCJuZXdEZWZhdWx0cyIsIm9sZERlZmF1bHRzIiwiaHVlTmFtZSIsImRhcmsiLCJUSEVNRV9DT0xPUl9UWVBFUyIsImRlZmF1bHRIdWVzIiwicGFsZXR0ZU5hbWUiLCJodWVWYWx1ZSIsImNvbnNvbGUiLCJUaGVtaW5nU2VydmljZSIsInJlZ2lzdGVyZWQiLCJ0aGVtZU5hbWUiLCJhcHBseVRoZW1lIiwiaW5oZXJpdCIsImNoYW5nZVRoZW1lIiwib2xkVGhlbWUiLCJhdHRyVGhlbWVWYWx1ZSIsImFsd2F5c1dhdGNoVGhlbWUiLCIkbWRUaGVtZSIsImRlZmF1bHRUaGVtZSIsInNldERlZmF1bHRUaGVtZSIsImFsd2F5c1dhdGNoIiwiX0xJR0hUX0RFRkFVTFRfSFVFUyIsIl9EQVJLX0RFRkFVTFRfSFVFUyIsIl9QQUxFVFRFUyIsIl9USEVNRVMiLCJfcGFyc2VSdWxlcyIsInBhcnNlUnVsZXMiLCJfcmdiYSIsInJnYmEiLCJUaGVtaW5nRGlyZWN0aXZlIiwiJHNldFRoZW1lIiwibWRUaGVtZSIsIlRoZW1hYmxlRGlyZWN0aXZlIiwiY2hlY2tWYWxpZFBhbGV0dGUiLCJnZW5lcmF0ZWRSdWxlcyIsInRoZW1lTmFtZVJlZ2V4IiwiUmVnRXhwIiwiaHVlUmVnZXgiLCJzaW1wbGVWYXJpYWJsZVJlZ2V4IiwicGFsZXR0ZSIsImh1ZSIsIm9wYWNpdHkiLCJuZXdSdWxlIiwiXyIsImh1ZVR5cGUiLCJnZW5lcmF0ZVRoZW1lcyIsInNhbml0aXplUGFsZXR0ZSIsImRlZmF1bHRDb250cmFzdCIsImxpZ2h0Q29sb3JzIiwic3Ryb25nTGlnaHRDb2xvcnMiLCJkYXJrQ29sb3JzIiwiZ2V0Q29udHJhc3RDb2xvciIsIkRBUktfQ09OVFJBU1RfQ09MT1IiLCJTVFJPTkdfTElHSFRfQ09OVFJBU1RfQ09MT1IiLCJMSUdIVF9DT05UUkFTVF9DT0xPUiIsInJnYlZhbHVlIiwiY29sb3JUb1JnYmFBcnJheSIsImNvbnRyYXN0IiwiaGVhZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZmlyc3RDaGlsZCIsImZpcnN0RWxlbWVudENoaWxkIiwidGhlbWVDc3MiLCJydWxlc0J5VHlwZSIsInJ1bGUiLCJydWxlTWF0Y2hSZWdleCIsIkRFRkFVTFRfQ09MT1JfVFlQRSIsIkdFTkVSQVRFRCIsInN0eWxlU3RyaW5ncyIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsImluc2VydEJlZm9yZSIsInByaW1hcnkiLCJhY2NlbnQiLCJjbHIiLCJyZ2JBcnJheSIsImNvcHkiLCJwb3AiLCJkZWZhdWx0IiwiaHVlLTEiLCJodWUtMiIsImh1ZS0zIiwiYmFja2dyb3VuZCIsImRlZmF1bHREZWZhdWx0SHVlcyIsIkJhY2tkcm9wRGlyZWN0aXZlIiwiTWRCb3R0b21TaGVldERpcmVjdGl2ZSIsIk1kQm90dG9tU2hlZXRQcm92aWRlciIsIiQkaW50ZXJpbUVsZW1lbnRQcm92aWRlciIsImJvdHRvbVNoZWV0RGVmYXVsdHMiLCIkbWRVdGlsIiwiYmFja2Ryb3AiLCJib3R0b21TaGVldCIsIkJvdHRvbVNoZWV0IiwiZGlzYWJsZVBhcmVudFNjcm9sbCIsImxhc3RPdmVyZmxvdyIsImZvY3VzYWJsZSIsImVzY2FwZVRvQ2xvc2UiLCJyb290RWxlbWVudEtleXVwQ2FsbGJhY2siLCJjbGVhbnVwIiwib25EcmFnU3RhcnQiLCJvbkRyYWciLCJ0cmFuc2Zvcm0iLCJQQURESU5HIiwib25EcmFnRW5kIiwiQ0xPU0lOR19WRUxPQ0lUWSIsImRpc3RhbmNlUmVtYWluaW5nIiwiTWRCdXR0b25EaXJlY3RpdmUiLCIkbWRBcmlhIiwiaXNBbmNob3IiLCJocmVmIiwibmdIcmVmIiwibmdMaW5rIiwidWlTcmVmIiwiZ2V0VGVtcGxhdGUiLCJwb3N0TGluayIsImVsZW1lbnRIYXNUZXh0IiwidGV4dENvbnRlbnQiLCJuZ0Rpc2FibGVkIiwiZGlzYWJsZWQiLCJtb3VzZUFjdGl2ZSIsInRyYW5zY2x1ZGUiLCJtZENhcmREaXJlY3RpdmUiLCIkZWxlbWVudCIsIiRhdHRyIiwiTWRDaGVja2JveERpcmVjdGl2ZSIsImlucHV0RGlyZWN0aXZlIiwidEVsZW1lbnQiLCJ0QXR0cnMiLCJuZ01vZGVsQ3RybCIsImV4cHIiLCJodG1sQXR0ciIsInZhbHVlT3B0cyIsImtleXByZXNzSGFuZGxlciIsImxpc3RlbmVyIiwidmlld1ZhbHVlIiwibmdDaGVja2VkIiwiY2hlY2tlZCIsInJlbmRlciIsIkNIRUNLRURfQ1NTIiwiJGV2YWwiLCJ0cnVlIiwiZmFsc2UiLCJtZENvbnRlbnREaXJlY3RpdmUiLCJDb250ZW50Q29udHJvbGxlciIsIiRicm9hZGNhc3QiLCJpb3NTY3JvbGxGaXgiLCIkbWF0ZXJpYWxTY3JvbGxGaXhlZCIsInNjcm9sbEhlaWdodCIsIm9mZnNldEhlaWdodCIsIk1kRGlhbG9nRGlyZWN0aXZlIiwiY2xpZW50SGVpZ2h0IiwiTWREaWFsb2dQcm92aWRlciIsImFkdmFuY2VkRGlhbG9nT3B0aW9ucyIsIiRtZERpYWxvZyIsImFib3J0IiwiZGlhbG9nRGVmYXVsdE9wdGlvbnMiLCJ0cmFwRm9jdXMiLCJkaWFsb2ciLCJmaW5kQ2xvc2VCdXR0b24iLCJjbG9zZUJ1dHRvbiIsImFjdGlvbkJ1dHRvbnMiLCJwb3BJblRhcmdldCIsImhhc0JhY2tkcm9wIiwiY29tcHV0ZUZyb20iLCJkb2N1bWVudEVsZW1lbnQiLCJwYXJlbnRPZmZzZXQiLCJlbGVtZW50VG9Gb2N1cyIsImZpbmQiLCJjb25maWd1cmVBcmlhIiwiZGlhbG9nUG9wSW4iLCJhcHBseUFyaWFUb1NpYmxpbmdzIiwiY2xpY2tPdXRzaWRlVG9DbG9zZSIsImRpYWxvZ0NsaWNrT3V0c2lkZUNhbGxiYWNrIiwiZm9jdXNPbk9wZW4iLCJkaWFsb2dQb3BPdXQiLCJ0YWJJbmRleCIsImRpYWxvZ0NvbnRlbnQiLCJkaWFsb2dJZCIsImFyaWFMYWJlbCIsIndvcmRzIiwid2Fsa0RPTSIsImF0dHJpYnV0ZSIsImNsaWNrRWxlbWVudCIsImRpYWxvZ0VsIiwidHJhbnNmb3JtVG9DbGlja0VsZW1lbnQiLCJjbGlja1JlY3QiLCJkaWFsb2dSZWN0Iiwic2NhbGVYIiwic2NhbGVZIiwiTWRGYWJBY3Rpb25zRGlyZWN0aXZlIiwiYXR0cmlidXRlcyIsImNvbnRyb2xsZXJzIiwib3BlbiIsIndyYXAiLCJNZERpdmlkZXJEaXJlY3RpdmUiLCJNZEZhYlNwZWVkRGlhbERpcmVjdGl2ZSIsIkZhYlNwZWVkRGlhbExpbmsiLCJwcmVwZW5kIiwiRmFiU3BlZWREaWFsQ29udHJvbGxlciIsInNldHVwRGVmYXVsdHMiLCJ2bSIsInNldHVwTGlzdGVuZXJzIiwic2V0dXBXYXRjaGVycyIsIm5ld0RpciIsIm9sZERpciIsInNldENsYXNzIiwiTWRGYWJTcGVlZERpYWxGbGluZ0FuaW1hdGlvbiIsInJ1bkFuaW1hdGlvbiIsInZhcmlhYmxlc0VsZW1lbnQiLCJzdGFydFpJbmRleCIsIm5ld1Bvc2l0aW9uIiwiYXhpcyIsInNjcm9sbFdpZHRoIiwiTWRGYWJTcGVlZERpYWxTY2FsZUFuaW1hdGlvbiIsIm9mZnNldERlbGF5IiwiTWRGYWJUb29sYmFyRGlyZWN0aXZlIiwiRmFiVG9vbGJhckNvbnRyb2xsZXIiLCJNZEZhYlRvb2xiYXJBbmltYXRpb24iLCJiYWNrZ3JvdW5kRWxlbWVudCIsInRyaWdnZXJFbGVtZW50IiwiaWNvbkVsZW1lbnQiLCJnZXRQcm9wZXJ0eVZhbHVlIiwic2NhbGUiLCJib3JkZXJSYWRpdXMiLCJyaWdodCIsIkdyaWRMaXN0RGlyZWN0aXZlIiwiJG1kR3JpZExheW91dCIsIndhdGNoTWVkaWEiLCJpbnZhbGlkYXRlTGF5b3V0IiwibGF5b3V0SWZNZWRpYU1hdGNoIiwidW53YXRjaE1lZGlhIiwibGF5b3V0RGVsZWdhdGUiLCJ1bndhdGNoQXR0cnMiLCJyZW1vdmVMaXN0ZW5lciIsInRpbGVzSW52YWxpZGF0ZWQiLCJ0aWxlcyIsImdldFRpbGVFbGVtZW50cyIsInByb3BzIiwidGlsZVNwYW5zIiwiZ2V0VGlsZVNwYW5zIiwiY29sQ291bnQiLCJnZXRDb2x1bW5Db3VudCIsInJvd01vZGUiLCJnZXRSb3dNb2RlIiwicm93SGVpZ2h0IiwiZ2V0Um93SGVpZ2h0IiwiZ3V0dGVyIiwiZ2V0R3V0dGVyIiwiZXF1YWxzIiwibGFzdExheW91dFByb3BzIiwidGlsZVBvc2l0aW9ucyIsInJvd0NvdW50IiwiZ3JpZCIsImdldEdyaWRTdHlsZSIsInBzIiwiZ2V0VGlsZVN0eWxlIiwic3BhbnMiLCJyZWZsb3ciLCJtZE9uTGF5b3V0IiwiZXhwclN0ciIsImhTaGFyZSIsImhHdXR0ZXJTaGFyZSIsImhVbml0IiwiVU5JVCIsInNoYXJlIiwiZ3V0dGVyU2hhcmUiLCJQT1NJVElPTiIsInVuaXQiLCJvZmZzZXQiLCJjb2wiLCJESU1FTlNJT04iLCJzcGFuIiwicGFkZGluZ1RvcCIsInJvdyIsInZTaGFyZSIsInZVbml0Iiwidkd1dHRlclNoYXJlIiwicGFkZGluZ0JvdHRvbSIsImVsZSIsInRpbGVFbGVtZW50cyIsIiRhdHRycyIsImFwcGx5RGVmYXVsdFVuaXQiLCJ3aFJhdGlvIiwiJG9uIiwiR3JpZExpc3RDb250cm9sbGVyIiwibGF5b3V0SW52YWxpZGF0ZWQiLCIkdGltZW91dF8iLCJHcmlkTGF5b3V0RmFjdG9yeSIsIkdyaWRMYXlvdXQiLCJsYXlvdXRJbmZvIiwiZ3JpZFN0eWxlcyIsImxheW91dFRpbWUiLCJtYXBUaW1lIiwicmVmbG93VGltZSIsImNhbGN1bGF0ZUdyaWRGb3IiLCJ1cGRhdGVGbiIsImluZm8iLCJwb3NpdGlvbmluZyIsImFuaW1hdG9yRm4iLCJkZWZhdWx0QW5pbWF0b3IiLCJ0aWxlQ291bnQiLCJ0b3RhbFRpbWUiLCJHcmlkVGlsZUFuaW1hdG9yIiwicmVzZXJ2ZVNwYWNlIiwiY3VyQ29sIiwibmV4dFJvdyIsInNwYWNlVHJhY2tlciIsImZpbmRFbmQiLCJhZGp1c3RSb3ciLCJjdXJSb3ciLCJjb2xzIiwiYnkiLCJuZXdTcGFjZVRyYWNrZXIiLCJ0cmFja2VyIiwiYW5pbWF0ZVdpdGgiLCJjdXN0b21BbmltYXRvciIsIkdyaWRUaWxlRGlyZWN0aXZlIiwiZ3JpZEN0cmwiLCJpbnZhbGlkYXRlVGlsZXMiLCIkaW5kZXgiLCJuZXdJZHgiLCJvbGRJZHgiLCJHcmlkVGlsZUNhcHRpb25EaXJlY3RpdmUiLCJsYXlvdXQiLCJNZEZhYlRyaWdnZXJEaXJlY3RpdmUiLCJtZEljb25EaXJlY3RpdmUiLCIkbWRJY29uIiwicGFyZW50c0hhdmVUZXh0IiwicHJlcGFyZUZvckZvbnRJY29uIiwic3ZnSWNvbiIsInN2Z1NyYyIsImZvbnRJY29uIiwiZm9udFNldCIsImxhYmVsIiwiYWx0IiwibWRTdmdJY29uIiwibWRTdmdTcmMiLCJhdHRyVmFsIiwiZW1wdHkiLCJzdmciLCJNZEljb25Qcm92aWRlciIsIkNvbmZpZ3VyYXRpb25JdGVtIiwidXJsIiwidmlld0JveFNpemUiLCJkZWZhdWx0Vmlld0JveFNpemUiLCJNZEljb25TZXJ2aWNlIiwiZ2V0SWNvbiIsImlkIiwiaWNvbkNhY2hlIiwidXJsUmVnZXgiLCJsb2FkQnlVUkwiLCJjYWNoZUljb24iLCJsb2FkQnlJRCIsImxvYWRGcm9tSWNvblNldCIsImFubm91bmNlSWROb3RGb3VuZCIsImFubm91bmNlTm90Rm91bmQiLCJmaW5kUmVnaXN0ZXJlZEZvbnRTZXQiLCJhbGlhcyIsInVzZURlZmF1bHQiLCJkZWZhdWx0Rm9udFNldCIsImZvbnRTZXRzIiwiaXQiLCJpc0ljb24iLCJJY29uIiwiaWNvbkNvbmZpZyIsImV4dHJhY3RGcm9tU2V0Iiwic2V0IiwiaWNvbk5hbWUiLCJsYXN0SW5kZXhPZiIsImljb25TZXRDb25maWciLCJzZXROYW1lIiwibXNnIiwiZXJyIiwibWVzc2FnZSIsInN0YXR1c1RleHQiLCJwcmVwYXJlIiwicHJlcGFyZUFuZFN0eWxlIiwiZml0IiwicHJlc2VydmVBc3BlY3RSYXRpbyIsInZpZXdCb3giLCJwb2ludGVyLWV2ZW50cyIsImNsb25lU1ZHIiwiaWNvblNldCIsImRlZmF1bHRJY29uU2l6ZSIsImljb25TaXplIiwicHJlbG9hZEljb25zIiwiaWNvblByb3ZpZGVyIiwic3ZnUmVnaXN0cnkiLCJhc3NldCIsIm1kSW5wdXRDb250YWluZXJEaXJlY3RpdmUiLCJDb250YWluZXJDdHJsIiwiaXNFcnJvckdldHRlciIsIm1kSXNFcnJvciIsImRlbGVnYXRlQ2xpY2siLCJpbnB1dCIsInNldEZvY3VzZWQiLCJpc0ZvY3VzZWQiLCJ0b2dnbGVDbGFzcyIsInNldEhhc1ZhbHVlIiwiaGFzVmFsdWUiLCJzZXRJbnZhbGlkIiwiaXNJbnZhbGlkIiwiaGFzTGFiZWxBbmRJbnB1dCIsImxhYmVsRGlyZWN0aXZlIiwiY29udGFpbmVyQ3RybCIsIm1kTm9GbG9hdCIsImlucHV0VGV4dGFyZWFEaXJlY3RpdmUiLCJjdHJscyIsIm5nTW9kZWxQaXBlbGluZUNoZWNrVmFsdWUiLCJpbnB1dENoZWNrVmFsdWUiLCJ2YWxpZGl0eSIsImJhZElucHV0Iiwic2V0dXBUZXh0YXJlYSIsInBpcGVsaW5lTGlzdGVuZXIiLCJvbkNoYW5nZVRleHRhcmVhIiwiZ3Jvd1RleHRhcmVhIiwiZ2V0SGVpZ2h0IiwibGluZSIsIm9uU2Nyb2xsIiwiaXNSZWFkb25seSIsInJlYWRvbmx5IiwiJHRvdWNoZWQiLCJtZE1heGxlbmd0aERpcmVjdGl2ZSIsInJlbmRlckNoYXJDb3VudCIsImNoYXJDb3VudEVsIiwibWF4bGVuZ3RoIiwiJHNldCIsIm1kTWF4bGVuZ3RoIiwibGFzdEVsZW1lbnRDaGlsZCIsIm1vZGVsVmFsdWUiLCJwbGFjZWhvbGRlckRpcmVjdGl2ZSIsImlucHV0Q29udGFpbmVyIiwiYmxhY2tMaXN0RWxlbWVudHMiLCJwbGFjZWhvbGRlclRleHQiLCJwbGFjZWhvbGRlciIsInJlbW92ZUF0dHIiLCJtZExpc3REaXJlY3RpdmUiLCJ0RWwiLCJtZExpc3RJdGVtRGlyZWN0aXZlIiwicHJveGllZFR5cGVzIiwic2V0dXBUb2dnbGVBcmlhIiwidG9nZ2xlVHlwZSIsInRvZ2dsZVR5cGVzIiwicCIsIndyYXBJbiIsImNvcGllZEF0dHJzIiwiZXEiLCJzZWNvbmRhcnlJdGVtIiwiYnV0dG9uV3JhcHBlciIsImNsYXNzTGlzdCIsImlzUHJveGllZEVsZW1lbnQiLCJjb21wdXRlUHJveGllcyIsInByb3hpZXMiLCJjb21wdXRlQ2xpY2thYmxlIiwiaGFzQ2xpY2siLCJhdHRhY2hSaXBwbGUiLCJwcm94eSIsInByb3h5T25CbHVyIiwiY2xpY2siLCJ0cmlnZ2VySGFuZGxlciIsImhhc1Byb3hpZWRFbGVtZW50IiwicHJveHlFbGVtZW50IiwiTWRMaXN0Q29udHJvbGxlciIsIiRtZExpc3RJbmtSaXBwbGUiLCJNZW51RGlyZWN0aXZlIiwiJG1kTWVudSIsInRlbXBsYXRlRWxlbWVudCIsIm1kTWVudUN0cmwiLCJtZW51Q29udGFpbmVyIiwibWVudUNvbnRlbnRzIiwiTWVudUNvbnRyb2xsZXIiLCJzZXRNZW51Q29udGFpbmVyIiwiJG1kT3Blbk1lbnUiLCJza2lwRm9jdXMiLCJwb3NpdGlvbk1vZGUiLCJhdHRhY2htZW50IiwibWRQb3NpdGlvbk1vZGUiLCJvZmZzZXRzIiwibWRPZmZzZXQiLCJNZW51UHJvdmlkZXIiLCJtZW51RGVmYXVsdE9wdGlvbnMiLCJidWlsZE9wdHMiLCJhbHJlYWR5T3BlbiIsImlzUmVtb3ZlZCIsIm1lbnVDb250ZW50RWwiLCJoYW5kbGVSZXNpemluZyIsInJlc2l6ZUZuIiwicG9zaXRpb25NZW51Iiwic2hvd01lbnUiLCJhY3RpdmF0ZUludGVyYWN0aW9uIiwiZm9jdXNNZW51SXRlbSIsImZvY3VzVGFyZ2V0IiwicmVzdG9yZVNjcm9sbCIsIm1lbnVFbCIsImN1cnJlbnRJdGVtIiwiY3VycmVudEluZGV4IiwiZGlkRm9jdXMiLCJhdHRlbXB0Rm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiY2xhbXAiLCJib3VuZHMiLCJib3R0b20iLCJhbGlnblRhcmdldCIsImFsaWduVGFyZ2V0UmVjdCIsImV4aXN0aW5nT2Zmc2V0cyIsIm9wZW5NZW51Tm9kZSIsIm9wZW5NZW51Tm9kZVJlY3QiLCJib3VuZHJ5Tm9kZSIsImJvdW5kcnlOb2RlUmVjdCIsIm9yaWdpbk5vZGUiLCJvcmlnaW5Ob2RlUmVjdCIsIk1FTlVfRURHRV9NQVJHSU4iLCJ0cmFuc2Zvcm1PcmlnaW4iLCJNZFByb2dyZXNzQ2lyY3VsYXJEaXJlY3RpdmUiLCJjaXJjbGUiLCJkaWFtZXRlciIsIm1kRGlhbWV0ZXIiLCJwZXJjZW50VmFsdWUiLCJNZFByb2dyZXNzTGluZWFyRGlyZWN0aXZlIiwiYmFyMVN0eWxlIiwiYmFyMlN0eWxlIiwibWRNb2RlIiwiY2xhbXBlZCIsInRyYW5zZm9ybXMiLCJjZWlsIiwibWFrZVRyYW5zZm9ybSIsInRyYW5zbGF0ZVgiLCJtZFJhZGlvR3JvdXBEaXJlY3RpdmUiLCJsaW5rUmFkaW9Hcm91cCIsInNldEZvY3VzIiwia2V5ZG93bkxpc3RlbmVyIiwicmdDdHJsIiwic2VsZWN0UHJldmlvdXMiLCJzZWxlY3ROZXh0IiwiZm9ybSIsIlJhZGlvR3JvdXBDb250cm9sbGVyIiwiX3JhZGlvQnV0dG9uUmVuZGVyRm5zIiwiY3JlYXRlUmFkaW9Hcm91cENvbnRyb2xsZXJQcm90byIsIl9uZ01vZGVsQ3RybCIsInJiUmVuZGVyIiwic2V0Vmlld1ZhbHVlIiwiZ2V0Vmlld1ZhbHVlIiwiY2hhbmdlU2VsZWN0ZWRCdXR0b24iLCJzZXRBY3RpdmVEZXNjZW5kYW50IiwicmFkaW9JZCIsImluY3JlbWVudCIsImJ1dHRvbnMiLCJtZFJhZGlvQnV0dG9uRGlyZWN0aXZlIiwibGFzdENoZWNrZWQiLCJidWlsZEFyaWFJRCIsImFyaWFJZCIsImFyaWEtY2hlY2tlZCIsIlNlbGVjdERpcmVjdGl2ZSIsIiRtZFNlbGVjdCIsImxhYmVsRWwiLCJzcGFuV3JhcHBlciIsIm1kT25PcGVuIiwiYXV0b2ZpbGxDbG9uZSIsIm5nLW1vZGVsIiwiYXJpYS1oaWRkZW4iLCJuZXdFbCIsImlubmVySFRNTCIsInNlbGVjdFRlbXBsYXRlIiwibXVsdGlwbGUiLCJzZXRBcmlhTGFiZWwiLCJsYWJlbFRleHQiLCJzeW5jTGFiZWxUZXh0Iiwic2VsZWN0Q29udGFpbmVyIiwic2VsZWN0TWVudUN0cmwiLCJtZFNlbGVjdEN0cmwiLCJzZXRMYWJlbFRleHQiLCJzZWxlY3RlZExhYmVscyIsImNyZWF0ZVNlbGVjdCIsInNlbGVjdEVsIiwic2VsZWN0U2NvcGUiLCJoYW5kbGVLZXlwcmVzcyIsImFsbG93ZWRDb2RlcyIsIm9wZW5TZWxlY3QiLCJvcHROb2RlRm9yS2V5Ym9hcmRTZWFyY2giLCJvcHRpb25DdHJsIiwiaXNNdWx0aXBsZSIsImRlc2VsZWN0Iiwic2VsZWN0IiwiaGFzaEtleSIsInJlZnJlc2hWaWV3VmFsdWUiLCJsb2FkaW5nQXN5bmMiLCJzZWxlY3RlZFRleHQiLCJmb3JtQ3RybCIsImN1c3RvbUxhYmVsIiwiJHJlbW92ZUNvbnRyb2wiLCJvcmlnaW5hbFJlbmRlciIsInNldElzUGxhY2Vob2xkZXIiLCJ0cmlnZ2VyQ2xvc2UiLCJtZE9uQ2xvc2UiLCJkZXJlZ2lzdGVyV2F0Y2hlciIsInBhcnNlciIsInByZXZWYWwiLCJzZXRNdWx0aXBsZSIsImFyaWEtZGlzYWJsZWQiLCJhcmlhQXR0cnMiLCJhcmlhLWV4cGFuZGVkIiwiU2VsZWN0TWVudURpcmVjdGl2ZSIsInByZUxpbmsiLCJhcmlhLW11bHRpc2VsZWN0YWJsZSIsInNlbGVjdEN0cmwiLCJrZXlMaXN0ZW5lciIsImNsaWNrTGlzdGVuZXIiLCJvcHRpb24iLCJvcHRpb25IYXNoS2V5IiwiaGFzaEdldHRlciIsImlzU2VsZWN0ZWQiLCJTZWxlY3RNZW51Q29udHJvbGxlciIsInJlbmRlck11bHRpcGxlIiwibmV3U2VsZWN0ZWRWYWx1ZXMiLCJvbGRTZWxlY3RlZCIsIm5ld1NlbGVjdGVkSGFzaGVzIiwiZGVzZWxlY3RlZCIsImhhc2giLCJyZW5kZXJTaW5ndWxhciIsImRlcmVnaXN0ZXJDb2xsZWN0aW9uV2F0Y2giLCJ2YWxpZGF0ZUFycmF5IiwiJHdhdGNoQ29sbGVjdGlvbiIsImNsZWFyU2VhcmNoVGltZW91dCIsIm9wdE5vZGVzIiwib3B0VGV4dCIsInNlYXJjaFN0ciIsIkNMRUFSX1NFQVJDSF9BRlRFUiIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJzZWFyY2giLCIkb3B0aW9ucyIsInRyYWNrQnkiLCJ0cmFja0J5TG9jYWxzIiwidHJhY2tCeVBhcnNlZCIsInZhbHVlU2NvcGUiLCIkdmFsdWUiLCIkJG1kU2VsZWN0SWQiLCJzZWxlY3ROZXh0SWQiLCJzZWxlY3RlZE9wdGlvbkVscyIsImhhc2hlZFZhbHVlIiwic2V0U2VsZWN0ZWQiLCJhZGRPcHRpb24iLCJyZW1vdmVPcHRpb24iLCJPcHRpb25EaXJlY3RpdmUiLCJzZXRPcHRpb25WYWx1ZSIsIm9sZEhhc2hLZXkiLCJuZXdIYXNoS2V5IiwiYXJpYS1zZWxlY3RlZCIsIm5nVmFsdWUiLCJPcHRpb25Db250cm9sbGVyIiwiT3B0Z3JvdXBEaXJlY3RpdmUiLCJsYWJlbEVsZW1lbnQiLCJTZWxlY3RQcm92aWRlciIsInNlbGVjdERlZmF1bHRPcHRpb25zIiwiZm9jdXNPcHRpb24iLCJvcHRpb25zQXJyYXkiLCJvcHRpb25Ob2RlcyIsImZvY3VzZWROb2RlIiwibmV3T3B0aW9uIiwiZm9jdXNOZXh0T3B0aW9uIiwiZm9jdXNQcmV2T3B0aW9uIiwiY2hlY2tDbG9zZU1lbnUiLCJyZXN0b3JlRm9jdXMiLCJvcHROb2RlIiwiY29udGVudEVsIiwiYW5pbWF0ZVNlbGVjdCIsIiQkbG9hZGluZ0FzeW5jRG9uZSIsInJlc2l6ZWZuIiwibWRTZWxlY3QiLCJjZW50ZXJlZE5vZGUiLCJzZWxlY3ROb2RlIiwiY29udGVudE5vZGUiLCJwYXJlbnRSZWN0IiwidGFyZ2V0UmVjdCIsInNob3VsZE9wZW5Bcm91bmRUYXJnZXQiLCJTRUxFQ1RfRURHRV9NQVJHSU4iLCJzcGFjZUF2YWlsYWJsZSIsIm1heFdpZHRoIiwiaXNTY3JvbGxhYmxlIiwic2VsZWN0ZWROb2RlIiwib3B0Z3JvdXBOb2RlcyIsInNlbGVjdE1lbnVSZWN0IiwiY2VudGVyZWRSZWN0IiwiZ2V0T2Zmc2V0UmVjdCIsImNlbnRlcmVkU3R5bGUiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsInNjcm9sbEJ1ZmZlciIsIm1pbldpZHRoIiwiY29udGFpbmVyUmVjdCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJTaWRlbmF2U2VydmljZSIsIiRtZENvbXBvbmVudFJlZ2lzdHJ5Iiwid2FpdEZvckluc3RhbmNlIiwiZXJyb3JNc2ciLCJpc0xvY2tlZE9wZW4iLCJjYWxsYmFja0ZuIiwiU2lkZW5hdkZvY3VzRGlyZWN0aXZlIiwic2lkZW5hdkN0cmwiLCJmb2N1c0VsZW1lbnQiLCJTaWRlbmF2RGlyZWN0aXZlIiwidXBkYXRlSXNMb2NrZWQiLCJpc0xvY2tlZCIsInVwZGF0ZUlzT3BlbiIsIm9uS2V5RG93biIsInRyaWdnZXJpbmdFbGVtZW50IiwiZm9jdXNFbCIsImxhc3RQYXJlbnRPdmVyRmxvdyIsInRvZ2dsZU9wZW4iLCJpc0VzY2FwZSIsImlzTG9ja2VkT3BlblBhcnNlZCIsIm1kSXNMb2NrZWRPcGVuIiwiJG1lZGlhIiwiZGVzdHJveSIsIiR0b2dnbGVPcGVuIiwiU2lkZW5hdkNvbnRyb2xsZXIiLCJtZENvbXBvbmVudElkIiwiU2xpZGVyRGlyZWN0aXZlIiwidXBkYXRlQWxsIiwicmVmcmVzaFNsaWRlckRpbWVuc2lvbnMiLCJuZ01vZGVsUmVuZGVyIiwicmVkcmF3VGlja3MiLCJ1cGRhdGVNaW4iLCJ1cGRhdGVNYXgiLCJ1cGRhdGVTdGVwIiwic3RlcCIsInVwZGF0ZUFyaWFEaXNhYmxlZCIsIm1kRGlzY3JldGUiLCJudW1TdGVwcyIsInRpY2tDYW52YXMiLCJ0cmFja1RpY2tzU3R5bGUiLCJ0aWNrQ29udGFpbmVyIiwidGlja0N0eCIsImdldENvbnRleHQiLCJmaWxsU3R5bGUiLCJkaW1lbnNpb25zIiwiZ2V0U2xpZGVyRGltZW5zaW9ucyIsImZpbGxSZWN0Iiwic2xpZGVyRGltZW5zaW9ucyIsInRyYWNrQ29udGFpbmVyIiwidGhyb3R0bGVkUmVmcmVzaERpbWVuc2lvbnMiLCJjaGFuZ2VBbW91bnQiLCJzZXRNb2RlbFZhbHVlIiwibWluTWF4VmFsaWRhdG9yIiwic3RlcFZhbGlkYXRvciIsInBlcmNlbnQiLCJzZXRTbGlkZXJQZXJjZW50IiwidGh1bWJUZXh0IiwiZm9ybWF0dGVkVmFsdWUiLCJhY3RpdmVUcmFjayIsInRodW1iQ29udGFpbmVyIiwiaXNEaXNhYmxlZEdldHRlciIsImV4YWN0VmFsIiwicGVyY2VudFRvVmFsdWUiLCJwb3NpdGlvblRvUGVyY2VudCIsImNsb3Nlc3RWYWwiLCJ2YWx1ZVRvUGVyY2VudCIsImlzRHJhZ2dpbmciLCJzZXRTbGlkZXJGcm9tRXZlbnQiLCJpc0Rpc2NyZXRlIiwiYWRqdXN0VGh1bWJQb3NpdGlvbiIsImRvU2xpZGUiLCJpc0Rpc2FibGVkUGFyc2VkIiwidGh1bWIiLCJzdG9wRGlzYWJsZWRXYXRjaCIsImRlYm91bmNlZFVwZGF0ZUFsbCIsIk1kU3ViaGVhZGVyRGlyZWN0aXZlIiwiJG1kU3RpY2t5IiwiZ2V0Q29udGVudCIsIm91dGVySFRNTCIsInN0aWNreUNsb25lIiwiTWRTdGlja3kiLCJzZXR1cFN0aWNreSIsImNvbnRlbnRDdHJsIiwic3RpY2t5QmFzZW9mZnNldCIsImRlYm91bmNlZFJlZnJlc2hFbGVtZW50cyIsInJlZnJlc2hFbGVtZW50cyIsInJlZnJlc2hQb3NpdGlvbiIsImN1cnJlbnRTY3JvbGxUb3AiLCJzZXRDdXJyZW50SXRlbSIsImlzU2Nyb2xsaW5nRG93biIsInByZXZTY3JvbGxUb3AiLCJ0cmFuc2xhdGUiLCJwcmV2Iiwic2V0U3RpY2t5U3RhdGUiLCJhbW91bnQiLCJ0cmFuc2xhdGVZIiwic2V0dXBBdWdtZW50ZWRTY3JvbGxFdmVudHMiLCJjaGVja1N0aWNreVN1cHBvcnQiLCIkZWwiLCJzdGlja3lQcm9wIiwidGVzdEVsIiwic3RpY2t5UHJvcHMiLCJ6LWluZGV4IiwibG9vcFNjcm9sbEV2ZW50IiwibGFzdFNjcm9sbFRpbWUiLCJTQ1JPTExfRU5EX0RFTEFZIiwiaXNTY3JvbGxpbmciLCJicm93c2VyU3RpY2t5U3VwcG9ydCIsIiQkc3RpY2t5IiwiZ2V0RGlyZWN0aXZlIiwiRGlyZWN0aXZlRmFjdG9yeSIsImRpcmVjdGl2ZU5hbWUiLCJldmVudE5hbWUiLCJNZFN3aXRjaCIsIm1kQ2hlY2tib3hEaXJlY3RpdmUiLCJjaGVja2JveExpbmsiLCJjaGVja2JveERpcmVjdGl2ZSIsImRpc2FibGVkR2V0dGVyIiwiZHJhZyIsImlzQ2hhbmdlZCIsImFwcGx5TW9kZWxWYWx1ZSIsInN3aXRjaENvbnRhaW5lciIsIk1kVG9hc3REaXJlY3RpdmUiLCJNZFRvYXN0UHJvdmlkZXIiLCJ0b2FzdERlZmF1bHRPcHRpb25zIiwiJG1kVG9hc3QiLCJhY3RpdmVUb2FzdENvbnRlbnQiLCJ0b2FzdE9wZW5DbGFzcyIsIm9uU3dpcGUiLCJnZXN0dXJlIiwibmV3Q29udGVudCIsIm1kVG9vbGJhckRpcmVjdGl2ZSIsInNldHVwU2Nyb2xsU2hyaW5rIiwib25NZENvbnRlbnRMb2FkIiwibmV3Q29udGVudEVsIiwiY29udGVudEVsZW1lbnQiLCJkZWJvdW5jZWRDb250ZW50U2Nyb2xsIiwidXBkYXRlVG9vbGJhckhlaWdodCIsInRvb2xiYXJIZWlnaHQiLCJtYXJnaW4iLCJzaHJpbmtTcGVlZEZhY3RvciIsIm9uQ29udGVudFNjcm9sbCIsImRlYm91bmNlZFVwZGF0ZUhlaWdodCIsIm1kU2hyaW5rU3BlZWRGYWN0b3IiLCJtZFNjcm9sbFNocmluayIsIk1kVG9vbHRpcERpcmVjdGl2ZSIsIm1hbmlwdWxhdGVFbGVtZW50IiwiYmluZEV2ZW50cyIsImNvbmZpZ3VyZVdhdGNoZXJzIiwiYWRkQXJpYUxhYmVsIiwibWREZWxheSIsIlRPT0xUSVBfU0hPV19ERUxBWSIsInZpc2libGUiLCJkZWJvdW5jZWRPblJlc2l6ZSIsImlzVmlzaWJsZSIsInNob3dUb29sdGlwIiwiaGlkZVRvb2x0aXAiLCJkZXRhY2giLCJnZXRQYXJlbnRXaXRoUG9pbnRlckV2ZW50cyIsImdldE5lYXJlc3RDb250ZW50RWxlbWVudCIsImhhc0NvbXB1dGVkU3R5bGVWYWx1ZSIsImNvbXB1dGVkU3R5bGVzIiwiZW50ZXJIYW5kbGVyIiwic2V0VmlzaWJsZSIsImxlYXZlSGFuZGxlciIsImF1dG9oaWRlIiwicXVldWVkIiwidG9vbHRpcFBhcmVudCIsInBvc2l0aW9uVG9vbHRpcCIsInBvc2l0aW9uQmFja2dyb3VuZCIsInRpcFJlY3QiLCJmaXRJblBhcmVudCIsIlRPT0xUSVBfV0lORE9XX0VER0VfU1BBQ0UiLCJnZXRQb3NpdGlvbiIsImRpciIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJtZERpcmVjdGlvbiIsIk1kQXV0b2NvbXBsZXRlQ3RybCIsInNlYXJjaFRleHQiLCJzZWxlY3RlZEl0ZW0iLCJnYXRoZXJFbGVtZW50cyIsIm1vdmVEcm9wZG93biIsInBvc2l0aW9uRHJvcGRvd24iLCJjb3JyZWN0SG9yaXpvbnRhbEFsaWdubWVudCIsImRyb3Bkb3duIiwiZWxlbWVudHMiLCJ1bCIsInJvb3QiLCJNRU5VX1BBRERJTkciLCJocmVjdCIsIiQiLCJ2cmVjdCIsInNuYXAiLCJib3QiLCJNQVhfSEVJR0hUIiwibWF4SGVpZ2h0IiwiYXV0b2ZvY3VzIiwiaXNSZXF1aXJlZCIsImhhbmRsZVNlYXJjaFRleHQiLCJyZWdpc3RlclNlbGVjdGVkSXRlbVdhdGNoZXIiLCJzZWxlY3RlZEl0ZW1DaGFuZ2UiLCJoYW5kbGVTZWxlY3RlZEl0ZW1DaGFuZ2UiLCJtYWluIiwibGkiLCJnZXRTbmFwVGFyZ2V0IiwiZ2V0QW5ndWxhckVsZW1lbnRzIiwiaGFuZGxlSGlkZGVuQ2hhbmdlIiwiaGlkZGVuIiwib2xkSGlkZGVuIiwib25MaXN0RW50ZXIiLCJub0JsdXIiLCJvbkxpc3RMZWF2ZSIsImhhc0ZvY3VzIiwib25Nb3VzZXVwIiwicHJldmlvdXNTZWxlY3RlZEl0ZW0iLCJnZXREaXNwbGF5VmFsdWUiLCJpdGVtQ2hhbmdlIiwiZ2V0SXRlbVNjb3BlIiwic2VsZWN0ZWRJdGVtV2F0Y2hlcnMiLCJ1bnJlZ2lzdGVyU2VsZWN0ZWRJdGVtV2F0Y2hlciIsInByZXZpb3VzU2VhcmNoVGV4dCIsImdldERlZmF1bHRJbmRleCIsInRleHRDaGFuZ2UiLCJpc01pbkxlbmd0aE1ldCIsImhhbmRsZVF1ZXJ5IiwibG9hZGluZyIsInNob3VsZEhpZGUiLCJ1cGRhdGVNZXNzYWdlcyIsIm1pbkxlbmd0aCIsImtleWRvd24iLCJ1cGRhdGVTY3JvbGwiLCJnZXRNaW5MZW5ndGgiLCJpdGVtVGV4dCIsIml0ZW1OYW1lIiwiYXV0b3NlbGVjdCIsImdldEN1cnJlbnREaXNwbGF5VmFsdWUiLCJkZWZpbmVQcm9wZXJ0eSIsImNsZWFyVmFsdWUiLCJmZXRjaFJlc3VsdHMiLCJoYW5kbGVSZXN1bHRzIiwidGVybSIsIml0ZW1FeHByIiwibWVzc2FnZXMiLCJnZXRDb3VudE1lc3NhZ2UiLCJsYXN0Q291bnQiLCJoZ3QiLCJub0NhY2hlIiwiaXRlbVBhcnRzIiwiaXRlbXNFeHByIiwiY2xlYXIiLCJsaXN0RW50ZXIiLCJsaXN0TGVhdmUiLCJtb3VzZVVwIiwiSVRFTV9IRUlHSFQiLCJNZEF1dG9jb21wbGV0ZSIsImlucHV0TmFtZSIsImlucHV0TWlubGVuZ3RoIiwiaW5wdXRNYXhsZW5ndGgiLCJmbG9hdGluZ0xhYmVsIiwibWVudUNsYXNzIiwiZ2V0SXRlbVRlbXBsYXRlIiwidGVtcGxhdGVUYWciLCJnZXROb0l0ZW1zVGVtcGxhdGUiLCJnZXRJbnB1dEVsZW1lbnQiLCJtZEZsb2F0aW5nTGFiZWwiLCJsZWZ0b3ZlciIsIm5vSXRlbXNUZW1wbGF0ZSIsIml0ZW1UZW1wbGF0ZSIsIk1kSGlnaGxpZ2h0Q3RybCIsInVuc2FmZVRleHQiLCJ3YXRjaGVyIiwicmVnZXgiLCJnZXRSZWdFeHAiLCJzYW5pdGl6ZSIsIk1kSGlnaGxpZ2h0IiwidGVybWluYWwiLCJtZEhpZ2hsaWdodFRleHQiLCJNZEF1dG9jb21wbGV0ZUxpc3RJdGVtIiwiJG1kQXV0b2NvbXBsZXRlQ3RybCIsIm5ld1Njb3BlIiwibWRBdXRvY29tcGxldGVMaXN0SXRlbSIsIk1kQXV0b2NvbXBsZXRlUGFyZW50U2NvcGUiLCJNZENoaXAiLCJERUxFVEVfSElOVF9URU1QTEFURSIsInNlbGVjdGVkQ2hpcCIsIk1kQ2hpcFJlbW92ZSIsInJlbW92ZUNoaXAiLCIkJHJlcGxhY2VkU2NvcGUiLCJNZENoaXBUcmFuc2NsdWRlIiwiJG1kQ2hpcHNDdHJsIiwiJGNoaXAiLCJtZENoaXBUcmFuc2NsdWRlIiwiTWRDaGlwc0N0cmwiLCJ1c2VySW5wdXROZ01vZGVsQ3RybCIsInVzZXJJbnB1dEVsZW1lbnQiLCJkZWxldGVIaW50IiwiZGVsZXRlQnV0dG9uTGFiZWwiLCJjaGlwQnVmZmVyIiwidXNlTWRPbkFwcGVuZCIsImlucHV0S2V5ZG93biIsImdldENoaXBCdWZmZXIiLCJyZXF1aXJlTWF0Y2giLCJhcHBlbmRDaGlwIiwicmVzZXRDaGlwQnVmZmVyIiwic2VsZWN0QW5kRm9jdXNDaGlwU2FmZSIsImNoaXBLZXlkb3duIiwicmVtb3ZlQW5kU2VsZWN0QWRqYWNlbnRDaGlwIiwib25Gb2N1cyIsImdldFBsYWNlaG9sZGVyIiwidXNlU2Vjb25kYXJ5Iiwic2Vjb25kYXJ5UGxhY2Vob2xkZXIiLCJzZWxJbmRleCIsImdldEFkamFjZW50Q2hpcEluZGV4IiwicmVzZXRTZWxlY3RlZENoaXAiLCJuZXdDaGlwIiwibWRPbkFwcGVuZCIsInVzZU1kT25BcHBlbmRFeHByZXNzaW9uIiwicmVtb3ZlQ2hpcEFuZEZvY3VzSW5wdXQiLCJzZWxlY3RDaGlwIiwiZm9jdXNDaGlwIiwic2VsZWN0QW5kRm9jdXNDaGlwIiwiY29uZmlndXJlTmdNb2RlbCIsIm9uSW5wdXRGb2N1cyIsImlucHV0SGFzRm9jdXMiLCJvbklucHV0Qmx1ciIsImNvbmZpZ3VyZVVzZXJJbnB1dCIsImlucHV0RWxlbWVudCIsImNvbmZpZ3VyZUF1dG9jb21wbGV0ZSIsIk1kQ2hpcHMiLCJnZXRUZW1wbGF0ZUJ5UXVlcnkiLCJ1c2VyVGVtcGxhdGUiLCJjaGlwUmVtb3ZlVGVtcGxhdGUiLCJDSElQX1JFTU9WRV9URU1QTEFURSIsImNoaXBDb250ZW50c1RlbXBsYXRlIiwiQ0hJUF9ERUZBVUxUX1RFTVBMQVRFIiwiY2hpcElucHV0VGVtcGxhdGUiLCJDSElQX0lOUFVUX1RFTVBMQVRFIiwic3RhdGljQ2hpcHMiLCJtZENoaXBzQ3RybCIsImNvbXBpbGVkU3RhdGljQ2hpcHMiLCJNRF9DSElQU19URU1QTEFURSIsIk1kQ29udGFjdENoaXBzQ3RybCIsInF1ZXJ5Q29udGFjdCIsImNvbnRhY3RRdWVyeSIsIiRxdWVyeSIsImZpbHRlclNlbGVjdGVkIiwiZmlsdGVyU2VsZWN0ZWRDb250YWN0cyIsImNvbnRhY3QiLCJjb250YWN0cyIsIk1kQ29udGFjdENoaXBzIiwiTURfQ09OVEFDVF9DSElQU19URU1QTEFURSIsImNvbnRhY3ROYW1lIiwiY29udGFjdEltYWdlIiwiY29udGFjdEVtYWlsIiwiTWRUYWIiLCJ0YWJzIiwiaW5zZXJ0VGFiIiwiYWN0aXZlIiwiZ2V0SW5kZXgiLCJyZWZyZXNoSW5kZXgiLCJuZXdJbmRleCIsInVwZGF0ZVRhYk9yZGVyIiwicmVtb3ZlVGFiIiwiZ2V0TGFiZWwiLCJnZXRMYWJlbEF0dHJpYnV0ZSIsImdldExhYmVsRWxlbWVudCIsImdldEVsZW1lbnRDb250ZW50cyIsIk1kVGFiSXRlbSIsIk1kVGFiTGFiZWwiLCJNZFRhYlNjcm9sbCIsIm1kVGFiU2Nyb2xsIiwiTWRUYWJzQ29udHJvbGxlciIsIiRtZFRhYklua1JpcHBsZSIsInNlbGVjdGVkSW5kZXgiLCJjb21waWxlVGVtcGxhdGUiLCJ1cGRhdGVIZWlnaHRGcm9tQ29udGVudCIsImFkanVzdE9mZnNldCIsInVwZGF0ZVBhZ2luYXRpb24iLCJsb2FkZWQiLCIkbWRUYWJzVGVtcGxhdGUiLCJoYW5kbGVXaW5kb3dSZXNpemUiLCJwYWdpbmciLCJ1cGRhdGVJbmtCYXJTdHlsZXMiLCJub0lua0JhciIsImhhbmRsZVNlbGVjdGVkSW5kZXhDaGFuZ2UiLCJkZXN0cm95ZWQiLCJoYW5kbGVIYXNDb250ZW50IiwiaGFzQ29udGVudCIsImhhbmRsZU9mZnNldENoYW5nZSIsInNob3VsZENlbnRlclRhYnMiLCJoYW5kbGVGb2N1c0luZGV4Q2hhbmdlIiwib2xkSW5kZXgiLCJyZWRpcmVjdEZvY3VzIiwiZ2V0TmVhcmVzdFNhZmVJbmRleCIsImxhc3RTZWxlY3RlZEluZGV4IiwiaGFuZGxlUmVzaXplV2hlblZpc2libGUiLCJpbmNyZW1lbnRTZWxlY3RlZEluZGV4IiwibG9ja2VkIiwiZm9jdXNJbmRleCIsImxhc3RDbGljayIsInNjcm9sbCIsInNob3VsZFBhZ2luYXRlIiwiZml4T2Zmc2V0Iiwid2hlZWxEZWx0YSIsIm5leHRQYWdlIiwidGFiIiwidmlld3BvcnRXaWR0aCIsImNhbnZhcyIsImNsaWVudFdpZHRoIiwidG90YWxXaWR0aCIsInByZXZpb3VzUGFnZSIsInRhYkRhdGEiLCJwcm90byIsImlzTGVmdCIsImlzUmlnaHQiLCJzaG91bGRSZW5kZXIiLCJub0Rpc2Nvbm5lY3QiLCJwcm9jZXNzUXVldWUiLCJ1cGRhdGVIYXNDb250ZW50IiwiZ2V0RWxlbWVudHMiLCJ3cmFwcGVyIiwiZHVtbWllcyIsImlua0JhciIsImNvbnRlbnRzV3JhcHBlciIsImNhblBhZ2VCYWNrIiwiY2FuUGFnZUZvcndhcmQiLCJsYXN0VGFiIiwic2hvdWxkU3RyZXRjaFRhYnMiLCJzdHJldGNoVGFicyIsImNlbnRlclRhYnMiLCJub1BhZ2luYXRpb24iLCJjYW52YXNXaWR0aCIsIm1heE9mZnNldCIsImZvY3VzSXRlbSIsImluYyIsInF1ZXVlIiwiZHluYW1pY0hlaWdodCIsInRhYkNvbnRlbnQiLCJjb250ZW50SGVpZ2h0IiwidGFic0hlaWdodCIsIm5ld0hlaWdodCIsImN1cnJlbnRIZWlnaHQiLCJhbmltYXRlIiwidXBkYXRlSW5rQmFyQ2xhc3NOYW1lIiwiaW5rIiwiTWRUYWJzIiwic3dpcGVDb250ZW50IiwiTWRUZW1wbGF0ZSIsImhhbmRsZVNjb3BlIiwiZGlzY29ubmVjdCIsInJlY29ubmVjdCIsImNvbXBpbGVTY29wZSIsImNvbm5lY3RlZCIsMTIsIi4vYW5ndWxhci1tYXRlcmlhbCIsMTMsIm1pbkVyciIsIkVycm9yQ29uc3RydWN0b3IiLCJwYXJhbVByZWZpeCIsIlNLSVBfSU5ERVhFUyIsInRlbXBsYXRlQXJncyIsInNoaWZ0ZWRJbmRleCIsInRvRGVidWdTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnQiLCJpc0FycmF5TGlrZSIsImlzV2luZG93IiwiTk9ERV9UWVBFX0VMRU1FTlQiLCJpc1ByaW1pdGl2ZSIsImlzQmxhbmtPYmplY3QiLCJmb3JFYWNoU29ydGVkIiwicmV2ZXJzZVBhcmFtcyIsIml0ZXJhdG9yRm4iLCJ1aWQiLCJzZXRIYXNoS2V5IiwiaCIsIiQkaGFzaEtleSIsImJhc2VFeHRlbmQiLCJkc3QiLCJvYmpzIiwiZGVlcCIsImlpIiwiamoiLCJzcmMiLCJpc0RhdGUiLCJ2YWx1ZU9mIiwibWVyZ2UiLCJ0b0ludCIsImV4dHJhIiwidmFsdWVGbiIsImhhc0N1c3RvbVRvU3RyaW5nIiwiZ2V0UHJvdG90eXBlT2YiLCJpc1JlZ0V4cCIsImlzU2NvcGUiLCJpc0ZpbGUiLCJpc0Zvcm1EYXRhIiwiaXNCbG9iIiwiaXNCb29sZWFuIiwiaXNQcm9taXNlTGlrZSIsImlzVHlwZWRBcnJheSIsIlRZUEVEX0FSUkFZX1JFR0VYUCIsIm1ha2VNYXAiLCJub2RlTmFtZV8iLCJsb3dlcmNhc2UiLCJhcnJheVJlbW92ZSIsImFycmF5Iiwic291cmNlIiwiZGVzdGluYXRpb24iLCJzdGFja1NvdXJjZSIsInN0YWNrRGVzdCIsImNvbnN0cnVjdG9yIiwiZ2V0VGltZSIsImVtcHR5T2JqZWN0IiwibGFzdEluZGV4Iiwic2hhbGxvd0NvcHkiLCJvMSIsIm8yIiwia2V5U2V0IiwidDEiLCJ0MiIsImNyZWF0ZU1hcCIsImFycmF5MSIsImFycmF5MiIsInNsaWNlQXJncyIsInN0YXJ0SW5kZXgiLCJjdXJyeUFyZ3MiLCJ0b0pzb25SZXBsYWNlciIsInRvSnNvbiIsInByZXR0eSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmcm9tSnNvbiIsImpzb24iLCJwYXJzZSIsInRpbWV6b25lVG9PZmZzZXQiLCJ0aW1lem9uZSIsImZhbGxiYWNrIiwicmVxdWVzdGVkVGltZXpvbmVPZmZzZXQiLCJhZGREYXRlTWludXRlcyIsImRhdGUiLCJtaW51dGVzIiwic2V0TWludXRlcyIsImdldE1pbnV0ZXMiLCJjb252ZXJ0VGltZXpvbmVUb0xvY2FsIiwicmV2ZXJzZSIsInRpbWV6b25lT2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJzdGFydGluZ1RhZyIsImVsZW1IdG1sIiwiTk9ERV9UWVBFX1RFWFQiLCJ0cnlEZWNvZGVVUklDb21wb25lbnQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJwYXJzZUtleVZhbHVlIiwia2V5VmFsdWUiLCJrZXlfdmFsdWUiLCJ0b0tleVZhbHVlIiwicGFydHMiLCJhcnJheVZhbHVlIiwiZW5jb2RlVXJpUXVlcnkiLCJlbmNvZGVVcmlTZWdtZW50IiwicGN0RW5jb2RlU3BhY2VzIiwiZ2V0TmdBdHRyaWJ1dGUiLCJuZ0F0dHIiLCJuZ0F0dHJQcmVmaXhlcyIsImFuZ3VsYXJJbml0IiwiYXBwRWxlbWVudCIsInByZWZpeCIsImNhbmRpZGF0ZSIsInN0cmljdERpIiwibW9kdWxlcyIsImRlZmF1bHRDb25maWciLCJkb0Jvb3RzdHJhcCIsImluamVjdG9yIiwidGFnIiwiZGVidWdJbmZvRW5hYmxlZCIsIiRjb21waWxlUHJvdmlkZXIiLCJjcmVhdGVJbmplY3RvciIsIk5HX0VOQUJMRV9ERUJVR19JTkZPIiwiTkdfREVGRVJfQk9PVFNUUkFQIiwicmVzdW1lQm9vdHN0cmFwIiwiZXh0cmFNb2R1bGVzIiwicmVzdW1lRGVmZXJyZWRCb290c3RyYXAiLCJyZWxvYWRXaXRoRGVidWdJbmZvIiwibG9jYXRpb24iLCJyZWxvYWQiLCJnZXRUZXN0YWJpbGl0eSIsInJvb3RFbGVtZW50Iiwic25ha2VfY2FzZSIsInNlcGFyYXRvciIsIlNOQUtFX0NBU0VfUkVHRVhQIiwibGV0dGVyIiwiYmluZEpRdWVyeSIsIm9yaWdpbmFsQ2xlYW5EYXRhIiwiYmluZEpRdWVyeUZpcmVkIiwianFOYW1lIiwianEiLCJKUUxpdGVQcm90b3R5cGUiLCJpbmhlcml0ZWREYXRhIiwiY2xlYW5EYXRhIiwiZWxlbXMiLCJza2lwRGVzdHJveU9uTmV4dEpRdWVyeUNsZWFuRGF0YSIsIl9kYXRhIiwiSlFMaXRlIiwiYXNzZXJ0QXJnRm4iLCJhY2NlcHRBcnJheUFubm90YXRpb24iLCJhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eSIsImdldHRlciIsInBhdGgiLCJiaW5kRm5Ub1Njb3BlIiwibGFzdEluc3RhbmNlIiwiZ2V0QmxvY2tOb2RlcyIsImVuZE5vZGUiLCJibG9ja05vZGVzIiwibmV4dFNpYmxpbmciLCJzZXR1cE1vZHVsZUxvYWRlciIsImVuc3VyZSIsIiRpbmplY3Rvck1pbkVyciIsIiQkbWluRXJyIiwicmVxdWlyZXMiLCJjb25maWdGbiIsImludm9rZUxhdGVyIiwiaW5zZXJ0TWV0aG9kIiwiaW52b2tlUXVldWUiLCJtb2R1bGVJbnN0YW5jZSIsImludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSIsInJlY2lwZU5hbWUiLCJmYWN0b3J5RnVuY3Rpb24iLCIkJG1vZHVsZU5hbWUiLCJjb25maWdCbG9ja3MiLCJydW5CbG9ja3MiLCJfaW52b2tlUXVldWUiLCJfY29uZmlnQmxvY2tzIiwiX3J1bkJsb2NrcyIsImJsb2NrIiwic2VyaWFsaXplT2JqZWN0Iiwic2VlbiIsInB1Ymxpc2hFeHRlcm5hbEFQSSIsInZlcnNpb24iLCJ1cHBlcmNhc2UiLCJjYWxsYmFja3MiLCIkJGNzcCIsImNzcCIsImFuZ3VsYXJNb2R1bGUiLCIkTG9jYWxlUHJvdmlkZXIiLCIkJHNhbml0aXplVXJpIiwiJCRTYW5pdGl6ZVVyaVByb3ZpZGVyIiwiJENvbXBpbGVQcm92aWRlciIsImh0bWxBbmNob3JEaXJlY3RpdmUiLCJ0ZXh0YXJlYSIsImZvcm1EaXJlY3RpdmUiLCJzY3JpcHQiLCJzY3JpcHREaXJlY3RpdmUiLCJzZWxlY3REaXJlY3RpdmUiLCJzdHlsZURpcmVjdGl2ZSIsIm9wdGlvbkRpcmVjdGl2ZSIsIm5nQmluZCIsIm5nQmluZERpcmVjdGl2ZSIsIm5nQmluZEh0bWwiLCJuZ0JpbmRIdG1sRGlyZWN0aXZlIiwibmdCaW5kVGVtcGxhdGUiLCJuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSIsIm5nQ2xhc3MiLCJuZ0NsYXNzRGlyZWN0aXZlIiwibmdDbGFzc0V2ZW4iLCJuZ0NsYXNzRXZlbkRpcmVjdGl2ZSIsIm5nQ2xhc3NPZGQiLCJuZ0NsYXNzT2RkRGlyZWN0aXZlIiwibmdDbG9hayIsIm5nQ2xvYWtEaXJlY3RpdmUiLCJuZ0NvbnRyb2xsZXIiLCJuZ0NvbnRyb2xsZXJEaXJlY3RpdmUiLCJuZ0Zvcm0iLCJuZ0Zvcm1EaXJlY3RpdmUiLCJuZ0hpZGUiLCJuZ0hpZGVEaXJlY3RpdmUiLCJuZ0lmIiwibmdJZkRpcmVjdGl2ZSIsIm5nSW5jbHVkZSIsIm5nSW5jbHVkZURpcmVjdGl2ZSIsIm5nSW5pdCIsIm5nSW5pdERpcmVjdGl2ZSIsIm5nTm9uQmluZGFibGUiLCJuZ05vbkJpbmRhYmxlRGlyZWN0aXZlIiwibmdQbHVyYWxpemUiLCJuZ1BsdXJhbGl6ZURpcmVjdGl2ZSIsIm5nUmVwZWF0IiwibmdSZXBlYXREaXJlY3RpdmUiLCJuZ1Nob3ciLCJuZ1Nob3dEaXJlY3RpdmUiLCJuZ1N0eWxlIiwibmdTdHlsZURpcmVjdGl2ZSIsIm5nU3dpdGNoIiwibmdTd2l0Y2hEaXJlY3RpdmUiLCJuZ1N3aXRjaFdoZW4iLCJuZ1N3aXRjaFdoZW5EaXJlY3RpdmUiLCJuZ1N3aXRjaERlZmF1bHQiLCJuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUiLCJuZ09wdGlvbnMiLCJuZ09wdGlvbnNEaXJlY3RpdmUiLCJuZ1RyYW5zY2x1ZGUiLCJuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUiLCJuZ01vZGVsRGlyZWN0aXZlIiwibmdMaXN0IiwibmdMaXN0RGlyZWN0aXZlIiwibmdDaGFuZ2UiLCJuZ0NoYW5nZURpcmVjdGl2ZSIsInBhdHRlcm4iLCJwYXR0ZXJuRGlyZWN0aXZlIiwibmdQYXR0ZXJuIiwicmVxdWlyZWREaXJlY3RpdmUiLCJuZ1JlcXVpcmVkIiwibWlubGVuZ3RoIiwibWlubGVuZ3RoRGlyZWN0aXZlIiwibmdNaW5sZW5ndGgiLCJtYXhsZW5ndGhEaXJlY3RpdmUiLCJuZ01heGxlbmd0aCIsIm5nVmFsdWVEaXJlY3RpdmUiLCJuZ01vZGVsT3B0aW9ucyIsIm5nTW9kZWxPcHRpb25zRGlyZWN0aXZlIiwibmdJbmNsdWRlRmlsbENvbnRlbnREaXJlY3RpdmUiLCJuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlcyIsIm5nRXZlbnREaXJlY3RpdmVzIiwiJGFuY2hvclNjcm9sbCIsIiRBbmNob3JTY3JvbGxQcm92aWRlciIsIiRBbmltYXRlUHJvdmlkZXIiLCIkJGFuaW1hdGVRdWV1ZSIsIiQkQ29yZUFuaW1hdGVRdWV1ZVByb3ZpZGVyIiwiJCRDb3JlQW5pbWF0ZVJ1bm5lclByb3ZpZGVyIiwiJGJyb3dzZXIiLCIkQnJvd3NlclByb3ZpZGVyIiwiJENhY2hlRmFjdG9yeVByb3ZpZGVyIiwiJENvbnRyb2xsZXJQcm92aWRlciIsIiREb2N1bWVudFByb3ZpZGVyIiwiJGV4Y2VwdGlvbkhhbmRsZXIiLCIkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyIiwiJGZpbHRlciIsIiRGaWx0ZXJQcm92aWRlciIsIiRJbnRlcnBvbGF0ZVByb3ZpZGVyIiwiJGludGVydmFsIiwiJEludGVydmFsUHJvdmlkZXIiLCIkSHR0cFByb3ZpZGVyIiwiJGh0dHBQYXJhbVNlcmlhbGl6ZXIiLCIkSHR0cFBhcmFtU2VyaWFsaXplclByb3ZpZGVyIiwiJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2UiLCIkSHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZVByb3ZpZGVyIiwiJGh0dHBCYWNrZW5kIiwiJEh0dHBCYWNrZW5kUHJvdmlkZXIiLCIkbG9jYXRpb24iLCIkTG9jYXRpb25Qcm92aWRlciIsIiRMb2dQcm92aWRlciIsIiRQYXJzZVByb3ZpZGVyIiwiJFJvb3RTY29wZVByb3ZpZGVyIiwiJFFQcm92aWRlciIsIiQkcSIsIiQkUVByb3ZpZGVyIiwiJHNjZSIsIiRTY2VQcm92aWRlciIsIiRzY2VEZWxlZ2F0ZSIsIiRTY2VEZWxlZ2F0ZVByb3ZpZGVyIiwiJFNuaWZmZXJQcm92aWRlciIsIiRUZW1wbGF0ZUNhY2hlUHJvdmlkZXIiLCIkVGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIiLCIkJHRlc3RhYmlsaXR5IiwiJCRUZXN0YWJpbGl0eVByb3ZpZGVyIiwiJFRpbWVvdXRQcm92aWRlciIsIiRXaW5kb3dQcm92aWRlciIsIiQkUkFGUHJvdmlkZXIiLCIkJGpxTGl0ZVByb3ZpZGVyIiwiJCRIYXNoTWFwUHJvdmlkZXIiLCIkJGNvb2tpZVJlYWRlciIsIiQkQ29va2llUmVhZGVyUHJvdmlkZXIiLCJqcU5leHRJZCIsImpxSWQiLCJjYW1lbENhc2UiLCJTUEVDSUFMX0NIQVJTX1JFR0VYUCIsIk1PWl9IQUNLX1JFR0VYUCIsImpxTGl0ZUlzVGV4dE5vZGUiLCJIVE1MX1JFR0VYUCIsImpxTGl0ZUFjY2VwdHNEYXRhIiwiTk9ERV9UWVBFX0RPQ1VNRU5UIiwianFMaXRlSGFzRGF0YSIsImpxQ2FjaGUiLCJuZzMzOSIsImpxTGl0ZUJ1aWxkRnJhZ21lbnQiLCJ0bXAiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJUQUdfTkFNRV9SRUdFWFAiLCJleGVjIiwid3JhcE1hcCIsIl9kZWZhdWx0IiwiWEhUTUxfVEFHX1JFR0VYUCIsImxhc3RDaGlsZCIsImpxTGl0ZVBhcnNlSFRNTCIsInBhcnNlZCIsIlNJTkdMRV9UQUdfUkVHRVhQIiwiYXJnSXNTdHJpbmciLCJqcUxpdGVNaW5FcnIiLCJqcUxpdGVBZGROb2RlcyIsImpxTGl0ZUNsb25lIiwianFMaXRlRGVhbG9jIiwib25seURlc2NlbmRhbnRzIiwianFMaXRlUmVtb3ZlRGF0YSIsImRlc2NlbmRhbnRzIiwianFMaXRlT2ZmIiwidW5zdXBwb3J0ZWQiLCJleHBhbmRvU3RvcmUiLCJqcUxpdGVFeHBhbmRvU3RvcmUiLCJsaXN0ZW5lckZucyIsInJlbW92ZUV2ZW50TGlzdGVuZXJGbiIsImV4cGFuZG9JZCIsImNyZWF0ZUlmTmVjZXNzYXJ5IiwianFMaXRlRGF0YSIsImlzU2ltcGxlU2V0dGVyIiwiaXNTaW1wbGVHZXR0ZXIiLCJtYXNzR2V0dGVyIiwianFMaXRlSGFzQ2xhc3MiLCJzZWxlY3RvciIsImpxTGl0ZVJlbW92ZUNsYXNzIiwiY3NzQ2xhc3NlcyIsImNzc0NsYXNzIiwianFMaXRlQWRkQ2xhc3MiLCJleGlzdGluZ0NsYXNzZXMiLCJqcUxpdGVDb250cm9sbGVyIiwianFMaXRlSW5oZXJpdGVkRGF0YSIsIm5hbWVzIiwiTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UIiwianFMaXRlRW1wdHkiLCJqcUxpdGVSZW1vdmUiLCJrZWVwRGF0YSIsImpxTGl0ZURvY3VtZW50TG9hZGVkIiwid2luIiwicmVhZHlTdGF0ZSIsImdldEJvb2xlYW5BdHRyTmFtZSIsImJvb2xlYW5BdHRyIiwiQk9PTEVBTl9BVFRSIiwiQk9PTEVBTl9FTEVNRU5UUyIsImdldEFsaWFzZWRBdHRyTmFtZSIsIkFMSUFTRURfQVRUUiIsImNyZWF0ZUV2ZW50SGFuZGxlciIsImV2ZW50SGFuZGxlciIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJldmVudEZucyIsImV2ZW50Rm5zTGVuZ3RoIiwiaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwib3JpZ2luYWxTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsIm5leHRVaWRGbiIsIm9ialR5cGUiLCJIYXNoTWFwIiwiaXNvbGF0ZWRVaWQiLCJhbm9uRm4iLCJmblRleHQiLCJTVFJJUF9DT01NRU5UUyIsIkZOX0FSR1MiLCJhbm5vdGF0ZSIsImFyZ0RlY2wiLCJGTl9BUkdfU1BMSVQiLCJGTl9BUkciLCJ1bmRlcnNjb3JlIiwibW9kdWxlc1RvTG9hZCIsInN1cHBvcnRPYmplY3QiLCJkZWxlZ2F0ZSIsInByb3ZpZGVyXyIsInByb3ZpZGVySW5qZWN0b3IiLCJpbnN0YW50aWF0ZSIsInByb3ZpZGVyQ2FjaGUiLCJwcm92aWRlclN1ZmZpeCIsImVuZm9yY2VSZXR1cm5WYWx1ZSIsImluc3RhbmNlSW5qZWN0b3IiLCJmYWN0b3J5Rm4iLCJlbmZvcmNlIiwiaW5zdGFuY2VDYWNoZSIsInNlcnZpY2VOYW1lIiwiZGVjb3JGbiIsIm9yaWdQcm92aWRlciIsIm9yaWckZ2V0Iiwib3JpZ0luc3RhbmNlIiwibG9hZE1vZHVsZXMiLCJtb2R1bGVGbiIsInJ1bkludm9rZVF1ZXVlIiwiaW52b2tlQXJncyIsImxvYWRlZE1vZHVsZXMiLCJjcmVhdGVJbnRlcm5hbEluamVjdG9yIiwiZ2V0U2VydmljZSIsImNhbGxlciIsIklOU1RBTlRJQVRJTkciLCIkJGFubm90YXRlIiwiVHlwZSIsInJldHVybmVkVmFsdWUiLCJhdXRvU2Nyb2xsaW5nRW5hYmxlZCIsImRpc2FibGVBdXRvU2Nyb2xsaW5nIiwiZ2V0Rmlyc3RBbmNob3IiLCJnZXRZT2Zmc2V0IiwieU9mZnNldCIsInNjcm9sbFRvIiwic2Nyb2xsSW50b1ZpZXciLCJlbGVtVG9wIiwic2Nyb2xsQnkiLCJnZXRFbGVtZW50c0J5TmFtZSIsIm9sZFZhbCIsInNwbGl0Q2xhc3NlcyIsInByZXBhcmVBbmltYXRlT3B0aW9ucyIsIkJyb3dzZXIiLCJjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdCIsIm91dHN0YW5kaW5nUmVxdWVzdENvdW50Iiwib3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzIiwiZ2V0SGFzaCIsImNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlIiwiY2FjaGVTdGF0ZSIsImZpcmVVcmxDaGFuZ2UiLCJnZXRDdXJyZW50U3RhdGUiLCJoaXN0b3J5IiwiY2FjaGVkU3RhdGUiLCJsYXN0Q2FjaGVkU3RhdGUiLCJsYXN0QnJvd3NlclVybCIsImxhc3RIaXN0b3J5U3RhdGUiLCJ1cmxDaGFuZ2VMaXN0ZW5lcnMiLCJwZW5kaW5nRGVmZXJJZHMiLCJpc01vY2siLCIkJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0IiwiJCRpbmNPdXRzdGFuZGluZ1JlcXVlc3RDb3VudCIsIm5vdGlmeVdoZW5Ob091dHN0YW5kaW5nUmVxdWVzdHMiLCJiYXNlRWxlbWVudCIsInJlbG9hZExvY2F0aW9uIiwic2FtZVN0YXRlIiwic2FtZUJhc2UiLCJzdHJpcEhhc2giLCJ1cmxDaGFuZ2VJbml0Iiwib25VcmxDaGFuZ2UiLCIkJGFwcGxpY2F0aW9uRGVzdHJveWVkIiwiJCRjaGVja1VybENoYW5nZSIsImJhc2VIcmVmIiwidGltZW91dElkIiwiZGVmZXJJZCIsImNhY2hlRmFjdG9yeSIsImNhY2hlSWQiLCJyZWZyZXNoIiwiZnJlc2hFbmQiLCJzdGFsZUVuZCIsIm5leHRFbnRyeSIsInByZXZFbnRyeSIsImNhY2hlcyIsInN0YXRzIiwiY2FwYWNpdHkiLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJscnVIYXNoIiwibHJ1RW50cnkiLCJyZW1vdmVBbGwiLCIkJHNhbml0aXplVXJpUHJvdmlkZXIiLCJwYXJzZUlzb2xhdGVCaW5kaW5ncyIsImlzQ29udHJvbGxlciIsIkxPQ0FMX1JFR0VYUCIsImJpbmRpbmdzIiwic2NvcGVOYW1lIiwiJGNvbXBpbGVNaW5FcnIiLCJtb2RlIiwiY29sbGVjdGlvbiIsInBhcnNlRGlyZWN0aXZlQmluZGluZ3MiLCJpZGVudGlmaWVyRm9yQ29udHJvbGxlciIsImFzc2VydFZhbGlkRGlyZWN0aXZlTmFtZSIsImhhc0RpcmVjdGl2ZXMiLCJTdWZmaXgiLCJDT01NRU5UX0RJUkVDVElWRV9SRUdFWFAiLCJDTEFTU19ESVJFQ1RJVkVfUkVHRVhQIiwiQUxMX09SX05PVEhJTkdfQVRUUlMiLCJSRVFVSVJFX1BSRUZJWF9SRUdFWFAiLCJFVkVOVF9IQU5ETEVSX0FUVFJfUkVHRVhQIiwicmVnaXN0ZXJEaXJlY3RpdmUiLCJkaXJlY3RpdmVGYWN0b3J5IiwiZGlyZWN0aXZlcyIsIiQkYmluZGluZ3MiLCJhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCIsInJlZ2V4cCIsImltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCIsInNhZmVBZGRDbGFzcyIsIiRjb21waWxlTm9kZXMiLCJ0cmFuc2NsdWRlRm4iLCJtYXhQcmlvcml0eSIsImlnbm9yZURpcmVjdGl2ZSIsInByZXZpb3VzQ29tcGlsZUNvbnRleHQiLCJub2RlVmFsdWUiLCJjb21wb3NpdGVMaW5rRm4iLCJjb21waWxlTm9kZXMiLCIkJGFkZFNjb3BlQ2xhc3MiLCJuYW1lc3BhY2UiLCJjbG9uZUNvbm5lY3RGbiIsInBhcmVudEJvdW5kVHJhbnNjbHVkZUZuIiwidHJhbnNjbHVkZUNvbnRyb2xsZXJzIiwiZnV0dXJlUGFyZW50RWxlbWVudCIsIiQkYm91bmRUcmFuc2NsdWRlIiwiZGV0ZWN0TmFtZXNwYWNlRm9yQ2hpbGRFbGVtZW50cyIsIiRsaW5rTm9kZSIsIndyYXBUZW1wbGF0ZSIsImNvbnRyb2xsZXJOYW1lIiwiJCRhZGRTY29wZUluZm8iLCJub2RlTGlzdCIsIm5vZGVMaW5rRm4iLCJjaGlsZExpbmtGbiIsImNoaWxkU2NvcGUiLCJpZHgiLCJjaGlsZEJvdW5kVHJhbnNjbHVkZUZuIiwic3RhYmxlTm9kZUxpc3QiLCJub2RlTGlua0ZuRm91bmQiLCJub2RlTGlzdExlbmd0aCIsImxpbmtGbnMiLCJkZXN0cm95QmluZGluZ3MiLCIkJGRlc3Ryb3lCaW5kaW5ncyIsInRyYW5zY2x1ZGVPblRoaXNFbGVtZW50IiwiY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4iLCJ0ZW1wbGF0ZU9uVGhpc0VsZW1lbnQiLCJsaW5rRm5Gb3VuZCIsIkF0dHJpYnV0ZXMiLCJjb2xsZWN0RGlyZWN0aXZlcyIsImFwcGx5RGlyZWN0aXZlc1RvTm9kZSIsIiQkZWxlbWVudCIsInByZXZpb3VzQm91bmRUcmFuc2NsdWRlRm4iLCJib3VuZFRyYW5zY2x1ZGVGbiIsInRyYW5zY2x1ZGVkU2NvcGUiLCJjbG9uZUZuIiwiY29udGFpbmluZ1Njb3BlIiwiJCR0cmFuc2NsdWRlZCIsImF0dHJzTWFwIiwiYWRkRGlyZWN0aXZlIiwiZGlyZWN0aXZlTm9ybWFsaXplIiwibk5hbWUiLCJuZ0F0dHJOYW1lIiwiaXNOZ0F0dHIiLCJuQXR0cnMiLCJhdHRyU3RhcnROYW1lIiwiYXR0ckVuZE5hbWUiLCJOR19BVFRSX0JJTkRJTkciLCJQUkVGSVhfUkVHRVhQIiwiZGlyZWN0aXZlTk5hbWUiLCJkaXJlY3RpdmVJc011bHRpRWxlbWVudCIsImFkZEF0dHJJbnRlcnBvbGF0ZURpcmVjdGl2ZSIsImFuaW1WYWwiLCJtc2llIiwiYWRkVGV4dEludGVycG9sYXRlRGlyZWN0aXZlIiwiTk9ERV9UWVBFX0NPTU1FTlQiLCJieVByaW9yaXR5IiwiZ3JvdXBTY2FuIiwiYXR0clN0YXJ0IiwiYXR0ckVuZCIsImRlcHRoIiwiZ3JvdXBFbGVtZW50c0xpbmtGbldyYXBwZXIiLCJjb21waWxlTm9kZSIsInRlbXBsYXRlQXR0cnMiLCJqcUNvbGxlY3Rpb24iLCJvcmlnaW5hbFJlcGxhY2VEaXJlY3RpdmUiLCJwcmVMaW5rRm5zIiwicG9zdExpbmtGbnMiLCJhZGRMaW5rRm5zIiwibmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIiwiJCRpc29sYXRlU2NvcGUiLCJjbG9uZUFuZEFubm90YXRlRm4iLCJnZXRDb250cm9sbGVycyIsImVsZW1lbnRDb250cm9sbGVycyIsImluaGVyaXRUeXBlIiwiZGF0YU5hbWUiLCJzZXR1cENvbnRyb2xsZXJzIiwiY29udHJvbGxlckRpcmVjdGl2ZXMiLCJjb250cm9sbGVyS2V5IiwiJHRyYW5zY2x1ZGUiLCJjb250cm9sbGVySW5zdGFuY2UiLCJoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSIsImxpbmtOb2RlIiwidGhpc0xpbmtGbiIsImNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlIiwiY2xvbmVBdHRhY2hGbiIsInNjb3BlVG9DaGlsZCIsInRlbXBsYXRlRGlyZWN0aXZlIiwiJCRvcmlnaW5hbERpcmVjdGl2ZSIsImluaXRpYWxpemVEaXJlY3RpdmVCaW5kaW5ncyIsImNvbnRyb2xsZXJGb3JCaW5kaW5ncyIsInNjb3BlRGlyZWN0aXZlIiwibmV3U2NvcGVEaXJlY3RpdmUiLCJpZGVudGlmaWVyIiwiY29udHJvbGxlclJlc3VsdCIsImludm9rZUxpbmtGbiIsImRpcmVjdGl2ZVZhbHVlIiwidGVybWluYWxQcmlvcml0eSIsIm5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUiLCJoYXNUcmFuc2NsdWRlRGlyZWN0aXZlIiwiaGFzVGVtcGxhdGUiLCIkY29tcGlsZU5vZGUiLCJyZXBsYWNlRGlyZWN0aXZlIiwiY2hpbGRUcmFuc2NsdWRlRm4iLCIkJHN0YXJ0IiwiJCRlbmQiLCJhc3NlcnROb0R1cGxpY2F0ZSIsIiQkdGxiIiwiY3JlYXRlQ29tbWVudCIsInJlcGxhY2VXaXRoIiwiZGVub3JtYWxpemVUZW1wbGF0ZSIsInJlbW92ZUNvbW1lbnRzIiwidGVtcGxhdGVOYW1lc3BhY2UiLCJuZXdUZW1wbGF0ZUF0dHJzIiwidGVtcGxhdGVEaXJlY3RpdmVzIiwidW5wcm9jZXNzZWREaXJlY3RpdmVzIiwibWFya0RpcmVjdGl2ZXNBc0lzb2xhdGUiLCJtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyIsImNvbXBpbGVUZW1wbGF0ZVVybCIsInREaXJlY3RpdmVzIiwic3RhcnRBdHRyTmFtZSIsImVuZEF0dHJOYW1lIiwibXVsdGlFbGVtZW50Iiwic3JjQXR0ciIsImRzdEF0dHIiLCJhZnRlclRlbXBsYXRlTm9kZUxpbmtGbiIsImFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiIsImxpbmtRdWV1ZSIsImJlZm9yZVRlbXBsYXRlQ29tcGlsZU5vZGUiLCJvcmlnQXN5bmNEaXJlY3RpdmUiLCJkZXJpdmVkU3luY0RpcmVjdGl2ZSIsInRlbXBUZW1wbGF0ZUF0dHJzIiwiYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSIsImxpbmtSb290RWxlbWVudCIsIm9sZENsYXNzZXMiLCJpZ25vcmVDaGlsZExpbmtGbiIsImRpZmYiLCJ3aGF0IiwicHJldmlvdXNEaXJlY3RpdmUiLCJ3cmFwTW9kdWxlTmFtZUlmRGVmaW5lZCIsIm1vZHVsZU5hbWUiLCJpbnRlcnBvbGF0ZUZuIiwidGVtcGxhdGVOb2RlIiwidGVtcGxhdGVOb2RlUGFyZW50IiwiaGFzQ29tcGlsZVBhcmVudCIsIiQkYWRkQmluZGluZ0NsYXNzIiwiJCRhZGRCaW5kaW5nSW5mbyIsImV4cHJlc3Npb25zIiwiZ2V0VHJ1c3RlZENvbnRleHQiLCJhdHRyTm9ybWFsaXplZE5hbWUiLCJIVE1MIiwiUkVTT1VSQ0VfVVJMIiwiYWxsT3JOb3RoaW5nIiwidHJ1c3RlZENvbnRleHQiLCIkJG9ic2VydmVycyIsIiQkaW50ZXIiLCIkJHNjb3BlIiwiJHVwZGF0ZUNsYXNzIiwiZWxlbWVudHNUb1JlbW92ZSIsIm5ld05vZGUiLCJmaXJzdEVsZW1lbnRUb1JlbW92ZSIsInJlbW92ZUNvdW50IiwiajIiLCJyZXBsYWNlQ2hpbGQiLCJoYXNEYXRhIiwiZXhwYW5kbyIsImsiLCJrayIsImFubm90YXRpb24iLCJvbk5ld1Njb3BlRGVzdHJveWVkIiwibGFzdFZhbHVlIiwicGFyZW50R2V0IiwicGFyZW50U2V0IiwiY29tcGFyZSIsImxpdGVyYWwiLCJhc3NpZ24iLCJwYXJlbnRWYWx1ZVdhdGNoIiwicGFyZW50VmFsdWUiLCIkc3RhdGVmdWwiLCJ1bndhdGNoIiwiYXR0cmlidXRlc1RvQ29weSIsIiRhZGRDbGFzcyIsImNsYXNzVmFsIiwiJHJlbW92ZUNsYXNzIiwibmV3Q2xhc3NlcyIsInRva2VuRGlmZmVyZW5jZSIsIndyaXRlQXR0ciIsImJvb2xlYW5LZXkiLCJhbGlhc2VkS2V5Iiwib2JzZXJ2ZXIiLCJ0cmltbWVkU3Jjc2V0Iiwic3JjUGF0dGVybiIsInJhd1VyaXMiLCJuYnJVcmlzV2l0aDJwYXJ0cyIsImlubmVySWR4IiwibGFzdFR1cGxlIiwibGlzdGVuZXJzIiwiaXNvbGF0ZWQiLCJub1RlbXBsYXRlIiwic3RyMSIsInN0cjIiLCJ0b2tlbnMxIiwidG9rZW5zMiIsIm91dGVyIiwidG9rZW4iLCJqcU5vZGVzIiwiaWRlbnQiLCJDTlRSTF9SRUciLCJnbG9iYWxzIiwiYWxsb3dHbG9iYWxzIiwiYWRkSWRlbnRpZmllciIsImV4cHJlc3Npb24iLCJsYXRlciIsIiRjb250cm9sbGVyTWluRXJyIiwiY29udHJvbGxlclByb3RvdHlwZSIsImV4Y2VwdGlvbiIsImNhdXNlIiwic2VyaWFsaXplVmFsdWUiLCJ2IiwidG9JU09TdHJpbmciLCJwYXJhbXMiLCJzZXJpYWxpemUiLCJ0b1NlcmlhbGl6ZSIsInRvcExldmVsIiwiZGVmYXVsdEh0dHBSZXNwb25zZVRyYW5zZm9ybSIsImhlYWRlcnMiLCJ0ZW1wRGF0YSIsIkpTT05fUFJPVEVDVElPTl9QUkVGSVgiLCJjb250ZW50VHlwZSIsIkFQUExJQ0FUSU9OX0pTT04iLCJpc0pzb25MaWtlIiwianNvblN0YXJ0IiwiSlNPTl9TVEFSVCIsIkpTT05fRU5EUyIsInBhcnNlSGVhZGVycyIsImZpbGxJblBhcnNlZCIsImhlYWRlclZhbCIsImhlYWRlcktleSIsImhlYWRlcnNHZXR0ZXIiLCJoZWFkZXJzT2JqIiwidHJhbnNmb3JtRGF0YSIsImZucyIsImlzU3VjY2VzcyIsInRyYW5zZm9ybVJlc3BvbnNlIiwidHJhbnNmb3JtUmVxdWVzdCIsImQiLCJjb21tb24iLCJBY2NlcHQiLCJDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTiIsInBhdGNoIiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsInBhcmFtU2VyaWFsaXplciIsInVzZUFwcGx5QXN5bmMiLCJpbnRlcmNlcHRvckZhY3RvcmllcyIsImludGVyY2VwdG9ycyIsInJlcXVlc3RDb25maWciLCJyZXNwIiwiZXhlY3V0ZUhlYWRlckZucyIsImhlYWRlckNvbnRlbnQiLCJwcm9jZXNzZWRIZWFkZXJzIiwiaGVhZGVyRm4iLCJoZWFkZXIiLCJtZXJnZUhlYWRlcnMiLCJkZWZIZWFkZXJOYW1lIiwibG93ZXJjYXNlRGVmSGVhZGVyTmFtZSIsInJlcUhlYWRlck5hbWUiLCJkZWZIZWFkZXJzIiwicmVxSGVhZGVycyIsImRlZmF1bHRIZWFkZXJzSXRlcmF0aW9uIiwic2VydmVyUmVxdWVzdCIsInJlcURhdGEiLCJ3aXRoQ3JlZGVudGlhbHMiLCJzZW5kUmVxIiwicmV2ZXJzZWRJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInJlcXVlc3QiLCJyZXF1ZXN0RXJyb3IiLCJyZXNwb25zZUVycm9yIiwidGhlbkZuIiwicmVqZWN0Rm4iLCJjcmVhdGVTaG9ydE1ldGhvZHMiLCJjcmVhdGVTaG9ydE1ldGhvZHNXaXRoRGF0YSIsImhlYWRlcnNTdHJpbmciLCJyZXNvbHZlSHR0cFByb21pc2UiLCJyZXNvbHZlUHJvbWlzZSIsIiRhcHBseUFzeW5jIiwiJCRwaGFzZSIsInJlc29sdmVQcm9taXNlV2l0aFJlc3VsdCIsInJlbW92ZVBlbmRpbmdSZXEiLCJwZW5kaW5nUmVxdWVzdHMiLCJjYWNoZWRSZXNwIiwiYnVpbGRVcmwiLCJkZWZhdWx0Q2FjaGUiLCJ4c3JmVmFsdWUiLCJ1cmxJc1NhbWVPcmlnaW4iLCJyZXNwb25zZVR5cGUiLCJzZXJpYWxpemVkUGFyYW1zIiwiaW50ZXJjZXB0b3JGYWN0b3J5IiwiY3JlYXRlWGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJjcmVhdGVIdHRwQmFja2VuZCIsIiRicm93c2VyRGVmZXIiLCJyYXdEb2N1bWVudCIsImpzb25wUmVxIiwiY2FsbGJhY2tJZCIsImFzeW5jIiwiY2FsbGVkIiwiYWRkRXZlbnRMaXN0ZW5lckZuIiwidGltZW91dFJlcXVlc3QiLCJqc29ucERvbmUiLCJ4aHIiLCJjb21wbGV0ZVJlcXVlc3QiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25sb2FkIiwicmVzcG9uc2VUZXh0IiwidXJsUmVzb2x2ZSIsInByb3RvY29sIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwib25lcnJvciIsIm9uYWJvcnQiLCJzZW5kIiwiZXNjYXBlIiwiY2giLCJ1bmVzY2FwZVRleHQiLCJlc2NhcGVkU3RhcnRSZWdleHAiLCJlc2NhcGVkRW5kUmVnZXhwIiwibXVzdEhhdmVFeHByZXNzaW9uIiwicGFyc2VTdHJpbmdpZnlJbnRlcmNlcHRvciIsImdldFZhbHVlIiwiJGludGVycG9sYXRlTWluRXJyIiwiaW50ZXJyIiwiZW5kSW5kZXgiLCJleHAiLCJwYXJzZUZucyIsInRleHRMZW5ndGgiLCJleHByZXNzaW9uUG9zaXRpb25zIiwic3RhcnRTeW1ib2xMZW5ndGgiLCJlbmRTeW1ib2xMZW5ndGgiLCJ0aHJvd05vY29uY2F0IiwiY29tcHV0ZSIsImdldFRydXN0ZWQiLCIkJHdhdGNoRGVsZWdhdGUiLCIkd2F0Y2hHcm91cCIsIm9sZFZhbHVlcyIsImN1cnJWYWx1ZSIsImludGVydmFsIiwiaGFzUGFyYW1zIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiaXRlcmF0aW9uIiwic2tpcEFwcGx5IiwiJCRpbnRlcnZhbElkIiwibm90aWZ5IiwiaW50ZXJ2YWxzIiwiTlVNQkVSX0ZPUk1BVFMiLCJERUNJTUFMX1NFUCIsIkdST1VQX1NFUCIsIlBBVFRFUk5TIiwibWluSW50IiwibWluRnJhYyIsIm1heEZyYWMiLCJwb3NQcmUiLCJwb3NTdWYiLCJuZWdQcmUiLCJuZWdTdWYiLCJnU2l6ZSIsImxnU2l6ZSIsIkNVUlJFTkNZX1NZTSIsIkRBVEVUSU1FX0ZPUk1BVFMiLCJNT05USCIsIlNIT1JUTU9OVEgiLCJEQVkiLCJTSE9SVERBWSIsIkFNUE1TIiwibWVkaXVtIiwic2hvcnQiLCJmdWxsRGF0ZSIsImxvbmdEYXRlIiwibWVkaXVtRGF0ZSIsInNob3J0RGF0ZSIsIm1lZGl1bVRpbWUiLCJzaG9ydFRpbWUiLCJFUkFOQU1FUyIsIkVSQVMiLCJwbHVyYWxDYXQiLCJudW0iLCJlbmNvZGVQYXRoIiwic2VnbWVudHMiLCJwYXJzZUFic29sdXRlVXJsIiwiYWJzb2x1dGVVcmwiLCJsb2NhdGlvbk9iaiIsInBhcnNlZFVybCIsIiQkcHJvdG9jb2wiLCIkJGhvc3QiLCJob3N0bmFtZSIsIiQkcG9ydCIsInBvcnQiLCJERUZBVUxUX1BPUlRTIiwicGFyc2VBcHBVcmwiLCJyZWxhdGl2ZVVybCIsInByZWZpeGVkIiwiJCRwYXRoIiwicGF0aG5hbWUiLCIkJHNlYXJjaCIsIiQkaGFzaCIsImJlZ2luc1dpdGgiLCJiZWdpbiIsIndob2xlIiwidHJpbUVtcHR5SGFzaCIsInN0cmlwRmlsZSIsInNlcnZlckJhc2UiLCJMb2NhdGlvbkh0bWw1VXJsIiwiYXBwQmFzZSIsImJhc2VQcmVmaXgiLCIkJGh0bWw1IiwiYXBwQmFzZU5vRmlsZSIsIiQkcGFyc2UiLCJwYXRoVXJsIiwiJGxvY2F0aW9uTWluRXJyIiwiJCRjb21wb3NlIiwiJCR1cmwiLCIkJGFic1VybCIsIiQkcGFyc2VMaW5rVXJsIiwicmVsSHJlZiIsImFwcFVybCIsInByZXZBcHBVcmwiLCJyZXdyaXR0ZW5VcmwiLCJMb2NhdGlvbkhhc2hiYW5nVXJsIiwiaGFzaFByZWZpeCIsInJlbW92ZVdpbmRvd3NEcml2ZU5hbWUiLCJiYXNlIiwiZmlyc3RQYXRoU2VnbWVudE1hdGNoIiwid2luZG93c0ZpbGVQYXRoRXhwIiwid2l0aG91dEhhc2hVcmwiLCJ3aXRob3V0QmFzZVVybCIsIkxvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsIiwibG9jYXRpb25HZXR0ZXIiLCJwcm9wZXJ0eSIsImxvY2F0aW9uR2V0dGVyU2V0dGVyIiwicHJlcHJvY2VzcyIsImh0bWw1TW9kZSIsInJlcXVpcmVCYXNlIiwicmV3cml0ZUxpbmtzIiwic2V0QnJvd3NlclVybFdpdGhGYWxsYmFjayIsIm9sZFVybCIsIm9sZFN0YXRlIiwiJCRzdGF0ZSIsImFmdGVyTG9jYXRpb25DaGFuZ2UiLCJhYnNVcmwiLCJMb2NhdGlvbk1vZGUiLCJpbml0aWFsVXJsIiwiSUdOT1JFX1VSSV9SRUdFWFAiLCJhYnNIcmVmIiwiaW5pdGlhbGl6aW5nIiwibmV3VXJsIiwibmV3U3RhdGUiLCIkZGlnZXN0IiwiY3VycmVudFJlcGxhY2UiLCIkJHJlcGxhY2UiLCJ1cmxPclN0YXRlQ2hhbmdlZCIsImRlYnVnRW5hYmxlZCIsImZsYWciLCJmb3JtYXRFcnJvciIsInNvdXJjZVVSTCIsImNvbnNvbGVMb2ciLCJsb2dGbiIsImxvZyIsImhhc0FwcGx5IiwiYXJnMSIsImFyZzIiLCJlbnN1cmVTYWZlTWVtYmVyTmFtZSIsImZ1bGxFeHByZXNzaW9uIiwiJHBhcnNlTWluRXJyIiwiZW5zdXJlU2FmZU9iamVjdCIsImVuc3VyZVNhZmVGdW5jdGlvbiIsIkNBTEwiLCJBUFBMWSIsIkJJTkQiLCJpZkRlZmluZWQiLCJwbHVzRm4iLCJpc1N0YXRlbGVzcyIsImZpbHRlck5hbWUiLCJmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zIiwiYXN0IiwiYWxsQ29uc3RhbnRzIiwiYXJnc1RvV2F0Y2giLCJBU1QiLCJQcm9ncmFtIiwiTGl0ZXJhbCIsInRvV2F0Y2giLCJVbmFyeUV4cHJlc3Npb24iLCJhcmd1bWVudCIsIkJpbmFyeUV4cHJlc3Npb24iLCJMb2dpY2FsRXhwcmVzc2lvbiIsIkNvbmRpdGlvbmFsRXhwcmVzc2lvbiIsImFsdGVybmF0ZSIsImNvbnNlcXVlbnQiLCJJZGVudGlmaWVyIiwiTWVtYmVyRXhwcmVzc2lvbiIsIm9iamVjdCIsImNvbXB1dGVkIiwiQ2FsbEV4cHJlc3Npb24iLCJjYWxsZWUiLCJBc3NpZ25tZW50RXhwcmVzc2lvbiIsIkFycmF5RXhwcmVzc2lvbiIsIk9iamVjdEV4cHJlc3Npb24iLCJUaGlzRXhwcmVzc2lvbiIsImdldElucHV0cyIsImxhc3RFeHByZXNzaW9uIiwiaXNBc3NpZ25hYmxlIiwiYXNzaWduYWJsZUFTVCIsIk5HVmFsdWVQYXJhbWV0ZXIiLCJvcGVyYXRvciIsImlzTGl0ZXJhbCIsImlzQ29uc3RhbnQiLCJBU1RDb21waWxlciIsImFzdEJ1aWxkZXIiLCJBU1RJbnRlcnByZXRlciIsInNldHRlciIsInNldFZhbHVlIiwiZnVsbEV4cCIsInByb3BlcnR5T2JqIiwiaXNQb3NzaWJseURhbmdlcm91c01lbWJlck5hbWUiLCJnZXRWYWx1ZU9mIiwib2JqZWN0VmFsdWVPZiIsImNhY2hlRGVmYXVsdCIsImNhY2hlRXhwZW5zaXZlIiwiZXhwcmVzc2lvbklucHV0RGlydHlDaGVjayIsIm9sZFZhbHVlT2ZWYWx1ZSIsImlucHV0c1dhdGNoRGVsZWdhdGUiLCJvYmplY3RFcXVhbGl0eSIsInBhcnNlZEV4cHJlc3Npb24iLCJwcmV0dHlQcmludEV4cHJlc3Npb24iLCJsYXN0UmVzdWx0IiwiaW5wdXRFeHByZXNzaW9ucyIsImlucHV0cyIsIm9sZElucHV0VmFsdWVPZiIsIm5ld0lucHV0VmFsdWUiLCJvbGRJbnB1dFZhbHVlT2ZWYWx1ZXMiLCJvbGRJbnB1dFZhbHVlcyIsImNoYW5nZWQiLCJvbmVUaW1lV2F0Y2hEZWxlZ2F0ZSIsIm9sZCIsIm9uZVRpbWVMaXRlcmFsV2F0Y2hEZWxlZ2F0ZSIsImlzQWxsRGVmaW5lZCIsImFsbERlZmluZWQiLCJjb25zdGFudFdhdGNoRGVsZWdhdGUiLCJhZGRJbnRlcmNlcHRvciIsImludGVyY2VwdG9yRm4iLCJ3YXRjaERlbGVnYXRlIiwicmVndWxhcldhdGNoIiwiJHBhcnNlT3B0aW9ucyIsImV4cGVuc2l2ZUNoZWNrcyIsIiRwYXJzZU9wdGlvbnNFeHBlbnNpdmUiLCJvbmVUaW1lIiwicGFyc2VPcHRpb25zIiwibGV4ZXIiLCJMZXhlciIsIlBhcnNlciIsInFGYWN0b3J5IiwiZXhjZXB0aW9uSGFuZGxlciIsImNhbGxPbmNlIiwicmVzb2x2ZUZuIiwiUHJvbWlzZSIsInNpbXBsZUJpbmQiLCJwcm9jZXNzU2NoZWR1bGVkIiwic2NoZWR1bGVQcm9jZXNzUXVldWUiLCJEZWZlcnJlZCIsInByb21pc2VzIiwiJHFNaW5FcnIiLCJUeXBlRXJyb3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJwcm9ncmVzc0JhY2siLCJoYW5kbGVDYWxsYmFjayIsIiQkcmVqZWN0IiwiJCRyZXNvbHZlIiwibWFrZVByb21pc2UiLCJpc1Jlc29sdmVkIiwiY2FsbGJhY2tPdXRwdXQiLCJlcnJiYWNrIiwiJFEiLCJRIiwicmVzb2x2ZXIiLCJ0YXNrUXVldWUiLCJ0YXNrIiwidGFza0NvdW50IiwicXVldWVGbiIsImFzeW5jRm4iLCJjYW5jZWxMYXN0UkFGIiwicmFmRm4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIiwid2Via2l0Q2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicmFmU3VwcG9ydGVkIiwic3VwcG9ydGVkIiwiY3JlYXRlQ2hpbGRTY29wZUNsYXNzIiwiQ2hpbGRTY29wZSIsIiQkd2F0Y2hlcnMiLCIkJGxpc3RlbmVycyIsIiQkbGlzdGVuZXJDb3VudCIsIiQkd2F0Y2hlcnNDb3VudCIsIiRpZCIsIiQkQ2hpbGRTY29wZSIsIlRUTCIsIiRyb290U2NvcGVNaW5FcnIiLCJsYXN0RGlydHlXYXRjaCIsImFwcGx5QXN5bmNJZCIsImRpZ2VzdFR0bCIsImRlc3Ryb3lDaGlsZFNjb3BlIiwiY3VycmVudFNjb3BlIiwiU2NvcGUiLCJiZWdpblBoYXNlIiwiY2xlYXJQaGFzZSIsImluY3JlbWVudFdhdGNoZXJzQ291bnQiLCJkZWNyZW1lbnRMaXN0ZW5lckNvdW50IiwiaW5pdFdhdGNoVmFsIiwiZmx1c2hBcHBseUFzeW5jIiwiYXBwbHlBc3luY1F1ZXVlIiwic2NoZWR1bGVBcHBseUFzeW5jIiwiaXNvbGF0ZSIsIndhdGNoRXhwIiwid2F0Y2hFeHByZXNzaW9ucyIsIndhdGNoR3JvdXBBY3Rpb24iLCJjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCIsImZpcnN0UnVuIiwibmV3VmFsdWVzIiwiZGVyZWdpc3RlckZucyIsInNob3VsZENhbGwiLCJ1bndhdGNoRm4iLCIkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IiLCJfdmFsdWUiLCJuZXdMZW5ndGgiLCJib3RoTmFOIiwibmV3SXRlbSIsIm9sZEl0ZW0iLCJpbnRlcm5hbEFycmF5Iiwib2xkTGVuZ3RoIiwiY2hhbmdlRGV0ZWN0ZWQiLCJpbnRlcm5hbE9iamVjdCIsIiR3YXRjaENvbGxlY3Rpb25BY3Rpb24iLCJpbml0UnVuIiwidmVyeU9sZFZhbHVlIiwidHJhY2tWZXJ5T2xkVmFsdWUiLCJjaGFuZ2VEZXRlY3RvciIsIndhdGNoIiwid2F0Y2hlcnMiLCJkaXJ0eSIsImxvZ0lkeCIsImFzeW5jVGFzayIsInR0bCIsIndhdGNoTG9nIiwiYXN5bmNRdWV1ZSIsInRyYXZlcnNlU2NvcGVzTG9vcCIsInBvc3REaWdlc3RRdWV1ZSIsIiRhcHBseUFzeW5jRXhwcmVzc2lvbiIsIm5hbWVkTGlzdGVuZXJzIiwiaW5kZXhPZkxpc3RlbmVyIiwiJGVtaXQiLCJ0YXJnZXRTY29wZSIsImxpc3RlbmVyQXJncyIsIiQkYXN5bmNRdWV1ZSIsIiQkcG9zdERpZ2VzdFF1ZXVlIiwiJCRhcHBseUFzeW5jUXVldWUiLCJ1cmkiLCJpc0ltYWdlIiwibm9ybWFsaXplZFZhbCIsImFkanVzdE1hdGNoZXIiLCJtYXRjaGVyIiwiJHNjZU1pbkVyciIsImVzY2FwZUZvclJlZ2V4cCIsImFkanVzdE1hdGNoZXJzIiwibWF0Y2hlcnMiLCJhZGp1c3RlZE1hdGNoZXJzIiwiU0NFX0NPTlRFWFRTIiwicmVzb3VyY2VVcmxXaGl0ZWxpc3QiLCJyZXNvdXJjZVVybEJsYWNrbGlzdCIsIm1hdGNoVXJsIiwiaXNSZXNvdXJjZVVybEFsbG93ZWRCeVBvbGljeSIsImFsbG93ZWQiLCJnZW5lcmF0ZUhvbGRlclR5cGUiLCJCYXNlIiwiaG9sZGVyVHlwZSIsInRydXN0ZWRWYWx1ZSIsIiQkdW53cmFwVHJ1c3RlZFZhbHVlIiwidHJ1c3RBcyIsIkNvbnN0cnVjdG9yIiwiYnlUeXBlIiwibWF5YmVUcnVzdGVkIiwidHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSIsImh0bWxTYW5pdGl6ZXIiLCJVUkwiLCJKUyIsInNjZSIsImlzRW5hYmxlZCIsInBhcnNlQXMiLCJlbnVtVmFsdWUiLCJsTmFtZSIsImV2ZW50U3VwcG9ydCIsImFuZHJvaWQiLCJib3hlZSIsInZlbmRvclJlZ2V4IiwiYm9keVN0eWxlIiwid2Via2l0VHJhbnNpdGlvbiIsIndlYmtpdEFuaW1hdGlvbiIsInB1c2hTdGF0ZSIsImhhc0V2ZW50IiwiZGl2RWxtIiwiaGFuZGxlUmVxdWVzdEZuIiwidHBsIiwiaWdub3JlUmVxdWVzdEVycm9yIiwiaGFuZGxlRXJyb3IiLCJnZXRUcnVzdGVkUmVzb3VyY2VVcmwiLCJ0cmFuc2Zvcm1lciIsImh0dHBPcHRpb25zIiwidGVzdGFiaWxpdHkiLCJmaW5kQmluZGluZ3MiLCJvcHRfZXhhY3RNYXRjaCIsImRhdGFCaW5kaW5nIiwiYmluZGluZ05hbWUiLCJmaW5kTW9kZWxzIiwicHJlZml4ZXMiLCJhdHRyaWJ1dGVFcXVhbHMiLCJnZXRMb2NhdGlvbiIsInNldExvY2F0aW9uIiwid2hlblN0YWJsZSIsImRlZmVycmVkcyIsIiQkdGltZW91dElkIiwidXJsUGFyc2luZ05vZGUiLCJyZXF1ZXN0VXJsIiwib3JpZ2luVXJsIiwiJCRDb29raWVSZWFkZXIiLCJzYWZlRGVjb2RlVVJJQ29tcG9uZW50IiwibGFzdENvb2tpZXMiLCJsYXN0Q29va2llU3RyaW5nIiwiY29va2llQXJyYXkiLCJjb29raWUiLCJjdXJyZW50Q29va2llU3RyaW5nIiwiZmlsdGVycyIsInN1ZmZpeCIsImN1cnJlbmN5RmlsdGVyIiwiZGF0ZUZpbHRlciIsImZpbHRlckZpbHRlciIsImpzb25GaWx0ZXIiLCJsaW1pdFRvRmlsdGVyIiwibG93ZXJjYXNlRmlsdGVyIiwibnVtYmVyRmlsdGVyIiwib3JkZXJCeUZpbHRlciIsInVwcGVyY2FzZUZpbHRlciIsImNvbXBhcmF0b3IiLCJwcmVkaWNhdGVGbiIsIm1hdGNoQWdhaW5zdEFueVByb3AiLCJleHByZXNzaW9uVHlwZSIsImdldFR5cGVGb3JGaWx0ZXIiLCJjcmVhdGVQcmVkaWNhdGVGbiIsInNob3VsZE1hdGNoUHJpbWl0aXZlcyIsImFjdHVhbCIsImV4cGVjdGVkIiwiZGVlcENvbXBhcmUiLCJkb250TWF0Y2hXaG9sZU9iamVjdCIsImFjdHVhbFR5cGUiLCJleHBlY3RlZFR5cGUiLCJleHBlY3RlZFZhbCIsIm1hdGNoQW55UHJvcGVydHkiLCJhY3R1YWxWYWwiLCIkbG9jYWxlIiwiZm9ybWF0cyIsImN1cnJlbmN5U3ltYm9sIiwiZnJhY3Rpb25TaXplIiwiZm9ybWF0TnVtYmVyIiwibnVtYmVyIiwiZ3JvdXBTZXAiLCJkZWNpbWFsU2VwIiwiaXNOZWdhdGl2ZSIsImlzSW5maW5pdHkiLCJJbmZpbml0eSIsImlzRmluaXRlIiwibnVtU3RyIiwiZm9ybWF0ZWRUZXh0IiwiaGFzRXhwb25lbnQiLCJmcmFjdGlvbkxlbiIsImZyYWN0aW9uIiwibGdyb3VwIiwicGFkTnVtYmVyIiwiZGlnaXRzIiwibmVnIiwiZGF0ZUdldHRlciIsImRhdGVTdHJHZXR0ZXIiLCJzaG9ydEZvcm0iLCJ0aW1lWm9uZUdldHRlciIsInpvbmUiLCJwYWRkZWRab25lIiwiZ2V0Rmlyc3RUaHVyc2RheU9mWWVhciIsInllYXIiLCJkYXlPZldlZWtPbkZpcnN0IiwiZ2V0RGF5IiwiZ2V0VGh1cnNkYXlUaGlzV2VlayIsImRhdGV0aW1lIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJ3ZWVrR2V0dGVyIiwiZmlyc3RUaHVycyIsInRoaXNUaHVycyIsImFtcG1HZXR0ZXIiLCJnZXRIb3VycyIsImVyYUdldHRlciIsImxvbmdFcmFHZXR0ZXIiLCJqc29uU3RyaW5nVG9EYXRlIiwic3RyaW5nIiwiUl9JU084NjAxX1NUUiIsInR6SG91ciIsInR6TWluIiwiZGF0ZVNldHRlciIsInNldFVUQ0Z1bGxZZWFyIiwic2V0RnVsbFllYXIiLCJ0aW1lU2V0dGVyIiwic2V0VVRDSG91cnMiLCJzZXRIb3VycyIsIm0iLCJtcyIsImZvcm1hdCIsIk5VTUJFUl9TVFJJTkciLCJEQVRFX0ZPUk1BVFNfU1BMSVQiLCJkYXRlVGltZXpvbmVPZmZzZXQiLCJEQVRFX0ZPUk1BVFMiLCJzcGFjaW5nIiwicHJvY2Vzc1ByZWRpY2F0ZXMiLCJzb3J0UHJlZGljYXRlIiwicmV2ZXJzZU9yZGVyIiwicHJlZGljYXRlIiwiZGVzY2VuZGluZyIsIm9iamVjdFZhbHVlIiwiZ2V0UHJlZGljYXRlVmFsdWUiLCJ2MSIsInYyIiwiZ2V0Q29tcGFyaXNvbk9iamVjdCIsInByZWRpY2F0ZVZhbHVlcyIsInByZWRpY2F0ZXMiLCJkb0NvbXBhcmlzb24iLCJjb21wYXJlVmFsdWVzIiwibmdEaXJlY3RpdmUiLCJudWxsRm9ybVJlbmFtZUNvbnRyb2wiLCJjb250cm9sIiwiJG5hbWUiLCJGb3JtQ29udHJvbGxlciIsImNvbnRyb2xzIiwicGFyZW50Rm9ybSIsIiQkcGFyZW50Rm9ybSIsIm51bGxGb3JtQ3RybCIsIiQkc3VjY2VzcyIsIiRwZW5kaW5nIiwiJGRpcnR5IiwiJHByaXN0aW5lIiwiJHZhbGlkIiwiJHN1Ym1pdHRlZCIsIiRhZGRDb250cm9sIiwiJHJvbGxiYWNrVmlld1ZhbHVlIiwiJGNvbW1pdFZpZXdWYWx1ZSIsIiQkcmVuYW1lQ29udHJvbCIsIm5ld05hbWUiLCJvbGROYW1lIiwiJHNldFZhbGlkaXR5IiwiYWRkU2V0VmFsaWRpdHlNZXRob2QiLCJ1bnNldCIsIiRzZXREaXJ0eSIsIlBSSVNUSU5FX0NMQVNTIiwiRElSVFlfQ0xBU1MiLCIkc2V0UHJpc3RpbmUiLCJTVUJNSVRURURfQ0xBU1MiLCIkc2V0VW50b3VjaGVkIiwiJHNldFN1Ym1pdHRlZCIsInN0cmluZ0Jhc2VkSW5wdXRUeXBlIiwidGV4dElucHV0VHlwZSIsImJhc2VJbnB1dFR5cGUiLCJjb21wb3NpbmciLCJuZ1RyaW0iLCIkJGhhc05hdGl2ZVZhbGlkYXRvcnMiLCJkZWZlckxpc3RlbmVyIiwib3JpZ1ZhbHVlIiwid2Vla1BhcnNlciIsImlzb1dlZWsiLCJleGlzdGluZ0RhdGUiLCJXRUVLX1JFR0VYUCIsIndlZWsiLCJob3VycyIsInNlY29uZHMiLCJtaWxsaXNlY29uZHMiLCJhZGREYXlzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsIk5hTiIsImNyZWF0ZURhdGVQYXJzZXIiLCJtYXBwaW5nIiwiaXNvIiwiSVNPX0RBVEVfUkVHRVhQIiwieXl5eSIsIk1NIiwiZGQiLCJISCIsIm1tIiwic3MiLCJzc3MiLCJwYXJ0IiwiY3JlYXRlRGF0ZUlucHV0VHlwZSIsInBhcnNlRGF0ZSIsImlzVmFsaWREYXRlIiwicGFyc2VPYnNlcnZlZERhdGVWYWx1ZSIsImJhZElucHV0Q2hlY2tlciIsInByZXZpb3VzRGF0ZSIsIiQkcGFyc2VyTmFtZSIsInBhcnNlZERhdGUiLCIkbmdNb2RlbE1pbkVyciIsIm5nTWluIiwibWluVmFsIiwiJHZhbGlkYXRlIiwibmdNYXgiLCJtYXhWYWwiLCJuYXRpdmVWYWxpZGF0aW9uIiwiVkFMSURJVFlfU1RBVEVfUFJPUEVSVFkiLCJ0eXBlTWlzbWF0Y2giLCJudW1iZXJJbnB1dFR5cGUiLCJOVU1CRVJfUkVHRVhQIiwidXJsSW5wdXRUeXBlIiwiVVJMX1JFR0VYUCIsImVtYWlsSW5wdXRUeXBlIiwiZW1haWwiLCJFTUFJTF9SRUdFWFAiLCJyYWRpb0lucHV0VHlwZSIsInBhcnNlQ29uc3RhbnRFeHByIiwicGFyc2VGbiIsImNoZWNrYm94SW5wdXRUeXBlIiwidHJ1ZVZhbHVlIiwibmdUcnVlVmFsdWUiLCJmYWxzZVZhbHVlIiwibmdGYWxzZVZhbHVlIiwiY2xhc3NEaXJlY3RpdmUiLCJhcnJheURpZmZlcmVuY2UiLCJhcnJheUNsYXNzZXMiLCJhZGRDbGFzc2VzIiwiZGlnZXN0Q2xhc3NDb3VudHMiLCJyZW1vdmVDbGFzc2VzIiwiY2xhc3NDb3VudHMiLCJjbGFzc2VzVG9VcGRhdGUiLCJ1cGRhdGVDbGFzc2VzIiwibmdDbGFzc1dhdGNoQWN0aW9uIiwib2xkJGluZGV4IiwibW9kIiwic2V0VmFsaWRpdHkiLCJ2YWxpZGF0aW9uRXJyb3JLZXkiLCJjcmVhdGVBbmRTZXQiLCJ1bnNldEFuZENsZWFudXAiLCJjYWNoZWRUb2dnbGVDbGFzcyIsIlBFTkRJTkdfQ0xBU1MiLCJ0b2dnbGVWYWxpZGF0aW9uQ3NzIiwiaXNPYmplY3RFbXB0eSIsImNvbWJpbmVkU3RhdGUiLCJzd2l0Y2hWYWx1ZSIsImNsYXNzQ2FjaGUiLCJpc1ZhbGlkIiwiVkFMSURfQ0xBU1MiLCJJTlZBTElEX0NMQVNTIiwiUkVHRVhfU1RSSU5HX1JFR0VYUCIsIm1hbnVhbExvd2VyY2FzZSIsImNoYXJDb2RlQXQiLCJtYW51YWxVcHBlcmNhc2UiLCJkb2N1bWVudE1vZGUiLCJpc0FjdGl2ZV8iLCJGdW5jdGlvbiIsIm5hbWVfIiwiTk9ERV9UWVBFX0FUVFJJQlVURSIsImZ1bGwiLCJtYWpvciIsIm1pbm9yIiwiZG90IiwiY29kZU5hbWUiLCJNT1VTRV9FVkVOVF9NQVAiLCJtb3VzZWxlYXZlIiwibW91c2VlbnRlciIsInRoZWFkIiwidHIiLCJ0ZCIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwicmVhZHkiLCJmaXJlZCIsImxvd2VyY2FzZWROYW1lIiwiZ2V0TmFtZWRJdGVtIiwic3BlY2lmaWVkIiwiJGR2Iiwibm9kZUNvdW50IiwianFMaXRlT24iLCJ0eXBlcyIsInJlbGF0ZWQiLCJvbmUiLCJvbkZuIiwicmVwbGFjZU5vZGUiLCJjb250ZW50RG9jdW1lbnQiLCJ3cmFwTm9kZSIsIm5ld0VsZW1lbnQiLCJjb25kaXRpb24iLCJjbGFzc0NvbmRpdGlvbiIsIm5leHRFbGVtZW50U2libGluZyIsImV4dHJhUGFyYW1ldGVycyIsImR1bW15RXZlbnQiLCJldmVudEZuc0NvcHkiLCJoYW5kbGVyQXJncyIsImFyZzMiLCJ1bmJpbmQiLCIkYW5pbWF0ZU1pbkVyciIsInBhc3MiLCJmYWlsIiwicG9zdERpZ2VzdEVsZW1lbnRzIiwiYWRkUmVtb3ZlQ2xhc3Nlc1Bvc3REaWdlc3QiLCIkJGNsYXNzTmFtZUZpbHRlciIsInJlc2VydmVkUmVnZXgiLCJkb21JbnNlcnQiLCJhZnRlckVsZW1lbnQiLCJhZnRlck5vZGUiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiYWRkY2xhc3MiLCJDb250ZW50LVR5cGUiLCJbIiwieyIsIlBBVEhfTUFUQ0giLCJodHRwIiwiaHR0cHMiLCJmdHAiLCJsb2NhdGlvblByb3RvdHlwZSIsInBhcmFtVmFsdWUiLCJMb2NhdGlvbiIsIk9QRVJBVE9SUyIsIiciLCJcIiIsImxleCIsInRva2VucyIsInJlYWRTdHJpbmciLCJwZWVrIiwicmVhZE51bWJlciIsImlzSWRlbnQiLCJyZWFkSWRlbnQiLCJpcyIsImlzV2hpdGVzcGFjZSIsImNoMiIsImNoMyIsIm9wMSIsIm9wMiIsIm9wMyIsInRocm93RXJyb3IiLCJjaGFycyIsImlzRXhwT3BlcmF0b3IiLCJjb2xTdHIiLCJwZWVrQ2giLCJxdW90ZSIsInJhd1N0cmluZyIsInJlcCIsIkV4cHJlc3Npb25TdGF0ZW1lbnQiLCJQcm9wZXJ0eSIsInByb2dyYW0iLCJleHByZXNzaW9uU3RhdGVtZW50IiwiZmlsdGVyQ2hhaW4iLCJhc3NpZ25tZW50IiwidGVybmFyeSIsImxvZ2ljYWxPUiIsImNvbnN1bWUiLCJsb2dpY2FsQU5EIiwiZXF1YWxpdHkiLCJyZWxhdGlvbmFsIiwiYWRkaXRpdmUiLCJtdWx0aXBsaWNhdGl2ZSIsInVuYXJ5IiwiYXJyYXlEZWNsYXJhdGlvbiIsImNvbnN0YW50cyIsInBhcnNlQXJndW1lbnRzIiwiYmFzZUV4cHJlc3Npb24iLCJwZWVrVG9rZW4iLCJraW5kIiwiZTEiLCJlMiIsImUzIiwiZTQiLCJwZWVrQWhlYWQiLCJudWxsIiwibmV4dElkIiwidmFycyIsIm93biIsImFzc2lnbmFibGUiLCJzdGFnZSIsImNvbXB1dGluZyIsInJlY3Vyc2UiLCJnZW5lcmF0ZUZ1bmN0aW9uIiwiZm5LZXkiLCJpbnRvSWQiLCJyZXR1cm5fIiwid2F0Y2hJZCIsImZuU3RyaW5nIiwiVVNFIiwiU1RSSUNUIiwiZmlsdGVyUHJlZml4Iiwid2F0Y2hGbnMiLCJ2YXJzUHJlZml4Iiwic2VjdGlvbiIsIm5hbWVJZCIsInJlY3Vyc2lvbkZuIiwic2tpcFdhdGNoSWRDaGVjayIsImlmXyIsImxhenlBc3NpZ24iLCJjb21wdXRlZE1lbWJlciIsImxhenlSZWN1cnNlIiwicGx1cyIsIm5vdCIsImdldEhhc093blByb3BlcnR5Iiwibm9uQ29tcHV0ZWRNZW1iZXIiLCJhZGRFbnN1cmVTYWZlT2JqZWN0Iiwibm90TnVsbCIsImFkZEVuc3VyZVNhZmVNZW1iZXJOYW1lIiwiYWRkRW5zdXJlU2FmZUZ1bmN0aW9uIiwibWVtYmVyIiwic3RyaW5nRXNjYXBlUmVnZXgiLCJzdHJpbmdFc2NhcGVGbiIsInJocyIsImxocyIsInVuYXJ5KyIsInVuYXJ5LSIsInVuYXJ5ISIsImJpbmFyeSsiLCJiaW5hcnktIiwiYmluYXJ5KiIsImJpbmFyeS8iLCJiaW5hcnklIiwiYmluYXJ5PT09IiwiYmluYXJ5IT09IiwiYmluYXJ5PT0iLCJiaW5hcnkhPSIsImJpbmFyeTwiLCJiaW5hcnk+IiwiYmluYXJ5PD0iLCJiaW5hcnk+PSIsImJpbmFyeSYmIiwiYmluYXJ5fHwiLCJ0ZXJuYXJ5PzoiLCJhc3RDb21waWxlciIsInl5IiwiTU1NTSIsIk1NTSIsIk0iLCJIIiwiaGgiLCJFRUVFIiwiRUVFIiwiWiIsInd3IiwidyIsIkciLCJHRyIsIkdHRyIsIkdHR0ciLCJ4bGlua0hyZWYiLCJwcm9wTmFtZSIsImRlZmF1bHRMaW5rRm4iLCJub3JtYWxpemVkIiwiZm9ybURpcmVjdGl2ZUZhY3RvcnkiLCJpc05nRm9ybSIsImZvcm1FbGVtZW50IiwibmFtZUF0dHIiLCJoYW5kbGVGb3JtU3VibWlzc2lvbiIsInBhcmVudEZvcm1DdHJsIiwiREFURV9SRUdFWFAiLCJEQVRFVElNRUxPQ0FMX1JFR0VYUCIsIk1PTlRIX1JFR0VYUCIsIlRJTUVfUkVHRVhQIiwiaW5wdXRUeXBlIiwiZGF0ZXRpbWUtbG9jYWwiLCJtb250aCIsInJhZGlvIiwiY2hlY2tib3giLCJzdWJtaXQiLCJyZXNldCIsImZpbGUiLCJDT05TVEFOVF9WQUxVRV9SRUdFWFAiLCJ0cGxBdHRyIiwibmdCaW5kSHRtbEdldHRlciIsIm5nQmluZEh0bWxXYXRjaCIsImdldFRydXN0ZWRIdG1sIiwiZm9yY2VBc3luY0V2ZW50cyIsInByZXZpb3VzRWxlbWVudHMiLCJzcmNFeHAiLCJvbmxvYWRFeHAiLCJhdXRvU2Nyb2xsRXhwIiwiYXV0b3Njcm9sbCIsInByZXZpb3VzRWxlbWVudCIsImN1cnJlbnRFbGVtZW50IiwiY2hhbmdlQ291bnRlciIsImNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQiLCJhZnRlckFuaW1hdGlvbiIsInRoaXNDaGFuZ2VJZCIsInRyaW1WYWx1ZXMiLCJVTlRPVUNIRURfQ0xBU1MiLCJUT1VDSEVEX0NMQVNTIiwiTmdNb2RlbENvbnRyb2xsZXIiLCIkJHJhd01vZGVsVmFsdWUiLCIkYXN5bmNWYWxpZGF0b3JzIiwiJHVudG91Y2hlZCIsInBhcnNlclZhbGlkIiwicGFyc2VkTmdNb2RlbCIsInBhcnNlZE5nTW9kZWxBc3NpZ24iLCJuZ01vZGVsR2V0IiwibmdNb2RlbFNldCIsInBlbmRpbmdEZWJvdW5jZSIsIiQkc2V0T3B0aW9ucyIsImdldHRlclNldHRlciIsImludm9rZU1vZGVsR2V0dGVyIiwiaW52b2tlTW9kZWxTZXR0ZXIiLCIkJCRwIiwiY3VycmVudFZhbGlkYXRpb25SdW5JZCIsIiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSIsInByZXZWYWxpZCIsInByZXZNb2RlbFZhbHVlIiwiYWxsb3dJbnZhbGlkIiwiJCRydW5WYWxpZGF0b3JzIiwiYWxsVmFsaWQiLCIkJHdyaXRlTW9kZWxUb1Njb3BlIiwiZG9uZUNhbGxiYWNrIiwicHJvY2Vzc1BhcnNlRXJyb3JzIiwiZXJyb3JLZXkiLCJwcm9jZXNzU3luY1ZhbGlkYXRvcnMiLCJzeW5jVmFsaWRhdG9yc1ZhbGlkIiwidmFsaWRhdG9yIiwicHJvY2Vzc0FzeW5jVmFsaWRhdG9ycyIsInZhbGlkYXRvclByb21pc2VzIiwidmFsaWRhdGlvbkRvbmUiLCJsb2NhbFZhbGlkYXRpb25SdW5JZCIsIiQkcGFyc2VBbmRWYWxpZGF0ZSIsIndyaXRlVG9Nb2RlbElmTmVlZGVkIiwidXBkYXRlT25EZWZhdWx0IiwiJCRkZWJvdW5jZVZpZXdWYWx1ZUNvbW1pdCIsImRlYm91bmNlRGVsYXkiLCJmb3JtYXR0ZXJzIiwibW9kZWxDdHJsIiwidXBkYXRlT24iLCJERUZBVUxUX1JFR0VYUCIsInRoYXQiLCJuZ09wdGlvbnNNaW5FcnIiLCJOR19PUFRJT05TX1JFR0VYUCIsInBhcnNlT3B0aW9uc0V4cHJlc3Npb24iLCJvcHRpb25zRXhwIiwic2VsZWN0RWxlbWVudCIsIk9wdGlvbiIsInNlbGVjdFZhbHVlIiwiZ2V0T3B0aW9uVmFsdWVzS2V5cyIsIm9wdGlvblZhbHVlcyIsIm9wdGlvblZhbHVlc0tleXMiLCJrZXlOYW1lIiwiaXRlbUtleSIsInZhbHVlTmFtZSIsInNlbGVjdEFzIiwic2VsZWN0QXNGbiIsInZpZXdWYWx1ZUZuIiwidHJhY2tCeUZuIiwiZ2V0VHJhY2tCeVZhbHVlRm4iLCJnZXRUcmFja0J5VmFsdWUiLCJnZXRMb2NhbHMiLCJkaXNwbGF5Rm4iLCJncm91cEJ5Rm4iLCJkaXNhYmxlV2hlbkZuIiwidmFsdWVzRm4iLCJnZXRXYXRjaGFibGVzIiwid2F0Y2hlZEFycmF5Iiwib3B0aW9uVmFsdWVzTGVuZ3RoIiwiZGlzYWJsZVdoZW4iLCJnZXRPcHRpb25zIiwib3B0aW9uSXRlbXMiLCJzZWxlY3RWYWx1ZU1hcCIsIm9wdGlvbkl0ZW0iLCJnZXRPcHRpb25Gcm9tVmlld1ZhbHVlIiwiZ2V0Vmlld1ZhbHVlRnJvbU9wdGlvbiIsIm9wdGlvblRlbXBsYXRlIiwib3B0R3JvdXBUZW1wbGF0ZSIsInVwZGF0ZU9wdGlvbkVsZW1lbnQiLCJhZGRPclJldXNlRWxlbWVudCIsInJlbW92ZUV4Y2Vzc0VsZW1lbnRzIiwic2tpcEVtcHR5QW5kVW5rbm93bk9wdGlvbnMiLCJlbXB0eU9wdGlvbl8iLCJlbXB0eU9wdGlvbiIsInVua25vd25PcHRpb25fIiwidW5rbm93bk9wdGlvbiIsInVwZGF0ZU9wdGlvbnMiLCJwcmV2aW91c1ZhbHVlIiwicmVhZFZhbHVlIiwiZ3JvdXBNYXAiLCJwcm92aWRlZEVtcHR5T3B0aW9uIiwiZ3JvdXBFbGVtZW50Iiwib3B0aW9uRWxlbWVudCIsImN1cnJlbnRPcHRpb25FbGVtZW50IiwibmV4dFZhbHVlIiwicmVuZGVyRW1wdHlPcHRpb24iLCJyZW1vdmVFbXB0eU9wdGlvbiIsInJlbmRlclVua25vd25PcHRpb24iLCJyZW1vdmVVbmtub3duT3B0aW9uIiwid3JpdGVWYWx1ZSIsInNlbGVjdGVkVmFsdWVzIiwic2VsZWN0aW9ucyIsInNlbGVjdGVkT3B0aW9uIiwiQlJBQ0UiLCJJU19XSEVOIiwidXBkYXRlRWxlbWVudFRleHQiLCJuZXdUZXh0IiwibnVtYmVyRXhwIiwid2hlbkV4cCIsIndoZW5zIiwid2hlbnNFeHBGbnMiLCJicmFjZVJlcGxhY2VtZW50Iiwid2F0Y2hSZW1vdmVyIiwiYXR0cmlidXRlTmFtZSIsInRtcE1hdGNoIiwid2hlbktleSIsImNvdW50SXNOYU4iLCJ3aGVuRXhwRm4iLCJOR19SRU1PVkVEIiwibmdSZXBlYXRNaW5FcnIiLCJ1cGRhdGVTY29wZSIsInZhbHVlSWRlbnRpZmllciIsImtleUlkZW50aWZpZXIiLCJhcnJheUxlbmd0aCIsIiRmaXJzdCIsIiRsYXN0IiwiJG1pZGRsZSIsIiRvZGQiLCIkZXZlbiIsImdldEJsb2NrU3RhcnQiLCJnZXRCbG9ja0VuZCIsIm5nUmVwZWF0RW5kQ29tbWVudCIsImFsaWFzQXMiLCJ0cmFja0J5RXhwIiwidHJhY2tCeUV4cEdldHRlciIsInRyYWNrQnlJZEV4cEZuIiwidHJhY2tCeUlkQXJyYXlGbiIsInRyYWNrQnlJZE9iakZuIiwiaGFzaEZuTG9jYWxzIiwibGFzdEJsb2NrTWFwIiwibmV4dE5vZGUiLCJjb2xsZWN0aW9uTGVuZ3RoIiwidHJhY2tCeUlkIiwidHJhY2tCeUlkRm4iLCJjb2xsZWN0aW9uS2V5cyIsIm5leHRCbG9ja09yZGVyIiwicHJldmlvdXNOb2RlIiwibmV4dEJsb2NrTWFwIiwiYmxvY2tLZXkiLCJOR19ISURFX0NMQVNTIiwiTkdfSElERV9JTl9QUk9HUkVTU19DTEFTUyIsIm5ld1N0eWxlcyIsIm9sZFN0eWxlcyIsImNhc2VzIiwibmdTd2l0Y2hDb250cm9sbGVyIiwic2VsZWN0ZWRUcmFuc2NsdWRlcyIsInNlbGVjdGVkRWxlbWVudHMiLCJwcmV2aW91c0xlYXZlQW5pbWF0aW9ucyIsInNlbGVjdGVkU2NvcGVzIiwic3BsaWNlRmFjdG9yeSIsInNlbGVjdGVkVHJhbnNjbHVkZSIsImNhc2VFbGVtZW50Iiwic2VsZWN0ZWRTY29wZSIsIm5vb3BOZ01vZGVsQ29udHJvbGxlciIsIlNlbGVjdENvbnRyb2xsZXIiLCJvcHRpb25zTWFwIiwidW5rbm93blZhbCIsImhhc09wdGlvbiIsImxhc3RWaWV3IiwibGFzdFZpZXdSZWYiLCJjaHJvbWVIYWNrIiwic2VsZWN0Q3RybE5hbWUiLCJwYXR0ZXJuRXhwIiwiaW50VmFsIiwxNCwiLi9hbmd1bGFyIl0sIm1hcHBpbmdzIjoiQ0FBQSxRQUFBQSxHQUFBQyxFQUFBQyxFQUFBQyxHQUFBLFFBQUFDLEdBQUFDLEVBQUFDLEdBQUEsSUFBQUosRUFBQUcsR0FBQSxDQUFBLElBQUFKLEVBQUFJLEdBQUEsQ0FBQSxHQUFBRSxHQUFBLGtCQUFBQyxVQUFBQSxPQUFBLEtBQUFGLEdBQUFDLEVBQUEsTUFBQUEsR0FBQUYsR0FBQSxFQUFBLElBQUFJLEVBQUEsTUFBQUEsR0FBQUosR0FBQSxFQUFBLElBQUFLLEdBQUEsR0FBQUMsT0FBQSx1QkFBQU4sRUFBQSxJQUFBLE1BQUFLLEdBQUFFLEtBQUEsbUJBQUFGLEVBQUEsR0FBQUcsR0FBQVgsRUFBQUcsSUFBQVMsV0FBQWIsR0FBQUksR0FBQSxHQUFBVSxLQUFBRixFQUFBQyxRQUFBLFNBQUFkLEdBQUEsR0FBQUUsR0FBQUQs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VUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLHFCQUFBLFFBQ0FDLG1CQUFBLDBCQUNBQywwQkFBQSw4QkFFQUMsTUFDQWpCLEdBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxxQkFBQSxRQUNBQyxtQkFBQSwwQkFDQUMsMEJBQUEsMEJBRUFFLFFBQ0FsQixHQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMscUJBQUEsUUFDQUMsbUJBQUEsa0JBQ0FDLDBCQUFBLDBCQUVBRyxlQUNBbkIsR0FBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLHFCQUFBLFFBQ0FDLG1CQUFBLGtCQUNBQywwQkFBQSxnQkFFQUksUUFDQXBCLEdBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxxQkFBQSxRQUNBQyxtQkFBQSxrQkFDQUMsMEJBQUEscUJBRUFLLE1BQ0FyQixHQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMscUJBQUEsUUFDQUMsbUJBQUEsdUJBQ0FDLDBCQUFBLDhCQUVBTSxjQUNBdEIsR0FBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLHFCQUFBLE9BQ0FTLG9CQUFBLDJCQUNBUCwwQkFBQSx3QkFFQVEsTUFDQXhCLEdBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxxQkFBQSxPQUNBUyxvQkFBQSxzQkFDQVAsMEJBQUEsbUJBRUFTLE1BQ0F6QixHQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMscUJBQUEsT0FDQVMsb0JBQUEsc0JBQ0FQLDBCQUFBLGVBRUFVLE9BQ0ExQixHQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMscUJBQUEsT0FDQVMsb0JBQUEsc0JBQ0FQLDBCQUFBLGVBRUFXLGVBQ0EzQixHQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMscUJBQUEsT0FDQVMsb0JBQUEsVUFDQVAsMEJBQUEsV0FFQVksTUFDQTVCLEdBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxxQkFBQSxPQUNBUyxvQkFBQSxNQUNBUCwwQkFBQSxPQUVBYSxRQUNBN0IsR0FBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLHFCQUFBLFFBRUFnQixPQUNBOUIsR0FBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQTtBQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLHFCQUFBLFFBRUFpQixRQUNBL0IsR0FBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLHFCQUFBLE9BQ0FTLG9CQUFBLFVBQ0FQLDBCQUFBLFdBRUFnQixlQUNBaEMsR0FBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLHFCQUFBLFFBQ0FDLG1CQUFBLCtCQUNBQywwQkFBQSxpQ0FFQWlCLE9BQ0FqQyxHQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMscUJBQUEsUUFDQUMsbUJBQUEsYUFDQUMsMEJBQUEsV0FFQWtCLE1BQ0FsQyxHQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0EwQixLQUFBLFVBQ0F6QixLQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FBQSxVQUNBQyxLQUFBLFVBQ0FDLHFCQUFBLE9BQ0FTLG9CQUFBLG1CQUVBYSxhQUNBcEMsR0FBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxLQUFBLFVBQ0FDLEtBQUEsVUFDQUMsS0FB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MkYsU0FBQSxZQUFBLFNBQUFuRixHQUNBLEdBQUFza0ksR0FBQXYxRCxFQUFBL3VFLEVBQ0E0L0MsR0FBQW4xQixNQUFBNjVHLEdBQUEsR0FBQUEsRUFDQWx6RyxFQUFBbzJGLGNBRUFwMkYsRUFBQXBQLFlBQUE0OUIsVUFBQSxTQUFBSSxFQUFBdlMsR0FDQSxNQUFBLEdBQUFtUyxHQUFBeHVCLEVBQUFqUSxTQUFBc3NCLElBQUFBLEVBQUF6MkMsUUFBQTRvRCxPQU1BbzlCLEdBQUEsV0FDQSxPQUNBbjhELFNBQUEsSUFDQXJxQixRQUFBLFdBQ0E0ckIsS0FBQSxTQUFBcmQsRUFBQTdHLEVBQUFzQixFQUFBNHhCLEdBQ0EsR0FBQUEsRUFBQSxDQUVBLEdBQUEyckQsR0FBQSxDQUNBdjlFLEdBQUEyRixTQUFBLFlBQUEsU0FBQW5GLEdBQ0ErOEUsRUFBQWhPLEVBQUEvdUUsSUFBQSxFQUNBb3hCLEVBQUFvMkYsY0FFQXAyRixFQUFBcFAsWUFBQSs2RCxVQUFBLFNBQUEvOEIsRUFBQXZTLEdBQ0EsTUFBQXJjLEdBQUFqUSxTQUFBc3NCLElBQUFBLEVBQUF6MkMsUUFBQStsRixNQU1BLE9BQUFoaEYsR0FBQTlDLFFBQUF3QixjQUVBaXJDLFNBQUEybEUsSUFBQSxtREFNQTkxQixLQUVBNkMsR0FBQW4vRSxRQUVBNkUsSUFBQTNFLEdBQUE4eUgsTUFBQSxXQUNBcjRDLEdBQUF6NkUsRUFBQXNCLFFaMHdtQkdzQixPQUFRNUMsV2FsOTlDWDRDLE9BQUE5QyxRQUFBdS9FLFNBQUF6OEUsT0FBQTlDLFFBQUFDLFFBQUFDLFNBQUEwdkMsTUFBQTJJLFFBQUEsdVJBQ0EreUYsSUFBQSxTQUFBL3RJLEVBQUFVLEVBQUFKLEdicTk5Q0FOLEVBQVEsYUFDUlUsRUFBT0osUUFBVW1DLFVBRWR1ckksWUFBWSxVQUFVIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIid1c2Ugc3RyaWN0JztcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xucmVxdWlyZSgnYW5ndWxhci1tYXRlcmlhbCcpO1xuLy8gQG5nSW5qZWN0XG5mdW5jdGlvbiBVc2VyQ29udHJvbGxlcigkc2NvcGUsIHVzZXJTZXJ2aWNlLCAkbWRTaWRlbmF2LCAkbWRCb3R0b21TaGVldCwgJGxvZywgJHEpIHtcbiAgICAkc2NvcGUuc2VsZWN0ZWQgPSBudWxsO1xuICAgICRzY29wZS51c2VycyA9IFtdO1xuICAgICRzY29wZS5zZWxlY3RVc2VyID0gc2VsZWN0VXNlcjtcbiAgICAkc2NvcGUudG9nZ2xlTGlzdCA9IHRvZ2dsZVVzZXJzTGlzdDtcbiAgICAkc2NvcGUuc2hvd0NvbnRhY3RPcHRpb25zID0gc2hvd0NvbnRhY3RPcHRpb25zO1xuICAgICRzY29wZS5pc1NpZGVuYXZPcGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJG1kU2lkZW5hdignbGVmdCcpLmlzT3BlbigpO1xuICAgIH07XG4gICAgLy8gTG9hZCBhbGwgcmVnaXN0ZXJlZCB1c2Vyc1xuICAgIHVzZXJTZXJ2aWNlXG4gICAgICAgIC5sb2FkQWxsVXNlcnMoKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAodXNlcnMpIHtcbiAgICAgICAgJHNjb3BlLnVzZXJzID0gW10uY29uY2F0KHVzZXJzKTtcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkID0gdXNlcnNbMF07XG4gICAgfSk7XG4gICAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgLy8gSW50ZXJuYWwgbWV0aG9kc1xuICAgIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgIC8qKlxuICAgICAqIEZpcnN0IGhpZGUgdGhlIGJvdHRvbXNoZWV0IElGIHZpc2libGUsIHRoZW5cbiAgICAgKiBoaWRlIG9yIFNob3cgdGhlICdsZWZ0JyBzaWRlTmF2IGFyZWFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b2dnbGVVc2Vyc0xpc3QoKSB7XG4gICAgICAgIHZhciBwZW5kaW5nID0gYm90dG9tU2hlZXRQcm9taXNlIHx8ICRxLndoZW4odHJ1ZSk7XG4gICAgICAgIHBlbmRpbmcudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkbWRTaWRlbmF2KCdsZWZ0JykudG9nZ2xlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICAkbWRCb3R0b21TaGVldC5oaWRlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbGVjdCB0aGUgY3VycmVudCBhdmF0YXJzXG4gICAgICogQHBhcmFtIG1lbnVJZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNlbGVjdFVzZXIodXNlcikge1xuICAgICAgICAkc2NvcGUuc2VsZWN0ZWQgPSB1c2VyO1xuICAgICAgICAkc2NvcGUudG9nZ2xlTGlzdCgpO1xuICAgIH1cbiAgICB2YXIgYm90dG9tU2hlZXRQcm9taXNlO1xuICAgIC8qKlxuICAgICAqIFNob3cgdGhlIGJvdHRvbSBzaGVldFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNob3dDb250YWN0T3B0aW9ucygkZXZlbnQpIHtcbiAgICAgICAgdmFyIHVzZXIgPSAkc2NvcGUuc2VsZWN0ZWQ7XG4gICAgICAgIGJvdHRvbVNoZWV0UHJvbWlzZSA9ICRtZEJvdHRvbVNoZWV0LnNob3coe1xuICAgICAgICAgICAgcGFyZW50OiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKSksXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy92aWV3cy9wYXJ0aWFscy9jb250YWN0U2hlZXQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiBDb250YWN0UGFuZWxDb250cm9sbGVyLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiBcImNwXCIsXG4gICAgICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgICAgICAgdGFyZ2V0RXZlbnQ6ICRldmVudFxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChjbGlja2VkSXRlbSkge1xuICAgICAgICAgICAgY2xpY2tlZEl0ZW0gJiYgJGxvZy5kZWJ1ZyhjbGlja2VkSXRlbS5uYW1lICsgJyBjbGlja2VkIScpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGJvdHRvbVNoZWV0UHJvbWlzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqICBCb3R0b20gU2hlZXQgY29udHJvbGxlciBmb3IgdGhlIEF2YXRhciBBY3Rpb25zXG4gICAgICAgICAqXG4gICAgICAgICAqICBAbmdJbmplY3RcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIENvbnRhY3RQYW5lbENvbnRyb2xsZXIoJG1kQm90dG9tU2hlZXQpIHtcbiAgICAgICAgICAgIHRoaXMudXNlciA9IHVzZXI7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBbXG4gICAgICAgICAgICAgICAgeyBuYW1lOiAnUGhvbmUnLCBpY29uOiAncGhvbmUnLCBpY29uX3VybDogJ2Fzc2V0cy9zdmcvcGhvbmUuc3ZnJyB9LFxuICAgICAgICAgICAgICAgIHsgbmFtZTogJ1R3aXR0ZXInLCBpY29uOiAndHdpdHRlcicsIGljb25fdXJsOiAnYXNzZXRzL3N2Zy90d2l0dGVyLnN2ZycgfSxcbiAgICAgICAgICAgICAgICB7IG5hbWU6ICdHb29nbGUrJywgaWNvbjogJ2dvb2dsZV9wbHVzJywgaWNvbl91cmw6ICdhc3NldHMvc3ZnL2dvb2dsZV9wbHVzLnN2ZycgfSxcbiAgICAgICAgICAgICAgICB7IG5hbWU6ICdIYW5nb3V0JywgaWNvbjogJ2hhbmdvdXRzJywgaWNvbl91cmw6ICdhc3NldHMvc3ZnL2hhbmdvdXRzLnN2ZycgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHRoaXMuc3VibWl0Q29udGFjdCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAkbWRCb3R0b21TaGVldC5oaWRlKGFjdGlvbik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Vc2VyQ29udHJvbGxlciA9IFVzZXJDb250cm9sbGVyO1xuIixudWxsLCIndXNlIHN0cmljdCc7XG52YXIgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcbnZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnc2FtcGxlLmFwcCcpO1xudmFyIFVDID0gcmVxdWlyZSgnLi9Vc2VyQ29udHJvbGxlcicpO1xuYXBwLmNvbnRyb2xsZXIoJ1VzZXJDb250cm9sbGVyJywgVUMuVXNlckNvbnRyb2xsZXIpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XG52YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ3NhbXBsZS5hcHAnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xucmVxdWlyZSgnYW5ndWxhci1hcmlhJyk7XG5yZXF1aXJlKCdhbmd1bGFyLWFuaW1hdGUnKTtcbnJlcXVpcmUoJ2FuZ3VsYXItbWF0ZXJpYWwnKTtcbmFuZ3VsYXIubW9kdWxlKCdzYW1wbGUuYXBwJywgWyduZ01hdGVyaWFsJ10pO1xucmVxdWlyZSgnLi9zZXJ2aWNlcycpO1xucmVxdWlyZSgnLi9kaXJlY3RpdmVzJyk7XG5yZXF1aXJlKCcuL2NvbnRyb2xsZXJzJyk7XG5hbmd1bGFyLmJvb3RzdHJhcChkb2N1bWVudCwgWydzYW1wbGUuYXBwJ10pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQG5nSW5qZWN0XG5mdW5jdGlvbiBVc2VyU2VydmljZUZhY3RvcnkoJHEpIHtcbiAgICB2YXIgdXNlcnMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICdMaWEgTHVnbycsXG4gICAgICAgICAgICBhdmF0YXI6ICdzdmctMScsXG4gICAgICAgICAgICBjb250ZW50OiAnSSBsb3ZlIGNoZWVzZSwgZXNwZWNpYWxseSBhaXJlZGFsZSBxdWVzby4gQ2hlZXNlIGFuZCBiaXNjdWl0cyBoYWxsb3VtaSBjYXVsaWZsb3dlciBjaGVlc2UgY290dGFnZSBjaGVlc2Ugc3dpc3MgYm91cnNpbiBmb25kdWUgY2FlcnBoaWxseS4gQ293IHBvcnQtc2FsdXQgY2FtZW1iZXJ0IGRlIG5vcm1hbmRpZSBtYWNhcm9uaSBjaGVlc2UgZmV0YSB3aG8gbW92ZWQgbXkgY2hlZXNlIGJhYnliZWwgYm91cnNpbi4gUmVkIGxlaWNlc3RlciByb3F1ZWZvcnQgYm91cnNpbiBzcXVpcnR5IGNoZWVzZSBqYXJsc2JlcmcgYmx1ZSBjYXN0ZWxsbyBjYWVycGhpbGx5IGNoYWxrIGFuZCBjaGVlc2UuIExhbmNhc2hpcmUuJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnR2VvcmdlIER1a2UnLFxuICAgICAgICAgICAgYXZhdGFyOiAnc3ZnLTInLFxuICAgICAgICAgICAgY29udGVudDogJ1pvbWJpZSBpcHN1bSByZXZlcnN1cyBhYiB2aXJhbCBpbmZlcm5vLCBuYW0gcmljayBncmltZXMgbWFsdW0gY2VyZWJyby4gRGUgY2FybmUgbHVtYmVyaW5nIGFuaW1hdGEgY29ycG9yYSBxdWFlcml0aXMuIFN1bW11cyBicmFpbnMgc2l04oCL4oCLLCBtb3JibyB2ZWwgbWFsZWZpY2lhPyBEZSBhcG9jYWx5cHNpIGdvcmdlciBvbWVybyB1bmRlYWQgc3Vydml2b3IgZGljdHVtIG1hdXJpcy4nXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICdHZW5lciBEZWxvc3JleWVzJyxcbiAgICAgICAgICAgIGF2YXRhcjogJ3N2Zy0zJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6IFwiUmF3IGRlbmltIHBvdXItb3ZlciByZWFkeW1hZGUgRXRzeSBQaXRjaGZvcmsuIEZvdXIgZG9sbGFyIHRvYXN0IHBpY2tsZWQgbG9jYXZvcmUgYml0dGVycyBNY1N3ZWVuZXkncyBibG9nLiBUcnktaGFyZCBhcnQgcGFydHkgU2hvcmVkaXRjaCBzZWxmaWVzLiBPZGQgRnV0dXJlIGJ1dGNoZXIgVkhTLCBkaXNydXB0IHBvcC11cCBUaHVuZGVyY2F0cyBjaGlsbHdhdmUgdmlueWwgamVhbiBzaG9ydHMgdGF4aWRlcm15IG1hc3RlciBjbGVhbnNlIGxldHRlcnByZXNzIFdlcyBBbmRlcnNvbiBtdXN0YWNoZSBIZWx2ZXRpY2EuIFNjaGxpdHogYmljeWNsZSByaWdodHMgY2hpbGx3YXZlIGlyb255IGx1bWJlcmh1bmdyeSBLaWNrc3RhcnRlciBuZXh0IGxldmVsIHNyaXJhY2hhIHR5cGV3cml0ZXIgSW50ZWxsaWdlbnRzaWEsIG1pZ2FzIGtvZ2kgaGVpcmxvb20gdG91c2xlZC4gRGlzcnVwdCAzIHdvbGYgbW9vbiBsb21vIGZvdXIgbG9rby4gUHVnIG1sa3NoayBmYW5ueSBwYWNrIGxpdGVyYWxseSBob29kaWUgYmVzcG9rZSwgcHV0IGEgYmlyZCBvbiBpdCBNYXJmYSBtZXNzZW5nZXIgYmFnIGtvZ2kgVkhTLlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICdMYXdyZW5jZSBSYXknLFxuICAgICAgICAgICAgYXZhdGFyOiAnc3ZnLTQnLFxuICAgICAgICAgICAgY29udGVudDogJ1NjcmF0Y2ggdGhlIGZ1cm5pdHVyZSBzcGl0IHVwIG9uIGxpZ2h0IGdyYXkgY2FycGV0IGluc3RlYWQgb2YgYWRqYWNlbnQgbGlub2xldW0gc28gZWF0IGEgcGxhbnQsIGtpbGwgYSBoYW5kIHBlbHQgYXJvdW5kIHRoZSBob3VzZSBhbmQgdXAgYW5kIGRvd24gc3RhaXJzIGNoYXNpbmcgcGhhbnRvbXMgcnVuIGluIGNpcmNsZXMsIG9yIGNsYXcgZHJhcGVzLiBBbHdheXMgaHVuZ3J5IHBlbHQgYXJvdW5kIHRoZSBob3VzZSBhbmQgdXAgYW5kIGRvd24gc3RhaXJzIGNoYXNpbmcgcGhhbnRvbXMuJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnRXJuZXN0byBVcmJpbmEnLFxuICAgICAgICAgICAgYXZhdGFyOiAnc3ZnLTUnLFxuICAgICAgICAgICAgY29udGVudDogJ1dlYnR3byBpcHN1bSBkb2xvciBzaXQgYW1ldCwgZXNrb2JvIGNodW1ieSBkb29zdGFuZyBiZWJvLiBCdWJibGkgZ3JlcGxpbiBzdHlwaSBwcmV6aSBtemluZ2EgaGVyb2t1IHdha29vcGEsIHNob3BpZnkgYWlyYm5iIGRvZ3N0ZXIgZG9wcGxyIGdvb3J1IGp1bW8sIHJlZGRpdCBwbGlja2VycyBlZG1vZG8gc3R5cGkgemlsbG93IGV0c3kuJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnR2FuaSBGZXJyZXInLFxuICAgICAgICAgICAgYXZhdGFyOiAnc3ZnLTYnLFxuICAgICAgICAgICAgY29udGVudDogXCJMZWJvd3NraSBpcHN1bSB5ZWFoPyBXaGF0IGRvIHlvdSB0aGluayBoYXBwZW5zIHdoZW4geW91IGdldCByYWQ/IFlvdSB0dXJuIGluIHlvdXIgbGlicmFyeSBjYXJkPyBHZXQgYSBuZXcgZHJpdmVyJ3MgbGljZW5zZT8gU3RvcCBiZWluZyBhd2Vzb21lPyBEb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0IHByYWVzZW50IGFjIG1hZ25hIGp1c3RvIHBlbGxlbnRlc3F1ZSBhYyBsZWN0dXMuIFlvdSBkb24ndCBnbyBvdXQgYW5kIG1ha2UgYSBsaXZpbmcgZHJlc3NlZCBsaWtlIHRoYXQgaW4gdGhlIG1pZGRsZSBvZiBhIHdlZWtkYXkuIFF1aXMgZWxpdCBibGFuZGl0IGZyaW5naWxsYSBhIHV0IHR1cnBpcyBwcmFlc2VudCBmZWxpcyBsaWd1bGEsIG1hbGVzdWFkYSBzdXNjaXBpdCBtYWxlc3VhZGEuXCJcbiAgICAgICAgfVxuICAgIF07XG4gICAgLy8gUHJvbWlzZS1iYXNlZCBBUElcbiAgICByZXR1cm4ge1xuICAgICAgICBsb2FkQWxsVXNlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIFNpbXVsYXRlIGFzeW5jIG5hdHVyZSBvZiByZWFsIHJlbW90ZSBjYWxsc1xuICAgICAgICAgICAgcmV0dXJuICRxLndoZW4odXNlcnMpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmV4cG9ydHMuVXNlclNlcnZpY2VGYWN0b3J5ID0gVXNlclNlcnZpY2VGYWN0b3J5O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuZ3VsYXIgPSByZXF1aXJlKCdhbmd1bGFyJyk7XG52YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ3NhbXBsZS5hcHAnKTtcbmFwcC5jb25maWcoZnVuY3Rpb24gKCRtZFRoZW1pbmdQcm92aWRlciwgJG1kSWNvblByb3ZpZGVyKSB7XG4gICAgJG1kSWNvblByb3ZpZGVyXG4gICAgICAgIC5kZWZhdWx0SWNvblNldChcIi4vYXNzZXRzL3N2Zy9hdmF0YXJzLnN2Z1wiLCAxMjgpXG4gICAgICAgIC5pY29uKFwibWVudVwiLCBcIi4vYXNzZXRzL3N2Zy9tZW51LnN2Z1wiLCAyNClcbiAgICAgICAgLmljb24oXCJzaGFyZVwiLCBcIi4vYXNzZXRzL3N2Zy9zaGFyZS5zdmdcIiwgMjQpXG4gICAgICAgIC5pY29uKFwiZ29vZ2xlX3BsdXNcIiwgXCIuL2Fzc2V0cy9zdmcvZ29vZ2xlX3BsdXMuc3ZnXCIsIDUxMilcbiAgICAgICAgLmljb24oXCJoYW5nb3V0c1wiLCBcIi4vYXNzZXRzL3N2Zy9oYW5nb3V0cy5zdmdcIiwgNTEyKVxuICAgICAgICAuaWNvbihcInR3aXR0ZXJcIiwgXCIuL2Fzc2V0cy9zdmcvdHdpdHRlci5zdmdcIiwgNTEyKVxuICAgICAgICAuaWNvbihcInBob25lXCIsIFwiLi9hc3NldHMvc3ZnL3Bob25lLnN2Z1wiLCA1MTIpO1xuICAgICRtZFRoZW1pbmdQcm92aWRlci50aGVtZSgnZGVmYXVsdCcpXG4gICAgICAgIC5wcmltYXJ5UGFsZXR0ZSgnaW5kaWdvJylcbiAgICAgICAgLmFjY2VudFBhbGV0dGUoJ2JsdWUtZ3JleScpO1xufSk7XG52YXIgVVMgPSByZXF1aXJlKCcuL1VzZXJTZXJ2aWNlJyk7XG5hcHAuc2VydmljZSgndXNlclNlcnZpY2UnLCBVUy5Vc2VyU2VydmljZUZhY3RvcnkpO1xuIiwiLyoqXG4gKiBAbGljZW5zZSBBbmd1bGFySlMgdjEuNC4zXG4gKiAoYykgMjAxMC0yMDE1IEdvb2dsZSwgSW5jLiBodHRwOi8vYW5ndWxhcmpzLm9yZ1xuICogTGljZW5zZTogTUlUXG4gKi9cbihmdW5jdGlvbih3aW5kb3csIGFuZ3VsYXIsIHVuZGVmaW5lZCkgeyd1c2Ugc3RyaWN0JztcblxuLyoganNoaW50IGlnbm9yZTpzdGFydCAqL1xudmFyIG5vb3AgICAgICAgID0gYW5ndWxhci5ub29wO1xudmFyIGV4dGVuZCAgICAgID0gYW5ndWxhci5leHRlbmQ7XG52YXIganFMaXRlICAgICAgPSBhbmd1bGFyLmVsZW1lbnQ7XG52YXIgZm9yRWFjaCAgICAgPSBhbmd1bGFyLmZvckVhY2g7XG52YXIgaXNBcnJheSAgICAgPSBhbmd1bGFyLmlzQXJyYXk7XG52YXIgaXNTdHJpbmcgICAgPSBhbmd1bGFyLmlzU3RyaW5nO1xudmFyIGlzT2JqZWN0ICAgID0gYW5ndWxhci5pc09iamVjdDtcbnZhciBpc1VuZGVmaW5lZCA9IGFuZ3VsYXIuaXNVbmRlZmluZWQ7XG52YXIgaXNEZWZpbmVkICAgPSBhbmd1bGFyLmlzRGVmaW5lZDtcbnZhciBpc0Z1bmN0aW9uICA9IGFuZ3VsYXIuaXNGdW5jdGlvbjtcbnZhciBpc0VsZW1lbnQgICA9IGFuZ3VsYXIuaXNFbGVtZW50O1xuXG52YXIgRUxFTUVOVF9OT0RFID0gMTtcbnZhciBDT01NRU5UX05PREUgPSA4O1xuXG52YXIgTkdfQU5JTUFURV9DTEFTU05BTUUgPSAnbmctYW5pbWF0ZSc7XG52YXIgTkdfQU5JTUFURV9DSElMRFJFTl9EQVRBID0gJyQkbmdBbmltYXRlQ2hpbGRyZW4nO1xuXG52YXIgaXNQcm9taXNlTGlrZSA9IGZ1bmN0aW9uKHApIHtcbiAgcmV0dXJuIHAgJiYgcC50aGVuID8gdHJ1ZSA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRBcmcoYXJnLCBuYW1lLCByZWFzb24pIHtcbiAgaWYgKCFhcmcpIHtcbiAgICB0aHJvdyBuZ01pbkVycignYXJlcScsIFwiQXJndW1lbnQgJ3swfScgaXMgezF9XCIsIChuYW1lIHx8ICc/JyksIChyZWFzb24gfHwgXCJyZXF1aXJlZFwiKSk7XG4gIH1cbiAgcmV0dXJuIGFyZztcbn1cblxuZnVuY3Rpb24gbWVyZ2VDbGFzc2VzKGEsYikge1xuICBpZiAoIWEgJiYgIWIpIHJldHVybiAnJztcbiAgaWYgKCFhKSByZXR1cm4gYjtcbiAgaWYgKCFiKSByZXR1cm4gYTtcbiAgaWYgKGlzQXJyYXkoYSkpIGEgPSBhLmpvaW4oJyAnKTtcbiAgaWYgKGlzQXJyYXkoYikpIGIgPSBiLmpvaW4oJyAnKTtcbiAgcmV0dXJuIGEgKyAnICcgKyBiO1xufVxuXG5mdW5jdGlvbiBwYWNrYWdlU3R5bGVzKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlcyA9IHt9O1xuICBpZiAob3B0aW9ucyAmJiAob3B0aW9ucy50byB8fCBvcHRpb25zLmZyb20pKSB7XG4gICAgc3R5bGVzLnRvID0gb3B0aW9ucy50bztcbiAgICBzdHlsZXMuZnJvbSA9IG9wdGlvbnMuZnJvbTtcbiAgfVxuICByZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBwZW5kQ2xhc3NlcyhjbGFzc2VzLCBmaXgsIGlzUHJlZml4KSB7XG4gIHZhciBjbGFzc05hbWUgPSAnJztcbiAgY2xhc3NlcyA9IGlzQXJyYXkoY2xhc3NlcylcbiAgICAgID8gY2xhc3Nlc1xuICAgICAgOiBjbGFzc2VzICYmIGlzU3RyaW5nKGNsYXNzZXMpICYmIGNsYXNzZXMubGVuZ3RoXG4gICAgICAgICAgPyBjbGFzc2VzLnNwbGl0KC9cXHMrLylcbiAgICAgICAgICA6IFtdO1xuICBmb3JFYWNoKGNsYXNzZXMsIGZ1bmN0aW9uKGtsYXNzLCBpKSB7XG4gICAgaWYgKGtsYXNzICYmIGtsYXNzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNsYXNzTmFtZSArPSAoaSA+IDApID8gJyAnIDogJyc7XG4gICAgICBjbGFzc05hbWUgKz0gaXNQcmVmaXggPyBmaXggKyBrbGFzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDoga2xhc3MgKyBmaXg7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNsYXNzTmFtZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRnJvbUFycmF5KGFyciwgdmFsKSB7XG4gIHZhciBpbmRleCA9IGFyci5pbmRleE9mKHZhbCk7XG4gIGlmICh2YWwgPj0gMCkge1xuICAgIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmlwQ29tbWVudHNGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50IGluc3RhbmNlb2YganFMaXRlKSB7XG4gICAgc3dpdGNoIChlbGVtZW50Lmxlbmd0aCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gW107XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDE6XG4gICAgICAgIC8vIHRoZXJlIGlzIG5vIHBvaW50IG9mIHN0cmlwcGluZyBhbnl0aGluZyBpZiB0aGUgZWxlbWVudFxuICAgICAgICAvLyBpcyB0aGUgb25seSBlbGVtZW50IHdpdGhpbiB0aGUganFMaXRlIHdyYXBwZXIuXG4gICAgICAgIC8vIChpdCdzIGltcG9ydGFudCB0aGF0IHdlIHJldGFpbiB0aGUgZWxlbWVudCBpbnN0YW5jZS4pXG4gICAgICAgIGlmIChlbGVtZW50WzBdLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGpxTGl0ZShleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCkpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgcmV0dXJuIGpxTGl0ZShlbGVtZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnRbMF0pIHJldHVybiBlbGVtZW50O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZWxtID0gZWxlbWVudFtpXTtcbiAgICBpZiAoZWxtLm5vZGVUeXBlID09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgcmV0dXJuIGVsbTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gJCRhZGRDbGFzcygkJGpxTGl0ZSwgZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIGZvckVhY2goZWxlbWVudCwgZnVuY3Rpb24oZWxtKSB7XG4gICAgJCRqcUxpdGUuYWRkQ2xhc3MoZWxtLCBjbGFzc05hbWUpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gJCRyZW1vdmVDbGFzcygkJGpxTGl0ZSwgZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIGZvckVhY2goZWxlbWVudCwgZnVuY3Rpb24oZWxtKSB7XG4gICAgJCRqcUxpdGUucmVtb3ZlQ2xhc3MoZWxtLCBjbGFzc05hbWUpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYXBwbHlBbmltYXRpb25DbGFzc2VzRmFjdG9yeSgkJGpxTGl0ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmFkZENsYXNzKSB7XG4gICAgICAkJGFkZENsYXNzKCQkanFMaXRlLCBlbGVtZW50LCBvcHRpb25zLmFkZENsYXNzKTtcbiAgICAgIG9wdGlvbnMuYWRkQ2xhc3MgPSBudWxsO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5yZW1vdmVDbGFzcykge1xuICAgICAgJCRyZW1vdmVDbGFzcygkJGpxTGl0ZSwgZWxlbWVudCwgb3B0aW9ucy5yZW1vdmVDbGFzcyk7XG4gICAgICBvcHRpb25zLnJlbW92ZUNsYXNzID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJlcGFyZUFuaW1hdGlvbk9wdGlvbnMob3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKCFvcHRpb25zLiQkcHJlcGFyZWQpIHtcbiAgICB2YXIgZG9tT3BlcmF0aW9uID0gb3B0aW9ucy5kb21PcGVyYXRpb24gfHwgbm9vcDtcbiAgICBvcHRpb25zLmRvbU9wZXJhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgb3B0aW9ucy4kJGRvbU9wZXJhdGlvbkZpcmVkID0gdHJ1ZTtcbiAgICAgIGRvbU9wZXJhdGlvbigpO1xuICAgICAgZG9tT3BlcmF0aW9uID0gbm9vcDtcbiAgICB9O1xuICAgIG9wdGlvbnMuJCRwcmVwYXJlZCA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbmZ1bmN0aW9uIGFwcGx5QW5pbWF0aW9uU3R5bGVzKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgYXBwbHlBbmltYXRpb25Gcm9tU3R5bGVzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICBhcHBseUFuaW1hdGlvblRvU3R5bGVzKGVsZW1lbnQsIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBhcHBseUFuaW1hdGlvbkZyb21TdHlsZXMoZWxlbWVudCwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5mcm9tKSB7XG4gICAgZWxlbWVudC5jc3Mob3B0aW9ucy5mcm9tKTtcbiAgICBvcHRpb25zLmZyb20gPSBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5QW5pbWF0aW9uVG9TdHlsZXMoZWxlbWVudCwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucy50bykge1xuICAgIGVsZW1lbnQuY3NzKG9wdGlvbnMudG8pO1xuICAgIG9wdGlvbnMudG8gPSBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlQW5pbWF0aW9uT3B0aW9ucyhlbGVtZW50LCB0YXJnZXQsIG5ld09wdGlvbnMpIHtcbiAgdmFyIHRvQWRkID0gKHRhcmdldC5hZGRDbGFzcyB8fCAnJykgKyAnICcgKyAobmV3T3B0aW9ucy5hZGRDbGFzcyB8fCAnJyk7XG4gIHZhciB0b1JlbW92ZSA9ICh0YXJnZXQucmVtb3ZlQ2xhc3MgfHwgJycpICsgJyAnICsgKG5ld09wdGlvbnMucmVtb3ZlQ2xhc3MgfHwgJycpO1xuICB2YXIgY2xhc3NlcyA9IHJlc29sdmVFbGVtZW50Q2xhc3NlcyhlbGVtZW50LmF0dHIoJ2NsYXNzJyksIHRvQWRkLCB0b1JlbW92ZSk7XG5cbiAgZXh0ZW5kKHRhcmdldCwgbmV3T3B0aW9ucyk7XG5cbiAgaWYgKGNsYXNzZXMuYWRkQ2xhc3MpIHtcbiAgICB0YXJnZXQuYWRkQ2xhc3MgPSBjbGFzc2VzLmFkZENsYXNzO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldC5hZGRDbGFzcyA9IG51bGw7XG4gIH1cblxuICBpZiAoY2xhc3Nlcy5yZW1vdmVDbGFzcykge1xuICAgIHRhcmdldC5yZW1vdmVDbGFzcyA9IGNsYXNzZXMucmVtb3ZlQ2xhc3M7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0LnJlbW92ZUNsYXNzID0gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVFbGVtZW50Q2xhc3NlcyhleGlzdGluZywgdG9BZGQsIHRvUmVtb3ZlKSB7XG4gIHZhciBBRERfQ0xBU1MgPSAxO1xuICB2YXIgUkVNT1ZFX0NMQVNTID0gLTE7XG5cbiAgdmFyIGZsYWdzID0ge307XG4gIGV4aXN0aW5nID0gc3BsaXRDbGFzc2VzVG9Mb29rdXAoZXhpc3RpbmcpO1xuXG4gIHRvQWRkID0gc3BsaXRDbGFzc2VzVG9Mb29rdXAodG9BZGQpO1xuICBmb3JFYWNoKHRvQWRkLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgZmxhZ3Nba2V5XSA9IEFERF9DTEFTUztcbiAgfSk7XG5cbiAgdG9SZW1vdmUgPSBzcGxpdENsYXNzZXNUb0xvb2t1cCh0b1JlbW92ZSk7XG4gIGZvckVhY2godG9SZW1vdmUsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICBmbGFnc1trZXldID0gZmxhZ3Nba2V5XSA9PT0gQUREX0NMQVNTID8gbnVsbCA6IFJFTU9WRV9DTEFTUztcbiAgfSk7XG5cbiAgdmFyIGNsYXNzZXMgPSB7XG4gICAgYWRkQ2xhc3M6ICcnLFxuICAgIHJlbW92ZUNsYXNzOiAnJ1xuICB9O1xuXG4gIGZvckVhY2goZmxhZ3MsIGZ1bmN0aW9uKHZhbCwga2xhc3MpIHtcbiAgICB2YXIgcHJvcCwgYWxsb3c7XG4gICAgaWYgKHZhbCA9PT0gQUREX0NMQVNTKSB7XG4gICAgICBwcm9wID0gJ2FkZENsYXNzJztcbiAgICAgIGFsbG93ID0gIWV4aXN0aW5nW2tsYXNzXTtcbiAgICB9IGVsc2UgaWYgKHZhbCA9PT0gUkVNT1ZFX0NMQVNTKSB7XG4gICAgICBwcm9wID0gJ3JlbW92ZUNsYXNzJztcbiAgICAgIGFsbG93ID0gZXhpc3Rpbmdba2xhc3NdO1xuICAgIH1cbiAgICBpZiAoYWxsb3cpIHtcbiAgICAgIGlmIChjbGFzc2VzW3Byb3BdLmxlbmd0aCkge1xuICAgICAgICBjbGFzc2VzW3Byb3BdICs9ICcgJztcbiAgICAgIH1cbiAgICAgIGNsYXNzZXNbcHJvcF0gKz0ga2xhc3M7XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBzcGxpdENsYXNzZXNUb0xvb2t1cChjbGFzc2VzKSB7XG4gICAgaWYgKGlzU3RyaW5nKGNsYXNzZXMpKSB7XG4gICAgICBjbGFzc2VzID0gY2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgIH1cblxuICAgIHZhciBvYmogPSB7fTtcbiAgICBmb3JFYWNoKGNsYXNzZXMsIGZ1bmN0aW9uKGtsYXNzKSB7XG4gICAgICAvLyBzb21ldGltZXMgdGhlIHNwbGl0IGxlYXZlcyBlbXB0eSBzdHJpbmcgdmFsdWVzXG4gICAgICAvLyBpbmNhc2UgZXh0cmEgc3BhY2VzIHdlcmUgYXBwbGllZCB0byB0aGUgb3B0aW9uc1xuICAgICAgaWYgKGtsYXNzLmxlbmd0aCkge1xuICAgICAgICBvYmpba2xhc3NdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzZXM7XG59XG5cbmZ1bmN0aW9uIGdldERvbU5vZGUoZWxlbWVudCkge1xuICByZXR1cm4gKGVsZW1lbnQgaW5zdGFuY2VvZiBhbmd1bGFyLmVsZW1lbnQpID8gZWxlbWVudFswXSA6IGVsZW1lbnQ7XG59XG5cbnZhciAkJHJBRlNjaGVkdWxlckZhY3RvcnkgPSBbJyQkckFGJywgZnVuY3Rpb24oJCRyQUYpIHtcbiAgdmFyIHRpY2tRdWV1ZSA9IFtdO1xuICB2YXIgY2FuY2VsRm47XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGVyKHRhc2tzKSB7XG4gICAgLy8gd2UgbWFrZSBhIGNvcHkgc2luY2UgUkFGU2NoZWR1bGVyIG11dGF0ZXMgdGhlIHN0YXRlXG4gICAgLy8gb2YgdGhlIHBhc3NlZCBpbiBhcnJheSB2YXJpYWJsZSBhbmQgdGhpcyB3b3VsZCBiZSBkaWZmaWN1bHRcbiAgICAvLyB0byB0cmFjayBkb3duIG9uIHRoZSBvdXRzaWRlIGNvZGVcbiAgICB0aWNrUXVldWUucHVzaChbXS5jb25jYXQodGFza3MpKTtcbiAgICBuZXh0VGljaygpO1xuICB9XG5cbiAgLyogd2FpdFVudGlsUXVpZXQgZG9lcyB0d28gdGhpbmdzOlxuICAgKiAxLiBJdCB3aWxsIHJ1biB0aGUgRklOQUwgYGZuYCB2YWx1ZSBvbmx5IHdoZW4gYW4gdW5jYW5jZWxsZWQgUkFGIGhhcyBwYXNzZWQgdGhyb3VnaFxuICAgKiAyLiBJdCB3aWxsIGRlbGF5IHRoZSBuZXh0IHdhdmUgb2YgdGFza3MgZnJvbSBydW5uaW5nIHVudGlsIHRoZSBxdWlldCBgZm5gIGhhcyBydW4uXG4gICAqXG4gICAqIFRoZSBtb3RpdmF0aW9uIGhlcmUgaXMgdGhhdCBhbmltYXRpb24gY29kZSBjYW4gcmVxdWVzdCBtb3JlIHRpbWUgZnJvbSB0aGUgc2NoZWR1bGVyXG4gICAqIGJlZm9yZSB0aGUgbmV4dCB3YXZlIHJ1bnMuIFRoaXMgYWxsb3dzIGZvciBjZXJ0YWluIERPTSBwcm9wZXJ0aWVzIHN1Y2ggYXMgY2xhc3NlcyB0b1xuICAgKiBiZSByZXNvbHZlZCBpbiB0aW1lIGZvciB0aGUgbmV4dCBhbmltYXRpb24gdG8gcnVuLlxuICAgKi9cbiAgc2NoZWR1bGVyLndhaXRVbnRpbFF1aWV0ID0gZnVuY3Rpb24oZm4pIHtcbiAgICBpZiAoY2FuY2VsRm4pIGNhbmNlbEZuKCk7XG5cbiAgICBjYW5jZWxGbiA9ICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgY2FuY2VsRm4gPSBudWxsO1xuICAgICAgZm4oKTtcbiAgICAgIG5leHRUaWNrKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjaGVkdWxlcjtcblxuICBmdW5jdGlvbiBuZXh0VGljaygpIHtcbiAgICBpZiAoIXRpY2tRdWV1ZS5sZW5ndGgpIHJldHVybjtcblxuICAgIHZhciB1cGRhdGVkUXVldWUgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRpY2tRdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlubmVyUXVldWUgPSB0aWNrUXVldWVbaV07XG4gICAgICBydW5OZXh0VGFzayhpbm5lclF1ZXVlKTtcbiAgICAgIGlmIChpbm5lclF1ZXVlLmxlbmd0aCkge1xuICAgICAgICB1cGRhdGVkUXVldWUucHVzaChpbm5lclF1ZXVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGlja1F1ZXVlID0gdXBkYXRlZFF1ZXVlO1xuXG4gICAgaWYgKCFjYW5jZWxGbikge1xuICAgICAgJCRyQUYoZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghY2FuY2VsRm4pIG5leHRUaWNrKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBydW5OZXh0VGFzayh0YXNrcykge1xuICAgIHZhciBuZXh0VGFzayA9IHRhc2tzLnNoaWZ0KCk7XG4gICAgbmV4dFRhc2soKTtcbiAgfVxufV07XG5cbnZhciAkJEFuaW1hdGVDaGlsZHJlbkRpcmVjdGl2ZSA9IFtmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgIHZhciB2YWwgPSBhdHRycy5uZ0FuaW1hdGVDaGlsZHJlbjtcbiAgICBpZiAoYW5ndWxhci5pc1N0cmluZyh2YWwpICYmIHZhbC5sZW5ndGggPT09IDApIHsgLy9lbXB0eSBhdHRyaWJ1dGVcbiAgICAgIGVsZW1lbnQuZGF0YShOR19BTklNQVRFX0NISUxEUkVOX0RBVEEsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhdHRycy4kb2JzZXJ2ZSgnbmdBbmltYXRlQ2hpbGRyZW4nLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlID09PSAnb24nIHx8IHZhbHVlID09PSAndHJ1ZSc7XG4gICAgICAgIGVsZW1lbnQuZGF0YShOR19BTklNQVRFX0NISUxEUkVOX0RBVEEsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkYW5pbWF0ZUNzc1xuICogQGtpbmQgb2JqZWN0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYCRhbmltYXRlQ3NzYCBzZXJ2aWNlIGlzIGEgdXNlZnVsIHV0aWxpdHkgdG8gdHJpZ2dlciBjdXN0b21pemVkIENTUy1iYXNlZCB0cmFuc2l0aW9ucy9rZXlmcmFtZXNcbiAqIGZyb20gYSBKYXZhU2NyaXB0LWJhc2VkIGFuaW1hdGlvbiBvciBkaXJlY3RseSBmcm9tIGEgZGlyZWN0aXZlLiBUaGUgcHVycG9zZSBvZiBgJGFuaW1hdGVDc3NgIGlzIE5PVFxuICogdG8gc2lkZS1zdGVwIGhvdyBgJGFuaW1hdGVgIGFuZCBuZ0FuaW1hdGUgd29yaywgYnV0IHRoZSBnb2FsIGlzIHRvIGFsbG93IHByZS1leGlzdGluZyBhbmltYXRpb25zIG9yXG4gKiBkaXJlY3RpdmVzIHRvIGNyZWF0ZSBtb3JlIGNvbXBsZXggYW5pbWF0aW9ucyB0aGF0IGNhbiBiZSBwdXJlbHkgZHJpdmVuIHVzaW5nIENTUyBjb2RlLlxuICpcbiAqIE5vdGUgdGhhdCBvbmx5IGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBDU1MgdHJhbnNpdGlvbnMgYW5kL29yIGtleWZyYW1lIGFuaW1hdGlvbnMgYXJlIGNhcGFibGUgb2ZcbiAqIHJlbmRlcmluZyBhbmltYXRpb25zIHRyaWdnZXJlZCB2aWEgYCRhbmltYXRlQ3NzYCAoYmFkIG5ld3MgZm9yIElFOSBhbmQgbG93ZXIpLlxuICpcbiAqICMjIFVzYWdlXG4gKiBPbmNlIGFnYWluLCBgJGFuaW1hdGVDc3NgIGlzIGRlc2lnbmVkIHRvIGJlIHVzZWQgaW5zaWRlIG9mIGEgcmVnaXN0ZXJlZCBKYXZhU2NyaXB0IGFuaW1hdGlvbiB0aGF0XG4gKiBpcyBwb3dlcmVkIGJ5IG5nQW5pbWF0ZS4gSXQgaXMgcG9zc2libGUgdG8gdXNlIGAkYW5pbWF0ZUNzc2AgZGlyZWN0bHkgaW5zaWRlIG9mIGEgZGlyZWN0aXZlLCBob3dldmVyLFxuICogYW55IGF1dG9tYXRpYyBjb250cm9sIG92ZXIgY2FuY2VsbGluZyBhbmltYXRpb25zIGFuZC9vciBwcmV2ZW50aW5nIGFuaW1hdGlvbnMgZnJvbSBiZWluZyBydW4gb25cbiAqIGNoaWxkIGVsZW1lbnRzIHdpbGwgbm90IGJlIGhhbmRsZWQgYnkgQW5ndWxhci4gRm9yIHRoaXMgdG8gd29yayBhcyBleHBlY3RlZCwgcGxlYXNlIHVzZSBgJGFuaW1hdGVgIHRvXG4gKiB0cmlnZ2VyIHRoZSBhbmltYXRpb24gYW5kIHRoZW4gc2V0dXAgYSBKYXZhU2NyaXB0IGFuaW1hdGlvbiB0aGF0IGluamVjdHMgYCRhbmltYXRlQ3NzYCB0byB0cmlnZ2VyXG4gKiB0aGUgQ1NTIGFuaW1hdGlvbi5cbiAqXG4gKiBUaGUgZXhhbXBsZSBiZWxvdyBzaG93cyBob3cgd2UgY2FuIGNyZWF0ZSBhIGZvbGRpbmcgYW5pbWF0aW9uIG9uIGFuIGVsZW1lbnQgdXNpbmcgYG5nLWlmYDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8IS0tIG5vdGljZSB0aGUgYGZvbGQtYW5pbWF0aW9uYCBDU1MgY2xhc3MgLS0+XG4gKiA8ZGl2IG5nLWlmPVwib25PZmZcIiBjbGFzcz1cImZvbGQtYW5pbWF0aW9uXCI+XG4gKiAgIFRoaXMgZWxlbWVudCB3aWxsIGdvIEJPT01cbiAqIDwvZGl2PlxuICogPGJ1dHRvbiBuZy1jbGljaz1cIm9uT2ZmPXRydWVcIj5Gb2xkIEluPC9idXR0b24+XG4gKiBgYGBcbiAqXG4gKiBOb3cgd2UgY3JlYXRlIHRoZSAqKkphdmFTY3JpcHQgYW5pbWF0aW9uKiogdGhhdCB3aWxsIHRyaWdnZXIgdGhlIENTUyB0cmFuc2l0aW9uOlxuICpcbiAqIGBgYGpzXG4gKiBuZ01vZHVsZS5hbmltYXRpb24oJy5mb2xkLWFuaW1hdGlvbicsIFsnJGFuaW1hdGVDc3MnLCBmdW5jdGlvbigkYW5pbWF0ZUNzcykge1xuICogICByZXR1cm4ge1xuICogICAgIGVudGVyOiBmdW5jdGlvbihlbGVtZW50LCBkb25lRm4pIHtcbiAqICAgICAgIHZhciBoZWlnaHQgPSBlbGVtZW50WzBdLm9mZnNldEhlaWdodDtcbiAqICAgICAgIHJldHVybiAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7XG4gKiAgICAgICAgIGZyb206IHsgaGVpZ2h0OicwcHgnIH0sXG4gKiAgICAgICAgIHRvOiB7IGhlaWdodDpoZWlnaHQgKyAncHgnIH0sXG4gKiAgICAgICAgIGR1cmF0aW9uOiAxIC8vIG9uZSBzZWNvbmRcbiAqICAgICAgIH0pO1xuICogICAgIH1cbiAqICAgfVxuICogfV0pO1xuICogYGBgXG4gKlxuICogIyMgTW9yZSBBZHZhbmNlZCBVc2VzXG4gKlxuICogYCRhbmltYXRlQ3NzYCBpcyB0aGUgdW5kZXJseWluZyBjb2RlIHRoYXQgbmdBbmltYXRlIHVzZXMgdG8gcG93ZXIgKipDU1MtYmFzZWQgYW5pbWF0aW9ucyoqIGJlaGluZCB0aGUgc2NlbmVzLiBUaGVyZWZvcmUgQ1NTIGhvb2tzXG4gKiBsaWtlIGAubmctRVZFTlRgLCBgLm5nLUVWRU5ULWFjdGl2ZWAsIGAubmctRVZFTlQtc3RhZ2dlcmAgYXJlIGFsbCBmZWF0dXJlcyB0aGF0IGNhbiBiZSB0cmlnZ2VyZWQgdXNpbmcgYCRhbmltYXRlQ3NzYCB2aWEgSmF2YVNjcmlwdCBjb2RlLlxuICpcbiAqIFRoaXMgYWxzbyBtZWFucyB0aGF0IGp1c3QgYWJvdXQgYW55IGNvbWJpbmF0aW9uIG9mIGFkZGluZyBjbGFzc2VzLCByZW1vdmluZyBjbGFzc2VzLCBzZXR0aW5nIHN0eWxlcywgZHluYW1pY2FsbHkgc2V0dGluZyBhIGtleWZyYW1lIGFuaW1hdGlvbixcbiAqIGFwcGx5aW5nIGEgaGFyZGNvZGVkIGR1cmF0aW9uIG9yIGRlbGF5IHZhbHVlLCBjaGFuZ2luZyB0aGUgYW5pbWF0aW9uIGVhc2luZyBvciBhcHBseWluZyBhIHN0YWdnZXIgYW5pbWF0aW9uIGFyZSBhbGwgb3B0aW9ucyB0aGF0IHdvcmsgd2l0aFxuICogYCRhbmltYXRlQ3NzYC4gVGhlIHNlcnZpY2UgaXRzZWxmIGlzIHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IHRoZSBjb21iaW5hdGlvbiBvZiBvcHRpb25zIGFuZCBleGFtaW5lIHRoZSBlbGVtZW50IHN0eWxpbmcgcHJvcGVydGllcyBpbiBvcmRlclxuICogdG8gcHJvdmlkZSBhIHdvcmtpbmcgYW5pbWF0aW9uIHRoYXQgd2lsbCBydW4gaW4gQ1NTLlxuICpcbiAqIFRoZSBleGFtcGxlIGJlbG93IHNob3djYXNlcyBhIG1vcmUgYWR2YW5jZWQgdmVyc2lvbiBvZiB0aGUgYC5mb2xkLWFuaW1hdGlvbmAgZnJvbSB0aGUgZXhhbXBsZSBhYm92ZTpcbiAqXG4gKiBgYGBqc1xuICogbmdNb2R1bGUuYW5pbWF0aW9uKCcuZm9sZC1hbmltYXRpb24nLCBbJyRhbmltYXRlQ3NzJywgZnVuY3Rpb24oJGFuaW1hdGVDc3MpIHtcbiAqICAgcmV0dXJuIHtcbiAqICAgICBlbnRlcjogZnVuY3Rpb24oZWxlbWVudCwgZG9uZUZuKSB7XG4gKiAgICAgICB2YXIgaGVpZ2h0ID0gZWxlbWVudFswXS5vZmZzZXRIZWlnaHQ7XG4gKiAgICAgICByZXR1cm4gJGFuaW1hdGVDc3MoZWxlbWVudCwge1xuICogICAgICAgICBhZGRDbGFzczogJ3JlZCBsYXJnZS10ZXh0IHB1bHNlLXR3aWNlJyxcbiAqICAgICAgICAgZWFzaW5nOiAnZWFzZS1vdXQnLFxuICogICAgICAgICBmcm9tOiB7IGhlaWdodDonMHB4JyB9LFxuICogICAgICAgICB0bzogeyBoZWlnaHQ6aGVpZ2h0ICsgJ3B4JyB9LFxuICogICAgICAgICBkdXJhdGlvbjogMSAvLyBvbmUgc2Vjb25kXG4gKiAgICAgICB9KTtcbiAqICAgICB9XG4gKiAgIH1cbiAqIH1dKTtcbiAqIGBgYFxuICpcbiAqIFNpbmNlIHdlJ3JlIGFkZGluZy9yZW1vdmluZyBDU1MgY2xhc3NlcyB0aGVuIHRoZSBDU1MgdHJhbnNpdGlvbiB3aWxsIGFsc28gcGljayB0aG9zZSB1cDpcbiAqXG4gKiBgYGBjc3NcbiAqIC8mIzQyOyBzaW5jZSBhIGhhcmRjb2RlZCBkdXJhdGlvbiB2YWx1ZSBvZiAxIHdhcyBwcm92aWRlZCBpbiB0aGUgSmF2YVNjcmlwdCBhbmltYXRpb24gY29kZSxcbiAqIHRoZSBDU1MgY2xhc3NlcyBiZWxvdyB3aWxsIGJlIHRyYW5zaXRpb25lZCBkZXNwaXRlIHRoZW0gYmVpbmcgZGVmaW5lZCBhcyByZWd1bGFyIENTUyBjbGFzc2VzICYjNDI7L1xuICogLnJlZCB7IGJhY2tncm91bmQ6cmVkOyB9XG4gKiAubGFyZ2UtdGV4dCB7IGZvbnQtc2l6ZToyMHB4OyB9XG4gKlxuICogLyYjNDI7IHdlIGNhbiBhbHNvIHVzZSBhIGtleWZyYW1lIGFuaW1hdGlvbiBhbmQgJGFuaW1hdGVDc3Mgd2lsbCBtYWtlIGl0IHdvcmsgYWxvbmdzaWRlIHRoZSB0cmFuc2l0aW9uICYjNDI7L1xuICogLnB1bHNlLXR3aWNlIHtcbiAqICAgYW5pbWF0aW9uOiAwLjVzIHB1bHNlIGxpbmVhciAyO1xuICogICAtd2Via2l0LWFuaW1hdGlvbjogMC41cyBwdWxzZSBsaW5lYXIgMjtcbiAqIH1cbiAqXG4gKiBAa2V5ZnJhbWVzIHB1bHNlIHtcbiAqICAgZnJvbSB7IHRyYW5zZm9ybTogc2NhbGUoMC41KTsgfVxuICogICB0byB7IHRyYW5zZm9ybTogc2NhbGUoMS41KTsgfVxuICogfVxuICpcbiAqIEAtd2Via2l0LWtleWZyYW1lcyBwdWxzZSB7XG4gKiAgIGZyb20geyAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMC41KTsgfVxuICogICB0byB7IC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLjUpOyB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBHaXZlbiB0aGlzIGNvbXBsZXggY29tYmluYXRpb24gb2YgQ1NTIGNsYXNzZXMsIHN0eWxlcyBhbmQgb3B0aW9ucywgYCRhbmltYXRlQ3NzYCB3aWxsIGZpZ3VyZSBldmVyeXRoaW5nIG91dCBhbmQgbWFrZSB0aGUgYW5pbWF0aW9uIGhhcHBlbi5cbiAqXG4gKiAjIyBIb3cgdGhlIE9wdGlvbnMgYXJlIGhhbmRsZWRcbiAqXG4gKiBgJGFuaW1hdGVDc3NgIGlzIHZlcnkgdmVyc2F0aWxlIGFuZCBpbnRlbGxpZ2VudCB3aGVuIGl0IGNvbWVzIHRvIGZpZ3VyaW5nIG91dCB3aGF0IGNvbmZpZ3VyYXRpb25zIHRvIGFwcGx5IHRvIHRoZSBlbGVtZW50IHRvIGVuc3VyZSB0aGUgYW5pbWF0aW9uXG4gKiB3b3JrcyB3aXRoIHRoZSBvcHRpb25zIHByb3ZpZGVkLiBTYXkgZm9yIGV4YW1wbGUgd2Ugd2VyZSBhZGRpbmcgYSBjbGFzcyB0aGF0IGNvbnRhaW5lZCBhIGtleWZyYW1lIHZhbHVlIGFuZCB3ZSB3YW50ZWQgdG8gYWxzbyBhbmltYXRlIHNvbWUgaW5saW5lXG4gKiBzdHlsZXMgdXNpbmcgdGhlIGBmcm9tYCBhbmQgYHRvYCBwcm9wZXJ0aWVzLlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgYW5pbWF0b3IgPSAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7XG4gKiAgIGZyb206IHsgYmFja2dyb3VuZDoncmVkJyB9LFxuICogICB0bzogeyBiYWNrZ3JvdW5kOidibHVlJyB9XG4gKiB9KTtcbiAqIGFuaW1hdG9yLnN0YXJ0KCk7XG4gKiBgYGBcbiAqXG4gKiBgYGBjc3NcbiAqIC5yb3RhdGluZy1hbmltYXRpb24ge1xuICogICBhbmltYXRpb246MC41cyByb3RhdGUgbGluZWFyO1xuICogICAtd2Via2l0LWFuaW1hdGlvbjowLjVzIHJvdGF0ZSBsaW5lYXI7XG4gKiB9XG4gKlxuICogQGtleWZyYW1lcyByb3RhdGUge1xuICogICBmcm9tIHsgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH1cbiAqICAgdG8geyB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9XG4gKiB9XG4gKlxuICogQC13ZWJraXQta2V5ZnJhbWVzIHJvdGF0ZSB7XG4gKiAgIGZyb20geyAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpOyB9XG4gKiAgIHRvIHsgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBUaGUgbWlzc2luZyBwaWVjZXMgaGVyZSBhcmUgdGhhdCB3ZSBkbyBub3QgaGF2ZSBhIHRyYW5zaXRpb24gc2V0ICh3aXRoaW4gdGhlIENTUyBjb2RlIG5vciB3aXRoaW4gdGhlIGAkYW5pbWF0ZUNzc2Agb3B0aW9ucykgYW5kIHRoZSBkdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uIGlzXG4gKiBnb2luZyB0byBiZSBkZXRlY3RlZCBmcm9tIHdoYXQgdGhlIGtleWZyYW1lIHN0eWxlcyBvbiB0aGUgQ1NTIGNsYXNzIGFyZS4gSW4gdGhpcyBldmVudCwgYCRhbmltYXRlQ3NzYCB3aWxsIGF1dG9tYXRpY2FsbHkgY3JlYXRlIGFuIGlubGluZSB0cmFuc2l0aW9uXG4gKiBzdHlsZSBtYXRjaGluZyB0aGUgZHVyYXRpb24gZGV0ZWN0ZWQgZnJvbSB0aGUga2V5ZnJhbWUgc3R5bGUgKHdoaWNoIGlzIHByZXNlbnQgaW4gdGhlIENTUyBjbGFzcyB0aGF0IGlzIGJlaW5nIGFkZGVkKSBhbmQgdGhlbiBwcmVwYXJlIGJvdGggdGhlIHRyYW5zaXRpb25cbiAqIGFuZCBrZXlmcmFtZSBhbmltYXRpb25zIHRvIHJ1biBpbiBwYXJhbGxlbCBvbiB0aGUgZWxlbWVudC4gVGhlbiB3aGVuIHRoZSBhbmltYXRpb24gaXMgdW5kZXJ3YXkgdGhlIHByb3ZpZGVkIGBmcm9tYCBhbmQgYHRvYCBDU1Mgc3R5bGVzIHdpbGwgYmUgYXBwbGllZFxuICogYW5kIHNwcmVhZCBhY3Jvc3MgdGhlIHRyYW5zaXRpb24gYW5kIGtleWZyYW1lIGFuaW1hdGlvbi5cbiAqXG4gKiAjIyBXaGF0IGlzIHJldHVybmVkXG4gKlxuICogYCRhbmltYXRlQ3NzYCB3b3JrcyBpbiB0d28gc3RhZ2VzOiBhIHByZXBhcmF0aW9uIHBoYXNlIGFuZCBhbiBhbmltYXRpb24gcGhhc2UuIFRoZXJlZm9yZSB3aGVuIGAkYW5pbWF0ZUNzc2AgaXMgZmlyc3QgY2FsbGVkIGl0IHdpbGwgTk9UIGFjdHVhbGx5XG4gKiBzdGFydCB0aGUgYW5pbWF0aW9uLiBBbGwgdGhhdCBpcyBnb2luZyBvbiBoZXJlIGlzIHRoYXQgdGhlIGVsZW1lbnQgaXMgYmVpbmcgcHJlcGFyZWQgZm9yIHRoZSBhbmltYXRpb24gKHdoaWNoIG1lYW5zIHRoYXQgdGhlIGdlbmVyYXRlZCBDU1MgY2xhc3NlcyBhcmVcbiAqIGFkZGVkIGFuZCByZW1vdmVkIG9uIHRoZSBlbGVtZW50KS4gT25jZSBgJGFuaW1hdGVDc3NgIGlzIGNhbGxlZCBpdCB3aWxsIHJldHVybiBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogYGBganNcbiAqIHZhciBhbmltYXRvciA9ICRhbmltYXRlQ3NzKGVsZW1lbnQsIHsgLi4uIH0pO1xuICogYGBgXG4gKlxuICogTm93IHdoYXQgZG8gdGhlIGNvbnRlbnRzIG9mIG91ciBgYW5pbWF0b3JgIHZhcmlhYmxlIGxvb2sgbGlrZTpcbiAqXG4gKiBgYGBqc1xuICoge1xuICogICAvLyBzdGFydHMgdGhlIGFuaW1hdGlvblxuICogICBzdGFydDogRnVuY3Rpb24sXG4gKlxuICogICAvLyBlbmRzIChhYm9ydHMpIHRoZSBhbmltYXRpb25cbiAqICAgZW5kOiBGdW5jdGlvblxuICogfVxuICogYGBgXG4gKlxuICogVG8gYWN0dWFsbHkgc3RhcnQgdGhlIGFuaW1hdGlvbiB3ZSBuZWVkIHRvIHJ1biBgYW5pbWF0aW9uLnN0YXJ0KClgIHdoaWNoIHdpbGwgdGhlbiByZXR1cm4gYSBwcm9taXNlIHRoYXQgd2UgY2FuIGhvb2sgaW50byB0byBkZXRlY3Qgd2hlbiB0aGUgYW5pbWF0aW9uIGVuZHMuXG4gKiBJZiB3ZSBjaG9vc2Ugbm90IHRvIHJ1biB0aGUgYW5pbWF0aW9uIHRoZW4gd2UgTVVTVCBydW4gYGFuaW1hdGlvbi5lbmQoKWAgdG8gcGVyZm9ybSBhIGNsZWFudXAgb24gdGhlIGVsZW1lbnQgKHNpbmNlIHNvbWUgQ1NTIGNsYXNzZXMgYW5kIHN0bHllcyBtYXkgaGF2ZSBiZWVuXG4gKiBhcHBsaWVkIHRvIHRoZSBlbGVtZW50IGR1cmluZyB0aGUgcHJlcGFyYXRpb24gcGhhc2UpLiBOb3RlIHRoYXQgYWxsIG90aGVyIHByb3BlcnRpZXMgc3VjaCBhcyBkdXJhdGlvbiwgZGVsYXksIHRyYW5zaXRpb25zIGFuZCBrZXlmcmFtZXMgYXJlIGp1c3QgcHJvcGVydGllc1xuICogYW5kIHRoYXQgY2hhbmdpbmcgdGhlbSB3aWxsIG5vdCByZWNvbmZpZ3VyZSB0aGUgcGFyYW1ldGVycyBvZiB0aGUgYW5pbWF0aW9uLlxuICpcbiAqICMjIyBydW5uZXIuZG9uZSgpIHZzIHJ1bm5lci50aGVuKClcbiAqIEl0IGlzIGRvY3VtZW50ZWQgdGhhdCBgYW5pbWF0aW9uLnN0YXJ0KClgIHdpbGwgcmV0dXJuIGEgcHJvbWlzZSBvYmplY3QgYW5kIHRoaXMgaXMgdHJ1ZSwgaG93ZXZlciwgdGhlcmUgaXMgYWxzbyBhbiBhZGRpdGlvbmFsIG1ldGhvZCBhdmFpbGFibGUgb24gdGhlXG4gKiBydW5uZXIgY2FsbGVkIGAuZG9uZShjYWxsYmFja0ZuKWAuIFRoZSBkb25lIG1ldGhvZCB3b3JrcyB0aGUgc2FtZSBhcyBgLmZpbmFsbHkoY2FsbGJhY2tGbilgLCBob3dldmVyLCBpdCBkb2VzICoqbm90IHRyaWdnZXIgYSBkaWdlc3QgdG8gb2NjdXIqKi5cbiAqIFRoZXJlZm9yZSwgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIGl0J3MgYWx3YXlzIGJlc3QgdG8gdXNlIGBydW5uZXIuZG9uZShjYWxsYmFjaylgIGluc3RlYWQgb2YgYHJ1bm5lci50aGVuKClgLCBgcnVubmVyLmNhdGNoKClgIG9yIGBydW5uZXIuZmluYWxseSgpYFxuICogdW5sZXNzIHlvdSByZWFsbHkgbmVlZCBhIGRpZ2VzdCB0byBraWNrIG9mZiBhZnRlcndhcmRzLlxuICpcbiAqIEtlZXAgaW4gbWluZCB0aGF0LCB0byBtYWtlIHRoaXMgZWFzaWVyLCBuZ0FuaW1hdGUgaGFzIHR3ZWFrZWQgdGhlIEpTIGFuaW1hdGlvbnMgQVBJIHRvIHJlY29nbml6ZSB3aGVuIGEgcnVubmVyIGluc3RhbmNlIGlzIHJldHVybmVkIGZyb20gJGFuaW1hdGVDc3NcbiAqIChzbyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgYHJ1bm5lci5kb25lKGRvbmVGbilgIGluc2lkZSBvZiB5b3VyIEphdmFTY3JpcHQgYW5pbWF0aW9uIGNvZGUpLlxuICogQ2hlY2sgdGhlIHtAbGluayBuZ0FuaW1hdGUuJGFuaW1hdGVDc3MjdXNhZ2UgYW5pbWF0aW9uIGNvZGUgYWJvdmV9IHRvIHNlZSBob3cgdGhpcyB3b3Jrcy5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIGFuaW1hdGVkXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyB0aGUgYW5pbWF0aW9uLXJlbGF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgYmUgYXBwbGllZCBkdXJpbmcgdGhlIGFuaW1hdGlvblxuICpcbiAqICogYGV2ZW50YCAtIFRoZSBET00gZXZlbnQgKGUuZy4gZW50ZXIsIGxlYXZlLCBtb3ZlKS4gV2hlbiB1c2VkLCBhIGdlbmVyYXRlZCBDU1MgY2xhc3Mgb2YgYG5nLUVWRU5UYCBhbmQgYG5nLUVWRU5ULWFjdGl2ZWAgd2lsbCBiZSBhcHBsaWVkXG4gKiB0byB0aGUgZWxlbWVudCBkdXJpbmcgdGhlIGFuaW1hdGlvbi4gTXVsdGlwbGUgZXZlbnRzIGNhbiBiZSBwcm92aWRlZCB3aGVuIHNwYWNlcyBhcmUgdXNlZCBhcyBhIHNlcGFyYXRvci4gKE5vdGUgdGhhdCB0aGlzIHdpbGwgbm90IHBlcmZvcm0gYW55IERPTSBvcGVyYXRpb24uKVxuICogKiBgZWFzaW5nYCAtIFRoZSBDU1MgZWFzaW5nIHZhbHVlIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSB0cmFuc2l0aW9uIG9yIGtleWZyYW1lIGFuaW1hdGlvbiAob3IgYm90aCkuXG4gKiAqIGB0cmFuc2l0aW9uYCAtIFRoZSByYXcgQ1NTIHRyYW5zaXRpb24gc3R5bGUgdGhhdCB3aWxsIGJlIHVzZWQgKGUuZy4gYDFzIGxpbmVhciBhbGxgKS5cbiAqICogYGtleWZyYW1lU3R5bGVgIC0gVGhlIHJhdyBDU1Mga2V5ZnJhbWUgYW5pbWF0aW9uIHN0eWxlIHRoYXQgd2lsbCBiZSB1c2VkIChlLmcuIGAxcyBteV9hbmltYXRpb24gbGluZWFyYCkuXG4gKiAqIGBmcm9tYCAtIFRoZSBzdGFydGluZyBDU1Mgc3R5bGVzIChhIGtleS92YWx1ZSBvYmplY3QpIHRoYXQgd2lsbCBiZSBhcHBsaWVkIGF0IHRoZSBzdGFydCBvZiB0aGUgYW5pbWF0aW9uLlxuICogKiBgdG9gIC0gVGhlIGVuZGluZyBDU1Mgc3R5bGVzIChhIGtleS92YWx1ZSBvYmplY3QpIHRoYXQgd2lsbCBiZSBhcHBsaWVkIGFjcm9zcyB0aGUgYW5pbWF0aW9uIHZpYSBhIENTUyB0cmFuc2l0aW9uLlxuICogKiBgYWRkQ2xhc3NgIC0gQSBzcGFjZSBzZXBhcmF0ZWQgbGlzdCBvZiBDU1MgY2xhc3NlcyB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVsZW1lbnQgYW5kIHNwcmVhZCBhY3Jvc3MgdGhlIGFuaW1hdGlvbi5cbiAqICogYHJlbW92ZUNsYXNzYCAtIEEgc3BhY2Ugc2VwYXJhdGVkIGxpc3Qgb2YgQ1NTIGNsYXNzZXMgdGhhdCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCBhbmQgc3ByZWFkIGFjcm9zcyB0aGUgYW5pbWF0aW9uLlxuICogKiBgZHVyYXRpb25gIC0gQSBudW1iZXIgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSB0b3RhbCBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbiBhbmQvb3Iga2V5ZnJhbWUgKG5vdGUgdGhhdCBhIHZhbHVlIG9mIDEgaXMgMTAwMG1zKS4gSWYgYSB2YWx1ZSBvZiBgMGBcbiAqIGlzIHByb3ZpZGVkIHRoZW4gdGhlIGFuaW1hdGlvbiB3aWxsIGJlIHNraXBwZWQgZW50aXJlbHkuXG4gKiAqIGBkZWxheWAgLSBBIG51bWJlciB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIHRvdGFsIGRlbGF5IG9mIHRoZSB0cmFuc2l0aW9uIGFuZC9vciBrZXlmcmFtZSAobm90ZSB0aGF0IGEgdmFsdWUgb2YgMSBpcyAxMDAwbXMpLiBJZiBhIHZhbHVlIG9mIGB0cnVlYCBpc1xuICogdXNlZCB0aGVuIHdoYXRldmVyIGRlbGF5IHZhbHVlIGlzIGRldGVjdGVkIGZyb20gdGhlIENTUyBjbGFzc2VzIHdpbGwgYmUgbWlycm9yZWQgb24gdGhlIGVsZW1lbnRzIHN0eWxlcyAoZS5nLiBieSBzZXR0aW5nIGRlbGF5IHRydWUgdGhlbiB0aGUgc3R5bGUgdmFsdWVcbiAqIG9mIHRoZSBlbGVtZW50IHdpbGwgYmUgYHRyYW5zaXRpb24tZGVsYXk6IERFVEVDVEVEX1ZBTFVFYCkuIFVzaW5nIGB0cnVlYCBpcyB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0aGUgQ1NTIGNsYXNzZXMgYW5kIGlubGluZSBzdHlsZXMgdG8gYWxsIHNoYXJlIHRoZSBzYW1lXG4gKiBDU1MgZGVsYXkgdmFsdWUuXG4gKiAqIGBzdGFnZ2VyYCAtIEEgbnVtZXJpYyB0aW1lIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgZGVsYXkgYmV0d2VlbiBzdWNjZXNzaXZlbHkgYW5pbWF0ZWQgZWxlbWVudHNcbiAqICh7QGxpbmsgbmdBbmltYXRlI2Nzcy1zdGFnZ2VyaW5nLWFuaW1hdGlvbnMgQ2xpY2sgaGVyZSB0byBsZWFybiBob3cgQ1NTLWJhc2VkIHN0YWdnZXJpbmcgd29ya3MgaW4gbmdBbmltYXRlLn0pXG4gKiAqIGBzdGFnZ2VySW5kZXhgIC0gVGhlIG51bWVyaWMgaW5kZXggcmVwcmVzZW50aW5nIHRoZSBzdGFnZ2VyIGl0ZW0gKGUuZy4gYSB2YWx1ZSBvZiA1IGlzIGVxdWFsIHRvIHRoZSBzaXh0aCBpdGVtIGluIHRoZSBzdGFnZ2VyOyB0aGVyZWZvcmUgd2hlbiBhXG4gKiBgc3RhZ2dlcmAgb3B0aW9uIHZhbHVlIG9mIGAwLjFgIGlzIHVzZWQgdGhlbiB0aGVyZSB3aWxsIGJlIGEgc3RhZ2dlciBkZWxheSBvZiBgNjAwbXNgKVxuICogYGFwcGx5Q2xhc3Nlc0Vhcmx5YCAtIFdoZXRoZXIgb3Igbm90IHRoZSBjbGFzc2VzIGJlaW5nIGFkZGVkIG9yIHJlbW92ZWQgd2lsbCBiZSB1c2VkIHdoZW4gZGV0ZWN0aW5nIHRoZSBhbmltYXRpb24uIFRoaXMgaXMgc2V0IGJ5IGAkYW5pbWF0ZWAgd2hlbiBlbnRlci9sZWF2ZS9tb3ZlIGFuaW1hdGlvbnMgYXJlIGZpcmVkIHRvIGVuc3VyZSB0aGF0IHRoZSBDU1MgY2xhc3NlcyBhcmUgcmVzb2x2ZWQgaW4gdGltZS4gKE5vdGUgdGhhdCB0aGlzIHdpbGwgcHJldmVudCBhbnkgdHJhbnNpdGlvbnMgZnJvbSBvY2N1cmluZyBvbiB0aGUgY2xhc3NlcyBiZWluZyBhZGRlZCBhbmQgcmVtb3ZlZC4pXG4gKlxuICogQHJldHVybiB7b2JqZWN0fSBhbiBvYmplY3Qgd2l0aCBzdGFydCBhbmQgZW5kIG1ldGhvZHMgYW5kIGRldGFpbHMgYWJvdXQgdGhlIGFuaW1hdGlvbi5cbiAqXG4gKiAqIGBzdGFydGAgLSBUaGUgbWV0aG9kIHRvIHN0YXJ0IHRoZSBhbmltYXRpb24uIFRoaXMgd2lsbCByZXR1cm4gYSBgUHJvbWlzZWAgd2hlbiBjYWxsZWQuXG4gKiAqIGBlbmRgIC0gVGhpcyBtZXRob2Qgd2lsbCBjYW5jZWwgdGhlIGFuaW1hdGlvbiBhbmQgcmVtb3ZlIGFsbCBhcHBsaWVkIENTUyBjbGFzc2VzIGFuZCBzdHlsZXMuXG4gKi9cblxuLy8gRGV0ZWN0IHByb3BlciB0cmFuc2l0aW9uZW5kL2FuaW1hdGlvbmVuZCBldmVudCBuYW1lcy5cbnZhciBDU1NfUFJFRklYID0gJycsIFRSQU5TSVRJT05fUFJPUCwgVFJBTlNJVElPTkVORF9FVkVOVCwgQU5JTUFUSU9OX1BST1AsIEFOSU1BVElPTkVORF9FVkVOVDtcblxuLy8gSWYgdW5wcmVmaXhlZCBldmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgYnV0IHdlYmtpdC1wcmVmaXhlZCBhcmUsIHVzZSB0aGUgbGF0dGVyLlxuLy8gT3RoZXJ3aXNlLCBqdXN0IHVzZSBXM0MgbmFtZXMsIGJyb3dzZXJzIG5vdCBzdXBwb3J0aW5nIHRoZW0gYXQgYWxsIHdpbGwganVzdCBpZ25vcmUgdGhlbS5cbi8vIE5vdGU6IENocm9tZSBpbXBsZW1lbnRzIGB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmRgIGFuZCBkb2Vzbid0IGltcGxlbWVudCBgd2luZG93Lm9uYW5pbWF0aW9uZW5kYFxuLy8gYnV0IGF0IHRoZSBzYW1lIHRpbWUgZGlzcGF0Y2hlcyB0aGUgYGFuaW1hdGlvbmVuZGAgZXZlbnQgYW5kIG5vdCBgd2Via2l0QW5pbWF0aW9uRW5kYC5cbi8vIFJlZ2lzdGVyIGJvdGggZXZlbnRzIGluIGNhc2UgYHdpbmRvdy5vbmFuaW1hdGlvbmVuZGAgaXMgbm90IHN1cHBvcnRlZCBiZWNhdXNlIG9mIHRoYXQsXG4vLyBkbyB0aGUgc2FtZSBmb3IgYHRyYW5zaXRpb25lbmRgIGFzIFNhZmFyaSBpcyBsaWtlbHkgdG8gZXhoaWJpdCBzaW1pbGFyIGJlaGF2aW9yLlxuLy8gQWxzbywgdGhlIG9ubHkgbW9kZXJuIGJyb3dzZXIgdGhhdCB1c2VzIHZlbmRvciBwcmVmaXhlcyBmb3IgdHJhbnNpdGlvbnMva2V5ZnJhbWVzIGlzIHdlYmtpdFxuLy8gdGhlcmVmb3JlIHRoZXJlIGlzIG5vIHJlYXNvbiB0byB0ZXN0IGFueW1vcmUgZm9yIG90aGVyIHZlbmRvciBwcmVmaXhlczpcbi8vIGh0dHA6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRyYW5zaXRpb25cbmlmICh3aW5kb3cub250cmFuc2l0aW9uZW5kID09PSB1bmRlZmluZWQgJiYgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gIENTU19QUkVGSVggPSAnLXdlYmtpdC0nO1xuICBUUkFOU0lUSU9OX1BST1AgPSAnV2Via2l0VHJhbnNpdGlvbic7XG4gIFRSQU5TSVRJT05FTkRfRVZFTlQgPSAnd2Via2l0VHJhbnNpdGlvbkVuZCB0cmFuc2l0aW9uZW5kJztcbn0gZWxzZSB7XG4gIFRSQU5TSVRJT05fUFJPUCA9ICd0cmFuc2l0aW9uJztcbiAgVFJBTlNJVElPTkVORF9FVkVOVCA9ICd0cmFuc2l0aW9uZW5kJztcbn1cblxuaWYgKHdpbmRvdy5vbmFuaW1hdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmIHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gIENTU19QUkVGSVggPSAnLXdlYmtpdC0nO1xuICBBTklNQVRJT05fUFJPUCA9ICdXZWJraXRBbmltYXRpb24nO1xuICBBTklNQVRJT05FTkRfRVZFTlQgPSAnd2Via2l0QW5pbWF0aW9uRW5kIGFuaW1hdGlvbmVuZCc7XG59IGVsc2Uge1xuICBBTklNQVRJT05fUFJPUCA9ICdhbmltYXRpb24nO1xuICBBTklNQVRJT05FTkRfRVZFTlQgPSAnYW5pbWF0aW9uZW5kJztcbn1cblxudmFyIERVUkFUSU9OX0tFWSA9ICdEdXJhdGlvbic7XG52YXIgUFJPUEVSVFlfS0VZID0gJ1Byb3BlcnR5JztcbnZhciBERUxBWV9LRVkgPSAnRGVsYXknO1xudmFyIFRJTUlOR19LRVkgPSAnVGltaW5nRnVuY3Rpb24nO1xudmFyIEFOSU1BVElPTl9JVEVSQVRJT05fQ09VTlRfS0VZID0gJ0l0ZXJhdGlvbkNvdW50JztcbnZhciBBTklNQVRJT05fUExBWVNUQVRFX0tFWSA9ICdQbGF5U3RhdGUnO1xudmFyIEVMQVBTRURfVElNRV9NQVhfREVDSU1BTF9QTEFDRVMgPSAzO1xudmFyIENMT1NJTkdfVElNRV9CVUZGRVIgPSAxLjU7XG52YXIgT05FX1NFQ09ORCA9IDEwMDA7XG52YXIgQkFTRV9URU4gPSAxMDtcblxudmFyIFNBRkVfRkFTVF9GT1JXQVJEX0RVUkFUSU9OX1ZBTFVFID0gOTk5OTtcblxudmFyIEFOSU1BVElPTl9ERUxBWV9QUk9QID0gQU5JTUFUSU9OX1BST1AgKyBERUxBWV9LRVk7XG52YXIgQU5JTUFUSU9OX0RVUkFUSU9OX1BST1AgPSBBTklNQVRJT05fUFJPUCArIERVUkFUSU9OX0tFWTtcblxudmFyIFRSQU5TSVRJT05fREVMQVlfUFJPUCA9IFRSQU5TSVRJT05fUFJPUCArIERFTEFZX0tFWTtcbnZhciBUUkFOU0lUSU9OX0RVUkFUSU9OX1BST1AgPSBUUkFOU0lUSU9OX1BST1AgKyBEVVJBVElPTl9LRVk7XG5cbnZhciBERVRFQ1RfQ1NTX1BST1BFUlRJRVMgPSB7XG4gIHRyYW5zaXRpb25EdXJhdGlvbjogICAgICBUUkFOU0lUSU9OX0RVUkFUSU9OX1BST1AsXG4gIHRyYW5zaXRpb25EZWxheTogICAgICAgICBUUkFOU0lUSU9OX0RFTEFZX1BST1AsXG4gIHRyYW5zaXRpb25Qcm9wZXJ0eTogICAgICBUUkFOU0lUSU9OX1BST1AgKyBQUk9QRVJUWV9LRVksXG4gIGFuaW1hdGlvbkR1cmF0aW9uOiAgICAgICBBTklNQVRJT05fRFVSQVRJT05fUFJPUCxcbiAgYW5pbWF0aW9uRGVsYXk6ICAgICAgICAgIEFOSU1BVElPTl9ERUxBWV9QUk9QLFxuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogQU5JTUFUSU9OX1BST1AgKyBBTklNQVRJT05fSVRFUkFUSU9OX0NPVU5UX0tFWVxufTtcblxudmFyIERFVEVDVF9TVEFHR0VSX0NTU19QUk9QRVJUSUVTID0ge1xuICB0cmFuc2l0aW9uRHVyYXRpb246ICAgICAgVFJBTlNJVElPTl9EVVJBVElPTl9QUk9QLFxuICB0cmFuc2l0aW9uRGVsYXk6ICAgICAgICAgVFJBTlNJVElPTl9ERUxBWV9QUk9QLFxuICBhbmltYXRpb25EdXJhdGlvbjogICAgICAgQU5JTUFUSU9OX0RVUkFUSU9OX1BST1AsXG4gIGFuaW1hdGlvbkRlbGF5OiAgICAgICAgICBBTklNQVRJT05fREVMQVlfUFJPUFxufTtcblxuZnVuY3Rpb24gY29tcHV0ZUNzc1N0eWxlcygkd2luZG93LCBlbGVtZW50LCBwcm9wZXJ0aWVzKSB7XG4gIHZhciBzdHlsZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgZGV0ZWN0ZWRTdHlsZXMgPSAkd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkgfHwge307XG4gIGZvckVhY2gocHJvcGVydGllcywgZnVuY3Rpb24oZm9ybWFsU3R5bGVOYW1lLCBhY3R1YWxTdHlsZU5hbWUpIHtcbiAgICB2YXIgdmFsID0gZGV0ZWN0ZWRTdHlsZXNbZm9ybWFsU3R5bGVOYW1lXTtcbiAgICBpZiAodmFsKSB7XG4gICAgICB2YXIgYyA9IHZhbC5jaGFyQXQoMCk7XG5cbiAgICAgIC8vIG9ubHkgbnVtZXJpY2FsLWJhc2VkIHZhbHVlcyBoYXZlIGEgbmVnYXRpdmUgc2lnbiBvciBkaWdpdCBhcyB0aGUgZmlyc3QgdmFsdWVcbiAgICAgIGlmIChjID09PSAnLScgfHwgYyA9PT0gJysnIHx8IGMgPj0gMCkge1xuICAgICAgICB2YWwgPSBwYXJzZU1heFRpbWUodmFsKTtcbiAgICAgIH1cblxuICAgICAgLy8gYnkgc2V0dGluZyB0aGlzIHRvIG51bGwgaW4gdGhlIGV2ZW50IHRoYXQgdGhlIGRlbGF5IGlzIG5vdCBzZXQgb3IgaXMgc2V0IGRpcmVjdGx5IGFzIDBcbiAgICAgIC8vIHRoZW4gd2UgY2FuIHN0aWxsIGFsbG93IGZvciB6ZWdhdGl2ZSB2YWx1ZXMgdG8gYmUgdXNlZCBsYXRlciBvbiBhbmQgbm90IG1pc3Rha2UgdGhpc1xuICAgICAgLy8gdmFsdWUgZm9yIGJlaW5nIGdyZWF0ZXIgdGhhbiBhbnkgb3RoZXIgbmVnYXRpdmUgdmFsdWUuXG4gICAgICBpZiAodmFsID09PSAwKSB7XG4gICAgICAgIHZhbCA9IG51bGw7XG4gICAgICB9XG4gICAgICBzdHlsZXNbYWN0dWFsU3R5bGVOYW1lXSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWF4VGltZShzdHIpIHtcbiAgdmFyIG1heFZhbHVlID0gMDtcbiAgdmFyIHZhbHVlcyA9IHN0ci5zcGxpdCgvXFxzKixcXHMqLyk7XG4gIGZvckVhY2godmFsdWVzLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgIC8vIGl0J3MgYWx3YXlzIHNhZmUgdG8gY29uc2lkZXIgb25seSBzZWNvbmQgdmFsdWVzIGFuZCBvbWl0IGBtc2AgdmFsdWVzIHNpbmNlXG4gICAgLy8gZ2V0Q29tcHV0ZWRTdHlsZSB3aWxsIGFsd2F5cyBoYW5kbGUgdGhlIGNvbnZlcnNpb24gZm9yIHVzXG4gICAgaWYgKHZhbHVlLmNoYXJBdCh2YWx1ZS5sZW5ndGggLSAxKSA9PSAncycpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDAsIHZhbHVlLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICB2YWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpIHx8IDA7XG4gICAgbWF4VmFsdWUgPSBtYXhWYWx1ZSA/IE1hdGgubWF4KHZhbHVlLCBtYXhWYWx1ZSkgOiB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiBtYXhWYWx1ZTtcbn1cblxuZnVuY3Rpb24gdHJ1dGh5VGltaW5nVmFsdWUodmFsKSB7XG4gIHJldHVybiB2YWwgPT09IDAgfHwgdmFsICE9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldENzc1RyYW5zaXRpb25EdXJhdGlvblN0eWxlKGR1cmF0aW9uLCBhcHBseU9ubHlEdXJhdGlvbikge1xuICB2YXIgc3R5bGUgPSBUUkFOU0lUSU9OX1BST1A7XG4gIHZhciB2YWx1ZSA9IGR1cmF0aW9uICsgJ3MnO1xuICBpZiAoYXBwbHlPbmx5RHVyYXRpb24pIHtcbiAgICBzdHlsZSArPSBEVVJBVElPTl9LRVk7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgKz0gJyBsaW5lYXIgYWxsJztcbiAgfVxuICByZXR1cm4gW3N0eWxlLCB2YWx1ZV07XG59XG5cbmZ1bmN0aW9uIGdldENzc0tleWZyYW1lRHVyYXRpb25TdHlsZShkdXJhdGlvbikge1xuICByZXR1cm4gW0FOSU1BVElPTl9EVVJBVElPTl9QUk9QLCBkdXJhdGlvbiArICdzJ107XG59XG5cbmZ1bmN0aW9uIGdldENzc0RlbGF5U3R5bGUoZGVsYXksIGlzS2V5ZnJhbWVBbmltYXRpb24pIHtcbiAgdmFyIHByb3AgPSBpc0tleWZyYW1lQW5pbWF0aW9uID8gQU5JTUFUSU9OX0RFTEFZX1BST1AgOiBUUkFOU0lUSU9OX0RFTEFZX1BST1A7XG4gIHJldHVybiBbcHJvcCwgZGVsYXkgKyAncyddO1xufVxuXG5mdW5jdGlvbiBibG9ja1RyYW5zaXRpb25zKG5vZGUsIGR1cmF0aW9uKSB7XG4gIC8vIHdlIHVzZSBhIG5lZ2F0aXZlIGRlbGF5IHZhbHVlIHNpbmNlIGl0IHBlcmZvcm1zIGJsb2NraW5nXG4gIC8vIHlldCBpdCBkb2Vzbid0IGtpbGwgYW55IGV4aXN0aW5nIHRyYW5zaXRpb25zIHJ1bm5pbmcgb24gdGhlXG4gIC8vIHNhbWUgZWxlbWVudCB3aGljaCBtYWtlcyB0aGlzIHNhZmUgZm9yIGNsYXNzLWJhc2VkIGFuaW1hdGlvbnNcbiAgdmFyIHZhbHVlID0gZHVyYXRpb24gPyAnLScgKyBkdXJhdGlvbiArICdzJyA6ICcnO1xuICBhcHBseUlubGluZVN0eWxlKG5vZGUsIFtUUkFOU0lUSU9OX0RFTEFZX1BST1AsIHZhbHVlXSk7XG4gIHJldHVybiBbVFJBTlNJVElPTl9ERUxBWV9QUk9QLCB2YWx1ZV07XG59XG5cbmZ1bmN0aW9uIGJsb2NrS2V5ZnJhbWVBbmltYXRpb25zKG5vZGUsIGFwcGx5QmxvY2spIHtcbiAgdmFyIHZhbHVlID0gYXBwbHlCbG9jayA/ICdwYXVzZWQnIDogJyc7XG4gIHZhciBrZXkgPSBBTklNQVRJT05fUFJPUCArIEFOSU1BVElPTl9QTEFZU1RBVEVfS0VZO1xuICBhcHBseUlubGluZVN0eWxlKG5vZGUsIFtrZXksIHZhbHVlXSk7XG4gIHJldHVybiBba2V5LCB2YWx1ZV07XG59XG5cbmZ1bmN0aW9uIGFwcGx5SW5saW5lU3R5bGUobm9kZSwgc3R5bGVUdXBsZSkge1xuICB2YXIgcHJvcCA9IHN0eWxlVHVwbGVbMF07XG4gIHZhciB2YWx1ZSA9IHN0eWxlVHVwbGVbMV07XG4gIG5vZGUuc3R5bGVbcHJvcF0gPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jYWxDYWNoZUxvb2t1cCgpIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIHtcbiAgICBmbHVzaDogZnVuY3Rpb24oKSB7XG4gICAgICBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfSxcblxuICAgIGNvdW50OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZhciBlbnRyeSA9IGNhY2hlW2tleV07XG4gICAgICByZXR1cm4gZW50cnkgPyBlbnRyeS50b3RhbCA6IDA7XG4gICAgfSxcblxuICAgIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICB2YXIgZW50cnkgPSBjYWNoZVtrZXldO1xuICAgICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnZhbHVlO1xuICAgIH0sXG5cbiAgICBwdXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICghY2FjaGVba2V5XSkge1xuICAgICAgICBjYWNoZVtrZXldID0geyB0b3RhbDogMSwgdmFsdWU6IHZhbHVlIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWNoZVtrZXldLnRvdGFsKys7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG52YXIgJEFuaW1hdGVDc3NQcm92aWRlciA9IFsnJGFuaW1hdGVQcm92aWRlcicsIGZ1bmN0aW9uKCRhbmltYXRlUHJvdmlkZXIpIHtcbiAgdmFyIGdjc0xvb2t1cCA9IGNyZWF0ZUxvY2FsQ2FjaGVMb29rdXAoKTtcbiAgdmFyIGdjc1N0YWdnZXJMb29rdXAgPSBjcmVhdGVMb2NhbENhY2hlTG9va3VwKCk7XG5cbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyQkanFMaXRlJywgJyQkQW5pbWF0ZVJ1bm5lcicsICckdGltZW91dCcsXG4gICAgICAgICAgICAgICAnJGRvY3VtZW50JywgJyRzbmlmZmVyJywgJyQkckFGU2NoZWR1bGVyJyxcbiAgICAgICBmdW5jdGlvbigkd2luZG93LCAgICQkanFMaXRlLCAgICQkQW5pbWF0ZVJ1bm5lciwgICAkdGltZW91dCxcbiAgICAgICAgICAgICAgICAkZG9jdW1lbnQsICAgJHNuaWZmZXIsICAgJCRyQUZTY2hlZHVsZXIpIHtcblxuICAgIHZhciBhcHBseUFuaW1hdGlvbkNsYXNzZXMgPSBhcHBseUFuaW1hdGlvbkNsYXNzZXNGYWN0b3J5KCQkanFMaXRlKTtcblxuICAgIHZhciBwYXJlbnRDb3VudGVyID0gMDtcbiAgICBmdW5jdGlvbiBnY3NIYXNoRm4obm9kZSwgZXh0cmFDbGFzc2VzKSB7XG4gICAgICB2YXIgS0VZID0gXCIkJG5nQW5pbWF0ZVBhcmVudEtleVwiO1xuICAgICAgdmFyIHBhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICB2YXIgcGFyZW50SUQgPSBwYXJlbnROb2RlW0tFWV0gfHwgKHBhcmVudE5vZGVbS0VZXSA9ICsrcGFyZW50Q291bnRlcik7XG4gICAgICByZXR1cm4gcGFyZW50SUQgKyAnLScgKyBub2RlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSArICctJyArIGV4dHJhQ2xhc3NlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlQ2FjaGVkQ3NzU3R5bGVzKG5vZGUsIGNsYXNzTmFtZSwgY2FjaGVLZXksIHByb3BlcnRpZXMpIHtcbiAgICAgIHZhciB0aW1pbmdzID0gZ2NzTG9va3VwLmdldChjYWNoZUtleSk7XG5cbiAgICAgIGlmICghdGltaW5ncykge1xuICAgICAgICB0aW1pbmdzID0gY29tcHV0ZUNzc1N0eWxlcygkd2luZG93LCBub2RlLCBwcm9wZXJ0aWVzKTtcbiAgICAgICAgaWYgKHRpbWluZ3MuYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQgPT09ICdpbmZpbml0ZScpIHtcbiAgICAgICAgICB0aW1pbmdzLmFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50ID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyB3ZSBrZWVwIHB1dHRpbmcgdGhpcyBpbiBtdWx0aXBsZSB0aW1lcyBldmVuIHRob3VnaCB0aGUgdmFsdWUgYW5kIHRoZSBjYWNoZUtleSBhcmUgdGhlIHNhbWVcbiAgICAgIC8vIGJlY2F1c2Ugd2UncmUga2VlcGluZyBhbiBpbnRlcmFsIHRhbGx5IG9mIGhvdyBtYW55IGR1cGxpY2F0ZSBhbmltYXRpb25zIGFyZSBkZXRlY3RlZC5cbiAgICAgIGdjc0xvb2t1cC5wdXQoY2FjaGVLZXksIHRpbWluZ3MpO1xuICAgICAgcmV0dXJuIHRpbWluZ3M7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZUNhY2hlZENzc1N0YWdnZXJTdHlsZXMobm9kZSwgY2xhc3NOYW1lLCBjYWNoZUtleSwgcHJvcGVydGllcykge1xuICAgICAgdmFyIHN0YWdnZXI7XG5cbiAgICAgIC8vIGlmIHdlIGhhdmUgb25lIG9yIG1vcmUgZXhpc3RpbmcgbWF0Y2hlcyBvZiBtYXRjaGluZyBlbGVtZW50c1xuICAgICAgLy8gY29udGFpbmluZyB0aGUgc2FtZSBwYXJlbnQgKyBDU1Mgc3R5bGVzICh3aGljaCBpcyBob3cgY2FjaGVLZXkgd29ya3MpXG4gICAgICAvLyB0aGVuIHN0YWdnZXJpbmcgaXMgcG9zc2libGVcbiAgICAgIGlmIChnY3NMb29rdXAuY291bnQoY2FjaGVLZXkpID4gMCkge1xuICAgICAgICBzdGFnZ2VyID0gZ2NzU3RhZ2dlckxvb2t1cC5nZXQoY2FjaGVLZXkpO1xuXG4gICAgICAgIGlmICghc3RhZ2dlcikge1xuICAgICAgICAgIHZhciBzdGFnZ2VyQ2xhc3NOYW1lID0gcGVuZENsYXNzZXMoY2xhc3NOYW1lLCAnLXN0YWdnZXInKTtcblxuICAgICAgICAgICQkanFMaXRlLmFkZENsYXNzKG5vZGUsIHN0YWdnZXJDbGFzc05hbWUpO1xuXG4gICAgICAgICAgc3RhZ2dlciA9IGNvbXB1dGVDc3NTdHlsZXMoJHdpbmRvdywgbm9kZSwgcHJvcGVydGllcyk7XG5cbiAgICAgICAgICAvLyBmb3JjZSB0aGUgY29udmVyc2lvbiBvZiBhIG51bGwgdmFsdWUgdG8gemVybyBpbmNhc2Ugbm90IHNldFxuICAgICAgICAgIHN0YWdnZXIuYW5pbWF0aW9uRHVyYXRpb24gPSBNYXRoLm1heChzdGFnZ2VyLmFuaW1hdGlvbkR1cmF0aW9uLCAwKTtcbiAgICAgICAgICBzdGFnZ2VyLnRyYW5zaXRpb25EdXJhdGlvbiA9IE1hdGgubWF4KHN0YWdnZXIudHJhbnNpdGlvbkR1cmF0aW9uLCAwKTtcblxuICAgICAgICAgICQkanFMaXRlLnJlbW92ZUNsYXNzKG5vZGUsIHN0YWdnZXJDbGFzc05hbWUpO1xuXG4gICAgICAgICAgZ2NzU3RhZ2dlckxvb2t1cC5wdXQoY2FjaGVLZXksIHN0YWdnZXIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGFnZ2VyIHx8IHt9O1xuICAgIH1cblxuICAgIHZhciBib2QgPSBnZXREb21Ob2RlKCRkb2N1bWVudCkuYm9keTtcbiAgICB2YXIgcmFmV2FpdFF1ZXVlID0gW107XG4gICAgZnVuY3Rpb24gd2FpdFVudGlsUXVpZXQoY2FsbGJhY2spIHtcbiAgICAgIHJhZldhaXRRdWV1ZS5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICQkckFGU2NoZWR1bGVyLndhaXRVbnRpbFF1aWV0KGZ1bmN0aW9uKCkge1xuICAgICAgICBnY3NMb29rdXAuZmx1c2goKTtcbiAgICAgICAgZ2NzU3RhZ2dlckxvb2t1cC5mbHVzaCgpO1xuXG4gICAgICAgIC8vdGhlIGxpbmUgYmVsb3cgd2lsbCBmb3JjZSB0aGUgYnJvd3NlciB0byBwZXJmb3JtIGEgcmVwYWludCBzb1xuICAgICAgICAvL3RoYXQgYWxsIHRoZSBhbmltYXRlZCBlbGVtZW50cyB3aXRoaW4gdGhlIGFuaW1hdGlvbiBmcmFtZSB3aWxsXG4gICAgICAgIC8vYmUgcHJvcGVybHkgdXBkYXRlZCBhbmQgZHJhd24gb24gc2NyZWVuLiBUaGlzIGlzIHJlcXVpcmVkIHRvXG4gICAgICAgIC8vZW5zdXJlIHRoYXQgdGhlIHByZXBhcmF0aW9uIGFuaW1hdGlvbiBpcyBwcm9wZXJseSBmbHVzaGVkIHNvIHRoYXRcbiAgICAgICAgLy90aGUgYWN0aXZlIHN0YXRlIHBpY2tzIHVwIGZyb20gdGhlcmUuIERPIE5PVCBSRU1PVkUgVEhJUyBMSU5FLlxuICAgICAgICAvL0RPIE5PVCBPUFRJTUlaRSBUSElTIExJTkUuIFRIRSBNSU5JRklFUiBXSUxMIFJFTU9WRSBJVCBPVEhFUldJU0UgV0hJQ0hcbiAgICAgICAgLy9XSUxMIFJFU1VMVCBJTiBBTiBVTlBSRURJQ1RBQkxFIEJVRyBUSEFUIElTIFZFUlkgSEFSRCBUTyBUUkFDSyBET1dOIEFORFxuICAgICAgICAvL1dJTEwgVEFLRSBZRUFSUyBBV0FZIEZST00gWU9VUiBMSUZFLlxuICAgICAgICB2YXIgd2lkdGggPSBib2Qub2Zmc2V0V2lkdGggKyAxO1xuXG4gICAgICAgIC8vIHdlIHVzZSBhIGZvciBsb29wIHRvIGVuc3VyZSB0aGF0IGlmIHRoZSBxdWV1ZSBpcyBjaGFuZ2VkXG4gICAgICAgIC8vIGR1cmluZyB0aGlzIGxvb3BpbmcgdGhlbiBpdCB3aWxsIGNvbnNpZGVyIG5ldyByZXF1ZXN0c1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhZldhaXRRdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHJhZldhaXRRdWV1ZVtpXSh3aWR0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmFmV2FpdFF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5pdDtcblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVUaW1pbmdzKG5vZGUsIGNsYXNzTmFtZSwgY2FjaGVLZXkpIHtcbiAgICAgIHZhciB0aW1pbmdzID0gY29tcHV0ZUNhY2hlZENzc1N0eWxlcyhub2RlLCBjbGFzc05hbWUsIGNhY2hlS2V5LCBERVRFQ1RfQ1NTX1BST1BFUlRJRVMpO1xuICAgICAgdmFyIGFEID0gdGltaW5ncy5hbmltYXRpb25EZWxheTtcbiAgICAgIHZhciB0RCA9IHRpbWluZ3MudHJhbnNpdGlvbkRlbGF5O1xuICAgICAgdGltaW5ncy5tYXhEZWxheSA9IGFEICYmIHREXG4gICAgICAgICAgPyBNYXRoLm1heChhRCwgdEQpXG4gICAgICAgICAgOiAoYUQgfHwgdEQpO1xuICAgICAgdGltaW5ncy5tYXhEdXJhdGlvbiA9IE1hdGgubWF4KFxuICAgICAgICAgIHRpbWluZ3MuYW5pbWF0aW9uRHVyYXRpb24gKiB0aW1pbmdzLmFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50LFxuICAgICAgICAgIHRpbWluZ3MudHJhbnNpdGlvbkR1cmF0aW9uKTtcblxuICAgICAgcmV0dXJuIHRpbWluZ3M7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbm9kZSA9IGdldERvbU5vZGUoZWxlbWVudCk7XG4gICAgICBpZiAoIW5vZGUgfHwgIW5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICByZXR1cm4gY2xvc2VBbmRSZXR1cm5Ob29wQW5pbWF0b3IoKTtcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRpb25PcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgICB2YXIgdGVtcG9yYXJ5U3R5bGVzID0gW107XG4gICAgICB2YXIgY2xhc3NlcyA9IGVsZW1lbnQuYXR0cignY2xhc3MnKTtcbiAgICAgIHZhciBzdHlsZXMgPSBwYWNrYWdlU3R5bGVzKG9wdGlvbnMpO1xuICAgICAgdmFyIGFuaW1hdGlvbkNsb3NlZDtcbiAgICAgIHZhciBhbmltYXRpb25QYXVzZWQ7XG4gICAgICB2YXIgYW5pbWF0aW9uQ29tcGxldGVkO1xuICAgICAgdmFyIHJ1bm5lcjtcbiAgICAgIHZhciBydW5uZXJIb3N0O1xuICAgICAgdmFyIG1heERlbGF5O1xuICAgICAgdmFyIG1heERlbGF5VGltZTtcbiAgICAgIHZhciBtYXhEdXJhdGlvbjtcbiAgICAgIHZhciBtYXhEdXJhdGlvblRpbWU7XG5cbiAgICAgIGlmIChvcHRpb25zLmR1cmF0aW9uID09PSAwIHx8ICghJHNuaWZmZXIuYW5pbWF0aW9ucyAmJiAhJHNuaWZmZXIudHJhbnNpdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiBjbG9zZUFuZFJldHVybk5vb3BBbmltYXRvcigpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbWV0aG9kID0gb3B0aW9ucy5ldmVudCAmJiBpc0FycmF5KG9wdGlvbnMuZXZlbnQpXG4gICAgICAgICAgICA/IG9wdGlvbnMuZXZlbnQuam9pbignICcpXG4gICAgICAgICAgICA6IG9wdGlvbnMuZXZlbnQ7XG5cbiAgICAgIHZhciBpc1N0cnVjdHVyYWwgPSBtZXRob2QgJiYgb3B0aW9ucy5zdHJ1Y3R1cmFsO1xuICAgICAgdmFyIHN0cnVjdHVyYWxDbGFzc05hbWUgPSAnJztcbiAgICAgIHZhciBhZGRSZW1vdmVDbGFzc05hbWUgPSAnJztcblxuICAgICAgaWYgKGlzU3RydWN0dXJhbCkge1xuICAgICAgICBzdHJ1Y3R1cmFsQ2xhc3NOYW1lID0gcGVuZENsYXNzZXMobWV0aG9kLCAnbmctJywgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKG1ldGhvZCkge1xuICAgICAgICBzdHJ1Y3R1cmFsQ2xhc3NOYW1lID0gbWV0aG9kO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5hZGRDbGFzcykge1xuICAgICAgICBhZGRSZW1vdmVDbGFzc05hbWUgKz0gcGVuZENsYXNzZXMob3B0aW9ucy5hZGRDbGFzcywgJy1hZGQnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMucmVtb3ZlQ2xhc3MpIHtcbiAgICAgICAgaWYgKGFkZFJlbW92ZUNsYXNzTmFtZS5sZW5ndGgpIHtcbiAgICAgICAgICBhZGRSZW1vdmVDbGFzc05hbWUgKz0gJyAnO1xuICAgICAgICB9XG4gICAgICAgIGFkZFJlbW92ZUNsYXNzTmFtZSArPSBwZW5kQ2xhc3NlcyhvcHRpb25zLnJlbW92ZUNsYXNzLCAnLXJlbW92ZScpO1xuICAgICAgfVxuXG4gICAgICAvLyB0aGVyZSBtYXkgYmUgYSBzaXR1YXRpb24gd2hlcmUgYSBzdHJ1Y3R1cmFsIGFuaW1hdGlvbiBpcyBjb21iaW5lZCB0b2dldGhlclxuICAgICAgLy8gd2l0aCBDU1MgY2xhc3NlcyB0aGF0IG5lZWQgdG8gcmVzb2x2ZSBiZWZvcmUgdGhlIGFuaW1hdGlvbiBpcyBjb21wdXRlZC5cbiAgICAgIC8vIEhvd2V2ZXIgdGhpcyBtZWFucyB0aGF0IHRoZXJlIGlzIG5vIGV4cGxpY2l0IENTUyBjb2RlIHRvIGJsb2NrIHRoZSBhbmltYXRpb25cbiAgICAgIC8vIGZyb20gaGFwcGVuaW5nIChieSBzZXR0aW5nIDBzIG5vbmUgaW4gdGhlIGNsYXNzIG5hbWUpLiBJZiB0aGlzIGlzIHRoZSBjYXNlXG4gICAgICAvLyB3ZSBuZWVkIHRvIGFwcGx5IHRoZSBjbGFzc2VzIGJlZm9yZSB0aGUgZmlyc3QgckFGIHNvIHdlIGtub3cgdG8gY29udGludWUgaWZcbiAgICAgIC8vIHRoZXJlIGFjdHVhbGx5IGlzIGEgZGV0ZWN0ZWQgdHJhbnNpdGlvbiBvciBrZXlmcmFtZSBhbmltYXRpb25cbiAgICAgIGlmIChvcHRpb25zLmFwcGx5Q2xhc3Nlc0Vhcmx5ICYmIGFkZFJlbW92ZUNsYXNzTmFtZS5sZW5ndGgpIHtcbiAgICAgICAgYXBwbHlBbmltYXRpb25DbGFzc2VzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBhZGRSZW1vdmVDbGFzc05hbWUgPSAnJztcbiAgICAgIH1cblxuICAgICAgdmFyIHNldHVwQ2xhc3NlcyA9IFtzdHJ1Y3R1cmFsQ2xhc3NOYW1lLCBhZGRSZW1vdmVDbGFzc05hbWVdLmpvaW4oJyAnKS50cmltKCk7XG4gICAgICB2YXIgZnVsbENsYXNzTmFtZSA9IGNsYXNzZXMgKyAnICcgKyBzZXR1cENsYXNzZXM7XG4gICAgICB2YXIgYWN0aXZlQ2xhc3NlcyA9IHBlbmRDbGFzc2VzKHNldHVwQ2xhc3NlcywgJy1hY3RpdmUnKTtcbiAgICAgIHZhciBoYXNUb1N0eWxlcyA9IHN0eWxlcy50byAmJiBPYmplY3Qua2V5cyhzdHlsZXMudG8pLmxlbmd0aCA+IDA7XG4gICAgICB2YXIgY29udGFpbnNLZXlmcmFtZUFuaW1hdGlvbiA9IChvcHRpb25zLmtleWZyYW1lU3R5bGUgfHwgJycpLmxlbmd0aCA+IDA7XG5cbiAgICAgIC8vIHRoZXJlIGlzIG5vIHdheSB3ZSBjYW4gdHJpZ2dlciBhbiBhbmltYXRpb24gaWYgbm8gc3R5bGVzIGFuZFxuICAgICAgLy8gbm8gY2xhc3NlcyBhcmUgYmVpbmcgYXBwbGllZCB3aGljaCB3b3VsZCB0aGVuIHRyaWdnZXIgYSB0cmFuc2l0aW9uLFxuICAgICAgLy8gdW5sZXNzIHRoZXJlIGEgaXMgcmF3IGtleWZyYW1lIHZhbHVlIHRoYXQgaXMgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cbiAgICAgIGlmICghY29udGFpbnNLZXlmcmFtZUFuaW1hdGlvblxuICAgICAgICAgICAmJiAhaGFzVG9TdHlsZXNcbiAgICAgICAgICAgJiYgIXNldHVwQ2xhc3Nlcykge1xuICAgICAgICByZXR1cm4gY2xvc2VBbmRSZXR1cm5Ob29wQW5pbWF0b3IoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNhY2hlS2V5LCBzdGFnZ2VyO1xuICAgICAgaWYgKG9wdGlvbnMuc3RhZ2dlciA+IDApIHtcbiAgICAgICAgdmFyIHN0YWdnZXJWYWwgPSBwYXJzZUZsb2F0KG9wdGlvbnMuc3RhZ2dlcik7XG4gICAgICAgIHN0YWdnZXIgPSB7XG4gICAgICAgICAgdHJhbnNpdGlvbkRlbGF5OiBzdGFnZ2VyVmFsLFxuICAgICAgICAgIGFuaW1hdGlvbkRlbGF5OiBzdGFnZ2VyVmFsLFxuICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogMCxcbiAgICAgICAgICBhbmltYXRpb25EdXJhdGlvbjogMFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FjaGVLZXkgPSBnY3NIYXNoRm4obm9kZSwgZnVsbENsYXNzTmFtZSk7XG4gICAgICAgIHN0YWdnZXIgPSBjb21wdXRlQ2FjaGVkQ3NzU3RhZ2dlclN0eWxlcyhub2RlLCBzZXR1cENsYXNzZXMsIGNhY2hlS2V5LCBERVRFQ1RfU1RBR0dFUl9DU1NfUFJPUEVSVElFUyk7XG4gICAgICB9XG5cbiAgICAgICQkanFMaXRlLmFkZENsYXNzKGVsZW1lbnQsIHNldHVwQ2xhc3Nlcyk7XG5cbiAgICAgIHZhciBhcHBseU9ubHlEdXJhdGlvbjtcblxuICAgICAgaWYgKG9wdGlvbnMudHJhbnNpdGlvblN0eWxlKSB7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uU3R5bGUgPSBbVFJBTlNJVElPTl9QUk9QLCBvcHRpb25zLnRyYW5zaXRpb25TdHlsZV07XG4gICAgICAgIGFwcGx5SW5saW5lU3R5bGUobm9kZSwgdHJhbnNpdGlvblN0eWxlKTtcbiAgICAgICAgdGVtcG9yYXJ5U3R5bGVzLnB1c2godHJhbnNpdGlvblN0eWxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuZHVyYXRpb24gPj0gMCkge1xuICAgICAgICBhcHBseU9ubHlEdXJhdGlvbiA9IG5vZGUuc3R5bGVbVFJBTlNJVElPTl9QUk9QXS5sZW5ndGggPiAwO1xuICAgICAgICB2YXIgZHVyYXRpb25TdHlsZSA9IGdldENzc1RyYW5zaXRpb25EdXJhdGlvblN0eWxlKG9wdGlvbnMuZHVyYXRpb24sIGFwcGx5T25seUR1cmF0aW9uKTtcblxuICAgICAgICAvLyB3ZSBzZXQgdGhlIGR1cmF0aW9uIHNvIHRoYXQgaXQgd2lsbCBiZSBwaWNrZWQgdXAgYnkgZ2V0Q29tcHV0ZWRTdHlsZSBsYXRlclxuICAgICAgICBhcHBseUlubGluZVN0eWxlKG5vZGUsIGR1cmF0aW9uU3R5bGUpO1xuICAgICAgICB0ZW1wb3JhcnlTdHlsZXMucHVzaChkdXJhdGlvblN0eWxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMua2V5ZnJhbWVTdHlsZSkge1xuICAgICAgICB2YXIga2V5ZnJhbWVTdHlsZSA9IFtBTklNQVRJT05fUFJPUCwgb3B0aW9ucy5rZXlmcmFtZVN0eWxlXTtcbiAgICAgICAgYXBwbHlJbmxpbmVTdHlsZShub2RlLCBrZXlmcmFtZVN0eWxlKTtcbiAgICAgICAgdGVtcG9yYXJ5U3R5bGVzLnB1c2goa2V5ZnJhbWVTdHlsZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpdGVtSW5kZXggPSBzdGFnZ2VyXG4gICAgICAgICAgPyBvcHRpb25zLnN0YWdnZXJJbmRleCA+PSAwXG4gICAgICAgICAgICAgID8gb3B0aW9ucy5zdGFnZ2VySW5kZXhcbiAgICAgICAgICAgICAgOiBnY3NMb29rdXAuY291bnQoY2FjaGVLZXkpXG4gICAgICAgICAgOiAwO1xuXG4gICAgICB2YXIgaXNGaXJzdCA9IGl0ZW1JbmRleCA9PT0gMDtcblxuICAgICAgLy8gdGhpcyBpcyBhIHByZS1lbXB0aXZlIHdheSBvZiBmb3JjaW5nIHRoZSBzZXR1cCBjbGFzc2VzIHRvIGJlIGFkZGVkIGFuZCBhcHBsaWVkIElOU1RBTlRMWVxuICAgICAgLy8gd2l0aG91dCBjYXVzaW5nIGFueSBjb21iaW5hdGlvbiBvZiB0cmFuc2l0aW9ucyB0byBraWNrIGluLiBCeSBhZGRpbmcgYSBuZWdhdGl2ZSBkZWxheSB2YWx1ZVxuICAgICAgLy8gaXQgZm9yY2VzIHRoZSBzZXR1cCBjbGFzcycgdHJhbnNpdGlvbiB0byBlbmQgaW1tZWRpYXRlbHkuIFdlIGxhdGVyIHRoZW4gcmVtb3ZlIHRoZSBuZWdhdGl2ZVxuICAgICAgLy8gdHJhbnNpdGlvbiBkZWxheSB0byBhbGxvdyBmb3IgdGhlIHRyYW5zaXRpb24gdG8gbmF0dXJhbGx5IGRvIGl0J3MgdGhpbmcuIFRoZSBiZWF1dHkgaGVyZSBpc1xuICAgICAgLy8gdGhhdCBpZiB0aGVyZSBpcyBubyB0cmFuc2l0aW9uIGRlZmluZWQgdGhlbiBub3RoaW5nIHdpbGwgaGFwcGVuIGFuZCB0aGlzIHdpbGwgYWxzbyBhbGxvd1xuICAgICAgLy8gb3RoZXIgdHJhbnNpdGlvbnMgdG8gYmUgc3RhY2tlZCBvbiB0b3Agb2YgZWFjaCBvdGhlciB3aXRob3V0IGFueSBjaG9wcGluZyB0aGVtIG91dC5cbiAgICAgIGlmIChpc0ZpcnN0KSB7XG4gICAgICAgIGJsb2NrVHJhbnNpdGlvbnMobm9kZSwgU0FGRV9GQVNUX0ZPUldBUkRfRFVSQVRJT05fVkFMVUUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGltaW5ncyA9IGNvbXB1dGVUaW1pbmdzKG5vZGUsIGZ1bGxDbGFzc05hbWUsIGNhY2hlS2V5KTtcbiAgICAgIHZhciByZWxhdGl2ZURlbGF5ID0gdGltaW5ncy5tYXhEZWxheTtcbiAgICAgIG1heERlbGF5ID0gTWF0aC5tYXgocmVsYXRpdmVEZWxheSwgMCk7XG4gICAgICBtYXhEdXJhdGlvbiA9IHRpbWluZ3MubWF4RHVyYXRpb247XG5cbiAgICAgIHZhciBmbGFncyA9IHt9O1xuICAgICAgZmxhZ3MuaGFzVHJhbnNpdGlvbnMgICAgICAgICAgPSB0aW1pbmdzLnRyYW5zaXRpb25EdXJhdGlvbiA+IDA7XG4gICAgICBmbGFncy5oYXNBbmltYXRpb25zICAgICAgICAgICA9IHRpbWluZ3MuYW5pbWF0aW9uRHVyYXRpb24gPiAwO1xuICAgICAgZmxhZ3MuaGFzVHJhbnNpdGlvbkFsbCAgICAgICAgPSBmbGFncy5oYXNUcmFuc2l0aW9ucyAmJiB0aW1pbmdzLnRyYW5zaXRpb25Qcm9wZXJ0eSA9PSAnYWxsJztcbiAgICAgIGZsYWdzLmFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uID0gaGFzVG9TdHlsZXMgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmbGFncy5oYXNUcmFuc2l0aW9ucyAmJiAhZmxhZ3MuaGFzVHJhbnNpdGlvbkFsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgKGZsYWdzLmhhc0FuaW1hdGlvbnMgJiYgIWZsYWdzLmhhc1RyYW5zaXRpb25zKSk7XG4gICAgICBmbGFncy5hcHBseUFuaW1hdGlvbkR1cmF0aW9uICA9IG9wdGlvbnMuZHVyYXRpb24gJiYgZmxhZ3MuaGFzQW5pbWF0aW9ucztcbiAgICAgIGZsYWdzLmFwcGx5VHJhbnNpdGlvbkRlbGF5ICAgID0gdHJ1dGh5VGltaW5nVmFsdWUob3B0aW9ucy5kZWxheSkgJiYgKGZsYWdzLmFwcGx5VHJhbnNpdGlvbkR1cmF0aW9uIHx8IGZsYWdzLmhhc1RyYW5zaXRpb25zKTtcbiAgICAgIGZsYWdzLmFwcGx5QW5pbWF0aW9uRGVsYXkgICAgID0gdHJ1dGh5VGltaW5nVmFsdWUob3B0aW9ucy5kZWxheSkgJiYgZmxhZ3MuaGFzQW5pbWF0aW9ucztcbiAgICAgIGZsYWdzLnJlY2FsY3VsYXRlVGltaW5nU3R5bGVzID0gYWRkUmVtb3ZlQ2xhc3NOYW1lLmxlbmd0aCA+IDA7XG5cbiAgICAgIGlmIChmbGFncy5hcHBseVRyYW5zaXRpb25EdXJhdGlvbiB8fCBmbGFncy5hcHBseUFuaW1hdGlvbkR1cmF0aW9uKSB7XG4gICAgICAgIG1heER1cmF0aW9uID0gb3B0aW9ucy5kdXJhdGlvbiA/IHBhcnNlRmxvYXQob3B0aW9ucy5kdXJhdGlvbikgOiBtYXhEdXJhdGlvbjtcblxuICAgICAgICBpZiAoZmxhZ3MuYXBwbHlUcmFuc2l0aW9uRHVyYXRpb24pIHtcbiAgICAgICAgICBmbGFncy5oYXNUcmFuc2l0aW9ucyA9IHRydWU7XG4gICAgICAgICAgdGltaW5ncy50cmFuc2l0aW9uRHVyYXRpb24gPSBtYXhEdXJhdGlvbjtcbiAgICAgICAgICBhcHBseU9ubHlEdXJhdGlvbiA9IG5vZGUuc3R5bGVbVFJBTlNJVElPTl9QUk9QICsgUFJPUEVSVFlfS0VZXS5sZW5ndGggPiAwO1xuICAgICAgICAgIHRlbXBvcmFyeVN0eWxlcy5wdXNoKGdldENzc1RyYW5zaXRpb25EdXJhdGlvblN0eWxlKG1heER1cmF0aW9uLCBhcHBseU9ubHlEdXJhdGlvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZsYWdzLmFwcGx5QW5pbWF0aW9uRHVyYXRpb24pIHtcbiAgICAgICAgICBmbGFncy5oYXNBbmltYXRpb25zID0gdHJ1ZTtcbiAgICAgICAgICB0aW1pbmdzLmFuaW1hdGlvbkR1cmF0aW9uID0gbWF4RHVyYXRpb247XG4gICAgICAgICAgdGVtcG9yYXJ5U3R5bGVzLnB1c2goZ2V0Q3NzS2V5ZnJhbWVEdXJhdGlvblN0eWxlKG1heER1cmF0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1heER1cmF0aW9uID09PSAwICYmICFmbGFncy5yZWNhbGN1bGF0ZVRpbWluZ1N0eWxlcykge1xuICAgICAgICByZXR1cm4gY2xvc2VBbmRSZXR1cm5Ob29wQW5pbWF0b3IoKTtcbiAgICAgIH1cblxuICAgICAgLy8gd2UgbmVlZCB0byByZWNhbGN1bGF0ZSB0aGUgZGVsYXkgdmFsdWUgc2luY2Ugd2UgdXNlZCBhIHByZS1lbXB0aXZlIG5lZ2F0aXZlXG4gICAgICAvLyBkZWxheSB2YWx1ZSBhbmQgdGhlIGRlbGF5IHZhbHVlIGlzIHJlcXVpcmVkIGZvciB0aGUgZmluYWwgZXZlbnQgY2hlY2tpbmcuIFRoaXNcbiAgICAgIC8vIHByb3BlcnR5IHdpbGwgZW5zdXJlIHRoYXQgdGhpcyB3aWxsIGhhcHBlbiBhZnRlciB0aGUgUkFGIHBoYXNlIGhhcyBwYXNzZWQuXG4gICAgICBpZiAob3B0aW9ucy5kdXJhdGlvbiA9PSBudWxsICYmIHRpbWluZ3MudHJhbnNpdGlvbkR1cmF0aW9uID4gMCkge1xuICAgICAgICBmbGFncy5yZWNhbGN1bGF0ZVRpbWluZ1N0eWxlcyA9IGZsYWdzLnJlY2FsY3VsYXRlVGltaW5nU3R5bGVzIHx8IGlzRmlyc3Q7XG4gICAgICB9XG5cbiAgICAgIG1heERlbGF5VGltZSA9IG1heERlbGF5ICogT05FX1NFQ09ORDtcbiAgICAgIG1heER1cmF0aW9uVGltZSA9IG1heER1cmF0aW9uICogT05FX1NFQ09ORDtcbiAgICAgIGlmICghb3B0aW9ucy5za2lwQmxvY2tpbmcpIHtcbiAgICAgICAgZmxhZ3MuYmxvY2tUcmFuc2l0aW9uID0gdGltaW5ncy50cmFuc2l0aW9uRHVyYXRpb24gPiAwO1xuICAgICAgICBmbGFncy5ibG9ja0tleWZyYW1lQW5pbWF0aW9uID0gdGltaW5ncy5hbmltYXRpb25EdXJhdGlvbiA+IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWdnZXIuYW5pbWF0aW9uRGVsYXkgPiAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFnZ2VyLmFuaW1hdGlvbkR1cmF0aW9uID09PSAwO1xuICAgICAgfVxuXG4gICAgICBhcHBseUFuaW1hdGlvbkZyb21TdHlsZXMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICBpZiAoIWZsYWdzLmJsb2NrVHJhbnNpdGlvbikge1xuICAgICAgICBibG9ja1RyYW5zaXRpb25zKG5vZGUsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgYXBwbHlCbG9ja2luZyhtYXhEdXJhdGlvbik7XG5cbiAgICAgIC8vIFRPRE8obWF0c2tvKTogZm9yIDEuNSBjaGFuZ2UgdGhpcyBjb2RlIHRvIGhhdmUgYW4gYW5pbWF0b3Igb2JqZWN0IGZvciBiZXR0ZXIgZGVidWdnaW5nXG4gICAgICByZXR1cm4ge1xuICAgICAgICAkJHdpbGxBbmltYXRlOiB0cnVlLFxuICAgICAgICBlbmQ6IGVuZEZuLFxuICAgICAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGFuaW1hdGlvbkNsb3NlZCkgcmV0dXJuO1xuXG4gICAgICAgICAgcnVubmVySG9zdCA9IHtcbiAgICAgICAgICAgIGVuZDogZW5kRm4sXG4gICAgICAgICAgICBjYW5jZWw6IGNhbmNlbEZuLFxuICAgICAgICAgICAgcmVzdW1lOiBudWxsLCAvL3RoaXMgd2lsbCBiZSBzZXQgZHVyaW5nIHRoZSBzdGFydCgpIHBoYXNlXG4gICAgICAgICAgICBwYXVzZTogbnVsbFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKHJ1bm5lckhvc3QpO1xuXG4gICAgICAgICAgd2FpdFVudGlsUXVpZXQoc3RhcnQpO1xuXG4gICAgICAgICAgLy8gd2UgZG9uJ3QgaGF2ZSBhY2Nlc3MgdG8gcGF1c2UvcmVzdW1lIHRoZSBhbmltYXRpb25cbiAgICAgICAgICAvLyBzaW5jZSBpdCBoYXNuJ3QgcnVuIHlldC4gQW5pbWF0ZVJ1bm5lciB3aWxsIHRoZXJlZm9yZVxuICAgICAgICAgIC8vIHNldCBub29wIGZ1bmN0aW9ucyBmb3IgcmVzdW1lIGFuZCBwYXVzZSBhbmQgdGhleSB3aWxsXG4gICAgICAgICAgLy8gbGF0ZXIgYmUgb3ZlcnJpZGRlbiBvbmNlIHRoZSBhbmltYXRpb24gaXMgdHJpZ2dlcmVkXG4gICAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gZW5kRm4oKSB7XG4gICAgICAgIGNsb3NlKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNhbmNlbEZuKCkge1xuICAgICAgICBjbG9zZSh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2xvc2UocmVqZWN0ZWQpIHsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG4gICAgICAgIC8vIGlmIHRoZSBwcm9taXNlIGhhcyBiZWVuIGNhbGxlZCBhbHJlYWR5IHRoZW4gd2Ugc2hvdWxkbid0IGNsb3NlXG4gICAgICAgIC8vIHRoZSBhbmltYXRpb24gYWdhaW5cbiAgICAgICAgaWYgKGFuaW1hdGlvbkNsb3NlZCB8fCAoYW5pbWF0aW9uQ29tcGxldGVkICYmIGFuaW1hdGlvblBhdXNlZCkpIHJldHVybjtcbiAgICAgICAgYW5pbWF0aW9uQ2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgYW5pbWF0aW9uUGF1c2VkID0gZmFsc2U7XG5cbiAgICAgICAgJCRqcUxpdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgc2V0dXBDbGFzc2VzKTtcbiAgICAgICAgJCRqcUxpdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgYWN0aXZlQ2xhc3Nlcyk7XG5cbiAgICAgICAgYmxvY2tLZXlmcmFtZUFuaW1hdGlvbnMobm9kZSwgZmFsc2UpO1xuICAgICAgICBibG9ja1RyYW5zaXRpb25zKG5vZGUsIGZhbHNlKTtcblxuICAgICAgICBmb3JFYWNoKHRlbXBvcmFyeVN0eWxlcywgZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgICAgICAvLyBUaGVyZSBpcyBvbmx5IG9uZSB3YXkgdG8gcmVtb3ZlIGlubGluZSBzdHlsZSBwcm9wZXJ0aWVzIGVudGlyZWx5IGZyb20gZWxlbWVudHMuXG4gICAgICAgICAgLy8gQnkgdXNpbmcgYHJlbW92ZVByb3BlcnR5YCB0aGlzIHdvcmtzLCBidXQgd2UgbmVlZCB0byBjb252ZXJ0IGNhbWVsLWNhc2VkIENTU1xuICAgICAgICAgIC8vIHN0eWxlcyBkb3duIHRvIGh5cGhlbmF0ZWQgdmFsdWVzLlxuICAgICAgICAgIG5vZGUuc3R5bGVbZW50cnlbMF1dID0gJyc7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFwcGx5QW5pbWF0aW9uQ2xhc3NlcyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgYXBwbHlBbmltYXRpb25TdHlsZXMoZWxlbWVudCwgb3B0aW9ucyk7XG5cbiAgICAgICAgLy8gdGhlIHJlYXNvbiB3aHkgd2UgaGF2ZSB0aGlzIG9wdGlvbiBpcyB0byBhbGxvdyBhIHN5bmNocm9ub3VzIGNsb3NpbmcgY2FsbGJhY2tcbiAgICAgICAgLy8gdGhhdCBpcyBmaXJlZCBhcyBTT09OIGFzIHRoZSBhbmltYXRpb24gZW5kcyAod2hlbiB0aGUgQ1NTIGlzIHJlbW92ZWQpIG9yIGlmXG4gICAgICAgIC8vIHRoZSBhbmltYXRpb24gbmV2ZXIgdGFrZXMgb2ZmIGF0IGFsbC4gQSBnb29kIGV4YW1wbGUgaXMgYSBsZWF2ZSBhbmltYXRpb24gc2luY2VcbiAgICAgICAgLy8gdGhlIGVsZW1lbnQgbXVzdCBiZSByZW1vdmVkIGp1c3QgYWZ0ZXIgdGhlIGFuaW1hdGlvbiBpcyBvdmVyIG9yIGVsc2UgdGhlIGVsZW1lbnRcbiAgICAgICAgLy8gd2lsbCBhcHBlYXIgb24gc2NyZWVuIGZvciBvbmUgYW5pbWF0aW9uIGZyYW1lIGNhdXNpbmcgYW4gb3ZlcmJlYXJpbmcgZmxpY2tlci5cbiAgICAgICAgaWYgKG9wdGlvbnMub25Eb25lKSB7XG4gICAgICAgICAgb3B0aW9ucy5vbkRvbmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHRoZSBwcmVwYXJhdGlvbiBmdW5jdGlvbiBmYWlscyB0aGVuIHRoZSBwcm9taXNlIGlzIG5vdCBzZXR1cFxuICAgICAgICBpZiAocnVubmVyKSB7XG4gICAgICAgICAgcnVubmVyLmNvbXBsZXRlKCFyZWplY3RlZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYXBwbHlCbG9ja2luZyhkdXJhdGlvbikge1xuICAgICAgICBpZiAoZmxhZ3MuYmxvY2tUcmFuc2l0aW9uKSB7XG4gICAgICAgICAgYmxvY2tUcmFuc2l0aW9ucyhub2RlLCBkdXJhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmxhZ3MuYmxvY2tLZXlmcmFtZUFuaW1hdGlvbikge1xuICAgICAgICAgIGJsb2NrS2V5ZnJhbWVBbmltYXRpb25zKG5vZGUsICEhZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNsb3NlQW5kUmV0dXJuTm9vcEFuaW1hdG9yKCkge1xuICAgICAgICBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKHtcbiAgICAgICAgICBlbmQ6IGVuZEZuLFxuICAgICAgICAgIGNhbmNlbDogY2FuY2VsRm5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY2xvc2UoKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICQkd2lsbEFuaW1hdGU6IGZhbHNlLFxuICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlbmQ6IGVuZEZuXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICBpZiAoYW5pbWF0aW9uQ2xvc2VkKSByZXR1cm47XG4gICAgICAgIGlmICghbm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RhcnRUaW1lLCBldmVudHMgPSBbXTtcblxuICAgICAgICAvLyBldmVuIHRob3VnaCB3ZSBvbmx5IHBhdXNlIGtleWZyYW1lIGFuaW1hdGlvbnMgaGVyZSB0aGUgcGF1c2UgZmxhZ1xuICAgICAgICAvLyB3aWxsIHN0aWxsIGhhcHBlbiB3aGVuIHRyYW5zaXRpb25zIGFyZSB1c2VkLiBPbmx5IHRoZSB0cmFuc2l0aW9uIHdpbGxcbiAgICAgICAgLy8gbm90IGJlIHBhdXNlZCBzaW5jZSB0aGF0IGlzIG5vdCBwb3NzaWJsZS4gSWYgdGhlIGFuaW1hdGlvbiBlbmRzIHdoZW5cbiAgICAgICAgLy8gcGF1c2VkIHRoZW4gaXQgd2lsbCBub3QgY29tcGxldGUgdW50aWwgdW5wYXVzZWQgb3IgY2FuY2VsbGVkLlxuICAgICAgICB2YXIgcGxheVBhdXNlID0gZnVuY3Rpb24ocGxheUFuaW1hdGlvbikge1xuICAgICAgICAgIGlmICghYW5pbWF0aW9uQ29tcGxldGVkKSB7XG4gICAgICAgICAgICBhbmltYXRpb25QYXVzZWQgPSAhcGxheUFuaW1hdGlvbjtcbiAgICAgICAgICAgIGlmICh0aW1pbmdzLmFuaW1hdGlvbkR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGJsb2NrS2V5ZnJhbWVBbmltYXRpb25zKG5vZGUsIGFuaW1hdGlvblBhdXNlZCk7XG4gICAgICAgICAgICAgIGFuaW1hdGlvblBhdXNlZFxuICAgICAgICAgICAgICAgICAgPyB0ZW1wb3JhcnlTdHlsZXMucHVzaCh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgIDogcmVtb3ZlRnJvbUFycmF5KHRlbXBvcmFyeVN0eWxlcywgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoYW5pbWF0aW9uUGF1c2VkICYmIHBsYXlBbmltYXRpb24pIHtcbiAgICAgICAgICAgIGFuaW1hdGlvblBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gY2hlY2tpbmcgdGhlIHN0YWdnZXIgZHVyYXRpb24gcHJldmVudHMgYW4gYWNjaWRlbnRseSBjYXNjYWRlIG9mIHRoZSBDU1MgZGVsYXkgc3R5bGVcbiAgICAgICAgLy8gYmVpbmcgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudC4gSWYgdGhlIHRyYW5zaXRpb24gZHVyYXRpb24gaXMgemVybyB0aGVuIHdlIGNhbiBzYWZlbHlcbiAgICAgICAgLy8gcmVseSB0aGF0IHRoZSBkZWxheSB2YWx1ZSBpcyBhbiBpbnRlbnRpYWwgc3RhZ2dlciBkZWxheSBzdHlsZS5cbiAgICAgICAgdmFyIG1heFN0YWdnZXIgPSBpdGVtSW5kZXggPiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgJiYgKCh0aW1pbmdzLnRyYW5zaXRpb25EdXJhdGlvbiAmJiBzdGFnZ2VyLnRyYW5zaXRpb25EdXJhdGlvbiA9PT0gMCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGltaW5ncy5hbmltYXRpb25EdXJhdGlvbiAmJiBzdGFnZ2VyLmFuaW1hdGlvbkR1cmF0aW9uID09PSAwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAmJiBNYXRoLm1heChzdGFnZ2VyLmFuaW1hdGlvbkRlbGF5LCBzdGFnZ2VyLnRyYW5zaXRpb25EZWxheSk7XG4gICAgICAgIGlmIChtYXhTdGFnZ2VyKSB7XG4gICAgICAgICAgJHRpbWVvdXQodHJpZ2dlckFuaW1hdGlvblN0YXJ0LFxuICAgICAgICAgICAgICAgICAgIE1hdGguZmxvb3IobWF4U3RhZ2dlciAqIGl0ZW1JbmRleCAqIE9ORV9TRUNPTkQpLFxuICAgICAgICAgICAgICAgICAgIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cmlnZ2VyQW5pbWF0aW9uU3RhcnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoaXMgd2lsbCBkZWNvcmF0ZSB0aGUgZXhpc3RpbmcgcHJvbWlzZSBydW5uZXIgd2l0aCBwYXVzZS9yZXN1bWUgbWV0aG9kc1xuICAgICAgICBydW5uZXJIb3N0LnJlc3VtZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHBsYXlQYXVzZSh0cnVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBydW5uZXJIb3N0LnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcGxheVBhdXNlKGZhbHNlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiB0cmlnZ2VyQW5pbWF0aW9uU3RhcnQoKSB7XG4gICAgICAgICAgLy8ganVzdCBpbmNhc2UgYSBzdGFnZ2VyIGFuaW1hdGlvbiBraWNrcyBpbiB3aGVuIHRoZSBhbmltYXRpb25cbiAgICAgICAgICAvLyBpdHNlbGYgd2FzIGNhbmNlbGxlZCBlbnRpcmVseVxuICAgICAgICAgIGlmIChhbmltYXRpb25DbG9zZWQpIHJldHVybjtcblxuICAgICAgICAgIGFwcGx5QmxvY2tpbmcoZmFsc2UpO1xuXG4gICAgICAgICAgZm9yRWFjaCh0ZW1wb3JhcnlTdHlsZXMsIGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gZW50cnlbMF07XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBlbnRyeVsxXTtcbiAgICAgICAgICAgIG5vZGUuc3R5bGVba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgYXBwbHlBbmltYXRpb25DbGFzc2VzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICAgICQkanFMaXRlLmFkZENsYXNzKGVsZW1lbnQsIGFjdGl2ZUNsYXNzZXMpO1xuXG4gICAgICAgICAgaWYgKGZsYWdzLnJlY2FsY3VsYXRlVGltaW5nU3R5bGVzKSB7XG4gICAgICAgICAgICBmdWxsQ2xhc3NOYW1lID0gbm9kZS5jbGFzc05hbWUgKyAnICcgKyBzZXR1cENsYXNzZXM7XG4gICAgICAgICAgICBjYWNoZUtleSA9IGdjc0hhc2hGbihub2RlLCBmdWxsQ2xhc3NOYW1lKTtcblxuICAgICAgICAgICAgdGltaW5ncyA9IGNvbXB1dGVUaW1pbmdzKG5vZGUsIGZ1bGxDbGFzc05hbWUsIGNhY2hlS2V5KTtcbiAgICAgICAgICAgIHJlbGF0aXZlRGVsYXkgPSB0aW1pbmdzLm1heERlbGF5O1xuICAgICAgICAgICAgbWF4RGVsYXkgPSBNYXRoLm1heChyZWxhdGl2ZURlbGF5LCAwKTtcbiAgICAgICAgICAgIG1heER1cmF0aW9uID0gdGltaW5ncy5tYXhEdXJhdGlvbjtcblxuICAgICAgICAgICAgaWYgKG1heER1cmF0aW9uID09PSAwKSB7XG4gICAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmxhZ3MuaGFzVHJhbnNpdGlvbnMgPSB0aW1pbmdzLnRyYW5zaXRpb25EdXJhdGlvbiA+IDA7XG4gICAgICAgICAgICBmbGFncy5oYXNBbmltYXRpb25zID0gdGltaW5ncy5hbmltYXRpb25EdXJhdGlvbiA+IDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGZsYWdzLmFwcGx5VHJhbnNpdGlvbkRlbGF5IHx8IGZsYWdzLmFwcGx5QW5pbWF0aW9uRGVsYXkpIHtcbiAgICAgICAgICAgIHJlbGF0aXZlRGVsYXkgPSB0eXBlb2Ygb3B0aW9ucy5kZWxheSAhPT0gXCJib29sZWFuXCIgJiYgdHJ1dGh5VGltaW5nVmFsdWUob3B0aW9ucy5kZWxheSlcbiAgICAgICAgICAgICAgICAgID8gcGFyc2VGbG9hdChvcHRpb25zLmRlbGF5KVxuICAgICAgICAgICAgICAgICAgOiByZWxhdGl2ZURlbGF5O1xuXG4gICAgICAgICAgICBtYXhEZWxheSA9IE1hdGgubWF4KHJlbGF0aXZlRGVsYXksIDApO1xuXG4gICAgICAgICAgICB2YXIgZGVsYXlTdHlsZTtcbiAgICAgICAgICAgIGlmIChmbGFncy5hcHBseVRyYW5zaXRpb25EZWxheSkge1xuICAgICAgICAgICAgICB0aW1pbmdzLnRyYW5zaXRpb25EZWxheSA9IHJlbGF0aXZlRGVsYXk7XG4gICAgICAgICAgICAgIGRlbGF5U3R5bGUgPSBnZXRDc3NEZWxheVN0eWxlKHJlbGF0aXZlRGVsYXkpO1xuICAgICAgICAgICAgICB0ZW1wb3JhcnlTdHlsZXMucHVzaChkZWxheVN0eWxlKTtcbiAgICAgICAgICAgICAgbm9kZS5zdHlsZVtkZWxheVN0eWxlWzBdXSA9IGRlbGF5U3R5bGVbMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmbGFncy5hcHBseUFuaW1hdGlvbkRlbGF5KSB7XG4gICAgICAgICAgICAgIHRpbWluZ3MuYW5pbWF0aW9uRGVsYXkgPSByZWxhdGl2ZURlbGF5O1xuICAgICAgICAgICAgICBkZWxheVN0eWxlID0gZ2V0Q3NzRGVsYXlTdHlsZShyZWxhdGl2ZURlbGF5LCB0cnVlKTtcbiAgICAgICAgICAgICAgdGVtcG9yYXJ5U3R5bGVzLnB1c2goZGVsYXlTdHlsZSk7XG4gICAgICAgICAgICAgIG5vZGUuc3R5bGVbZGVsYXlTdHlsZVswXV0gPSBkZWxheVN0eWxlWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG1heERlbGF5VGltZSA9IG1heERlbGF5ICogT05FX1NFQ09ORDtcbiAgICAgICAgICBtYXhEdXJhdGlvblRpbWUgPSBtYXhEdXJhdGlvbiAqIE9ORV9TRUNPTkQ7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5lYXNpbmcpIHtcbiAgICAgICAgICAgIHZhciBlYXNlUHJvcCwgZWFzZVZhbCA9IG9wdGlvbnMuZWFzaW5nO1xuICAgICAgICAgICAgaWYgKGZsYWdzLmhhc1RyYW5zaXRpb25zKSB7XG4gICAgICAgICAgICAgIGVhc2VQcm9wID0gVFJBTlNJVElPTl9QUk9QICsgVElNSU5HX0tFWTtcbiAgICAgICAgICAgICAgdGVtcG9yYXJ5U3R5bGVzLnB1c2goW2Vhc2VQcm9wLCBlYXNlVmFsXSk7XG4gICAgICAgICAgICAgIG5vZGUuc3R5bGVbZWFzZVByb3BdID0gZWFzZVZhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmbGFncy5oYXNBbmltYXRpb25zKSB7XG4gICAgICAgICAgICAgIGVhc2VQcm9wID0gQU5JTUFUSU9OX1BST1AgKyBUSU1JTkdfS0VZO1xuICAgICAgICAgICAgICB0ZW1wb3JhcnlTdHlsZXMucHVzaChbZWFzZVByb3AsIGVhc2VWYWxdKTtcbiAgICAgICAgICAgICAgbm9kZS5zdHlsZVtlYXNlUHJvcF0gPSBlYXNlVmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aW1pbmdzLnRyYW5zaXRpb25EdXJhdGlvbikge1xuICAgICAgICAgICAgZXZlbnRzLnB1c2goVFJBTlNJVElPTkVORF9FVkVOVCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRpbWluZ3MuYW5pbWF0aW9uRHVyYXRpb24pIHtcbiAgICAgICAgICAgIGV2ZW50cy5wdXNoKEFOSU1BVElPTkVORF9FVkVOVCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICBlbGVtZW50Lm9uKGV2ZW50cy5qb2luKCcgJyksIG9uQW5pbWF0aW9uUHJvZ3Jlc3MpO1xuICAgICAgICAgICR0aW1lb3V0KG9uQW5pbWF0aW9uRXhwaXJlZCwgbWF4RGVsYXlUaW1lICsgQ0xPU0lOR19USU1FX0JVRkZFUiAqIG1heER1cmF0aW9uVGltZSk7XG5cbiAgICAgICAgICBhcHBseUFuaW1hdGlvblRvU3R5bGVzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb25BbmltYXRpb25FeHBpcmVkKCkge1xuICAgICAgICAgIC8vIGFsdGhvdWdoIGFuIGV4cGlyZWQgYW5pbWF0aW9uIGlzIGEgZmFpbGVkIGFuaW1hdGlvbiwgZ2V0dGluZyB0b1xuICAgICAgICAgIC8vIHRoaXMgb3V0Y29tZSBpcyB2ZXJ5IGVhc3kgaWYgdGhlIENTUyBjb2RlIHNjcmV3cyB1cC4gVGhlcmVmb3JlIHdlXG4gICAgICAgICAgLy8gc2hvdWxkIHN0aWxsIGNvbnRpbnVlIG5vcm1hbGx5IGFzIGlmIHRoZSBhbmltYXRpb24gY29tcGxldGVkIGNvcnJlY3RseS5cbiAgICAgICAgICBjbG9zZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb25BbmltYXRpb25Qcm9ncmVzcyhldmVudCkge1xuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIHZhciBldiA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgfHwgZXZlbnQ7XG4gICAgICAgICAgdmFyIHRpbWVTdGFtcCA9IGV2LiRtYW51YWxUaW1lU3RhbXAgfHwgZXYudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG5cbiAgICAgICAgICAvKiBGaXJlZm94IChvciBwb3NzaWJseSBqdXN0IEdlY2tvKSBsaWtlcyB0byBub3Qgcm91bmQgdmFsdWVzIHVwXG4gICAgICAgICAgICogd2hlbiBhIG1zIG1lYXN1cmVtZW50IGlzIHVzZWQgZm9yIHRoZSBhbmltYXRpb24gKi9cbiAgICAgICAgICB2YXIgZWxhcHNlZFRpbWUgPSBwYXJzZUZsb2F0KGV2LmVsYXBzZWRUaW1lLnRvRml4ZWQoRUxBUFNFRF9USU1FX01BWF9ERUNJTUFMX1BMQUNFUykpO1xuXG4gICAgICAgICAgLyogJG1hbnVhbFRpbWVTdGFtcCBpcyBhIG1vY2tlZCB0aW1lU3RhbXAgdmFsdWUgd2hpY2ggaXMgc2V0XG4gICAgICAgICAgICogd2l0aGluIGJyb3dzZXJUcmlnZ2VyKCkuIFRoaXMgaXMgb25seSBoZXJlIHNvIHRoYXQgdGVzdHMgY2FuXG4gICAgICAgICAgICogbW9jayBhbmltYXRpb25zIHByb3Blcmx5LiBSZWFsIGV2ZW50cyBmYWxsYmFjayB0byBldmVudC50aW1lU3RhbXAsXG4gICAgICAgICAgICogb3IsIGlmIHRoZXkgZG9uJ3QsIHRoZW4gYSB0aW1lU3RhbXAgaXMgYXV0b21hdGljYWxseSBjcmVhdGVkIGZvciB0aGVtLlxuICAgICAgICAgICAqIFdlJ3JlIGNoZWNraW5nIHRvIHNlZSBpZiB0aGUgdGltZVN0YW1wIHN1cnBhc3NlcyB0aGUgZXhwZWN0ZWQgZGVsYXksXG4gICAgICAgICAgICogYnV0IHdlJ3JlIHVzaW5nIGVsYXBzZWRUaW1lIGluc3RlYWQgb2YgdGhlIHRpbWVTdGFtcCBvbiB0aGUgMm5kXG4gICAgICAgICAgICogcHJlLWNvbmRpdGlvbiBzaW5jZSBhbmltYXRpb25zIHNvbWV0aW1lcyBjbG9zZSBvZmYgZWFybHkgKi9cbiAgICAgICAgICBpZiAoTWF0aC5tYXgodGltZVN0YW1wIC0gc3RhcnRUaW1lLCAwKSA+PSBtYXhEZWxheVRpbWUgJiYgZWxhcHNlZFRpbWUgPj0gbWF4RHVyYXRpb24pIHtcbiAgICAgICAgICAgIC8vIHdlIHNldCB0aGlzIGZsYWcgdG8gZW5zdXJlIHRoYXQgaWYgdGhlIHRyYW5zaXRpb24gaXMgcGF1c2VkIHRoZW4sIHdoZW4gcmVzdW1lZCxcbiAgICAgICAgICAgIC8vIHRoZSBhbmltYXRpb24gd2lsbCBhdXRvbWF0aWNhbGx5IGNsb3NlIGl0c2VsZiBzaW5jZSB0cmFuc2l0aW9ucyBjYW5ub3QgYmUgcGF1c2VkLlxuICAgICAgICAgICAgYW5pbWF0aW9uQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XTtcbn1dO1xuXG52YXIgJCRBbmltYXRlQ3NzRHJpdmVyUHJvdmlkZXIgPSBbJyQkYW5pbWF0aW9uUHJvdmlkZXInLCBmdW5jdGlvbigkJGFuaW1hdGlvblByb3ZpZGVyKSB7XG4gICQkYW5pbWF0aW9uUHJvdmlkZXIuZHJpdmVycy5wdXNoKCckJGFuaW1hdGVDc3NEcml2ZXInKTtcblxuICB2YXIgTkdfQU5JTUFURV9TSElNX0NMQVNTX05BTUUgPSAnbmctYW5pbWF0ZS1zaGltJztcbiAgdmFyIE5HX0FOSU1BVEVfQU5DSE9SX0NMQVNTX05BTUUgPSAnbmctYW5jaG9yJztcblxuICB2YXIgTkdfT1VUX0FOQ0hPUl9DTEFTU19OQU1FID0gJ25nLWFuY2hvci1vdXQnO1xuICB2YXIgTkdfSU5fQU5DSE9SX0NMQVNTX05BTUUgPSAnbmctYW5jaG9yLWluJztcblxuICB0aGlzLiRnZXQgPSBbJyRhbmltYXRlQ3NzJywgJyRyb290U2NvcGUnLCAnJCRBbmltYXRlUnVubmVyJywgJyRyb290RWxlbWVudCcsICckZG9jdW1lbnQnLCAnJHNuaWZmZXInLFxuICAgICAgIGZ1bmN0aW9uKCRhbmltYXRlQ3NzLCAgICRyb290U2NvcGUsICAgJCRBbmltYXRlUnVubmVyLCAgICRyb290RWxlbWVudCwgICAkZG9jdW1lbnQsICAgJHNuaWZmZXIpIHtcblxuICAgIC8vIG9ubHkgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IHRoZXNlIHByb3BlcnRpZXMgY2FuIHJlbmRlciBhbmltYXRpb25zXG4gICAgaWYgKCEkc25pZmZlci5hbmltYXRpb25zICYmICEkc25pZmZlci50cmFuc2l0aW9ucykgcmV0dXJuIG5vb3A7XG5cbiAgICB2YXIgYm9keU5vZGUgPSBnZXREb21Ob2RlKCRkb2N1bWVudCkuYm9keTtcbiAgICB2YXIgcm9vdE5vZGUgPSBnZXREb21Ob2RlKCRyb290RWxlbWVudCk7XG5cbiAgICB2YXIgcm9vdEJvZHlFbGVtZW50ID0ganFMaXRlKGJvZHlOb2RlLnBhcmVudE5vZGUgPT09IHJvb3ROb2RlID8gYm9keU5vZGUgOiByb290Tm9kZSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW5pdERyaXZlckZuKGFuaW1hdGlvbkRldGFpbHMpIHtcbiAgICAgIHJldHVybiBhbmltYXRpb25EZXRhaWxzLmZyb20gJiYgYW5pbWF0aW9uRGV0YWlscy50b1xuICAgICAgICAgID8gcHJlcGFyZUZyb21Ub0FuY2hvckFuaW1hdGlvbihhbmltYXRpb25EZXRhaWxzLmZyb20sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkRldGFpbHMudG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkRldGFpbHMuY2xhc3NlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uRGV0YWlscy5hbmNob3JzKVxuICAgICAgICAgIDogcHJlcGFyZVJlZ3VsYXJBbmltYXRpb24oYW5pbWF0aW9uRGV0YWlscyk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGZpbHRlckNzc0NsYXNzZXMoY2xhc3Nlcykge1xuICAgICAgLy9yZW1vdmUgYWxsIHRoZSBgbmctYCBzdHVmZlxuICAgICAgcmV0dXJuIGNsYXNzZXMucmVwbGFjZSgvXFxibmctXFxTK1xcYi9nLCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VW5pcXVlVmFsdWVzKGEsIGIpIHtcbiAgICAgIGlmIChpc1N0cmluZyhhKSkgYSA9IGEuc3BsaXQoJyAnKTtcbiAgICAgIGlmIChpc1N0cmluZyhiKSkgYiA9IGIuc3BsaXQoJyAnKTtcbiAgICAgIHJldHVybiBhLmZpbHRlcihmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgcmV0dXJuIGIuaW5kZXhPZih2YWwpID09PSAtMTtcbiAgICAgIH0pLmpvaW4oJyAnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlQW5jaG9yZWRBbmltYXRpb24oY2xhc3Nlcywgb3V0QW5jaG9yLCBpbkFuY2hvcikge1xuICAgICAgdmFyIGNsb25lID0ganFMaXRlKGdldERvbU5vZGUob3V0QW5jaG9yKS5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgICAgdmFyIHN0YXJ0aW5nQ2xhc3NlcyA9IGZpbHRlckNzc0NsYXNzZXMoZ2V0Q2xhc3NWYWwoY2xvbmUpKTtcblxuICAgICAgb3V0QW5jaG9yLmFkZENsYXNzKE5HX0FOSU1BVEVfU0hJTV9DTEFTU19OQU1FKTtcbiAgICAgIGluQW5jaG9yLmFkZENsYXNzKE5HX0FOSU1BVEVfU0hJTV9DTEFTU19OQU1FKTtcblxuICAgICAgY2xvbmUuYWRkQ2xhc3MoTkdfQU5JTUFURV9BTkNIT1JfQ0xBU1NfTkFNRSk7XG5cbiAgICAgIHJvb3RCb2R5RWxlbWVudC5hcHBlbmQoY2xvbmUpO1xuXG4gICAgICB2YXIgYW5pbWF0b3JJbiwgYW5pbWF0b3JPdXQgPSBwcmVwYXJlT3V0QW5pbWF0aW9uKCk7XG5cbiAgICAgIC8vIHRoZSB1c2VyIG1heSBub3QgZW5kIHVwIHVzaW5nIHRoZSBgb3V0YCBhbmltYXRpb24gYW5kXG4gICAgICAvLyBvbmx5IG1ha2luZyB1c2Ugb2YgdGhlIGBpbmAgYW5pbWF0aW9uIG9yIHZpY2UtdmVyc2EuXG4gICAgICAvLyBJbiBlaXRoZXIgY2FzZSB3ZSBzaG91bGQgYWxsb3cgdGhpcyBhbmQgbm90IGFzc3VtZSB0aGVcbiAgICAgIC8vIGFuaW1hdGlvbiBpcyBvdmVyIHVubGVzcyBib3RoIGFuaW1hdGlvbnMgYXJlIG5vdCB1c2VkLlxuICAgICAgaWYgKCFhbmltYXRvck91dCkge1xuICAgICAgICBhbmltYXRvckluID0gcHJlcGFyZUluQW5pbWF0aW9uKCk7XG4gICAgICAgIGlmICghYW5pbWF0b3JJbikge1xuICAgICAgICAgIHJldHVybiBlbmQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnRpbmdBbmltYXRvciA9IGFuaW1hdG9yT3V0IHx8IGFuaW1hdG9ySW47XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgcnVubmVyO1xuXG4gICAgICAgICAgdmFyIGN1cnJlbnRBbmltYXRpb24gPSBzdGFydGluZ0FuaW1hdG9yLnN0YXJ0KCk7XG4gICAgICAgICAgY3VycmVudEFuaW1hdGlvbi5kb25lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY3VycmVudEFuaW1hdGlvbiA9IG51bGw7XG4gICAgICAgICAgICBpZiAoIWFuaW1hdG9ySW4pIHtcbiAgICAgICAgICAgICAgYW5pbWF0b3JJbiA9IHByZXBhcmVJbkFuaW1hdGlvbigpO1xuICAgICAgICAgICAgICBpZiAoYW5pbWF0b3JJbikge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRBbmltYXRpb24gPSBhbmltYXRvckluLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgY3VycmVudEFuaW1hdGlvbi5kb25lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgY3VycmVudEFuaW1hdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICBlbmQoKTtcbiAgICAgICAgICAgICAgICAgIHJ1bm5lci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50QW5pbWF0aW9uO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpbiB0aGUgZXZlbnQgdGhhdCB0aGVyZSBpcyBubyBgaW5gIGFuaW1hdGlvblxuICAgICAgICAgICAgZW5kKCk7XG4gICAgICAgICAgICBydW5uZXIuY29tcGxldGUoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJ1bm5lciA9IG5ldyAkJEFuaW1hdGVSdW5uZXIoe1xuICAgICAgICAgICAgZW5kOiBlbmRGbixcbiAgICAgICAgICAgIGNhbmNlbDogZW5kRm5cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBydW5uZXI7XG5cbiAgICAgICAgICBmdW5jdGlvbiBlbmRGbigpIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50QW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRBbmltYXRpb24uZW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBjYWxjdWxhdGVBbmNob3JTdHlsZXMoYW5jaG9yKSB7XG4gICAgICAgIHZhciBzdHlsZXMgPSB7fTtcblxuICAgICAgICB2YXIgY29vcmRzID0gZ2V0RG9tTm9kZShhbmNob3IpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIC8vIHdlIGl0ZXJhdGUgZGlyZWN0bHkgc2luY2Ugc2FmYXJpIG1lc3NlcyB1cCBhbmQgZG9lc24ndCByZXR1cm5cbiAgICAgICAgLy8gYWxsIHRoZSBrZXlzIGZvciB0aGUgY29vZHMgb2JqZWN0IHdoZW4gaXRlcmF0ZWRcbiAgICAgICAgZm9yRWFjaChbJ3dpZHRoJywnaGVpZ2h0JywndG9wJywnbGVmdCddLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBjb29yZHNba2V5XTtcbiAgICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICAgICAgdmFsdWUgKz0gYm9keU5vZGUuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICB2YWx1ZSArPSBib2R5Tm9kZS5zY3JvbGxMZWZ0O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgc3R5bGVzW2tleV0gPSBNYXRoLmZsb29yKHZhbHVlKSArICdweCc7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3R5bGVzO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwcmVwYXJlT3V0QW5pbWF0aW9uKCkge1xuICAgICAgICB2YXIgYW5pbWF0b3IgPSAkYW5pbWF0ZUNzcyhjbG9uZSwge1xuICAgICAgICAgIGFkZENsYXNzOiBOR19PVVRfQU5DSE9SX0NMQVNTX05BTUUsXG4gICAgICAgICAgZGVsYXk6IHRydWUsXG4gICAgICAgICAgZnJvbTogY2FsY3VsYXRlQW5jaG9yU3R5bGVzKG91dEFuY2hvcilcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmVhZCB0aGUgY29tbWVudCB3aXRoaW4gYHByZXBhcmVSZWd1bGFyQW5pbWF0aW9uYCB0byB1bmRlcnN0YW5kXG4gICAgICAgIC8vIHdoeSB0aGlzIGNoZWNrIGlzIG5lY2Vzc2FyeVxuICAgICAgICByZXR1cm4gYW5pbWF0b3IuJCR3aWxsQW5pbWF0ZSA/IGFuaW1hdG9yIDogbnVsbDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0Q2xhc3NWYWwoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5hdHRyKCdjbGFzcycpIHx8ICcnO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwcmVwYXJlSW5BbmltYXRpb24oKSB7XG4gICAgICAgIHZhciBlbmRpbmdDbGFzc2VzID0gZmlsdGVyQ3NzQ2xhc3NlcyhnZXRDbGFzc1ZhbChpbkFuY2hvcikpO1xuICAgICAgICB2YXIgdG9BZGQgPSBnZXRVbmlxdWVWYWx1ZXMoZW5kaW5nQ2xhc3Nlcywgc3RhcnRpbmdDbGFzc2VzKTtcbiAgICAgICAgdmFyIHRvUmVtb3ZlID0gZ2V0VW5pcXVlVmFsdWVzKHN0YXJ0aW5nQ2xhc3NlcywgZW5kaW5nQ2xhc3Nlcyk7XG5cbiAgICAgICAgdmFyIGFuaW1hdG9yID0gJGFuaW1hdGVDc3MoY2xvbmUsIHtcbiAgICAgICAgICB0bzogY2FsY3VsYXRlQW5jaG9yU3R5bGVzKGluQW5jaG9yKSxcbiAgICAgICAgICBhZGRDbGFzczogTkdfSU5fQU5DSE9SX0NMQVNTX05BTUUgKyAnICcgKyB0b0FkZCxcbiAgICAgICAgICByZW1vdmVDbGFzczogTkdfT1VUX0FOQ0hPUl9DTEFTU19OQU1FICsgJyAnICsgdG9SZW1vdmUsXG4gICAgICAgICAgZGVsYXk6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmVhZCB0aGUgY29tbWVudCB3aXRoaW4gYHByZXBhcmVSZWd1bGFyQW5pbWF0aW9uYCB0byB1bmRlcnN0YW5kXG4gICAgICAgIC8vIHdoeSB0aGlzIGNoZWNrIGlzIG5lY2Vzc2FyeVxuICAgICAgICByZXR1cm4gYW5pbWF0b3IuJCR3aWxsQW5pbWF0ZSA/IGFuaW1hdG9yIDogbnVsbDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZW5kKCkge1xuICAgICAgICBjbG9uZS5yZW1vdmUoKTtcbiAgICAgICAgb3V0QW5jaG9yLnJlbW92ZUNsYXNzKE5HX0FOSU1BVEVfU0hJTV9DTEFTU19OQU1FKTtcbiAgICAgICAgaW5BbmNob3IucmVtb3ZlQ2xhc3MoTkdfQU5JTUFURV9TSElNX0NMQVNTX05BTUUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXBhcmVGcm9tVG9BbmNob3JBbmltYXRpb24oZnJvbSwgdG8sIGNsYXNzZXMsIGFuY2hvcnMpIHtcbiAgICAgIHZhciBmcm9tQW5pbWF0aW9uID0gcHJlcGFyZVJlZ3VsYXJBbmltYXRpb24oZnJvbSk7XG4gICAgICB2YXIgdG9BbmltYXRpb24gPSBwcmVwYXJlUmVndWxhckFuaW1hdGlvbih0byk7XG5cbiAgICAgIHZhciBhbmNob3JBbmltYXRpb25zID0gW107XG4gICAgICBmb3JFYWNoKGFuY2hvcnMsIGZ1bmN0aW9uKGFuY2hvcikge1xuICAgICAgICB2YXIgb3V0RWxlbWVudCA9IGFuY2hvclsnb3V0J107XG4gICAgICAgIHZhciBpbkVsZW1lbnQgPSBhbmNob3JbJ2luJ107XG4gICAgICAgIHZhciBhbmltYXRvciA9IHByZXBhcmVBbmNob3JlZEFuaW1hdGlvbihjbGFzc2VzLCBvdXRFbGVtZW50LCBpbkVsZW1lbnQpO1xuICAgICAgICBpZiAoYW5pbWF0b3IpIHtcbiAgICAgICAgICBhbmNob3JBbmltYXRpb25zLnB1c2goYW5pbWF0b3IpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gbm8gcG9pbnQgaW4gZG9pbmcgYW55dGhpbmcgd2hlbiB0aGVyZSBhcmUgbm8gZWxlbWVudHMgdG8gYW5pbWF0ZVxuICAgICAgaWYgKCFmcm9tQW5pbWF0aW9uICYmICF0b0FuaW1hdGlvbiAmJiBhbmNob3JBbmltYXRpb25zLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFuaW1hdGlvblJ1bm5lcnMgPSBbXTtcblxuICAgICAgICAgIGlmIChmcm9tQW5pbWF0aW9uKSB7XG4gICAgICAgICAgICBhbmltYXRpb25SdW5uZXJzLnB1c2goZnJvbUFuaW1hdGlvbi5zdGFydCgpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodG9BbmltYXRpb24pIHtcbiAgICAgICAgICAgIGFuaW1hdGlvblJ1bm5lcnMucHVzaCh0b0FuaW1hdGlvbi5zdGFydCgpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3JFYWNoKGFuY2hvckFuaW1hdGlvbnMsIGZ1bmN0aW9uKGFuaW1hdGlvbikge1xuICAgICAgICAgICAgYW5pbWF0aW9uUnVubmVycy5wdXNoKGFuaW1hdGlvbi5zdGFydCgpKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHZhciBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKHtcbiAgICAgICAgICAgIGVuZDogZW5kRm4sXG4gICAgICAgICAgICBjYW5jZWw6IGVuZEZuIC8vIENTUy1kcml2ZW4gYW5pbWF0aW9ucyBjYW5ub3QgYmUgY2FuY2VsbGVkLCBvbmx5IGVuZGVkXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAkJEFuaW1hdGVSdW5uZXIuYWxsKGFuaW1hdGlvblJ1bm5lcnMsIGZ1bmN0aW9uKHN0YXR1cykge1xuICAgICAgICAgICAgcnVubmVyLmNvbXBsZXRlKHN0YXR1cyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gcnVubmVyO1xuXG4gICAgICAgICAgZnVuY3Rpb24gZW5kRm4oKSB7XG4gICAgICAgICAgICBmb3JFYWNoKGFuaW1hdGlvblJ1bm5lcnMsIGZ1bmN0aW9uKHJ1bm5lcikge1xuICAgICAgICAgICAgICBydW5uZXIuZW5kKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcGFyZVJlZ3VsYXJBbmltYXRpb24oYW5pbWF0aW9uRGV0YWlscykge1xuICAgICAgdmFyIGVsZW1lbnQgPSBhbmltYXRpb25EZXRhaWxzLmVsZW1lbnQ7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFuaW1hdGlvbkRldGFpbHMub3B0aW9ucyB8fCB7fTtcblxuICAgICAgaWYgKGFuaW1hdGlvbkRldGFpbHMuc3RydWN0dXJhbCkge1xuICAgICAgICAvLyBzdHJ1Y3R1cmFsIGFuaW1hdGlvbnMgZW5zdXJlIHRoYXQgdGhlIENTUyBjbGFzc2VzIGFyZSBhbHdheXMgYXBwbGllZFxuICAgICAgICAvLyBiZWZvcmUgdGhlIGRldGVjdGlvbiBzdGFydHMuXG4gICAgICAgIG9wdGlvbnMuc3RydWN0dXJhbCA9IG9wdGlvbnMuYXBwbHlDbGFzc2VzRWFybHkgPSB0cnVlO1xuXG4gICAgICAgIC8vIHdlIHNwZWNpYWwgY2FzZSB0aGUgbGVhdmUgYW5pbWF0aW9uIHNpbmNlIHdlIHdhbnQgdG8gZW5zdXJlIHRoYXRcbiAgICAgICAgLy8gdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBhcyBzb29uIGFzIHRoZSBhbmltYXRpb24gaXMgb3Zlci4gT3RoZXJ3aXNlXG4gICAgICAgIC8vIGEgZmxpY2tlciBtaWdodCBhcHBlYXIgb3IgdGhlIGVsZW1lbnQgbWF5IG5vdCBiZSByZW1vdmVkIGF0IGFsbFxuICAgICAgICBvcHRpb25zLmV2ZW50ID0gYW5pbWF0aW9uRGV0YWlscy5ldmVudDtcbiAgICAgICAgaWYgKG9wdGlvbnMuZXZlbnQgPT09ICdsZWF2ZScpIHtcbiAgICAgICAgICBvcHRpb25zLm9uRG9uZSA9IG9wdGlvbnMuZG9tT3BlcmF0aW9uO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25zLmV2ZW50ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGFuaW1hdG9yID0gJGFuaW1hdGVDc3MoZWxlbWVudCwgb3B0aW9ucyk7XG5cbiAgICAgIC8vIHRoZSBkcml2ZXIgbG9va3VwIGNvZGUgaW5zaWRlIG9mICQkYW5pbWF0aW9uIGF0dGVtcHRzIHRvIHNwYXduIGFcbiAgICAgIC8vIGRyaXZlciBvbmUgYnkgb25lIHVudGlsIGEgZHJpdmVyIHJldHVybnMgYS4kJHdpbGxBbmltYXRlIGFuaW1hdG9yIG9iamVjdC5cbiAgICAgIC8vICRhbmltYXRlQ3NzIHdpbGwgYWx3YXlzIHJldHVybiBhbiBvYmplY3QsIGhvd2V2ZXIsIGl0IHdpbGwgcGFzcyBpblxuICAgICAgLy8gYSBmbGFnIGFzIGEgaGludCBhcyB0byB3aGV0aGVyIGFuIGFuaW1hdGlvbiB3YXMgZGV0ZWN0ZWQgb3Igbm90XG4gICAgICByZXR1cm4gYW5pbWF0b3IuJCR3aWxsQW5pbWF0ZSA/IGFuaW1hdG9yIDogbnVsbDtcbiAgICB9XG4gIH1dO1xufV07XG5cbi8vIFRPRE8obWF0c2tvKTogdXNlIGNhY2hpbmcgaGVyZSB0byBzcGVlZCB0aGluZ3MgdXAgZm9yIGRldGVjdGlvblxuLy8gVE9ETyhtYXRza28pOiBhZGQgZG9jdW1lbnRhdGlvblxuLy8gIGJ5IHRoZSB0aW1lLi4uXG5cbnZhciAkJEFuaW1hdGVKc1Byb3ZpZGVyID0gWyckYW5pbWF0ZVByb3ZpZGVyJywgZnVuY3Rpb24oJGFuaW1hdGVQcm92aWRlcikge1xuICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsICckJEFuaW1hdGVSdW5uZXInLCAnJCRyQUZNdXRleCcsICckJGpxTGl0ZScsXG4gICAgICAgZnVuY3Rpb24oJGluamVjdG9yLCAgICQkQW5pbWF0ZVJ1bm5lciwgICAkJHJBRk11dGV4LCAgICQkanFMaXRlKSB7XG5cbiAgICB2YXIgYXBwbHlBbmltYXRpb25DbGFzc2VzID0gYXBwbHlBbmltYXRpb25DbGFzc2VzRmFjdG9yeSgkJGpxTGl0ZSk7XG4gICAgICAgICAvLyAkYW5pbWF0ZUpzKGVsZW1lbnQsICdlbnRlcicpO1xuICAgIHJldHVybiBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgY2xhc3Nlcywgb3B0aW9ucykge1xuICAgICAgLy8gdGhlIGBjbGFzc2VzYCBhcmd1bWVudCBpcyBvcHRpb25hbCBhbmQgaWYgaXQgaXMgbm90IHVzZWRcbiAgICAgIC8vIHRoZW4gdGhlIGNsYXNzZXMgd2lsbCBiZSByZXNvbHZlZCBmcm9tIHRoZSBlbGVtZW50J3MgY2xhc3NOYW1lXG4gICAgICAvLyBwcm9wZXJ0eSBhcyB3ZWxsIGFzIG9wdGlvbnMuYWRkQ2xhc3Mvb3B0aW9ucy5yZW1vdmVDbGFzcy5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIGlzT2JqZWN0KGNsYXNzZXMpKSB7XG4gICAgICAgIG9wdGlvbnMgPSBjbGFzc2VzO1xuICAgICAgICBjbGFzc2VzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRpb25PcHRpb25zKG9wdGlvbnMpO1xuICAgICAgaWYgKCFjbGFzc2VzKSB7XG4gICAgICAgIGNsYXNzZXMgPSBlbGVtZW50LmF0dHIoJ2NsYXNzJykgfHwgJyc7XG4gICAgICAgIGlmIChvcHRpb25zLmFkZENsYXNzKSB7XG4gICAgICAgICAgY2xhc3NlcyArPSAnICcgKyBvcHRpb25zLmFkZENsYXNzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnJlbW92ZUNsYXNzKSB7XG4gICAgICAgICAgY2xhc3NlcyArPSAnICcgKyBvcHRpb25zLnJlbW92ZUNsYXNzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBjbGFzc2VzVG9BZGQgPSBvcHRpb25zLmFkZENsYXNzO1xuICAgICAgdmFyIGNsYXNzZXNUb1JlbW92ZSA9IG9wdGlvbnMucmVtb3ZlQ2xhc3M7XG5cbiAgICAgIC8vIHRoZSBsb29rdXBBbmltYXRpb25zIGZ1bmN0aW9uIHJldHVybnMgYSBzZXJpZXMgb2YgYW5pbWF0aW9uIG9iamVjdHMgdGhhdCBhcmVcbiAgICAgIC8vIG1hdGNoZWQgdXAgd2l0aCBvbmUgb3IgbW9yZSBvZiB0aGUgQ1NTIGNsYXNzZXMuIFRoZXNlIGFuaW1hdGlvbiBvYmplY3RzIGFyZVxuICAgICAgLy8gZGVmaW5lZCB2aWEgdGhlIG1vZHVsZS5hbmltYXRpb24gZmFjdG9yeSBmdW5jdGlvbi4gSWYgbm90aGluZyBpcyBkZXRlY3RlZCB0aGVuXG4gICAgICAvLyB3ZSBkb24ndCByZXR1cm4gYW55dGhpbmcgd2hpY2ggdGhlbiBtYWtlcyAkYW5pbWF0aW9uIHF1ZXJ5IHRoZSBuZXh0IGRyaXZlci5cbiAgICAgIHZhciBhbmltYXRpb25zID0gbG9va3VwQW5pbWF0aW9ucyhjbGFzc2VzKTtcbiAgICAgIHZhciBiZWZvcmUsIGFmdGVyO1xuICAgICAgaWYgKGFuaW1hdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBhZnRlckZuLCBiZWZvcmVGbjtcbiAgICAgICAgaWYgKGV2ZW50ID09ICdsZWF2ZScpIHtcbiAgICAgICAgICBiZWZvcmVGbiA9ICdsZWF2ZSc7XG4gICAgICAgICAgYWZ0ZXJGbiA9ICdhZnRlckxlYXZlJzsgLy8gVE9ETyhtYXRza28pOiBnZXQgcmlkIG9mIHRoaXNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBiZWZvcmVGbiA9ICdiZWZvcmUnICsgZXZlbnQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBldmVudC5zdWJzdHIoMSk7XG4gICAgICAgICAgYWZ0ZXJGbiA9IGV2ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50ICE9PSAnZW50ZXInICYmIGV2ZW50ICE9PSAnbW92ZScpIHtcbiAgICAgICAgICBiZWZvcmUgPSBwYWNrYWdlQW5pbWF0aW9ucyhlbGVtZW50LCBldmVudCwgb3B0aW9ucywgYW5pbWF0aW9ucywgYmVmb3JlRm4pO1xuICAgICAgICB9XG4gICAgICAgIGFmdGVyICA9IHBhY2thZ2VBbmltYXRpb25zKGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zLCBhbmltYXRpb25zLCBhZnRlckZuKTtcbiAgICAgIH1cblxuICAgICAgLy8gbm8gbWF0Y2hpbmcgYW5pbWF0aW9uc1xuICAgICAgaWYgKCFiZWZvcmUgJiYgIWFmdGVyKSByZXR1cm47XG5cbiAgICAgIGZ1bmN0aW9uIGFwcGx5T3B0aW9ucygpIHtcbiAgICAgICAgb3B0aW9ucy5kb21PcGVyYXRpb24oKTtcbiAgICAgICAgYXBwbHlBbmltYXRpb25DbGFzc2VzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGNsb3NlQWN0aXZlQW5pbWF0aW9ucztcbiAgICAgICAgICB2YXIgY2hhaW4gPSBbXTtcblxuICAgICAgICAgIGlmIChiZWZvcmUpIHtcbiAgICAgICAgICAgIGNoYWluLnB1c2goZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgICAgY2xvc2VBY3RpdmVBbmltYXRpb25zID0gYmVmb3JlKGZuKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjaGFpbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNoYWluLnB1c2goZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgICAgYXBwbHlPcHRpb25zKCk7XG4gICAgICAgICAgICAgIGZuKHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFwcGx5T3B0aW9ucygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhZnRlcikge1xuICAgICAgICAgICAgY2hhaW4ucHVzaChmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgICBjbG9zZUFjdGl2ZUFuaW1hdGlvbnMgPSBhZnRlcihmbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgYW5pbWF0aW9uQ2xvc2VkID0gZmFsc2U7XG4gICAgICAgICAgdmFyIHJ1bm5lciA9IG5ldyAkJEFuaW1hdGVSdW5uZXIoe1xuICAgICAgICAgICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZW5kQW5pbWF0aW9ucygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbmNlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGVuZEFuaW1hdGlvbnModHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAkJEFuaW1hdGVSdW5uZXIuY2hhaW4oY2hhaW4sIG9uQ29tcGxldGUpO1xuICAgICAgICAgIHJldHVybiBydW5uZXI7XG5cbiAgICAgICAgICBmdW5jdGlvbiBvbkNvbXBsZXRlKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbkNsb3NlZCA9IHRydWU7XG4gICAgICAgICAgICBhcHBseU9wdGlvbnMoKTtcbiAgICAgICAgICAgIGFwcGx5QW5pbWF0aW9uU3R5bGVzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcnVubmVyLmNvbXBsZXRlKHN1Y2Nlc3MpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIGVuZEFuaW1hdGlvbnMoY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICBpZiAoIWFuaW1hdGlvbkNsb3NlZCkge1xuICAgICAgICAgICAgICAoY2xvc2VBY3RpdmVBbmltYXRpb25zIHx8IG5vb3ApKGNhbmNlbGxlZCk7XG4gICAgICAgICAgICAgIG9uQ29tcGxldGUoY2FuY2VsbGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIGV4ZWN1dGVBbmltYXRpb25GbihmbiwgZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMsIG9uRG9uZSkge1xuICAgICAgICB2YXIgYXJncztcbiAgICAgICAgc3dpdGNoIChldmVudCkge1xuICAgICAgICAgIGNhc2UgJ2FuaW1hdGUnOlxuICAgICAgICAgICAgYXJncyA9IFtlbGVtZW50LCBvcHRpb25zLmZyb20sIG9wdGlvbnMudG8sIG9uRG9uZV07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3NldENsYXNzJzpcbiAgICAgICAgICAgIGFyZ3MgPSBbZWxlbWVudCwgY2xhc3Nlc1RvQWRkLCBjbGFzc2VzVG9SZW1vdmUsIG9uRG9uZV07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ2FkZENsYXNzJzpcbiAgICAgICAgICAgIGFyZ3MgPSBbZWxlbWVudCwgY2xhc3Nlc1RvQWRkLCBvbkRvbmVdO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdyZW1vdmVDbGFzcyc6XG4gICAgICAgICAgICBhcmdzID0gW2VsZW1lbnQsIGNsYXNzZXNUb1JlbW92ZSwgb25Eb25lXTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGFyZ3MgPSBbZWxlbWVudCwgb25Eb25lXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgYXJncy5wdXNoKG9wdGlvbnMpO1xuXG4gICAgICAgIHZhciB2YWx1ZSA9IGZuLmFwcGx5KGZuLCBhcmdzKTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUuc3RhcnQpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN0YXJ0KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgJCRBbmltYXRlUnVubmVyKSB7XG4gICAgICAgICAgICB2YWx1ZS5kb25lKG9uRG9uZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICAgICAgLy8gb3B0aW9uYWwgb25FbmQgLyBvbkNhbmNlbCBjYWxsYmFja1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub29wO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBncm91cEV2ZW50ZWRBbmltYXRpb25zKGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zLCBhbmltYXRpb25zLCBmbk5hbWUpIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yRWFjaChhbmltYXRpb25zLCBmdW5jdGlvbihhbmkpIHtcbiAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gYW5pW2ZuTmFtZV07XG4gICAgICAgICAgaWYgKCFhbmltYXRpb24pIHJldHVybjtcblxuICAgICAgICAgIC8vIG5vdGUgdGhhdCBhbGwgb2YgdGhlc2UgYW5pbWF0aW9ucyB3aWxsIHJ1biBpbiBwYXJhbGxlbFxuICAgICAgICAgIG9wZXJhdGlvbnMucHVzaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBydW5uZXI7XG4gICAgICAgICAgICB2YXIgZW5kUHJvZ3Jlc3NDYjtcblxuICAgICAgICAgICAgdmFyIHJlc29sdmVkID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgb25BbmltYXRpb25Db21wbGV0ZSA9IGZ1bmN0aW9uKHJlamVjdGVkKSB7XG4gICAgICAgICAgICAgIGlmICghcmVzb2x2ZWQpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgKGVuZFByb2dyZXNzQ2IgfHwgbm9vcCkocmVqZWN0ZWQpO1xuICAgICAgICAgICAgICAgIHJ1bm5lci5jb21wbGV0ZSghcmVqZWN0ZWQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKHtcbiAgICAgICAgICAgICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBvbkFuaW1hdGlvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGNhbmNlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgb25BbmltYXRpb25Db21wbGV0ZSh0cnVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGVuZFByb2dyZXNzQ2IgPSBleGVjdXRlQW5pbWF0aW9uRm4oYW5pbWF0aW9uLCBlbGVtZW50LCBldmVudCwgb3B0aW9ucywgZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgIHZhciBjYW5jZWxsZWQgPSByZXN1bHQgPT09IGZhbHNlO1xuICAgICAgICAgICAgICBvbkFuaW1hdGlvbkNvbXBsZXRlKGNhbmNlbGxlZCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG9wZXJhdGlvbnM7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBhY2thZ2VBbmltYXRpb25zKGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zLCBhbmltYXRpb25zLCBmbk5hbWUpIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvbnMgPSBncm91cEV2ZW50ZWRBbmltYXRpb25zKGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zLCBhbmltYXRpb25zLCBmbk5hbWUpO1xuICAgICAgICBpZiAob3BlcmF0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB2YXIgYSxiO1xuICAgICAgICAgIGlmIChmbk5hbWUgPT09ICdiZWZvcmVTZXRDbGFzcycpIHtcbiAgICAgICAgICAgIGEgPSBncm91cEV2ZW50ZWRBbmltYXRpb25zKGVsZW1lbnQsICdyZW1vdmVDbGFzcycsIG9wdGlvbnMsIGFuaW1hdGlvbnMsICdiZWZvcmVSZW1vdmVDbGFzcycpO1xuICAgICAgICAgICAgYiA9IGdyb3VwRXZlbnRlZEFuaW1hdGlvbnMoZWxlbWVudCwgJ2FkZENsYXNzJywgb3B0aW9ucywgYW5pbWF0aW9ucywgJ2JlZm9yZUFkZENsYXNzJyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChmbk5hbWUgPT09ICdzZXRDbGFzcycpIHtcbiAgICAgICAgICAgIGEgPSBncm91cEV2ZW50ZWRBbmltYXRpb25zKGVsZW1lbnQsICdyZW1vdmVDbGFzcycsIG9wdGlvbnMsIGFuaW1hdGlvbnMsICdyZW1vdmVDbGFzcycpO1xuICAgICAgICAgICAgYiA9IGdyb3VwRXZlbnRlZEFuaW1hdGlvbnMoZWxlbWVudCwgJ2FkZENsYXNzJywgb3B0aW9ucywgYW5pbWF0aW9ucywgJ2FkZENsYXNzJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGEpIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbnMgPSBvcGVyYXRpb25zLmNvbmNhdChhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGIpIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbnMgPSBvcGVyYXRpb25zLmNvbmNhdChiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3BlcmF0aW9ucy5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgICAgICAvLyBUT0RPKG1hdHNrbyk6IGFkZCBkb2N1bWVudGF0aW9uXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBzdGFydEFuaW1hdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgIHZhciBydW5uZXJzID0gW107XG4gICAgICAgICAgaWYgKG9wZXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3JFYWNoKG9wZXJhdGlvbnMsIGZ1bmN0aW9uKGFuaW1hdGVGbikge1xuICAgICAgICAgICAgICBydW5uZXJzLnB1c2goYW5pbWF0ZUZuKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcnVubmVycy5sZW5ndGggPyAkJEFuaW1hdGVSdW5uZXIuYWxsKHJ1bm5lcnMsIGNhbGxiYWNrKSA6IGNhbGxiYWNrKCk7XG5cbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gZW5kRm4ocmVqZWN0KSB7XG4gICAgICAgICAgICBmb3JFYWNoKHJ1bm5lcnMsIGZ1bmN0aW9uKHJ1bm5lcikge1xuICAgICAgICAgICAgICByZWplY3QgPyBydW5uZXIuY2FuY2VsKCkgOiBydW5uZXIuZW5kKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb29rdXBBbmltYXRpb25zKGNsYXNzZXMpIHtcbiAgICAgIGNsYXNzZXMgPSBpc0FycmF5KGNsYXNzZXMpID8gY2xhc3NlcyA6IGNsYXNzZXMuc3BsaXQoJyAnKTtcbiAgICAgIHZhciBtYXRjaGVzID0gW10sIGZsYWdNYXAgPSB7fTtcbiAgICAgIGZvciAodmFyIGk9MDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGtsYXNzID0gY2xhc3Nlc1tpXSxcbiAgICAgICAgICAgIGFuaW1hdGlvbkZhY3RvcnkgPSAkYW5pbWF0ZVByb3ZpZGVyLiQkcmVnaXN0ZXJlZEFuaW1hdGlvbnNba2xhc3NdO1xuICAgICAgICBpZiAoYW5pbWF0aW9uRmFjdG9yeSAmJiAhZmxhZ01hcFtrbGFzc10pIHtcbiAgICAgICAgICBtYXRjaGVzLnB1c2goJGluamVjdG9yLmdldChhbmltYXRpb25GYWN0b3J5KSk7XG4gICAgICAgICAgZmxhZ01hcFtrbGFzc10gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2hlcztcbiAgICB9XG4gIH1dO1xufV07XG5cbnZhciAkJEFuaW1hdGVKc0RyaXZlclByb3ZpZGVyID0gWyckJGFuaW1hdGlvblByb3ZpZGVyJywgZnVuY3Rpb24oJCRhbmltYXRpb25Qcm92aWRlcikge1xuICAkJGFuaW1hdGlvblByb3ZpZGVyLmRyaXZlcnMucHVzaCgnJCRhbmltYXRlSnNEcml2ZXInKTtcbiAgdGhpcy4kZ2V0ID0gWyckJGFuaW1hdGVKcycsICckJEFuaW1hdGVSdW5uZXInLCBmdW5jdGlvbigkJGFuaW1hdGVKcywgJCRBbmltYXRlUnVubmVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGluaXREcml2ZXJGbihhbmltYXRpb25EZXRhaWxzKSB7XG4gICAgICBpZiAoYW5pbWF0aW9uRGV0YWlscy5mcm9tICYmIGFuaW1hdGlvbkRldGFpbHMudG8pIHtcbiAgICAgICAgdmFyIGZyb21BbmltYXRpb24gPSBwcmVwYXJlQW5pbWF0aW9uKGFuaW1hdGlvbkRldGFpbHMuZnJvbSk7XG4gICAgICAgIHZhciB0b0FuaW1hdGlvbiA9IHByZXBhcmVBbmltYXRpb24oYW5pbWF0aW9uRGV0YWlscy50byk7XG4gICAgICAgIGlmICghZnJvbUFuaW1hdGlvbiAmJiAhdG9BbmltYXRpb24pIHJldHVybjtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhbmltYXRpb25SdW5uZXJzID0gW107XG5cbiAgICAgICAgICAgIGlmIChmcm9tQW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgIGFuaW1hdGlvblJ1bm5lcnMucHVzaChmcm9tQW5pbWF0aW9uLnN0YXJ0KCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodG9BbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgYW5pbWF0aW9uUnVubmVycy5wdXNoKHRvQW5pbWF0aW9uLnN0YXJ0KCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkJEFuaW1hdGVSdW5uZXIuYWxsKGFuaW1hdGlvblJ1bm5lcnMsIGRvbmUpO1xuXG4gICAgICAgICAgICB2YXIgcnVubmVyID0gbmV3ICQkQW5pbWF0ZVJ1bm5lcih7XG4gICAgICAgICAgICAgIGVuZDogZW5kRm5GYWN0b3J5KCksXG4gICAgICAgICAgICAgIGNhbmNlbDogZW5kRm5GYWN0b3J5KClcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gcnVubmVyO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBlbmRGbkZhY3RvcnkoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBmb3JFYWNoKGFuaW1hdGlvblJ1bm5lcnMsIGZ1bmN0aW9uKHJ1bm5lcikge1xuICAgICAgICAgICAgICAgICAgLy8gYXQgdGhpcyBwb2ludCB3ZSBjYW5ub3QgY2FuY2VsIGFuaW1hdGlvbnMgZm9yIGdyb3VwcyBqdXN0IHlldC4gMS41K1xuICAgICAgICAgICAgICAgICAgcnVubmVyLmVuZCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBkb25lKHN0YXR1cykge1xuICAgICAgICAgICAgICBydW5uZXIuY29tcGxldGUoc3RhdHVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcHJlcGFyZUFuaW1hdGlvbihhbmltYXRpb25EZXRhaWxzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcHJlcGFyZUFuaW1hdGlvbihhbmltYXRpb25EZXRhaWxzKSB7XG4gICAgICAvLyBUT0RPKG1hdHNrbyk6IG1ha2Ugc3VyZSB0byBjaGVjayBmb3IgZ3JvdXBlZCBhbmltYXRpb25zIGFuZCBkZWxlZ2F0ZSBkb3duIHRvIG5vcm1hbCBhbmltYXRpb25zXG4gICAgICB2YXIgZWxlbWVudCA9IGFuaW1hdGlvbkRldGFpbHMuZWxlbWVudDtcbiAgICAgIHZhciBldmVudCA9IGFuaW1hdGlvbkRldGFpbHMuZXZlbnQ7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFuaW1hdGlvbkRldGFpbHMub3B0aW9ucztcbiAgICAgIHZhciBjbGFzc2VzID0gYW5pbWF0aW9uRGV0YWlscy5jbGFzc2VzO1xuICAgICAgcmV0dXJuICQkYW5pbWF0ZUpzKGVsZW1lbnQsIGV2ZW50LCBjbGFzc2VzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1dO1xufV07XG5cbnZhciBOR19BTklNQVRFX0FUVFJfTkFNRSA9ICdkYXRhLW5nLWFuaW1hdGUnO1xudmFyIE5HX0FOSU1BVEVfUElOX0RBVEEgPSAnJG5nQW5pbWF0ZVBpbic7XG52YXIgJCRBbmltYXRlUXVldWVQcm92aWRlciA9IFsnJGFuaW1hdGVQcm92aWRlcicsIGZ1bmN0aW9uKCRhbmltYXRlUHJvdmlkZXIpIHtcbiAgdmFyIFBSRV9ESUdFU1RfU1RBVEUgPSAxO1xuICB2YXIgUlVOTklOR19TVEFURSA9IDI7XG5cbiAgdmFyIHJ1bGVzID0gdGhpcy5ydWxlcyA9IHtcbiAgICBza2lwOiBbXSxcbiAgICBjYW5jZWw6IFtdLFxuICAgIGpvaW46IFtdXG4gIH07XG5cbiAgZnVuY3Rpb24gaXNBbGxvd2VkKHJ1bGVUeXBlLCBlbGVtZW50LCBjdXJyZW50QW5pbWF0aW9uLCBwcmV2aW91c0FuaW1hdGlvbikge1xuICAgIHJldHVybiBydWxlc1tydWxlVHlwZV0uc29tZShmdW5jdGlvbihmbikge1xuICAgICAgcmV0dXJuIGZuKGVsZW1lbnQsIGN1cnJlbnRBbmltYXRpb24sIHByZXZpb3VzQW5pbWF0aW9uKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc0FuaW1hdGlvbkNsYXNzZXMob3B0aW9ucywgYW5kKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdmFyIGEgPSAob3B0aW9ucy5hZGRDbGFzcyB8fCAnJykubGVuZ3RoID4gMDtcbiAgICB2YXIgYiA9IChvcHRpb25zLnJlbW92ZUNsYXNzIHx8ICcnKS5sZW5ndGggPiAwO1xuICAgIHJldHVybiBhbmQgPyBhICYmIGIgOiBhIHx8IGI7XG4gIH1cblxuICBydWxlcy5qb2luLnB1c2goZnVuY3Rpb24oZWxlbWVudCwgbmV3QW5pbWF0aW9uLCBjdXJyZW50QW5pbWF0aW9uKSB7XG4gICAgLy8gaWYgdGhlIG5ldyBhbmltYXRpb24gaXMgY2xhc3MtYmFzZWQgdGhlbiB3ZSBjYW4ganVzdCB0YWNrIHRoYXQgb25cbiAgICByZXR1cm4gIW5ld0FuaW1hdGlvbi5zdHJ1Y3R1cmFsICYmIGhhc0FuaW1hdGlvbkNsYXNzZXMobmV3QW5pbWF0aW9uLm9wdGlvbnMpO1xuICB9KTtcblxuICBydWxlcy5za2lwLnB1c2goZnVuY3Rpb24oZWxlbWVudCwgbmV3QW5pbWF0aW9uLCBjdXJyZW50QW5pbWF0aW9uKSB7XG4gICAgLy8gdGhlcmUgaXMgbm8gbmVlZCB0byBhbmltYXRlIGFueXRoaW5nIGlmIG5vIGNsYXNzZXMgYXJlIGJlaW5nIGFkZGVkIGFuZFxuICAgIC8vIHRoZXJlIGlzIG5vIHN0cnVjdHVyYWwgYW5pbWF0aW9uIHRoYXQgd2lsbCBiZSB0cmlnZ2VyZWRcbiAgICByZXR1cm4gIW5ld0FuaW1hdGlvbi5zdHJ1Y3R1cmFsICYmICFoYXNBbmltYXRpb25DbGFzc2VzKG5ld0FuaW1hdGlvbi5vcHRpb25zKTtcbiAgfSk7XG5cbiAgcnVsZXMuc2tpcC5wdXNoKGZ1bmN0aW9uKGVsZW1lbnQsIG5ld0FuaW1hdGlvbiwgY3VycmVudEFuaW1hdGlvbikge1xuICAgIC8vIHdoeSBzaG91bGQgd2UgdHJpZ2dlciBhIG5ldyBzdHJ1Y3R1cmFsIGFuaW1hdGlvbiBpZiB0aGUgZWxlbWVudCB3aWxsXG4gICAgLy8gYmUgcmVtb3ZlZCBmcm9tIHRoZSBET00gYW55d2F5P1xuICAgIHJldHVybiBjdXJyZW50QW5pbWF0aW9uLmV2ZW50ID09ICdsZWF2ZScgJiYgbmV3QW5pbWF0aW9uLnN0cnVjdHVyYWw7XG4gIH0pO1xuXG4gIHJ1bGVzLnNraXAucHVzaChmdW5jdGlvbihlbGVtZW50LCBuZXdBbmltYXRpb24sIGN1cnJlbnRBbmltYXRpb24pIHtcbiAgICAvLyBpZiB0aGVyZSBpcyBhIGN1cnJlbnQgYW5pbWF0aW9uIHRoZW4gc2tpcCB0aGUgY2xhc3MtYmFzZWQgYW5pbWF0aW9uXG4gICAgcmV0dXJuIGN1cnJlbnRBbmltYXRpb24uc3RydWN0dXJhbCAmJiAhbmV3QW5pbWF0aW9uLnN0cnVjdHVyYWw7XG4gIH0pO1xuXG4gIHJ1bGVzLmNhbmNlbC5wdXNoKGZ1bmN0aW9uKGVsZW1lbnQsIG5ld0FuaW1hdGlvbiwgY3VycmVudEFuaW1hdGlvbikge1xuICAgIC8vIHRoZXJlIGNhbiBuZXZlciBiZSB0d28gc3RydWN0dXJhbCBhbmltYXRpb25zIHJ1bm5pbmcgYXQgdGhlIHNhbWUgdGltZVxuICAgIHJldHVybiBjdXJyZW50QW5pbWF0aW9uLnN0cnVjdHVyYWwgJiYgbmV3QW5pbWF0aW9uLnN0cnVjdHVyYWw7XG4gIH0pO1xuXG4gIHJ1bGVzLmNhbmNlbC5wdXNoKGZ1bmN0aW9uKGVsZW1lbnQsIG5ld0FuaW1hdGlvbiwgY3VycmVudEFuaW1hdGlvbikge1xuICAgIC8vIGlmIHRoZSBwcmV2aW91cyBhbmltYXRpb24gaXMgYWxyZWFkeSBydW5uaW5nLCBidXQgdGhlIG5ldyBhbmltYXRpb24gd2lsbFxuICAgIC8vIGJlIHRyaWdnZXJlZCwgYnV0IHRoZSBuZXcgYW5pbWF0aW9uIGlzIHN0cnVjdHVyYWxcbiAgICByZXR1cm4gY3VycmVudEFuaW1hdGlvbi5zdGF0ZSA9PT0gUlVOTklOR19TVEFURSAmJiBuZXdBbmltYXRpb24uc3RydWN0dXJhbDtcbiAgfSk7XG5cbiAgcnVsZXMuY2FuY2VsLnB1c2goZnVuY3Rpb24oZWxlbWVudCwgbmV3QW5pbWF0aW9uLCBjdXJyZW50QW5pbWF0aW9uKSB7XG4gICAgdmFyIG5PID0gbmV3QW5pbWF0aW9uLm9wdGlvbnM7XG4gICAgdmFyIGNPID0gY3VycmVudEFuaW1hdGlvbi5vcHRpb25zO1xuXG4gICAgLy8gaWYgdGhlIGV4YWN0IHNhbWUgQ1NTIGNsYXNzIGlzIGFkZGVkL3JlbW92ZWQgdGhlbiBpdCdzIHNhZmUgdG8gY2FuY2VsIGl0XG4gICAgcmV0dXJuIChuTy5hZGRDbGFzcyAmJiBuTy5hZGRDbGFzcyA9PT0gY08ucmVtb3ZlQ2xhc3MpIHx8IChuTy5yZW1vdmVDbGFzcyAmJiBuTy5yZW1vdmVDbGFzcyA9PT0gY08uYWRkQ2xhc3MpO1xuICB9KTtcblxuICB0aGlzLiRnZXQgPSBbJyQkckFGJywgJyRyb290U2NvcGUnLCAnJHJvb3RFbGVtZW50JywgJyRkb2N1bWVudCcsICckJEhhc2hNYXAnLFxuICAgICAgICAgICAgICAgJyQkYW5pbWF0aW9uJywgJyQkQW5pbWF0ZVJ1bm5lcicsICckdGVtcGxhdGVSZXF1ZXN0JywgJyQkanFMaXRlJyxcbiAgICAgICBmdW5jdGlvbigkJHJBRiwgICAkcm9vdFNjb3BlLCAgICRyb290RWxlbWVudCwgICAkZG9jdW1lbnQsICAgJCRIYXNoTWFwLFxuICAgICAgICAgICAgICAgICQkYW5pbWF0aW9uLCAgICQkQW5pbWF0ZVJ1bm5lciwgICAkdGVtcGxhdGVSZXF1ZXN0LCAgICQkanFMaXRlKSB7XG5cbiAgICB2YXIgYWN0aXZlQW5pbWF0aW9uc0xvb2t1cCA9IG5ldyAkJEhhc2hNYXAoKTtcbiAgICB2YXIgZGlzYWJsZWRFbGVtZW50c0xvb2t1cCA9IG5ldyAkJEhhc2hNYXAoKTtcblxuICAgIHZhciBhbmltYXRpb25zRW5hYmxlZCA9IG51bGw7XG5cbiAgICAvLyBXYWl0IHVudGlsIGFsbCBkaXJlY3RpdmUgYW5kIHJvdXRlLXJlbGF0ZWQgdGVtcGxhdGVzIGFyZSBkb3dubG9hZGVkIGFuZFxuICAgIC8vIGNvbXBpbGVkLiBUaGUgJHRlbXBsYXRlUmVxdWVzdC50b3RhbFBlbmRpbmdSZXF1ZXN0cyB2YXJpYWJsZSBrZWVwcyB0cmFjayBvZlxuICAgIC8vIGFsbCBvZiB0aGUgcmVtb3RlIHRlbXBsYXRlcyBiZWluZyBjdXJyZW50bHkgZG93bmxvYWRlZC4gSWYgdGhlcmUgYXJlIG5vXG4gICAgLy8gdGVtcGxhdGVzIGN1cnJlbnRseSBkb3dubG9hZGluZyB0aGVuIHRoZSB3YXRjaGVyIHdpbGwgc3RpbGwgZmlyZSBhbnl3YXkuXG4gICAgdmFyIGRlcmVnaXN0ZXJXYXRjaCA9ICRyb290U2NvcGUuJHdhdGNoKFxuICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiAkdGVtcGxhdGVSZXF1ZXN0LnRvdGFsUGVuZGluZ1JlcXVlc3RzID09PSAwOyB9LFxuICAgICAgZnVuY3Rpb24oaXNFbXB0eSkge1xuICAgICAgICBpZiAoIWlzRW1wdHkpIHJldHVybjtcbiAgICAgICAgZGVyZWdpc3RlcldhdGNoKCk7XG5cbiAgICAgICAgLy8gTm93IHRoYXQgYWxsIHRlbXBsYXRlcyBoYXZlIGJlZW4gZG93bmxvYWRlZCwgJGFuaW1hdGUgd2lsbCB3YWl0IHVudGlsXG4gICAgICAgIC8vIHRoZSBwb3N0IGRpZ2VzdCBxdWV1ZSBpcyBlbXB0eSBiZWZvcmUgZW5hYmxpbmcgYW5pbWF0aW9ucy4gQnkgaGF2aW5nIHR3b1xuICAgICAgICAvLyBjYWxscyB0byAkcG9zdERpZ2VzdCBjYWxscyB3ZSBjYW4gZW5zdXJlIHRoYXQgdGhlIGZsYWcgaXMgZW5hYmxlZCBhdCB0aGVcbiAgICAgICAgLy8gdmVyeSBlbmQgb2YgdGhlIHBvc3QgZGlnZXN0IHF1ZXVlLiBTaW5jZSBhbGwgb2YgdGhlIGFuaW1hdGlvbnMgaW4gJGFuaW1hdGVcbiAgICAgICAgLy8gdXNlICRwb3N0RGlnZXN0LCBpdCdzIGltcG9ydGFudCB0aGF0IHRoZSBjb2RlIGJlbG93IGV4ZWN1dGVzIGF0IHRoZSBlbmQuXG4gICAgICAgIC8vIFRoaXMgYmFzaWNhbGx5IG1lYW5zIHRoYXQgdGhlIHBhZ2UgaXMgZnVsbHkgZG93bmxvYWRlZCBhbmQgY29tcGlsZWQgYmVmb3JlXG4gICAgICAgIC8vIGFueSBhbmltYXRpb25zIGFyZSB0cmlnZ2VyZWQuXG4gICAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gd2UgY2hlY2sgZm9yIG51bGwgZGlyZWN0bHkgaW4gdGhlIGV2ZW50IHRoYXQgdGhlIGFwcGxpY2F0aW9uIGFscmVhZHkgY2FsbGVkXG4gICAgICAgICAgICAvLyAuZW5hYmxlZCgpIHdpdGggd2hhdGV2ZXIgYXJndW1lbnRzIHRoYXQgaXQgcHJvdmlkZWQgaXQgd2l0aFxuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbnNFbmFibGVkID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIGFuaW1hdGlvbnNFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHZhciBib2R5RWxlbWVudCA9IGpxTGl0ZSgkZG9jdW1lbnRbMF0uYm9keSk7XG5cbiAgICB2YXIgY2FsbGJhY2tSZWdpc3RyeSA9IHt9O1xuXG4gICAgLy8gcmVtZW1iZXIgdGhhdCB0aGUgY2xhc3NOYW1lRmlsdGVyIGlzIHNldCBkdXJpbmcgdGhlIHByb3ZpZGVyL2NvbmZpZ1xuICAgIC8vIHN0YWdlIHRoZXJlZm9yZSB3ZSBjYW4gb3B0aW1pemUgaGVyZSBhbmQgc2V0dXAgYSBoZWxwZXIgZnVuY3Rpb25cbiAgICB2YXIgY2xhc3NOYW1lRmlsdGVyID0gJGFuaW1hdGVQcm92aWRlci5jbGFzc05hbWVGaWx0ZXIoKTtcbiAgICB2YXIgaXNBbmltYXRhYmxlQ2xhc3NOYW1lID0gIWNsYXNzTmFtZUZpbHRlclxuICAgICAgICAgICAgICA/IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICAgICAgICA6IGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbGFzc05hbWVGaWx0ZXIudGVzdChjbGFzc05hbWUpO1xuICAgICAgICAgICAgICB9O1xuXG4gICAgdmFyIGFwcGx5QW5pbWF0aW9uQ2xhc3NlcyA9IGFwcGx5QW5pbWF0aW9uQ2xhc3Nlc0ZhY3RvcnkoJCRqcUxpdGUpO1xuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplQW5pbWF0aW9uT3B0aW9ucyhlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gbWVyZ2VBbmltYXRpb25PcHRpb25zKGVsZW1lbnQsIG9wdGlvbnMsIHt9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaW5kQ2FsbGJhY2tzKGVsZW1lbnQsIGV2ZW50KSB7XG4gICAgICB2YXIgdGFyZ2V0Tm9kZSA9IGdldERvbU5vZGUoZWxlbWVudCk7XG5cbiAgICAgIHZhciBtYXRjaGVzID0gW107XG4gICAgICB2YXIgZW50cmllcyA9IGNhbGxiYWNrUmVnaXN0cnlbZXZlbnRdO1xuICAgICAgaWYgKGVudHJpZXMpIHtcbiAgICAgICAgZm9yRWFjaChlbnRyaWVzLCBmdW5jdGlvbihlbnRyeSkge1xuICAgICAgICAgIGlmIChlbnRyeS5ub2RlLmNvbnRhaW5zKHRhcmdldE5vZGUpKSB7XG4gICAgICAgICAgICBtYXRjaGVzLnB1c2goZW50cnkuY2FsbGJhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRjaGVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyaWdnZXJDYWxsYmFjayhldmVudCwgZWxlbWVudCwgcGhhc2UsIGRhdGEpIHtcbiAgICAgICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3JFYWNoKGZpbmRDYWxsYmFja3MoZWxlbWVudCwgZXZlbnQpLCBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgIGNhbGxiYWNrKGVsZW1lbnQsIHBoYXNlLCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgb246IGZ1bmN0aW9uKGV2ZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBub2RlID0gZXh0cmFjdEVsZW1lbnROb2RlKGNvbnRhaW5lcik7XG4gICAgICAgIGNhbGxiYWNrUmVnaXN0cnlbZXZlbnRdID0gY2FsbGJhY2tSZWdpc3RyeVtldmVudF0gfHwgW107XG4gICAgICAgIGNhbGxiYWNrUmVnaXN0cnlbZXZlbnRdLnB1c2goe1xuICAgICAgICAgIG5vZGU6IG5vZGUsXG4gICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgb2ZmOiBmdW5jdGlvbihldmVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgZW50cmllcyA9IGNhbGxiYWNrUmVnaXN0cnlbZXZlbnRdO1xuICAgICAgICBpZiAoIWVudHJpZXMpIHJldHVybjtcblxuICAgICAgICBjYWxsYmFja1JlZ2lzdHJ5W2V2ZW50XSA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDFcbiAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgOiBmaWx0ZXJGcm9tUmVnaXN0cnkoZW50cmllcywgY29udGFpbmVyLCBjYWxsYmFjayk7XG5cbiAgICAgICAgZnVuY3Rpb24gZmlsdGVyRnJvbVJlZ2lzdHJ5KGxpc3QsIG1hdGNoQ29udGFpbmVyLCBtYXRjaENhbGxiYWNrKSB7XG4gICAgICAgICAgdmFyIGNvbnRhaW5lck5vZGUgPSBleHRyYWN0RWxlbWVudE5vZGUobWF0Y2hDb250YWluZXIpO1xuICAgICAgICAgIHJldHVybiBsaXN0LmZpbHRlcihmdW5jdGlvbihlbnRyeSkge1xuICAgICAgICAgICAgdmFyIGlzTWF0Y2ggPSBlbnRyeS5ub2RlID09PSBjb250YWluZXJOb2RlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCFtYXRjaENhbGxiYWNrIHx8IGVudHJ5LmNhbGxiYWNrID09PSBtYXRjaENhbGxiYWNrKTtcbiAgICAgICAgICAgIHJldHVybiAhaXNNYXRjaDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgcGluOiBmdW5jdGlvbihlbGVtZW50LCBwYXJlbnRFbGVtZW50KSB7XG4gICAgICAgIGFzc2VydEFyZyhpc0VsZW1lbnQoZWxlbWVudCksICdlbGVtZW50JywgJ25vdCBhbiBlbGVtZW50Jyk7XG4gICAgICAgIGFzc2VydEFyZyhpc0VsZW1lbnQocGFyZW50RWxlbWVudCksICdwYXJlbnRFbGVtZW50JywgJ25vdCBhbiBlbGVtZW50Jyk7XG4gICAgICAgIGVsZW1lbnQuZGF0YShOR19BTklNQVRFX1BJTl9EQVRBLCBwYXJlbnRFbGVtZW50KTtcbiAgICAgIH0sXG5cbiAgICAgIHB1c2g6IGZ1bmN0aW9uKGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zLCBkb21PcGVyYXRpb24pIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIG9wdGlvbnMuZG9tT3BlcmF0aW9uID0gZG9tT3BlcmF0aW9uO1xuICAgICAgICByZXR1cm4gcXVldWVBbmltYXRpb24oZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMpO1xuICAgICAgfSxcblxuICAgICAgLy8gdGhpcyBtZXRob2QgaGFzIGZvdXIgc2lnbmF0dXJlczpcbiAgICAgIC8vICAoKSAtIGdsb2JhbCBnZXR0ZXJcbiAgICAgIC8vICAoYm9vbCkgLSBnbG9iYWwgc2V0dGVyXG4gICAgICAvLyAgKGVsZW1lbnQpIC0gZWxlbWVudCBnZXR0ZXJcbiAgICAgIC8vICAoZWxlbWVudCwgYm9vbCkgLSBlbGVtZW50IHNldHRlcjxGMzc+XG4gICAgICBlbmFibGVkOiBmdW5jdGlvbihlbGVtZW50LCBib29sKSB7XG4gICAgICAgIHZhciBhcmdDb3VudCA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKGFyZ0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgLy8gKCkgLSBHbG9iYWwgZ2V0dGVyXG4gICAgICAgICAgYm9vbCA9ICEhYW5pbWF0aW9uc0VuYWJsZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGhhc0VsZW1lbnQgPSBpc0VsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgICAgICBpZiAoIWhhc0VsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIChib29sKSAtIEdsb2JhbCBzZXR0ZXJcbiAgICAgICAgICAgIGJvb2wgPSBhbmltYXRpb25zRW5hYmxlZCA9ICEhZWxlbWVudDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSBnZXREb21Ob2RlKGVsZW1lbnQpO1xuICAgICAgICAgICAgdmFyIHJlY29yZEV4aXN0cyA9IGRpc2FibGVkRWxlbWVudHNMb29rdXAuZ2V0KG5vZGUpO1xuXG4gICAgICAgICAgICBpZiAoYXJnQ291bnQgPT09IDEpIHtcbiAgICAgICAgICAgICAgLy8gKGVsZW1lbnQpIC0gRWxlbWVudCBnZXR0ZXJcbiAgICAgICAgICAgICAgYm9vbCA9ICFyZWNvcmRFeGlzdHM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyAoZWxlbWVudCwgYm9vbCkgLSBFbGVtZW50IHNldHRlclxuICAgICAgICAgICAgICBib29sID0gISFib29sO1xuICAgICAgICAgICAgICBpZiAoIWJvb2wpIHtcbiAgICAgICAgICAgICAgICBkaXNhYmxlZEVsZW1lbnRzTG9va3VwLnB1dChub2RlLCB0cnVlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZWNvcmRFeGlzdHMpIHtcbiAgICAgICAgICAgICAgICBkaXNhYmxlZEVsZW1lbnRzTG9va3VwLnJlbW92ZShub2RlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBib29sO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBxdWV1ZUFuaW1hdGlvbihlbGVtZW50LCBldmVudCwgb3B0aW9ucykge1xuICAgICAgdmFyIG5vZGUsIHBhcmVudDtcbiAgICAgIGVsZW1lbnQgPSBzdHJpcENvbW1lbnRzRnJvbUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICBub2RlID0gZ2V0RG9tTm9kZShlbGVtZW50KTtcbiAgICAgICAgcGFyZW50ID0gZWxlbWVudC5wYXJlbnQoKTtcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRpb25PcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgICAvLyB3ZSBjcmVhdGUgYSBmYWtlIHJ1bm5lciB3aXRoIGEgd29ya2luZyBwcm9taXNlLlxuICAgICAgLy8gVGhlc2UgbWV0aG9kcyB3aWxsIGJlY29tZSBhdmFpbGFibGUgYWZ0ZXIgdGhlIGRpZ2VzdCBoYXMgcGFzc2VkXG4gICAgICB2YXIgcnVubmVyID0gbmV3ICQkQW5pbWF0ZVJ1bm5lcigpO1xuXG4gICAgICAvLyB0aGVyZSBhcmUgc2l0dWF0aW9ucyB3aGVyZSBhIGRpcmVjdGl2ZSBpc3N1ZXMgYW4gYW5pbWF0aW9uIGZvclxuICAgICAgLy8gYSBqcUxpdGUgd3JhcHBlciB0aGF0IGNvbnRhaW5zIG9ubHkgY29tbWVudCBub2Rlcy4uLiBJZiB0aGlzXG4gICAgICAvLyBoYXBwZW5zIHRoZW4gdGhlcmUgaXMgbm8gd2F5IHdlIGNhbiBwZXJmb3JtIGFuIGFuaW1hdGlvblxuICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgIGNsb3NlKCk7XG4gICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0FycmF5KG9wdGlvbnMuYWRkQ2xhc3MpKSB7XG4gICAgICAgIG9wdGlvbnMuYWRkQ2xhc3MgPSBvcHRpb25zLmFkZENsYXNzLmpvaW4oJyAnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzQXJyYXkob3B0aW9ucy5yZW1vdmVDbGFzcykpIHtcbiAgICAgICAgb3B0aW9ucy5yZW1vdmVDbGFzcyA9IG9wdGlvbnMucmVtb3ZlQ2xhc3Muam9pbignICcpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5mcm9tICYmICFpc09iamVjdChvcHRpb25zLmZyb20pKSB7XG4gICAgICAgIG9wdGlvbnMuZnJvbSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnRvICYmICFpc09iamVjdChvcHRpb25zLnRvKSkge1xuICAgICAgICBvcHRpb25zLnRvID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGNsYXNzTmFtZSA9IFtub2RlLmNsYXNzTmFtZSwgb3B0aW9ucy5hZGRDbGFzcywgb3B0aW9ucy5yZW1vdmVDbGFzc10uam9pbignICcpO1xuICAgICAgaWYgKCFpc0FuaW1hdGFibGVDbGFzc05hbWUoY2xhc3NOYW1lKSkge1xuICAgICAgICBjbG9zZSgpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXNTdHJ1Y3R1cmFsID0gWydlbnRlcicsICdtb3ZlJywgJ2xlYXZlJ10uaW5kZXhPZihldmVudCkgPj0gMDtcblxuICAgICAgLy8gdGhpcyBpcyBhIGhhcmQgZGlzYWJsZSBvZiBhbGwgYW5pbWF0aW9ucyBmb3IgdGhlIGFwcGxpY2F0aW9uIG9yIG9uXG4gICAgICAvLyB0aGUgZWxlbWVudCBpdHNlbGYsIHRoZXJlZm9yZSAgdGhlcmUgaXMgbm8gbmVlZCB0byBjb250aW51ZSBmdXJ0aGVyXG4gICAgICAvLyBwYXN0IHRoaXMgcG9pbnQgaWYgbm90IGVuYWJsZWRcbiAgICAgIHZhciBza2lwQW5pbWF0aW9ucyA9ICFhbmltYXRpb25zRW5hYmxlZCB8fCBkaXNhYmxlZEVsZW1lbnRzTG9va3VwLmdldChub2RlKTtcbiAgICAgIHZhciBleGlzdGluZ0FuaW1hdGlvbiA9ICghc2tpcEFuaW1hdGlvbnMgJiYgYWN0aXZlQW5pbWF0aW9uc0xvb2t1cC5nZXQobm9kZSkpIHx8IHt9O1xuICAgICAgdmFyIGhhc0V4aXN0aW5nQW5pbWF0aW9uID0gISFleGlzdGluZ0FuaW1hdGlvbi5zdGF0ZTtcblxuICAgICAgLy8gdGhlcmUgaXMgbm8gcG9pbnQgaW4gdHJhdmVyc2luZyB0aGUgc2FtZSBjb2xsZWN0aW9uIG9mIHBhcmVudCBhbmNlc3RvcnMgaWYgYSBmb2xsb3d1cFxuICAgICAgLy8gYW5pbWF0aW9uIHdpbGwgYmUgcnVuIG9uIHRoZSBzYW1lIGVsZW1lbnQgdGhhdCBhbHJlYWR5IGRpZCBhbGwgdGhhdCBjaGVja2luZyB3b3JrXG4gICAgICBpZiAoIXNraXBBbmltYXRpb25zICYmICghaGFzRXhpc3RpbmdBbmltYXRpb24gfHwgZXhpc3RpbmdBbmltYXRpb24uc3RhdGUgIT0gUFJFX0RJR0VTVF9TVEFURSkpIHtcbiAgICAgICAgc2tpcEFuaW1hdGlvbnMgPSAhYXJlQW5pbWF0aW9uc0FsbG93ZWQoZWxlbWVudCwgcGFyZW50LCBldmVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChza2lwQW5pbWF0aW9ucykge1xuICAgICAgICBjbG9zZSgpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNTdHJ1Y3R1cmFsKSB7XG4gICAgICAgIGNsb3NlQ2hpbGRBbmltYXRpb25zKGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV3QW5pbWF0aW9uID0ge1xuICAgICAgICBzdHJ1Y3R1cmFsOiBpc1N0cnVjdHVyYWwsXG4gICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgY2xvc2U6IGNsb3NlLFxuICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgICAgICBydW5uZXI6IHJ1bm5lclxuICAgICAgfTtcblxuICAgICAgaWYgKGhhc0V4aXN0aW5nQW5pbWF0aW9uKSB7XG4gICAgICAgIHZhciBza2lwQW5pbWF0aW9uRmxhZyA9IGlzQWxsb3dlZCgnc2tpcCcsIGVsZW1lbnQsIG5ld0FuaW1hdGlvbiwgZXhpc3RpbmdBbmltYXRpb24pO1xuICAgICAgICBpZiAoc2tpcEFuaW1hdGlvbkZsYWcpIHtcbiAgICAgICAgICBpZiAoZXhpc3RpbmdBbmltYXRpb24uc3RhdGUgPT09IFJVTk5JTkdfU1RBVEUpIHtcbiAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZXJnZUFuaW1hdGlvbk9wdGlvbnMoZWxlbWVudCwgZXhpc3RpbmdBbmltYXRpb24ub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdBbmltYXRpb24ucnVubmVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjYW5jZWxBbmltYXRpb25GbGFnID0gaXNBbGxvd2VkKCdjYW5jZWwnLCBlbGVtZW50LCBuZXdBbmltYXRpb24sIGV4aXN0aW5nQW5pbWF0aW9uKTtcbiAgICAgICAgaWYgKGNhbmNlbEFuaW1hdGlvbkZsYWcpIHtcbiAgICAgICAgICBpZiAoZXhpc3RpbmdBbmltYXRpb24uc3RhdGUgPT09IFJVTk5JTkdfU1RBVEUpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBlbmQgdGhlIGFuaW1hdGlvbiByaWdodCBhd2F5IGFuZCBpdCBpcyBzYWZlXG4gICAgICAgICAgICAvLyB0byBkbyBzbyBzaW5jZSB0aGUgYW5pbWF0aW9uIGlzIGFscmVhZHkgcnVubmluZyBhbmQgdGhlXG4gICAgICAgICAgICAvLyBydW5uZXIgY2FsbGJhY2sgY29kZSB3aWxsIHJ1biBpbiBhc3luY1xuICAgICAgICAgICAgZXhpc3RpbmdBbmltYXRpb24ucnVubmVyLmVuZCgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZXhpc3RpbmdBbmltYXRpb24uc3RydWN0dXJhbCkge1xuICAgICAgICAgICAgLy8gdGhpcyBtZWFucyB0aGF0IHRoZSBhbmltYXRpb24gaXMgcXVldWVkIGludG8gYSBkaWdlc3QsIGJ1dFxuICAgICAgICAgICAgLy8gaGFzbid0IHN0YXJ0ZWQgeWV0LiBUaGVyZWZvcmUgaXQgaXMgc2FmZSB0byBydW4gdGhlIGNsb3NlXG4gICAgICAgICAgICAvLyBtZXRob2Qgd2hpY2ggd2lsbCBjYWxsIHRoZSBydW5uZXIgbWV0aG9kcyBpbiBhc3luYy5cbiAgICAgICAgICAgIGV4aXN0aW5nQW5pbWF0aW9uLmNsb3NlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBtZXJnZSB0aGUgZXhpc3RpbmcgYW5pbWF0aW9uIG9wdGlvbnMgaW50byB0aGlzIG5ldyBmb2xsb3ctdXAgYW5pbWF0aW9uXG4gICAgICAgICAgICBtZXJnZUFuaW1hdGlvbk9wdGlvbnMoZWxlbWVudCwgbmV3QW5pbWF0aW9uLm9wdGlvbnMsIGV4aXN0aW5nQW5pbWF0aW9uLm9wdGlvbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBhIGpvaW5lZCBhbmltYXRpb24gbWVhbnMgdGhhdCB0aGlzIGFuaW1hdGlvbiB3aWxsIHRha2Ugb3ZlciB0aGUgZXhpc3Rpbmcgb25lXG4gICAgICAgICAgLy8gc28gYW4gZXhhbXBsZSB3b3VsZCBpbnZvbHZlIGEgbGVhdmUgYW5pbWF0aW9uIHRha2luZyBvdmVyIGFuIGVudGVyLiBUaGVuIHdoZW5cbiAgICAgICAgICAvLyB0aGUgcG9zdERpZ2VzdCBraWNrcyBpbiB0aGUgZW50ZXIgd2lsbCBiZSBpZ25vcmVkLlxuICAgICAgICAgIHZhciBqb2luQW5pbWF0aW9uRmxhZyA9IGlzQWxsb3dlZCgnam9pbicsIGVsZW1lbnQsIG5ld0FuaW1hdGlvbiwgZXhpc3RpbmdBbmltYXRpb24pO1xuICAgICAgICAgIGlmIChqb2luQW5pbWF0aW9uRmxhZykge1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nQW5pbWF0aW9uLnN0YXRlID09PSBSVU5OSU5HX1NUQVRFKSB7XG4gICAgICAgICAgICAgIG5vcm1hbGl6ZUFuaW1hdGlvbk9wdGlvbnMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBldmVudCA9IG5ld0FuaW1hdGlvbi5ldmVudCA9IGV4aXN0aW5nQW5pbWF0aW9uLmV2ZW50O1xuICAgICAgICAgICAgICBvcHRpb25zID0gbWVyZ2VBbmltYXRpb25PcHRpb25zKGVsZW1lbnQsIGV4aXN0aW5nQW5pbWF0aW9uLm9wdGlvbnMsIG5ld0FuaW1hdGlvbi5vcHRpb25zKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG5vcm1hbGl6YXRpb24gaW4gdGhpcyBjYXNlIG1lYW5zIHRoYXQgaXQgcmVtb3ZlcyByZWR1bmRhbnQgQ1NTIGNsYXNzZXMgdGhhdFxuICAgICAgICAvLyBhbHJlYWR5IGV4aXN0IChhZGRDbGFzcykgb3IgZG8gbm90IGV4aXN0IChyZW1vdmVDbGFzcykgb24gdGhlIGVsZW1lbnRcbiAgICAgICAgbm9ybWFsaXplQW5pbWF0aW9uT3B0aW9ucyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgLy8gd2hlbiB0aGUgb3B0aW9ucyBhcmUgbWVyZ2VkIGFuZCBjbGVhbmVkIHVwIHdlIG1heSBlbmQgdXAgbm90IGhhdmluZyB0byBkb1xuICAgICAgLy8gYW4gYW5pbWF0aW9uIGF0IGFsbCwgdGhlcmVmb3JlIHdlIHNob3VsZCBjaGVjayB0aGlzIGJlZm9yZSBpc3N1aW5nIGEgcG9zdFxuICAgICAgLy8gZGlnZXN0IGNhbGxiYWNrLiBTdHJ1Y3R1cmFsIGFuaW1hdGlvbnMgd2lsbCBhbHdheXMgcnVuIG5vIG1hdHRlciB3aGF0LlxuICAgICAgdmFyIGlzVmFsaWRBbmltYXRpb24gPSBuZXdBbmltYXRpb24uc3RydWN0dXJhbDtcbiAgICAgIGlmICghaXNWYWxpZEFuaW1hdGlvbikge1xuICAgICAgICAvLyBhbmltYXRlIChmcm9tL3RvKSBjYW4gYmUgcXVpY2tseSBjaGVja2VkIGZpcnN0LCBvdGhlcndpc2Ugd2UgY2hlY2sgaWYgYW55IGNsYXNzZXMgYXJlIHByZXNlbnRcbiAgICAgICAgaXNWYWxpZEFuaW1hdGlvbiA9IChuZXdBbmltYXRpb24uZXZlbnQgPT09ICdhbmltYXRlJyAmJiBPYmplY3Qua2V5cyhuZXdBbmltYXRpb24ub3B0aW9ucy50byB8fCB7fSkubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBoYXNBbmltYXRpb25DbGFzc2VzKG5ld0FuaW1hdGlvbi5vcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc1ZhbGlkQW5pbWF0aW9uKSB7XG4gICAgICAgIGNsb3NlKCk7XG4gICAgICAgIGNsZWFyRWxlbWVudEFuaW1hdGlvblN0YXRlKGVsZW1lbnQpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNTdHJ1Y3R1cmFsKSB7XG4gICAgICAgIGNsb3NlUGFyZW50Q2xhc3NCYXNlZEFuaW1hdGlvbnMocGFyZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gdGhlIGNvdW50ZXIga2VlcHMgdHJhY2sgb2YgY2FuY2VsbGVkIGFuaW1hdGlvbnNcbiAgICAgIHZhciBjb3VudGVyID0gKGV4aXN0aW5nQW5pbWF0aW9uLmNvdW50ZXIgfHwgMCkgKyAxO1xuICAgICAgbmV3QW5pbWF0aW9uLmNvdW50ZXIgPSBjb3VudGVyO1xuXG4gICAgICBtYXJrRWxlbWVudEFuaW1hdGlvblN0YXRlKGVsZW1lbnQsIFBSRV9ESUdFU1RfU1RBVEUsIG5ld0FuaW1hdGlvbik7XG5cbiAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYW5pbWF0aW9uRGV0YWlscyA9IGFjdGl2ZUFuaW1hdGlvbnNMb29rdXAuZ2V0KG5vZGUpO1xuICAgICAgICB2YXIgYW5pbWF0aW9uQ2FuY2VsbGVkID0gIWFuaW1hdGlvbkRldGFpbHM7XG4gICAgICAgIGFuaW1hdGlvbkRldGFpbHMgPSBhbmltYXRpb25EZXRhaWxzIHx8IHt9O1xuXG4gICAgICAgIC8vIGlmIGFkZENsYXNzL3JlbW92ZUNsYXNzIGlzIGNhbGxlZCBiZWZvcmUgc29tZXRoaW5nIGxpa2UgZW50ZXIgdGhlbiB0aGVcbiAgICAgICAgLy8gcmVnaXN0ZXJlZCBwYXJlbnQgZWxlbWVudCBtYXkgbm90IGJlIHByZXNlbnQuIFRoZSBjb2RlIGJlbG93IHdpbGwgZW5zdXJlXG4gICAgICAgIC8vIHRoYXQgYSBmaW5hbCB2YWx1ZSBmb3IgcGFyZW50IGVsZW1lbnQgaXMgb2J0YWluZWRcbiAgICAgICAgdmFyIHBhcmVudEVsZW1lbnQgPSBlbGVtZW50LnBhcmVudCgpIHx8IFtdO1xuXG4gICAgICAgIC8vIGFuaW1hdGUvc3RydWN0dXJhbC9jbGFzcy1iYXNlZCBhbmltYXRpb25zIGFsbCBoYXZlIHJlcXVpcmVtZW50cy4gT3RoZXJ3aXNlIHRoZXJlXG4gICAgICAgIC8vIGlzIG5vIHBvaW50IGluIHBlcmZvcm1pbmcgYW4gYW5pbWF0aW9uLiBUaGUgcGFyZW50IG5vZGUgbXVzdCBhbHNvIGJlIHNldC5cbiAgICAgICAgdmFyIGlzVmFsaWRBbmltYXRpb24gPSBwYXJlbnRFbGVtZW50Lmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgKGFuaW1hdGlvbkRldGFpbHMuZXZlbnQgPT09ICdhbmltYXRlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgYW5pbWF0aW9uRGV0YWlscy5zdHJ1Y3R1cmFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBoYXNBbmltYXRpb25DbGFzc2VzKGFuaW1hdGlvbkRldGFpbHMub3B0aW9ucykpO1xuXG4gICAgICAgIC8vIHRoaXMgbWVhbnMgdGhhdCB0aGUgcHJldmlvdXMgYW5pbWF0aW9uIHdhcyBjYW5jZWxsZWRcbiAgICAgICAgLy8gZXZlbiBpZiB0aGUgZm9sbG93LXVwIGFuaW1hdGlvbiBpcyB0aGUgc2FtZSBldmVudFxuICAgICAgICBpZiAoYW5pbWF0aW9uQ2FuY2VsbGVkIHx8IGFuaW1hdGlvbkRldGFpbHMuY291bnRlciAhPT0gY291bnRlciB8fCAhaXNWYWxpZEFuaW1hdGlvbikge1xuICAgICAgICAgIC8vIGlmIGFub3RoZXIgYW5pbWF0aW9uIGRpZCBub3QgdGFrZSBvdmVyIHRoZW4gd2UgbmVlZFxuICAgICAgICAgIC8vIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBkb21PcGVyYXRpb24gYW5kIG9wdGlvbnMgYXJlXG4gICAgICAgICAgLy8gaGFuZGxlZCBhY2NvcmRpbmdseVxuICAgICAgICAgIGlmIChhbmltYXRpb25DYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIGFwcGx5QW5pbWF0aW9uQ2xhc3NlcyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgICAgIGFwcGx5QW5pbWF0aW9uU3R5bGVzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGlmIHRoZSBldmVudCBjaGFuZ2VkIGZyb20gc29tZXRoaW5nIGxpa2UgZW50ZXIgdG8gbGVhdmUgdGhlbiB3ZSBkb1xuICAgICAgICAgIC8vIGl0LCBvdGhlcndpc2UgaWYgaXQncyB0aGUgc2FtZSB0aGVuIHRoZSBlbmQgcmVzdWx0IHdpbGwgYmUgdGhlIHNhbWUgdG9vXG4gICAgICAgICAgaWYgKGFuaW1hdGlvbkNhbmNlbGxlZCB8fCAoaXNTdHJ1Y3R1cmFsICYmIGFuaW1hdGlvbkRldGFpbHMuZXZlbnQgIT09IGV2ZW50KSkge1xuICAgICAgICAgICAgb3B0aW9ucy5kb21PcGVyYXRpb24oKTtcbiAgICAgICAgICAgIHJ1bm5lci5lbmQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBpbiB0aGUgZXZlbnQgdGhhdCB0aGUgZWxlbWVudCBhbmltYXRpb24gd2FzIG5vdCBjYW5jZWxsZWQgb3IgYSBmb2xsb3ctdXAgYW5pbWF0aW9uXG4gICAgICAgICAgLy8gaXNuJ3QgYWxsb3dlZCB0byBhbmltYXRlIGZyb20gaGVyZSB0aGVuIHdlIG5lZWQgdG8gY2xlYXIgdGhlIHN0YXRlIG9mIHRoZSBlbGVtZW50XG4gICAgICAgICAgLy8gc28gdGhhdCBhbnkgZnV0dXJlIGFuaW1hdGlvbnMgd29uJ3QgcmVhZCB0aGUgZXhwaXJlZCBhbmltYXRpb24gZGF0YS5cbiAgICAgICAgICBpZiAoIWlzVmFsaWRBbmltYXRpb24pIHtcbiAgICAgICAgICAgIGNsZWFyRWxlbWVudEFuaW1hdGlvblN0YXRlKGVsZW1lbnQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoaXMgY29tYmluZWQgbXVsdGlwbGUgY2xhc3MgdG8gYWRkQ2xhc3MgLyByZW1vdmVDbGFzcyBpbnRvIGEgc2V0Q2xhc3MgZXZlbnRcbiAgICAgICAgLy8gc28gbG9uZyBhcyBhIHN0cnVjdHVyYWwgZXZlbnQgZGlkIG5vdCB0YWtlIG92ZXIgdGhlIGFuaW1hdGlvblxuICAgICAgICBldmVudCA9ICFhbmltYXRpb25EZXRhaWxzLnN0cnVjdHVyYWwgJiYgaGFzQW5pbWF0aW9uQ2xhc3NlcyhhbmltYXRpb25EZXRhaWxzLm9wdGlvbnMsIHRydWUpXG4gICAgICAgICAgICA/ICdzZXRDbGFzcydcbiAgICAgICAgICAgIDogYW5pbWF0aW9uRGV0YWlscy5ldmVudDtcblxuICAgICAgICBpZiAoYW5pbWF0aW9uRGV0YWlscy5zdHJ1Y3R1cmFsKSB7XG4gICAgICAgICAgY2xvc2VQYXJlbnRDbGFzc0Jhc2VkQW5pbWF0aW9ucyhwYXJlbnRFbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcmtFbGVtZW50QW5pbWF0aW9uU3RhdGUoZWxlbWVudCwgUlVOTklOR19TVEFURSk7XG4gICAgICAgIHZhciByZWFsUnVubmVyID0gJCRhbmltYXRpb24oZWxlbWVudCwgZXZlbnQsIGFuaW1hdGlvbkRldGFpbHMub3B0aW9ucyk7XG4gICAgICAgIHJlYWxSdW5uZXIuZG9uZShmdW5jdGlvbihzdGF0dXMpIHtcbiAgICAgICAgICBjbG9zZSghc3RhdHVzKTtcbiAgICAgICAgICB2YXIgYW5pbWF0aW9uRGV0YWlscyA9IGFjdGl2ZUFuaW1hdGlvbnNMb29rdXAuZ2V0KG5vZGUpO1xuICAgICAgICAgIGlmIChhbmltYXRpb25EZXRhaWxzICYmIGFuaW1hdGlvbkRldGFpbHMuY291bnRlciA9PT0gY291bnRlcikge1xuICAgICAgICAgICAgY2xlYXJFbGVtZW50QW5pbWF0aW9uU3RhdGUoZ2V0RG9tTm9kZShlbGVtZW50KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vdGlmeVByb2dyZXNzKHJ1bm5lciwgZXZlbnQsICdjbG9zZScsIHt9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gdGhpcyB3aWxsIHVwZGF0ZSB0aGUgcnVubmVyJ3MgZmxvdy1jb250cm9sIGV2ZW50cyBiYXNlZCBvblxuICAgICAgICAvLyB0aGUgYHJlYWxSdW5uZXJgIG9iamVjdC5cbiAgICAgICAgcnVubmVyLnNldEhvc3QocmVhbFJ1bm5lcik7XG4gICAgICAgIG5vdGlmeVByb2dyZXNzKHJ1bm5lciwgZXZlbnQsICdzdGFydCcsIHt9KTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcnVubmVyO1xuXG4gICAgICBmdW5jdGlvbiBub3RpZnlQcm9ncmVzcyhydW5uZXIsIGV2ZW50LCBwaGFzZSwgZGF0YSkge1xuICAgICAgICB0cmlnZ2VyQ2FsbGJhY2soZXZlbnQsIGVsZW1lbnQsIHBoYXNlLCBkYXRhKTtcbiAgICAgICAgcnVubmVyLnByb2dyZXNzKGV2ZW50LCBwaGFzZSwgZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNsb3NlKHJlamVjdCkgeyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgICAgICAgYXBwbHlBbmltYXRpb25DbGFzc2VzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBhcHBseUFuaW1hdGlvblN0eWxlcyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgb3B0aW9ucy5kb21PcGVyYXRpb24oKTtcbiAgICAgICAgcnVubmVyLmNvbXBsZXRlKCFyZWplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb3NlQ2hpbGRBbmltYXRpb25zKGVsZW1lbnQpIHtcbiAgICAgIHZhciBub2RlID0gZ2V0RG9tTm9kZShlbGVtZW50KTtcbiAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUucXVlcnlTZWxlY3RvckFsbCgnWycgKyBOR19BTklNQVRFX0FUVFJfTkFNRSArICddJyk7XG4gICAgICBmb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICB2YXIgc3RhdGUgPSBwYXJzZUludChjaGlsZC5nZXRBdHRyaWJ1dGUoTkdfQU5JTUFURV9BVFRSX05BTUUpKTtcbiAgICAgICAgdmFyIGFuaW1hdGlvbkRldGFpbHMgPSBhY3RpdmVBbmltYXRpb25zTG9va3VwLmdldChjaGlsZCk7XG4gICAgICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgICAgICBjYXNlIFJVTk5JTkdfU1RBVEU6XG4gICAgICAgICAgICBhbmltYXRpb25EZXRhaWxzLnJ1bm5lci5lbmQoKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgICBjYXNlIFBSRV9ESUdFU1RfU1RBVEU6XG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGV0YWlscykge1xuICAgICAgICAgICAgICBhY3RpdmVBbmltYXRpb25zTG9va3VwLnJlbW92ZShjaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJFbGVtZW50QW5pbWF0aW9uU3RhdGUoZWxlbWVudCkge1xuICAgICAgdmFyIG5vZGUgPSBnZXREb21Ob2RlKGVsZW1lbnQpO1xuICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoTkdfQU5JTUFURV9BVFRSX05BTUUpO1xuICAgICAgYWN0aXZlQW5pbWF0aW9uc0xvb2t1cC5yZW1vdmUobm9kZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNNYXRjaGluZ0VsZW1lbnQobm9kZU9yRWxtQSwgbm9kZU9yRWxtQikge1xuICAgICAgcmV0dXJuIGdldERvbU5vZGUobm9kZU9yRWxtQSkgPT09IGdldERvbU5vZGUobm9kZU9yRWxtQik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvc2VQYXJlbnRDbGFzc0Jhc2VkQW5pbWF0aW9ucyhzdGFydGluZ0VsZW1lbnQpIHtcbiAgICAgIHZhciBwYXJlbnROb2RlID0gZ2V0RG9tTm9kZShzdGFydGluZ0VsZW1lbnQpO1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoIXBhcmVudE5vZGUgfHwgcGFyZW50Tm9kZS5ub2RlVHlwZSAhPT0gRUxFTUVOVF9OT0RFKSBicmVhaztcblxuICAgICAgICB2YXIgYW5pbWF0aW9uRGV0YWlscyA9IGFjdGl2ZUFuaW1hdGlvbnNMb29rdXAuZ2V0KHBhcmVudE5vZGUpO1xuICAgICAgICBpZiAoYW5pbWF0aW9uRGV0YWlscykge1xuICAgICAgICAgIGV4YW1pbmVQYXJlbnRBbmltYXRpb24ocGFyZW50Tm9kZSwgYW5pbWF0aW9uRGV0YWlscyk7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgICAgIC8vIHNpbmNlIGFuaW1hdGlvbnMgYXJlIGRldGVjdGVkIGZyb20gQ1NTIGNsYXNzZXMsIHdlIG5lZWQgdG8gZmx1c2ggYWxsIHBhcmVudFxuICAgICAgLy8gY2xhc3MtYmFzZWQgYW5pbWF0aW9ucyBzbyB0aGF0IHRoZSBwYXJlbnQgY2xhc3NlcyBhcmUgYWxsIHByZXNlbnQgZm9yIGNoaWxkXG4gICAgICAvLyBhbmltYXRpb25zIHRvIHByb3Blcmx5IGZ1bmN0aW9uIChvdGhlcndpc2UgYW55IENTUyBzZWxlY3RvcnMgbWF5IG5vdCB3b3JrKVxuICAgICAgZnVuY3Rpb24gZXhhbWluZVBhcmVudEFuaW1hdGlvbihub2RlLCBhbmltYXRpb25EZXRhaWxzKSB7XG4gICAgICAgIC8vIGVudGVyL2xlYXZlL21vdmUgYWx3YXlzIGhhdmUgcHJpb3JpdHlcbiAgICAgICAgaWYgKGFuaW1hdGlvbkRldGFpbHMuc3RydWN0dXJhbCB8fCAhaGFzQW5pbWF0aW9uQ2xhc3NlcyhhbmltYXRpb25EZXRhaWxzLm9wdGlvbnMpKSByZXR1cm47XG5cbiAgICAgICAgaWYgKGFuaW1hdGlvbkRldGFpbHMuc3RhdGUgPT09IFJVTk5JTkdfU1RBVEUpIHtcbiAgICAgICAgICBhbmltYXRpb25EZXRhaWxzLnJ1bm5lci5lbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBjbGVhckVsZW1lbnRBbmltYXRpb25TdGF0ZShub2RlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcmVBbmltYXRpb25zQWxsb3dlZChlbGVtZW50LCBwYXJlbnRFbGVtZW50LCBldmVudCkge1xuICAgICAgdmFyIGJvZHlFbGVtZW50RGV0ZWN0ZWQgPSBmYWxzZTtcbiAgICAgIHZhciByb290RWxlbWVudERldGVjdGVkID0gZmFsc2U7XG4gICAgICB2YXIgcGFyZW50QW5pbWF0aW9uRGV0ZWN0ZWQgPSBmYWxzZTtcbiAgICAgIHZhciBhbmltYXRlQ2hpbGRyZW47XG5cbiAgICAgIHZhciBwYXJlbnRIb3N0ID0gZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfUElOX0RBVEEpO1xuICAgICAgaWYgKHBhcmVudEhvc3QpIHtcbiAgICAgICAgcGFyZW50RWxlbWVudCA9IHBhcmVudEhvc3Q7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChwYXJlbnRFbGVtZW50ICYmIHBhcmVudEVsZW1lbnQubGVuZ3RoKSB7XG4gICAgICAgIGlmICghcm9vdEVsZW1lbnREZXRlY3RlZCkge1xuICAgICAgICAgIC8vIGFuZ3VsYXIgZG9lc24ndCB3YW50IHRvIGF0dGVtcHQgdG8gYW5pbWF0ZSBlbGVtZW50cyBvdXRzaWRlIG9mIHRoZSBhcHBsaWNhdGlvblxuICAgICAgICAgIC8vIHRoZXJlZm9yZSB3ZSBuZWVkIHRvIGVuc3VyZSB0aGF0IHRoZSByb290RWxlbWVudCBpcyBhbiBhbmNlc3RvciBvZiB0aGUgY3VycmVudCBlbGVtZW50XG4gICAgICAgICAgcm9vdEVsZW1lbnREZXRlY3RlZCA9IGlzTWF0Y2hpbmdFbGVtZW50KHBhcmVudEVsZW1lbnQsICRyb290RWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IHBhcmVudEVsZW1lbnRbMF07XG4gICAgICAgIGlmIChwYXJlbnROb2RlLm5vZGVUeXBlICE9PSBFTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAvLyBubyBwb2ludCBpbiBpbnNwZWN0aW5nIHRoZSAjZG9jdW1lbnQgZWxlbWVudFxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRldGFpbHMgPSBhY3RpdmVBbmltYXRpb25zTG9va3VwLmdldChwYXJlbnROb2RlKSB8fCB7fTtcbiAgICAgICAgLy8gZWl0aGVyIGFuIGVudGVyLCBsZWF2ZSBvciBtb3ZlIGFuaW1hdGlvbiB3aWxsIGNvbW1lbmNlXG4gICAgICAgIC8vIHRoZXJlZm9yZSB3ZSBjYW4ndCBhbGxvdyBhbnkgYW5pbWF0aW9ucyB0byB0YWtlIHBsYWNlXG4gICAgICAgIC8vIGJ1dCBpZiBhIHBhcmVudCBhbmltYXRpb24gaXMgY2xhc3MtYmFzZWQgdGhlbiB0aGF0J3Mgb2tcbiAgICAgICAgaWYgKCFwYXJlbnRBbmltYXRpb25EZXRlY3RlZCkge1xuICAgICAgICAgIHBhcmVudEFuaW1hdGlvbkRldGVjdGVkID0gZGV0YWlscy5zdHJ1Y3R1cmFsIHx8IGRpc2FibGVkRWxlbWVudHNMb29rdXAuZ2V0KHBhcmVudE5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGFuaW1hdGVDaGlsZHJlbikgfHwgYW5pbWF0ZUNoaWxkcmVuID09PSB0cnVlKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gcGFyZW50RWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfQ0hJTERSRU5fREFUQSk7XG4gICAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGFuaW1hdGVDaGlsZHJlbiA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoZXJlIGlzIG5vIG5lZWQgdG8gY29udGludWUgdHJhdmVyc2luZyBhdCB0aGlzIHBvaW50XG4gICAgICAgIGlmIChwYXJlbnRBbmltYXRpb25EZXRlY3RlZCAmJiBhbmltYXRlQ2hpbGRyZW4gPT09IGZhbHNlKSBicmVhaztcblxuICAgICAgICBpZiAoIXJvb3RFbGVtZW50RGV0ZWN0ZWQpIHtcbiAgICAgICAgICAvLyBhbmd1bGFyIGRvZXNuJ3Qgd2FudCB0byBhdHRlbXB0IHRvIGFuaW1hdGUgZWxlbWVudHMgb3V0c2lkZSBvZiB0aGUgYXBwbGljYXRpb25cbiAgICAgICAgICAvLyB0aGVyZWZvcmUgd2UgbmVlZCB0byBlbnN1cmUgdGhhdCB0aGUgcm9vdEVsZW1lbnQgaXMgYW4gYW5jZXN0b3Igb2YgdGhlIGN1cnJlbnQgZWxlbWVudFxuICAgICAgICAgIHJvb3RFbGVtZW50RGV0ZWN0ZWQgPSBpc01hdGNoaW5nRWxlbWVudChwYXJlbnRFbGVtZW50LCAkcm9vdEVsZW1lbnQpO1xuICAgICAgICAgIGlmICghcm9vdEVsZW1lbnREZXRlY3RlZCkge1xuICAgICAgICAgICAgcGFyZW50SG9zdCA9IHBhcmVudEVsZW1lbnQuZGF0YShOR19BTklNQVRFX1BJTl9EQVRBKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnRIb3N0KSB7XG4gICAgICAgICAgICAgIHBhcmVudEVsZW1lbnQgPSBwYXJlbnRIb3N0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYm9keUVsZW1lbnREZXRlY3RlZCkge1xuICAgICAgICAgIC8vIHdlIGFsc28gbmVlZCB0byBlbnN1cmUgdGhhdCB0aGUgZWxlbWVudCBpcyBvciB3aWxsIGJlIGFwYXJ0IG9mIHRoZSBib2R5IGVsZW1lbnRcbiAgICAgICAgICAvLyBvdGhlcndpc2UgaXQgaXMgcG9pbnRsZXNzIHRvIGV2ZW4gaXNzdWUgYW4gYW5pbWF0aW9uIHRvIGJlIHJlbmRlcmVkXG4gICAgICAgICAgYm9keUVsZW1lbnREZXRlY3RlZCA9IGlzTWF0Y2hpbmdFbGVtZW50KHBhcmVudEVsZW1lbnQsIGJvZHlFbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmVudEVsZW1lbnQgPSBwYXJlbnRFbGVtZW50LnBhcmVudCgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWxsb3dBbmltYXRpb24gPSAhcGFyZW50QW5pbWF0aW9uRGV0ZWN0ZWQgfHwgYW5pbWF0ZUNoaWxkcmVuO1xuICAgICAgcmV0dXJuIGFsbG93QW5pbWF0aW9uICYmIHJvb3RFbGVtZW50RGV0ZWN0ZWQgJiYgYm9keUVsZW1lbnREZXRlY3RlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXJrRWxlbWVudEFuaW1hdGlvblN0YXRlKGVsZW1lbnQsIHN0YXRlLCBkZXRhaWxzKSB7XG4gICAgICBkZXRhaWxzID0gZGV0YWlscyB8fCB7fTtcbiAgICAgIGRldGFpbHMuc3RhdGUgPSBzdGF0ZTtcblxuICAgICAgdmFyIG5vZGUgPSBnZXREb21Ob2RlKGVsZW1lbnQpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoTkdfQU5JTUFURV9BVFRSX05BTUUsIHN0YXRlKTtcblxuICAgICAgdmFyIG9sZFZhbHVlID0gYWN0aXZlQW5pbWF0aW9uc0xvb2t1cC5nZXQobm9kZSk7XG4gICAgICB2YXIgbmV3VmFsdWUgPSBvbGRWYWx1ZVxuICAgICAgICAgID8gZXh0ZW5kKG9sZFZhbHVlLCBkZXRhaWxzKVxuICAgICAgICAgIDogZGV0YWlscztcbiAgICAgIGFjdGl2ZUFuaW1hdGlvbnNMb29rdXAucHV0KG5vZGUsIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH1dO1xufV07XG5cbnZhciAkJHJBRk11dGV4RmFjdG9yeSA9IFsnJCRyQUYnLCBmdW5jdGlvbigkJHJBRikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhc3NlZCA9IGZhbHNlO1xuICAgICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgcGFzc2VkID0gdHJ1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnVuY3Rpb24oZm4pIHtcbiAgICAgIHBhc3NlZCA/IGZuKCkgOiAkJHJBRihmbik7XG4gICAgfTtcbiAgfTtcbn1dO1xuXG52YXIgJCRBbmltYXRlUnVubmVyRmFjdG9yeSA9IFsnJHEnLCAnJCRyQUZNdXRleCcsIGZ1bmN0aW9uKCRxLCAkJHJBRk11dGV4KSB7XG4gIHZhciBJTklUSUFMX1NUQVRFID0gMDtcbiAgdmFyIERPTkVfUEVORElOR19TVEFURSA9IDE7XG4gIHZhciBET05FX0NPTVBMRVRFX1NUQVRFID0gMjtcblxuICBBbmltYXRlUnVubmVyLmNoYWluID0gZnVuY3Rpb24oY2hhaW4sIGNhbGxiYWNrKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcblxuICAgIG5leHQoKTtcbiAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgaWYgKGluZGV4ID09PSBjaGFpbi5sZW5ndGgpIHtcbiAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2hhaW5baW5kZXhdKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIG5leHQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBBbmltYXRlUnVubmVyLmFsbCA9IGZ1bmN0aW9uKHJ1bm5lcnMsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgc3RhdHVzID0gdHJ1ZTtcbiAgICBmb3JFYWNoKHJ1bm5lcnMsIGZ1bmN0aW9uKHJ1bm5lcikge1xuICAgICAgcnVubmVyLmRvbmUob25Qcm9ncmVzcyk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBvblByb2dyZXNzKHJlc3BvbnNlKSB7XG4gICAgICBzdGF0dXMgPSBzdGF0dXMgJiYgcmVzcG9uc2U7XG4gICAgICBpZiAoKytjb3VudCA9PT0gcnVubmVycy5sZW5ndGgpIHtcbiAgICAgICAgY2FsbGJhY2soc3RhdHVzKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gQW5pbWF0ZVJ1bm5lcihob3N0KSB7XG4gICAgdGhpcy5zZXRIb3N0KGhvc3QpO1xuXG4gICAgdGhpcy5fZG9uZUNhbGxiYWNrcyA9IFtdO1xuICAgIHRoaXMuX3J1bkluQW5pbWF0aW9uRnJhbWUgPSAkJHJBRk11dGV4KCk7XG4gICAgdGhpcy5fc3RhdGUgPSAwO1xuICB9XG5cbiAgQW5pbWF0ZVJ1bm5lci5wcm90b3R5cGUgPSB7XG4gICAgc2V0SG9zdDogZnVuY3Rpb24oaG9zdCkge1xuICAgICAgdGhpcy5ob3N0ID0gaG9zdCB8fCB7fTtcbiAgICB9LFxuXG4gICAgZG9uZTogZnVuY3Rpb24oZm4pIHtcbiAgICAgIGlmICh0aGlzLl9zdGF0ZSA9PT0gRE9ORV9DT01QTEVURV9TVEFURSkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZG9uZUNhbGxiYWNrcy5wdXNoKGZuKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcHJvZ3Jlc3M6IG5vb3AsXG5cbiAgICBnZXRQcm9taXNlOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5wcm9taXNlKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5wcm9taXNlID0gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgc2VsZi5kb25lKGZ1bmN0aW9uKHN0YXR1cykge1xuICAgICAgICAgICAgc3RhdHVzID09PSBmYWxzZSA/IHJlamVjdCgpIDogcmVzb2x2ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnByb21pc2U7XG4gICAgfSxcblxuICAgIHRoZW46IGZ1bmN0aW9uKHJlc29sdmVIYW5kbGVyLCByZWplY3RIYW5kbGVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRQcm9taXNlKCkudGhlbihyZXNvbHZlSGFuZGxlciwgcmVqZWN0SGFuZGxlcik7XG4gICAgfSxcblxuICAgICdjYXRjaCc6IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFByb21pc2UoKVsnY2F0Y2gnXShoYW5kbGVyKTtcbiAgICB9LFxuXG4gICAgJ2ZpbmFsbHknOiBmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRQcm9taXNlKClbJ2ZpbmFsbHknXShoYW5kbGVyKTtcbiAgICB9LFxuXG4gICAgcGF1c2U6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuaG9zdC5wYXVzZSkge1xuICAgICAgICB0aGlzLmhvc3QucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVzdW1lOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmhvc3QucmVzdW1lKSB7XG4gICAgICAgIHRoaXMuaG9zdC5yZXN1bWUoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmhvc3QuZW5kKSB7XG4gICAgICAgIHRoaXMuaG9zdC5lbmQoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3Jlc29sdmUodHJ1ZSk7XG4gICAgfSxcblxuICAgIGNhbmNlbDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5ob3N0LmNhbmNlbCkge1xuICAgICAgICB0aGlzLmhvc3QuY2FuY2VsKCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9yZXNvbHZlKGZhbHNlKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICBpZiAoc2VsZi5fc3RhdGUgPT09IElOSVRJQUxfU1RBVEUpIHtcbiAgICAgICAgc2VsZi5fc3RhdGUgPSBET05FX1BFTkRJTkdfU1RBVEU7XG4gICAgICAgIHNlbGYuX3J1bkluQW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5fcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfcmVzb2x2ZTogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIGlmICh0aGlzLl9zdGF0ZSAhPT0gRE9ORV9DT01QTEVURV9TVEFURSkge1xuICAgICAgICBmb3JFYWNoKHRoaXMuX2RvbmVDYWxsYmFja3MsIGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgZm4ocmVzcG9uc2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fZG9uZUNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IERPTkVfQ09NUExFVEVfU1RBVEU7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBBbmltYXRlUnVubmVyO1xufV07XG5cbnZhciAkJEFuaW1hdGlvblByb3ZpZGVyID0gWyckYW5pbWF0ZVByb3ZpZGVyJywgZnVuY3Rpb24oJGFuaW1hdGVQcm92aWRlcikge1xuICB2YXIgTkdfQU5JTUFURV9SRUZfQVRUUiA9ICduZy1hbmltYXRlLXJlZic7XG5cbiAgdmFyIGRyaXZlcnMgPSB0aGlzLmRyaXZlcnMgPSBbXTtcblxuICB2YXIgUlVOTkVSX1NUT1JBR0VfS0VZID0gJyQkYW5pbWF0aW9uUnVubmVyJztcblxuICBmdW5jdGlvbiBzZXRSdW5uZXIoZWxlbWVudCwgcnVubmVyKSB7XG4gICAgZWxlbWVudC5kYXRhKFJVTk5FUl9TVE9SQUdFX0tFWSwgcnVubmVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVJ1bm5lcihlbGVtZW50KSB7XG4gICAgZWxlbWVudC5yZW1vdmVEYXRhKFJVTk5FUl9TVE9SQUdFX0tFWSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRSdW5uZXIoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmRhdGEoUlVOTkVSX1NUT1JBR0VfS0VZKTtcbiAgfVxuXG4gIHRoaXMuJGdldCA9IFsnJCRqcUxpdGUnLCAnJHJvb3RTY29wZScsICckaW5qZWN0b3InLCAnJCRBbmltYXRlUnVubmVyJywgJyQkckFGU2NoZWR1bGVyJyxcbiAgICAgICBmdW5jdGlvbigkJGpxTGl0ZSwgICAkcm9vdFNjb3BlLCAgICRpbmplY3RvciwgICAkJEFuaW1hdGVSdW5uZXIsICAgJCRyQUZTY2hlZHVsZXIpIHtcblxuICAgIHZhciBhbmltYXRpb25RdWV1ZSA9IFtdO1xuICAgIHZhciBhcHBseUFuaW1hdGlvbkNsYXNzZXMgPSBhcHBseUFuaW1hdGlvbkNsYXNzZXNGYWN0b3J5KCQkanFMaXRlKTtcblxuICAgIHZhciB0b3RhbFBlbmRpbmdDbGFzc0Jhc2VkQW5pbWF0aW9ucyA9IDA7XG4gICAgdmFyIHRvdGFsQWN0aXZlQ2xhc3NCYXNlZEFuaW1hdGlvbnMgPSAwO1xuICAgIHZhciBjbGFzc0Jhc2VkQW5pbWF0aW9uc1F1ZXVlID0gW107XG5cbiAgICAvLyBUT0RPKG1hdHNrbyk6IGRvY3VtZW50IHRoZSBzaWduYXR1cmUgaW4gYSBiZXR0ZXIgd2F5XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gcHJlcGFyZUFuaW1hdGlvbk9wdGlvbnMob3B0aW9ucyk7XG4gICAgICB2YXIgaXNTdHJ1Y3R1cmFsID0gWydlbnRlcicsICdtb3ZlJywgJ2xlYXZlJ10uaW5kZXhPZihldmVudCkgPj0gMDtcblxuICAgICAgLy8gdGhlcmUgaXMgbm8gYW5pbWF0aW9uIGF0IHRoZSBjdXJyZW50IG1vbWVudCwgaG93ZXZlclxuICAgICAgLy8gdGhlc2UgcnVubmVyIG1ldGhvZHMgd2lsbCBnZXQgbGF0ZXIgdXBkYXRlZCB3aXRoIHRoZVxuICAgICAgLy8gbWV0aG9kcyBsZWFkaW5nIGludG8gdGhlIGRyaXZlcidzIGVuZC9jYW5jZWwgbWV0aG9kc1xuICAgICAgLy8gZm9yIG5vdyB0aGV5IGp1c3Qgc3RvcCB0aGUgYW5pbWF0aW9uIGZyb20gc3RhcnRpbmdcbiAgICAgIHZhciBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKHtcbiAgICAgICAgZW5kOiBmdW5jdGlvbigpIHsgY2xvc2UoKTsgfSxcbiAgICAgICAgY2FuY2VsOiBmdW5jdGlvbigpIHsgY2xvc2UodHJ1ZSk7IH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIWRyaXZlcnMubGVuZ3RoKSB7XG4gICAgICAgIGNsb3NlKCk7XG4gICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgICB9XG5cbiAgICAgIHNldFJ1bm5lcihlbGVtZW50LCBydW5uZXIpO1xuXG4gICAgICB2YXIgY2xhc3NlcyA9IG1lcmdlQ2xhc3NlcyhlbGVtZW50LmF0dHIoJ2NsYXNzJyksIG1lcmdlQ2xhc3NlcyhvcHRpb25zLmFkZENsYXNzLCBvcHRpb25zLnJlbW92ZUNsYXNzKSk7XG4gICAgICB2YXIgdGVtcENsYXNzZXMgPSBvcHRpb25zLnRlbXBDbGFzc2VzO1xuICAgICAgaWYgKHRlbXBDbGFzc2VzKSB7XG4gICAgICAgIGNsYXNzZXMgKz0gJyAnICsgdGVtcENsYXNzZXM7XG4gICAgICAgIG9wdGlvbnMudGVtcENsYXNzZXMgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2xhc3NCYXNlZEluZGV4O1xuICAgICAgaWYgKCFpc1N0cnVjdHVyYWwpIHtcbiAgICAgICAgY2xhc3NCYXNlZEluZGV4ID0gdG90YWxQZW5kaW5nQ2xhc3NCYXNlZEFuaW1hdGlvbnM7XG4gICAgICAgIHRvdGFsUGVuZGluZ0NsYXNzQmFzZWRBbmltYXRpb25zICs9IDE7XG4gICAgICB9XG5cbiAgICAgIGFuaW1hdGlvblF1ZXVlLnB1c2goe1xuICAgICAgICAvLyB0aGlzIGRhdGEgaXMgdXNlZCBieSB0aGUgcG9zdERpZ2VzdCBjb2RlIGFuZCBwYXNzZWQgaW50b1xuICAgICAgICAvLyB0aGUgZHJpdmVyIHN0ZXAgZnVuY3Rpb25cbiAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgY2xhc3NlczogY2xhc3NlcyxcbiAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICBjbGFzc0Jhc2VkSW5kZXg6IGNsYXNzQmFzZWRJbmRleCxcbiAgICAgICAgc3RydWN0dXJhbDogaXNTdHJ1Y3R1cmFsLFxuICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgICAgICBiZWZvcmVTdGFydDogYmVmb3JlU3RhcnQsXG4gICAgICAgIGNsb3NlOiBjbG9zZVxuICAgICAgfSk7XG5cbiAgICAgIGVsZW1lbnQub24oJyRkZXN0cm95JywgaGFuZGxlRGVzdHJveWVkRWxlbWVudCk7XG5cbiAgICAgIC8vIHdlIG9ubHkgd2FudCB0aGVyZSB0byBiZSBvbmUgZnVuY3Rpb24gY2FsbGVkIHdpdGhpbiB0aGUgcG9zdCBkaWdlc3RcbiAgICAgIC8vIGJsb2NrLiBUaGlzIHdheSB3ZSBjYW4gZ3JvdXAgYW5pbWF0aW9ucyBmb3IgYWxsIHRoZSBhbmltYXRpb25zIHRoYXRcbiAgICAgIC8vIHdlcmUgYXBhcnQgb2YgdGhlIHNhbWUgcG9zdERpZ2VzdCBmbHVzaCBjYWxsLlxuICAgICAgaWYgKGFuaW1hdGlvblF1ZXVlLmxlbmd0aCA+IDEpIHJldHVybiBydW5uZXI7XG5cbiAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICB0b3RhbEFjdGl2ZUNsYXNzQmFzZWRBbmltYXRpb25zID0gdG90YWxQZW5kaW5nQ2xhc3NCYXNlZEFuaW1hdGlvbnM7XG4gICAgICAgIHRvdGFsUGVuZGluZ0NsYXNzQmFzZWRBbmltYXRpb25zID0gMDtcbiAgICAgICAgY2xhc3NCYXNlZEFuaW1hdGlvbnNRdWV1ZS5sZW5ndGggPSAwO1xuXG4gICAgICAgIHZhciBhbmltYXRpb25zID0gW107XG4gICAgICAgIGZvckVhY2goYW5pbWF0aW9uUXVldWUsIGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgICAgICAgLy8gdGhlIGVsZW1lbnQgd2FzIGRlc3Ryb3llZCBlYXJseSBvbiB3aGljaCByZW1vdmVkIHRoZSBydW5uZXJcbiAgICAgICAgICAvLyBmb3JtIGl0cyBzdG9yYWdlLiBUaGlzIG1lYW5zIHdlIGNhbid0IGFuaW1hdGUgdGhpcyBlbGVtZW50XG4gICAgICAgICAgLy8gYXQgYWxsIGFuZCBpdCBhbHJlYWR5IGhhcyBiZWVuIGNsb3NlZCBkdWUgdG8gZGVzdHJ1Y3Rpb24uXG4gICAgICAgICAgaWYgKGdldFJ1bm5lcihlbnRyeS5lbGVtZW50KSkge1xuICAgICAgICAgICAgYW5pbWF0aW9ucy5wdXNoKGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIG5vdyBhbnkgZnV0dXJlIGFuaW1hdGlvbnMgd2lsbCBiZSBpbiBhbm90aGVyIHBvc3REaWdlc3RcbiAgICAgICAgYW5pbWF0aW9uUXVldWUubGVuZ3RoID0gMDtcblxuICAgICAgICBmb3JFYWNoKGdyb3VwQW5pbWF0aW9ucyhhbmltYXRpb25zKSwgZnVuY3Rpb24oYW5pbWF0aW9uRW50cnkpIHtcbiAgICAgICAgICBpZiAoYW5pbWF0aW9uRW50cnkuc3RydWN0dXJhbCkge1xuICAgICAgICAgICAgdHJpZ2dlckFuaW1hdGlvblN0YXJ0KCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsYXNzQmFzZWRBbmltYXRpb25zUXVldWUucHVzaCh7XG4gICAgICAgICAgICAgIG5vZGU6IGdldERvbU5vZGUoYW5pbWF0aW9uRW50cnkuZWxlbWVudCksXG4gICAgICAgICAgICAgIGZuOiB0cmlnZ2VyQW5pbWF0aW9uU3RhcnRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uRW50cnkuY2xhc3NCYXNlZEluZGV4ID09PSB0b3RhbEFjdGl2ZUNsYXNzQmFzZWRBbmltYXRpb25zIC0gMSkge1xuICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHNvcnQgZWFjaCBvZiB0aGUgYW5pbWF0aW9ucyBpbiBvcmRlciBvZiBwYXJlbnQgdG8gY2hpbGRcbiAgICAgICAgICAgICAgLy8gcmVsYXRpb25zaGlwcy4gVGhpcyBlbnN1cmVzIHRoYXQgdGhlIGNoaWxkIGNsYXNzZXMgYXJlIGFwcGxpZWQgYXQgdGhlXG4gICAgICAgICAgICAgIC8vIHJpZ2h0IHRpbWUuXG4gICAgICAgICAgICAgIGNsYXNzQmFzZWRBbmltYXRpb25zUXVldWUgPSBjbGFzc0Jhc2VkQW5pbWF0aW9uc1F1ZXVlLnNvcnQoZnVuY3Rpb24oYSxiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGIubm9kZS5jb250YWlucyhhLm5vZGUpO1xuICAgICAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnkuZm47XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICQkckFGU2NoZWR1bGVyKGNsYXNzQmFzZWRBbmltYXRpb25zUXVldWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIHRyaWdnZXJBbmltYXRpb25TdGFydCgpIHtcbiAgICAgICAgICAgIC8vIGl0J3MgaW1wb3J0YW50IHRoYXQgd2UgYXBwbHkgdGhlIGBuZy1hbmltYXRlYCBDU1MgY2xhc3MgYW5kIHRoZVxuICAgICAgICAgICAgLy8gdGVtcG9yYXJ5IGNsYXNzZXMgYmVmb3JlIHdlIGRvIGFueSBkcml2ZXIgaW52b2tpbmcgc2luY2UgdGhlc2VcbiAgICAgICAgICAgIC8vIENTUyBjbGFzc2VzIG1heSBiZSByZXF1aXJlZCBmb3IgcHJvcGVyIENTUyBkZXRlY3Rpb24uXG4gICAgICAgICAgICBhbmltYXRpb25FbnRyeS5iZWZvcmVTdGFydCgpO1xuXG4gICAgICAgICAgICB2YXIgc3RhcnRBbmltYXRpb25GbiwgY2xvc2VGbiA9IGFuaW1hdGlvbkVudHJ5LmNsb3NlO1xuXG4gICAgICAgICAgICAvLyBpbiB0aGUgZXZlbnQgdGhhdCB0aGUgZWxlbWVudCB3YXMgcmVtb3ZlZCBiZWZvcmUgdGhlIGRpZ2VzdCBydW5zIG9yXG4gICAgICAgICAgICAvLyBkdXJpbmcgdGhlIFJBRiBzZXF1ZW5jaW5nIHRoZW4gd2Ugc2hvdWxkIG5vdCB0cmlnZ2VyIHRoZSBhbmltYXRpb24uXG4gICAgICAgICAgICB2YXIgdGFyZ2V0RWxlbWVudCA9IGFuaW1hdGlvbkVudHJ5LmFuY2hvcnNcbiAgICAgICAgICAgICAgICA/IChhbmltYXRpb25FbnRyeS5mcm9tLmVsZW1lbnQgfHwgYW5pbWF0aW9uRW50cnkudG8uZWxlbWVudClcbiAgICAgICAgICAgICAgICA6IGFuaW1hdGlvbkVudHJ5LmVsZW1lbnQ7XG5cbiAgICAgICAgICAgIGlmIChnZXRSdW5uZXIodGFyZ2V0RWxlbWVudCkgJiYgZ2V0RG9tTm9kZSh0YXJnZXRFbGVtZW50KS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgIHZhciBvcGVyYXRpb24gPSBpbnZva2VGaXJzdERyaXZlcihhbmltYXRpb25FbnRyeSk7XG4gICAgICAgICAgICAgIGlmIChvcGVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBzdGFydEFuaW1hdGlvbkZuID0gb3BlcmF0aW9uLnN0YXJ0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghc3RhcnRBbmltYXRpb25Gbikge1xuICAgICAgICAgICAgICBjbG9zZUZuKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uUnVubmVyID0gc3RhcnRBbmltYXRpb25GbigpO1xuICAgICAgICAgICAgICBhbmltYXRpb25SdW5uZXIuZG9uZShmdW5jdGlvbihzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICBjbG9zZUZuKCFzdGF0dXMpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdXBkYXRlQW5pbWF0aW9uUnVubmVycyhhbmltYXRpb25FbnRyeSwgYW5pbWF0aW9uUnVubmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBydW5uZXI7XG5cbiAgICAgIC8vIFRPRE8obWF0c2tvKTogY2hhbmdlIHRvIHJlZmVyZW5jZSBub2Rlc1xuICAgICAgZnVuY3Rpb24gZ2V0QW5jaG9yTm9kZXMobm9kZSkge1xuICAgICAgICB2YXIgU0VMRUNUT1IgPSAnWycgKyBOR19BTklNQVRFX1JFRl9BVFRSICsgJ10nO1xuICAgICAgICB2YXIgaXRlbXMgPSBub2RlLmhhc0F0dHJpYnV0ZShOR19BTklNQVRFX1JFRl9BVFRSKVxuICAgICAgICAgICAgICA/IFtub2RlXVxuICAgICAgICAgICAgICA6IG5vZGUucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUik7XG4gICAgICAgIHZhciBhbmNob3JzID0gW107XG4gICAgICAgIGZvckVhY2goaXRlbXMsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICB2YXIgYXR0ciA9IG5vZGUuZ2V0QXR0cmlidXRlKE5HX0FOSU1BVEVfUkVGX0FUVFIpO1xuICAgICAgICAgIGlmIChhdHRyICYmIGF0dHIubGVuZ3RoKSB7XG4gICAgICAgICAgICBhbmNob3JzLnB1c2gobm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFuY2hvcnM7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdyb3VwQW5pbWF0aW9ucyhhbmltYXRpb25zKSB7XG4gICAgICAgIHZhciBwcmVwYXJlZEFuaW1hdGlvbnMgPSBbXTtcbiAgICAgICAgdmFyIHJlZkxvb2t1cCA9IHt9O1xuICAgICAgICBmb3JFYWNoKGFuaW1hdGlvbnMsIGZ1bmN0aW9uKGFuaW1hdGlvbiwgaW5kZXgpIHtcbiAgICAgICAgICB2YXIgZWxlbWVudCA9IGFuaW1hdGlvbi5lbGVtZW50O1xuICAgICAgICAgIHZhciBub2RlID0gZ2V0RG9tTm9kZShlbGVtZW50KTtcbiAgICAgICAgICB2YXIgZXZlbnQgPSBhbmltYXRpb24uZXZlbnQ7XG4gICAgICAgICAgdmFyIGVudGVyT3JNb3ZlID0gWydlbnRlcicsICdtb3ZlJ10uaW5kZXhPZihldmVudCkgPj0gMDtcbiAgICAgICAgICB2YXIgYW5jaG9yTm9kZXMgPSBhbmltYXRpb24uc3RydWN0dXJhbCA/IGdldEFuY2hvck5vZGVzKG5vZGUpIDogW107XG5cbiAgICAgICAgICBpZiAoYW5jaG9yTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gZW50ZXJPck1vdmUgPyAndG8nIDogJ2Zyb20nO1xuXG4gICAgICAgICAgICBmb3JFYWNoKGFuY2hvck5vZGVzLCBmdW5jdGlvbihhbmNob3IpIHtcbiAgICAgICAgICAgICAgdmFyIGtleSA9IGFuY2hvci5nZXRBdHRyaWJ1dGUoTkdfQU5JTUFURV9SRUZfQVRUUik7XG4gICAgICAgICAgICAgIHJlZkxvb2t1cFtrZXldID0gcmVmTG9va3VwW2tleV0gfHwge307XG4gICAgICAgICAgICAgIHJlZkxvb2t1cFtrZXldW2RpcmVjdGlvbl0gPSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uSUQ6IGluZGV4LFxuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGpxTGl0ZShhbmNob3IpXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJlcGFyZWRBbmltYXRpb25zLnB1c2goYW5pbWF0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciB1c2VkSW5kaWNlc0xvb2t1cCA9IHt9O1xuICAgICAgICB2YXIgYW5jaG9yR3JvdXBzID0ge307XG4gICAgICAgIGZvckVhY2gocmVmTG9va3VwLCBmdW5jdGlvbihvcGVyYXRpb25zLCBrZXkpIHtcbiAgICAgICAgICB2YXIgZnJvbSA9IG9wZXJhdGlvbnMuZnJvbTtcbiAgICAgICAgICB2YXIgdG8gPSBvcGVyYXRpb25zLnRvO1xuXG4gICAgICAgICAgaWYgKCFmcm9tIHx8ICF0bykge1xuICAgICAgICAgICAgLy8gb25seSBvbmUgb2YgdGhlc2UgaXMgc2V0IHRoZXJlZm9yZSB3ZSBjYW4ndCBoYXZlIGFuXG4gICAgICAgICAgICAvLyBhbmNob3IgYW5pbWF0aW9uIHNpbmNlIGFsbCB0aHJlZSBwaWVjZXMgYXJlIHJlcXVpcmVkXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBmcm9tID8gZnJvbS5hbmltYXRpb25JRCA6IHRvLmFuaW1hdGlvbklEO1xuICAgICAgICAgICAgdmFyIGluZGV4S2V5ID0gaW5kZXgudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGlmICghdXNlZEluZGljZXNMb29rdXBbaW5kZXhLZXldKSB7XG4gICAgICAgICAgICAgIHVzZWRJbmRpY2VzTG9va3VwW2luZGV4S2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgIHByZXBhcmVkQW5pbWF0aW9ucy5wdXNoKGFuaW1hdGlvbnNbaW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZnJvbUFuaW1hdGlvbiA9IGFuaW1hdGlvbnNbZnJvbS5hbmltYXRpb25JRF07XG4gICAgICAgICAgdmFyIHRvQW5pbWF0aW9uID0gYW5pbWF0aW9uc1t0by5hbmltYXRpb25JRF07XG4gICAgICAgICAgdmFyIGxvb2t1cEtleSA9IGZyb20uYW5pbWF0aW9uSUQudG9TdHJpbmcoKTtcbiAgICAgICAgICBpZiAoIWFuY2hvckdyb3Vwc1tsb29rdXBLZXldKSB7XG4gICAgICAgICAgICB2YXIgZ3JvdXAgPSBhbmNob3JHcm91cHNbbG9va3VwS2V5XSA9IHtcbiAgICAgICAgICAgICAgc3RydWN0dXJhbDogdHJ1ZSxcbiAgICAgICAgICAgICAgYmVmb3JlU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGZyb21BbmltYXRpb24uYmVmb3JlU3RhcnQoKTtcbiAgICAgICAgICAgICAgICB0b0FuaW1hdGlvbi5iZWZvcmVTdGFydCgpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZnJvbUFuaW1hdGlvbi5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHRvQW5pbWF0aW9uLmNsb3NlKCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGNsYXNzZXM6IGNzc0NsYXNzZXNJbnRlcnNlY3Rpb24oZnJvbUFuaW1hdGlvbi5jbGFzc2VzLCB0b0FuaW1hdGlvbi5jbGFzc2VzKSxcbiAgICAgICAgICAgICAgZnJvbTogZnJvbUFuaW1hdGlvbixcbiAgICAgICAgICAgICAgdG86IHRvQW5pbWF0aW9uLFxuICAgICAgICAgICAgICBhbmNob3JzOiBbXSAvLyBUT0RPKG1hdHNrbyk6IGNoYW5nZSB0byByZWZlcmVuY2Ugbm9kZXNcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIHRoZSBhbmNob3IgYW5pbWF0aW9ucyByZXF1aXJlIHRoYXQgdGhlIGZyb20gYW5kIHRvIGVsZW1lbnRzIGJvdGggaGF2ZSBhdCBsZWFzdFxuICAgICAgICAgICAgLy8gb25lIHNoYXJlZCBDU1MgY2xhc3Mgd2hpY2ggZWZmaWN0aXZlbHkgbWFycmllcyB0aGUgdHdvIGVsZW1lbnRzIHRvZ2V0aGVyIHRvIHVzZVxuICAgICAgICAgICAgLy8gdGhlIHNhbWUgYW5pbWF0aW9uIGRyaXZlciBhbmQgdG8gcHJvcGVybHkgc2VxdWVuY2UgdGhlIGFuY2hvciBhbmltYXRpb24uXG4gICAgICAgICAgICBpZiAoZ3JvdXAuY2xhc3Nlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcHJlcGFyZWRBbmltYXRpb25zLnB1c2goZ3JvdXApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcHJlcGFyZWRBbmltYXRpb25zLnB1c2goZnJvbUFuaW1hdGlvbik7XG4gICAgICAgICAgICAgIHByZXBhcmVkQW5pbWF0aW9ucy5wdXNoKHRvQW5pbWF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhbmNob3JHcm91cHNbbG9va3VwS2V5XS5hbmNob3JzLnB1c2goe1xuICAgICAgICAgICAgJ291dCc6IGZyb20uZWxlbWVudCwgJ2luJzogdG8uZWxlbWVudFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcHJlcGFyZWRBbmltYXRpb25zO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjc3NDbGFzc2VzSW50ZXJzZWN0aW9uKGEsYikge1xuICAgICAgICBhID0gYS5zcGxpdCgnICcpO1xuICAgICAgICBiID0gYi5zcGxpdCgnICcpO1xuICAgICAgICB2YXIgbWF0Y2hlcyA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBhYSA9IGFbaV07XG4gICAgICAgICAgaWYgKGFhLnN1YnN0cmluZygwLDMpID09PSAnbmctJykgY29udGludWU7XG5cbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGIubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChhYSA9PT0gYltqXSkge1xuICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goYWEpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWF0Y2hlcy5qb2luKCcgJyk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGludm9rZUZpcnN0RHJpdmVyKGFuaW1hdGlvbkRldGFpbHMpIHtcbiAgICAgICAgLy8gd2UgbG9vcCBpbiByZXZlcnNlIG9yZGVyIHNpbmNlIHRoZSBtb3JlIGdlbmVyYWwgZHJpdmVycyAobGlrZSBDU1MgYW5kIEpTKVxuICAgICAgICAvLyBtYXkgYXR0ZW1wdCBtb3JlIGVsZW1lbnRzLCBidXQgY3VzdG9tIGRyaXZlcnMgYXJlIG1vcmUgcGFydGljdWxhclxuICAgICAgICBmb3IgKHZhciBpID0gZHJpdmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHZhciBkcml2ZXJOYW1lID0gZHJpdmVyc1tpXTtcbiAgICAgICAgICBpZiAoISRpbmplY3Rvci5oYXMoZHJpdmVyTmFtZSkpIGNvbnRpbnVlOyAvLyBUT0RPKG1hdHNrbyk6IHJlbW92ZSB0aGlzIGNoZWNrXG5cbiAgICAgICAgICB2YXIgZmFjdG9yeSA9ICRpbmplY3Rvci5nZXQoZHJpdmVyTmFtZSk7XG4gICAgICAgICAgdmFyIGRyaXZlciA9IGZhY3RvcnkoYW5pbWF0aW9uRGV0YWlscyk7XG4gICAgICAgICAgaWYgKGRyaXZlcikge1xuICAgICAgICAgICAgcmV0dXJuIGRyaXZlcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYmVmb3JlU3RhcnQoKSB7XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoTkdfQU5JTUFURV9DTEFTU05BTUUpO1xuICAgICAgICBpZiAodGVtcENsYXNzZXMpIHtcbiAgICAgICAgICAkJGpxTGl0ZS5hZGRDbGFzcyhlbGVtZW50LCB0ZW1wQ2xhc3Nlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdXBkYXRlQW5pbWF0aW9uUnVubmVycyhhbmltYXRpb24sIG5ld1J1bm5lcikge1xuICAgICAgICBpZiAoYW5pbWF0aW9uLmZyb20gJiYgYW5pbWF0aW9uLnRvKSB7XG4gICAgICAgICAgdXBkYXRlKGFuaW1hdGlvbi5mcm9tLmVsZW1lbnQpO1xuICAgICAgICAgIHVwZGF0ZShhbmltYXRpb24udG8uZWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBkYXRlKGFuaW1hdGlvbi5lbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZShlbGVtZW50KSB7XG4gICAgICAgICAgZ2V0UnVubmVyKGVsZW1lbnQpLnNldEhvc3QobmV3UnVubmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVEZXN0cm95ZWRFbGVtZW50KCkge1xuICAgICAgICB2YXIgcnVubmVyID0gZ2V0UnVubmVyKGVsZW1lbnQpO1xuICAgICAgICBpZiAocnVubmVyICYmIChldmVudCAhPT0gJ2xlYXZlJyB8fCAhb3B0aW9ucy4kJGRvbU9wZXJhdGlvbkZpcmVkKSkge1xuICAgICAgICAgIHJ1bm5lci5lbmQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjbG9zZShyZWplY3RlZCkgeyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgICAgICAgZWxlbWVudC5vZmYoJyRkZXN0cm95JywgaGFuZGxlRGVzdHJveWVkRWxlbWVudCk7XG4gICAgICAgIHJlbW92ZVJ1bm5lcihlbGVtZW50KTtcblxuICAgICAgICBhcHBseUFuaW1hdGlvbkNsYXNzZXMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIGFwcGx5QW5pbWF0aW9uU3R5bGVzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBvcHRpb25zLmRvbU9wZXJhdGlvbigpO1xuXG4gICAgICAgIGlmICh0ZW1wQ2xhc3Nlcykge1xuICAgICAgICAgICQkanFMaXRlLnJlbW92ZUNsYXNzKGVsZW1lbnQsIHRlbXBDbGFzc2VzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoTkdfQU5JTUFURV9DTEFTU05BTUUpO1xuICAgICAgICBydW5uZXIuY29tcGxldGUoIXJlamVjdGVkKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XTtcbn1dO1xuXG4vKiBnbG9iYWwgYW5ndWxhckFuaW1hdGVNb2R1bGU6IHRydWUsXG5cbiAgICQkckFGTXV0ZXhGYWN0b3J5LFxuICAgJCRyQUZTY2hlZHVsZXJGYWN0b3J5LFxuICAgJCRBbmltYXRlQ2hpbGRyZW5EaXJlY3RpdmUsXG4gICAkJEFuaW1hdGVSdW5uZXJGYWN0b3J5LFxuICAgJCRBbmltYXRlUXVldWVQcm92aWRlcixcbiAgICQkQW5pbWF0aW9uUHJvdmlkZXIsXG4gICAkQW5pbWF0ZUNzc1Byb3ZpZGVyLFxuICAgJCRBbmltYXRlQ3NzRHJpdmVyUHJvdmlkZXIsXG4gICAkJEFuaW1hdGVKc1Byb3ZpZGVyLFxuICAgJCRBbmltYXRlSnNEcml2ZXJQcm92aWRlcixcbiovXG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbmdBbmltYXRlXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGUgYG5nQW5pbWF0ZWAgbW9kdWxlIHByb3ZpZGVzIHN1cHBvcnQgZm9yIENTUy1iYXNlZCBhbmltYXRpb25zIChrZXlmcmFtZXMgYW5kIHRyYW5zaXRpb25zKSBhcyB3ZWxsIGFzIEphdmFTY3JpcHQtYmFzZWQgYW5pbWF0aW9ucyB2aWFcbiAqIGNhbGxiYWNrIGhvb2tzLiBBbmltYXRpb25zIGFyZSBub3QgZW5hYmxlZCBieSBkZWZhdWx0LCBob3dldmVyLCBieSBpbmNsdWRpbmcgYG5nQW5pbWF0ZWAgdGhlbiB0aGUgYW5pbWF0aW9uIGhvb2tzIGFyZSBlbmFibGVkIGZvciBhbiBBbmd1bGFyIGFwcC5cbiAqXG4gKiA8ZGl2IGRvYy1tb2R1bGUtY29tcG9uZW50cz1cIm5nQW5pbWF0ZVwiPjwvZGl2PlxuICpcbiAqICMgVXNhZ2VcbiAqIFNpbXBseSBwdXQsIHRoZXJlIGFyZSB0d28gd2F5cyB0byBtYWtlIHVzZSBvZiBhbmltYXRpb25zIHdoZW4gbmdBbmltYXRlIGlzIHVzZWQ6IGJ5IHVzaW5nICoqQ1NTKiogYW5kICoqSmF2YVNjcmlwdCoqLiBUaGUgZm9ybWVyIHdvcmtzIHB1cmVseSBiYXNlZFxuICogdXNpbmcgQ1NTIChieSB1c2luZyBtYXRjaGluZyBDU1Mgc2VsZWN0b3JzL3N0eWxlcykgYW5kIHRoZSBsYXR0ZXIgdHJpZ2dlcnMgYW5pbWF0aW9ucyB0aGF0IGFyZSByZWdpc3RlcmVkIHZpYSBgbW9kdWxlLmFuaW1hdGlvbigpYC4gRm9yXG4gKiBib3RoIENTUyBhbmQgSlMgYW5pbWF0aW9ucyB0aGUgc29sZSByZXF1aXJlbWVudCBpcyB0byBoYXZlIGEgbWF0Y2hpbmcgYENTUyBjbGFzc2AgdGhhdCBleGlzdHMgYm90aCBpbiB0aGUgcmVnaXN0ZXJlZCBhbmltYXRpb24gYW5kIHdpdGhpblxuICogdGhlIEhUTUwgZWxlbWVudCB0aGF0IHRoZSBhbmltYXRpb24gd2lsbCBiZSB0cmlnZ2VyZWQgb24uXG4gKlxuICogIyMgRGlyZWN0aXZlIFN1cHBvcnRcbiAqIFRoZSBmb2xsb3dpbmcgZGlyZWN0aXZlcyBhcmUgXCJhbmltYXRpb24gYXdhcmVcIjpcbiAqXG4gKiB8IERpcmVjdGl2ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU3VwcG9ydGVkIEFuaW1hdGlvbnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0I2FuaW1hdGlvbnMgbmdSZXBlYXR9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVudGVyLCBsZWF2ZSBhbmQgbW92ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IHtAbGluayBuZ1JvdXRlLmRpcmVjdGl2ZTpuZ1ZpZXcjYW5pbWF0aW9ucyBuZ1ZpZXd9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW50ZXIgYW5kIGxlYXZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0luY2x1ZGUjYW5pbWF0aW9ucyBuZ0luY2x1ZGV9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbnRlciBhbmQgbGVhdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nU3dpdGNoI2FuaW1hdGlvbnMgbmdTd2l0Y2h9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVudGVyIGFuZCBsZWF2ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IHtAbGluayBuZy5kaXJlY3RpdmU6bmdJZiNhbmltYXRpb25zIG5nSWZ9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW50ZXIgYW5kIGxlYXZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzI2FuaW1hdGlvbnMgbmdDbGFzc30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhZGQgYW5kIHJlbW92ZSAodGhlIENTUyBjbGFzcyhlcykgcHJlc2VudCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nU2hvdyNhbmltYXRpb25zIG5nU2hvd30gJiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSGlkZSNhbmltYXRpb25zIG5nSGlkZX0gICAgICAgICAgICB8IGFkZCBhbmQgcmVtb3ZlICh0aGUgbmctaGlkZSBjbGFzcyB2YWx1ZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSNhbmltYXRpb24taG9va3MgZm9ybX0gJiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWwjYW5pbWF0aW9uLWhvb2tzIG5nTW9kZWx9ICAgIHwgYWRkIGFuZCByZW1vdmUgKGRpcnR5LCBwcmlzdGluZSwgdmFsaWQsIGludmFsaWQgJiBhbGwgb3RoZXIgdmFsaWRhdGlvbnMpIHxcbiAqIHwge0BsaW5rIG1vZHVsZTpuZ01lc3NhZ2VzI2FuaW1hdGlvbnMgbmdNZXNzYWdlc30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhZGQgYW5kIHJlbW92ZSAobmctYWN0aXZlICYgbmctaW5hY3RpdmUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCB7QGxpbmsgbW9kdWxlOm5nTWVzc2FnZXMjYW5pbWF0aW9ucyBuZ01lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVudGVyIGFuZCBsZWF2ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKlxuICogKE1vcmUgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGJ5IHZpc2l0aW5nIGVhY2ggdGhlIGRvY3VtZW50YXRpb24gYXNzb2NpYXRlZCB3aXRoIGVhY2ggZGlyZWN0aXZlLilcbiAqXG4gKiAjIyBDU1MtYmFzZWQgQW5pbWF0aW9uc1xuICpcbiAqIENTUy1iYXNlZCBhbmltYXRpb25zIHdpdGggbmdBbmltYXRlIGFyZSB1bmlxdWUgc2luY2UgdGhleSByZXF1aXJlIG5vIEphdmFTY3JpcHQgY29kZSBhdCBhbGwuIEJ5IHVzaW5nIGEgQ1NTIGNsYXNzIHRoYXQgd2UgcmVmZXJlbmNlIGJldHdlZW4gb3VyIEhUTUxcbiAqIGFuZCBDU1MgY29kZSB3ZSBjYW4gY3JlYXRlIGFuIGFuaW1hdGlvbiB0aGF0IHdpbGwgYmUgcGlja2VkIHVwIGJ5IEFuZ3VsYXIgd2hlbiBhbiB0aGUgdW5kZXJseWluZyBkaXJlY3RpdmUgcGVyZm9ybXMgYW4gb3BlcmF0aW9uLlxuICpcbiAqIFRoZSBleGFtcGxlIGJlbG93IHNob3dzIGhvdyBhbiBgZW50ZXJgIGFuaW1hdGlvbiBjYW4gYmUgbWFkZSBwb3NzaWJsZSBvbiBhIGVsZW1lbnQgdXNpbmcgYG5nLWlmYDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IG5nLWlmPVwiYm9vbFwiIGNsYXNzPVwiZmFkZVwiPlxuICogICAgRmFkZSBtZSBpbiBvdXRcbiAqIDwvZGl2PlxuICogPGJ1dHRvbiBuZy1jbGljaz1cImJvb2w9dHJ1ZVwiPkZhZGUgSW4hPC9idXR0b24+XG4gKiA8YnV0dG9uIG5nLWNsaWNrPVwiYm9vbD1mYWxzZVwiPkZhZGUgT3V0ITwvYnV0dG9uPlxuICogYGBgXG4gKlxuICogTm90aWNlIHRoZSBDU1MgY2xhc3MgKipmYWRlKio/IFdlIGNhbiBub3cgY3JlYXRlIHRoZSBDU1MgdHJhbnNpdGlvbiBjb2RlIHRoYXQgcmVmZXJlbmNlcyB0aGlzIGNsYXNzOlxuICpcbiAqIGBgYGNzc1xuICogLyYjNDI7IFRoZSBzdGFydGluZyBDU1Mgc3R5bGVzIGZvciB0aGUgZW50ZXIgYW5pbWF0aW9uICYjNDI7L1xuICogLmZhZGUubmctZW50ZXIge1xuICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcbiAqICAgb3BhY2l0eTowO1xuICogfVxuICpcbiAqIC8mIzQyOyBUaGUgZmluaXNoaW5nIENTUyBzdHlsZXMgZm9yIHRoZSBlbnRlciBhbmltYXRpb24gJiM0MjsvXG4gKiAuZmFkZS5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICogICBvcGFjaXR5OjE7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBUaGUga2V5IHRoaW5nIHRvIHJlbWVtYmVyIGhlcmUgaXMgdGhhdCwgZGVwZW5kaW5nIG9uIHRoZSBhbmltYXRpb24gZXZlbnQgKHdoaWNoIGVhY2ggb2YgdGhlIGRpcmVjdGl2ZXMgYWJvdmUgdHJpZ2dlciBkZXBlbmRpbmcgb24gd2hhdCdzIGdvaW5nIG9uKSB0d29cbiAqIGdlbmVyYXRlZCBDU1MgY2xhc3NlcyB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQ7IGluIHRoZSBleGFtcGxlIGFib3ZlIHdlIGhhdmUgYC5uZy1lbnRlcmAgYW5kIGAubmctZW50ZXItYWN0aXZlYC4gRm9yIENTUyB0cmFuc2l0aW9ucywgdGhlIHRyYW5zaXRpb25cbiAqIGNvZGUgKiptdXN0KiogYmUgZGVmaW5lZCB3aXRoaW4gdGhlIHN0YXJ0aW5nIENTUyBjbGFzcyAoaW4gdGhpcyBjYXNlIGAubmctZW50ZXJgKS4gVGhlIGRlc3RpbmF0aW9uIGNsYXNzIGlzIHdoYXQgdGhlIHRyYW5zaXRpb24gd2lsbCBhbmltYXRlIHRvd2FyZHMuXG4gKlxuICogSWYgZm9yIGV4YW1wbGUgd2Ugd2FudGVkIHRvIGNyZWF0ZSBhbmltYXRpb25zIGZvciBgbGVhdmVgIGFuZCBgbW92ZWAgKG5nUmVwZWF0IHRyaWdnZXJzIG1vdmUpIHRoZW4gd2UgY2FuIGRvIHNvIHVzaW5nIHRoZSBzYW1lIENTUyBuYW1pbmcgY29udmVudGlvbnM6XG4gKlxuICogYGBgY3NzXG4gKiAvJiM0Mjsgbm93IHRoZSBlbGVtZW50IHdpbGwgZmFkZSBvdXQgYmVmb3JlIGl0IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NICYjNDI7L1xuICogLmZhZGUubmctbGVhdmUge1xuICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcbiAqICAgb3BhY2l0eToxO1xuICogfVxuICogLmZhZGUubmctbGVhdmUubmctbGVhdmUtYWN0aXZlIHtcbiAqICAgb3BhY2l0eTowO1xuICogfVxuICogYGBgXG4gKlxuICogV2UgY2FuIGFsc28gbWFrZSB1c2Ugb2YgKipDU1MgS2V5ZnJhbWVzKiogYnkgcmVmZXJlbmNpbmcgdGhlIGtleWZyYW1lIGFuaW1hdGlvbiB3aXRoaW4gdGhlIHN0YXJ0aW5nIENTUyBjbGFzczpcbiAqXG4gKiBgYGBjc3NcbiAqIC8mIzQyOyB0aGVyZSBpcyBubyBuZWVkIHRvIGRlZmluZSBhbnl0aGluZyBpbnNpZGUgb2YgdGhlIGRlc3RpbmF0aW9uXG4gKiBDU1MgY2xhc3Mgc2luY2UgdGhlIGtleWZyYW1lIHdpbGwgdGFrZSBjaGFyZ2Ugb2YgdGhlIGFuaW1hdGlvbiAmIzQyOy9cbiAqIC5mYWRlLm5nLWxlYXZlIHtcbiAqICAgYW5pbWF0aW9uOiBteV9mYWRlX2FuaW1hdGlvbiAwLjVzIGxpbmVhcjtcbiAqICAgLXdlYmtpdC1hbmltYXRpb246IG15X2ZhZGVfYW5pbWF0aW9uIDAuNXMgbGluZWFyO1xuICogfVxuICpcbiAqIEBrZXlmcmFtZXMgbXlfZmFkZV9hbmltYXRpb24ge1xuICogICBmcm9tIHsgb3BhY2l0eToxOyB9XG4gKiAgIHRvIHsgb3BhY2l0eTowOyB9XG4gKiB9XG4gKlxuICogQC13ZWJraXQta2V5ZnJhbWVzIG15X2ZhZGVfYW5pbWF0aW9uIHtcbiAqICAgZnJvbSB7IG9wYWNpdHk6MTsgfVxuICogICB0byB7IG9wYWNpdHk6MDsgfVxuICogfVxuICogYGBgXG4gKlxuICogRmVlbCBmcmVlIGFsc28gbWl4IHRyYW5zaXRpb25zIGFuZCBrZXlmcmFtZXMgdG9nZXRoZXIgYXMgd2VsbCBhcyBhbnkgb3RoZXIgQ1NTIGNsYXNzZXMgb24gdGhlIHNhbWUgZWxlbWVudC5cbiAqXG4gKiAjIyMgQ1NTIENsYXNzLWJhc2VkIEFuaW1hdGlvbnNcbiAqXG4gKiBDbGFzcy1iYXNlZCBhbmltYXRpb25zIChhbmltYXRpb25zIHRoYXQgYXJlIHRyaWdnZXJlZCB2aWEgYG5nQ2xhc3NgLCBgbmdTaG93YCwgYG5nSGlkZWAgYW5kIHNvbWUgb3RoZXIgZGlyZWN0aXZlcykgaGF2ZSBhIHNsaWdodGx5IGRpZmZlcmVudFxuICogbmFtaW5nIGNvbnZlbnRpb24uIENsYXNzLWJhc2VkIGFuaW1hdGlvbnMgYXJlIGJhc2ljIGVub3VnaCB0aGF0IGEgc3RhbmRhcmQgdHJhbnNpdGlvbiBvciBrZXlmcmFtZSBjYW4gYmUgcmVmZXJlbmNlZCBvbiB0aGUgY2xhc3MgYmVpbmcgYWRkZWRcbiAqIGFuZCByZW1vdmVkLlxuICpcbiAqIEZvciBleGFtcGxlIGlmIHdlIHdhbnRlZCB0byBkbyBhIENTUyBhbmltYXRpb24gZm9yIGBuZ0hpZGVgIHRoZW4gd2UgcGxhY2UgYW4gYW5pbWF0aW9uIG9uIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzczpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IG5nLXNob3c9XCJib29sXCIgY2xhc3M9XCJmYWRlXCI+XG4gKiAgIFNob3cgYW5kIGhpZGUgbWVcbiAqIDwvZGl2PlxuICogPGJ1dHRvbiBuZy1jbGljaz1cImJvb2w9dHJ1ZVwiPlRvZ2dsZTwvYnV0dG9uPlxuICpcbiAqIDxzdHlsZT5cbiAqIC5mYWRlLm5nLWhpZGUge1xuICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcbiAqICAgb3BhY2l0eTowO1xuICogfVxuICogPC9zdHlsZT5cbiAqIGBgYFxuICpcbiAqIEFsbCB0aGF0IGlzIGdvaW5nIG9uIGhlcmUgd2l0aCBuZ1Nob3cvbmdIaWRlIGJlaGluZCB0aGUgc2NlbmVzIGlzIHRoZSBgLm5nLWhpZGVgIGNsYXNzIGlzIGFkZGVkL3JlbW92ZWQgKHdoZW4gdGhlIGhpZGRlbiBzdGF0ZSBpcyB2YWxpZCkuIFNpbmNlXG4gKiBuZ1Nob3cgYW5kIG5nSGlkZSBhcmUgYW5pbWF0aW9uIGF3YXJlIHRoZW4gd2UgY2FuIG1hdGNoIHVwIGEgdHJhbnNpdGlvbiBhbmQgbmdBbmltYXRlIGhhbmRsZXMgdGhlIHJlc3QuXG4gKlxuICogSW4gYWRkaXRpb24gdGhlIGFkZGl0aW9uIGFuZCByZW1vdmFsIG9mIHRoZSBDU1MgY2xhc3MsIG5nQW5pbWF0ZSBhbHNvIHByb3ZpZGVzIHR3byBoZWxwZXIgbWV0aG9kcyB0aGF0IHdlIGNhbiB1c2UgdG8gZnVydGhlciBkZWNvcmF0ZSB0aGUgYW5pbWF0aW9uXG4gKiB3aXRoIENTUyBzdHlsZXMuXG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBuZy1jbGFzcz1cIntvbjpvbk9mZn1cIiBjbGFzcz1cImhpZ2hsaWdodFwiPlxuICogICBIaWdobGlnaHQgdGhpcyBib3hcbiAqIDwvZGl2PlxuICogPGJ1dHRvbiBuZy1jbGljaz1cIm9uT2ZmPSFvbk9mZlwiPlRvZ2dsZTwvYnV0dG9uPlxuICpcbiAqIDxzdHlsZT5cbiAqIC5oaWdobGlnaHQge1xuICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcbiAqIH1cbiAqIC5oaWdobGlnaHQub24tYWRkIHtcbiAqICAgYmFja2dyb3VuZDp3aGl0ZTtcbiAqIH1cbiAqIC5oaWdobGlnaHQub24ge1xuICogICBiYWNrZ3JvdW5kOnllbGxvdztcbiAqIH1cbiAqIC5oaWdobGlnaHQub24tcmVtb3ZlIHtcbiAqICAgYmFja2dyb3VuZDpibGFjaztcbiAqIH1cbiAqIDwvc3R5bGU+XG4gKiBgYGBcbiAqXG4gKiBXZSBjYW4gYWxzbyBtYWtlIHVzZSBvZiBDU1Mga2V5ZnJhbWVzIGJ5IHBsYWNpbmcgdGhlbSB3aXRoaW4gdGhlIENTUyBjbGFzc2VzLlxuICpcbiAqXG4gKiAjIyMgQ1NTIFN0YWdnZXJpbmcgQW5pbWF0aW9uc1xuICogQSBTdGFnZ2VyaW5nIGFuaW1hdGlvbiBpcyBhIGNvbGxlY3Rpb24gb2YgYW5pbWF0aW9ucyB0aGF0IGFyZSBpc3N1ZWQgd2l0aCBhIHNsaWdodCBkZWxheSBpbiBiZXR3ZWVuIGVhY2ggc3VjY2Vzc2l2ZSBvcGVyYXRpb24gcmVzdWx0aW5nIGluIGFcbiAqIGN1cnRhaW4tbGlrZSBlZmZlY3QuIFRoZSBuZ0FuaW1hdGUgbW9kdWxlICh2ZXJzaW9ucyA+PTEuMikgc3VwcG9ydHMgc3RhZ2dlcmluZyBhbmltYXRpb25zIGFuZCB0aGUgc3RhZ2dlciBlZmZlY3QgY2FuIGJlXG4gKiBwZXJmb3JtZWQgYnkgY3JlYXRpbmcgYSAqKm5nLUVWRU5ULXN0YWdnZXIqKiBDU1MgY2xhc3MgYW5kIGF0dGFjaGluZyB0aGF0IGNsYXNzIHRvIHRoZSBiYXNlIENTUyBjbGFzcyB1c2VkIGZvclxuICogdGhlIGFuaW1hdGlvbi4gVGhlIHN0eWxlIHByb3BlcnR5IGV4cGVjdGVkIHdpdGhpbiB0aGUgc3RhZ2dlciBjbGFzcyBjYW4gZWl0aGVyIGJlIGEgKip0cmFuc2l0aW9uLWRlbGF5Kiogb3IgYW5cbiAqICoqYW5pbWF0aW9uLWRlbGF5KiogcHJvcGVydHkgKG9yIGJvdGggaWYgeW91ciBhbmltYXRpb24gY29udGFpbnMgYm90aCB0cmFuc2l0aW9ucyBhbmQga2V5ZnJhbWUgYW5pbWF0aW9ucykuXG4gKlxuICogYGBgY3NzXG4gKiAubXktYW5pbWF0aW9uLm5nLWVudGVyIHtcbiAqICAgLyYjNDI7IHN0YW5kYXJkIHRyYW5zaXRpb24gY29kZSAmIzQyOy9cbiAqICAgdHJhbnNpdGlvbjogMXMgbGluZWFyIGFsbDtcbiAqICAgb3BhY2l0eTowO1xuICogfVxuICogLm15LWFuaW1hdGlvbi5uZy1lbnRlci1zdGFnZ2VyIHtcbiAqICAgLyYjNDI7IHRoaXMgd2lsbCBoYXZlIGEgMTAwbXMgZGVsYXkgYmV0d2VlbiBlYWNoIHN1Y2Nlc3NpdmUgbGVhdmUgYW5pbWF0aW9uICYjNDI7L1xuICogICB0cmFuc2l0aW9uLWRlbGF5OiAwLjFzO1xuICpcbiAqICAgLyYjNDI7IGluIGNhc2UgdGhlIHN0YWdnZXIgZG9lc24ndCB3b3JrIHRoZW4gdGhlIGR1cmF0aW9uIHZhbHVlXG4gKiAgICBtdXN0IGJlIHNldCB0byAwIHRvIGF2b2lkIGFuIGFjY2lkZW50YWwgQ1NTIGluaGVyaXRhbmNlICYjNDI7L1xuICogICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwcztcbiAqIH1cbiAqIC5teS1hbmltYXRpb24ubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAqICAgLyYjNDI7IHN0YW5kYXJkIHRyYW5zaXRpb24gc3R5bGVzICYjNDI7L1xuICogICBvcGFjaXR5OjE7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBTdGFnZ2VyaW5nIGFuaW1hdGlvbnMgd29yayBieSBkZWZhdWx0IGluIG5nUmVwZWF0IChzbyBsb25nIGFzIHRoZSBDU1MgY2xhc3MgaXMgZGVmaW5lZCkuIE91dHNpZGUgb2YgbmdSZXBlYXQsIHRvIHVzZSBzdGFnZ2VyaW5nIGFuaW1hdGlvbnNcbiAqIG9uIHlvdXIgb3duLCB0aGV5IGNhbiBiZSB0cmlnZ2VyZWQgYnkgZmlyaW5nIG11bHRpcGxlIGNhbGxzIHRvIHRoZSBzYW1lIGV2ZW50IG9uICRhbmltYXRlLiBIb3dldmVyLCB0aGUgcmVzdHJpY3Rpb25zIHN1cnJvdW5kaW5nIHRoaXNcbiAqIGFyZSB0aGF0IGVhY2ggb2YgdGhlIGVsZW1lbnRzIG11c3QgaGF2ZSB0aGUgc2FtZSBDU1MgY2xhc3NOYW1lIHZhbHVlIGFzIHdlbGwgYXMgdGhlIHNhbWUgcGFyZW50IGVsZW1lbnQuIEEgc3RhZ2dlciBvcGVyYXRpb25cbiAqIHdpbGwgYWxzbyBiZSByZXNldCBpZiBvbmUgb3IgbW9yZSBhbmltYXRpb24gZnJhbWVzIGhhdmUgcGFzc2VkIHNpbmNlIHRoZSBtdWx0aXBsZSBjYWxscyB0byBgJGFuaW1hdGVgIHdlcmUgZmlyZWQuXG4gKlxuICogVGhlIGZvbGxvd2luZyBjb2RlIHdpbGwgaXNzdWUgdGhlICoqbmctbGVhdmUtc3RhZ2dlcioqIGV2ZW50IG9uIHRoZSBlbGVtZW50IHByb3ZpZGVkOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIga2lkcyA9IHBhcmVudC5jaGlsZHJlbigpO1xuICpcbiAqICRhbmltYXRlLmxlYXZlKGtpZHNbMF0pOyAvL3N0YWdnZXIgaW5kZXg9MFxuICogJGFuaW1hdGUubGVhdmUoa2lkc1sxXSk7IC8vc3RhZ2dlciBpbmRleD0xXG4gKiAkYW5pbWF0ZS5sZWF2ZShraWRzWzJdKTsgLy9zdGFnZ2VyIGluZGV4PTJcbiAqICRhbmltYXRlLmxlYXZlKGtpZHNbM10pOyAvL3N0YWdnZXIgaW5kZXg9M1xuICogJGFuaW1hdGUubGVhdmUoa2lkc1s0XSk7IC8vc3RhZ2dlciBpbmRleD00XG4gKlxuICogd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpIHtcbiAqICAgLy9zdGFnZ2VyIGhhcyByZXNldCBpdHNlbGZcbiAqICAgJGFuaW1hdGUubGVhdmUoa2lkc1s1XSk7IC8vc3RhZ2dlciBpbmRleD0wXG4gKiAgICRhbmltYXRlLmxlYXZlKGtpZHNbNl0pOyAvL3N0YWdnZXIgaW5kZXg9MVxuICpcbiAqICAgJHNjb3BlLiRkaWdlc3QoKTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogU3RhZ2dlciBhbmltYXRpb25zIGFyZSBjdXJyZW50bHkgb25seSBzdXBwb3J0ZWQgd2l0aGluIENTUy1kZWZpbmVkIGFuaW1hdGlvbnMuXG4gKlxuICogIyMjIFRoZSBgbmctYW5pbWF0ZWAgQ1NTIGNsYXNzXG4gKlxuICogV2hlbiBuZ0FuaW1hdGUgaXMgYW5pbWF0aW5nIGFuIGVsZW1lbnQgaXQgd2lsbCBhcHBseSB0aGUgYG5nLWFuaW1hdGVgIENTUyBjbGFzcyB0byB0aGUgZWxlbWVudCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBhbmltYXRpb24uXG4gKiBUaGlzIGlzIGEgdGVtcG9yYXJ5IENTUyBjbGFzcyBhbmQgaXQgd2lsbCBiZSByZW1vdmVkIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBvdmVyIChmb3IgYm90aCBKYXZhU2NyaXB0IGFuZCBDU1MtYmFzZWQgYW5pbWF0aW9ucykuXG4gKlxuICogVGhlcmVmb3JlLCBhbmltYXRpb25zIGNhbiBiZSBhcHBsaWVkIHRvIGFuIGVsZW1lbnQgdXNpbmcgdGhpcyB0ZW1wb3JhcnkgY2xhc3MgZGlyZWN0bHkgdmlhIENTUy5cbiAqXG4gKiBgYGBjc3NcbiAqIC56aXBwZXIubmctYW5pbWF0ZSB7XG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xuICogfVxuICogLnppcHBlci5uZy1lbnRlciB7XG4gKiAgIG9wYWNpdHk6MDtcbiAqIH1cbiAqIC56aXBwZXIubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAqICAgb3BhY2l0eToxO1xuICogfVxuICogLnppcHBlci5uZy1sZWF2ZSB7XG4gKiAgIG9wYWNpdHk6MTtcbiAqIH1cbiAqIC56aXBwZXIubmctbGVhdmUubmctbGVhdmUtYWN0aXZlIHtcbiAqICAgb3BhY2l0eTowO1xuICogfVxuICogYGBgXG4gKlxuICogKE5vdGUgdGhhdCB0aGUgYG5nLWFuaW1hdGVgIENTUyBjbGFzcyBpcyByZXNlcnZlZCBhbmQgaXQgY2Fubm90IGJlIGFwcGxpZWQgb24gYW4gZWxlbWVudCBkaXJlY3RseSBzaW5jZSBuZ0FuaW1hdGUgd2lsbCBhbHdheXMgcmVtb3ZlXG4gKiB0aGUgQ1NTIGNsYXNzIG9uY2UgYW4gYW5pbWF0aW9uIGhhcyBjb21wbGV0ZWQuKVxuICpcbiAqXG4gKiAjIyBKYXZhU2NyaXB0LWJhc2VkIEFuaW1hdGlvbnNcbiAqXG4gKiBuZ0FuaW1hdGUgYWxzbyBhbGxvd3MgZm9yIGFuaW1hdGlvbnMgdG8gYmUgY29uc3VtZWQgYnkgSmF2YVNjcmlwdCBjb2RlLiBUaGUgYXBwcm9hY2ggaXMgc2ltaWxhciB0byBDU1MtYmFzZWQgYW5pbWF0aW9ucyAod2hlcmUgdGhlcmUgaXMgYSBzaGFyZWRcbiAqIENTUyBjbGFzcyB0aGF0IGlzIHJlZmVyZW5jZWQgaW4gb3VyIEhUTUwgY29kZSkgYnV0IGluIGFkZGl0aW9uIHdlIG5lZWQgdG8gcmVnaXN0ZXIgdGhlIEphdmFTY3JpcHQgYW5pbWF0aW9uIG9uIHRoZSBtb2R1bGUuIEJ5IG1ha2luZyB1c2Ugb2YgdGhlXG4gKiBgbW9kdWxlLmFuaW1hdGlvbigpYCBtb2R1bGUgZnVuY3Rpb24gd2UgY2FuIHJlZ2lzdGVyIHRoZSBhaW5tYXRpb24uXG4gKlxuICogTGV0J3Mgc2VlIGFuIGV4YW1wbGUgb2YgYSBlbnRlci9sZWF2ZSBhbmltYXRpb24gdXNpbmcgYG5nUmVwZWF0YDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IG5nLXJlcGVhdD1cIml0ZW0gaW4gaXRlbXNcIiBjbGFzcz1cInNsaWRlXCI+XG4gKiAgIHt7IGl0ZW0gfX1cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogU2VlIHRoZSAqKnNsaWRlKiogQ1NTIGNsYXNzPyBMZXQncyB1c2UgdGhhdCBjbGFzcyB0byBkZWZpbmUgYW4gYW5pbWF0aW9uIHRoYXQgd2UnbGwgc3RydWN0dXJlIGluIG91ciBtb2R1bGUgY29kZSBieSB1c2luZyBgbW9kdWxlLmFuaW1hdGlvbmA6XG4gKlxuICogYGBganNcbiAqIG15TW9kdWxlLmFuaW1hdGlvbignLnNsaWRlJywgW2Z1bmN0aW9uKCkge1xuICogICByZXR1cm4ge1xuICogICAgIC8vIG1ha2Ugbm90ZSB0aGF0IG90aGVyIGV2ZW50cyAobGlrZSBhZGRDbGFzcy9yZW1vdmVDbGFzcylcbiAqICAgICAvLyBoYXZlIGRpZmZlcmVudCBmdW5jdGlvbiBpbnB1dCBwYXJhbWV0ZXJzXG4gKiAgICAgZW50ZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmVGbikge1xuICogICAgICAgalF1ZXJ5KGVsZW1lbnQpLmZhZGVJbigxMDAwLCBkb25lRm4pO1xuICpcbiAqICAgICAgIC8vIHJlbWVtYmVyIHRvIGNhbGwgZG9uZUZuIHNvIHRoYXQgYW5ndWxhclxuICogICAgICAgLy8ga25vd3MgdGhhdCB0aGUgYW5pbWF0aW9uIGhhcyBjb25jbHVkZWRcbiAqICAgICB9LFxuICpcbiAqICAgICBtb3ZlOiBmdW5jdGlvbihlbGVtZW50LCBkb25lRm4pIHtcbiAqICAgICAgIGpRdWVyeShlbGVtZW50KS5mYWRlSW4oMTAwMCwgZG9uZUZuKTtcbiAqICAgICB9LFxuICpcbiAqICAgICBsZWF2ZTogZnVuY3Rpb24oZWxlbWVudCwgZG9uZUZuKSB7XG4gKiAgICAgICBqUXVlcnkoZWxlbWVudCkuZmFkZU91dCgxMDAwLCBkb25lRm4pO1xuICogICAgIH1cbiAqICAgfVxuICogfV1cbiAqIGBgYFxuICpcbiAqIFRoZSBuaWNlIHRoaW5nIGFib3V0IEpTLWJhc2VkIGFuaW1hdGlvbnMgaXMgdGhhdCB3ZSBjYW4gaW5qZWN0IG90aGVyIHNlcnZpY2VzIGFuZCBtYWtlIHVzZSBvZiBhZHZhbmNlZCBhbmltYXRpb24gbGlicmFyaWVzIHN1Y2ggYXNcbiAqIGdyZWVuc29jay5qcyBhbmQgdmVsb2NpdHkuanMuXG4gKlxuICogSWYgb3VyIGFuaW1hdGlvbiBjb2RlIGNsYXNzLWJhc2VkIChtZWFuaW5nIHRoYXQgc29tZXRoaW5nIGxpa2UgYG5nQ2xhc3NgLCBgbmdIaWRlYCBhbmQgYG5nU2hvd2AgdHJpZ2dlcnMgaXQpIHRoZW4gd2UgY2FuIHN0aWxsIGRlZmluZVxuICogb3VyIGFuaW1hdGlvbnMgaW5zaWRlIG9mIHRoZSBzYW1lIHJlZ2lzdGVyZWQgYW5pbWF0aW9uLCBob3dldmVyLCB0aGUgZnVuY3Rpb24gaW5wdXQgYXJndW1lbnRzIGFyZSBhIGJpdCBkaWZmZXJlbnQ6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBuZy1jbGFzcz1cImNvbG9yXCIgY2xhc3M9XCJjb2xvcmZ1bFwiPlxuICogICB0aGlzIGJveCBpcyBtb29keVxuICogPC9kaXY+XG4gKiA8YnV0dG9uIG5nLWNsaWNrPVwiY29sb3I9J3JlZCdcIj5DaGFuZ2UgdG8gcmVkPC9idXR0b24+XG4gKiA8YnV0dG9uIG5nLWNsaWNrPVwiY29sb3I9J2JsdWUnXCI+Q2hhbmdlIHRvIGJsdWU8L2J1dHRvbj5cbiAqIDxidXR0b24gbmctY2xpY2s9XCJjb2xvcj0nZ3JlZW4nXCI+Q2hhbmdlIHRvIGdyZWVuPC9idXR0b24+XG4gKiBgYGBcbiAqXG4gKiBgYGBqc1xuICogbXlNb2R1bGUuYW5pbWF0aW9uKCcuY29sb3JmdWwnLCBbZnVuY3Rpb24oKSB7XG4gKiAgIHJldHVybiB7XG4gKiAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgZG9uZUZuKSB7XG4gKiAgICAgICAvLyBkbyBzb21lIGNvb2wgYW5pbWF0aW9uIGFuZCBjYWxsIHRoZSBkb25lRm5cbiAqICAgICB9LFxuICogICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGRvbmVGbikge1xuICogICAgICAgLy8gZG8gc29tZSBjb29sIGFuaW1hdGlvbiBhbmQgY2FsbCB0aGUgZG9uZUZuXG4gKiAgICAgfSxcbiAqICAgICBzZXRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgYWRkZWRDbGFzcywgcmVtb3ZlZENsYXNzLCBkb25lRm4pIHtcbiAqICAgICAgIC8vIGRvIHNvbWUgY29vbCBhbmltYXRpb24gYW5kIGNhbGwgdGhlIGRvbmVGblxuICogICAgIH1cbiAqICAgfVxuICogfV1cbiAqIGBgYFxuICpcbiAqICMjIENTUyArIEpTIEFuaW1hdGlvbnMgVG9nZXRoZXJcbiAqXG4gKiBBbmd1bGFySlMgMS40IGFuZCBoaWdoZXIgaGFzIHRha2VuIHN0ZXBzIHRvIG1ha2UgdGhlIGFtYWxnYW1hdGlvbiBvZiBDU1MgYW5kIEpTIGFuaW1hdGlvbnMgbW9yZSBmbGV4aWJsZS4gSG93ZXZlciwgdW5saWtlIGVhcmxpZXIgdmVyc2lvbnMgb2YgQW5ndWxhcixcbiAqIGRlZmluaW5nIENTUyBhbmQgSlMgYW5pbWF0aW9ucyB0byB3b3JrIG9mZiBvZiB0aGUgc2FtZSBDU1MgY2xhc3Mgd2lsbCBub3Qgd29yayBhbnltb3JlLiBUaGVyZWZvcmUgdGhlIGV4YW1wbGUgYmVsb3cgd2lsbCBvbmx5IHJlc3VsdCBpbiAqKkpTIGFuaW1hdGlvbnMgdGFraW5nXG4gKiBjaGFyZ2Ugb2YgdGhlIGFuaW1hdGlvbioqOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgbmctaWY9XCJib29sXCIgY2xhc3M9XCJzbGlkZVwiPlxuICogICBTbGlkZSBpbiBhbmQgb3V0XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIGBgYGpzXG4gKiBteU1vZHVsZS5hbmltYXRpb24oJy5zbGlkZScsIFtmdW5jdGlvbigpIHtcbiAqICAgcmV0dXJuIHtcbiAqICAgICBlbnRlcjogZnVuY3Rpb24oZWxlbWVudCwgZG9uZUZuKSB7XG4gKiAgICAgICBqUXVlcnkoZWxlbWVudCkuc2xpZGVJbigxMDAwLCBkb25lRm4pO1xuICogICAgIH1cbiAqICAgfVxuICogfV1cbiAqIGBgYFxuICpcbiAqIGBgYGNzc1xuICogLnNsaWRlLm5nLWVudGVyIHtcbiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XG4gKiAgIHRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMDBweCk7XG4gKiB9XG4gKiAuc2xpZGUubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAqICAgdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBEb2VzIHRoaXMgbWVhbiB0aGF0IENTUyBhbmQgSlMgYW5pbWF0aW9ucyBjYW5ub3QgYmUgdXNlZCB0b2dldGhlcj8gRG8gSlMtYmFzZWQgYW5pbWF0aW9ucyBhbHdheXMgaGF2ZSBoaWdoZXIgcHJpb3JpdHk/IFdlIGNhbiBtYWtlIHVwIGZvciB0aGVcbiAqIGxhY2sgb2YgQ1NTIGFuaW1hdGlvbnMgYnkgdXNpbmcgdGhlIGAkYW5pbWF0ZUNzc2Agc2VydmljZSB0byB0cmlnZ2VyIG91ciBvd24gdHdlYWtlZC1vdXQsIENTUy1iYXNlZCBhbmltYXRpb25zIGRpcmVjdGx5IGZyb21cbiAqIG91ciBvd24gSlMtYmFzZWQgYW5pbWF0aW9uIGNvZGU6XG4gKlxuICogYGBganNcbiAqIG15TW9kdWxlLmFuaW1hdGlvbignLnNsaWRlJywgWyckYW5pbWF0ZUNzcycsIGZ1bmN0aW9uKCRhbmltYXRlQ3NzKSB7XG4gKiAgIHJldHVybiB7XG4gKiAgICAgZW50ZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmVGbikge1xuKiAgICAgICAgLy8gdGhpcyB3aWxsIHRyaWdnZXIgYC5zbGlkZS5uZy1lbnRlcmAgYW5kIGAuc2xpZGUubmctZW50ZXItYWN0aXZlYC5cbiAqICAgICAgIHZhciBydW5uZXIgPSAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7XG4gKiAgICAgICAgIGV2ZW50OiAnZW50ZXInLFxuICogICAgICAgICBzdHJ1Y3R1cmFsOiB0cnVlXG4gKiAgICAgICB9KS5zdGFydCgpO1xuKiAgICAgICAgcnVubmVyLmRvbmUoZG9uZUZuKTtcbiAqICAgICB9XG4gKiAgIH1cbiAqIH1dXG4gKiBgYGBcbiAqXG4gKiBUaGUgbmljZSB0aGluZyBoZXJlIGlzIHRoYXQgd2UgY2FuIHNhdmUgYmFuZHdpZHRoIGJ5IHN0aWNraW5nIHRvIG91ciBDU1MtYmFzZWQgYW5pbWF0aW9uIGNvZGUgYW5kIHdlIGRvbid0IG5lZWQgdG8gcmVseSBvbiBhIDNyZC1wYXJ0eSBhbmltYXRpb24gZnJhbWV3b3JrLlxuICpcbiAqIFRoZSBgJGFuaW1hdGVDc3NgIHNlcnZpY2UgaXMgdmVyeSBwb3dlcmZ1bCBzaW5jZSB3ZSBjYW4gZmVlZCBpbiBhbGwga2luZHMgb2YgZXh0cmEgcHJvcGVydGllcyB0aGF0IHdpbGwgYmUgZXZhbHVhdGVkIGFuZCBmZWQgaW50byBhIENTUyB0cmFuc2l0aW9uIG9yXG4gKiBrZXlmcmFtZSBhbmltYXRpb24uIEZvciBleGFtcGxlIGlmIHdlIHdhbnRlZCB0byBhbmltYXRlIHRoZSBoZWlnaHQgb2YgYW4gZWxlbWVudCB3aGlsZSBhZGRpbmcgYW5kIHJlbW92aW5nIGNsYXNzZXMgdGhlbiB3ZSBjYW4gZG8gc28gYnkgcHJvdmlkaW5nIHRoYXRcbiAqIGRhdGEgaW50byBgJGFuaW1hdGVDc3NgIGRpcmVjdGx5OlxuICpcbiAqIGBgYGpzXG4gKiBteU1vZHVsZS5hbmltYXRpb24oJy5zbGlkZScsIFsnJGFuaW1hdGVDc3MnLCBmdW5jdGlvbigkYW5pbWF0ZUNzcykge1xuICogICByZXR1cm4ge1xuICogICAgIGVudGVyOiBmdW5jdGlvbihlbGVtZW50LCBkb25lRm4pIHtcbiAqICAgICAgIHZhciBydW5uZXIgPSAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7XG4gKiAgICAgICAgIGV2ZW50OiAnZW50ZXInLFxuICogICAgICAgICBhZGRDbGFzczogJ21hcm9vbi1zZXR0aW5nJyxcbiAqICAgICAgICAgZnJvbTogeyBoZWlnaHQ6MCB9LFxuICogICAgICAgICB0bzogeyBoZWlnaHQ6IDIwMCB9XG4gKiAgICAgICB9KS5zdGFydCgpO1xuICpcbiAqICAgICAgIHJ1bm5lci5kb25lKGRvbmVGbik7XG4gKiAgICAgfVxuICogICB9XG4gKiB9XVxuICogYGBgXG4gKlxuICogTm93IHdlIGNhbiBmaWxsIGluIHRoZSByZXN0IHZpYSBvdXIgdHJhbnNpdGlvbiBDU1MgY29kZTpcbiAqXG4gKiBgYGBjc3NcbiAqIC8mIzQyOyB0aGUgdHJhbnNpdGlvbiB0ZWxscyBuZ0FuaW1hdGUgdG8gbWFrZSB0aGUgYW5pbWF0aW9uIGhhcHBlbiAmIzQyOy9cbiAqIC5zbGlkZS5uZy1lbnRlciB7IHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsOyB9XG4gKlxuICogLyYjNDI7IHRoaXMgZXh0cmEgQ1NTIGNsYXNzIHdpbGwgYmUgYWJzb3JiZWQgaW50byB0aGUgdHJhbnNpdGlvblxuICogc2luY2UgdGhlICRhbmltYXRlQ3NzIGNvZGUgaXMgYWRkaW5nIHRoZSBjbGFzcyAmIzQyOy9cbiAqIC5tYXJvb24tc2V0dGluZyB7IGJhY2tncm91bmQ6cmVkOyB9XG4gKiBgYGBcbiAqXG4gKiBBbmQgYCRhbmltYXRlQ3NzYCB3aWxsIGZpZ3VyZSBvdXQgdGhlIHJlc3QuIEp1c3QgbWFrZSBzdXJlIHRvIGhhdmUgdGhlIGBkb25lKClgIGNhbGxiYWNrIGZpcmUgdGhlIGBkb25lRm5gIGZ1bmN0aW9uIHRvIHNpZ25hbCB3aGVuIHRoZSBhbmltYXRpb24gaXMgb3Zlci5cbiAqXG4gKiBUbyBsZWFybiBtb3JlIGFib3V0IHdoYXQncyBwb3NzaWJsZSBiZSBzdXJlIHRvIHZpc2l0IHRoZSB7QGxpbmsgbmdBbmltYXRlLiRhbmltYXRlQ3NzICRhbmltYXRlQ3NzIHNlcnZpY2V9LlxuICpcbiAqICMjIEFuaW1hdGlvbiBBbmNob3JpbmcgKHZpYSBgbmctYW5pbWF0ZS1yZWZgKVxuICpcbiAqIG5nQW5pbWF0ZSBpbiBBbmd1bGFySlMgMS40IGNvbWVzIHBhY2tlZCB3aXRoIHRoZSBhYmlsaXR5IHRvIGNyb3NzLWFuaW1hdGUgZWxlbWVudHMgYmV0d2VlblxuICogc3RydWN0dXJhbCBhcmVhcyBvZiBhbiBhcHBsaWNhdGlvbiAobGlrZSB2aWV3cykgYnkgcGFpcmluZyB1cCBlbGVtZW50cyB1c2luZyBhbiBhdHRyaWJ1dGVcbiAqIGNhbGxlZCBgbmctYW5pbWF0ZS1yZWZgLlxuICpcbiAqIExldCdzIHNheSBmb3IgZXhhbXBsZSB3ZSBoYXZlIHR3byB2aWV3cyB0aGF0IGFyZSBtYW5hZ2VkIGJ5IGBuZy12aWV3YCBhbmQgd2Ugd2FudCB0byBzaG93XG4gKiB0aGF0IHRoZXJlIGlzIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gdHdvIGNvbXBvbmVudHMgc2l0dWF0ZWQgaW4gd2l0aGluIHRoZXNlIHZpZXdzLiBCeSB1c2luZyB0aGVcbiAqIGBuZy1hbmltYXRlLXJlZmAgYXR0cmlidXRlIHdlIGNhbiBpZGVudGlmeSB0aGF0IHRoZSB0d28gY29tcG9uZW50cyBhcmUgcGFpcmVkIHRvZ2V0aGVyIGFuZCB3ZVxuICogY2FuIHRoZW4gYXR0YWNoIGFuIGFuaW1hdGlvbiwgd2hpY2ggaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIHZpZXcgY2hhbmdlcy5cbiAqXG4gKiBTYXkgZm9yIGV4YW1wbGUgd2UgaGF2ZSB0aGUgZm9sbG93aW5nIHRlbXBsYXRlIGNvZGU6XG4gKlxuICogYGBgaHRtbFxuICogPCEtLSBpbmRleC5odG1sIC0tPlxuICogPGRpdiBuZy12aWV3IGNsYXNzPVwidmlldy1hbmltYXRpb25cIj5cbiAqIDwvZGl2PlxuICpcbiAqIDwhLS0gaG9tZS5odG1sIC0tPlxuICogPGEgaHJlZj1cIiMvYmFubmVyLXBhZ2VcIj5cbiAqICAgPGltZyBzcmM9XCIuL2Jhbm5lci5qcGdcIiBjbGFzcz1cImJhbm5lclwiIG5nLWFuaW1hdGUtcmVmPVwiYmFubmVyXCI+XG4gKiA8L2E+XG4gKlxuICogPCEtLSBiYW5uZXItcGFnZS5odG1sIC0tPlxuICogPGltZyBzcmM9XCIuL2Jhbm5lci5qcGdcIiBjbGFzcz1cImJhbm5lclwiIG5nLWFuaW1hdGUtcmVmPVwiYmFubmVyXCI+XG4gKiBgYGBcbiAqXG4gKiBOb3csIHdoZW4gdGhlIHZpZXcgY2hhbmdlcyAob25jZSB0aGUgbGluayBpcyBjbGlja2VkKSwgbmdBbmltYXRlIHdpbGwgZXhhbWluZSB0aGVcbiAqIEhUTUwgY29udGVudHMgdG8gc2VlIGlmIHRoZXJlIGlzIGEgbWF0Y2ggcmVmZXJlbmNlIGJldHdlZW4gYW55IGNvbXBvbmVudHMgaW4gdGhlIHZpZXdcbiAqIHRoYXQgaXMgbGVhdmluZyBhbmQgdGhlIHZpZXcgdGhhdCBpcyBlbnRlcmluZy4gSXQgd2lsbCBzY2FuIGJvdGggdGhlIHZpZXcgd2hpY2ggaXMgYmVpbmdcbiAqIHJlbW92ZWQgKGxlYXZlKSBhbmQgaW5zZXJ0ZWQgKGVudGVyKSB0byBzZWUgaWYgdGhlcmUgYXJlIGFueSBwYWlyZWQgRE9NIGVsZW1lbnRzIHRoYXRcbiAqIGNvbnRhaW4gYSBtYXRjaGluZyByZWYgdmFsdWUuXG4gKlxuICogVGhlIHR3byBpbWFnZXMgbWF0Y2ggc2luY2UgdGhleSBzaGFyZSB0aGUgc2FtZSByZWYgdmFsdWUuIG5nQW5pbWF0ZSB3aWxsIG5vdyBjcmVhdGUgYVxuICogdHJhbnNwb3J0IGVsZW1lbnQgKHdoaWNoIGlzIGEgY2xvbmUgb2YgdGhlIGZpcnN0IGltYWdlIGVsZW1lbnQpIGFuZCBpdCB3aWxsIHRoZW4gYXR0ZW1wdFxuICogdG8gYW5pbWF0ZSB0byB0aGUgcG9zaXRpb24gb2YgdGhlIHNlY29uZCBpbWFnZSBlbGVtZW50IGluIHRoZSBuZXh0IHZpZXcuIEZvciB0aGUgYW5pbWF0aW9uIHRvXG4gKiB3b3JrIGEgc3BlY2lhbCBDU1MgY2xhc3MgY2FsbGVkIGBuZy1hbmNob3JgIHdpbGwgYmUgYWRkZWQgdG8gdGhlIHRyYW5zcG9ydGVkIGVsZW1lbnQuXG4gKlxuICogV2UgY2FuIG5vdyBhdHRhY2ggYSB0cmFuc2l0aW9uIG9udG8gdGhlIGAuYmFubmVyLm5nLWFuY2hvcmAgQ1NTIGNsYXNzIGFuZCB0aGVuXG4gKiBuZ0FuaW1hdGUgd2lsbCBoYW5kbGUgdGhlIGVudGlyZSB0cmFuc2l0aW9uIGZvciB1cyBhcyB3ZWxsIGFzIHRoZSBhZGRpdGlvbiBhbmQgcmVtb3ZhbCBvZlxuICogYW55IGNoYW5nZXMgb2YgQ1NTIGNsYXNzZXMgYmV0d2VlbiB0aGUgZWxlbWVudHM6XG4gKlxuICogYGBgY3NzXG4gKiAuYmFubmVyLm5nLWFuY2hvciB7XG4gKiAgIC8mIzQyOyB0aGlzIGFuaW1hdGlvbiB3aWxsIGxhc3QgZm9yIDEgc2Vjb25kIHNpbmNlIHRoZXJlIGFyZVxuICogICAgICAgICAgdHdvIHBoYXNlcyB0byB0aGUgYW5pbWF0aW9uIChhbiBgaW5gIGFuZCBhbiBgb3V0YCBwaGFzZSkgJiM0MjsvXG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xuICogfVxuICogYGBgXG4gKlxuICogV2UgYWxzbyAqKm11c3QqKiBpbmNsdWRlIGFuaW1hdGlvbnMgZm9yIHRoZSB2aWV3cyB0aGF0IGFyZSBiZWluZyBlbnRlcmVkIGFuZCByZW1vdmVkXG4gKiAob3RoZXJ3aXNlIGFuY2hvcmluZyB3b3VsZG4ndCBiZSBwb3NzaWJsZSBzaW5jZSB0aGUgbmV3IHZpZXcgd291bGQgYmUgaW5zZXJ0ZWQgcmlnaHQgYXdheSkuXG4gKlxuICogYGBgY3NzXG4gKiAudmlldy1hbmltYXRpb24ubmctZW50ZXIsIC52aWV3LWFuaW1hdGlvbi5uZy1sZWF2ZSB7XG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xuICogICBwb3NpdGlvbjpmaXhlZDtcbiAqICAgbGVmdDowO1xuICogICB0b3A6MDtcbiAqICAgd2lkdGg6MTAwJTtcbiAqIH1cbiAqIC52aWV3LWFuaW1hdGlvbi5uZy1lbnRlciB7XG4gKiAgIHRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpO1xuICogfVxuICogLnZpZXctYW5pbWF0aW9uLm5nLWxlYXZlLFxuICogLnZpZXctYW5pbWF0aW9uLm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7XG4gKiAgIHRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKTtcbiAqIH1cbiAqIC52aWV3LWFuaW1hdGlvbi5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUge1xuICogICB0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTAwJSk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBOb3cgd2UgY2FuIGp1bXAgYmFjayB0byB0aGUgYW5jaG9yIGFuaW1hdGlvbi4gV2hlbiB0aGUgYW5pbWF0aW9uIGhhcHBlbnMsIHRoZXJlIGFyZSB0d28gc3RhZ2VzIHRoYXQgb2NjdXI6XG4gKiBhbiBgb3V0YCBhbmQgYW4gYGluYCBzdGFnZS4gVGhlIGBvdXRgIHN0YWdlIGhhcHBlbnMgZmlyc3QgYW5kIHRoYXQgaXMgd2hlbiB0aGUgZWxlbWVudCBpcyBhbmltYXRlZCBhd2F5XG4gKiBmcm9tIGl0cyBvcmlnaW4uIE9uY2UgdGhhdCBhbmltYXRpb24gaXMgb3ZlciB0aGVuIHRoZSBgaW5gIHN0YWdlIG9jY3VycyB3aGljaCBhbmltYXRlcyB0aGVcbiAqIGVsZW1lbnQgdG8gaXRzIGRlc3RpbmF0aW9uLiBUaGUgcmVhc29uIHdoeSB0aGVyZSBhcmUgdHdvIGFuaW1hdGlvbnMgaXMgdG8gZ2l2ZSBlbm91Z2ggdGltZVxuICogZm9yIHRoZSBlbnRlciBhbmltYXRpb24gb24gdGhlIG5ldyBlbGVtZW50IHRvIGJlIHJlYWR5LlxuICpcbiAqIFRoZSBleGFtcGxlIGFib3ZlIHNldHMgdXAgYSB0cmFuc2l0aW9uIGZvciBib3RoIHRoZSBpbiBhbmQgb3V0IHBoYXNlcywgYnV0IHdlIGNhbiBhbHNvIHRhcmdldCB0aGUgb3V0IG9yXG4gKiBpbiBwaGFzZXMgZGlyZWN0bHkgdmlhIGBuZy1hbmNob3Itb3V0YCBhbmQgYG5nLWFuY2hvci1pbmAuXG4gKlxuICogYGBgY3NzXG4gKiAuYmFubmVyLm5nLWFuY2hvci1vdXQge1xuICogICB0cmFuc2l0aW9uOiAwLjVzIGxpbmVhciBhbGw7XG4gKlxuICogICAvJiM0MjsgdGhlIHNjYWxlIHdpbGwgYmUgYXBwbGllZCBkdXJpbmcgdGhlIG91dCBhbmltYXRpb24sXG4gKiAgICAgICAgICBidXQgd2lsbCBiZSBhbmltYXRlZCBhd2F5IHdoZW4gdGhlIGluIGFuaW1hdGlvbiBydW5zICYjNDI7L1xuICogICB0cmFuc2Zvcm06IHNjYWxlKDEuMik7XG4gKiB9XG4gKlxuICogLmJhbm5lci5uZy1hbmNob3ItaW4ge1xuICogICB0cmFuc2l0aW9uOiAxcyBsaW5lYXIgYWxsO1xuICogfVxuICogYGBgXG4gKlxuICpcbiAqXG4gKlxuICogIyMjIEFuY2hvcmluZyBEZW1vXG4gKlxuICA8ZXhhbXBsZSBtb2R1bGU9XCJhbmNob3JpbmdFeGFtcGxlXCJcbiAgICAgICAgICAgbmFtZT1cImFuY2hvcmluZ0V4YW1wbGVcIlxuICAgICAgICAgICBpZD1cImFuY2hvcmluZ0V4YW1wbGVcIlxuICAgICAgICAgICBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzO2FuZ3VsYXItcm91dGUuanNcIlxuICAgICAgICAgICBhbmltYXRpb25zPVwidHJ1ZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8YSBocmVmPVwiIy9cIj5Ib21lPC9hPlxuICAgICAgPGhyIC8+XG4gICAgICA8ZGl2IGNsYXNzPVwidmlldy1jb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBuZy12aWV3IGNsYXNzPVwidmlld1wiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdhbmNob3JpbmdFeGFtcGxlJywgWyduZ0FuaW1hdGUnLCAnbmdSb3V0ZSddKVxuICAgICAgICAuY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLCBmdW5jdGlvbigkcm91dGVQcm92aWRlcikge1xuICAgICAgICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy8nLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2hvbWUuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnSG9tZUNvbnRyb2xsZXIgYXMgaG9tZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAkcm91dGVQcm92aWRlci53aGVuKCcvcHJvZmlsZS86aWQnLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3Byb2ZpbGUuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUHJvZmlsZUNvbnRyb2xsZXIgYXMgcHJvZmlsZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfV0pXG4gICAgICAgIC5ydW4oWyckcm9vdFNjb3BlJywgZnVuY3Rpb24oJHJvb3RTY29wZSkge1xuICAgICAgICAgICRyb290U2NvcGUucmVjb3JkcyA9IFtcbiAgICAgICAgICAgIHsgaWQ6MSwgdGl0bGU6IFwiTWlzcyBCZXVsYWggUm9vYlwiIH0sXG4gICAgICAgICAgICB7IGlkOjIsIHRpdGxlOiBcIlRyZW50IE1vcmlzc2V0dGVcIiB9LFxuICAgICAgICAgICAgeyBpZDozLCB0aXRsZTogXCJNaXNzIEF2YSBQb3Vyb3NcIiB9LFxuICAgICAgICAgICAgeyBpZDo0LCB0aXRsZTogXCJSb2QgUG91cm9zXCIgfSxcbiAgICAgICAgICAgIHsgaWQ6NSwgdGl0bGU6IFwiQWJkdWwgUmljZVwiIH0sXG4gICAgICAgICAgICB7IGlkOjYsIHRpdGxlOiBcIkxhdXJpZSBSdXRoZXJmb3JkIFNyLlwiIH0sXG4gICAgICAgICAgICB7IGlkOjcsIHRpdGxlOiBcIk5ha2lhIE1jTGF1Z2hsaW5cIiB9LFxuICAgICAgICAgICAgeyBpZDo4LCB0aXRsZTogXCJKb3Jkb24gQmxhbmRhIERWTVwiIH0sXG4gICAgICAgICAgICB7IGlkOjksIHRpdGxlOiBcIlJob2RhIEhhbmRcIiB9LFxuICAgICAgICAgICAgeyBpZDoxMCwgdGl0bGU6IFwiQWxleGFuZHJlYSBTYXVlclwiIH1cbiAgICAgICAgICBdO1xuICAgICAgICB9XSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0hvbWVDb250cm9sbGVyJywgW2Z1bmN0aW9uKCkge1xuICAgICAgICAgIC8vZW1wdHlcbiAgICAgICAgfV0pXG4gICAgICAgIC5jb250cm9sbGVyKCdQcm9maWxlQ29udHJvbGxlcicsIFsnJHJvb3RTY29wZScsICckcm91dGVQYXJhbXMnLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkcm91dGVQYXJhbXMpIHtcbiAgICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludCgkcm91dGVQYXJhbXMuaWQsIDEwKTtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gJHJvb3RTY29wZS5yZWNvcmRzW2luZGV4IC0gMV07XG5cbiAgICAgICAgICB0aGlzLnRpdGxlID0gcmVjb3JkLnRpdGxlO1xuICAgICAgICAgIHRoaXMuaWQgPSByZWNvcmQuaWQ7XG4gICAgICAgIH1dKTtcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImhvbWUuaHRtbFwiPlxuICAgICAgPGgyPldlbGNvbWUgdG8gdGhlIGhvbWUgcGFnZTwvaDE+XG4gICAgICA8cD5QbGVhc2UgY2xpY2sgb24gYW4gZWxlbWVudDwvcD5cbiAgICAgIDxhIGNsYXNzPVwicmVjb3JkXCJcbiAgICAgICAgIG5nLWhyZWY9XCIjL3Byb2ZpbGUve3sgcmVjb3JkLmlkIH19XCJcbiAgICAgICAgIG5nLWFuaW1hdGUtcmVmPVwie3sgcmVjb3JkLmlkIH19XCJcbiAgICAgICAgIG5nLXJlcGVhdD1cInJlY29yZCBpbiByZWNvcmRzXCI+XG4gICAgICAgIHt7IHJlY29yZC50aXRsZSB9fVxuICAgICAgPC9hPlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvZmlsZS5odG1sXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwicHJvZmlsZSByZWNvcmRcIiBuZy1hbmltYXRlLXJlZj1cInt7IHByb2ZpbGUuaWQgfX1cIj5cbiAgICAgICAge3sgcHJvZmlsZS50aXRsZSB9fVxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLnJlY29yZCB7XG4gICAgICAgIGRpc3BsYXk6YmxvY2s7XG4gICAgICAgIGZvbnQtc2l6ZToyMHB4O1xuICAgICAgfVxuICAgICAgLnByb2ZpbGUge1xuICAgICAgICBiYWNrZ3JvdW5kOmJsYWNrO1xuICAgICAgICBjb2xvcjp3aGl0ZTtcbiAgICAgICAgZm9udC1zaXplOjEwMHB4O1xuICAgICAgfVxuICAgICAgLnZpZXctY29udGFpbmVyIHtcbiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7XG4gICAgICB9XG4gICAgICAudmlldy1jb250YWluZXIgPiAudmlldy5uZy1hbmltYXRlIHtcbiAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgICAgIHRvcDowO1xuICAgICAgICBsZWZ0OjA7XG4gICAgICAgIHdpZHRoOjEwMCU7XG4gICAgICAgIG1pbi1oZWlnaHQ6NTAwcHg7XG4gICAgICB9XG4gICAgICAudmlldy5uZy1lbnRlciwgLnZpZXcubmctbGVhdmUsXG4gICAgICAucmVjb3JkLm5nLWFuY2hvciB7XG4gICAgICAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xuICAgICAgfVxuICAgICAgLnZpZXcubmctZW50ZXIge1xuICAgICAgICB0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKTtcbiAgICAgIH1cbiAgICAgIC52aWV3Lm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSwgLnZpZXcubmctbGVhdmUge1xuICAgICAgICB0cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSk7XG4gICAgICB9XG4gICAgICAudmlldy5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUge1xuICAgICAgICB0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTAwJSk7XG4gICAgICB9XG4gICAgICAucmVjb3JkLm5nLWFuY2hvci1vdXQge1xuICAgICAgICBiYWNrZ3JvdW5kOnJlZDtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqXG4gKiAjIyMgSG93IGlzIHRoZSBlbGVtZW50IHRyYW5zcG9ydGVkP1xuICpcbiAqIFdoZW4gYW4gYW5jaG9yIGFuaW1hdGlvbiBvY2N1cnMsIG5nQW5pbWF0ZSB3aWxsIGNsb25lIHRoZSBzdGFydGluZyBlbGVtZW50IGFuZCBwb3NpdGlvbiBpdCBleGFjdGx5IHdoZXJlIHRoZSBzdGFydGluZ1xuICogZWxlbWVudCBpcyBsb2NhdGVkIG9uIHNjcmVlbiB2aWEgYWJzb2x1dGUgcG9zaXRpb25pbmcuIFRoZSBjbG9uZWQgZWxlbWVudCB3aWxsIGJlIHBsYWNlZCBpbnNpZGUgb2YgdGhlIHJvb3QgZWxlbWVudFxuICogb2YgdGhlIGFwcGxpY2F0aW9uICh3aGVyZSBuZy1hcHAgd2FzIGRlZmluZWQpIGFuZCBhbGwgb2YgdGhlIENTUyBjbGFzc2VzIG9mIHRoZSBzdGFydGluZyBlbGVtZW50IHdpbGwgYmUgYXBwbGllZC4gVGhlXG4gKiBlbGVtZW50IHdpbGwgdGhlbiBhbmltYXRlIGludG8gdGhlIGBvdXRgIGFuZCBgaW5gIGFuaW1hdGlvbnMgYW5kIHdpbGwgZXZlbnR1YWxseSByZWFjaCB0aGUgY29vcmRpbmF0ZXMgYW5kIG1hdGNoXG4gKiB0aGUgZGltZW5zaW9ucyBvZiB0aGUgZGVzdGluYXRpb24gZWxlbWVudC4gRHVyaW5nIHRoZSBlbnRpcmUgYW5pbWF0aW9uIGEgQ1NTIGNsYXNzIG9mIGAubmctYW5pbWF0ZS1zaGltYCB3aWxsIGJlIGFwcGxpZWRcbiAqIHRvIGJvdGggdGhlIHN0YXJ0aW5nIGFuZCBkZXN0aW5hdGlvbiBlbGVtZW50cyBpbiBvcmRlciB0byBoaWRlIHRoZW0gZnJvbSBiZWluZyB2aXNpYmxlICh0aGUgQ1NTIHN0eWxpbmcgZm9yIHRoZSBjbGFzc1xuICogaXM6IGB2aXNpYmlsaXR5OmhpZGRlbmApLiBPbmNlIHRoZSBhbmNob3IgcmVhY2hlcyBpdHMgZGVzdGluYXRpb24gdGhlbiBpdCB3aWxsIGJlIHJlbW92ZWQgYW5kIHRoZSBkZXN0aW5hdGlvbiBlbGVtZW50XG4gKiB3aWxsIGJlY29tZSB2aXNpYmxlIHNpbmNlIHRoZSBzaGltIGNsYXNzIHdpbGwgYmUgcmVtb3ZlZC5cbiAqXG4gKiAjIyMgSG93IGlzIHRoZSBtb3JwaGluZyBoYW5kbGVkP1xuICpcbiAqIENTUyBBbmNob3JpbmcgcmVsaWVzIG9uIHRyYW5zaXRpb25zIGFuZCBrZXlmcmFtZXMgYW5kIHRoZSBpbnRlcm5hbCBjb2RlIGlzIGludGVsbGlnZW50IGVub3VnaCB0byBmaWd1cmUgb3V0XG4gKiB3aGF0IENTUyBjbGFzc2VzIGRpZmZlciBiZXR3ZWVuIHRoZSBzdGFydGluZyBlbGVtZW50IGFuZCB0aGUgZGVzdGluYXRpb24gZWxlbWVudC4gVGhlc2UgZGlmZmVyZW50IENTUyBjbGFzc2VzXG4gKiB3aWxsIGJlIGFkZGVkL3JlbW92ZWQgb24gdGhlIGFuY2hvciBlbGVtZW50IGFuZCBhIHRyYW5zaXRpb24gd2lsbCBiZSBhcHBsaWVkICh0aGUgdHJhbnNpdGlvbiB0aGF0IGlzIHByb3ZpZGVkXG4gKiBpbiB0aGUgYW5jaG9yIGNsYXNzKS4gTG9uZyBzdG9yeSBzaG9ydCwgbmdBbmltYXRlIHdpbGwgZmlndXJlIG91dCB3aGF0IGNsYXNzZXMgdG8gYWRkIGFuZCByZW1vdmUgd2hpY2ggd2lsbFxuICogbWFrZSB0aGUgdHJhbnNpdGlvbiBvZiB0aGUgZWxlbWVudCBhcyBzbW9vdGggYW5kIGF1dG9tYXRpYyBhcyBwb3NzaWJsZS4gQmUgc3VyZSB0byB1c2Ugc2ltcGxlIENTUyBjbGFzc2VzIHRoYXRcbiAqIGRvIG5vdCByZWx5IG9uIERPTSBuZXN0aW5nIHN0cnVjdHVyZSBzbyB0aGF0IHRoZSBhbmNob3IgZWxlbWVudCBhcHBlYXJzIHRoZSBzYW1lIGFzIHRoZSBzdGFydGluZyBlbGVtZW50IChzaW5jZVxuICogdGhlIGNsb25lZCBlbGVtZW50IGlzIHBsYWNlZCBpbnNpZGUgb2Ygcm9vdCBlbGVtZW50IHdoaWNoIGlzIGxpa2VseSBjbG9zZSB0byB0aGUgYm9keSBlbGVtZW50KS5cbiAqXG4gKiBOb3RlIHRoYXQgaWYgdGhlIHJvb3QgZWxlbWVudCBpcyBvbiB0aGUgYDxodG1sPmAgZWxlbWVudCB0aGVuIHRoZSBjbG9uZWQgbm9kZSB3aWxsIGJlIHBsYWNlZCBpbnNpZGUgb2YgYm9keS5cbiAqXG4gKlxuICogIyMgVXNpbmcgJGFuaW1hdGUgaW4geW91ciBkaXJlY3RpdmUgY29kZVxuICpcbiAqIFNvIGZhciB3ZSd2ZSBleHBsb3JlZCBob3cgdG8gZmVlZCBpbiBhbmltYXRpb25zIGludG8gYW4gQW5ndWxhciBhcHBsaWNhdGlvbiwgYnV0IGhvdyBkbyB3ZSB0cmlnZ2VyIGFuaW1hdGlvbnMgd2l0aGluIG91ciBvd24gZGlyZWN0aXZlcyBpbiBvdXIgYXBwbGljYXRpb24/XG4gKiBCeSBpbmplY3RpbmcgdGhlIGAkYW5pbWF0ZWAgc2VydmljZSBpbnRvIG91ciBkaXJlY3RpdmUgY29kZSwgd2UgY2FuIHRyaWdnZXIgc3RydWN0dXJhbCBhbmQgY2xhc3MtYmFzZWQgaG9va3Mgd2hpY2ggY2FuIHRoZW4gYmUgY29uc3VtZWQgYnkgYW5pbWF0aW9ucy4gTGV0J3NcbiAqIGltYWdpbmUgd2UgaGF2ZSBhIGdyZWV0aW5nIGJveCB0aGF0IHNob3dzIGFuZCBoaWRlcyBpdHNlbGYgd2hlbiB0aGUgZGF0YSBjaGFuZ2VzXG4gKlxuICogYGBgaHRtbFxuICogPGdyZWV0aW5nLWJveCBhY3RpdmU9XCJvbk9yT2ZmXCI+SGkgdGhlcmU8L2dyZWV0aW5nLWJveD5cbiAqIGBgYFxuICpcbiAqIGBgYGpzXG4gKiBuZ01vZHVsZS5kaXJlY3RpdmUoJ2dyZWV0aW5nQm94JywgWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gKiAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAqICAgICBhdHRycy4kb2JzZXJ2ZSgnYWN0aXZlJywgZnVuY3Rpb24odmFsdWUpIHtcbiAqICAgICAgIHZhbHVlID8gJGFuaW1hdGUuYWRkQ2xhc3MoZWxlbWVudCwgJ29uJykgOiAkYW5pbWF0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCAnb24nKTtcbiAqICAgICB9KTtcbiAqICAgfSk7XG4gKiB9XSk7XG4gKiBgYGBcbiAqXG4gKiBOb3cgdGhlIGBvbmAgQ1NTIGNsYXNzIGlzIGFkZGVkIGFuZCByZW1vdmVkIG9uIHRoZSBncmVldGluZyBib3ggY29tcG9uZW50LiBOb3cgaWYgd2UgYWRkIGEgQ1NTIGNsYXNzIG9uIHRvcCBvZiB0aGUgZ3JlZXRpbmcgYm94IGVsZW1lbnRcbiAqIGluIG91ciBIVE1MIGNvZGUgdGhlbiB3ZSBjYW4gdHJpZ2dlciBhIENTUyBvciBKUyBhbmltYXRpb24gdG8gaGFwcGVuLlxuICpcbiAqIGBgYGNzc1xuICogLyYjNDI7IG5vcm1hbGx5IHdlIHdvdWxkIGNyZWF0ZSBhIENTUyBjbGFzcyB0byByZWZlcmVuY2Ugb24gdGhlIGVsZW1lbnQgJiM0MjsvXG4gKiBncmVldGluZy1ib3gub24geyB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDsgYmFja2dyb3VuZDpncmVlbjsgY29sb3I6d2hpdGU7IH1cbiAqIGBgYFxuICpcbiAqIFRoZSBgJGFuaW1hdGVgIHNlcnZpY2UgY29udGFpbnMgYSB2YXJpZXR5IG9mIG90aGVyIG1ldGhvZHMgbGlrZSBgZW50ZXJgLCBgbGVhdmVgLCBgYW5pbWF0ZWAgYW5kIGBzZXRDbGFzc2AuIFRvIGxlYXJuIG1vcmUgYWJvdXQgd2hhdCdzXG4gKiBwb3NzaWJsZSBiZSBzdXJlIHRvIHZpc2l0IHRoZSB7QGxpbmsgbmcuJGFuaW1hdGUgJGFuaW1hdGUgc2VydmljZSBBUEkgcGFnZX0uXG4gKlxuICpcbiAqICMjIyBQcmV2ZW50aW5nIENvbGxpc2lvbnMgV2l0aCBUaGlyZCBQYXJ0eSBMaWJyYXJpZXNcbiAqXG4gKiBTb21lIHRoaXJkLXBhcnR5IGZyYW1ld29ya3MgcGxhY2UgYW5pbWF0aW9uIGR1cmF0aW9uIGRlZmF1bHRzIGFjcm9zcyBtYW55IGVsZW1lbnQgb3IgY2xhc3NOYW1lXG4gKiBzZWxlY3RvcnMgaW4gb3JkZXIgdG8gbWFrZSB0aGVpciBjb2RlIHNtYWxsIGFuZCByZXVzZWFibGUuIFRoaXMgY2FuIGxlYWQgdG8gaXNzdWVzIHdpdGggbmdBbmltYXRlLCB3aGljaFxuICogaXMgZXhwZWN0aW5nIGFjdHVhbCBhbmltYXRpb25zIG9uIHRoZXNlIGVsZW1lbnRzIGFuZCBoYXMgdG8gd2FpdCBmb3IgdGhlaXIgY29tcGxldGlvbi5cbiAqXG4gKiBZb3UgY2FuIHByZXZlbnQgdGhpcyB1bndhbnRlZCBiZWhhdmlvciBieSB1c2luZyBhIHByZWZpeCBvbiBhbGwgeW91ciBhbmltYXRpb24gY2xhc3NlczpcbiAqXG4gKiBgYGBjc3NcbiAqIC8mIzQyOyBwcmVmaXhlZCB3aXRoIGFuaW1hdGUtICYjNDI7L1xuICogLmFuaW1hdGUtZmFkZS1hZGQuYW5pbWF0ZS1mYWRlLWFkZC1hY3RpdmUge1xuICogICB0cmFuc2l0aW9uOjFzIGxpbmVhciBhbGw7XG4gKiAgIG9wYWNpdHk6MDtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFlvdSB0aGVuIGNvbmZpZ3VyZSBgJGFuaW1hdGVgIHRvIGVuZm9yY2UgdGhpcyBwcmVmaXg6XG4gKlxuICogYGBganNcbiAqICRhbmltYXRlUHJvdmlkZXIuY2xhc3NOYW1lRmlsdGVyKC9hbmltYXRlLS8pO1xuICogYGBgXG4gKlxuICogVGhpcyBhbHNvIG1heSBwcm92aWRlIHlvdXIgYXBwbGljYXRpb24gd2l0aCBhIHNwZWVkIGJvb3N0IHNpbmNlIG9ubHkgc3BlY2lmaWMgZWxlbWVudHMgY29udGFpbmluZyBDU1MgY2xhc3MgcHJlZml4XG4gKiB3aWxsIGJlIGV2YWx1YXRlZCBmb3IgYW5pbWF0aW9uIHdoZW4gYW55IERPTSBjaGFuZ2VzIG9jY3VyIGluIHRoZSBhcHBsaWNhdGlvbi5cbiAqXG4gKiAjIyBDYWxsYmFja3MgYW5kIFByb21pc2VzXG4gKlxuICogV2hlbiBgJGFuaW1hdGVgIGlzIGNhbGxlZCBpdCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGNhbiBiZSB1c2VkIHRvIGNhcHR1cmUgd2hlbiB0aGUgYW5pbWF0aW9uIGhhcyBlbmRlZC4gVGhlcmVmb3JlIGlmIHdlIHdlcmUgdG8gdHJpZ2dlclxuICogYW4gYW5pbWF0aW9uICh3aXRoaW4gb3VyIGRpcmVjdGl2ZSBjb2RlKSB0aGVuIHdlIGNhbiBjb250aW51ZSBwZXJmb3JtaW5nIGRpcmVjdGl2ZSBhbmQgc2NvcGUgcmVsYXRlZCBhY3Rpdml0aWVzIGFmdGVyIHRoZSBhbmltYXRpb24gaGFzXG4gKiBlbmRlZCBieSBjaGFpbmluZyBvbnRvIHRoZSByZXR1cm5lZCBwcm9taXNlIHRoYXQgYW5pbWF0aW9uIG1ldGhvZCByZXR1cm5zLlxuICpcbiAqIGBgYGpzXG4gKiAvLyBzb21ld2hlcmUgd2l0aGluIHRoZSBkZXB0aHMgb2YgdGhlIGRpcmVjdGl2ZVxuICogJGFuaW1hdGUuZW50ZXIoZWxlbWVudCwgcGFyZW50KS50aGVuKGZ1bmN0aW9uKCkge1xuICogICAvL3RoZSBhbmltYXRpb24gaGFzIGNvbXBsZXRlZFxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiAoTm90ZSB0aGF0IGVhcmxpZXIgdmVyc2lvbnMgb2YgQW5ndWxhciBwcmlvciB0byB2MS40IHJlcXVpcmVkIHRoZSBwcm9taXNlIGNvZGUgdG8gYmUgd3JhcHBlZCB1c2luZyBgJHNjb3BlLiRhcHBseSguLi4pYC4gVGhpcyBpcyBub3QgdGhlIGNhc2VcbiAqIGFueW1vcmUuKVxuICpcbiAqIEluIGFkZGl0aW9uIHRvIHRoZSBhbmltYXRpb24gcHJvbWlzZSwgd2UgY2FuIGFsc28gbWFrZSB1c2Ugb2YgYW5pbWF0aW9uLXJlbGF0ZWQgY2FsbGJhY2tzIHdpdGhpbiBvdXIgZGlyZWN0aXZlcyBhbmQgY29udHJvbGxlciBjb2RlIGJ5IHJlZ2lzdGVyaW5nXG4gKiBhbiBldmVudCBsaXN0ZW5lciB1c2luZyB0aGUgYCRhbmltYXRlYCBzZXJ2aWNlLiBMZXQncyBzYXkgZm9yIGV4YW1wbGUgdGhhdCBhbiBhbmltYXRpb24gd2FzIHRyaWdnZXJlZCBvbiBvdXIgdmlld1xuICogcm91dGluZyBjb250cm9sbGVyIHRvIGhvb2sgaW50byB0aGF0OlxuICpcbiAqIGBgYGpzXG4gKiBuZ01vZHVsZS5jb250cm9sbGVyKCdIb21lUGFnZUNvbnRyb2xsZXInLCBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcbiAqICAgJGFuaW1hdGUub24oJ2VudGVyJywgbmdWaWV3RWxlbWVudCwgZnVuY3Rpb24oZWxlbWVudCkge1xuICogICAgIC8vIHRoZSBhbmltYXRpb24gZm9yIHRoaXMgcm91dGUgaGFzIGNvbXBsZXRlZFxuICogICB9XSk7XG4gKiB9XSlcbiAqIGBgYFxuICpcbiAqIChOb3RlIHRoYXQgeW91IHdpbGwgbmVlZCB0byB0cmlnZ2VyIGEgZGlnZXN0IHdpdGhpbiB0aGUgY2FsbGJhY2sgdG8gZ2V0IGFuZ3VsYXIgdG8gbm90aWNlIGFueSBzY29wZS1yZWxhdGVkIGNoYW5nZXMuKVxuICovXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRhbmltYXRlXG4gKiBAa2luZCBvYmplY3RcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBuZ0FuaW1hdGUgYCRhbmltYXRlYCBzZXJ2aWNlIGRvY3VtZW50YXRpb24gaXMgdGhlIHNhbWUgZm9yIHRoZSBjb3JlIGAkYW5pbWF0ZWAgc2VydmljZS5cbiAqXG4gKiBDbGljayBoZXJlIHtAbGluayBuZy4kYW5pbWF0ZSAkYW5pbWF0ZSB0byBsZWFybiBtb3JlIGFib3V0IGFuaW1hdGlvbnMgd2l0aCBgJGFuaW1hdGVgfS5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ25nQW5pbWF0ZScsIFtdKVxuICAuZGlyZWN0aXZlKCduZ0FuaW1hdGVDaGlsZHJlbicsICQkQW5pbWF0ZUNoaWxkcmVuRGlyZWN0aXZlKVxuXG4gIC5mYWN0b3J5KCckJHJBRk11dGV4JywgJCRyQUZNdXRleEZhY3RvcnkpXG4gIC5mYWN0b3J5KCckJHJBRlNjaGVkdWxlcicsICQkckFGU2NoZWR1bGVyRmFjdG9yeSlcblxuICAuZmFjdG9yeSgnJCRBbmltYXRlUnVubmVyJywgJCRBbmltYXRlUnVubmVyRmFjdG9yeSlcblxuICAucHJvdmlkZXIoJyQkYW5pbWF0ZVF1ZXVlJywgJCRBbmltYXRlUXVldWVQcm92aWRlcilcbiAgLnByb3ZpZGVyKCckJGFuaW1hdGlvbicsICQkQW5pbWF0aW9uUHJvdmlkZXIpXG5cbiAgLnByb3ZpZGVyKCckYW5pbWF0ZUNzcycsICRBbmltYXRlQ3NzUHJvdmlkZXIpXG4gIC5wcm92aWRlcignJCRhbmltYXRlQ3NzRHJpdmVyJywgJCRBbmltYXRlQ3NzRHJpdmVyUHJvdmlkZXIpXG5cbiAgLnByb3ZpZGVyKCckJGFuaW1hdGVKcycsICQkQW5pbWF0ZUpzUHJvdmlkZXIpXG4gIC5wcm92aWRlcignJCRhbmltYXRlSnNEcml2ZXInLCAkJEFuaW1hdGVKc0RyaXZlclByb3ZpZGVyKTtcblxuXG59KSh3aW5kb3csIHdpbmRvdy5hbmd1bGFyKTtcbiIsInJlcXVpcmUoJy4vYW5ndWxhci1hbmltYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9ICduZ0FuaW1hdGUnO1xuIiwiLyoqXG4gKiBAbGljZW5zZSBBbmd1bGFySlMgdjEuNC4zXG4gKiAoYykgMjAxMC0yMDE1IEdvb2dsZSwgSW5jLiBodHRwOi8vYW5ndWxhcmpzLm9yZ1xuICogTGljZW5zZTogTUlUXG4gKi9cbihmdW5jdGlvbih3aW5kb3csIGFuZ3VsYXIsIHVuZGVmaW5lZCkgeyd1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBuZ0FyaWFcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoZSBgbmdBcmlhYCBtb2R1bGUgcHJvdmlkZXMgc3VwcG9ydCBmb3IgY29tbW9uXG4gKiBbPGFiYnIgdGl0bGU9XCJBY2Nlc3NpYmxlIFJpY2ggSW50ZXJuZXQgQXBwbGljYXRpb25zXCI+QVJJQTwvYWJicj5dKGh0dHA6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLylcbiAqIGF0dHJpYnV0ZXMgdGhhdCBjb252ZXkgc3RhdGUgb3Igc2VtYW50aWMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGFwcGxpY2F0aW9uIGZvciB1c2Vyc1xuICogb2YgYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgc3VjaCBhcyBzY3JlZW4gcmVhZGVycy5cbiAqXG4gKiA8ZGl2IGRvYy1tb2R1bGUtY29tcG9uZW50cz1cIm5nQXJpYVwiPjwvZGl2PlxuICpcbiAqICMjIFVzYWdlXG4gKlxuICogRm9yIG5nQXJpYSB0byBkbyBpdHMgbWFnaWMsIHNpbXBseSBpbmNsdWRlIHRoZSBtb2R1bGUgYG5nQXJpYWAgYXMgYSBkZXBlbmRlbmN5LiBUaGUgZm9sbG93aW5nXG4gKiBkaXJlY3RpdmVzIGFyZSBzdXBwb3J0ZWQ6XG4gKiBgbmdNb2RlbGAsIGBuZ0Rpc2FibGVkYCwgYG5nU2hvd2AsIGBuZ0hpZGVgLCBgbmdDbGlja2AsIGBuZ0RibENsaWNrYCwgYW5kIGBuZ01lc3NhZ2VzYC5cbiAqXG4gKiBCZWxvdyBpcyBhIG1vcmUgZGV0YWlsZWQgYnJlYWtkb3duIG9mIHRoZSBhdHRyaWJ1dGVzIGhhbmRsZWQgYnkgbmdBcmlhOlxuICpcbiAqIHwgRGlyZWN0aXZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFN1cHBvcnRlZCBBdHRyaWJ1dGVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Rpc2FibGVkIG5nRGlzYWJsZWR9ICB8IGFyaWEtZGlzYWJsZWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1Nob3cgbmdTaG93fSAgICAgICAgICB8IGFyaWEtaGlkZGVuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0hpZGUgbmdIaWRlfSAgICAgICAgICB8IGFyaWEtaGlkZGVuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0RibGNsaWNrIG5nRGJsY2xpY2t9ICB8IHRhYmluZGV4ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwge0BsaW5rIG1vZHVsZTpuZ01lc3NhZ2VzIG5nTWVzc2FnZXN9ICAgICAgICB8IGFyaWEtbGl2ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsIG5nTW9kZWx9ICAgICAgICB8IGFyaWEtY2hlY2tlZCwgYXJpYS12YWx1ZW1pbiwgYXJpYS12YWx1ZW1heCwgYXJpYS12YWx1ZW5vdywgYXJpYS1pbnZhbGlkLCBhcmlhLXJlcXVpcmVkLCBpbnB1dCByb2xlcyB8XG4gKiB8IHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfSAgICAgICAgfCB0YWJpbmRleCwga2V5cHJlc3MgZXZlbnQsIGJ1dHRvbiByb2xlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIEZpbmQgb3V0IG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgZWFjaCBkaXJlY3RpdmUgYnkgcmVhZGluZyB0aGVcbiAqIHtAbGluayBndWlkZS9hY2Nlc3NpYmlsaXR5IG5nQXJpYSBEZXZlbG9wZXIgR3VpZGV9LlxuICpcbiAqICMjRXhhbXBsZVxuICogVXNpbmcgbmdEaXNhYmxlZCB3aXRoIG5nQXJpYTpcbiAqIGBgYGh0bWxcbiAqIDxtZC1jaGVja2JveCBuZy1kaXNhYmxlZD1cImRpc2FibGVkXCI+XG4gKiBgYGBcbiAqIEJlY29tZXM6XG4gKiBgYGBodG1sXG4gKiA8bWQtY2hlY2tib3ggbmctZGlzYWJsZWQ9XCJkaXNhYmxlZFwiIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCI+XG4gKiBgYGBcbiAqXG4gKiAjI0Rpc2FibGluZyBBdHRyaWJ1dGVzXG4gKiBJdCdzIHBvc3NpYmxlIHRvIGRpc2FibGUgaW5kaXZpZHVhbCBhdHRyaWJ1dGVzIGFkZGVkIGJ5IG5nQXJpYSB3aXRoIHRoZVxuICoge0BsaW5rIG5nQXJpYS4kYXJpYVByb3ZpZGVyI2NvbmZpZyBjb25maWd9IG1ldGhvZC4gRm9yIG1vcmUgZGV0YWlscywgc2VlIHRoZVxuICoge0BsaW5rIGd1aWRlL2FjY2Vzc2liaWxpdHkgRGV2ZWxvcGVyIEd1aWRlfS5cbiAqL1xuIC8qIGdsb2JhbCAtbmdBcmlhTW9kdWxlICovXG52YXIgbmdBcmlhTW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ25nQXJpYScsIFsnbmcnXSkuXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlcignJGFyaWEnLCAkQXJpYVByb3ZpZGVyKTtcblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRhcmlhUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBVc2VkIGZvciBjb25maWd1cmluZyB0aGUgQVJJQSBhdHRyaWJ1dGVzIGluamVjdGVkIGFuZCBtYW5hZ2VkIGJ5IG5nQXJpYS5cbiAqXG4gKiBgYGBqc1xuICogYW5ndWxhci5tb2R1bGUoJ215QXBwJywgWyduZ0FyaWEnXSwgZnVuY3Rpb24gY29uZmlnKCRhcmlhUHJvdmlkZXIpIHtcbiAqICAgJGFyaWFQcm92aWRlci5jb25maWcoe1xuICogICAgIGFyaWFWYWx1ZTogdHJ1ZSxcbiAqICAgICB0YWJpbmRleDogZmFsc2VcbiAqICAgfSk7XG4gKiB9KTtcbiAqYGBgXG4gKlxuICogIyMgRGVwZW5kZW5jaWVzXG4gKiBSZXF1aXJlcyB0aGUge0BsaW5rIG5nQXJpYX0gbW9kdWxlIHRvIGJlIGluc3RhbGxlZC5cbiAqXG4gKi9cbmZ1bmN0aW9uICRBcmlhUHJvdmlkZXIoKSB7XG4gIHZhciBjb25maWcgPSB7XG4gICAgYXJpYUhpZGRlbjogdHJ1ZSxcbiAgICBhcmlhQ2hlY2tlZDogdHJ1ZSxcbiAgICBhcmlhRGlzYWJsZWQ6IHRydWUsXG4gICAgYXJpYVJlcXVpcmVkOiB0cnVlLFxuICAgIGFyaWFJbnZhbGlkOiB0cnVlLFxuICAgIGFyaWFNdWx0aWxpbmU6IHRydWUsXG4gICAgYXJpYVZhbHVlOiB0cnVlLFxuICAgIHRhYmluZGV4OiB0cnVlLFxuICAgIGJpbmRLZXlwcmVzczogdHJ1ZSxcbiAgICBiaW5kUm9sZUZvckNsaWNrOiB0cnVlXG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGFyaWFQcm92aWRlciNjb25maWdcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBvYmplY3QgdG8gZW5hYmxlL2Rpc2FibGUgc3BlY2lmaWMgQVJJQSBhdHRyaWJ1dGVzXG4gICAqXG4gICAqICAtICoqYXJpYUhpZGRlbioqIOKAkyBge2Jvb2xlYW59YCDigJMgRW5hYmxlcy9kaXNhYmxlcyBhcmlhLWhpZGRlbiB0YWdzXG4gICAqICAtICoqYXJpYUNoZWNrZWQqKiDigJMgYHtib29sZWFufWAg4oCTIEVuYWJsZXMvZGlzYWJsZXMgYXJpYS1jaGVja2VkIHRhZ3NcbiAgICogIC0gKiphcmlhRGlzYWJsZWQqKiDigJMgYHtib29sZWFufWAg4oCTIEVuYWJsZXMvZGlzYWJsZXMgYXJpYS1kaXNhYmxlZCB0YWdzXG4gICAqICAtICoqYXJpYVJlcXVpcmVkKiog4oCTIGB7Ym9vbGVhbn1gIOKAkyBFbmFibGVzL2Rpc2FibGVzIGFyaWEtcmVxdWlyZWQgdGFnc1xuICAgKiAgLSAqKmFyaWFJbnZhbGlkKiog4oCTIGB7Ym9vbGVhbn1gIOKAkyBFbmFibGVzL2Rpc2FibGVzIGFyaWEtaW52YWxpZCB0YWdzXG4gICAqICAtICoqYXJpYU11bHRpbGluZSoqIOKAkyBge2Jvb2xlYW59YCDigJMgRW5hYmxlcy9kaXNhYmxlcyBhcmlhLW11bHRpbGluZSB0YWdzXG4gICAqICAtICoqYXJpYVZhbHVlKiog4oCTIGB7Ym9vbGVhbn1gIOKAkyBFbmFibGVzL2Rpc2FibGVzIGFyaWEtdmFsdWVtaW4sIGFyaWEtdmFsdWVtYXggYW5kIGFyaWEtdmFsdWVub3cgdGFnc1xuICAgKiAgLSAqKnRhYmluZGV4Kiog4oCTIGB7Ym9vbGVhbn1gIOKAkyBFbmFibGVzL2Rpc2FibGVzIHRhYmluZGV4IHRhZ3NcbiAgICogIC0gKipiaW5kS2V5cHJlc3MqKiDigJMgYHtib29sZWFufWAg4oCTIEVuYWJsZXMvZGlzYWJsZXMga2V5cHJlc3MgZXZlbnQgYmluZGluZyBvbiBgJmx0O2RpdiZndDtgIGFuZFxuICAgKiAgICBgJmx0O2xpJmd0O2AgZWxlbWVudHMgd2l0aCBuZy1jbGlja1xuICAgKiAgLSAqKmJpbmRSb2xlRm9yQ2xpY2sqKiDigJMgYHtib29sZWFufWAg4oCTIEFkZHMgcm9sZT1idXR0b24gdG8gbm9uLWludGVyYWN0aXZlIGVsZW1lbnRzIGxpa2UgYGRpdmBcbiAgICogICAgdXNpbmcgbmctY2xpY2ssIG1ha2luZyB0aGVtIG1vcmUgYWNjZXNzaWJsZSB0byB1c2VycyBvZiBhc3Npc3RpdmUgdGVjaG5vbG9naWVzXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBFbmFibGVzL2Rpc2FibGVzIHZhcmlvdXMgQVJJQSBhdHRyaWJ1dGVzXG4gICAqL1xuICB0aGlzLmNvbmZpZyA9IGZ1bmN0aW9uKG5ld0NvbmZpZykge1xuICAgIGNvbmZpZyA9IGFuZ3VsYXIuZXh0ZW5kKGNvbmZpZywgbmV3Q29uZmlnKTtcbiAgfTtcblxuICBmdW5jdGlvbiB3YXRjaEV4cHIoYXR0ck5hbWUsIGFyaWFBdHRyLCBuZWdhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW0sIGF0dHIpIHtcbiAgICAgIHZhciBhcmlhQ2FtZWxOYW1lID0gYXR0ci4kbm9ybWFsaXplKGFyaWFBdHRyKTtcbiAgICAgIGlmIChjb25maWdbYXJpYUNhbWVsTmFtZV0gJiYgIWF0dHJbYXJpYUNhbWVsTmFtZV0pIHtcbiAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJbYXR0ck5hbWVdLCBmdW5jdGlvbihib29sVmFsKSB7XG4gICAgICAgICAgLy8gZW5zdXJlIGJvb2xlYW4gdmFsdWVcbiAgICAgICAgICBib29sVmFsID0gbmVnYXRlID8gIWJvb2xWYWwgOiAhIWJvb2xWYWw7XG4gICAgICAgICAgZWxlbS5hdHRyKGFyaWFBdHRyLCBib29sVmFsKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2Mgc2VydmljZVxuICAgKiBAbmFtZSAkYXJpYVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQHByaW9yaXR5IDIwMFxuICAgKlxuICAgKiBUaGUgJGFyaWEgc2VydmljZSBjb250YWlucyBoZWxwZXIgbWV0aG9kcyBmb3IgYXBwbHlpbmcgY29tbW9uXG4gICAqIFtBUklBXShodHRwOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS8pIGF0dHJpYnV0ZXMgdG8gSFRNTCBkaXJlY3RpdmVzLlxuICAgKlxuICAgKiBuZ0FyaWEgaW5qZWN0cyBjb21tb24gYWNjZXNzaWJpbGl0eSBhdHRyaWJ1dGVzIHRoYXQgdGVsbCBhc3Npc3RpdmUgdGVjaG5vbG9naWVzIHdoZW4gSFRNTFxuICAgKiBlbGVtZW50cyBhcmUgZW5hYmxlZCwgc2VsZWN0ZWQsIGhpZGRlbiwgYW5kIG1vcmUuIFRvIHNlZSBob3cgdGhpcyBpcyBwZXJmb3JtZWQgd2l0aCBuZ0FyaWEsXG4gICAqIGxldCdzIHJldmlldyBhIGNvZGUgc25pcHBldCBmcm9tIG5nQXJpYSBpdHNlbGY6XG4gICAqXG4gICAqYGBganNcbiAgICogbmdBcmlhTW9kdWxlLmRpcmVjdGl2ZSgnbmdEaXNhYmxlZCcsIFsnJGFyaWEnLCBmdW5jdGlvbigkYXJpYSkge1xuICAgKiAgIHJldHVybiAkYXJpYS4kJHdhdGNoRXhwcignbmdEaXNhYmxlZCcsICdhcmlhLWRpc2FibGVkJyk7XG4gICAqIH1dKVxuICAgKmBgYFxuICAgKiBTaG93biBhYm92ZSwgdGhlIG5nQXJpYSBtb2R1bGUgY3JlYXRlcyBhIGRpcmVjdGl2ZSB3aXRoIHRoZSBzYW1lIHNpZ25hdHVyZSBhcyB0aGVcbiAgICogdHJhZGl0aW9uYWwgYG5nLWRpc2FibGVkYCBkaXJlY3RpdmUuIEJ1dCB0aGlzIG5nQXJpYSB2ZXJzaW9uIGlzIGRlZGljYXRlZCB0b1xuICAgKiBzb2xlbHkgbWFuYWdpbmcgYWNjZXNzaWJpbGl0eSBhdHRyaWJ1dGVzLiBUaGUgaW50ZXJuYWwgYCRhcmlhYCBzZXJ2aWNlIGlzIHVzZWQgdG8gd2F0Y2ggdGhlXG4gICAqIGJvb2xlYW4gYXR0cmlidXRlIGBuZ0Rpc2FibGVkYC4gSWYgaXQgaGFzIG5vdCBiZWVuIGV4cGxpY2l0bHkgc2V0IGJ5IHRoZSBkZXZlbG9wZXIsXG4gICAqIGBhcmlhLWRpc2FibGVkYCBpcyBpbmplY3RlZCBhcyBhbiBhdHRyaWJ1dGUgd2l0aCBpdHMgdmFsdWUgc3luY2hyb25pemVkIHRvIHRoZSB2YWx1ZSBpblxuICAgKiBgbmdEaXNhYmxlZGAuXG4gICAqXG4gICAqIEJlY2F1c2UgbmdBcmlhIGhvb2tzIGludG8gdGhlIGBuZy1kaXNhYmxlZGAgZGlyZWN0aXZlLCBkZXZlbG9wZXJzIGRvIG5vdCBoYXZlIHRvIGRvXG4gICAqIGFueXRoaW5nIHRvIGVuYWJsZSB0aGlzIGZlYXR1cmUuIFRoZSBgYXJpYS1kaXNhYmxlZGAgYXR0cmlidXRlIGlzIGF1dG9tYXRpY2FsbHkgbWFuYWdlZFxuICAgKiBzaW1wbHkgYXMgYSBzaWxlbnQgc2lkZS1lZmZlY3Qgb2YgdXNpbmcgYG5nLWRpc2FibGVkYCB3aXRoIHRoZSBuZ0FyaWEgbW9kdWxlLlxuICAgKlxuICAgKiBUaGUgZnVsbCBsaXN0IG9mIGRpcmVjdGl2ZXMgdGhhdCBpbnRlcmZhY2Ugd2l0aCBuZ0FyaWE6XG4gICAqICogKipuZ01vZGVsKipcbiAgICogKiAqKm5nU2hvdyoqXG4gICAqICogKipuZ0hpZGUqKlxuICAgKiAqICoqbmdDbGljayoqXG4gICAqICogKipuZ0RibGNsaWNrKipcbiAgICogKiAqKm5nTWVzc2FnZXMqKlxuICAgKiAqICoqbmdEaXNhYmxlZCoqXG4gICAqXG4gICAqIFJlYWQgdGhlIHtAbGluayBndWlkZS9hY2Nlc3NpYmlsaXR5IG5nQXJpYSBEZXZlbG9wZXIgR3VpZGV9IGZvciBhIHRob3JvdWdoIGV4cGxhbmF0aW9uIG9mIGVhY2hcbiAgICogZGlyZWN0aXZlLlxuICAgKlxuICAgKlxuICAgKiAjIyBEZXBlbmRlbmNpZXNcbiAgICogUmVxdWlyZXMgdGhlIHtAbGluayBuZ0FyaWF9IG1vZHVsZSB0byBiZSBpbnN0YWxsZWQuXG4gICAqL1xuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29uZmlnOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZ1trZXldO1xuICAgICAgfSxcbiAgICAgICQkd2F0Y2hFeHByOiB3YXRjaEV4cHJcbiAgICB9O1xuICB9O1xufVxuXG5cbm5nQXJpYU1vZHVsZS5kaXJlY3RpdmUoJ25nU2hvdycsIFsnJGFyaWEnLCBmdW5jdGlvbigkYXJpYSkge1xuICByZXR1cm4gJGFyaWEuJCR3YXRjaEV4cHIoJ25nU2hvdycsICdhcmlhLWhpZGRlbicsIHRydWUpO1xufV0pXG4uZGlyZWN0aXZlKCduZ0hpZGUnLCBbJyRhcmlhJywgZnVuY3Rpb24oJGFyaWEpIHtcbiAgcmV0dXJuICRhcmlhLiQkd2F0Y2hFeHByKCduZ0hpZGUnLCAnYXJpYS1oaWRkZW4nLCBmYWxzZSk7XG59XSlcbi5kaXJlY3RpdmUoJ25nTW9kZWwnLCBbJyRhcmlhJywgZnVuY3Rpb24oJGFyaWEpIHtcblxuICBmdW5jdGlvbiBzaG91bGRBdHRhY2hBdHRyKGF0dHIsIG5vcm1hbGl6ZWRBdHRyLCBlbGVtKSB7XG4gICAgcmV0dXJuICRhcmlhLmNvbmZpZyhub3JtYWxpemVkQXR0cikgJiYgIWVsZW0uYXR0cihhdHRyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEF0dGFjaFJvbGUocm9sZSwgZWxlbSkge1xuICAgIHJldHVybiAhZWxlbS5hdHRyKCdyb2xlJykgJiYgKGVsZW0uYXR0cigndHlwZScpID09PSByb2xlKSAmJiAoZWxlbVswXS5ub2RlTmFtZSAhPT0gJ0lOUFVUJyk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTaGFwZShhdHRyLCBlbGVtKSB7XG4gICAgdmFyIHR5cGUgPSBhdHRyLnR5cGUsXG4gICAgICAgIHJvbGUgPSBhdHRyLnJvbGU7XG5cbiAgICByZXR1cm4gKCh0eXBlIHx8IHJvbGUpID09PSAnY2hlY2tib3gnIHx8IHJvbGUgPT09ICdtZW51aXRlbWNoZWNrYm94JykgPyAnY2hlY2tib3gnIDpcbiAgICAgICAgICAgKCh0eXBlIHx8IHJvbGUpID09PSAncmFkaW8nICAgIHx8IHJvbGUgPT09ICdtZW51aXRlbXJhZGlvJykgPyAncmFkaW8nIDpcbiAgICAgICAgICAgKHR5cGUgPT09ICdyYW5nZScgICAgICAgICAgICAgIHx8IHJvbGUgPT09ICdwcm9ncmVzc2JhcicgfHwgcm9sZSA9PT0gJ3NsaWRlcicpID8gJ3JhbmdlJyA6XG4gICAgICAgICAgICh0eXBlIHx8IHJvbGUpID09PSAndGV4dGJveCcgICB8fCBlbGVtWzBdLm5vZGVOYW1lID09PSAnVEVYVEFSRUEnID8gJ211bHRpbGluZScgOiAnJztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIHByaW9yaXR5OiAyMDAsIC8vTWFrZSBzdXJlIHdhdGNoZXMgYXJlIGZpcmVkIGFmdGVyIGFueSBvdGhlciBkaXJlY3RpdmVzIHRoYXQgYWZmZWN0IHRoZSBuZ01vZGVsIHZhbHVlXG4gICAgY29tcGlsZTogZnVuY3Rpb24oZWxlbSwgYXR0cikge1xuICAgICAgdmFyIHNoYXBlID0gZ2V0U2hhcGUoYXR0ciwgZWxlbSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByZTogZnVuY3Rpb24oc2NvcGUsIGVsZW0sIGF0dHIsIG5nTW9kZWwpIHtcbiAgICAgICAgICBpZiAoc2hhcGUgPT09ICdjaGVja2JveCcgJiYgYXR0ci50eXBlICE9PSAnY2hlY2tib3gnKSB7XG4gICAgICAgICAgICAvL1VzZSB0aGUgaW5wdXRbY2hlY2tib3hdICRpc0VtcHR5IGltcGxlbWVudGF0aW9uIGZvciBlbGVtZW50cyB3aXRoIGNoZWNrYm94IHJvbGVzXG4gICAgICAgICAgICBuZ01vZGVsLiRpc0VtcHR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09PSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwb3N0OiBmdW5jdGlvbihzY29wZSwgZWxlbSwgYXR0ciwgbmdNb2RlbCkge1xuICAgICAgICAgIHZhciBuZWVkc1RhYkluZGV4ID0gc2hvdWxkQXR0YWNoQXR0cigndGFiaW5kZXgnLCAndGFiaW5kZXgnLCBlbGVtKTtcblxuICAgICAgICAgIGZ1bmN0aW9uIG5nQXJpYVdhdGNoTW9kZWxWYWx1ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBuZ01vZGVsLiRtb2RlbFZhbHVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIGdldFJhZGlvUmVhY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAobmVlZHNUYWJJbmRleCkge1xuICAgICAgICAgICAgICBuZWVkc1RhYkluZGV4ID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBuZ0FyaWFSYWRpb1JlYWN0aW9uKG5ld1ZhbCkge1xuICAgICAgICAgICAgICAgIHZhciBib29sVmFsID0gKGF0dHIudmFsdWUgPT0gbmdNb2RlbC4kdmlld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICBlbGVtLmF0dHIoJ2FyaWEtY2hlY2tlZCcsIGJvb2xWYWwpO1xuICAgICAgICAgICAgICAgIGVsZW0uYXR0cigndGFiaW5kZXgnLCAwIC0gIWJvb2xWYWwpO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nQXJpYVJhZGlvUmVhY3Rpb24obmV3VmFsKSB7XG4gICAgICAgICAgICAgICAgZWxlbS5hdHRyKCdhcmlhLWNoZWNrZWQnLCAoYXR0ci52YWx1ZSA9PSBuZ01vZGVsLiR2aWV3VmFsdWUpKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBuZ0FyaWFDaGVja2JveFJlYWN0aW9uKCkge1xuICAgICAgICAgICAgZWxlbS5hdHRyKCdhcmlhLWNoZWNrZWQnLCAhbmdNb2RlbC4kaXNFbXB0eShuZ01vZGVsLiR2aWV3VmFsdWUpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzd2l0Y2ggKHNoYXBlKSB7XG4gICAgICAgICAgICBjYXNlICdyYWRpbyc6XG4gICAgICAgICAgICBjYXNlICdjaGVja2JveCc6XG4gICAgICAgICAgICAgIGlmIChzaG91bGRBdHRhY2hSb2xlKHNoYXBlLCBlbGVtKSkge1xuICAgICAgICAgICAgICAgIGVsZW0uYXR0cigncm9sZScsIHNoYXBlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoc2hvdWxkQXR0YWNoQXR0cignYXJpYS1jaGVja2VkJywgJ2FyaWFDaGVja2VkJywgZWxlbSkpIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kd2F0Y2gobmdBcmlhV2F0Y2hNb2RlbFZhbHVlLCBzaGFwZSA9PT0gJ3JhZGlvJyA/XG4gICAgICAgICAgICAgICAgICAgIGdldFJhZGlvUmVhY3Rpb24oKSA6IG5nQXJpYUNoZWNrYm94UmVhY3Rpb24pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncmFuZ2UnOlxuICAgICAgICAgICAgICBpZiAoc2hvdWxkQXR0YWNoUm9sZShzaGFwZSwgZWxlbSkpIHtcbiAgICAgICAgICAgICAgICBlbGVtLmF0dHIoJ3JvbGUnLCAnc2xpZGVyJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKCRhcmlhLmNvbmZpZygnYXJpYVZhbHVlJykpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmVlZHNBcmlhVmFsdWVtaW4gPSAhZWxlbS5hdHRyKCdhcmlhLXZhbHVlbWluJykgJiZcbiAgICAgICAgICAgICAgICAgICAgKGF0dHIuaGFzT3duUHJvcGVydHkoJ21pbicpIHx8IGF0dHIuaGFzT3duUHJvcGVydHkoJ25nTWluJykpO1xuICAgICAgICAgICAgICAgIHZhciBuZWVkc0FyaWFWYWx1ZW1heCA9ICFlbGVtLmF0dHIoJ2FyaWEtdmFsdWVtYXgnKSAmJlxuICAgICAgICAgICAgICAgICAgICAoYXR0ci5oYXNPd25Qcm9wZXJ0eSgnbWF4JykgfHwgYXR0ci5oYXNPd25Qcm9wZXJ0eSgnbmdNYXgnKSk7XG4gICAgICAgICAgICAgICAgdmFyIG5lZWRzQXJpYVZhbHVlbm93ID0gIWVsZW0uYXR0cignYXJpYS12YWx1ZW5vdycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5lZWRzQXJpYVZhbHVlbWluKSB7XG4gICAgICAgICAgICAgICAgICBhdHRyLiRvYnNlcnZlKCdtaW4nLCBmdW5jdGlvbiBuZ0FyaWFWYWx1ZU1pblJlYWN0aW9uKG5ld1ZhbCkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtLmF0dHIoJ2FyaWEtdmFsdWVtaW4nLCBuZXdWYWwpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuZWVkc0FyaWFWYWx1ZW1heCkge1xuICAgICAgICAgICAgICAgICAgYXR0ci4kb2JzZXJ2ZSgnbWF4JywgZnVuY3Rpb24gbmdBcmlhVmFsdWVNaW5SZWFjdGlvbihuZXdWYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbS5hdHRyKCdhcmlhLXZhbHVlbWF4JywgbmV3VmFsKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmVlZHNBcmlhVmFsdWVub3cpIHtcbiAgICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChuZ0FyaWFXYXRjaE1vZGVsVmFsdWUsIGZ1bmN0aW9uIG5nQXJpYVZhbHVlTm93UmVhY3Rpb24obmV3VmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW0uYXR0cignYXJpYS12YWx1ZW5vdycsIG5ld1ZhbCk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtdWx0aWxpbmUnOlxuICAgICAgICAgICAgICBpZiAoc2hvdWxkQXR0YWNoQXR0cignYXJpYS1tdWx0aWxpbmUnLCAnYXJpYU11bHRpbGluZScsIGVsZW0pKSB7XG4gICAgICAgICAgICAgICAgZWxlbS5hdHRyKCdhcmlhLW11bHRpbGluZScsIHRydWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChuZWVkc1RhYkluZGV4KSB7XG4gICAgICAgICAgICBlbGVtLmF0dHIoJ3RhYmluZGV4JywgMCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG5nTW9kZWwuJHZhbGlkYXRvcnMucmVxdWlyZWQgJiYgc2hvdWxkQXR0YWNoQXR0cignYXJpYS1yZXF1aXJlZCcsICdhcmlhUmVxdWlyZWQnLCBlbGVtKSkge1xuICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIG5nQXJpYVJlcXVpcmVkV2F0Y2goKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZ01vZGVsLiRlcnJvci5yZXF1aXJlZDtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIG5nQXJpYVJlcXVpcmVkUmVhY3Rpb24obmV3VmFsKSB7XG4gICAgICAgICAgICAgIGVsZW0uYXR0cignYXJpYS1yZXF1aXJlZCcsICEhbmV3VmFsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzaG91bGRBdHRhY2hBdHRyKCdhcmlhLWludmFsaWQnLCAnYXJpYUludmFsaWQnLCBlbGVtKSkge1xuICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIG5nQXJpYUludmFsaWRXYXRjaCgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5nTW9kZWwuJGludmFsaWQ7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiBuZ0FyaWFJbnZhbGlkUmVhY3Rpb24obmV3VmFsKSB7XG4gICAgICAgICAgICAgIGVsZW0uYXR0cignYXJpYS1pbnZhbGlkJywgISFuZXdWYWwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dKVxuLmRpcmVjdGl2ZSgnbmdEaXNhYmxlZCcsIFsnJGFyaWEnLCBmdW5jdGlvbigkYXJpYSkge1xuICByZXR1cm4gJGFyaWEuJCR3YXRjaEV4cHIoJ25nRGlzYWJsZWQnLCAnYXJpYS1kaXNhYmxlZCcpO1xufV0pXG4uZGlyZWN0aXZlKCduZ01lc3NhZ2VzJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTWVzc2FnZXMnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtLCBhdHRyLCBuZ01lc3NhZ2VzKSB7XG4gICAgICBpZiAoIWVsZW0uYXR0cignYXJpYS1saXZlJykpIHtcbiAgICAgICAgZWxlbS5hdHRyKCdhcmlhLWxpdmUnLCAnYXNzZXJ0aXZlJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufSlcbi5kaXJlY3RpdmUoJ25nQ2xpY2snLFsnJGFyaWEnLCAnJHBhcnNlJywgZnVuY3Rpb24oJGFyaWEsICRwYXJzZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29tcGlsZTogZnVuY3Rpb24oZWxlbSwgYXR0cikge1xuICAgICAgdmFyIGZuID0gJHBhcnNlKGF0dHIubmdDbGljaywgLyogaW50ZXJjZXB0b3JGbiAqLyBudWxsLCAvKiBleHBlbnNpdmVDaGVja3MgKi8gdHJ1ZSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW0sIGF0dHIpIHtcblxuICAgICAgICB2YXIgbm9kZUJsYWNrTGlzdCA9IFsnQlVUVE9OJywgJ0EnLCAnSU5QVVQnLCAnVEVYVEFSRUEnXTtcblxuICAgICAgICBmdW5jdGlvbiBpc05vZGVPbmVPZihlbGVtLCBub2RlVHlwZUFycmF5KSB7XG4gICAgICAgICAgaWYgKG5vZGVUeXBlQXJyYXkuaW5kZXhPZihlbGVtWzBdLm5vZGVOYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkYXJpYS5jb25maWcoJ2JpbmRSb2xlRm9yQ2xpY2snKVxuICAgICAgICAgICAgJiYgIWVsZW0uYXR0cigncm9sZScpXG4gICAgICAgICAgICAgICYmICFpc05vZGVPbmVPZihlbGVtLCBub2RlQmxhY2tMaXN0KSkge1xuICAgICAgICAgIGVsZW0uYXR0cigncm9sZScsICdidXR0b24nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkYXJpYS5jb25maWcoJ3RhYmluZGV4JykgJiYgIWVsZW0uYXR0cigndGFiaW5kZXgnKSkge1xuICAgICAgICAgIGVsZW0uYXR0cigndGFiaW5kZXgnLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkYXJpYS5jb25maWcoJ2JpbmRLZXlwcmVzcycpICYmICFhdHRyLm5nS2V5cHJlc3MgJiYgIWlzTm9kZU9uZU9mKGVsZW0sIG5vZGVCbGFja0xpc3QpKSB7XG4gICAgICAgICAgZWxlbS5vbigna2V5cHJlc3MnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGtleUNvZGUgPSBldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlO1xuICAgICAgICAgICAgaWYgKGtleUNvZGUgPT09IDMyIHx8IGtleUNvZGUgPT09IDEzKSB7XG4gICAgICAgICAgICAgIHNjb3BlLiRhcHBseShjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGxiYWNrKCkge1xuICAgICAgICAgICAgICBmbihzY29wZSwgeyAkZXZlbnQ6IGV2ZW50IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dKVxuLmRpcmVjdGl2ZSgnbmdEYmxjbGljaycsIFsnJGFyaWEnLCBmdW5jdGlvbigkYXJpYSkge1xuICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW0sIGF0dHIpIHtcbiAgICBpZiAoJGFyaWEuY29uZmlnKCd0YWJpbmRleCcpICYmICFlbGVtLmF0dHIoJ3RhYmluZGV4JykpIHtcbiAgICAgIGVsZW0uYXR0cigndGFiaW5kZXgnLCAwKTtcbiAgICB9XG4gIH07XG59XSk7XG5cblxufSkod2luZG93LCB3aW5kb3cuYW5ndWxhcik7XG4iLCJyZXF1aXJlKCcuL2FuZ3VsYXItYXJpYScpO1xubW9kdWxlLmV4cG9ydHMgPSAnbmdBcmlhJztcbiIsIi8qIVxuICogQW5ndWxhciBNYXRlcmlhbCBEZXNpZ25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsXG4gKiBAbGljZW5zZSBNSVRcbiAqIHYwLjEwLjBcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3csIGFuZ3VsYXIsIHVuZGVmaW5lZCApe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmFuZ3VsYXIubW9kdWxlKCduZ01hdGVyaWFsJywgW1wibmdcIixcIm5nQW5pbWF0ZVwiLFwibmdBcmlhXCIsXCJtYXRlcmlhbC5jb3JlXCIsXCJtYXRlcmlhbC5jb3JlLmdlc3R1cmVzXCIsXCJtYXRlcmlhbC5jb3JlLnRoZW1pbmcucGFsZXR0ZVwiLFwibWF0ZXJpYWwuY29yZS50aGVtaW5nXCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLmF1dG9jb21wbGV0ZVwiLFwibWF0ZXJpYWwuY29tcG9uZW50cy5iYWNrZHJvcFwiLFwibWF0ZXJpYWwuY29tcG9uZW50cy5ib3R0b21TaGVldFwiLFwibWF0ZXJpYWwuY29tcG9uZW50cy5idXR0b25cIixcIm1hdGVyaWFsLmNvbXBvbmVudHMuY2FyZFwiLFwibWF0ZXJpYWwuY29tcG9uZW50cy5jaGVja2JveFwiLFwibWF0ZXJpYWwuY29tcG9uZW50cy5jb250ZW50XCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLmNoaXBzXCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLmRpYWxvZ1wiLFwibWF0ZXJpYWwuY29tcG9uZW50cy5mYWJBY3Rpb25zXCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLmRpdmlkZXJcIixcIm1hdGVyaWFsLmNvbXBvbmVudHMuZmFiU3BlZWREaWFsXCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLmZhYlRvb2xiYXJcIixcIm1hdGVyaWFsLmNvbXBvbmVudHMuZ3JpZExpc3RcIixcIm1hdGVyaWFsLmNvbXBvbmVudHMuZmFiVHJpZ2dlclwiLFwibWF0ZXJpYWwuY29tcG9uZW50cy5pY29uXCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLmlucHV0XCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLmxpc3RcIixcIm1hdGVyaWFsLmNvbXBvbmVudHMubWVudVwiLFwibWF0ZXJpYWwuY29tcG9uZW50cy5wcm9ncmVzc0NpcmN1bGFyXCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLnByb2dyZXNzTGluZWFyXCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLnJhZGlvQnV0dG9uXCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLnNlbGVjdFwiLFwibWF0ZXJpYWwuY29tcG9uZW50cy5zaWRlbmF2XCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLnNsaWRlclwiLFwibWF0ZXJpYWwuY29tcG9uZW50cy5zdWJoZWFkZXJcIixcIm1hdGVyaWFsLmNvbXBvbmVudHMuc3RpY2t5XCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLnN3aXBlXCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLnN3aXRjaFwiLFwibWF0ZXJpYWwuY29tcG9uZW50cy50YWJzXCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLnRvYXN0XCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLnRvb2xiYXJcIixcIm1hdGVyaWFsLmNvbXBvbmVudHMudG9vbHRpcFwiLFwibWF0ZXJpYWwuY29tcG9uZW50cy53aGl0ZWZyYW1lXCJdKTtcbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKlxuICogSW5pdGlhbGl6YXRpb24gZnVuY3Rpb24gdGhhdCB2YWxpZGF0ZXMgZW52aXJvbm1lbnRcbiAqIHJlcXVpcmVtZW50cy5cbiAqL1xuYW5ndWxhclxuICAubW9kdWxlKCdtYXRlcmlhbC5jb3JlJywgWyAnbWF0ZXJpYWwuY29yZS5nZXN0dXJlcycsICdtYXRlcmlhbC5jb3JlLnRoZW1pbmcnIF0pXG4gIC5jb25maWcoIE1kQ29yZUNvbmZpZ3VyZSApO1xuXG5cbmZ1bmN0aW9uIE1kQ29yZUNvbmZpZ3VyZSgkcHJvdmlkZSwgJG1kVGhlbWluZ1Byb3ZpZGVyKSB7XG5cbiAgJHByb3ZpZGUuZGVjb3JhdG9yKCckJHJBRicsIFtcIiRkZWxlZ2F0ZVwiLCByQUZEZWNvcmF0b3JdKTtcblxuICAkbWRUaGVtaW5nUHJvdmlkZXIudGhlbWUoJ2RlZmF1bHQnKVxuICAgIC5wcmltYXJ5UGFsZXR0ZSgnaW5kaWdvJylcbiAgICAuYWNjZW50UGFsZXR0ZSgncGluaycpXG4gICAgLndhcm5QYWxldHRlKCdyZWQnKVxuICAgIC5iYWNrZ3JvdW5kUGFsZXR0ZSgnZ3JleScpO1xufVxuTWRDb3JlQ29uZmlndXJlLiRpbmplY3QgPSBbXCIkcHJvdmlkZVwiLCBcIiRtZFRoZW1pbmdQcm92aWRlclwiXTtcblxuZnVuY3Rpb24gckFGRGVjb3JhdG9yKCAkZGVsZWdhdGUgKSB7XG4gIC8qKlxuICAgKiBVc2UgdGhpcyB0byB0aHJvdHRsZSBldmVudHMgdGhhdCBjb21lIGluIG9mdGVuLlxuICAgKiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHdpbGwgYWx3YXlzIHVzZSB0aGUgKmxhc3QqIGludm9jYXRpb24gYmVmb3JlIHRoZVxuICAgKiBjb21pbmcgZnJhbWUuXG4gICAqXG4gICAqIEZvciBleGFtcGxlLCB3aW5kb3cgcmVzaXplIGV2ZW50cyB0aGF0IGZpcmUgbWFueSB0aW1lcyBhIHNlY29uZDpcbiAgICogSWYgd2Ugc2V0IHRvIHVzZSBhbiByYWYtdGhyb3R0bGVkIGNhbGxiYWNrIG9uIHdpbmRvdyByZXNpemUsIHRoZW5cbiAgICogb3VyIGNhbGxiYWNrIHdpbGwgb25seSBiZSBmaXJlZCBvbmNlIHBlciBmcmFtZSwgd2l0aCB0aGUgbGFzdCByZXNpemVcbiAgICogZXZlbnQgdGhhdCBoYXBwZW5lZCBiZWZvcmUgdGhhdCBmcmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24gdG8gZGVib3VuY2VcbiAgICovXG4gICRkZWxlZ2F0ZS50aHJvdHRsZSA9IGZ1bmN0aW9uKGNiKSB7XG4gICAgdmFyIHF1ZXVlQXJncywgYWxyZWFkeVF1ZXVlZCwgcXVldWVDYiwgY29udGV4dDtcbiAgICByZXR1cm4gZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgcXVldWVBcmdzID0gYXJndW1lbnRzO1xuICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICBxdWV1ZUNiID0gY2I7XG4gICAgICBpZiAoIWFscmVhZHlRdWV1ZWQpIHtcbiAgICAgICAgYWxyZWFkeVF1ZXVlZCA9IHRydWU7XG4gICAgICAgICRkZWxlZ2F0ZShmdW5jdGlvbigpIHtcbiAgICAgICAgICBxdWV1ZUNiLmFwcGx5KGNvbnRleHQsIHF1ZXVlQXJncyk7XG4gICAgICAgICAgYWxyZWFkeVF1ZXVlZCA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICByZXR1cm4gJGRlbGVnYXRlO1xufVxuXG59KSgpO1xuKGZ1bmN0aW9uKCl7XG5cInVzZSBzdHJpY3RcIjtcblxuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvcmUnKVxuLmZhY3RvcnkoJyRtZENvbnN0YW50JywgTWRDb25zdGFudEZhY3RvcnkpO1xuXG5mdW5jdGlvbiBNZENvbnN0YW50RmFjdG9yeSgkJHJBRiwgJHNuaWZmZXIpIHtcblxuICB2YXIgd2Via2l0ID0gL3dlYmtpdC9pLnRlc3QoJHNuaWZmZXIudmVuZG9yUHJlZml4KTtcbiAgZnVuY3Rpb24gdmVuZG9yUHJvcGVydHkobmFtZSkge1xuICAgIHJldHVybiB3ZWJraXQgPyAgKCd3ZWJraXQnICsgbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyaW5nKDEpKSA6IG5hbWU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIEtFWV9DT0RFOiB7XG4gICAgICBFTlRFUjogMTMsXG4gICAgICBFU0NBUEU6IDI3LFxuICAgICAgU1BBQ0U6IDMyLFxuICAgICAgTEVGVF9BUlJPVyA6IDM3LFxuICAgICAgVVBfQVJST1cgOiAzOCxcbiAgICAgIFJJR0hUX0FSUk9XIDogMzksXG4gICAgICBET1dOX0FSUk9XIDogNDAsXG4gICAgICBUQUIgOiA5LFxuICAgICAgQkFDS1NQQUNFOiA4LFxuICAgICAgREVMRVRFOiA0NlxuICAgIH0sXG4gICAgQ1NTOiB7XG4gICAgICAvKiBDb25zdGFudHMgKi9cbiAgICAgIFRSQU5TSVRJT05FTkQ6ICd0cmFuc2l0aW9uZW5kJyArICh3ZWJraXQgPyAnIHdlYmtpdFRyYW5zaXRpb25FbmQnIDogJycpLFxuICAgICAgQU5JTUFUSU9ORU5EOiAnYW5pbWF0aW9uZW5kJyArICh3ZWJraXQgPyAnIHdlYmtpdEFuaW1hdGlvbkVuZCcgOiAnJyksXG5cbiAgICAgIFRSQU5TRk9STTogdmVuZG9yUHJvcGVydHkoJ3RyYW5zZm9ybScpLFxuICAgICAgVFJBTlNGT1JNX09SSUdJTjogdmVuZG9yUHJvcGVydHkoJ3RyYW5zZm9ybU9yaWdpbicpLFxuICAgICAgVFJBTlNJVElPTjogdmVuZG9yUHJvcGVydHkoJ3RyYW5zaXRpb24nKSxcbiAgICAgIFRSQU5TSVRJT05fRFVSQVRJT046IHZlbmRvclByb3BlcnR5KCd0cmFuc2l0aW9uRHVyYXRpb24nKSxcbiAgICAgIEFOSU1BVElPTl9QTEFZX1NUQVRFOiB2ZW5kb3JQcm9wZXJ0eSgnYW5pbWF0aW9uUGxheVN0YXRlJyksXG4gICAgICBBTklNQVRJT05fRFVSQVRJT046IHZlbmRvclByb3BlcnR5KCdhbmltYXRpb25EdXJhdGlvbicpLFxuICAgICAgQU5JTUFUSU9OX05BTUU6IHZlbmRvclByb3BlcnR5KCdhbmltYXRpb25OYW1lJyksXG4gICAgICBBTklNQVRJT05fVElNSU5HOiB2ZW5kb3JQcm9wZXJ0eSgnYW5pbWF0aW9uVGltaW5nRnVuY3Rpb24nKSxcbiAgICAgIEFOSU1BVElPTl9ESVJFQ1RJT046IHZlbmRvclByb3BlcnR5KCdhbmltYXRpb25EaXJlY3Rpb24nKVxuICAgIH0sXG4gICAgTUVESUE6IHtcbiAgICAgICdzbSc6ICcobWF4LXdpZHRoOiA2MDBweCknLFxuICAgICAgJ2d0LXNtJzogJyhtaW4td2lkdGg6IDYwMHB4KScsXG4gICAgICAnbWQnOiAnKG1pbi13aWR0aDogNjAwcHgpIGFuZCAobWF4LXdpZHRoOiA5NjBweCknLFxuICAgICAgJ2d0LW1kJzogJyhtaW4td2lkdGg6IDk2MHB4KScsXG4gICAgICAnbGcnOiAnKG1pbi13aWR0aDogOTYwcHgpIGFuZCAobWF4LXdpZHRoOiAxMjAwcHgpJyxcbiAgICAgICdndC1sZyc6ICcobWluLXdpZHRoOiAxMjAwcHgpJ1xuICAgIH0sXG4gICAgTUVESUFfUFJJT1JJVFk6IFtcbiAgICAgICdndC1sZycsXG4gICAgICAnbGcnLFxuICAgICAgJ2d0LW1kJyxcbiAgICAgICdtZCcsXG4gICAgICAnZ3Qtc20nLFxuICAgICAgJ3NtJ1xuICAgIF1cbiAgfTtcbn1cbk1kQ29uc3RhbnRGYWN0b3J5LiRpbmplY3QgPSBbXCIkJHJBRlwiLCBcIiRzbmlmZmVyXCJdO1xuXG59KSgpO1xuKGZ1bmN0aW9uKCl7XG5cInVzZSBzdHJpY3RcIjtcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnbWF0ZXJpYWwuY29yZScpXG4gICAgLmNvbmZpZyggW1wiJHByb3ZpZGVcIiwgZnVuY3Rpb24oJHByb3ZpZGUpe1xuICAgICAgICRwcm92aWRlLmRlY29yYXRvcignJG1kVXRpbCcsIFsnJGRlbGVnYXRlJywgZnVuY3Rpb24gKCRkZWxlZ2F0ZSl7XG4gICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBJbmplY3QgdGhlIGl0ZXJhdG9yIGZhY2FkZSB0byBlYXNpbHkgc3VwcG9ydCBpdGVyYXRpb24gYW5kIGFjY2Vzc29yc1xuICAgICAgICAgICAgKiBAc2VlIGl0ZXJhdG9yIGJlbG93XG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAkZGVsZWdhdGUuaXRlcmF0b3IgPSBNZEl0ZXJhdG9yO1xuXG4gICAgICAgICAgIHJldHVybiAkZGVsZWdhdGU7XG4gICAgICAgICB9XG4gICAgICAgXSk7XG4gICAgIH1dKTtcblxuICAvKipcbiAgICogaXRlcmF0b3IgaXMgYSBsaXN0IGZhY2FkZSB0byBlYXNpbHkgc3VwcG9ydCBpdGVyYXRpb24gYW5kIGFjY2Vzc29yc1xuICAgKlxuICAgKiBAcGFyYW0gaXRlbXMgQXJyYXkgbGlzdCB3aGljaCB0aGlzIGl0ZXJhdG9yIHdpbGwgZW51bWVyYXRlXG4gICAqIEBwYXJhbSByZWxvb3AgQm9vbGVhbiBlbmFibGVzIGl0ZXJhdG9yIHRvIGNvbnNpZGVyIHRoZSBsaXN0IGFzIGFuIGVuZGxlc3MgcmVsb29wXG4gICAqL1xuICBmdW5jdGlvbiBNZEl0ZXJhdG9yKGl0ZW1zLCByZWxvb3ApIHtcbiAgICB2YXIgdHJ1ZUZuID0gZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9O1xuXG4gICAgaWYgKGl0ZW1zICYmICFhbmd1bGFyLmlzQXJyYXkoaXRlbXMpKSB7XG4gICAgICBpdGVtcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGl0ZW1zKTtcbiAgICB9XG5cbiAgICByZWxvb3AgPSAhIXJlbG9vcDtcbiAgICB2YXIgX2l0ZW1zID0gaXRlbXMgfHwgWyBdO1xuXG4gICAgLy8gUHVibGlzaGVkIEFQSVxuICAgIHJldHVybiB7XG4gICAgICBpdGVtczogZ2V0SXRlbXMsXG4gICAgICBjb3VudDogY291bnQsXG5cbiAgICAgIGluUmFuZ2U6IGluUmFuZ2UsXG4gICAgICBjb250YWluczogY29udGFpbnMsXG4gICAgICBpbmRleE9mOiBpbmRleE9mLFxuICAgICAgaXRlbUF0OiBpdGVtQXQsXG5cbiAgICAgIGZpbmRCeTogZmluZEJ5LFxuXG4gICAgICBhZGQ6IGFkZCxcbiAgICAgIHJlbW92ZTogcmVtb3ZlLFxuXG4gICAgICBmaXJzdDogZmlyc3QsXG4gICAgICBsYXN0OiBsYXN0LFxuICAgICAgbmV4dDogYW5ndWxhci5iaW5kKG51bGwsIGZpbmRTdWJzZXF1ZW50SXRlbSwgZmFsc2UpLFxuICAgICAgcHJldmlvdXM6IGFuZ3VsYXIuYmluZChudWxsLCBmaW5kU3Vic2VxdWVudEl0ZW0sIHRydWUpLFxuXG4gICAgICBoYXNQcmV2aW91czogaGFzUHJldmlvdXMsXG4gICAgICBoYXNOZXh0OiBoYXNOZXh0XG5cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUHVibGlzaCBjb3B5IG9mIHRoZSBlbnVtZXJhYmxlIHNldFxuICAgICAqIEByZXR1cm5zIHtBcnJheXwqfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEl0ZW1zKCkge1xuICAgICAgcmV0dXJuIFtdLmNvbmNhdChfaXRlbXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERldGVybWluZSBsZW5ndGggb2YgdGhlIGxpc3RcbiAgICAgKiBAcmV0dXJucyB7QXJyYXkubGVuZ3RofCp8bnVtYmVyfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvdW50KCkge1xuICAgICAgcmV0dXJuIF9pdGVtcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXMgdGhlIGluZGV4IHNwZWNpZmllZCB2YWxpZFxuICAgICAqIEBwYXJhbSBpbmRleFxuICAgICAqIEByZXR1cm5zIHtBcnJheS5sZW5ndGh8KnxudW1iZXJ8Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpblJhbmdlKGluZGV4KSB7XG4gICAgICByZXR1cm4gX2l0ZW1zLmxlbmd0aCAmJiAoIGluZGV4ID4gLTEgKSAmJiAoaW5kZXggPCBfaXRlbXMubGVuZ3RoICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FuIHRoZSBpdGVyYXRvciBwcm9jZWVkIHRvIHRoZSBuZXh0IGl0ZW0gaW4gdGhlIGxpc3Q7IHJlbGF0aXZlIHRvXG4gICAgICogdGhlIHNwZWNpZmllZCBpdGVtLlxuICAgICAqXG4gICAgICogQHBhcmFtIGl0ZW1cbiAgICAgKiBAcmV0dXJucyB7QXJyYXkubGVuZ3RofCp8bnVtYmVyfGJvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzTmV4dChpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbSA/IGluUmFuZ2UoaW5kZXhPZihpdGVtKSArIDEpIDogZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FuIHRoZSBpdGVyYXRvciBwcm9jZWVkIHRvIHRoZSBwcmV2aW91cyBpdGVtIGluIHRoZSBsaXN0OyByZWxhdGl2ZSB0b1xuICAgICAqIHRoZSBzcGVjaWZpZWQgaXRlbS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpdGVtXG4gICAgICogQHJldHVybnMge0FycmF5Lmxlbmd0aHwqfG51bWJlcnxib29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1ByZXZpb3VzKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtID8gaW5SYW5nZShpbmRleE9mKGl0ZW0pIC0gMSkgOiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgaXRlbSBhdCBzcGVjaWZpZWQgaW5kZXgvcG9zaXRpb25cbiAgICAgKiBAcGFyYW0gaW5kZXhcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpdGVtQXQoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpblJhbmdlKGluZGV4KSA/IF9pdGVtc1tpbmRleF0gOiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmQgYWxsIGVsZW1lbnRzIG1hdGNoaW5nIHRoZSBrZXkvdmFsdWUgcGFpclxuICAgICAqIG90aGVyd2lzZSByZXR1cm4gbnVsbFxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbFxuICAgICAqIEBwYXJhbSBrZXlcbiAgICAgKlxuICAgICAqIEByZXR1cm4gYXJyYXlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kQnkoa2V5LCB2YWwpIHtcbiAgICAgIHJldHVybiBfaXRlbXMuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1ba2V5XSA9PT0gdmFsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGl0ZW0gdG8gbGlzdFxuICAgICAqIEBwYXJhbSBpdGVtXG4gICAgICogQHBhcmFtIGluZGV4XG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkKGl0ZW0sIGluZGV4KSB7XG4gICAgICBpZiAoICFpdGVtICkgcmV0dXJuIC0xO1xuXG4gICAgICBpZiAoIWFuZ3VsYXIuaXNOdW1iZXIoaW5kZXgpKSB7XG4gICAgICAgIGluZGV4ID0gX2l0ZW1zLmxlbmd0aDtcbiAgICAgIH1cblxuICAgICAgX2l0ZW1zLnNwbGljZShpbmRleCwgMCwgaXRlbSk7XG5cbiAgICAgIHJldHVybiBpbmRleE9mKGl0ZW0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBpdGVtIGZyb20gbGlzdC4uLlxuICAgICAqIEBwYXJhbSBpdGVtXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlKGl0ZW0pIHtcbiAgICAgIGlmICggY29udGFpbnMoaXRlbSkgKXtcbiAgICAgICAgX2l0ZW1zLnNwbGljZShpbmRleE9mKGl0ZW0pLCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHplcm8tYmFzZWQgaW5kZXggb2YgdGhlIHRhcmdldCBpdGVtXG4gICAgICogQHBhcmFtIGl0ZW1cbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmRleE9mKGl0ZW0pIHtcbiAgICAgIHJldHVybiBfaXRlbXMuaW5kZXhPZihpdGVtKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCb29sZWFuIGV4aXN0ZW5jZSBjaGVja1xuICAgICAqIEBwYXJhbSBpdGVtXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gY29udGFpbnMoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0gJiYgKGluZGV4T2YoaXRlbSkgPiAtMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGZpcnN0IGl0ZW0gaW4gdGhlIGxpc3RcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaXJzdCgpIHtcbiAgICAgIHJldHVybiBfaXRlbXMubGVuZ3RoID8gX2l0ZW1zWzBdIDogbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gbGFzdCBpdGVtIGluIHRoZSBsaXN0Li4uXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdCgpIHtcbiAgICAgIHJldHVybiBfaXRlbXMubGVuZ3RoID8gX2l0ZW1zW19pdGVtcy5sZW5ndGggLSAxXSA6IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZCB0aGUgbmV4dCBpdGVtLiBJZiByZWxvb3AgaXMgdHJ1ZSBhbmQgYXQgdGhlIGVuZCBvZiB0aGUgbGlzdCwgaXQgd2lsbCBnbyBiYWNrIHRvIHRoZVxuICAgICAqIGZpcnN0IGl0ZW0uIElmIGdpdmVuLCB0aGUgYHZhbGlkYXRlYCBjYWxsYmFjayB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIG5leHQgaXRlbVxuICAgICAqIGlzIHZhbGlkLiBJZiBub3QgdmFsaWQsIGl0IHdpbGwgdHJ5IHRvIGZpbmQgdGhlIG5leHQgaXRlbSBhZ2Fpbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYmFja3dhcmRzIFNwZWNpZmllcyB0aGUgZGlyZWN0aW9uIG9mIHNlYXJjaGluZyAoZm9yd2FyZHMvYmFja3dhcmRzKVxuICAgICAqIEBwYXJhbSB7Kn0gaXRlbSBUaGUgaXRlbSB3aG9zZSBzdWJzZXF1ZW50IGl0ZW0gd2UgYXJlIGxvb2tpbmcgZm9yXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IHZhbGlkYXRlIFRoZSBgdmFsaWRhdGVgIGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtpbnRlZ2VyPX0gbGltaXQgVGhlIHJlY3Vyc2lvbiBsaW1pdFxuICAgICAqXG4gICAgICogQHJldHVybnMgeyp9IFRoZSBzdWJzZXF1ZW50IGl0ZW0gb3IgbnVsbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRTdWJzZXF1ZW50SXRlbShiYWNrd2FyZHMsIGl0ZW0sIHZhbGlkYXRlLCBsaW1pdCkge1xuICAgICAgdmFsaWRhdGUgPSB2YWxpZGF0ZSB8fCB0cnVlRm47XG5cbiAgICAgIHZhciBjdXJJbmRleCA9IGluZGV4T2YoaXRlbSk7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAoIWluUmFuZ2UoY3VySW5kZXgpKSByZXR1cm4gbnVsbDtcblxuICAgICAgICB2YXIgbmV4dEluZGV4ID0gY3VySW5kZXggKyAoYmFja3dhcmRzID8gLTEgOiAxKTtcbiAgICAgICAgdmFyIGZvdW5kSXRlbSA9IG51bGw7XG4gICAgICAgIGlmIChpblJhbmdlKG5leHRJbmRleCkpIHtcbiAgICAgICAgICBmb3VuZEl0ZW0gPSBfaXRlbXNbbmV4dEluZGV4XTtcbiAgICAgICAgfSBlbHNlIGlmIChyZWxvb3ApIHtcbiAgICAgICAgICBmb3VuZEl0ZW0gPSBiYWNrd2FyZHMgPyBsYXN0KCkgOiBmaXJzdCgpO1xuICAgICAgICAgIG5leHRJbmRleCA9IGluZGV4T2YoZm91bmRJdGVtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoZm91bmRJdGVtID09PSBudWxsKSB8fCAobmV4dEluZGV4ID09PSBsaW1pdCkpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAodmFsaWRhdGUoZm91bmRJdGVtKSkgcmV0dXJuIGZvdW5kSXRlbTtcblxuICAgICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZChsaW1pdCkpIGxpbWl0ID0gbmV4dEluZGV4O1xuXG4gICAgICAgIGN1ckluZGV4ID0gbmV4dEluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29yZScpXG4uZmFjdG9yeSgnJG1kTWVkaWEnLCBtZE1lZGlhRmFjdG9yeSk7XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRtZE1lZGlhXG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvcmVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGAkbWRNZWRpYWAgaXMgdXNlZCB0byBldmFsdWF0ZSB3aGV0aGVyIGEgZ2l2ZW4gbWVkaWEgcXVlcnkgaXMgdHJ1ZSBvciBmYWxzZSBnaXZlbiB0aGVcbiAqIGN1cnJlbnQgZGV2aWNlJ3Mgc2NyZWVuIC8gd2luZG93IHNpemUuIFRoZSBtZWRpYSBxdWVyeSB3aWxsIGJlIHJlLWV2YWx1YXRlZCBvbiByZXNpemUsIGFsbG93aW5nXG4gKiB5b3UgdG8gcmVnaXN0ZXIgYSB3YXRjaC5cbiAqXG4gKiBgJG1kTWVkaWFgIGFsc28gaGFzIHByZS1wcm9ncmFtbWVkIHN1cHBvcnQgZm9yIG1lZGlhIHF1ZXJpZXMgdGhhdCBtYXRjaCB0aGUgbGF5b3V0IGJyZWFrcG9pbnRzLlxuICogIChgc21gLCBgZ3Qtc21gLCBgbWRgLCBgZ3QtbWRgLCBgbGdgLCBgZ3QtbGdgKS5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYSBib29sZWFuIHJlcHJlc2VudGluZyB3aGV0aGVyIG9yIG5vdCB0aGUgZ2l2ZW4gbWVkaWEgcXVlcnkgaXMgdHJ1ZSBvciBmYWxzZS5cbiAqXG4gKiBAdXNhZ2VcbiAqIDxobGpzIGxhbmc9XCJqc1wiPlxuICogYXBwLmNvbnRyb2xsZXIoJ015Q29udHJvbGxlcicsIGZ1bmN0aW9uKCRtZE1lZGlhLCAkc2NvcGUpIHtcbiAqICAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbigpIHsgcmV0dXJuICRtZE1lZGlhKCdsZycpOyB9LCBmdW5jdGlvbihiaWcpIHtcbiAqICAgICAkc2NvcGUuYmlnU2NyZWVuID0gYmlnO1xuICogICB9KTtcbiAqXG4gKiAgICRzY29wZS5zY3JlZW5Jc1NtYWxsID0gJG1kTWVkaWEoJ3NtJyk7XG4gKiAgICRzY29wZS5jdXN0b21RdWVyeSA9ICRtZE1lZGlhKCcobWluLXdpZHRoOiAxMjM0cHgpJyk7XG4gKiAgICRzY29wZS5hbm90aGVyQ3VzdG9tID0gJG1kTWVkaWEoJ21heC13aWR0aDogMzAwcHgnKTtcbiAqIH0pO1xuICogPC9obGpzPlxuICovXG5cbmZ1bmN0aW9uIG1kTWVkaWFGYWN0b3J5KCRtZENvbnN0YW50LCAkcm9vdFNjb3BlLCAkd2luZG93KSB7XG4gIHZhciBxdWVyaWVzID0ge307XG4gIHZhciBtcWxzID0ge307XG4gIHZhciByZXN1bHRzID0ge307XG4gIHZhciBub3JtYWxpemVDYWNoZSA9IHt9O1xuXG4gICRtZE1lZGlhLmdldFJlc3BvbnNpdmVBdHRyaWJ1dGUgPSBnZXRSZXNwb25zaXZlQXR0cmlidXRlO1xuICAkbWRNZWRpYS5nZXRRdWVyeSA9IGdldFF1ZXJ5O1xuICAkbWRNZWRpYS53YXRjaFJlc3BvbnNpdmVBdHRyaWJ1dGVzID0gd2F0Y2hSZXNwb25zaXZlQXR0cmlidXRlcztcblxuICByZXR1cm4gJG1kTWVkaWE7XG5cbiAgZnVuY3Rpb24gJG1kTWVkaWEocXVlcnkpIHtcbiAgICB2YXIgdmFsaWRhdGVkID0gcXVlcmllc1txdWVyeV07XG4gICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQodmFsaWRhdGVkKSkge1xuICAgICAgdmFsaWRhdGVkID0gcXVlcmllc1txdWVyeV0gPSB2YWxpZGF0ZShxdWVyeSk7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IHJlc3VsdHNbdmFsaWRhdGVkXTtcbiAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZChyZXN1bHQpKSB7XG4gICAgICByZXN1bHQgPSBhZGQodmFsaWRhdGVkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGUocXVlcnkpIHtcbiAgICByZXR1cm4gJG1kQ29uc3RhbnQuTUVESUFbcXVlcnldIHx8XG4gICAgICAgICAgICgocXVlcnkuY2hhckF0KDApICE9PSAnKCcpID8gKCcoJyArIHF1ZXJ5ICsgJyknKSA6IHF1ZXJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZChxdWVyeSkge1xuICAgIHZhciByZXN1bHQgPSBtcWxzW3F1ZXJ5XSA9ICR3aW5kb3cubWF0Y2hNZWRpYShxdWVyeSk7XG4gICAgcmVzdWx0LmFkZExpc3RlbmVyKG9uUXVlcnlDaGFuZ2UpO1xuICAgIHJldHVybiAocmVzdWx0c1tyZXN1bHQubWVkaWFdID0gISFyZXN1bHQubWF0Y2hlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBvblF1ZXJ5Q2hhbmdlKHF1ZXJ5KSB7XG4gICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkge1xuICAgICAgcmVzdWx0c1txdWVyeS5tZWRpYV0gPSAhIXF1ZXJ5Lm1hdGNoZXM7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRRdWVyeShuYW1lKSB7XG4gICAgcmV0dXJuIG1xbHNbbmFtZV07XG4gIH1cblxuICBmdW5jdGlvbiBnZXRSZXNwb25zaXZlQXR0cmlidXRlKGF0dHJzLCBhdHRyTmFtZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJG1kQ29uc3RhbnQuTUVESUFfUFJJT1JJVFkubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBtZWRpYU5hbWUgPSAkbWRDb25zdGFudC5NRURJQV9QUklPUklUWVtpXTtcbiAgICAgIGlmICghbXFsc1txdWVyaWVzW21lZGlhTmFtZV1dLm1hdGNoZXMpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBub3JtYWxpemVkTmFtZSA9IGdldE5vcm1hbGl6ZWROYW1lKGF0dHJzLCBhdHRyTmFtZSArICctJyArIG1lZGlhTmFtZSk7XG4gICAgICBpZiAoYXR0cnNbbm9ybWFsaXplZE5hbWVdKSB7XG4gICAgICAgIHJldHVybiBhdHRyc1tub3JtYWxpemVkTmFtZV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZmFsbGJhY2sgb24gdW5wcmVmaXhlZFxuICAgIHJldHVybiBhdHRyc1tnZXROb3JtYWxpemVkTmFtZShhdHRycywgYXR0ck5hbWUpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdhdGNoUmVzcG9uc2l2ZUF0dHJpYnV0ZXMoYXR0ck5hbWVzLCBhdHRycywgd2F0Y2hGbikge1xuICAgIHZhciB1bndhdGNoRm5zID0gW107XG4gICAgYXR0ck5hbWVzLmZvckVhY2goZnVuY3Rpb24oYXR0ck5hbWUpIHtcbiAgICAgIHZhciBub3JtYWxpemVkTmFtZSA9IGdldE5vcm1hbGl6ZWROYW1lKGF0dHJzLCBhdHRyTmFtZSk7XG4gICAgICBpZiAoYXR0cnNbbm9ybWFsaXplZE5hbWVdKSB7XG4gICAgICAgIHVud2F0Y2hGbnMucHVzaChcbiAgICAgICAgICAgIGF0dHJzLiRvYnNlcnZlKG5vcm1hbGl6ZWROYW1lLCBhbmd1bGFyLmJpbmQodm9pZCAwLCB3YXRjaEZuLCBudWxsKSkpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBtZWRpYU5hbWUgaW4gJG1kQ29uc3RhbnQuTUVESUEpIHtcbiAgICAgICAgbm9ybWFsaXplZE5hbWUgPSBnZXROb3JtYWxpemVkTmFtZShhdHRycywgYXR0ck5hbWUgKyAnLScgKyBtZWRpYU5hbWUpO1xuICAgICAgICBpZiAoIWF0dHJzW25vcm1hbGl6ZWROYW1lXSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVud2F0Y2hGbnMucHVzaChhdHRycy4kb2JzZXJ2ZShub3JtYWxpemVkTmFtZSwgYW5ndWxhci5iaW5kKHZvaWQgMCwgd2F0Y2hGbiwgbWVkaWFOYW1lKSkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2goKSB7XG4gICAgICB1bndhdGNoRm5zLmZvckVhY2goZnVuY3Rpb24oZm4pIHsgZm4oKTsgfSlcbiAgICB9O1xuICB9XG5cbiAgLy8gSW1wcm92ZXMgcGVyZm9ybWFuY2UgZHJhbWF0aWNhbGx5XG4gIGZ1bmN0aW9uIGdldE5vcm1hbGl6ZWROYW1lKGF0dHJzLCBhdHRyTmFtZSkge1xuICAgIHJldHVybiBub3JtYWxpemVDYWNoZVthdHRyTmFtZV0gfHxcbiAgICAgICAgKG5vcm1hbGl6ZUNhY2hlW2F0dHJOYW1lXSA9IGF0dHJzLiRub3JtYWxpemUoYXR0ck5hbWUpKTtcbiAgfVxufVxubWRNZWRpYUZhY3RvcnkuJGluamVjdCA9IFtcIiRtZENvbnN0YW50XCIsIFwiJHJvb3RTY29wZVwiLCBcIiR3aW5kb3dcIl07XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG4vKlxuICogVGhpcyB2YXIgaGFzIHRvIGJlIG91dHNpZGUgdGhlIGFuZ3VsYXIgZmFjdG9yeSwgb3RoZXJ3aXNlIHdoZW5cbiAqIHRoZXJlIGFyZSBtdWx0aXBsZSBtYXRlcmlhbCBhcHBzIG9uIHRoZSBzYW1lIHBhZ2UsIGVhY2ggYXBwXG4gKiB3aWxsIGNyZWF0ZSBpdHMgb3duIGluc3RhbmNlIG9mIHRoaXMgYXJyYXkgYW5kIHRoZSBhcHAncyBJRHNcbiAqIHdpbGwgbm90IGJlIHVuaXF1ZS5cbiAqL1xudmFyIG5leHRVbmlxdWVJZCA9IDA7XG5cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb3JlJylcbi5mYWN0b3J5KCckbWRVdGlsJywgW1wiJGNhY2hlRmFjdG9yeVwiLCBcIiRkb2N1bWVudFwiLCBcIiR0aW1lb3V0XCIsIFwiJHFcIiwgXCIkd2luZG93XCIsIFwiJG1kQ29uc3RhbnRcIiwgZnVuY3Rpb24oJGNhY2hlRmFjdG9yeSwgJGRvY3VtZW50LCAkdGltZW91dCwgJHEsICR3aW5kb3csICRtZENvbnN0YW50KSB7XG4gIHZhciBVdGlsO1xuXG4gIGZ1bmN0aW9uIGdldE5vZGUoZWwpIHtcbiAgICByZXR1cm4gZWxbMF0gfHwgZWw7XG4gIH1cblxuICByZXR1cm4gVXRpbCA9IHtcbiAgICBub3c6IHdpbmRvdy5wZXJmb3JtYW5jZSA/XG4gICAgICBhbmd1bGFyLmJpbmQod2luZG93LnBlcmZvcm1hbmNlLCB3aW5kb3cucGVyZm9ybWFuY2Uubm93KSA6XG4gICAgICBEYXRlLm5vdyxcblxuICAgIGNsaWVudFJlY3Q6IGZ1bmN0aW9uKGVsZW1lbnQsIG9mZnNldFBhcmVudCwgaXNPZmZzZXRSZWN0KSB7XG4gICAgICB2YXIgbm9kZSA9IGdldE5vZGUoZWxlbWVudCk7XG4gICAgICBvZmZzZXRQYXJlbnQgPSBnZXROb2RlKG9mZnNldFBhcmVudCB8fCBub2RlLm9mZnNldFBhcmVudCB8fCBkb2N1bWVudC5ib2R5KTtcbiAgICAgIHZhciBub2RlUmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgIC8vIFRoZSB1c2VyIGNhbiBhc2sgZm9yIGFuIG9mZnNldFJlY3Q6IGEgcmVjdCByZWxhdGl2ZSB0byB0aGUgb2Zmc2V0UGFyZW50LFxuICAgICAgLy8gb3IgYSBjbGllbnRSZWN0OiBhIHJlY3QgcmVsYXRpdmUgdG8gdGhlIHBhZ2VcbiAgICAgIHZhciBvZmZzZXRSZWN0ID0gaXNPZmZzZXRSZWN0ID9cbiAgICAgICAgb2Zmc2V0UGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDpcbiAgICAgICAgeyBsZWZ0OiAwLCB0b3A6IDAsIHdpZHRoOiAwLCBoZWlnaHQ6IDAgfTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IG5vZGVSZWN0LmxlZnQgLSBvZmZzZXRSZWN0LmxlZnQsXG4gICAgICAgIHRvcDogbm9kZVJlY3QudG9wIC0gb2Zmc2V0UmVjdC50b3AsXG4gICAgICAgIHdpZHRoOiBub2RlUmVjdC53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBub2RlUmVjdC5oZWlnaHRcbiAgICAgIH07XG4gICAgfSxcbiAgICBvZmZzZXRSZWN0OiBmdW5jdGlvbihlbGVtZW50LCBvZmZzZXRQYXJlbnQpIHtcbiAgICAgIHJldHVybiBVdGlsLmNsaWVudFJlY3QoZWxlbWVudCwgb2Zmc2V0UGFyZW50LCB0cnVlKTtcbiAgICB9LFxuXG4gICAgLy8gQW5ub3lpbmcgbWV0aG9kIHRvIGNvcHkgbm9kZXMgdG8gYW4gYXJyYXksIHRoYW5rcyB0byBJRVxuICAgIG5vZGVzVG9BcnJheTogZnVuY3Rpb24gKG5vZGVzKSB7XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICByZXN1bHRzLnB1c2gobm9kZXMuaXRlbShpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9LFxuXG4gICAgLy8gRGlzYWJsZXMgc2Nyb2xsIGFyb3VuZCB0aGUgcGFzc2VkIGVsZW1lbnQuXG4gICAgZGlzYWJsZVNjcm9sbEFyb3VuZDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgaWYgKFV0aWwuZGlzYWJsZVNjcm9sbEFyb3VuZC5fZW5hYmxlU2Nyb2xsaW5nKSByZXR1cm4gVXRpbC5kaXNhYmxlU2Nyb2xsQXJvdW5kLl9lbmFibGVTY3JvbGxpbmc7XG4gICAgICBlbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KGVsZW1lbnQpO1xuICAgICAgdmFyIGJvZHkgPSAkZG9jdW1lbnRbMF0uYm9keSxcbiAgICAgICAgICByZXN0b3JlQm9keSA9IGRpc2FibGVCb2R5U2Nyb2xsKCksXG4gICAgICAgICAgcmVzdG9yZUVsZW1lbnQgPSBkaXNhYmxlRWxlbWVudFNjcm9sbCgpO1xuXG4gICAgICByZXR1cm4gVXRpbC5kaXNhYmxlU2Nyb2xsQXJvdW5kLl9lbmFibGVTY3JvbGxpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlc3RvcmVCb2R5KCk7XG4gICAgICAgIHJlc3RvcmVFbGVtZW50KCk7XG4gICAgICAgIGRlbGV0ZSBVdGlsLmRpc2FibGVTY3JvbGxBcm91bmQuX2VuYWJsZVNjcm9sbGluZztcbiAgICAgIH07XG5cbiAgICAgIC8vIENyZWF0ZXMgYSB2aXJ0dWFsIHNjcm9sbGluZyBtYXNrIHRvIGFic29yYiB0b3VjaG1vdmUsIGtleWJvYXJkLCBzY3JvbGxiYXIgY2xpY2tpbmcsIGFuZCB3aGVlbCBldmVudHNcbiAgICAgIGZ1bmN0aW9uIGRpc2FibGVFbGVtZW50U2Nyb2xsKCkge1xuICAgICAgICB2YXIgekluZGV4ID0gJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnRbMF0pLnpJbmRleCAtIDE7XG4gICAgICAgIGlmIChpc05hTih6SW5kZXgpKSB6SW5kZXggPSA5OTtcbiAgICAgICAgdmFyIHNjcm9sbE1hc2sgPSBhbmd1bGFyLmVsZW1lbnQoXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1kLXNjcm9sbC1tYXNrXCIgc3R5bGU9XCJ6LWluZGV4OiAnICsgekluZGV4ICsgJ1wiPicgK1xuICAgICAgICAgICAgJyAgPGRpdiBjbGFzcz1cIm1kLXNjcm9sbC1tYXNrLWJhclwiPjwvZGl2PicgK1xuICAgICAgICAgICAgJzwvZGl2PicpO1xuICAgICAgICBib2R5LmFwcGVuZENoaWxkKHNjcm9sbE1hc2tbMF0pO1xuXG4gICAgICAgIHNjcm9sbE1hc2sub24oJ3doZWVsJywgcHJldmVudERlZmF1bHQpO1xuICAgICAgICBzY3JvbGxNYXNrLm9uKCd0b3VjaG1vdmUnLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICAgICRkb2N1bWVudC5vbigna2V5ZG93bicsIGRpc2FibGVLZXlOYXYpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiByZXN0b3JlU2Nyb2xsICgpIHtcbiAgICAgICAgICBzY3JvbGxNYXNrLm9mZignd2hlZWwnKTtcbiAgICAgICAgICBzY3JvbGxNYXNrLm9mZigndG91Y2htb3ZlJyk7XG4gICAgICAgICAgc2Nyb2xsTWFza1swXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcm9sbE1hc2tbMF0pO1xuICAgICAgICAgICRkb2N1bWVudC5vZmYoJ2tleWRvd24nLCBkaXNhYmxlS2V5TmF2KTtcbiAgICAgICAgICBkZWxldGUgVXRpbC5kaXNhYmxlU2Nyb2xsQXJvdW5kLl9lbmFibGVTY3JvbGxpbmc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gUHJldmVudCBrZXlwcmVzc2VzIGZyb20gZWxlbWVudHMgaW5zaWRlIHRoZSBib2R5XG4gICAgICAgIC8vIHVzZWQgdG8gc3RvcCB0aGUga2V5cHJlc3NlcyB0aGF0IGNvdWxkIGNhdXNlIHRoZSBwYWdlIHRvIHNjcm9sbFxuICAgICAgICAvLyAoYXJyb3cga2V5cywgc3BhY2ViYXIsIHRhYiwgZXRjKS5cbiAgICAgICAgZnVuY3Rpb24gZGlzYWJsZUtleU5hdihlKSB7XG4gICAgICAgICAgLy8tLSB0ZW1wb3JhcmlseSByZW1vdmVkIHRoaXMgbG9naWMsIHdpbGwgcG9zc2libHkgcmUtYWRkIGF0IGEgbGF0ZXIgZGF0ZVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICBpZiAoIWVsZW1lbnRbMF0uY29udGFpbnMoZS50YXJnZXQpKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KGUpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQ29udmVydHMgdGhlIGJvZHkgdG8gYSBwb3NpdGlvbiBmaXhlZCBibG9jayBhbmQgdHJhbnNsYXRlIGl0IHRvIHRoZSBwcm9wZXIgc2Nyb2xsXG4gICAgICAvLyBwb3NpdGlvblxuICAgICAgZnVuY3Rpb24gZGlzYWJsZUJvZHlTY3JvbGwoKSB7XG4gICAgICAgIHZhciByZXN0b3JlU3R5bGUgPSBib2R5LmdldEF0dHJpYnV0ZSgnc3R5bGUnKSB8fCAnJztcbiAgICAgICAgdmFyIHNjcm9sbE9mZnNldCA9IGJvZHkuc2Nyb2xsVG9wICsgYm9keS5wYXJlbnRFbGVtZW50LnNjcm9sbFRvcDtcblxuICAgICAgICBhcHBseVN0eWxlcyhib2R5LCB7XG4gICAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBvdmVyZmxvd1k6ICdzY3JvbGwnLFxuICAgICAgICAgIHRvcDogLXNjcm9sbE9mZnNldCArICdweCdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHJlc3RvcmVTY3JvbGwoKSB7XG4gICAgICAgICAgYm9keS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgcmVzdG9yZVN0eWxlKTtcbiAgICAgICAgICBib2R5LnNjcm9sbFRvcCA9IHNjcm9sbE9mZnNldDtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYXBwbHlTdHlsZXMgKGVsLCBzdHlsZXMpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHN0eWxlcykge1xuICAgICAgICAgIGVsLnN0eWxlW2tleV0gPSBzdHlsZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZW5hYmxlU2Nyb2xsaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbWV0aG9kID0gdGhpcy5kaXNhYmxlU2Nyb2xsQXJvdW5kLl9lbmFibGVTY3JvbGxpbmc7XG4gICAgICBtZXRob2QgJiYgbWV0aG9kKCk7XG4gICAgfSxcbiAgICBmbG9hdGluZ1Njcm9sbGJhcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuZmxvYXRpbmdTY3JvbGxiYXJzLmNhY2hlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciB0ZW1wTm9kZSA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdiBzdHlsZT1cIndpZHRoOiAxMDAlOyB6LWluZGV4OiAtMTsgcG9zaXRpb246IGFic29sdXRlOyBoZWlnaHQ6IDM1cHg7IG92ZXJmbG93LXk6IHNjcm9sbFwiPjxkaXYgc3R5bGU9XCJoZWlnaHQ6IDYwO1wiPjwvZGl2PjwvZGl2PicpO1xuICAgICAgICAkZG9jdW1lbnRbMF0uYm9keS5hcHBlbmRDaGlsZCh0ZW1wTm9kZVswXSk7XG4gICAgICAgIHRoaXMuZmxvYXRpbmdTY3JvbGxiYXJzLmNhY2hlZCA9ICh0ZW1wTm9kZVswXS5vZmZzZXRXaWR0aCA9PSB0ZW1wTm9kZVswXS5jaGlsZE5vZGVzWzBdLm9mZnNldFdpZHRoKTtcbiAgICAgICAgdGVtcE5vZGUucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5mbG9hdGluZ1Njcm9sbGJhcnMuY2FjaGVkO1xuICAgIH0sXG5cbiAgICAvLyBNb2JpbGUgc2FmYXJpIG9ubHkgYWxsb3dzIHlvdSB0byBzZXQgZm9jdXMgaW4gY2xpY2sgZXZlbnQgbGlzdGVuZXJzLi4uXG4gICAgZm9yY2VGb2N1czogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgdmFyIG5vZGUgPSBlbGVtZW50WzBdIHx8IGVsZW1lbnQ7XG5cbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gZm9jdXNPbkNsaWNrKGV2KSB7XG4gICAgICAgIGlmIChldi50YXJnZXQgPT09IG5vZGUgJiYgZXYuJGZvY3VzKSB7XG4gICAgICAgICAgbm9kZS5mb2N1cygpO1xuICAgICAgICAgIGV2LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGZvY3VzT25DbGljayk7XG4gICAgICAgIH1cbiAgICAgIH0sIHRydWUpO1xuXG4gICAgICB2YXIgbmV3RXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudHMnKTtcbiAgICAgIG5ld0V2ZW50LmluaXRNb3VzZUV2ZW50KCdjbGljaycsIGZhbHNlLCB0cnVlLCB3aW5kb3csIHt9LCAwLCAwLCAwLCAwLFxuICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMCwgbnVsbCk7XG4gICAgICBuZXdFdmVudC4kbWF0ZXJpYWwgPSB0cnVlO1xuICAgICAgbmV3RXZlbnQuJGZvY3VzID0gdHJ1ZTtcbiAgICAgIG5vZGUuZGlzcGF0Y2hFdmVudChuZXdFdmVudCk7XG4gICAgfSxcblxuICAgIHRyYW5zaXRpb25FbmRQcm9taXNlOiBmdW5jdGlvbihlbGVtZW50LCBvcHRzKSB7XG4gICAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICBlbGVtZW50Lm9uKCRtZENvbnN0YW50LkNTUy5UUkFOU0lUSU9ORU5ELCBmaW5pc2hlZCk7XG4gICAgICBmdW5jdGlvbiBmaW5pc2hlZChldikge1xuICAgICAgICAvLyBNYWtlIHN1cmUgdGhpcyB0cmFuc2l0aW9uZW5kIGRpZG4ndCBidWJibGUgdXAgZnJvbSBhIGNoaWxkXG4gICAgICAgIGlmICghZXYgfHwgZXYudGFyZ2V0ID09PSBlbGVtZW50WzBdKSB7XG4gICAgICAgICAgZWxlbWVudC5vZmYoJG1kQ29uc3RhbnQuQ1NTLlRSQU5TSVRJT05FTkQsIGZpbmlzaGVkKTtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChvcHRzLnRpbWVvdXQpICR0aW1lb3V0KGZpbmlzaGVkLCBvcHRzLnRpbWVvdXQpO1xuICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfSxcblxuICAgIGZha2VOZ01vZGVsOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICRmYWtlOiB0cnVlLFxuICAgICAgICAkc2V0VG91Y2hlZDogYW5ndWxhci5ub29wLFxuICAgICAgICAkc2V0Vmlld1ZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHRoaXMuJHZpZXdWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgIHRoaXMuJHJlbmRlcih2YWx1ZSk7XG4gICAgICAgICAgdGhpcy4kdmlld0NoYW5nZUxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uKGNiKSB7IGNiKCk7IH0pO1xuICAgICAgICB9LFxuICAgICAgICAkaXNFbXB0eTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gKCcnICsgdmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgfSxcbiAgICAgICAgJHBhcnNlcnM6IFtdLFxuICAgICAgICAkZm9ybWF0dGVyczogW10sXG4gICAgICAgICR2aWV3Q2hhbmdlTGlzdGVuZXJzOiBbXSxcbiAgICAgICAgJHJlbmRlcjogYW5ndWxhci5ub29wXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90XG4gICAgLy8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuICAgIC8vIE4gbWlsbGlzZWNvbmRzLlxuICAgIC8vIEBwYXJhbSB3YWl0IEludGVnZXIgdmFsdWUgb2YgbXNlY3MgdG8gZGVsYXkgKHNpbmNlIGxhc3QgZGVib3VuY2UgcmVzZXQpOyBkZWZhdWx0IHZhbHVlIDEwIG1zZWNzXG4gICAgLy8gQHBhcmFtIGludm9rZUFwcGx5IHNob3VsZCB0aGUgJHRpbWVvdXQgdHJpZ2dlciAkZGlnZXN0KCkgZGlydHkgY2hlY2tpbmdcbiAgICBkZWJvdW5jZTogZnVuY3Rpb24gKGZ1bmMsIHdhaXQsIHNjb3BlLCBpbnZva2VBcHBseSkge1xuICAgICAgdmFyIHRpbWVyO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgICB2YXIgY29udGV4dCA9IHNjb3BlLFxuICAgICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgICAgICR0aW1lb3V0LmNhbmNlbCh0aW1lcik7XG4gICAgICAgIHRpbWVyID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICB0aW1lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuXG4gICAgICAgIH0sIHdhaXQgfHwgMTAsIGludm9rZUFwcGx5ICk7XG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjYW4gb25seSBiZSB0cmlnZ2VyZWQgZXZlcnkgYGRlbGF5YCBtaWxsaXNlY29uZHMuXG4gICAgLy8gSW4gb3RoZXIgd29yZHMsIHRoZSBmdW5jdGlvbiB3aWxsIG5vdCBiZSBjYWxsZWQgdW5sZXNzIGl0IGhhcyBiZWVuIG1vcmVcbiAgICAvLyB0aGFuIGBkZWxheWAgbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSBsYXN0IGNhbGwuXG4gICAgdGhyb3R0bGU6IGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIGRlbGF5KSB7XG4gICAgICB2YXIgcmVjZW50O1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHRocm90dGxlZCgpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgdmFyIG5vdyA9IFV0aWwubm93KCk7XG5cbiAgICAgICAgaWYgKCFyZWNlbnQgfHwgKG5vdyAtIHJlY2VudCA+IGRlbGF5KSkge1xuICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgcmVjZW50ID0gbm93O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNZWFzdXJlcyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0YWtlbiB0byBydW4gdGhlIHByb3ZpZGVkIGNhbGxiYWNrXG4gICAgICogZnVuY3Rpb24uIFVzZXMgYSBoaWdoLXByZWNpc2lvbiB0aW1lciBpZiBhdmFpbGFibGUuXG4gICAgICovXG4gICAgdGltZTogZnVuY3Rpb24gdGltZShjYikge1xuICAgICAgdmFyIHN0YXJ0ID0gVXRpbC5ub3coKTtcbiAgICAgIGNiKCk7XG4gICAgICByZXR1cm4gVXRpbC5ub3coKSAtIHN0YXJ0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSB1bmlxdWUgSUQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBhbiB1bmlxdWUgbnVtZXJpYyBzdHJpbmdcbiAgICAgKi9cbiAgICBuZXh0VWlkOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAnJyArIG5leHRVbmlxdWVJZCsrO1xuICAgIH0sXG5cbiAgICAvLyBTdG9wIHdhdGNoZXJzIGFuZCBldmVudHMgZnJvbSBmaXJpbmcgb24gYSBzY29wZSB3aXRob3V0IGRlc3Ryb3lpbmcgaXQsXG4gICAgLy8gYnkgZGlzY29ubmVjdGluZyBpdCBmcm9tIGl0cyBwYXJlbnQgYW5kIGl0cyBzaWJsaW5ncycgbGlua2VkIGxpc3RzLlxuICAgIGRpc2Nvbm5lY3RTY29wZTogZnVuY3Rpb24gZGlzY29ubmVjdFNjb3BlKHNjb3BlKSB7XG4gICAgICBpZiAoIXNjb3BlKSByZXR1cm47XG5cbiAgICAgIC8vIHdlIGNhbid0IGRlc3Ryb3kgdGhlIHJvb3Qgc2NvcGUgb3IgYSBzY29wZSB0aGF0IGhhcyBiZWVuIGFscmVhZHkgZGVzdHJveWVkXG4gICAgICBpZiAoc2NvcGUuJHJvb3QgPT09IHNjb3BlKSByZXR1cm47XG4gICAgICBpZiAoc2NvcGUuJCRkZXN0cm95ZWQgKSByZXR1cm47XG5cbiAgICAgIHZhciBwYXJlbnQgPSBzY29wZS4kcGFyZW50O1xuICAgICAgc2NvcGUuJCRkaXNjb25uZWN0ZWQgPSB0cnVlO1xuXG4gICAgICAvLyBTZWUgU2NvcGUuJGRlc3Ryb3lcbiAgICAgIGlmIChwYXJlbnQuJCRjaGlsZEhlYWQgPT09IHNjb3BlKSBwYXJlbnQuJCRjaGlsZEhlYWQgPSBzY29wZS4kJG5leHRTaWJsaW5nO1xuICAgICAgaWYgKHBhcmVudC4kJGNoaWxkVGFpbCA9PT0gc2NvcGUpIHBhcmVudC4kJGNoaWxkVGFpbCA9IHNjb3BlLiQkcHJldlNpYmxpbmc7XG4gICAgICBpZiAoc2NvcGUuJCRwcmV2U2libGluZykgc2NvcGUuJCRwcmV2U2libGluZy4kJG5leHRTaWJsaW5nID0gc2NvcGUuJCRuZXh0U2libGluZztcbiAgICAgIGlmIChzY29wZS4kJG5leHRTaWJsaW5nKSBzY29wZS4kJG5leHRTaWJsaW5nLiQkcHJldlNpYmxpbmcgPSBzY29wZS4kJHByZXZTaWJsaW5nO1xuXG4gICAgICBzY29wZS4kJG5leHRTaWJsaW5nID0gc2NvcGUuJCRwcmV2U2libGluZyA9IG51bGw7XG5cbiAgICB9LFxuXG4gICAgLy8gVW5kbyB0aGUgZWZmZWN0cyBvZiBkaXNjb25uZWN0U2NvcGUgYWJvdmUuXG4gICAgcmVjb25uZWN0U2NvcGU6IGZ1bmN0aW9uIHJlY29ubmVjdFNjb3BlKHNjb3BlKSB7XG4gICAgICBpZiAoIXNjb3BlKSByZXR1cm47XG5cbiAgICAgIC8vIHdlIGNhbid0IGRpc2Nvbm5lY3QgdGhlIHJvb3Qgbm9kZSBvciBzY29wZSBhbHJlYWR5IGRpc2Nvbm5lY3RlZFxuICAgICAgaWYgKHNjb3BlLiRyb290ID09PSBzY29wZSkgcmV0dXJuO1xuICAgICAgaWYgKCFzY29wZS4kJGRpc2Nvbm5lY3RlZCkgcmV0dXJuO1xuXG4gICAgICB2YXIgY2hpbGQgPSBzY29wZTtcblxuICAgICAgdmFyIHBhcmVudCA9IGNoaWxkLiRwYXJlbnQ7XG4gICAgICBjaGlsZC4kJGRpc2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgLy8gU2VlIFNjb3BlLiRuZXcgZm9yIHRoaXMgbG9naWMuLi5cbiAgICAgIGNoaWxkLiQkcHJldlNpYmxpbmcgPSBwYXJlbnQuJCRjaGlsZFRhaWw7XG4gICAgICBpZiAocGFyZW50LiQkY2hpbGRIZWFkKSB7XG4gICAgICAgIHBhcmVudC4kJGNoaWxkVGFpbC4kJG5leHRTaWJsaW5nID0gY2hpbGQ7XG4gICAgICAgIHBhcmVudC4kJGNoaWxkVGFpbCA9IGNoaWxkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50LiQkY2hpbGRIZWFkID0gcGFyZW50LiQkY2hpbGRUYWlsID0gY2hpbGQ7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogZ2V0Q2xvc2VzdCByZXBsaWNhdGVzIGpRdWVyeS5jbG9zZXN0KCkgdG8gd2FsayB1cCB0aGUgRE9NIHRyZWUgdW50aWwgaXQgZmluZHMgYSBtYXRjaGluZyBub2RlTmFtZVxuICAgICAqXG4gICAgICogQHBhcmFtIGVsIEVsZW1lbnQgdG8gc3RhcnQgd2Fsa2luZyB0aGUgRE9NIGZyb21cbiAgICAgKiBAcGFyYW0gdGFnTmFtZSBUYWcgbmFtZSB0byBmaW5kIGNsb3Nlc3QgdG8gZWwsIHN1Y2ggYXMgJ2Zvcm0nXG4gICAgICovXG4gICAgZ2V0Q2xvc2VzdDogZnVuY3Rpb24gZ2V0Q2xvc2VzdChlbCwgdGFnTmFtZSwgb25seVBhcmVudCkge1xuICAgICAgaWYgKGVsIGluc3RhbmNlb2YgYW5ndWxhci5lbGVtZW50KSBlbCA9IGVsWzBdO1xuICAgICAgdGFnTmFtZSA9IHRhZ05hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgIGlmIChvbmx5UGFyZW50KSBlbCA9IGVsLnBhcmVudE5vZGU7XG4gICAgICBpZiAoIWVsKSByZXR1cm4gbnVsbDtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKGVsLm5vZGVOYW1lID09PSB0YWdOYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChlbCA9IGVsLnBhcmVudE5vZGUpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uYWwgZXF1aXZhbGVudCBmb3IgJGVsZW1lbnQuZmlsdGVyKOKAmG1kLWJvdHRvbS1zaGVldOKAmSlcbiAgICAgKiB1c2VmdWwgd2l0aCBpbnRlcmltRWxlbWVudHMgd2hlcmUgdGhlIGVsZW1lbnQgYW5kIGl0cyBjb250YWluZXIgYXJlIGltcG9ydGFudC4uLlxuICAgICAqL1xuICAgIGV4dHJhY3RFbGVtZW50QnlOYW1lOiBmdW5jdGlvbiAoZWxlbWVudCwgbm9kZU5hbWUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBlbGVtZW50Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChlbGVtZW50W2ldLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lKXtcbiAgICAgICAgICByZXR1cm4gYW5ndWxhci5lbGVtZW50KGVsZW1lbnRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2l2ZSBvcHRpb25hbCBwcm9wZXJ0aWVzIHdpdGggbm8gdmFsdWUgYSBib29sZWFuIHRydWUgYnkgZGVmYXVsdFxuICAgICAqL1xuICAgIGluaXRPcHRpb25hbFByb3BlcnRpZXM6IGZ1bmN0aW9uIChzY29wZSwgYXR0ciwgZGVmYXVsdHMgKSB7XG4gICAgICAgZGVmYXVsdHMgPSBkZWZhdWx0cyB8fCB7IH07XG4gICAgICAgYW5ndWxhci5mb3JFYWNoKHNjb3BlLiQkaXNvbGF0ZUJpbmRpbmdzLCBmdW5jdGlvbiAoYmluZGluZywga2V5KSB7XG4gICAgICAgICBpZiAoYmluZGluZy5vcHRpb25hbCAmJiBhbmd1bGFyLmlzVW5kZWZpbmVkKHNjb3BlW2tleV0pKSB7XG4gICAgICAgICAgIHZhciBoYXNLZXkgPSBhdHRyLmhhc093blByb3BlcnR5KGF0dHIuJG5vcm1hbGl6ZShiaW5kaW5nLmF0dHJOYW1lKSk7XG5cbiAgICAgICAgICAgc2NvcGVba2V5XSA9IGFuZ3VsYXIuaXNEZWZpbmVkKGRlZmF1bHRzW2tleV0pID8gZGVmYXVsdHNba2V5XSA6IGhhc0tleTtcbiAgICAgICAgIH1cbiAgICAgICB9KTtcbiAgICB9XG5cbiAgfTtcblxufV0pO1xuXG4vKlxuICogU2luY2UgcmVtb3ZpbmcgalF1ZXJ5IGZyb20gdGhlIGRlbW9zLCBzb21lIGNvZGUgdGhhdCB1c2VzIGBlbGVtZW50LmZvY3VzKClgIGlzIGJyb2tlbi5cbiAqXG4gKiBXZSBuZWVkIHRvIGFkZCBgZWxlbWVudC5mb2N1cygpYCwgYmVjYXVzZSBpdCdzIHRlc3RhYmxlIHVubGlrZSBgZWxlbWVudFswXS5mb2N1c2AuXG4gKlxuICogVE9ETyhham9zbGluKTogVGhpcyBzaG91bGQgYmUgYWRkZWQgaW4gYSBiZXR0ZXIgcGxhY2UgbGF0ZXIuXG4gKi9cblxuYW5ndWxhci5lbGVtZW50LnByb3RvdHlwZS5mb2N1cyA9IGFuZ3VsYXIuZWxlbWVudC5wcm90b3R5cGUuZm9jdXMgfHwgZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmxlbmd0aCkge1xuICAgIHRoaXNbMF0uZm9jdXMoKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5hbmd1bGFyLmVsZW1lbnQucHJvdG90eXBlLmJsdXIgPSBhbmd1bGFyLmVsZW1lbnQucHJvdG90eXBlLmJsdXIgfHwgZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmxlbmd0aCkge1xuICAgIHRoaXNbMF0uYmx1cigpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvcmUnKVxuICAuc2VydmljZSgnJG1kQXJpYScsIEFyaWFTZXJ2aWNlKTtcblxuLypcbiAqIEBuZ0luamVjdFxuICovXG5mdW5jdGlvbiBBcmlhU2VydmljZSgkJHJBRiwgJGxvZywgJHdpbmRvdykge1xuXG4gIHJldHVybiB7XG4gICAgZXhwZWN0OiBleHBlY3QsXG4gICAgZXhwZWN0QXN5bmM6IGV4cGVjdEFzeW5jLFxuICAgIGV4cGVjdFdpdGhUZXh0OiBleHBlY3RXaXRoVGV4dFxuICB9O1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBleHBlY3RlZCBhdHRyaWJ1dGUgaGFzIGJlZW4gc3BlY2lmaWVkIG9uIHRoZSB0YXJnZXQgZWxlbWVudCBvciBjaGlsZFxuICAgKiBAcGFyYW0gZWxlbWVudFxuICAgKiBAcGFyYW0gYXR0ck5hbWVcbiAgICogQHBhcmFtIHtvcHRpb25hbH0gZGVmYXVsdFZhbHVlIFdoYXQgdG8gc2V0IHRoZSBhdHRyIHRvIGlmIG5vIHZhbHVlIGlzIGZvdW5kXG4gICAqL1xuICBmdW5jdGlvbiBleHBlY3QoZWxlbWVudCwgYXR0ck5hbWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHZhciBub2RlID0gZWxlbWVudFswXSB8fCBlbGVtZW50O1xuXG4gICAgLy8gaWYgbm9kZSBleGlzdHMgYW5kIG5laXRoZXIgaXQgbm9yIGl0cyBjaGlsZHJlbiBoYXZlIHRoZSBhdHRyaWJ1dGVcbiAgICBpZiAobm9kZSAmJlxuICAgICAgICgoIW5vZGUuaGFzQXR0cmlidXRlKGF0dHJOYW1lKSB8fFxuICAgICAgICBub2RlLmdldEF0dHJpYnV0ZShhdHRyTmFtZSkubGVuZ3RoID09PSAwKSAmJlxuICAgICAgICAhY2hpbGRIYXNBdHRyaWJ1dGUobm9kZSwgYXR0ck5hbWUpKSkge1xuXG4gICAgICBkZWZhdWx0VmFsdWUgPSBhbmd1bGFyLmlzU3RyaW5nKGRlZmF1bHRWYWx1ZSkgPyBkZWZhdWx0VmFsdWUudHJpbSgpIDogJyc7XG4gICAgICBpZiAoZGVmYXVsdFZhbHVlLmxlbmd0aCkge1xuICAgICAgICBlbGVtZW50LmF0dHIoYXR0ck5hbWUsIGRlZmF1bHRWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkbG9nLndhcm4oJ0FSSUE6IEF0dHJpYnV0ZSBcIicsIGF0dHJOYW1lLCAnXCIsIHJlcXVpcmVkIGZvciBhY2Nlc3NpYmlsaXR5LCBpcyBtaXNzaW5nIG9uIG5vZGU6Jywgbm9kZSk7XG4gICAgICB9XG5cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBleHBlY3RBc3luYyhlbGVtZW50LCBhdHRyTmFtZSwgZGVmYXVsdFZhbHVlR2V0dGVyKSB7XG4gICAgLy8gUHJvYmxlbTogd2hlbiByZXRyaWV2aW5nIHRoZSBlbGVtZW50J3MgY29udGVudHMgc3luY2hyb25vdXNseSB0byBmaW5kIHRoZSBsYWJlbCxcbiAgICAvLyB0aGUgdGV4dCBtYXkgbm90IGJlIGRlZmluZWQgeWV0IGluIHRoZSBjYXNlIG9mIGEgYmluZGluZy5cbiAgICAvLyBUaGVyZSBpcyBhIGhpZ2hlciBjaGFuY2UgdGhhdCBhIGJpbmRpbmcgd2lsbCBiZSBkZWZpbmVkIGlmIHdlIHdhaXQgb25lIGZyYW1lLlxuICAgICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgZXhwZWN0KGVsZW1lbnQsIGF0dHJOYW1lLCBkZWZhdWx0VmFsdWVHZXR0ZXIoKSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBleHBlY3RXaXRoVGV4dChlbGVtZW50LCBhdHRyTmFtZSkge1xuICAgIGV4cGVjdEFzeW5jKGVsZW1lbnQsIGF0dHJOYW1lLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBnZXRUZXh0KGVsZW1lbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VGV4dChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQudGV4dCgpLnRyaW0oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNoaWxkSGFzQXR0cmlidXRlKG5vZGUsIGF0dHJOYW1lKSB7XG4gICAgdmFyIGhhc0NoaWxkcmVuID0gbm9kZS5oYXNDaGlsZE5vZGVzKCksXG4gICAgICAgIGhhc0F0dHIgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGlzSGlkZGVuKGVsKSB7XG4gICAgICB2YXIgc3R5bGUgPSBlbC5jdXJyZW50U3R5bGUgPyBlbC5jdXJyZW50U3R5bGUgOiAkd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAgICAgcmV0dXJuIChzdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpO1xuICAgIH1cblxuICAgIGlmKGhhc0NoaWxkcmVuKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkTm9kZXM7XG4gICAgICBmb3IodmFyIGk9MDsgaTxjaGlsZHJlbi5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICBpZihjaGlsZC5ub2RlVHlwZSA9PT0gMSAmJiBjaGlsZC5oYXNBdHRyaWJ1dGUoYXR0ck5hbWUpKSB7XG4gICAgICAgICAgaWYoIWlzSGlkZGVuKGNoaWxkKSl7XG4gICAgICAgICAgICBoYXNBdHRyID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhhc0F0dHI7XG4gIH1cbn1cbkFyaWFTZXJ2aWNlLiRpbmplY3QgPSBbXCIkJHJBRlwiLCBcIiRsb2dcIiwgXCIkd2luZG93XCJdO1xuXG59KSgpO1xuKGZ1bmN0aW9uKCl7XG5cInVzZSBzdHJpY3RcIjtcblxuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvcmUnKVxuICAuc2VydmljZSgnJG1kQ29tcGlsZXInLCBtZENvbXBpbGVyU2VydmljZSk7XG5cbmZ1bmN0aW9uIG1kQ29tcGlsZXJTZXJ2aWNlKCRxLCAkaHR0cCwgJGluamVjdG9yLCAkY29tcGlsZSwgJGNvbnRyb2xsZXIsICR0ZW1wbGF0ZUNhY2hlKSB7XG4gIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cblxuICAvKlxuICAgKiBAbmdkb2Mgc2VydmljZVxuICAgKiBAbmFtZSAkbWRDb21waWxlclxuICAgKiBAbW9kdWxlIG1hdGVyaWFsLmNvcmVcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoZSAkbWRDb21waWxlciBzZXJ2aWNlIGlzIGFuIGFic3RyYWN0aW9uIG9mIGFuZ3VsYXIncyBjb21waWxlciwgdGhhdCBhbGxvd3MgdGhlIGRldmVsb3BlclxuICAgKiB0byBlYXNpbHkgY29tcGlsZSBhbiBlbGVtZW50IHdpdGggYSB0ZW1wbGF0ZVVybCwgY29udHJvbGxlciwgYW5kIGxvY2Fscy5cbiAgICpcbiAgICogQHVzYWdlXG4gICAqIDxobGpzIGxhbmc9XCJqc1wiPlxuICAgKiAkbWRDb21waWxlci5jb21waWxlKHtcbiAgICogICB0ZW1wbGF0ZVVybDogJ21vZGFsLmh0bWwnLFxuICAgKiAgIGNvbnRyb2xsZXI6ICdNb2RhbEN0cmwnLFxuICAgKiAgIGxvY2Fsczoge1xuICAgKiAgICAgbW9kYWw6IG15TW9kYWxJbnN0YW5jZTtcbiAgICogICB9XG4gICAqIH0pLnRoZW4oZnVuY3Rpb24oY29tcGlsZURhdGEpIHtcbiAgICogICBjb21waWxlRGF0YS5lbGVtZW50OyAvLyBtb2RhbC5odG1sJ3MgdGVtcGxhdGUgaW4gYW4gZWxlbWVudFxuICAgKiAgIGNvbXBpbGVEYXRhLmxpbmsobXlTY29wZSk7IC8vYXR0YWNoIGNvbnRyb2xsZXIgJiBzY29wZSB0byBlbGVtZW50XG4gICAqIH0pO1xuICAgKiA8L2hsanM+XG4gICAqL1xuXG4gICAvKlxuICAgICogQG5nZG9jIG1ldGhvZFxuICAgICogQG5hbWUgJG1kQ29tcGlsZXIjY29tcGlsZVxuICAgICogQGRlc2NyaXB0aW9uIEEgaGVscGVyIHRvIGNvbXBpbGUgYW4gSFRNTCB0ZW1wbGF0ZS90ZW1wbGF0ZVVybCB3aXRoIGEgZ2l2ZW4gY29udHJvbGxlcixcbiAgICAqIGxvY2FscywgYW5kIHNjb3BlLlxuICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgQW4gb3B0aW9ucyBvYmplY3QsIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICpcbiAgICAqICAgIC0gYGNvbnRyb2xsZXJgIC0gYHsoc3RyaW5nPXxmdW5jdGlvbigpPX1gIENvbnRyb2xsZXIgZm4gdGhhdCBzaG91bGQgYmUgYXNzb2NpYXRlZCB3aXRoXG4gICAgKiAgICAgIG5ld2x5IGNyZWF0ZWQgc2NvcGUgb3IgdGhlIG5hbWUgb2YgYSByZWdpc3RlcmVkIGNvbnRyb2xsZXIgaWYgcGFzc2VkIGFzIGEgc3RyaW5nLlxuICAgICogICAgLSBgY29udHJvbGxlckFzYCAtIGB7c3RyaW5nPX1gIEEgY29udHJvbGxlciBhbGlhcyBuYW1lLiBJZiBwcmVzZW50IHRoZSBjb250cm9sbGVyIHdpbGwgYmVcbiAgICAqICAgICAgcHVibGlzaGVkIHRvIHNjb3BlIHVuZGVyIHRoZSBgY29udHJvbGxlckFzYCBuYW1lLlxuICAgICogICAgLSBgdGVtcGxhdGVgIC0gYHtzdHJpbmc9fWAgQW4gaHRtbCB0ZW1wbGF0ZSBhcyBhIHN0cmluZy5cbiAgICAqICAgIC0gYHRlbXBsYXRlVXJsYCAtIGB7c3RyaW5nPX1gIEEgcGF0aCB0byBhbiBodG1sIHRlbXBsYXRlLlxuICAgICogICAgLSBgdHJhbnNmb3JtVGVtcGxhdGVgIC0gYHtmdW5jdGlvbih0ZW1wbGF0ZSk9fWAgQSBmdW5jdGlvbiB3aGljaCB0cmFuc2Zvcm1zIHRoZSB0ZW1wbGF0ZSBhZnRlclxuICAgICogICAgICBpdCBpcyBsb2FkZWQuIEl0IHdpbGwgYmUgZ2l2ZW4gdGhlIHRlbXBsYXRlIHN0cmluZyBhcyBhIHBhcmFtZXRlciwgYW5kIHNob3VsZFxuICAgICogICAgICByZXR1cm4gYSBhIG5ldyBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB0cmFuc2Zvcm1lZCB0ZW1wbGF0ZS5cbiAgICAqICAgIC0gYHJlc29sdmVgIC0gYHtPYmplY3QuPHN0cmluZywgZnVuY3Rpb24+PX1gIC0gQW4gb3B0aW9uYWwgbWFwIG9mIGRlcGVuZGVuY2llcyB3aGljaCBzaG91bGRcbiAgICAqICAgICAgYmUgaW5qZWN0ZWQgaW50byB0aGUgY29udHJvbGxlci4gSWYgYW55IG9mIHRoZXNlIGRlcGVuZGVuY2llcyBhcmUgcHJvbWlzZXMsIHRoZSBjb21waWxlclxuICAgICogICAgICB3aWxsIHdhaXQgZm9yIHRoZW0gYWxsIHRvIGJlIHJlc29sdmVkLCBvciBpZiBvbmUgaXMgcmVqZWN0ZWQgYmVmb3JlIHRoZSBjb250cm9sbGVyIGlzXG4gICAgKiAgICAgIGluc3RhbnRpYXRlZCBgY29tcGlsZSgpYCB3aWxsIGZhaWwuLlxuICAgICogICAgICAqIGBrZXlgIC0gYHtzdHJpbmd9YDogYSBuYW1lIG9mIGEgZGVwZW5kZW5jeSB0byBiZSBpbmplY3RlZCBpbnRvIHRoZSBjb250cm9sbGVyLlxuICAgICogICAgICAqIGBmYWN0b3J5YCAtIGB7c3RyaW5nfGZ1bmN0aW9ufWA6IElmIGBzdHJpbmdgIHRoZW4gaXQgaXMgYW4gYWxpYXMgZm9yIGEgc2VydmljZS5cbiAgICAqICAgICAgICBPdGhlcndpc2UgaWYgZnVuY3Rpb24sIHRoZW4gaXQgaXMgaW5qZWN0ZWQgYW5kIHRoZSByZXR1cm4gdmFsdWUgaXMgdHJlYXRlZCBhcyB0aGVcbiAgICAqICAgICAgICBkZXBlbmRlbmN5LiBJZiB0aGUgcmVzdWx0IGlzIGEgcHJvbWlzZSwgaXQgaXMgcmVzb2x2ZWQgYmVmb3JlIGl0cyB2YWx1ZSBpcyBcbiAgICAqICAgICAgICBpbmplY3RlZCBpbnRvIHRoZSBjb250cm9sbGVyLlxuICAgICpcbiAgICAqIEByZXR1cm5zIHtvYmplY3Q9fSBwcm9taXNlIEEgcHJvbWlzZSwgd2hpY2ggd2lsbCBiZSByZXNvbHZlZCB3aXRoIGEgYGNvbXBpbGVEYXRhYCBvYmplY3QuXG4gICAgKiBgY29tcGlsZURhdGFgIGhhcyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6IFxuICAgICpcbiAgICAqICAgLSBgZWxlbWVudGAgLSBge2VsZW1lbnR9YDogYW4gdW5jb21waWxlZCBlbGVtZW50IG1hdGNoaW5nIHRoZSBwcm92aWRlZCB0ZW1wbGF0ZS5cbiAgICAqICAgLSBgbGlua2AgLSBge2Z1bmN0aW9uKHNjb3BlKX1gOiBBIGxpbmsgZnVuY3Rpb24sIHdoaWNoLCB3aGVuIGNhbGxlZCwgd2lsbCBjb21waWxlXG4gICAgKiAgICAgdGhlIGVsZW1lbnQgYW5kIGluc3RhbnRpYXRlIHRoZSBwcm92aWRlZCBjb250cm9sbGVyIChpZiBnaXZlbikuXG4gICAgKiAgIC0gYGxvY2Fsc2AgLSBge29iamVjdH1gOiBUaGUgbG9jYWxzIHdoaWNoIHdpbGwgYmUgcGFzc2VkIGludG8gdGhlIGNvbnRyb2xsZXIgb25jZSBgbGlua2AgaXNcbiAgICAqICAgICBjYWxsZWQuIElmIGBiaW5kVG9Db250cm9sbGVyYCBpcyB0cnVlLCB0aGV5IHdpbGwgYmUgY29wcGllZCB0byB0aGUgY3RybCBpbnN0ZWFkXG4gICAgKiAgIC0gYGJpbmRUb0NvbnRyb2xsZXJgIC0gYGJvb2xgOiBiaW5kIHRoZSBsb2NhbHMgdG8gdGhlIGNvbnRyb2xsZXIsIGluc3RlYWQgb2YgcGFzc2luZyB0aGVtIGluLlxuICAgICovXG4gIHRoaXMuY29tcGlsZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIgdGVtcGxhdGVVcmwgPSBvcHRpb25zLnRlbXBsYXRlVXJsO1xuICAgIHZhciB0ZW1wbGF0ZSA9IG9wdGlvbnMudGVtcGxhdGUgfHwgJyc7XG4gICAgdmFyIGNvbnRyb2xsZXIgPSBvcHRpb25zLmNvbnRyb2xsZXI7XG4gICAgdmFyIGNvbnRyb2xsZXJBcyA9IG9wdGlvbnMuY29udHJvbGxlckFzO1xuICAgIHZhciByZXNvbHZlID0gb3B0aW9ucy5yZXNvbHZlIHx8IHt9O1xuICAgIHZhciBsb2NhbHMgPSBvcHRpb25zLmxvY2FscyB8fCB7fTtcbiAgICB2YXIgdHJhbnNmb3JtVGVtcGxhdGUgPSBvcHRpb25zLnRyYW5zZm9ybVRlbXBsYXRlIHx8IGFuZ3VsYXIuaWRlbnRpdHk7XG4gICAgdmFyIGJpbmRUb0NvbnRyb2xsZXIgPSBvcHRpb25zLmJpbmRUb0NvbnRyb2xsZXI7XG5cbiAgICAvLyBUYWtlIHJlc29sdmUgdmFsdWVzIGFuZCBpbnZva2UgdGhlbS4gIFxuICAgIC8vIFJlc29sdmVzIGNhbiBlaXRoZXIgYmUgYSBzdHJpbmcgKHZhbHVlOiAnTXlSZWdpc3RlcmVkQW5ndWxhckNvbnN0JyksXG4gICAgLy8gb3IgYW4gaW52b2thYmxlICdmYWN0b3J5JyBvZiBzb3J0czogKHZhbHVlOiBmdW5jdGlvbiBWYWx1ZUdldHRlcigkZGVwZW5kZW5jeSkge30pXG4gICAgYW5ndWxhci5mb3JFYWNoKHJlc29sdmUsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICByZXNvbHZlW2tleV0gPSAkaW5qZWN0b3IuZ2V0KHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmVba2V5XSA9ICRpbmplY3Rvci5pbnZva2UodmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vQWRkIHRoZSBsb2NhbHMsIHdoaWNoIGFyZSBqdXN0IHN0cmFpZ2h0IHZhbHVlcyB0byBpbmplY3RcbiAgICAvL2VnIGxvY2FsczogeyB0aHJlZTogMyB9LCB3aWxsIGluamVjdCB0aHJlZSBpbnRvIHRoZSBjb250cm9sbGVyXG4gICAgYW5ndWxhci5leHRlbmQocmVzb2x2ZSwgbG9jYWxzKTtcblxuICAgIGlmICh0ZW1wbGF0ZVVybCkge1xuICAgICAgcmVzb2x2ZS4kdGVtcGxhdGUgPSAkaHR0cC5nZXQodGVtcGxhdGVVcmwsIHtjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzb2x2ZS4kdGVtcGxhdGUgPSAkcS53aGVuKHRlbXBsYXRlKTtcbiAgICB9XG5cbiAgICAvLyBXYWl0IGZvciBhbGwgdGhlIHJlc29sdmVzIHRvIGZpbmlzaCBpZiB0aGV5IGFyZSBwcm9taXNlc1xuICAgIHJldHVybiAkcS5hbGwocmVzb2x2ZSkudGhlbihmdW5jdGlvbihsb2NhbHMpIHtcblxuICAgICAgdmFyIHRlbXBsYXRlID0gdHJhbnNmb3JtVGVtcGxhdGUobG9jYWxzLiR0ZW1wbGF0ZSk7XG4gICAgICB2YXIgZWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudCB8fCBhbmd1bGFyLmVsZW1lbnQoJzxkaXY+JykuaHRtbCh0ZW1wbGF0ZS50cmltKCkpLmNvbnRlbnRzKCk7XG4gICAgICB2YXIgbGlua0ZuID0gJGNvbXBpbGUoZWxlbWVudCk7XG5cbiAgICAgIC8vUmV0dXJuIGEgbGlua2luZyBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIGxhdGVyIHdoZW4gdGhlIGVsZW1lbnQgaXMgcmVhZHlcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxvY2FsczogbG9jYWxzLFxuICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICBsaW5rOiBmdW5jdGlvbiBsaW5rKHNjb3BlKSB7XG4gICAgICAgICAgbG9jYWxzLiRzY29wZSA9IHNjb3BlO1xuXG4gICAgICAgICAgLy9JbnN0YW50aWF0ZSBjb250cm9sbGVyIGlmIGl0IGV4aXN0cywgYmVjYXVzZSB3ZSBoYXZlIHNjb3BlXG4gICAgICAgICAgaWYgKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIHZhciBpbnZva2VDdHJsID0gJGNvbnRyb2xsZXIoY29udHJvbGxlciwgbG9jYWxzLCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChiaW5kVG9Db250cm9sbGVyKSB7XG4gICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKGludm9rZUN0cmwuaW5zdGFuY2UsIGxvY2Fscyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY3RybCA9IGludm9rZUN0cmwoKTtcbiAgICAgICAgICAgIC8vU2VlIGFuZ3VsYXItcm91dGUgc291cmNlIGZvciB0aGlzIGxvZ2ljXG4gICAgICAgICAgICBlbGVtZW50LmRhdGEoJyRuZ0NvbnRyb2xsZXJDb250cm9sbGVyJywgY3RybCk7XG4gICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuKCkuZGF0YSgnJG5nQ29udHJvbGxlckNvbnRyb2xsZXInLCBjdHJsKTtcblxuICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXJBcykge1xuICAgICAgICAgICAgICBzY29wZVtjb250cm9sbGVyQXNdID0gY3RybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGxpbmtGbihzY29wZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG5cbiAgfTtcbn1cbm1kQ29tcGlsZXJTZXJ2aWNlLiRpbmplY3QgPSBbXCIkcVwiLCBcIiRodHRwXCIsIFwiJGluamVjdG9yXCIsIFwiJGNvbXBpbGVcIiwgXCIkY29udHJvbGxlclwiLCBcIiR0ZW1wbGF0ZUNhY2hlXCJdO1xuXG59KSgpO1xuKGZ1bmN0aW9uKCl7XG5cInVzZSBzdHJpY3RcIjtcblxuICB2YXIgSEFORExFUlMgPSB7fTtcbiAgLyogVGhlIHN0YXRlIG9mIHRoZSBjdXJyZW50ICdwb2ludGVyJ1xuICAgKiBUaGUgcG9pbnRlciByZXByZXNlbnRzIHRoZSBzdGF0ZSBvZiB0aGUgY3VycmVudCB0b3VjaC5cbiAgICogSXQgY29udGFpbnMgbm9ybWFsaXplZCB4IGFuZCB5IGNvb3JkaW5hdGVzIGZyb20gRE9NIGV2ZW50cyxcbiAgICogYXMgd2VsbCBhcyBvdGhlciBpbmZvcm1hdGlvbiBhYnN0cmFjdGVkIGZyb20gdGhlIERPTS5cbiAgICovXG4gIHZhciBwb2ludGVyLCBsYXN0UG9pbnRlciwgZm9yY2VTa2lwQ2xpY2tIaWphY2sgPSBmYWxzZTtcblxuICAvLyBVc2VkIHRvIGF0dGFjaCBldmVudCBsaXN0ZW5lcnMgb25jZSB3aGVuIG11bHRpcGxlIG5nLWFwcHMgYXJlIHJ1bm5pbmcuXG4gIHZhciBpc0luaXRpYWxpemVkID0gZmFsc2U7XG4gIFxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnbWF0ZXJpYWwuY29yZS5nZXN0dXJlcycsIFsgXSlcbiAgICAucHJvdmlkZXIoJyRtZEdlc3R1cmUnLCBNZEdlc3R1cmVQcm92aWRlcilcbiAgICAuZmFjdG9yeSgnJCRNZEdlc3R1cmVIYW5kbGVyJywgTWRHZXN0dXJlSGFuZGxlcilcbiAgICAucnVuKCBhdHRhY2hUb0RvY3VtZW50ICk7XG5cbiAgLyoqXG4gICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgKiBAbmFtZSAkbWRHZXN0dXJlUHJvdmlkZXJcbiAgICAgKiBAbW9kdWxlIG1hdGVyaWFsLmNvcmUuZ2VzdHVyZXNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIEluIHNvbWUgc2NlbmFyaW9zIG9uIE1vYmlsZSBkZXZpY2VzICh3aXRob3V0IGpRdWVyeSksIHRoZSBjbGljayBldmVudHMgc2hvdWxkIE5PVCBiZSBoaWphY2tlZC5cbiAgICAgKiBgJG1kR2VzdHVyZVByb3ZpZGVyYCBpcyB1c2VkIHRvIGNvbmZpZ3VyZSB0aGUgR2VzdHVyZSBtb2R1bGUgdG8gaWdub3JlIG9yIHNraXAgY2xpY2sgaGlqYWNraW5nIG9uIG1vYmlsZVxuICAgICAqIGRldmljZXMuXG4gICAgICpcbiAgICAgKiA8aGxqcyBsYW5nPVwianNcIj5cbiAgICAgKiAgIGFwcC5jb25maWcoZnVuY3Rpb24oJG1kR2VzdHVyZVByb3ZpZGVyKSB7XG4gICAgICpcbiAgICAgKiAgICAgLy8gRm9yIG1vYmlsZSBkZXZpY2VzIHdpdGhvdXQgalF1ZXJ5IGxvYWRlZCwgZG8gbm90XG4gICAgICogICAgIC8vIGludGVyY2VwdCBjbGljayBldmVudHMgZHVyaW5nIHRoZSBjYXB0dXJlIHBoYXNlLlxuICAgICAqICAgICAkbWRHZXN0dXJlUHJvdmlkZXIuc2tpcENsaWNrSGlqYWNrKCk7XG4gICAgICpcbiAgICAgKiAgIH0pO1xuICAgICAqIDwvaGxqcz5cbiAgICAgKlxuICAgICAqL1xuICBmdW5jdGlvbiBNZEdlc3R1cmVQcm92aWRlcigpIHsgfVxuXG4gIE1kR2VzdHVyZVByb3ZpZGVyLnByb3RvdHlwZSA9IHtcblxuICAgIC8vIFB1Ymxpc2ggYWNjZXNzIHRvIHNldHRlciB0byBjb25maWd1cmUgYSB2YXJpYWJsZSAgQkVGT1JFIHRoZVxuICAgIC8vICRtZEdlc3R1cmUgc2VydmljZSBpcyBpbnN0YW50aWF0ZWQuLi5cbiAgICBza2lwQ2xpY2tIaWphY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZvcmNlU2tpcENsaWNrSGlqYWNrID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogJGdldCBpcyB1c2VkIHRvIGJ1aWxkIGFuIGluc3RhbmNlIG9mICRtZEdlc3R1cmVcbiAgICAgKiBAbmdJbmplY3RcbiAgICAgKi9cbiAgICAkZ2V0IDogW1wiJCRNZEdlc3R1cmVIYW5kbGVyXCIsIFwiJCRyQUZcIiwgXCIkdGltZW91dFwiLCBmdW5jdGlvbigkJE1kR2VzdHVyZUhhbmRsZXIsICQkckFGLCAkdGltZW91dCkge1xuICAgICAgICAgcmV0dXJuIG5ldyBNZEdlc3R1cmUoJCRNZEdlc3R1cmVIYW5kbGVyLCAkJHJBRiwgJHRpbWVvdXQpO1xuICAgIH1dXG4gIH07XG5cblxuXG4gIC8qKlxuICAgKiBNZEdlc3R1cmUgZmFjdG9yeSBjb25zdHJ1Y3Rpb24gZnVuY3Rpb25cbiAgICogQG5nSW5qZWN0XG4gICAqL1xuICBmdW5jdGlvbiBNZEdlc3R1cmUoJCRNZEdlc3R1cmVIYW5kbGVyLCAkJHJBRiwgJHRpbWVvdXQpIHtcbiAgICB2YXIgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBuYXZpZ2F0b3IudmVuZG9yIHx8IHdpbmRvdy5vcGVyYTtcbiAgICB2YXIgaXNJb3MgPSB1c2VyQWdlbnQubWF0Y2goL2lwYWR8aXBob25lfGlwb2QvaSk7XG4gICAgdmFyIGlzQW5kcm9pZCA9IHVzZXJBZ2VudC5tYXRjaCgvYW5kcm9pZC9pKTtcbiAgICB2YXIgaGFzSlF1ZXJ5ID0gICh0eXBlb2Ygd2luZG93LmpRdWVyeSAhPT0gJ3VuZGVmaW5lZCcpICYmIChhbmd1bGFyLmVsZW1lbnQgPT09IHdpbmRvdy5qUXVlcnkpO1xuXG4gICAgdmFyIHNlbGYgPSB7XG4gICAgICBoYW5kbGVyOiBhZGRIYW5kbGVyLFxuICAgICAgcmVnaXN0ZXI6IHJlZ2lzdGVyLFxuICAgICAgLy8gT24gbW9iaWxlIHcvb3V0IGpRdWVyeSwgd2Ugbm9ybWFsbHkgaW50ZXJjZXB0IGNsaWNrcy4gU2hvdWxkIHdlIHNraXAgdGhhdD9cbiAgICAgIGlzSGlqYWNraW5nQ2xpY2tzOiAoaXNJb3MgfHwgaXNBbmRyb2lkKSAmJiAhaGFzSlF1ZXJ5ICYmICFmb3JjZVNraXBDbGlja0hpamFja1xuICAgIH07XG5cbiAgICBpZiAoc2VsZi5pc0hpamFja2luZ0NsaWNrcykge1xuICAgICAgc2VsZi5oYW5kbGVyKCdjbGljaycsIHtcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIG1heERpc3RhbmNlOiA2XG4gICAgICAgIH0sXG4gICAgICAgIG9uRW5kOiBmdW5jdGlvbiAoZXYsIHBvaW50ZXIpIHtcbiAgICAgICAgICBpZiAocG9pbnRlci5kaXN0YW5jZSA8IHRoaXMuc3RhdGUub3B0aW9ucy5tYXhEaXN0YW5jZSkge1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2LCAnY2xpY2snKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogUmVnaXN0ZXIgYW4gZWxlbWVudCB0byBsaXN0ZW4gZm9yIGEgaGFuZGxlci5cbiAgICAgKiBUaGlzIGFsbG93cyBhbiBlbGVtZW50IHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG9wdGlvbnMgZm9yIGEgaGFuZGxlci5cbiAgICAgKiBBZGRpdGlvbmFsbHksIHNvbWUgaGFuZGxlcnMgbGlrZSBkcmFnIGFuZCBob2xkIG9ubHkgZGlzcGF0Y2ggZXZlbnRzIGlmXG4gICAgICogdGhlIGRvbUV2ZW50IGhhcHBlbnMgaW5zaWRlIGFuIGVsZW1lbnQgdGhhdCdzIHJlZ2lzdGVyZWQgdG8gbGlzdGVuIGZvciB0aGVzZSBldmVudHMuXG4gICAgICpcbiAgICAgKiBAc2VlIEdlc3R1cmVIYW5kbGVyIGZvciBob3cgb3ZlcnJpZGluZyBvZiBkZWZhdWx0IG9wdGlvbnMgd29ya3MuXG4gICAgICogQGV4YW1wbGUgJG1kR2VzdHVyZS5yZWdpc3RlcihteUVsZW1lbnQsICdkcmFnJywgeyBtaW5EaXN0YW5jZTogMjAsIGhvcnppb250YWw6IGZhbHNlIH0pXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXIoZWxlbWVudCwgaGFuZGxlck5hbWUsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBoYW5kbGVyID0gSEFORExFUlNbaGFuZGxlck5hbWUucmVwbGFjZSgvXlxcJG1kLi8sICcnKV07XG4gICAgICBpZiAoIWhhbmRsZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcmVnaXN0ZXIgZWxlbWVudCB3aXRoIGhhbmRsZXIgJyArIGhhbmRsZXJOYW1lICsgJy4gJyArXG4gICAgICAgICdBdmFpbGFibGUgaGFuZGxlcnM6ICcgKyBPYmplY3Qua2V5cyhIQU5ETEVSUykuam9pbignLCAnKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFuZGxlci5yZWdpc3RlckVsZW1lbnQoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBhZGQgYSBoYW5kbGVyIHRvICRtZEdlc3R1cmUuIHNlZSBiZWxvdy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRIYW5kbGVyKG5hbWUsIGRlZmluaXRpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gbmV3ICQkTWRHZXN0dXJlSGFuZGxlcihuYW1lKTtcbiAgICAgIGFuZ3VsYXIuZXh0ZW5kKGhhbmRsZXIsIGRlZmluaXRpb24pO1xuICAgICAgSEFORExFUlNbbmFtZV0gPSBoYW5kbGVyO1xuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIFJlZ2lzdGVyIGhhbmRsZXJzLiBUaGVzZSBsaXN0ZW4gdG8gdG91Y2gvc3RhcnQvbW92ZSBldmVudHMsIGludGVycHJldCB0aGVtLFxuICAgICAqIGFuZCBkaXNwYXRjaCBnZXN0dXJlIGV2ZW50cyBkZXBlbmRpbmcgb24gb3B0aW9ucyAmIGNvbmRpdGlvbnMuIFRoZXNlIGFyZSBhbGxcbiAgICAgKiBpbnN0YW5jZXMgb2YgR2VzdHVyZUhhbmRsZXIuXG4gICAgICogQHNlZSBHZXN0dXJlSGFuZGxlciBcbiAgICAgKi9cbiAgICByZXR1cm4gc2VsZlxuICAgICAgLypcbiAgICAgICAqIFRoZSBwcmVzcyBoYW5kbGVyIGRpc3BhdGNoZXMgYW4gZXZlbnQgb24gdG91Y2hkb3duL3RvdWNoZW5kLlxuICAgICAgICogSXQncyBhIHNpbXBsZSBhYnN0cmFjdGlvbiBvZiB0b3VjaC9tb3VzZS9wb2ludGVyIHN0YXJ0IGFuZCBlbmQuXG4gICAgICAgKi9cbiAgICAgIC5oYW5kbGVyKCdwcmVzcycsIHtcbiAgICAgICAgb25TdGFydDogZnVuY3Rpb24gKGV2LCBwb2ludGVyKSB7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2LCAnJG1kLnByZXNzZG93bicpO1xuICAgICAgICB9LFxuICAgICAgICBvbkVuZDogZnVuY3Rpb24gKGV2LCBwb2ludGVyKSB7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2LCAnJG1kLnByZXNzdXAnKTtcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgLypcbiAgICAgICAqIFRoZSBob2xkIGhhbmRsZXIgZGlzcGF0Y2hlcyBhbiBldmVudCBpZiB0aGUgdXNlciBrZWVwcyB0aGVpciBmaW5nZXIgd2l0aGluXG4gICAgICAgKiB0aGUgc2FtZSA8bWF4RGlzdGFuY2U+IGFyZWEgZm9yIDxkZWxheT4gbXMuXG4gICAgICAgKiBUaGUgaG9sZCBoYW5kbGVyIHdpbGwgb25seSBydW4gaWYgYSBwYXJlbnQgb2YgdGhlIHRvdWNoIHRhcmdldCBpcyByZWdpc3RlcmVkXG4gICAgICAgKiB0byBsaXN0ZW4gZm9yIGhvbGQgZXZlbnRzIHRocm91Z2ggJG1kR2VzdHVyZS5yZWdpc3RlcigpXG4gICAgICAgKi9cbiAgICAgIC5oYW5kbGVyKCdob2xkJywge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgbWF4RGlzdGFuY2U6IDYsXG4gICAgICAgICAgZGVsYXk6IDUwMFxuICAgICAgICB9LFxuICAgICAgICBvbkNhbmNlbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICR0aW1lb3V0LmNhbmNlbCh0aGlzLnN0YXRlLnRpbWVvdXQpO1xuICAgICAgICB9LFxuICAgICAgICBvblN0YXJ0OiBmdW5jdGlvbiAoZXYsIHBvaW50ZXIpIHtcbiAgICAgICAgICAvLyBGb3IgaG9sZCwgcmVxdWlyZSBhIHBhcmVudCB0byBiZSByZWdpc3RlcmVkIHdpdGggJG1kR2VzdHVyZS5yZWdpc3RlcigpXG4gICAgICAgICAgLy8gQmVjYXVzZSB3ZSBwcmV2ZW50IHNjcm9sbCBldmVudHMsIHRoaXMgaXMgbmVjZXNzYXJ5LlxuICAgICAgICAgIGlmICghdGhpcy5zdGF0ZS5yZWdpc3RlcmVkUGFyZW50KSByZXR1cm4gdGhpcy5jYW5jZWwoKTtcblxuICAgICAgICAgIHRoaXMuc3RhdGUucG9zID0ge3g6IHBvaW50ZXIueCwgeTogcG9pbnRlci55fTtcbiAgICAgICAgICB0aGlzLnN0YXRlLnRpbWVvdXQgPSAkdGltZW91dChhbmd1bGFyLmJpbmQodGhpcywgZnVuY3Rpb24gaG9sZERlbGF5Rm4oKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXYsICckbWQuaG9sZCcpO1xuICAgICAgICAgICAgdGhpcy5jYW5jZWwoKTsgLy93ZSdyZSBkb25lIVxuICAgICAgICAgIH0pLCB0aGlzLnN0YXRlLm9wdGlvbnMuZGVsYXksIGZhbHNlKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Nb3ZlOiBmdW5jdGlvbiAoZXYsIHBvaW50ZXIpIHtcbiAgICAgICAgICAvLyBEb24ndCBzY3JvbGwgd2hpbGUgd2FpdGluZyBmb3IgaG9sZC5cbiAgICAgICAgICAvLyBJZiB3ZSBkb24ndCBwcmV2ZW50RGVmYXVsdCB0b3VjaG1vdmUgZXZlbnRzIGhlcmUsIEFuZHJvaWQgd2lsbCBhc3N1bWUgd2UgZG9uJ3RcbiAgICAgICAgICAvLyB3YW50IHRvIGxpc3RlbiB0byBhbnltb3JlIHRvdWNoIGV2ZW50cy4gSXQgd2lsbCBzdGFydCBzY3JvbGxpbmcgYW5kIHN0b3Agc2VuZGluZ1xuICAgICAgICAgIC8vIHRvdWNobW92ZSBldmVudHMuXG4gICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgIC8vIElmIHRoZSB1c2VyIG1vdmVzIGdyZWF0ZXIgdGhhbiA8bWF4RGlzdGFuY2U+IHBpeGVscywgc3RvcCB0aGUgaG9sZCB0aW1lclxuICAgICAgICAgIC8vIHNldCBpbiBvblN0YXJ0XG4gICAgICAgICAgdmFyIGR4ID0gdGhpcy5zdGF0ZS5wb3MueCAtIHBvaW50ZXIueDtcbiAgICAgICAgICB2YXIgZHkgPSB0aGlzLnN0YXRlLnBvcy55IC0gcG9pbnRlci55O1xuICAgICAgICAgIGlmIChNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpID4gdGhpcy5vcHRpb25zLm1heERpc3RhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLmNhbmNlbCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25FbmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLm9uQ2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIC8qXG4gICAgICAgKiBUaGUgZHJhZyBoYW5kbGVyIGRpc3BhdGNoZXMgYSBkcmFnIGV2ZW50IGlmIHRoZSB1c2VyIGhvbGRzIGFuZCBtb3ZlcyBoaXMgZmluZ2VyIGdyZWF0ZXIgdGhhblxuICAgICAgICogPG1pbkRpc3RhbmNlPiBweCBpbiB0aGUgeCBvciB5IGRpcmVjdGlvbiwgZGVwZW5kaW5nIG9uIG9wdGlvbnMuaG9yaXpvbnRhbC5cbiAgICAgICAqIFRoZSBkcmFnIHdpbGwgYmUgY2FuY2VsbGVkIGlmIHRoZSB1c2VyIG1vdmVzIGhpcyBmaW5nZXIgZ3JlYXRlciB0aGFuIDxtaW5EaXN0YW5jZT4qPGNhbmNlbE11bHRpcGxpZXI+IGluXG4gICAgICAgKiB0aGUgcGVycGluZGljdWxhciBkaXJlY3Rpb24uIEVnIGlmIHRoZSBkcmFnIGlzIGhvcml6b250YWwgYW5kIHRoZSB1c2VyIG1vdmVzIGhpcyBmaW5nZXIgPG1pbkRpc3RhbmNlPio8Y2FuY2VsTXVsdGlwbGllcj5cbiAgICAgICAqIHBpeGVscyB2ZXJ0aWNhbGx5LCB0aGlzIGhhbmRsZXIgd29uJ3QgY29uc2lkZXIgdGhlIG1vdmUgcGFydCBvZiBhIGRyYWcuXG4gICAgICAgKi9cbiAgICAgIC5oYW5kbGVyKCdkcmFnJywge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgbWluRGlzdGFuY2U6IDYsXG4gICAgICAgICAgaG9yaXpvbnRhbDogdHJ1ZSxcbiAgICAgICAgICBjYW5jZWxNdWx0aXBsaWVyOiAxLjVcbiAgICAgICAgfSxcbiAgICAgICAgb25TdGFydDogZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgLy8gRm9yIGRyYWcsIHJlcXVpcmUgYSBwYXJlbnQgdG8gYmUgcmVnaXN0ZXJlZCB3aXRoICRtZEdlc3R1cmUucmVnaXN0ZXIoKVxuICAgICAgICAgIGlmICghdGhpcy5zdGF0ZS5yZWdpc3RlcmVkUGFyZW50KSB0aGlzLmNhbmNlbCgpO1xuICAgICAgICB9LFxuICAgICAgICBvbk1vdmU6IGZ1bmN0aW9uIChldiwgcG9pbnRlcikge1xuICAgICAgICAgIHZhciBzaG91bGRTdGFydERyYWcsIHNob3VsZENhbmNlbDtcbiAgICAgICAgICAvLyBEb24ndCBzY3JvbGwgd2hpbGUgZGVjaWRpbmcgaWYgdGhpcyB0b3VjaG1vdmUgcXVhbGlmaWVzIGFzIGEgZHJhZyBldmVudC5cbiAgICAgICAgICAvLyBJZiB3ZSBkb24ndCBwcmV2ZW50RGVmYXVsdCB0b3VjaG1vdmUgZXZlbnRzIGhlcmUsIEFuZHJvaWQgd2lsbCBhc3N1bWUgd2UgZG9uJ3RcbiAgICAgICAgICAvLyB3YW50IHRvIGxpc3RlbiB0byBhbnltb3JlIHRvdWNoIGV2ZW50cy4gSXQgd2lsbCBzdGFydCBzY3JvbGxpbmcgYW5kIHN0b3Agc2VuZGluZ1xuICAgICAgICAgIC8vIHRvdWNobW92ZSBldmVudHMuXG4gICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgIGlmICghdGhpcy5zdGF0ZS5kcmFnUG9pbnRlcikge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUub3B0aW9ucy5ob3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgIHNob3VsZFN0YXJ0RHJhZyA9IE1hdGguYWJzKHBvaW50ZXIuZGlzdGFuY2VYKSA+IHRoaXMuc3RhdGUub3B0aW9ucy5taW5EaXN0YW5jZTtcbiAgICAgICAgICAgICAgc2hvdWxkQ2FuY2VsID0gTWF0aC5hYnMocG9pbnRlci5kaXN0YW5jZVkpID4gdGhpcy5zdGF0ZS5vcHRpb25zLm1pbkRpc3RhbmNlICogdGhpcy5zdGF0ZS5vcHRpb25zLmNhbmNlbE11bHRpcGxpZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzaG91bGRTdGFydERyYWcgPSBNYXRoLmFicyhwb2ludGVyLmRpc3RhbmNlWSkgPiB0aGlzLnN0YXRlLm9wdGlvbnMubWluRGlzdGFuY2U7XG4gICAgICAgICAgICAgIHNob3VsZENhbmNlbCA9IE1hdGguYWJzKHBvaW50ZXIuZGlzdGFuY2VYKSA+IHRoaXMuc3RhdGUub3B0aW9ucy5taW5EaXN0YW5jZSAqIHRoaXMuc3RhdGUub3B0aW9ucy5jYW5jZWxNdWx0aXBsaWVyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2hvdWxkU3RhcnREcmFnKSB7XG4gICAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBwb2ludGVyIHJlcHJlc2VudGluZyB0aGlzIGRyYWcsIHN0YXJ0aW5nIGF0IHRoaXMgcG9pbnQgd2hlcmUgdGhlIGRyYWcgc3RhcnRlZC5cbiAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5kcmFnUG9pbnRlciA9IG1ha2VTdGFydFBvaW50ZXIoZXYpO1xuICAgICAgICAgICAgICB1cGRhdGVQb2ludGVyU3RhdGUoZXYsIHRoaXMuc3RhdGUuZHJhZ1BvaW50ZXIpO1xuICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXYsICckbWQuZHJhZ3N0YXJ0JywgdGhpcy5zdGF0ZS5kcmFnUG9pbnRlcik7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hvdWxkQ2FuY2VsKSB7XG4gICAgICAgICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hEcmFnTW92ZShldik7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvLyBPbmx5IGRpc3BhdGNoIGRyYWdtb3ZlIGV2ZW50cyBldmVyeSBmcmFtZTsgYW55IG1vcmUgaXMgdW5uZWNlc3NyYXlcbiAgICAgICAgZGlzcGF0Y2hEcmFnTW92ZTogJCRyQUYudGhyb3R0bGUoZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBkcmFnIGRpZG4ndCBzdG9wIHdoaWxlIHdhaXRpbmcgZm9yIHRoZSBuZXh0IGZyYW1lXG4gICAgICAgICAgaWYgKHRoaXMuc3RhdGUuaXNSdW5uaW5nKSB7XG4gICAgICAgICAgICB1cGRhdGVQb2ludGVyU3RhdGUoZXYsIHRoaXMuc3RhdGUuZHJhZ1BvaW50ZXIpO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2LCAnJG1kLmRyYWcnLCB0aGlzLnN0YXRlLmRyYWdQb2ludGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBvbkVuZDogZnVuY3Rpb24gKGV2LCBwb2ludGVyKSB7XG4gICAgICAgICAgaWYgKHRoaXMuc3RhdGUuZHJhZ1BvaW50ZXIpIHtcbiAgICAgICAgICAgIHVwZGF0ZVBvaW50ZXJTdGF0ZShldiwgdGhpcy5zdGF0ZS5kcmFnUG9pbnRlcik7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXYsICckbWQuZHJhZ2VuZCcsIHRoaXMuc3RhdGUuZHJhZ1BvaW50ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgLypcbiAgICAgICAqIFRoZSBzd2lwZSBoYW5kbGVyIHdpbGwgZGlzcGF0Y2ggYSBzd2lwZSBldmVudCBpZiwgb24gdGhlIGVuZCBvZiBhIHRvdWNoLFxuICAgICAgICogdGhlIHZlbG9jaXR5IGFuZCBkaXN0YW5jZSB3ZXJlIGhpZ2ggZW5vdWdoLlxuICAgICAgICogVE9ETzogYWRkIHZlcnRpY2FsIHN3aXBpbmcgd2l0aCBhIGBob3Jpem9udGFsYCBvcHRpb24gc2ltaWxhciB0byB0aGUgZHJhZyBoYW5kbGVyLlxuICAgICAgICovXG4gICAgICAuaGFuZGxlcignc3dpcGUnLCB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBtaW5WZWxvY2l0eTogMC42NSxcbiAgICAgICAgICBtaW5EaXN0YW5jZTogMTBcbiAgICAgICAgfSxcbiAgICAgICAgb25FbmQ6IGZ1bmN0aW9uIChldiwgcG9pbnRlcikge1xuICAgICAgICAgIGlmIChNYXRoLmFicyhwb2ludGVyLnZlbG9jaXR5WCkgPiB0aGlzLnN0YXRlLm9wdGlvbnMubWluVmVsb2NpdHkgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKHBvaW50ZXIuZGlzdGFuY2VYKSA+IHRoaXMuc3RhdGUub3B0aW9ucy5taW5EaXN0YW5jZSkge1xuICAgICAgICAgICAgdmFyIGV2ZW50VHlwZSA9IHBvaW50ZXIuZGlyZWN0aW9uWCA9PSAnbGVmdCcgPyAnJG1kLnN3aXBlbGVmdCcgOiAnJG1kLnN3aXBlcmlnaHQnO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2LCBldmVudFR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgfVxuICBNZEdlc3R1cmUuJGluamVjdCA9IFtcIiQkTWRHZXN0dXJlSGFuZGxlclwiLCBcIiQkckFGXCIsIFwiJHRpbWVvdXRcIl07XG5cbiAgLyoqXG4gICAqIE1kR2VzdHVyZUhhbmRsZXJcbiAgICogQSBHZXN0dXJlSGFuZGxlciBpcyBhbiBvYmplY3Qgd2hpY2ggaXMgYWJsZSB0byBkaXNwYXRjaCBjdXN0b20gZG9tIGV2ZW50c1xuICAgKiBiYXNlZCBvbiBuYXRpdmUgZG9tIHt0b3VjaCxwb2ludGVyLG1vdXNlfXtzdGFydCxtb3ZlLGVuZH0gZXZlbnRzLlxuICAgKlxuICAgKiBBIGdlc3R1cmUgd2lsbCBtYW5hZ2UgaXRzIGxpZmVjeWNsZSB0aHJvdWdoIHRoZSBzdGFydCxtb3ZlLGVuZCwgYW5kIGNhbmNlbFxuICAgKiBmdW5jdGlvbnMsIHdoaWNoIGFyZSBjYWxsZWQgYnkgbmF0aXZlIGRvbSBldmVudHMuXG4gICAqXG4gICAqIEEgZ2VzdHVyZSBoYXMgdGhlIGNvbmNlcHQgb2YgJ29wdGlvbnMnIChlZyBhIHN3aXBlJ3MgcmVxdWlyZWQgdmVsb2NpdHkpLCB3aGljaCBjYW4gYmVcbiAgICogb3ZlcnJpZGRlbiBieSBlbGVtZW50cyByZWdpc3RlcmluZyB0aHJvdWdoICRtZEdlc3R1cmUucmVnaXN0ZXIoKVxuICAgKi9cbiAgZnVuY3Rpb24gR2VzdHVyZUhhbmRsZXIgKG5hbWUpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuc3RhdGUgPSB7fTtcbiAgfVxuXG4gIGZ1bmN0aW9uIE1kR2VzdHVyZUhhbmRsZXIoKSB7XG4gICAgdmFyIGhhc0pRdWVyeSA9ICAodHlwZW9mIHdpbmRvdy5qUXVlcnkgIT09ICd1bmRlZmluZWQnKSAmJiAoYW5ndWxhci5lbGVtZW50ID09PSB3aW5kb3cualF1ZXJ5KTtcblxuICAgIEdlc3R1cmVIYW5kbGVyLnByb3RvdHlwZSA9IHtcbiAgICAgIG9wdGlvbnM6IHt9LFxuICAgICAgLy8galF1ZXJ5IGxpc3RlbmVycyBkb24ndCB3b3JrIHdpdGggY3VzdG9tIERPTUV2ZW50cywgc28gd2UgaGF2ZSB0byBkaXNwYXRjaCBldmVudHNcbiAgICAgIC8vIGRpZmZlcmVudGx5IHdoZW4galF1ZXJ5IGlzIGxvYWRlZFxuICAgICAgZGlzcGF0Y2hFdmVudDogaGFzSlF1ZXJ5ID8gIGpRdWVyeURpc3BhdGNoRXZlbnQgOiBuYXRpdmVEaXNwYXRjaEV2ZW50LFxuXG4gICAgICAvLyBUaGVzZSBhcmUgb3ZlcnJpZGRlbiBieSB0aGUgcmVnaXN0ZXJlZCBoYW5kbGVyXG4gICAgICBvblN0YXJ0OiBhbmd1bGFyLm5vb3AsXG4gICAgICBvbk1vdmU6IGFuZ3VsYXIubm9vcCxcbiAgICAgIG9uRW5kOiBhbmd1bGFyLm5vb3AsXG4gICAgICBvbkNhbmNlbDogYW5ndWxhci5ub29wLFxuXG4gICAgICAvLyBvblN0YXJ0IHNldHMgdXAgYSBuZXcgc3RhdGUgZm9yIHRoZSBoYW5kbGVyLCB3aGljaCBpbmNsdWRlcyBvcHRpb25zIGZyb20gdGhlXG4gICAgICAvLyBuZWFyZXN0IHJlZ2lzdGVyZWQgcGFyZW50IGVsZW1lbnQgb2YgZXYudGFyZ2V0LlxuICAgICAgc3RhcnQ6IGZ1bmN0aW9uIChldiwgcG9pbnRlcikge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5pc1J1bm5pbmcpIHJldHVybjtcbiAgICAgICAgdmFyIHBhcmVudFRhcmdldCA9IHRoaXMuZ2V0TmVhcmVzdFBhcmVudChldi50YXJnZXQpO1xuICAgICAgICAvLyBHZXQgdGhlIG9wdGlvbnMgZnJvbSB0aGUgbmVhcmVzdCByZWdpc3RlcmVkIHBhcmVudFxuICAgICAgICB2YXIgcGFyZW50VGFyZ2V0T3B0aW9ucyA9IHBhcmVudFRhcmdldCAmJiBwYXJlbnRUYXJnZXQuJG1kR2VzdHVyZVt0aGlzLm5hbWVdIHx8IHt9O1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgaXNSdW5uaW5nOiB0cnVlLFxuICAgICAgICAgIC8vIE92ZXJyaWRlIHRoZSBkZWZhdWx0IG9wdGlvbnMgd2l0aCB0aGUgbmVhcmVzdCByZWdpc3RlcmVkIHBhcmVudCdzIG9wdGlvbnNcbiAgICAgICAgICBvcHRpb25zOiBhbmd1bGFyLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCBwYXJlbnRUYXJnZXRPcHRpb25zKSxcbiAgICAgICAgICAvLyBQYXNzIGluIHRoZSByZWdpc3RlcmVkIHBhcmVudCBub2RlIHRvIHRoZSBzdGF0ZSBzbyB0aGUgb25TdGFydCBsaXN0ZW5lciBjYW4gdXNlXG4gICAgICAgICAgcmVnaXN0ZXJlZFBhcmVudDogcGFyZW50VGFyZ2V0XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25TdGFydChldiwgcG9pbnRlcik7XG4gICAgICB9LFxuICAgICAgbW92ZTogZnVuY3Rpb24gKGV2LCBwb2ludGVyKSB7XG4gICAgICAgIGlmICghdGhpcy5zdGF0ZS5pc1J1bm5pbmcpIHJldHVybjtcbiAgICAgICAgdGhpcy5vbk1vdmUoZXYsIHBvaW50ZXIpO1xuICAgICAgfSxcbiAgICAgIGVuZDogZnVuY3Rpb24gKGV2LCBwb2ludGVyKSB7XG4gICAgICAgIGlmICghdGhpcy5zdGF0ZS5pc1J1bm5pbmcpIHJldHVybjtcbiAgICAgICAgdGhpcy5vbkVuZChldiwgcG9pbnRlcik7XG4gICAgICAgIHRoaXMuc3RhdGUuaXNSdW5uaW5nID0gZmFsc2U7XG4gICAgICB9LFxuICAgICAgY2FuY2VsOiBmdW5jdGlvbiAoZXYsIHBvaW50ZXIpIHtcbiAgICAgICAgdGhpcy5vbkNhbmNlbChldiwgcG9pbnRlcik7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7fTtcbiAgICAgIH0sXG5cbiAgICAgIC8vIEZpbmQgYW5kIHJldHVybiB0aGUgbmVhcmVzdCBwYXJlbnQgZWxlbWVudCB0aGF0IGhhcyBiZWVuIHJlZ2lzdGVyZWQgdG9cbiAgICAgIC8vIGxpc3RlbiBmb3IgdGhpcyBoYW5kbGVyIHZpYSAkbWRHZXN0dXJlLnJlZ2lzdGVyKGVsZW1lbnQsICdoYW5kbGVyTmFtZScpLlxuICAgICAgZ2V0TmVhcmVzdFBhcmVudDogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBub2RlO1xuICAgICAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgICAgIGlmICgoY3VycmVudC4kbWRHZXN0dXJlIHx8IHt9KVt0aGlzLm5hbWVdKSB7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG5cbiAgICAgIC8vIENhbGxlZCBmcm9tICRtZEdlc3R1cmUucmVnaXN0ZXIgd2hlbiBhbiBlbGVtZW50IHJlaWdzdGVycyBpdHNlbGYgd2l0aCBhIGhhbmRsZXIuXG4gICAgICAvLyBTdG9yZSB0aGUgb3B0aW9ucyB0aGUgdXNlciBnYXZlIG9uIHRoZSBET01FbGVtZW50IGl0c2VsZi4gVGhlc2Ugb3B0aW9ucyB3aWxsXG4gICAgICAvLyBiZSByZXRyaWV2ZWQgd2l0aCBnZXROZWFyZXN0UGFyZW50IHdoZW4gdGhlIGhhbmRsZXIgc3RhcnRzLlxuICAgICAgcmVnaXN0ZXJFbGVtZW50OiBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGVsZW1lbnRbMF0uJG1kR2VzdHVyZSA9IGVsZW1lbnRbMF0uJG1kR2VzdHVyZSB8fCB7fTtcbiAgICAgICAgZWxlbWVudFswXS4kbWRHZXN0dXJlW3RoaXMubmFtZV0gPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBlbGVtZW50Lm9uKCckZGVzdHJveScsIG9uRGVzdHJveSk7XG5cbiAgICAgICAgcmV0dXJuIG9uRGVzdHJveTtcblxuICAgICAgICBmdW5jdGlvbiBvbkRlc3Ryb3koKSB7XG4gICAgICAgICAgZGVsZXRlIGVsZW1lbnRbMF0uJG1kR2VzdHVyZVtzZWxmLm5hbWVdO1xuICAgICAgICAgIGVsZW1lbnQub2ZmKCckZGVzdHJveScsIG9uRGVzdHJveSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIEdlc3R1cmVIYW5kbGVyO1xuXG4gICAgLypcbiAgICAgKiBEaXNwYXRjaCBhbiBldmVudCB3aXRoIGpRdWVyeVxuICAgICAqIFRPRE86IE1ha2Ugc3VyZSB0aGlzIHNlbmRzIGJ1YmJsaW5nIGV2ZW50c1xuICAgICAqXG4gICAgICogQHBhcmFtIHNyY0V2ZW50IHRoZSBvcmlnaW5hbCBET00gdG91Y2ggZXZlbnQgdGhhdCBzdGFydGVkIHRoaXMuXG4gICAgICogQHBhcmFtIGV2ZW50VHlwZSB0aGUgbmFtZSBvZiB0aGUgY3VzdG9tIGV2ZW50IHRvIHNlbmQgKGVnICdjbGljaycgb3IgJyRtZC5kcmFnJylcbiAgICAgKiBAcGFyYW0gZXZlbnRQb2ludGVyIHRoZSBwb2ludGVyIG9iamVjdCB0aGF0IG1hdGNoZXMgdGhpcyBldmVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBqUXVlcnlEaXNwYXRjaEV2ZW50KHNyY0V2ZW50LCBldmVudFR5cGUsIGV2ZW50UG9pbnRlcikge1xuICAgICAgZXZlbnRQb2ludGVyID0gZXZlbnRQb2ludGVyIHx8IHBvaW50ZXI7XG4gICAgICB2YXIgZXZlbnRPYmogPSBuZXcgYW5ndWxhci5lbGVtZW50LkV2ZW50KGV2ZW50VHlwZSk7XG5cbiAgICAgIGV2ZW50T2JqLiRtYXRlcmlhbCA9IHRydWU7XG4gICAgICBldmVudE9iai5wb2ludGVyID0gZXZlbnRQb2ludGVyO1xuICAgICAgZXZlbnRPYmouc3JjRXZlbnQgPSBzcmNFdmVudDtcblxuICAgICAgYW5ndWxhci5leHRlbmQoZXZlbnRPYmosIHtcbiAgICAgICAgY2xpZW50WDogZXZlbnRQb2ludGVyLngsXG4gICAgICAgIGNsaWVudFk6IGV2ZW50UG9pbnRlci55LFxuICAgICAgICBzY3JlZW5YOiBldmVudFBvaW50ZXIueCxcbiAgICAgICAgc2NyZWVuWTogZXZlbnRQb2ludGVyLnksXG4gICAgICAgIHBhZ2VYOiBldmVudFBvaW50ZXIueCxcbiAgICAgICAgcGFnZVk6IGV2ZW50UG9pbnRlci55LFxuICAgICAgICBjdHJsS2V5OiBzcmNFdmVudC5jdHJsS2V5LFxuICAgICAgICBhbHRLZXk6IHNyY0V2ZW50LmFsdEtleSxcbiAgICAgICAgc2hpZnRLZXk6IHNyY0V2ZW50LnNoaWZ0S2V5LFxuICAgICAgICBtZXRhS2V5OiBzcmNFdmVudC5tZXRhS2V5XG4gICAgICB9KTtcbiAgICAgIGFuZ3VsYXIuZWxlbWVudChldmVudFBvaW50ZXIudGFyZ2V0KS50cmlnZ2VyKGV2ZW50T2JqKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIE5PVEU6IG5hdGl2ZURpc3BhdGNoRXZlbnQgaXMgdmVyeSBwZXJmb3JtYW5jZSBzZW5zaXRpdmUuXG4gICAgICogQHBhcmFtIHNyY0V2ZW50IHRoZSBvcmlnaW5hbCBET00gdG91Y2ggZXZlbnQgdGhhdCBzdGFydGVkIHRoaXMuXG4gICAgICogQHBhcmFtIGV2ZW50VHlwZSB0aGUgbmFtZSBvZiB0aGUgY3VzdG9tIGV2ZW50IHRvIHNlbmQgKGVnICdjbGljaycgb3IgJyRtZC5kcmFnJylcbiAgICAgKiBAcGFyYW0gZXZlbnRQb2ludGVyIHRoZSBwb2ludGVyIG9iamVjdCB0aGF0IG1hdGNoZXMgdGhpcyBldmVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuYXRpdmVEaXNwYXRjaEV2ZW50KHNyY0V2ZW50LCBldmVudFR5cGUsIGV2ZW50UG9pbnRlcikge1xuICAgICAgZXZlbnRQb2ludGVyID0gZXZlbnRQb2ludGVyIHx8IHBvaW50ZXI7XG4gICAgICB2YXIgZXZlbnRPYmo7XG5cbiAgICAgIGlmIChldmVudFR5cGUgPT09ICdjbGljaycpIHtcbiAgICAgICAgZXZlbnRPYmogPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudHMnKTtcbiAgICAgICAgZXZlbnRPYmouaW5pdE1vdXNlRXZlbnQoXG4gICAgICAgICAgJ2NsaWNrJywgdHJ1ZSwgdHJ1ZSwgd2luZG93LCBzcmNFdmVudC5kZXRhaWwsXG4gICAgICAgICAgZXZlbnRQb2ludGVyLngsIGV2ZW50UG9pbnRlci55LCBldmVudFBvaW50ZXIueCwgZXZlbnRQb2ludGVyLnksXG4gICAgICAgICAgc3JjRXZlbnQuY3RybEtleSwgc3JjRXZlbnQuYWx0S2V5LCBzcmNFdmVudC5zaGlmdEtleSwgc3JjRXZlbnQubWV0YUtleSxcbiAgICAgICAgICBzcmNFdmVudC5idXR0b24sIHNyY0V2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgbnVsbFxuICAgICAgICApO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBldmVudE9iaiA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgICAgICBldmVudE9iai5pbml0Q3VzdG9tRXZlbnQoZXZlbnRUeXBlLCB0cnVlLCB0cnVlLCB7fSk7XG4gICAgICB9XG4gICAgICBldmVudE9iai4kbWF0ZXJpYWwgPSB0cnVlO1xuICAgICAgZXZlbnRPYmoucG9pbnRlciA9IGV2ZW50UG9pbnRlcjtcbiAgICAgIGV2ZW50T2JqLnNyY0V2ZW50ID0gc3JjRXZlbnQ7XG4gICAgICBldmVudFBvaW50ZXIudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZXZlbnRPYmopO1xuICAgIH1cblxuICB9XG5cbiAgLyoqXG4gICAqIEF0dGFjaCBHZXN0dXJlczogaG9vayBkb2N1bWVudCBhbmQgY2hlY2sgc2hvdWxkSGlqYWNrIGNsaWNrc1xuICAgKiBAbmdJbmplY3RcbiAgICovXG4gIGZ1bmN0aW9uIGF0dGFjaFRvRG9jdW1lbnQoICRtZEdlc3R1cmUsICQkTWRHZXN0dXJlSGFuZGxlciApIHtcblxuICAgIC8vIFBvbHlmaWxsIGRvY3VtZW50LmNvbnRhaW5zIGZvciBJRTExLlxuICAgIC8vIFRPRE86IG1vdmUgdG8gdXRpbFxuICAgIGRvY3VtZW50LmNvbnRhaW5zIHx8IChkb2N1bWVudC5jb250YWlucyA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuYm9keS5jb250YWlucyhub2RlKTtcbiAgICB9KTtcblxuICAgIGlmICghaXNJbml0aWFsaXplZCAmJiAkbWRHZXN0dXJlLmlzSGlqYWNraW5nQ2xpY2tzICkge1xuICAgICAgLypcbiAgICAgICAqIElmIGhpamFjayBjbGlja3MgaXMgdHJ1ZSwgd2UgcHJldmVudERlZmF1bHQgYW55IGNsaWNrIHRoYXQgd2Fzbid0XG4gICAgICAgKiBzZW50IGJ5IG5nTWF0ZXJpYWwuIFRoaXMgaXMgYmVjYXVzZSBvbiBvbGRlciBBbmRyb2lkICYgaU9TLCBhIGZhbHNlLCBvciAnZ2hvc3QnLFxuICAgICAgICogY2xpY2sgZXZlbnQgd2lsbCBiZSBzZW50IH40MDBtcyBhZnRlciBhIHRvdWNoZW5kIGV2ZW50IGhhcHBlbnMuXG4gICAgICAgKiBUaGUgb25seSB3YXkgdG8ga25vdyBpZiB0aGlzIGNsaWNrIGlzIHJlYWwgaXMgdG8gcHJldmVudCBhbnkgbm9ybWFsXG4gICAgICAgKiBjbGljayBldmVudHMsIGFuZCBhZGQgYSBmbGFnIHRvIGV2ZW50cyBzZW50IGJ5IG1hdGVyaWFsIHNvIHdlIGtub3cgbm90IHRvIHByZXZlbnQgdGhvc2UuXG4gICAgICAgKiBcbiAgICAgICAqIFR3byBleGNlcHRpb25zIHRvIGNsaWNrIGV2ZW50cyB0aGF0IHNob3VsZCBiZSBwcmV2ZW50ZWQgYXJlOlxuICAgICAgICogIC0gY2xpY2sgZXZlbnRzIHNlbnQgYnkgdGhlIGtleWJvYXJkIChlZyBmb3JtIHN1Ym1pdClcbiAgICAgICAqICAtIGV2ZW50cyB0aGF0IG9yaWdpbmF0ZSBmcm9tIGFuIElvbmljIGFwcFxuICAgICAgICovXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIGNsaWNrSGlqYWNrZXIoZXYpIHtcbiAgICAgICAgdmFyIGlzS2V5Q2xpY2sgPSBldi5jbGllbnRYID09PSAwICYmIGV2LmNsaWVudFkgPT09IDA7XG4gICAgICAgIGlmICghaXNLZXlDbGljayAmJiAhZXYuJG1hdGVyaWFsICYmICFldi5pc0lvbmljVGFwKSB7XG4gICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfSwgdHJ1ZSk7XG4gICAgICBcbiAgICAgIGlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIExpc3RlbiB0byBhbGwgZXZlbnRzIHRvIGNvdmVyIGFsbCBwbGF0Zm9ybXMuXG4gICAgdmFyIFNUQVJUX0VWRU5UUyA9ICdtb3VzZWRvd24gdG91Y2hzdGFydCBwb2ludGVyZG93bic7XG4gICAgdmFyIE1PVkVfRVZFTlRTID0gJ21vdXNlbW92ZSB0b3VjaG1vdmUgcG9pbnRlcm1vdmUnO1xuICAgIHZhciBFTkRfRVZFTlRTID0gJ21vdXNldXAgbW91c2VsZWF2ZSB0b3VjaGVuZCB0b3VjaGNhbmNlbCBwb2ludGVydXAgcG9pbnRlcmNhbmNlbCc7XG5cbiAgICBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpXG4gICAgICAub24oU1RBUlRfRVZFTlRTLCBnZXN0dXJlU3RhcnQpXG4gICAgICAub24oTU9WRV9FVkVOVFMsIGdlc3R1cmVNb3ZlKVxuICAgICAgLm9uKEVORF9FVkVOVFMsIGdlc3R1cmVFbmQpXG4gICAgICAvLyBGb3IgdGVzdGluZ1xuICAgICAgLm9uKCckJG1kR2VzdHVyZVJlc2V0JywgZnVuY3Rpb24gZ2VzdHVyZUNsZWFyQ2FjaGUgKCkge1xuICAgICAgICBsYXN0UG9pbnRlciA9IHBvaW50ZXIgPSBudWxsO1xuICAgICAgfSk7XG5cbiAgICAvKlxuICAgICAqIFdoZW4gYSBET00gZXZlbnQgaGFwcGVucywgcnVuIGFsbCByZWdpc3RlcmVkIGdlc3R1cmUgaGFuZGxlcnMnIGxpZmVjeWNsZVxuICAgICAqIG1ldGhvZHMgd2hpY2ggbWF0Y2ggdGhlIERPTSBldmVudC5cbiAgICAgKiBFZyB3aGVuIGEgJ3RvdWNoc3RhcnQnIGV2ZW50IGhhcHBlbnMsIHJ1bkhhbmRsZXJzKCdzdGFydCcpIHdpbGwgY2FsbCBhbmRcbiAgICAgKiBydW4gYGhhbmRsZXIuY2FuY2VsKClgIGFuZCBgaGFuZGxlci5zdGFydCgpYCBvbiBhbGwgcmVnaXN0ZXJlZCBoYW5kbGVycy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBydW5IYW5kbGVycyhoYW5kbGVyRXZlbnQsIGV2ZW50KSB7XG4gICAgICB2YXIgaGFuZGxlcjtcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gSEFORExFUlMpIHtcbiAgICAgICAgaGFuZGxlciA9IEhBTkRMRVJTW25hbWVdO1xuICAgICAgICBpZiggaGFuZGxlciBpbnN0YW5jZW9mICQkTWRHZXN0dXJlSGFuZGxlciApIHtcblxuICAgICAgICAgIGlmIChoYW5kbGVyRXZlbnQgPT09ICdzdGFydCcpIHtcbiAgICAgICAgICAgIC8vIFJ1biBjYW5jZWwgdG8gcmVzZXQgYW55IGhhbmRsZXJzJyBzdGF0ZVxuICAgICAgICAgICAgaGFuZGxlci5jYW5jZWwoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaGFuZGxlcltoYW5kbGVyRXZlbnRdKGV2ZW50LCBwb2ludGVyKTtcblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBnZXN0dXJlU3RhcnQgdmV0cyBpZiBhIHN0YXJ0IGV2ZW50IGlzIGxlZ2l0aW1hdGUgKGFuZCBub3QgcGFydCBvZiBhICdnaG9zdCBjbGljaycgZnJvbSBpT1MvQW5kcm9pZClcbiAgICAgKiBJZiBpdCBpcyBsZWdpdGltYXRlLCB3ZSBpbml0aWF0ZSB0aGUgcG9pbnRlciBzdGF0ZSBhbmQgbWFyayB0aGUgY3VycmVudCBwb2ludGVyJ3MgdHlwZVxuICAgICAqIEZvciBleGFtcGxlLCBmb3IgYSB0b3VjaHN0YXJ0IGV2ZW50LCBtYXJrIHRoZSBjdXJyZW50IHBvaW50ZXIgYXMgYSAndG91Y2gnIHBvaW50ZXIsIHNvIG1vdXNlIGV2ZW50c1xuICAgICAqIHdvbid0IGVmZmVjdCBpdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXN0dXJlU3RhcnQoZXYpIHtcbiAgICAgIC8vIElmIHdlJ3JlIGFscmVhZHkgdG91Y2hlZCBkb3duLCBhYm9ydFxuICAgICAgaWYgKHBvaW50ZXIpIHJldHVybjtcblxuICAgICAgdmFyIG5vdyA9ICtEYXRlLm5vdygpO1xuXG4gICAgICAvLyBpT1MgJiBvbGQgYW5kcm9pZCBidWc6IGFmdGVyIGEgdG91Y2ggZXZlbnQsIGEgY2xpY2sgZXZlbnQgaXMgc2VudCAzNTAgbXMgbGF0ZXIuXG4gICAgICAvLyBJZiA8NDAwbXMgaGF2ZSBwYXNzZWQsIGRvbid0IGFsbG93IGFuIGV2ZW50IG9mIGEgZGlmZmVyZW50IHR5cGUgdGhhbiB0aGUgcHJldmlvdXMgZXZlbnRcbiAgICAgIGlmIChsYXN0UG9pbnRlciAmJiAhdHlwZXNNYXRjaChldiwgbGFzdFBvaW50ZXIpICYmIChub3cgLSBsYXN0UG9pbnRlci5lbmRUaW1lIDwgMTUwMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBwb2ludGVyID0gbWFrZVN0YXJ0UG9pbnRlcihldik7XG5cbiAgICAgIHJ1bkhhbmRsZXJzKCdzdGFydCcsIGV2KTtcbiAgICB9XG4gICAgLypcbiAgICAgKiBJZiBhIG1vdmUgZXZlbnQgaGFwcGVucyBvZiB0aGUgcmlnaHQgdHlwZSwgdXBkYXRlIHRoZSBwb2ludGVyIGFuZCBydW4gYWxsIHRoZSBtb3ZlIGhhbmRsZXJzLlxuICAgICAqIFwib2YgdGhlIHJpZ2h0IHR5cGVcIjogaWYgYSBtb3VzZW1vdmUgaGFwcGVucyBidXQgb3VyIHBvaW50ZXIgc3RhcnRlZCB3aXRoIGEgdG91Y2ggZXZlbnQsIGRvIG5vdGhpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2VzdHVyZU1vdmUoZXYpIHtcbiAgICAgIGlmICghcG9pbnRlciB8fCAhdHlwZXNNYXRjaChldiwgcG9pbnRlcikpIHJldHVybjtcblxuICAgICAgdXBkYXRlUG9pbnRlclN0YXRlKGV2LCBwb2ludGVyKTtcbiAgICAgIHJ1bkhhbmRsZXJzKCdtb3ZlJywgZXYpO1xuICAgIH1cbiAgICAvKlxuICAgICAqIElmIGFuIGVuZCBldmVudCBoYXBwZW5zIG9mIHRoZSByaWdodCB0eXBlLCB1cGRhdGUgdGhlIHBvaW50ZXIsIHJ1biBlbmRIYW5kbGVycywgYW5kIHNhdmUgdGhlIHBvaW50ZXIgYXMgJ2xhc3RQb2ludGVyJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdlc3R1cmVFbmQoZXYpIHtcbiAgICAgIGlmICghcG9pbnRlciB8fCAhdHlwZXNNYXRjaChldiwgcG9pbnRlcikpIHJldHVybjtcblxuICAgICAgdXBkYXRlUG9pbnRlclN0YXRlKGV2LCBwb2ludGVyKTtcbiAgICAgIHBvaW50ZXIuZW5kVGltZSA9ICtEYXRlLm5vdygpO1xuXG4gICAgICBydW5IYW5kbGVycygnZW5kJywgZXYpO1xuXG4gICAgICBsYXN0UG9pbnRlciA9IHBvaW50ZXI7XG4gICAgICBwb2ludGVyID0gbnVsbDtcbiAgICB9XG5cbiAgfVxuICBhdHRhY2hUb0RvY3VtZW50LiRpbmplY3QgPSBbXCIkbWRHZXN0dXJlXCIsIFwiJCRNZEdlc3R1cmVIYW5kbGVyXCJdO1xuXG4gIC8vICoqKioqKioqKioqKioqKioqKioqXG4gIC8vIE1vZHVsZSBGdW5jdGlvbnNcbiAgLy8gKioqKioqKioqKioqKioqKioqKipcblxuICAvKlxuICAgKiBJbml0aWF0ZSB0aGUgcG9pbnRlci4geCwgeSwgYW5kIHRoZSBwb2ludGVyJ3MgdHlwZS5cbiAgICovXG4gIGZ1bmN0aW9uIG1ha2VTdGFydFBvaW50ZXIoZXYpIHtcbiAgICB2YXIgcG9pbnQgPSBnZXRFdmVudFBvaW50KGV2KTtcbiAgICB2YXIgc3RhcnRQb2ludGVyID0ge1xuICAgICAgc3RhcnRUaW1lOiArRGF0ZS5ub3coKSxcbiAgICAgIHRhcmdldDogZXYudGFyZ2V0LFxuICAgICAgLy8gJ3AnIGZvciBwb2ludGVyIGV2ZW50cywgJ20nIGZvciBtb3VzZSwgJ3QnIGZvciB0b3VjaFxuICAgICAgdHlwZTogZXYudHlwZS5jaGFyQXQoMClcbiAgICB9O1xuICAgIHN0YXJ0UG9pbnRlci5zdGFydFggPSBzdGFydFBvaW50ZXIueCA9IHBvaW50LnBhZ2VYO1xuICAgIHN0YXJ0UG9pbnRlci5zdGFydFkgPSBzdGFydFBvaW50ZXIueSA9IHBvaW50LnBhZ2VZO1xuICAgIHJldHVybiBzdGFydFBvaW50ZXI7XG4gIH1cblxuICAvKlxuICAgKiByZXR1cm4gd2hldGhlciB0aGUgcG9pbnRlcidzIHR5cGUgbWF0Y2hlcyB0aGUgZXZlbnQncyB0eXBlLlxuICAgKiBFZyBpZiBhIHRvdWNoIGV2ZW50IGhhcHBlbnMgYnV0IHRoZSBwb2ludGVyIGhhcyBhIG1vdXNlIHR5cGUsIHJldHVybiBmYWxzZS5cbiAgICovXG4gIGZ1bmN0aW9uIHR5cGVzTWF0Y2goZXYsIHBvaW50ZXIpIHtcbiAgICByZXR1cm4gZXYgJiYgcG9pbnRlciAmJiBldi50eXBlLmNoYXJBdCgwKSA9PT0gcG9pbnRlci50eXBlO1xuICB9XG5cbiAgLypcbiAgICogVXBkYXRlIHRoZSBnaXZlbiBwb2ludGVyIGJhc2VkIHVwb24gdGhlIGdpdmVuIERPTUV2ZW50LlxuICAgKiBEaXN0YW5jZSwgdmVsb2NpdHksIGRpcmVjdGlvbiwgZHVyYXRpb24sIGV0Y1xuICAgKi9cbiAgZnVuY3Rpb24gdXBkYXRlUG9pbnRlclN0YXRlKGV2LCBwb2ludGVyKSB7XG4gICAgdmFyIHBvaW50ID0gZ2V0RXZlbnRQb2ludChldik7XG4gICAgdmFyIHggPSBwb2ludGVyLnggPSBwb2ludC5wYWdlWDtcbiAgICB2YXIgeSA9IHBvaW50ZXIueSA9IHBvaW50LnBhZ2VZO1xuXG4gICAgcG9pbnRlci5kaXN0YW5jZVggPSB4IC0gcG9pbnRlci5zdGFydFg7XG4gICAgcG9pbnRlci5kaXN0YW5jZVkgPSB5IC0gcG9pbnRlci5zdGFydFk7XG4gICAgcG9pbnRlci5kaXN0YW5jZSA9IE1hdGguc3FydChcbiAgICAgIHBvaW50ZXIuZGlzdGFuY2VYICogcG9pbnRlci5kaXN0YW5jZVggKyBwb2ludGVyLmRpc3RhbmNlWSAqIHBvaW50ZXIuZGlzdGFuY2VZXG4gICAgKTtcblxuICAgIHBvaW50ZXIuZGlyZWN0aW9uWCA9IHBvaW50ZXIuZGlzdGFuY2VYID4gMCA/ICdyaWdodCcgOiBwb2ludGVyLmRpc3RhbmNlWCA8IDAgPyAnbGVmdCcgOiAnJztcbiAgICBwb2ludGVyLmRpcmVjdGlvblkgPSBwb2ludGVyLmRpc3RhbmNlWSA+IDAgPyAndXAnIDogcG9pbnRlci5kaXN0YW5jZVkgPCAwID8gJ2Rvd24nIDogJyc7XG5cbiAgICBwb2ludGVyLmR1cmF0aW9uID0gK0RhdGUubm93KCkgLSBwb2ludGVyLnN0YXJ0VGltZTtcbiAgICBwb2ludGVyLnZlbG9jaXR5WCA9IHBvaW50ZXIuZGlzdGFuY2VYIC8gcG9pbnRlci5kdXJhdGlvbjtcbiAgICBwb2ludGVyLnZlbG9jaXR5WSA9IHBvaW50ZXIuZGlzdGFuY2VZIC8gcG9pbnRlci5kdXJhdGlvbjtcbiAgfVxuXG4gIC8qXG4gICAqIE5vcm1hbGl6ZSB0aGUgcG9pbnQgd2hlcmUgdGhlIERPTSBldmVudCBoYXBwZW5lZCB3aGV0aGVyIGl0J3MgdG91Y2ggb3IgbW91c2UuXG4gICAqIEByZXR1cm5zIHBvaW50IGV2ZW50IG9iaiB3aXRoIHBhZ2VYIGFuZCBwYWdlWSBvbiBpdC5cbiAgICovXG4gIGZ1bmN0aW9uIGdldEV2ZW50UG9pbnQoZXYpIHtcbiAgICBldiA9IGV2Lm9yaWdpbmFsRXZlbnQgfHwgZXY7IC8vIHN1cHBvcnQgalF1ZXJ5IGV2ZW50c1xuICAgIHJldHVybiAoZXYudG91Y2hlcyAmJiBldi50b3VjaGVzWzBdKSB8fFxuICAgICAgKGV2LmNoYW5nZWRUb3VjaGVzICYmIGV2LmNoYW5nZWRUb3VjaGVzWzBdKSB8fFxuICAgICAgZXY7XG4gIH1cblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb3JlJylcbiAgLnByb3ZpZGVyKCckJGludGVyaW1FbGVtZW50JywgSW50ZXJpbUVsZW1lbnRQcm92aWRlcik7XG5cbi8qXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJCRpbnRlcmltRWxlbWVudFxuICogQG1vZHVsZSBtYXRlcmlhbC5jb3JlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRmFjdG9yeSB0aGF0IGNvbnRydWN0cyBgJCRpbnRlcmltRWxlbWVudC4kc2VydmljZWAgc2VydmljZXMuXG4gKiBVc2VkIGludGVybmFsbHkgaW4gbWF0ZXJpYWwgZGVzaWduIGZvciBlbGVtZW50cyB0aGF0IGFwcGVhciBvbiBzY3JlZW4gdGVtcG9yYXJpbHkuXG4gKiBUaGUgc2VydmljZSBwcm92aWRlcyBhIHByb21pc2UtbGlrZSBBUEkgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIHRlbXBvcmFyeVxuICogZWxlbWVudHMuXG4gKlxuICogYGBganNcbiAqIGFwcC5zZXJ2aWNlKCckbWRUb2FzdCcsIGZ1bmN0aW9uKCQkaW50ZXJpbUVsZW1lbnQpIHtcbiAqICAgdmFyICRtZFRvYXN0ID0gJCRpbnRlcmltRWxlbWVudCh0b2FzdERlZmF1bHRPcHRpb25zKTtcbiAqICAgcmV0dXJuICRtZFRvYXN0O1xuICogfSk7XG4gKiBgYGBcbiAqIEBwYXJhbSB7b2JqZWN0PX0gZGVmYXVsdE9wdGlvbnMgT3B0aW9ucyB1c2VkIGJ5IGRlZmF1bHQgZm9yIHRoZSBgc2hvd2AgbWV0aG9kIG9uIHRoZSBzZXJ2aWNlLlxuICpcbiAqIEByZXR1cm5zIHskJGludGVyaW1FbGVtZW50LiRzZXJ2aWNlfVxuICpcbiAqL1xuXG5mdW5jdGlvbiBJbnRlcmltRWxlbWVudFByb3ZpZGVyKCkge1xuICBjcmVhdGVJbnRlcmltRWxlbWVudFByb3ZpZGVyLiRnZXQgPSBJbnRlcmltRWxlbWVudEZhY3Rvcnk7XG4gIEludGVyaW1FbGVtZW50RmFjdG9yeS4kaW5qZWN0ID0gW1wiJGRvY3VtZW50XCIsIFwiJHFcIiwgXCIkcm9vdFNjb3BlXCIsIFwiJHRpbWVvdXRcIiwgXCIkcm9vdEVsZW1lbnRcIiwgXCIkYW5pbWF0ZVwiLCBcIiRpbnRlcnBvbGF0ZVwiLCBcIiRtZENvbXBpbGVyXCIsIFwiJG1kVGhlbWluZ1wiXTtcbiAgcmV0dXJuIGNyZWF0ZUludGVyaW1FbGVtZW50UHJvdmlkZXI7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgcHJvdmlkZXIgd2hpY2ggYWxsb3dzIGNvbmZpZ3VyYXRpb24gb2YgYSBuZXcgaW50ZXJpbUVsZW1lbnRcbiAgICogc2VydmljZS4gQWxsb3dzIGNvbmZpZ3VyYXRpb24gb2YgZGVmYXVsdCBvcHRpb25zICYgbWV0aG9kcyBmb3Igb3B0aW9ucyxcbiAgICogYXMgd2VsbCBhcyBjb25maWd1cmF0aW9uIG9mICdwcmVzZXQnIG1ldGhvZHMgKGVnIGRpYWxvZy5iYXNpYygpOiBiYXNpYyBpcyBhIHByZXNldCBtZXRob2QpXG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGVJbnRlcmltRWxlbWVudFByb3ZpZGVyKGludGVyaW1GYWN0b3J5TmFtZSkge1xuICAgIHZhciBFWFBPU0VEX01FVEhPRFMgPSBbJ29uSGlkZScsICdvblNob3cnLCAnb25SZW1vdmUnXTtcblxuICAgIHZhciBjdXN0b21NZXRob2RzID0ge307XG4gICAgdmFyIHByb3ZpZGVyQ29uZmlnID0ge1xuICAgICAgcHJlc2V0czoge31cbiAgICB9O1xuXG4gICAgdmFyIHByb3ZpZGVyID0ge1xuICAgICAgc2V0RGVmYXVsdHM6IHNldERlZmF1bHRzLFxuICAgICAgYWRkUHJlc2V0OiBhZGRQcmVzZXQsXG4gICAgICBhZGRNZXRob2Q6IGFkZE1ldGhvZCxcbiAgICAgICRnZXQ6IGZhY3RvcnlcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogYWxsIGludGVyaW0gZWxlbWVudHMgd2lsbCBjb21lIHdpdGggdGhlICdidWlsZCcgcHJlc2V0XG4gICAgICovXG4gICAgcHJvdmlkZXIuYWRkUHJlc2V0KCdidWlsZCcsIHtcbiAgICAgIG1ldGhvZHM6IFsnY29udHJvbGxlcicsICdjb250cm9sbGVyQXMnLCAncmVzb2x2ZScsXG4gICAgICAgICd0ZW1wbGF0ZScsICd0ZW1wbGF0ZVVybCcsICd0aGVtYWJsZScsICd0cmFuc2Zvcm1UZW1wbGF0ZScsICdwYXJlbnQnXVxuICAgIH0pO1xuXG4gICAgZmFjdG9yeS4kaW5qZWN0ID0gW1wiJCRpbnRlcmltRWxlbWVudFwiLCBcIiRhbmltYXRlXCIsIFwiJGluamVjdG9yXCJdO1xuICAgIHJldHVybiBwcm92aWRlcjtcblxuICAgIC8qKlxuICAgICAqIFNhdmUgdGhlIGNvbmZpZ3VyZWQgZGVmYXVsdHMgdG8gYmUgdXNlZCB3aGVuIHRoZSBmYWN0b3J5IGlzIGluc3RhbnRpYXRlZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldERlZmF1bHRzKGRlZmluaXRpb24pIHtcbiAgICAgIHByb3ZpZGVyQ29uZmlnLm9wdGlvbnNGYWN0b3J5ID0gZGVmaW5pdGlvbi5vcHRpb25zO1xuICAgICAgcHJvdmlkZXJDb25maWcubWV0aG9kcyA9IChkZWZpbml0aW9uLm1ldGhvZHMgfHwgW10pLmNvbmNhdChFWFBPU0VEX01FVEhPRFMpO1xuICAgICAgcmV0dXJuIHByb3ZpZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIG1ldGhvZCB0byB0aGUgZmFjdG9yeSB0aGF0IGlzbid0IHNwZWNpZmljIHRvIGFueSBpbnRlcmltIGVsZW1lbnQgb3BlcmF0aW9uc1xuICAgICAqL1xuXG4gICAgZnVuY3Rpb24gYWRkTWV0aG9kKG5hbWUsIGZuKSB7XG4gICAgICBjdXN0b21NZXRob2RzW25hbWVdID0gZm47XG4gICAgICByZXR1cm4gcHJvdmlkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2F2ZSB0aGUgY29uZmlndXJlZCBwcmVzZXQgdG8gYmUgdXNlZCB3aGVuIHRoZSBmYWN0b3J5IGlzIGluc3RhbnRpYXRlZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZFByZXNldChuYW1lLCBkZWZpbml0aW9uKSB7XG4gICAgICBkZWZpbml0aW9uID0gZGVmaW5pdGlvbiB8fCB7fTtcbiAgICAgIGRlZmluaXRpb24ubWV0aG9kcyA9IGRlZmluaXRpb24ubWV0aG9kcyB8fCBbXTtcbiAgICAgIGRlZmluaXRpb24ub3B0aW9ucyA9IGRlZmluaXRpb24ub3B0aW9ucyB8fCBmdW5jdGlvbigpIHsgcmV0dXJuIHt9OyB9O1xuXG4gICAgICBpZiAoL15jYW5jZWx8aGlkZXxzaG93JC8udGVzdChuYW1lKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcmVzZXQgJ1wiICsgbmFtZSArIFwiJyBpbiBcIiArIGludGVyaW1GYWN0b3J5TmFtZSArIFwiIGlzIHJlc2VydmVkIVwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbml0aW9uLm1ldGhvZHMuaW5kZXhPZignX29wdGlvbnMnKSA+IC0xKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCAnX29wdGlvbnMnIGluIFwiICsgaW50ZXJpbUZhY3RvcnlOYW1lICsgXCIgaXMgcmVzZXJ2ZWQhXCIpO1xuICAgICAgfVxuICAgICAgcHJvdmlkZXJDb25maWcucHJlc2V0c1tuYW1lXSA9IHtcbiAgICAgICAgbWV0aG9kczogZGVmaW5pdGlvbi5tZXRob2RzLmNvbmNhdChFWFBPU0VEX01FVEhPRFMpLFxuICAgICAgICBvcHRpb25zRmFjdG9yeTogZGVmaW5pdGlvbi5vcHRpb25zLFxuICAgICAgICBhcmdPcHRpb246IGRlZmluaXRpb24uYXJnT3B0aW9uXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHByb3ZpZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGZhY3RvcnkgdGhhdCBoYXMgdGhlIGdpdmVuIG1ldGhvZHMgJiBkZWZhdWx0cyBpbXBsZW1lbnRpbmcgaW50ZXJpbUVsZW1lbnRcbiAgICAgKi9cbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBmYWN0b3J5KCQkaW50ZXJpbUVsZW1lbnQsICRhbmltYXRlLCAkaW5qZWN0b3IpIHtcbiAgICAgIHZhciBkZWZhdWx0TWV0aG9kcztcbiAgICAgIHZhciBkZWZhdWx0T3B0aW9ucztcbiAgICAgIHZhciBpbnRlcmltRWxlbWVudFNlcnZpY2UgPSAkJGludGVyaW1FbGVtZW50KCk7XG5cbiAgICAgIC8qXG4gICAgICAgKiBwdWJsaWNTZXJ2aWNlIGlzIHdoYXQgdGhlIGRldmVsb3BlciB3aWxsIGJlIHVzaW5nLlxuICAgICAgICogSXQgaGFzIG1ldGhvZHMgaGlkZSgpLCBjYW5jZWwoKSwgc2hvdygpLCBidWlsZCgpLCBhbmQgYW55IG90aGVyXG4gICAgICAgKiBwcmVzZXRzIHdoaWNoIHdlcmUgc2V0IGR1cmluZyB0aGUgY29uZmlnIHBoYXNlLlxuICAgICAgICovXG4gICAgICB2YXIgcHVibGljU2VydmljZSA9IHtcbiAgICAgICAgaGlkZTogaW50ZXJpbUVsZW1lbnRTZXJ2aWNlLmhpZGUsXG4gICAgICAgIGNhbmNlbDogaW50ZXJpbUVsZW1lbnRTZXJ2aWNlLmNhbmNlbCxcbiAgICAgICAgc2hvdzogc2hvd0ludGVyaW1FbGVtZW50XG4gICAgICB9O1xuXG4gICAgICBkZWZhdWx0TWV0aG9kcyA9IHByb3ZpZGVyQ29uZmlnLm1ldGhvZHMgfHwgW107XG4gICAgICAvLyBUaGlzIG11c3QgYmUgaW52b2tlZCBhZnRlciB0aGUgcHVibGljU2VydmljZSBpcyBpbml0aWFsaXplZFxuICAgICAgZGVmYXVsdE9wdGlvbnMgPSBpbnZva2VGYWN0b3J5KHByb3ZpZGVyQ29uZmlnLm9wdGlvbnNGYWN0b3J5LCB7fSk7XG5cbiAgICAgIC8vIENvcHkgb3ZlciB0aGUgc2ltcGxlIGN1c3RvbSBtZXRob2RzXG4gICAgICBhbmd1bGFyLmZvckVhY2goY3VzdG9tTWV0aG9kcywgZnVuY3Rpb24oZm4sIG5hbWUpIHtcbiAgICAgICAgcHVibGljU2VydmljZVtuYW1lXSA9IGZuO1xuICAgICAgfSk7XG5cbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChwcm92aWRlckNvbmZpZy5wcmVzZXRzLCBmdW5jdGlvbihkZWZpbml0aW9uLCBuYW1lKSB7XG4gICAgICAgIHZhciBwcmVzZXREZWZhdWx0cyA9IGludm9rZUZhY3RvcnkoZGVmaW5pdGlvbi5vcHRpb25zRmFjdG9yeSwge30pO1xuICAgICAgICB2YXIgcHJlc2V0TWV0aG9kcyA9IChkZWZpbml0aW9uLm1ldGhvZHMgfHwgW10pLmNvbmNhdChkZWZhdWx0TWV0aG9kcyk7XG5cbiAgICAgICAgLy8gRXZlcnkgaW50ZXJpbUVsZW1lbnQgYnVpbHQgd2l0aCBhIHByZXNldCBoYXMgYSBmaWVsZCBjYWxsZWQgYCR0eXBlYCxcbiAgICAgICAgLy8gd2hpY2ggbWF0Y2hlcyB0aGUgbmFtZSBvZiB0aGUgcHJlc2V0LlxuICAgICAgICAvLyBFZyBpbiBwcmVzZXQgJ2NvbmZpcm0nLCBvcHRpb25zLiR0eXBlID09PSAnY29uZmlybSdcbiAgICAgICAgYW5ndWxhci5leHRlbmQocHJlc2V0RGVmYXVsdHMsIHsgJHR5cGU6IG5hbWUgfSk7XG5cbiAgICAgICAgLy8gVGhpcyBjcmVhdGVzIGEgcHJlc2V0IGNsYXNzIHdoaWNoIGhhcyBzZXR0ZXIgbWV0aG9kcyBmb3IgZXZlcnlcbiAgICAgICAgLy8gbWV0aG9kIGdpdmVuIGluIHRoZSBgLmFkZFByZXNldCgpYCBmdW5jdGlvbiwgYXMgd2VsbCBhcyBldmVyeVxuICAgICAgICAvLyBtZXRob2QgZ2l2ZW4gaW4gdGhlIGAuc2V0RGVmYXVsdHMoKWAgZnVuY3Rpb24uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEBleGFtcGxlXG4gICAgICAgIC8vIC5zZXREZWZhdWx0cyh7XG4gICAgICAgIC8vICAgbWV0aG9kczogWydoYXNCYWNrZHJvcCcsICdjbGlja091dHNpZGVUb0Nsb3NlJywgJ2VzY2FwZVRvQ2xvc2UnLCAndGFyZ2V0RXZlbnQnXSxcbiAgICAgICAgLy8gICBvcHRpb25zOiBkaWFsb2dEZWZhdWx0T3B0aW9uc1xuICAgICAgICAvLyB9KVxuICAgICAgICAvLyAuYWRkUHJlc2V0KCdhbGVydCcsIHtcbiAgICAgICAgLy8gICBtZXRob2RzOiBbJ3RpdGxlJywgJ29rJ10sXG4gICAgICAgIC8vICAgb3B0aW9uczogYWxlcnREaWFsb2dPcHRpb25zXG4gICAgICAgIC8vIH0pXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFNldCB2YWx1ZXMgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIG9wdGlvbnMgd2hlbiBpbnRlcmltRWxlbW50LnNob3coKSBpcyBjYWxsZWQuXG4gICAgICAgIGZ1bmN0aW9uIFByZXNldChvcHRzKSB7XG4gICAgICAgICAgdGhpcy5fb3B0aW9ucyA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCBwcmVzZXREZWZhdWx0cywgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHByZXNldE1ldGhvZHMsIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICBQcmVzZXQucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIENyZWF0ZSBzaG9ydGN1dCBtZXRob2QgZm9yIG9uZS1saW5lYXIgbWV0aG9kc1xuICAgICAgICBpZiAoZGVmaW5pdGlvbi5hcmdPcHRpb24pIHtcbiAgICAgICAgICB2YXIgbWV0aG9kTmFtZSA9ICdzaG93JyArIG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpO1xuICAgICAgICAgIHB1YmxpY1NlcnZpY2VbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgICAgIHZhciBjb25maWcgPSBwdWJsaWNTZXJ2aWNlW25hbWVdKGFyZyk7XG4gICAgICAgICAgICByZXR1cm4gcHVibGljU2VydmljZS5zaG93KGNvbmZpZyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGVnICRtZERpYWxvZy5hbGVydCgpIHdpbGwgcmV0dXJuIGEgbmV3IGFsZXJ0IHByZXNldFxuICAgICAgICBwdWJsaWNTZXJ2aWNlW25hbWVdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgICAgLy8gSWYgYXJnT3B0aW9uIGlzIHN1cHBsaWVkLCBlZyBgYXJnT3B0aW9uOiAnY29udGVudCdgLCB0aGVuIHdlIGFzc3VtZVxuICAgICAgICAgIC8vIGlmIHRoZSBhcmd1bWVudCBpcyBub3QgYW4gb3B0aW9ucyBvYmplY3QgdGhlbiBpdCBpcyB0aGUgYGFyZ09wdGlvbmAgb3B0aW9uLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gQGV4YW1wbGUgYCRtZFRvYXN0LnNpbXBsZSgnaGVsbG8nKWAgLy8gc2V0cyBvcHRpb25zLmNvbnRlbnQgdG8gaGVsbG9cbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIGFyZ09wdGlvbiA9PT0gJ2NvbnRlbnQnXG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggJiYgZGVmaW5pdGlvbi5hcmdPcHRpb24gJiYgIWFuZ3VsYXIuaXNPYmplY3QoYXJnKSAmJlxuICAgICAgICAgICAgICAhYW5ndWxhci5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgICAgIHJldHVybiAobmV3IFByZXNldCgpKVtkZWZpbml0aW9uLmFyZ09wdGlvbl0oYXJnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcmVzZXQoYXJnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcHVibGljU2VydmljZTtcblxuICAgICAgZnVuY3Rpb24gc2hvd0ludGVyaW1FbGVtZW50KG9wdHMpIHtcbiAgICAgICAgLy8gb3B0cyBpcyBlaXRoZXIgYSBwcmVzZXQgd2hpY2ggc3RvcmVzIGl0cyBvcHRpb25zIG9uIGFuIF9vcHRpb25zIGZpZWxkLFxuICAgICAgICAvLyBvciBqdXN0IGFuIG9iamVjdCBtYWRlIHVwIG9mIG9wdGlvbnNcbiAgICAgICAgaWYgKG9wdHMgJiYgb3B0cy5fb3B0aW9ucykgb3B0cyA9IG9wdHMuX29wdGlvbnM7XG4gICAgICAgIHJldHVybiBpbnRlcmltRWxlbWVudFNlcnZpY2Uuc2hvdyhcbiAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdHMpXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogSGVscGVyIHRvIGNhbGwgJGluamVjdG9yLmludm9rZSB3aXRoIGEgbG9jYWwgb2YgdGhlIGZhY3RvcnkgbmFtZSBmb3JcbiAgICAgICAqIHRoaXMgcHJvdmlkZXIuXG4gICAgICAgKiBJZiBhbiAkbWREaWFsb2cgaXMgcHJvdmlkaW5nIG9wdGlvbnMgZm9yIGEgZGlhbG9nIGFuZCB0cmllcyB0byBpbmplY3RcbiAgICAgICAqICRtZERpYWxvZywgYSBjaXJjdWxhciBkZXBlbmRlbmN5IGVycm9yIHdpbGwgaGFwcGVuLlxuICAgICAgICogV2UgZ2V0IGFyb3VuZCB0aGF0IGJ5IG1hbnVhbGx5IGluamVjdGluZyAkbWREaWFsb2cgYXMgYSBsb2NhbC5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gaW52b2tlRmFjdG9yeShmYWN0b3J5LCBkZWZhdWx0VmFsKSB7XG4gICAgICAgIHZhciBsb2NhbHMgPSB7fTtcbiAgICAgICAgbG9jYWxzW2ludGVyaW1GYWN0b3J5TmFtZV0gPSBwdWJsaWNTZXJ2aWNlO1xuICAgICAgICByZXR1cm4gJGluamVjdG9yLmludm9rZShmYWN0b3J5IHx8IGZ1bmN0aW9uKCkgeyByZXR1cm4gZGVmYXVsdFZhbDsgfSwge30sIGxvY2Fscyk7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBJbnRlcmltRWxlbWVudEZhY3RvcnkoJGRvY3VtZW50LCAkcSwgJHJvb3RTY29wZSwgJHRpbWVvdXQsICRyb290RWxlbWVudCwgJGFuaW1hdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW50ZXJwb2xhdGUsICRtZENvbXBpbGVyLCAkbWRUaGVtaW5nICkge1xuICAgIHZhciBzdGFydFN5bWJvbCA9ICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpLFxuICAgICAgICBlbmRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCksXG4gICAgICAgIHVzZXNTdGFuZGFyZFN5bWJvbHMgPSAoKHN0YXJ0U3ltYm9sID09PSAne3snKSAmJiAoZW5kU3ltYm9sID09PSAnfX0nKSksXG4gICAgICAgIHByb2Nlc3NUZW1wbGF0ZSAgPSB1c2VzU3RhbmRhcmRTeW1ib2xzID8gYW5ndWxhci5pZGVudGl0eSA6IHJlcGxhY2VJbnRlcnBvbGF0aW9uU3ltYm9scztcblxuICAgIHJldHVybiBmdW5jdGlvbiBjcmVhdGVJbnRlcmltRWxlbWVudFNlcnZpY2UoKSB7XG4gICAgICAvKlxuICAgICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgICAqIEBuYW1lICQkaW50ZXJpbUVsZW1lbnQuJHNlcnZpY2VcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEEgc2VydmljZSB1c2VkIHRvIGNvbnRyb2wgaW5zZXJ0aW5nIGFuZCByZW1vdmluZyBhbiBlbGVtZW50IGludG8gdGhlIERPTS5cbiAgICAgICAqXG4gICAgICAgKi9cbiAgICAgIHZhciBzdGFjayA9IFtdO1xuICAgICAgdmFyIHNlcnZpY2U7XG4gICAgICByZXR1cm4gc2VydmljZSA9IHtcbiAgICAgICAgc2hvdzogc2hvdyxcbiAgICAgICAgaGlkZTogaGlkZSxcbiAgICAgICAgY2FuY2VsOiBjYW5jZWxcbiAgICAgIH07XG5cbiAgICAgIC8qXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkJGludGVyaW1FbGVtZW50LiRzZXJ2aWNlI3Nob3dcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBZGRzIHRoZSBgJGludGVyaW1FbGVtZW50YCB0byB0aGUgRE9NIGFuZCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgb3IgcmVqZWN0ZWRcbiAgICAgICAqIHdpdGggaGlkZSBvciBjYW5jZWwsIHJlc3BlY3RpdmVseS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyp9IG9wdGlvbnMgaXMgaGFzaE1hcCBvZiBzZXR0aW5nc1xuICAgICAgICogQHJldHVybnMgYSBQcm9taXNlXG4gICAgICAgKlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBzaG93KG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBzZXJ2aWNlLmNhbmNlbCgpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gc2hvdyhvcHRpb25zKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaW50ZXJpbUVsZW1lbnQgPSBuZXcgSW50ZXJpbUVsZW1lbnQob3B0aW9ucyk7XG4gICAgICAgICAgc3RhY2sucHVzaChpbnRlcmltRWxlbWVudCk7XG4gICAgICAgICAgcmV0dXJuIGludGVyaW1FbGVtZW50LnNob3coKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGludGVyaW1FbGVtZW50LmRlZmVycmVkLnByb21pc2U7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLypcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICQkaW50ZXJpbUVsZW1lbnQuJHNlcnZpY2UjaGlkZVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJlbW92ZXMgdGhlIGAkaW50ZXJpbUVsZW1lbnRgIGZyb20gdGhlIERPTSBhbmQgcmVzb2x2ZXMgdGhlIHByb21pc2UgcmV0dXJuZWQgZnJvbSBgc2hvd2BcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyp9IHJlc29sdmVQYXJhbSBEYXRhIHRvIHJlc29sdmUgdGhlIHByb21pc2Ugd2l0aFxuICAgICAgICogQHJldHVybnMgYSBQcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCBhZnRlciB0aGUgZWxlbWVudCBoYXMgYmVlbiByZW1vdmVkLlxuICAgICAgICpcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gaGlkZShyZXNwb25zZSkge1xuICAgICAgICB2YXIgaW50ZXJpbUVsZW1lbnQgPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICByZXR1cm4gaW50ZXJpbUVsZW1lbnQgJiYgaW50ZXJpbUVsZW1lbnQucmVtb3ZlKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICBpbnRlcmltRWxlbWVudC5kZWZlcnJlZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8qXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkJGludGVyaW1FbGVtZW50LiRzZXJ2aWNlI2NhbmNlbFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJlbW92ZXMgdGhlIGAkaW50ZXJpbUVsZW1lbnRgIGZyb20gdGhlIERPTSBhbmQgcmVqZWN0cyB0aGUgcHJvbWlzZSByZXR1cm5lZCBmcm9tIGBzaG93YFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Kn0gcmVhc29uIERhdGEgdG8gcmVqZWN0IHRoZSBwcm9taXNlIHdpdGhcbiAgICAgICAqIEByZXR1cm5zIFByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIGFmdGVyIHRoZSBlbGVtZW50IGhhcyBiZWVuIHJlbW92ZWQuXG4gICAgICAgKlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBjYW5jZWwocmVhc29uKSB7XG4gICAgICAgIHZhciBpbnRlcmltRWxlbWVudCA9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgIHJldHVybiAkcS53aGVuKGludGVyaW1FbGVtZW50ICYmIGludGVyaW1FbGVtZW50LnJlbW92ZSgpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaW50ZXJpbUVsZW1lbnQuZGVmZXJyZWQucmVqZWN0KHJlYXNvbik7XG4gICAgICAgIH0pKTtcbiAgICAgIH1cblxuXG4gICAgICAvKlxuICAgICAgICogSW50ZXJuYWwgSW50ZXJpbSBFbGVtZW50IE9iamVjdFxuICAgICAgICogVXNlZCBpbnRlcm5hbGx5IHRvIG1hbmFnZSB0aGUgRE9NIGVsZW1lbnQgYW5kIHJlbGF0ZWQgZGF0YVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBJbnRlcmltRWxlbWVudChvcHRpb25zKSB7XG4gICAgICAgIHZhciBzZWxmO1xuICAgICAgICB2YXIgaGlkZVRpbWVvdXQsIGVsZW1lbnQsIHNob3dEb25lLCByZW1vdmVEb25lO1xuXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBvcHRpb25zID0gYW5ndWxhci5leHRlbmQoe1xuICAgICAgICAgIHByZXNlcnZlU2NvcGU6IGZhbHNlLFxuICAgICAgICAgIHNjb3BlOiBvcHRpb25zLnNjb3BlIHx8ICRyb290U2NvcGUuJG5ldyhvcHRpb25zLmlzb2xhdGVTY29wZSksXG4gICAgICAgICAgb25TaG93OiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuICRhbmltYXRlLmVudGVyKGVsZW1lbnQsIG9wdGlvbnMucGFyZW50KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uUmVtb3ZlOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICAgICAgLy8gRWxlbWVudCBjb3VsZCBiZSB1bmRlZmluZWQgaWYgYSBuZXcgZWxlbWVudCBpcyBzaG93biBiZWZvcmVcbiAgICAgICAgICAgIC8vIHRoZSBvbGQgb25lIGZpbmlzaGVzIGNvbXBpbGluZy5cbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50ICYmICRhbmltYXRlLmxlYXZlKGVsZW1lbnQpIHx8ICRxLndoZW4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnRlbXBsYXRlKSB7XG4gICAgICAgICAgb3B0aW9ucy50ZW1wbGF0ZSA9IHByb2Nlc3NUZW1wbGF0ZShvcHRpb25zLnRlbXBsYXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZWxmID0ge1xuICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICAgICAgZGVmZXJyZWQ6ICRxLmRlZmVyKCksXG4gICAgICAgICAgc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY29tcGlsZVByb21pc2U7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5za2lwQ29tcGlsZSkge1xuICAgICAgICAgICAgICBjb21waWxlUHJvbWlzZSA9ICRxKGZ1bmN0aW9uKHJlc29sdmUpIHsgXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICBsb2NhbHM6IHt9LFxuICAgICAgICAgICAgICAgICAgbGluazogZnVuY3Rpb24oKSB7IHJldHVybiBvcHRpb25zLmVsZW1lbnQ7IH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb21waWxlUHJvbWlzZSA9ICRtZENvbXBpbGVyLmNvbXBpbGUob3B0aW9ucyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzaG93RG9uZSA9IGNvbXBpbGVQcm9taXNlLnRoZW4oZnVuY3Rpb24oY29tcGlsZURhdGEpIHtcbiAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoY29tcGlsZURhdGEubG9jYWxzLCBzZWxmLm9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgIGVsZW1lbnQgPSBjb21waWxlRGF0YS5saW5rKG9wdGlvbnMuc2NvcGUpO1xuXG4gICAgICAgICAgICAgIC8vIFNlYXJjaCBmb3IgcGFyZW50IGF0IGluc2VydGlvbiB0aW1lLCBpZiBub3Qgc3BlY2lmaWVkXG4gICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24ob3B0aW9ucy5wYXJlbnQpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudChvcHRpb25zLnNjb3BlLCBlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhbmd1bGFyLmlzU3RyaW5nKG9wdGlvbnMucGFyZW50KSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucGFyZW50ID0gYW5ndWxhci5lbGVtZW50KCRkb2N1bWVudFswXS5xdWVyeVNlbGVjdG9yKG9wdGlvbnMucGFyZW50KSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBJZiBwYXJlbnQgcXVlcnlTZWxlY3Rvci9nZXR0ZXIgZnVuY3Rpb24gZmFpbHMsIG9yIGl0J3MganVzdCBudWxsLFxuICAgICAgICAgICAgICAvLyBmaW5kIGEgZGVmYXVsdC5cbiAgICAgICAgICAgICAgaWYgKCEob3B0aW9ucy5wYXJlbnQgfHwge30pLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBlbDtcbiAgICAgICAgICAgICAgICBpZiAoJHJvb3RFbGVtZW50WzBdICYmICRyb290RWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICBlbCA9ICRyb290RWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCc6bm90KHN2ZykgPiBib2R5Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZWwpIGVsID0gJHJvb3RFbGVtZW50WzBdO1xuICAgICAgICAgICAgICAgIGlmIChlbC5ub2RlTmFtZSA9PSAnI2NvbW1lbnQnKSB7XG4gICAgICAgICAgICAgICAgICBlbCA9ICRkb2N1bWVudFswXS5ib2R5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHRpb25zLnBhcmVudCA9IGFuZ3VsYXIuZWxlbWVudChlbCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAob3B0aW9ucy50aGVtYWJsZSkgJG1kVGhlbWluZyhlbGVtZW50KTtcbiAgICAgICAgICAgICAgdmFyIHJldCA9IG9wdGlvbnMub25TaG93KG9wdGlvbnMuc2NvcGUsIGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICByZXR1cm4gJHEud2hlbihyZXQpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgIC8vIElzc3VlIG9uQ29tcGxldGUgY2FsbGJhY2sgd2hlbiB0aGUgYHNob3coKWAgZmluaXNoZXNcbiAgICAgICAgICAgICAgICAgIChvcHRpb25zLm9uQ29tcGxldGUgfHwgYW5ndWxhci5ub29wKShvcHRpb25zLnNjb3BlLCBlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgIHN0YXJ0SGlkZVRpbWVvdXQoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBmdW5jdGlvbiBzdGFydEhpZGVUaW1lb3V0KCkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmhpZGVEZWxheSkge1xuICAgICAgICAgICAgICAgICAgaGlkZVRpbWVvdXQgPSAkdGltZW91dChzZXJ2aWNlLmNhbmNlbCwgb3B0aW9ucy5oaWRlRGVsYXkpIDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikgeyBzaG93RG9uZSA9IHRydWU7IHNlbGYuZGVmZXJyZWQucmVqZWN0KHJlYXNvbik7IH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2FuY2VsVGltZW91dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoaGlkZVRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKGhpZGVUaW1lb3V0KTtcbiAgICAgICAgICAgICAgaGlkZVRpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5jYW5jZWxUaW1lb3V0KCk7XG4gICAgICAgICAgICByZXR1cm4gcmVtb3ZlRG9uZSA9ICRxLndoZW4oc2hvd0RvbmUpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciByZXQgPSBlbGVtZW50ID8gb3B0aW9ucy5vblJlbW92ZShvcHRpb25zLnNjb3BlLCBlbGVtZW50LCBvcHRpb25zKSA6IHRydWU7XG4gICAgICAgICAgICAgIHJldHVybiAkcS53aGVuKHJldCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMucHJlc2VydmVTY29wZSkgb3B0aW9ucy5zY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIHJlbW92ZURvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLypcbiAgICAgKiBSZXBsYWNlIGB7e2AgYW5kIGB9fWAgaW4gYSBzdHJpbmcgKHVzdWFsbHkgYSB0ZW1wbGF0ZSkgd2l0aCB0aGUgYWN0dWFsIHN0YXJ0LS9lbmRTeW1ib2xzIHVzZWRcbiAgICAgKiBmb3IgaW50ZXJwb2xhdGlvbi4gVGhpcyBhbGxvd3MgcHJlLWRlZmluZWQgdGVtcGxhdGVzIChmb3IgY29tcG9uZW50cyBzdWNoIGFzIGRpYWxvZywgdG9hc3QgZXRjKVxuICAgICAqIHRvIGNvbnRpbnVlIHRvIHdvcmsgaW4gYXBwcyB0aGF0IHVzZSBjdXN0b20gaW50ZXJwb2xhdGlvbiBzdGFydC0vZW5kU3ltYm9scy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IGluIHdoaWNoIHRvIHJlcGxhY2UgYHt7YCAvIGB9fWBcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgbW9kaWZpZWQgc3RyaW5nIHVzaW5nIHRoZSBhY3R1YWwgaW50ZXJwb2xhdGlvbiBzdGFydC0vZW5kU3ltYm9sc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2VJbnRlcnBvbGF0aW9uU3ltYm9scyh0ZXh0KSB7XG4gICAgICBpZiAoIXRleHQgfHwgIWFuZ3VsYXIuaXNTdHJpbmcodGV4dCkpIHJldHVybiB0ZXh0O1xuICAgICAgcmV0dXJuIHRleHQucmVwbGFjZSgvXFx7XFx7L2csIHN0YXJ0U3ltYm9sKS5yZXBsYWNlKC99fS9nLCBlbmRTeW1ib2wpO1xuICAgIH1cbiAgfVxuXG59XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbW9kdWxlXG4gICAqIEBuYW1lIG1hdGVyaWFsLmNvcmUuY29tcG9uZW50UmVnaXN0cnlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEEgY29tcG9uZW50IGluc3RhbmNlIHJlZ2lzdHJhdGlvbiBzZXJ2aWNlLlxuICAgKiBOb3RlOiBjdXJyZW50bHkgdGhpcyBhcyBhIHByaXZhdGUgc2VydmljZSBpbiB0aGUgU2lkZU5hdiBjb21wb25lbnQuXG4gICAqL1xuICBhbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29yZScpXG4gICAgLmZhY3RvcnkoJyRtZENvbXBvbmVudFJlZ2lzdHJ5JywgQ29tcG9uZW50UmVnaXN0cnkpO1xuXG4gIC8qXG4gICAqIEBwcml2YXRlXG4gICAqIEBuZ2RvYyBmYWN0b3J5XG4gICAqIEBuYW1lIENvbXBvbmVudFJlZ2lzdHJ5XG4gICAqIEBtb2R1bGUgbWF0ZXJpYWwuY29yZS5jb21wb25lbnRSZWdpc3RyeVxuICAgKlxuICAgKi9cbiAgZnVuY3Rpb24gQ29tcG9uZW50UmVnaXN0cnkoJGxvZywgJHEpIHtcblxuICAgIHZhciBzZWxmO1xuICAgIHZhciBpbnN0YW5jZXMgPSBbIF07XG4gICAgdmFyIHBlbmRpbmdzID0geyB9O1xuXG4gICAgcmV0dXJuIHNlbGYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gcHJpbnQgYW4gZXJyb3Igd2hlbiBhbiBpbnN0YW5jZSBmb3IgYSBoYW5kbGUgaXNuJ3QgZm91bmQuXG4gICAgICAgKi9cbiAgICAgIG5vdEZvdW5kRXJyb3I6IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAkbG9nLmVycm9yKCdObyBpbnN0YW5jZSBmb3VuZCBmb3IgaGFuZGxlJywgaGFuZGxlKTtcbiAgICAgIH0sXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybiBhbGwgcmVnaXN0ZXJlZCBpbnN0YW5jZXMgYXMgYW4gYXJyYXkuXG4gICAgICAgKi9cbiAgICAgIGdldEluc3RhbmNlczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZXM7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEdldCBhIHJlZ2lzdGVyZWQgaW5zdGFuY2UuXG4gICAgICAgKiBAcGFyYW0gaGFuZGxlIHRoZSBTdHJpbmcgaGFuZGxlIHRvIGxvb2sgdXAgZm9yIGEgcmVnaXN0ZXJlZCBpbnN0YW5jZS5cbiAgICAgICAqL1xuICAgICAgZ2V0OiBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgaWYgKCAhaXNWYWxpZElEKGhhbmRsZSkgKSByZXR1cm4gbnVsbDtcblxuICAgICAgICB2YXIgaSwgaiwgaW5zdGFuY2U7XG4gICAgICAgIGZvcihpID0gMCwgaiA9IGluc3RhbmNlcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICBpbnN0YW5jZSA9IGluc3RhbmNlc1tpXTtcbiAgICAgICAgICBpZihpbnN0YW5jZS4kJG1kSGFuZGxlID09PSBoYW5kbGUpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFJlZ2lzdGVyIGFuIGluc3RhbmNlLlxuICAgICAgICogQHBhcmFtIGluc3RhbmNlIHRoZSBpbnN0YW5jZSB0byByZWdpc3RlclxuICAgICAgICogQHBhcmFtIGhhbmRsZSB0aGUgaGFuZGxlIHRvIGlkZW50aWZ5IHRoZSBpbnN0YW5jZSB1bmRlci5cbiAgICAgICAqL1xuICAgICAgcmVnaXN0ZXI6IGZ1bmN0aW9uKGluc3RhbmNlLCBoYW5kbGUpIHtcbiAgICAgICAgaWYgKCAhaGFuZGxlICkgcmV0dXJuIGFuZ3VsYXIubm9vcDtcblxuICAgICAgICBpbnN0YW5jZS4kJG1kSGFuZGxlID0gaGFuZGxlO1xuICAgICAgICBpbnN0YW5jZXMucHVzaChpbnN0YW5jZSk7XG4gICAgICAgIHJlc29sdmVXaGVuKCk7XG5cbiAgICAgICAgcmV0dXJuIGRlcmVnaXN0ZXI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW92ZSByZWdpc3RyYXRpb24gZm9yIGFuIGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBkZXJlZ2lzdGVyKCkge1xuICAgICAgICAgIHZhciBpbmRleCA9IGluc3RhbmNlcy5pbmRleE9mKGluc3RhbmNlKTtcbiAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBpbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzb2x2ZSBhbnkgcGVuZGluZyBwcm9taXNlcyBmb3IgdGhpcyBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZVdoZW4oKSB7XG4gICAgICAgICAgdmFyIGRmZCA9IHBlbmRpbmdzW2hhbmRsZV07XG4gICAgICAgICAgaWYgKCBkZmQgKSB7XG4gICAgICAgICAgICBkZmQucmVzb2x2ZSggaW5zdGFuY2UgKTtcbiAgICAgICAgICAgIGRlbGV0ZSBwZW5kaW5nc1toYW5kbGVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBBc3luYyBhY2Nlc3NvciB0byByZWdpc3RlcmVkIGNvbXBvbmVudCBpbnN0YW5jZVxuICAgICAgICogSWYgbm90IGF2YWlsYWJsZSB0aGVuIGEgcHJvbWlzZSBpcyBjcmVhdGVkIHRvIG5vdGlmeVxuICAgICAgICogYWxsIGxpc3RlbmVycyB3aGVuIHRoZSBpbnN0YW5jZSBpcyByZWdpc3RlcmVkLlxuICAgICAgICovXG4gICAgICB3aGVuIDogZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgIGlmICggaXNWYWxpZElEKGhhbmRsZSkgKSB7XG4gICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBzZWxmLmdldChoYW5kbGUpO1xuXG4gICAgICAgICAgaWYgKCBpbnN0YW5jZSApICB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCBpbnN0YW5jZSApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZW5kaW5nc1toYW5kbGVdID0gZGVmZXJyZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRxLnJlamVjdChcIkludmFsaWQgYG1kLWNvbXBvbmVudC1pZGAgdmFsdWUuXCIpO1xuICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGlzVmFsaWRJRChoYW5kbGUpe1xuICAgICAgcmV0dXJuIGhhbmRsZSAmJiAoaGFuZGxlICE9PSBcIlwiKTtcbiAgICB9XG5cbiAgfVxuICBDb21wb25lbnRSZWdpc3RyeS4kaW5qZWN0ID0gW1wiJGxvZ1wiLCBcIiRxXCJdO1xuXG59KSgpO1xuKGZ1bmN0aW9uKCl7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRtZEJ1dHRvbklua1JpcHBsZVxuICAgKiBAbW9kdWxlIG1hdGVyaWFsLmNvcmVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFByb3ZpZGVzIHJpcHBsZSBlZmZlY3RzIGZvciBtZC1idXR0b24uICBTZWUgJG1kSW5rUmlwcGxlIHNlcnZpY2UgZm9yIGFsbCBwb3NzaWJsZSBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0PX0gc2NvcGUgU2NvcGUgd2l0aGluIHRoZSBjdXJyZW50IGNvbnRleHRcbiAgICogQHBhcmFtIHtvYmplY3Q9fSBlbGVtZW50IFRoZSBlbGVtZW50IHRoZSByaXBwbGUgZWZmZWN0IHNob3VsZCBiZSBhcHBsaWVkIHRvXG4gICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyAoT3B0aW9uYWwpIENvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHJpcHBsZSBjb25maWd1cmF0aW9uXG4gICAqL1xuXG4gIGFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb3JlJylcbiAgICAuZmFjdG9yeSgnJG1kQnV0dG9uSW5rUmlwcGxlJywgTWRCdXR0b25JbmtSaXBwbGUpO1xuXG4gIGZ1bmN0aW9uIE1kQnV0dG9uSW5rUmlwcGxlKCRtZElua1JpcHBsZSkge1xuICAgIHJldHVybiB7XG4gICAgICBhdHRhY2g6IGF0dGFjaFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBhdHRhY2goc2NvcGUsIGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBlbGVtZW50T3B0aW9ucyA9IG9wdGlvbnNGb3JFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgcmV0dXJuICRtZElua1JpcHBsZS5hdHRhY2goc2NvcGUsIGVsZW1lbnQsIGFuZ3VsYXIuZXh0ZW5kKGVsZW1lbnRPcHRpb25zLCBvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIG9wdGlvbnNGb3JFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIGlmIChlbGVtZW50Lmhhc0NsYXNzKCdtZC1pY29uLWJ1dHRvbicpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaXNNZW51SXRlbTogZWxlbWVudC5oYXNDbGFzcygnbWQtbWVudS1pdGVtJyksXG4gICAgICAgICAgZml0UmlwcGxlOiB0cnVlLFxuICAgICAgICAgIGNlbnRlcjogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpc01lbnVJdGVtOiBlbGVtZW50Lmhhc0NsYXNzKCdtZC1tZW51LWl0ZW0nKSxcbiAgICAgICAgICBkaW1CYWNrZ3JvdW5kOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIE1kQnV0dG9uSW5rUmlwcGxlLiRpbmplY3QgPSBbXCIkbWRJbmtSaXBwbGVcIl07O1xufSkoKTtcblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRtZENoZWNrYm94SW5rUmlwcGxlXG4gICAqIEBtb2R1bGUgbWF0ZXJpYWwuY29yZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUHJvdmlkZXMgcmlwcGxlIGVmZmVjdHMgZm9yIG1kLWNoZWNrYm94LiAgU2VlICRtZElua1JpcHBsZSBzZXJ2aWNlIGZvciBhbGwgcG9zc2libGUgY29uZmlndXJhdGlvbiBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdD19IHNjb3BlIFNjb3BlIHdpdGhpbiB0aGUgY3VycmVudCBjb250ZXh0XG4gICAqIEBwYXJhbSB7b2JqZWN0PX0gZWxlbWVudCBUaGUgZWxlbWVudCB0aGUgcmlwcGxlIGVmZmVjdCBzaG91bGQgYmUgYXBwbGllZCB0b1xuICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgKE9wdGlvbmFsKSBDb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHRyaXBwbGUgY29uZmlndXJhdGlvblxuICAgKi9cblxuICBhbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29yZScpXG4gICAgLmZhY3RvcnkoJyRtZENoZWNrYm94SW5rUmlwcGxlJywgTWRDaGVja2JveElua1JpcHBsZSk7XG5cbiAgZnVuY3Rpb24gTWRDaGVja2JveElua1JpcHBsZSgkbWRJbmtSaXBwbGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYXR0YWNoOiBhdHRhY2hcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYXR0YWNoKHNjb3BlLCBlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gJG1kSW5rUmlwcGxlLmF0dGFjaChzY29wZSwgZWxlbWVudCwgYW5ndWxhci5leHRlbmQoe1xuICAgICAgICBjZW50ZXI6IHRydWUsXG4gICAgICAgIGRpbUJhY2tncm91bmQ6IGZhbHNlLFxuICAgICAgICBmaXRSaXBwbGU6IHRydWVcbiAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICB9O1xuICB9XG4gIE1kQ2hlY2tib3hJbmtSaXBwbGUuJGluamVjdCA9IFtcIiRtZElua1JpcHBsZVwiXTs7XG59KSgpO1xuXG59KSgpO1xuKGZ1bmN0aW9uKCl7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRtZExpc3RJbmtSaXBwbGVcbiAgICogQG1vZHVsZSBtYXRlcmlhbC5jb3JlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBQcm92aWRlcyByaXBwbGUgZWZmZWN0cyBmb3IgbWQtbGlzdC4gIFNlZSAkbWRJbmtSaXBwbGUgc2VydmljZSBmb3IgYWxsIHBvc3NpYmxlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3Q9fSBzY29wZSBTY29wZSB3aXRoaW4gdGhlIGN1cnJlbnQgY29udGV4dFxuICAgKiBAcGFyYW0ge29iamVjdD19IGVsZW1lbnQgVGhlIGVsZW1lbnQgdGhlIHJpcHBsZSBlZmZlY3Qgc2hvdWxkIGJlIGFwcGxpZWQgdG9cbiAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIChPcHRpb25hbCkgQ29uZmlndXJhdGlvbiBvcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0cmlwcGxlIGNvbmZpZ3VyYXRpb25cbiAgICovXG5cbiAgYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvcmUnKVxuICAgIC5mYWN0b3J5KCckbWRMaXN0SW5rUmlwcGxlJywgTWRMaXN0SW5rUmlwcGxlKTtcblxuICBmdW5jdGlvbiBNZExpc3RJbmtSaXBwbGUoJG1kSW5rUmlwcGxlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGF0dGFjaDogYXR0YWNoXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGF0dGFjaChzY29wZSwgZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuICRtZElua1JpcHBsZS5hdHRhY2goc2NvcGUsIGVsZW1lbnQsIGFuZ3VsYXIuZXh0ZW5kKHtcbiAgICAgICAgY2VudGVyOiBmYWxzZSxcbiAgICAgICAgZGltQmFja2dyb3VuZDogdHJ1ZSxcbiAgICAgICAgb3V0bGluZTogZmFsc2UsXG4gICAgICAgIHJpcHBsZVNpemU6ICdmdWxsJ1xuICAgICAgfSwgb3B0aW9ucykpO1xuICAgIH07XG4gIH1cbiAgTWRMaXN0SW5rUmlwcGxlLiRpbmplY3QgPSBbXCIkbWRJbmtSaXBwbGVcIl07O1xufSkoKTtcblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb3JlJylcbiAgLmZhY3RvcnkoJyRtZElua1JpcHBsZScsIElua1JpcHBsZVNlcnZpY2UpXG4gIC5kaXJlY3RpdmUoJ21kSW5rUmlwcGxlJywgSW5rUmlwcGxlRGlyZWN0aXZlKVxuICAuZGlyZWN0aXZlKCdtZE5vSW5rJywgYXR0ck5vRGlyZWN0aXZlKCkpXG4gIC5kaXJlY3RpdmUoJ21kTm9CYXInLCBhdHRyTm9EaXJlY3RpdmUoKSlcbiAgLmRpcmVjdGl2ZSgnbWROb1N0cmV0Y2gnLCBhdHRyTm9EaXJlY3RpdmUoKSk7XG5cbmZ1bmN0aW9uIElua1JpcHBsZURpcmVjdGl2ZSgkbWRCdXR0b25JbmtSaXBwbGUsICRtZENoZWNrYm94SW5rUmlwcGxlKSB7XG4gIHJldHVybiB7XG4gICAgY29udHJvbGxlcjogYW5ndWxhci5ub29wLFxuICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgaWYgKGF0dHIuaGFzT3duUHJvcGVydHkoJ21kSW5rUmlwcGxlQ2hlY2tib3gnKSkge1xuICAgICAgICAkbWRDaGVja2JveElua1JpcHBsZS5hdHRhY2goc2NvcGUsIGVsZW1lbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJG1kQnV0dG9uSW5rUmlwcGxlLmF0dGFjaChzY29wZSwgZWxlbWVudCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuSW5rUmlwcGxlRGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkbWRCdXR0b25JbmtSaXBwbGVcIiwgXCIkbWRDaGVja2JveElua1JpcHBsZVwiXTtcblxuZnVuY3Rpb24gSW5rUmlwcGxlU2VydmljZSgkd2luZG93LCAkdGltZW91dCkge1xuXG4gIHJldHVybiB7XG4gICAgYXR0YWNoOiBhdHRhY2hcbiAgfTtcblxuICBmdW5jdGlvbiBhdHRhY2goc2NvcGUsIGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICBpZiAoZWxlbWVudC5jb250cm9sbGVyKCdtZE5vSW5rJykpIHJldHVybiBhbmd1bGFyLm5vb3A7XG5cbiAgICBvcHRpb25zID0gYW5ndWxhci5leHRlbmQoe1xuICAgICAgY29sb3JFbGVtZW50OiBlbGVtZW50LFxuICAgICAgbW91c2Vkb3duOiB0cnVlLFxuICAgICAgaG92ZXI6IHRydWUsXG4gICAgICBmb2N1czogdHJ1ZSxcbiAgICAgIGNlbnRlcjogZmFsc2UsXG4gICAgICBtb3VzZWRvd25QYXVzZVRpbWU6IDE1MCxcbiAgICAgIGRpbUJhY2tncm91bmQ6IGZhbHNlLFxuICAgICAgb3V0bGluZTogZmFsc2UsXG4gICAgICBmdWxsUmlwcGxlOiB0cnVlLFxuICAgICAgaXNNZW51SXRlbTogZmFsc2UsXG4gICAgICBmaXRSaXBwbGU6IGZhbHNlXG4gICAgfSwgb3B0aW9ucyk7XG5cbiAgICB2YXIgcmlwcGxlU2l6ZSxcbiAgICAgICAgY29udHJvbGxlciA9IGVsZW1lbnQuY29udHJvbGxlcignbWRJbmtSaXBwbGUnKSB8fCB7fSxcbiAgICAgICAgY291bnRlciA9IDAsXG4gICAgICAgIHJpcHBsZXMgPSBbXSxcbiAgICAgICAgc3RhdGVzID0gW10sXG4gICAgICAgIGlzQWN0aXZlRXhwciA9IGVsZW1lbnQuYXR0cignbWQtaGlnaGxpZ2h0JyksXG4gICAgICAgIGlzQWN0aXZlID0gZmFsc2UsXG4gICAgICAgIGlzSGVsZCA9IGZhbHNlLFxuICAgICAgICBub2RlID0gZWxlbWVudFswXSxcbiAgICAgICAgcmlwcGxlU2l6ZVNldHRpbmcgPSBlbGVtZW50LmF0dHIoJ21kLXJpcHBsZS1zaXplJyksXG4gICAgICAgIGNvbG9yID0gcGFyc2VDb2xvcihlbGVtZW50LmF0dHIoJ21kLWluay1yaXBwbGUnKSkgfHwgcGFyc2VDb2xvcihvcHRpb25zLmNvbG9yRWxlbWVudC5sZW5ndGggJiYgJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG9wdGlvbnMuY29sb3JFbGVtZW50WzBdKS5jb2xvciB8fCAncmdiKDAsIDAsIDApJyk7XG5cbiAgICBzd2l0Y2ggKHJpcHBsZVNpemVTZXR0aW5nKSB7XG4gICAgICBjYXNlICdmdWxsJzpcbiAgICAgICAgb3B0aW9ucy5mdWxsUmlwcGxlID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdwYXJ0aWFsJzpcbiAgICAgICAgb3B0aW9ucy5mdWxsUmlwcGxlID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIGV4cG9zZSBvbklucHV0IGZvciByaXBwbGUgdGVzdGluZ1xuICAgIGlmIChvcHRpb25zLm1vdXNlZG93bikge1xuICAgICAgZWxlbWVudC5vbignJG1kLnByZXNzZG93bicsIG9uUHJlc3NEb3duKVxuICAgICAgICAub24oJyRtZC5wcmVzc3VwJywgb25QcmVzc1VwKTtcbiAgICB9XG5cbiAgICBjb250cm9sbGVyLmNyZWF0ZVJpcHBsZSA9IGNyZWF0ZVJpcHBsZTtcblxuICAgIGlmIChpc0FjdGl2ZUV4cHIpIHtcbiAgICAgIHNjb3BlLiR3YXRjaChpc0FjdGl2ZUV4cHIsIGZ1bmN0aW9uIHdhdGNoQWN0aXZlKG5ld1ZhbHVlKSB7XG4gICAgICAgIGlzQWN0aXZlID0gbmV3VmFsdWU7XG4gICAgICAgIGlmIChpc0FjdGl2ZSAmJiAhcmlwcGxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7IGNyZWF0ZVJpcHBsZSgwLCAwKTsgfSwgMCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChyaXBwbGVzLCB1cGRhdGVFbGVtZW50KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFB1Ymxpc2ggc2VsZi1kZXRhY2ggbWV0aG9kIGlmIGRlc2lyZWQuLi5cbiAgICByZXR1cm4gZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgICAgZWxlbWVudC5vZmYoJyRtZC5wcmVzc2Rvd24nLCBvblByZXNzRG93bilcbiAgICAgICAgLm9mZignJG1kLnByZXNzdXAnLCBvblByZXNzVXApO1xuICAgICAgZ2V0UmlwcGxlQ29udGFpbmVyKCkucmVtb3ZlKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgcmlwcGxlIGNvbnRhaW5lclxuICAgICAqIElmIHRoZXJlIGlzIG5vIHJpcHBsZSBjb250YWluZXIsIGl0IGNyZWF0ZXMgb25lIGFuZCByZXR1cm5zIGl0XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7YW5ndWxhci5lbGVtZW50fSByaXBwbGUgY29udGFpbmVyIGVsZW1lbnRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRSaXBwbGVDb250YWluZXIoKSB7XG4gICAgICB2YXIgY29udGFpbmVyID0gZWxlbWVudC5kYXRhKCckbWRSaXBwbGVDb250YWluZXInKTtcbiAgICAgIGlmIChjb250YWluZXIpIHJldHVybiBjb250YWluZXI7XG4gICAgICBjb250YWluZXIgPSBhbmd1bGFyLmVsZW1lbnQoJzxkaXYgY2xhc3M9XCJtZC1yaXBwbGUtY29udGFpbmVyXCI+Jyk7XG4gICAgICBlbGVtZW50LmFwcGVuZChjb250YWluZXIpO1xuICAgICAgZWxlbWVudC5kYXRhKCckbWRSaXBwbGVDb250YWluZXInLCBjb250YWluZXIpO1xuICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUNvbG9yKGNvbG9yKSB7XG4gICAgICBpZiAoIWNvbG9yKSByZXR1cm47XG4gICAgICBpZiAoY29sb3IuaW5kZXhPZigncmdiYScpID09PSAwKSByZXR1cm4gY29sb3IucmVwbGFjZSgvXFxkP1xcLj9cXGQqXFxzKlxcKVxccyokLywgJzAuMSknKTtcbiAgICAgIGlmIChjb2xvci5pbmRleE9mKCdyZ2InKSAgPT09IDApIHJldHVybiByZ2JUb1JHQkEoY29sb3IpO1xuICAgICAgaWYgKGNvbG9yLmluZGV4T2YoJyMnKSAgICA9PT0gMCkgcmV0dXJuIGhleFRvUkdCQShjb2xvcik7XG5cbiAgICAgIC8qKlxuICAgICAgICogQ29udmVydHMgYSBoZXggdmFsdWUgdG8gYW4gcmdiYSBzdHJpbmdcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaGV4IHZhbHVlICgzIG9yIDYgZGlnaXRzKSB0byBiZSBjb252ZXJ0ZWRcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSByZ2JhIGNvbG9yIHdpdGggMC4xIGFscGhhXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGhleFRvUkdCQShjb2xvcikge1xuICAgICAgICB2YXIgaGV4ID0gY29sb3IuY2hhckF0KDApID09PSAnIycgPyBjb2xvci5zdWJzdHIoMSkgOiBjb2xvcixcbiAgICAgICAgICBkaWcgPSBoZXgubGVuZ3RoIC8gMyxcbiAgICAgICAgICByZWQgPSBoZXguc3Vic3RyKDAsIGRpZyksXG4gICAgICAgICAgZ3JuID0gaGV4LnN1YnN0cihkaWcsIGRpZyksXG4gICAgICAgICAgYmx1ID0gaGV4LnN1YnN0cihkaWcgKiAyKTtcbiAgICAgICAgaWYgKGRpZyA9PT0gMSkge1xuICAgICAgICAgIHJlZCArPSByZWQ7XG4gICAgICAgICAgZ3JuICs9IGdybjtcbiAgICAgICAgICBibHUgKz0gYmx1O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAncmdiYSgnICsgcGFyc2VJbnQocmVkLCAxNikgKyAnLCcgKyBwYXJzZUludChncm4sIDE2KSArICcsJyArIHBhcnNlSW50KGJsdSwgMTYpICsgJywwLjEpJztcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDb252ZXJ0cyByZ2IgdmFsdWUgdG8gcmdiYSBzdHJpbmdcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmdiIGNvbG9yIHN0cmluZ1xuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHJnYmEgY29sb3Igd2l0aCAwLjEgYWxwaGFcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gcmdiVG9SR0JBKGNvbG9yKSB7XG4gICAgICAgIHJldHVybiBjb2xvci5yZXBsYWNlKCcpJywgJywgMC4xKScpLnJlcGxhY2UoJygnLCAnYSgnKTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoZWxlbSwgd2FpdCkge1xuICAgICAgcmlwcGxlcy5zcGxpY2UocmlwcGxlcy5pbmRleE9mKGVsZW0pLCAxKTtcbiAgICAgIGlmIChyaXBwbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBnZXRSaXBwbGVDb250YWluZXIoKS5jc3MoeyBiYWNrZ3JvdW5kQ29sb3I6ICcnIH0pO1xuICAgICAgfVxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkgeyBlbGVtLnJlbW92ZSgpOyB9LCB3YWl0LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlRWxlbWVudChlbGVtKSB7XG4gICAgICB2YXIgaW5kZXggPSByaXBwbGVzLmluZGV4T2YoZWxlbSksXG4gICAgICAgICAgc3RhdGUgPSBzdGF0ZXNbaW5kZXhdIHx8IHt9LFxuICAgICAgICAgIGVsZW1Jc0FjdGl2ZSA9IHJpcHBsZXMubGVuZ3RoID4gMSA/IGZhbHNlIDogaXNBY3RpdmUsXG4gICAgICAgICAgZWxlbUlzSGVsZCAgID0gcmlwcGxlcy5sZW5ndGggPiAxID8gZmFsc2UgOiBpc0hlbGQ7XG4gICAgICBpZiAoZWxlbUlzQWN0aXZlIHx8IHN0YXRlLmFuaW1hdGluZyB8fCBlbGVtSXNIZWxkKSB7XG4gICAgICAgIGVsZW0uYWRkQ2xhc3MoJ21kLXJpcHBsZS12aXNpYmxlJyk7XG4gICAgICB9IGVsc2UgaWYgKGVsZW0pIHtcbiAgICAgICAgZWxlbS5yZW1vdmVDbGFzcygnbWQtcmlwcGxlLXZpc2libGUnKTtcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0bGluZSkge1xuICAgICAgICAgIGVsZW0uY3NzKHtcbiAgICAgICAgICAgIHdpZHRoOiByaXBwbGVTaXplICsgJ3B4JyxcbiAgICAgICAgICAgIGhlaWdodDogcmlwcGxlU2l6ZSArICdweCcsXG4gICAgICAgICAgICBtYXJnaW5MZWZ0OiAocmlwcGxlU2l6ZSAqIC0xKSArICdweCcsXG4gICAgICAgICAgICBtYXJnaW5Ub3A6IChyaXBwbGVTaXplICogLTEpICsgJ3B4J1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJlbW92ZUVsZW1lbnQoZWxlbSwgb3B0aW9ucy5vdXRsaW5lID8gNDUwIDogNjUwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcmlwcGxlIGF0IHRoZSBwcm92aWRlZCBjb29yZGluYXRlc1xuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgY3Vyc29yIHBvc2l0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRvcCBjdXJzb3IgcG9zaXRpb25cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHthbmd1bGFyLmVsZW1lbnR9IHRoZSBnZW5lcmF0ZWQgcmlwcGxlIGVsZW1lbnRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSaXBwbGUobGVmdCwgdG9wKSB7XG5cbiAgICAgIGNvbG9yID0gcGFyc2VDb2xvcihlbGVtZW50LmF0dHIoJ21kLWluay1yaXBwbGUnKSkgfHwgcGFyc2VDb2xvcigkd2luZG93LmdldENvbXB1dGVkU3R5bGUob3B0aW9ucy5jb2xvckVsZW1lbnRbMF0pLmNvbG9yIHx8ICdyZ2IoMCwgMCwgMCknKTtcblxuICAgICAgdmFyIGNvbnRhaW5lciA9IGdldFJpcHBsZUNvbnRhaW5lcigpLFxuICAgICAgICAgIHNpemUgPSBnZXRSaXBwbGVTaXplKGxlZnQsIHRvcCksXG4gICAgICAgICAgY3NzID0gZ2V0UmlwcGxlQ3NzKHNpemUsIGxlZnQsIHRvcCksXG4gICAgICAgICAgZWxlbSA9IGdldFJpcHBsZUVsZW1lbnQoY3NzKSxcbiAgICAgICAgICBpbmRleCA9IHJpcHBsZXMuaW5kZXhPZihlbGVtKSxcbiAgICAgICAgICBzdGF0ZSA9IHN0YXRlc1tpbmRleF0gfHwge307XG5cbiAgICAgIHJpcHBsZVNpemUgPSBzaXplO1xuXG4gICAgICBzdGF0ZS5hbmltYXRpbmcgPSB0cnVlO1xuXG4gICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmRpbUJhY2tncm91bmQpIHtcbiAgICAgICAgICBjb250YWluZXIuY3NzKHsgYmFja2dyb3VuZENvbG9yOiBjb2xvciB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbGVtLmFkZENsYXNzKCdtZC1yaXBwbGUtcGxhY2VkIG1kLXJpcHBsZS1zY2FsZWQnKTtcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0bGluZSkge1xuICAgICAgICAgIGVsZW0uY3NzKHtcbiAgICAgICAgICAgIGJvcmRlcldpZHRoOiAoc2l6ZSAqIDAuNSkgKyAncHgnLFxuICAgICAgICAgICAgbWFyZ2luTGVmdDogKHNpemUgKiAtMC41KSArICdweCcsXG4gICAgICAgICAgICBtYXJnaW5Ub3A6IChzaXplICogLTAuNSkgKyAncHgnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWxlbS5jc3MoeyBsZWZ0OiAnNTAlJywgdG9wOiAnNTAlJyB9KTtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVFbGVtZW50KGVsZW0pO1xuICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhdGUuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgdXBkYXRlRWxlbWVudChlbGVtKTtcbiAgICAgICAgfSwgKG9wdGlvbnMub3V0bGluZSA/IDQ1MCA6IDIyNSksIGZhbHNlKTtcbiAgICAgIH0sIDAsIGZhbHNlKTtcblxuICAgICAgcmV0dXJuIGVsZW07XG5cbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlcyB0aGUgcmlwcGxlIGVsZW1lbnQgd2l0aCB0aGUgcHJvdmlkZWQgY3NzXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IGNzcyBwcm9wZXJ0aWVzIHRvIGJlIGFwcGxpZWRcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7YW5ndWxhci5lbGVtZW50fSB0aGUgZ2VuZXJhdGVkIHJpcHBsZSBlbGVtZW50XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGdldFJpcHBsZUVsZW1lbnQoY3NzKSB7XG4gICAgICAgIHZhciBlbGVtID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2IGNsYXNzPVwibWQtcmlwcGxlXCIgZGF0YS1jb3VudGVyPVwiJyArIGNvdW50ZXIrKyArICdcIj4nKTtcbiAgICAgICAgcmlwcGxlcy51bnNoaWZ0KGVsZW0pO1xuICAgICAgICBzdGF0ZXMudW5zaGlmdCh7IGFuaW1hdGluZzogdHJ1ZSB9KTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZChlbGVtKTtcbiAgICAgICAgY3NzICYmIGVsZW0uY3NzKGNzcyk7XG4gICAgICAgIHJldHVybiBlbGVtO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENhbGN1bGF0ZSB0aGUgcmlwcGxlIHNpemVcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBjYWxjdWxhdGVkIHJpcHBsZSBkaWFtZXRlclxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBnZXRSaXBwbGVTaXplKGxlZnQsIHRvcCkge1xuICAgICAgICB2YXIgd2lkdGggPSBjb250YWluZXIucHJvcCgnb2Zmc2V0V2lkdGgnKSxcbiAgICAgICAgICAgIGhlaWdodCA9IGNvbnRhaW5lci5wcm9wKCdvZmZzZXRIZWlnaHQnKSxcbiAgICAgICAgICAgIG11bHRpcGxpZXIsIHNpemUsIHJlY3Q7XG4gICAgICAgIGlmIChvcHRpb25zLmlzTWVudUl0ZW0pIHtcbiAgICAgICAgICBzaXplID0gTWF0aC5zcXJ0KE1hdGgucG93KHdpZHRoLCAyKSArIE1hdGgucG93KGhlaWdodCwgMikpO1xuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMub3V0bGluZSkge1xuICAgICAgICAgIHJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgIGxlZnQgLT0gcmVjdC5sZWZ0O1xuICAgICAgICAgIHRvcCAtPSByZWN0LnRvcDtcbiAgICAgICAgICB3aWR0aCA9IE1hdGgubWF4KGxlZnQsIHdpZHRoIC0gbGVmdCk7XG4gICAgICAgICAgaGVpZ2h0ID0gTWF0aC5tYXgodG9wLCBoZWlnaHQgLSB0b3ApO1xuICAgICAgICAgIHNpemUgPSAyICogTWF0aC5zcXJ0KE1hdGgucG93KHdpZHRoLCAyKSArIE1hdGgucG93KGhlaWdodCwgMikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG11bHRpcGxpZXIgPSBvcHRpb25zLmZ1bGxSaXBwbGUgPyAxLjEgOiAwLjg7XG4gICAgICAgICAgc2l6ZSA9IE1hdGguc3FydChNYXRoLnBvdyh3aWR0aCwgMikgKyBNYXRoLnBvdyhoZWlnaHQsIDIpKSAqIG11bHRpcGxpZXI7XG4gICAgICAgICAgaWYgKG9wdGlvbnMuZml0UmlwcGxlKSB7XG4gICAgICAgICAgICBzaXplID0gTWF0aC5taW4oaGVpZ2h0LCB3aWR0aCwgc2l6ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaXplO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEdlbmVyYXRlcyB0aGUgcmlwcGxlIGNzc1xuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aGUgZGlhbWV0ZXIgb2YgdGhlIHJpcHBsZVxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHRoZSBsZWZ0IGN1cnNvciBvZmZzZXRcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aGUgdG9wIGN1cnNvciBvZmZzZXRcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7e2JhY2tncm91bmRDb2xvcjogc3RyaW5nLCBib3JkZXJDb2xvcjogc3RyaW5nLCB3aWR0aDogc3RyaW5nLCBoZWlnaHQ6IHN0cmluZ319XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGdldFJpcHBsZUNzcyhzaXplLCBsZWZ0LCB0b3ApIHtcbiAgICAgICAgdmFyIHJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgICAgY3NzICA9IHtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiByZ2JhVG9SR0IoY29sb3IpLFxuICAgICAgICAgICAgICBib3JkZXJDb2xvcjogcmdiYVRvUkdCKGNvbG9yKSxcbiAgICAgICAgICAgICAgd2lkdGg6IHNpemUgKyAncHgnLFxuICAgICAgICAgICAgICBoZWlnaHQ6IHNpemUgKyAncHgnXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIGlmIChvcHRpb25zLm91dGxpbmUpIHtcbiAgICAgICAgICBjc3Mud2lkdGggPSAwO1xuICAgICAgICAgIGNzcy5oZWlnaHQgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNzcy5tYXJnaW5MZWZ0ID0gY3NzLm1hcmdpblRvcCA9IChzaXplICogLTAuNSkgKyAncHgnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuY2VudGVyKSB7XG4gICAgICAgICAgY3NzLmxlZnQgPSBjc3MudG9wID0gJzUwJSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3NzLmxlZnQgPSBNYXRoLnJvdW5kKChsZWZ0IC0gcmVjdC5sZWZ0KSAvIGNvbnRhaW5lci5wcm9wKCdvZmZzZXRXaWR0aCcpICogMTAwKSArICclJztcbiAgICAgICAgICBjc3MudG9wID0gTWF0aC5yb3VuZCgodG9wIC0gcmVjdC50b3ApIC8gY29udGFpbmVyLnByb3AoJ29mZnNldEhlaWdodCcpICogMTAwKSArICclJztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjc3M7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHJnYmEgc3RyaW5nIHRvIHJnYiwgcmVtb3ZpbmcgdGhlIGFscGhhIHZhbHVlXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZ2JhIGNvbG9yXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHJnYiBjb2xvclxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gcmdiYVRvUkdCKGNvbG9yKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbG9yLnJlcGxhY2UoJ3JnYmEnLCAncmdiJykucmVwbGFjZSgvLFteXFwpLF0rXFwpLywgJyknKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgdXNlciBpbnB1dCBzdGFydCBhbmQgc3RvcCBldmVudHNcbiAgICAgKlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uUHJlc3NEb3duKGV2KSB7XG4gICAgICBpZiAoIWlzUmlwcGxlQWxsb3dlZCgpKSByZXR1cm47XG5cbiAgICAgIGNyZWF0ZVJpcHBsZShldi5wb2ludGVyLngsIGV2LnBvaW50ZXIueSk7XG4gICAgICBpc0hlbGQgPSB0cnVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblByZXNzVXAoKSB7XG4gICAgICBpc0hlbGQgPSBmYWxzZTtcbiAgICAgIHZhciByaXBwbGUgPSByaXBwbGVzWyByaXBwbGVzLmxlbmd0aCAtIDEgXTtcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHsgdXBkYXRlRWxlbWVudChyaXBwbGUpOyB9LCAwLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiB0aGUgcmlwcGxlIGlzIGFsbG93ZWRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSByaXBwbGUgaXMgYWxsb3dlZCwgZmFsc2UgaWYgbm90XG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNSaXBwbGVBbGxvd2VkKCkge1xuICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgIHZhciBncmFuZHBhcmVudCA9IHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZTtcbiAgICAgIHZhciBhbmNlc3RvciA9IGdyYW5kcGFyZW50ICYmIGdyYW5kcGFyZW50LnBhcmVudE5vZGU7XG4gICAgICByZXR1cm4gIWlzRGlzYWJsZWQobm9kZSkgJiYgIWlzRGlzYWJsZWQocGFyZW50KSAmJiAhaXNEaXNhYmxlZChncmFuZHBhcmVudCkgJiYgIWlzRGlzYWJsZWQoYW5jZXN0b3IpO1xuICAgICAgZnVuY3Rpb24gaXNEaXNhYmxlZCAoZWxlbSkge1xuICAgICAgICByZXR1cm4gZWxlbSAmJiBlbGVtLmhhc0F0dHJpYnV0ZSAmJiBlbGVtLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxufVxuSW5rUmlwcGxlU2VydmljZS4kaW5qZWN0ID0gW1wiJHdpbmRvd1wiLCBcIiR0aW1lb3V0XCJdO1xuXG4vKipcbiAqIG5vaW5rL25vYmFyL25vc3RyZXRjaCBkaXJlY3RpdmU6IG1ha2UgYW55IGVsZW1lbnQgdGhhdCBoYXMgb25lIG9mXG4gKiB0aGVzZSBhdHRyaWJ1dGVzIGJlIGdpdmVuIGEgY29udHJvbGxlciwgc28gdGhhdCBvdGhlciBkaXJlY3RpdmVzIGNhblxuICogYHJlcXVpcmU6YCB0aGVzZSBhbmQgc2VlIGlmIHRoZXJlIGlzIGEgYG5vPHh4eD5gIHBhcmVudCBhdHRyaWJ1dGUuXG4gKlxuICogQHVzYWdlXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogPHBhcmVudCBtZC1uby1pbms+XG4gKiAgIDxjaGlsZCBkZXRlY3Qtbm8+XG4gKiAgIDwvY2hpbGQ+XG4gKiA8L3BhcmVudD5cbiAqIDwvaGxqcz5cbiAqXG4gKiA8aGxqcyBsYW5nPVwianNcIj5cbiAqIG15QXBwLmRpcmVjdGl2ZSgnZGV0ZWN0Tm8nLCBmdW5jdGlvbigpIHtcbiAqICAgcmV0dXJuIHtcbiAqICAgICByZXF1aXJlOiBbJ14/bWROb0luaycsIF4/bWROb0JhciddLFxuICogICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICogICAgICAgdmFyIG5vaW5rQ3RybCA9IGN0cmxzWzBdO1xuICogICAgICAgdmFyIG5vYmFyQ3RybCA9IGN0cmxzWzFdO1xuICogICAgICAgaWYgKG5vSW5rQ3RybCkge1xuICogICAgICAgICBhbGVydChcInRoZSBtZC1uby1pbmsgZmxhZyBoYXMgYmVlbiBzcGVjaWZpZWQgb24gYW4gYW5jZXN0b3IhXCIpO1xuICogICAgICAgfVxuICogICAgICAgaWYgKG5vYmFyQ3RybCkge1xuICogICAgICAgICBhbGVydChcInRoZSBtZC1uby1iYXIgZmxhZyBoYXMgYmVlbiBzcGVjaWZpZWQgb24gYW4gYW5jZXN0b3IhXCIpO1xuICogICAgICAgfVxuICogICAgIH1cbiAqICAgfTtcbiAqIH0pO1xuICogPC9obGpzPlxuICovXG5mdW5jdGlvbiBhdHRyTm9EaXJlY3RpdmUoKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29udHJvbGxlcjogYW5ndWxhci5ub29wXG4gICAgfTtcbiAgfTtcbn1cblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRtZFRhYklua1JpcHBsZVxuICAgKiBAbW9kdWxlIG1hdGVyaWFsLmNvcmVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFByb3ZpZGVzIHJpcHBsZSBlZmZlY3RzIGZvciBtZC10YWJzLiAgU2VlICRtZElua1JpcHBsZSBzZXJ2aWNlIGZvciBhbGwgcG9zc2libGUgY29uZmlndXJhdGlvbiBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdD19IHNjb3BlIFNjb3BlIHdpdGhpbiB0aGUgY3VycmVudCBjb250ZXh0XG4gICAqIEBwYXJhbSB7b2JqZWN0PX0gZWxlbWVudCBUaGUgZWxlbWVudCB0aGUgcmlwcGxlIGVmZmVjdCBzaG91bGQgYmUgYXBwbGllZCB0b1xuICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgKE9wdGlvbmFsKSBDb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHRyaXBwbGUgY29uZmlndXJhdGlvblxuICAgKi9cblxuICBhbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29yZScpXG4gICAgLmZhY3RvcnkoJyRtZFRhYklua1JpcHBsZScsIE1kVGFiSW5rUmlwcGxlKTtcblxuICBmdW5jdGlvbiBNZFRhYklua1JpcHBsZSgkbWRJbmtSaXBwbGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYXR0YWNoOiBhdHRhY2hcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYXR0YWNoKHNjb3BlLCBlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gJG1kSW5rUmlwcGxlLmF0dGFjaChzY29wZSwgZWxlbWVudCwgYW5ndWxhci5leHRlbmQoe1xuICAgICAgICBjZW50ZXI6IGZhbHNlLFxuICAgICAgICBkaW1CYWNrZ3JvdW5kOiB0cnVlLFxuICAgICAgICBvdXRsaW5lOiBmYWxzZSxcbiAgICAgICAgcmlwcGxlU2l6ZTogJ2Z1bGwnXG4gICAgICB9LCBvcHRpb25zKSk7XG4gICAgfTtcbiAgfVxuICBNZFRhYklua1JpcHBsZS4kaW5qZWN0ID0gW1wiJG1kSW5rUmlwcGxlXCJdOztcbn0pKCk7XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29yZS50aGVtaW5nLnBhbGV0dGUnLCBbXSlcbi5jb25zdGFudCgnJG1kQ29sb3JQYWxldHRlJywge1xuICAncmVkJzoge1xuICAgICc1MCc6ICcjZmZlYmVlJyxcbiAgICAnMTAwJzogJyNmZmNkZDInLFxuICAgICcyMDAnOiAnI2VmOWE5YScsXG4gICAgJzMwMCc6ICcjZTU3MzczJyxcbiAgICAnNDAwJzogJyNlZjUzNTAnLFxuICAgICc1MDAnOiAnI2Y0NDMzNicsXG4gICAgJzYwMCc6ICcjZTUzOTM1JyxcbiAgICAnNzAwJzogJyNkMzJmMmYnLFxuICAgICc4MDAnOiAnI2M2MjgyOCcsXG4gICAgJzkwMCc6ICcjYjcxYzFjJyxcbiAgICAnQTEwMCc6ICcjZmY4YTgwJyxcbiAgICAnQTIwMCc6ICcjZmY1MjUyJyxcbiAgICAnQTQwMCc6ICcjZmYxNzQ0JyxcbiAgICAnQTcwMCc6ICcjZDUwMDAwJyxcbiAgICAnY29udHJhc3REZWZhdWx0Q29sb3InOiAnbGlnaHQnLFxuICAgICdjb250cmFzdERhcmtDb2xvcnMnOiAnNTAgMTAwIDIwMCAzMDAgNDAwIEExMDAnLFxuICAgICdjb250cmFzdFN0cm9uZ0xpZ2h0Q29sb3JzJzogJzUwMCA2MDAgNzAwIEEyMDAgQTQwMCBBNzAwJ1xuICB9LFxuICAncGluayc6IHtcbiAgICAnNTAnOiAnI2ZjZTRlYycsXG4gICAgJzEwMCc6ICcjZjhiYmQwJyxcbiAgICAnMjAwJzogJyNmNDhmYjEnLFxuICAgICczMDAnOiAnI2YwNjI5MicsXG4gICAgJzQwMCc6ICcjZWM0MDdhJyxcbiAgICAnNTAwJzogJyNlOTFlNjMnLFxuICAgICc2MDAnOiAnI2Q4MWI2MCcsXG4gICAgJzcwMCc6ICcjYzIxODViJyxcbiAgICAnODAwJzogJyNhZDE0NTcnLFxuICAgICc5MDAnOiAnIzg4MGU0ZicsXG4gICAgJ0ExMDAnOiAnI2ZmODBhYicsXG4gICAgJ0EyMDAnOiAnI2ZmNDA4MScsXG4gICAgJ0E0MDAnOiAnI2Y1MDA1NycsXG4gICAgJ0E3MDAnOiAnI2M1MTE2MicsXG4gICAgJ2NvbnRyYXN0RGVmYXVsdENvbG9yJzogJ2xpZ2h0JyxcbiAgICAnY29udHJhc3REYXJrQ29sb3JzJzogJzUwIDEwMCAyMDAgMzAwIDQwMCBBMTAwJyxcbiAgICAnY29udHJhc3RTdHJvbmdMaWdodENvbG9ycyc6ICc1MDAgNjAwIEEyMDAgQTQwMCBBNzAwJ1xuICB9LFxuICAncHVycGxlJzoge1xuICAgICc1MCc6ICcjZjNlNWY1JyxcbiAgICAnMTAwJzogJyNlMWJlZTcnLFxuICAgICcyMDAnOiAnI2NlOTNkOCcsXG4gICAgJzMwMCc6ICcjYmE2OGM4JyxcbiAgICAnNDAwJzogJyNhYjQ3YmMnLFxuICAgICc1MDAnOiAnIzljMjdiMCcsXG4gICAgJzYwMCc6ICcjOGUyNGFhJyxcbiAgICAnNzAwJzogJyM3YjFmYTInLFxuICAgICc4MDAnOiAnIzZhMWI5YScsXG4gICAgJzkwMCc6ICcjNGExNDhjJyxcbiAgICAnQTEwMCc6ICcjZWE4MGZjJyxcbiAgICAnQTIwMCc6ICcjZTA0MGZiJyxcbiAgICAnQTQwMCc6ICcjZDUwMGY5JyxcbiAgICAnQTcwMCc6ICcjYWEwMGZmJyxcbiAgICAnY29udHJhc3REZWZhdWx0Q29sb3InOiAnbGlnaHQnLFxuICAgICdjb250cmFzdERhcmtDb2xvcnMnOiAnNTAgMTAwIDIwMCBBMTAwJyxcbiAgICAnY29udHJhc3RTdHJvbmdMaWdodENvbG9ycyc6ICczMDAgNDAwIEEyMDAgQTQwMCBBNzAwJ1xuICB9LFxuICAnZGVlcC1wdXJwbGUnOiB7XG4gICAgJzUwJzogJyNlZGU3ZjYnLFxuICAgICcxMDAnOiAnI2QxYzRlOScsXG4gICAgJzIwMCc6ICcjYjM5ZGRiJyxcbiAgICAnMzAwJzogJyM5NTc1Y2QnLFxuICAgICc0MDAnOiAnIzdlNTdjMicsXG4gICAgJzUwMCc6ICcjNjczYWI3JyxcbiAgICAnNjAwJzogJyM1ZTM1YjEnLFxuICAgICc3MDAnOiAnIzUxMmRhOCcsXG4gICAgJzgwMCc6ICcjNDUyN2EwJyxcbiAgICAnOTAwJzogJyMzMTFiOTInLFxuICAgICdBMTAwJzogJyNiMzg4ZmYnLFxuICAgICdBMjAwJzogJyM3YzRkZmYnLFxuICAgICdBNDAwJzogJyM2NTFmZmYnLFxuICAgICdBNzAwJzogJyM2MjAwZWEnLFxuICAgICdjb250cmFzdERlZmF1bHRDb2xvcic6ICdsaWdodCcsXG4gICAgJ2NvbnRyYXN0RGFya0NvbG9ycyc6ICc1MCAxMDAgMjAwIEExMDAnLFxuICAgICdjb250cmFzdFN0cm9uZ0xpZ2h0Q29sb3JzJzogJzMwMCA0MDAgQTIwMCdcbiAgfSxcbiAgJ2luZGlnbyc6IHtcbiAgICAnNTAnOiAnI2U4ZWFmNicsXG4gICAgJzEwMCc6ICcjYzVjYWU5JyxcbiAgICAnMjAwJzogJyM5ZmE4ZGEnLFxuICAgICczMDAnOiAnIzc5ODZjYicsXG4gICAgJzQwMCc6ICcjNWM2YmMwJyxcbiAgICAnNTAwJzogJyMzZjUxYjUnLFxuICAgICc2MDAnOiAnIzM5NDlhYicsXG4gICAgJzcwMCc6ICcjMzAzZjlmJyxcbiAgICAnODAwJzogJyMyODM1OTMnLFxuICAgICc5MDAnOiAnIzFhMjM3ZScsXG4gICAgJ0ExMDAnOiAnIzhjOWVmZicsXG4gICAgJ0EyMDAnOiAnIzUzNmRmZScsXG4gICAgJ0E0MDAnOiAnIzNkNWFmZScsXG4gICAgJ0E3MDAnOiAnIzMwNGZmZScsXG4gICAgJ2NvbnRyYXN0RGVmYXVsdENvbG9yJzogJ2xpZ2h0JyxcbiAgICAnY29udHJhc3REYXJrQ29sb3JzJzogJzUwIDEwMCAyMDAgQTEwMCcsXG4gICAgJ2NvbnRyYXN0U3Ryb25nTGlnaHRDb2xvcnMnOiAnMzAwIDQwMCBBMjAwIEE0MDAnXG4gIH0sXG4gICdibHVlJzoge1xuICAgICc1MCc6ICcjZTNmMmZkJyxcbiAgICAnMTAwJzogJyNiYmRlZmInLFxuICAgICcyMDAnOiAnIzkwY2FmOScsXG4gICAgJzMwMCc6ICcjNjRiNWY2JyxcbiAgICAnNDAwJzogJyM0MmE1ZjUnLFxuICAgICc1MDAnOiAnIzIxOTZmMycsXG4gICAgJzYwMCc6ICcjMWU4OGU1JyxcbiAgICAnNzAwJzogJyMxOTc2ZDInLFxuICAgICc4MDAnOiAnIzE1NjVjMCcsXG4gICAgJzkwMCc6ICcjMGQ0N2ExJyxcbiAgICAnQTEwMCc6ICcjODJiMWZmJyxcbiAgICAnQTIwMCc6ICcjNDQ4YWZmJyxcbiAgICAnQTQwMCc6ICcjMjk3OWZmJyxcbiAgICAnQTcwMCc6ICcjMjk2MmZmJyxcbiAgICAnY29udHJhc3REZWZhdWx0Q29sb3InOiAnbGlnaHQnLFxuICAgICdjb250cmFzdERhcmtDb2xvcnMnOiAnMTAwIDIwMCAzMDAgNDAwIEExMDAnLFxuICAgICdjb250cmFzdFN0cm9uZ0xpZ2h0Q29sb3JzJzogJzUwMCA2MDAgNzAwIEEyMDAgQTQwMCBBNzAwJ1xuICB9LFxuICAnbGlnaHQtYmx1ZSc6IHtcbiAgICAnNTAnOiAnI2UxZjVmZScsXG4gICAgJzEwMCc6ICcjYjNlNWZjJyxcbiAgICAnMjAwJzogJyM4MWQ0ZmEnLFxuICAgICczMDAnOiAnIzRmYzNmNycsXG4gICAgJzQwMCc6ICcjMjliNmY2JyxcbiAgICAnNTAwJzogJyMwM2E5ZjQnLFxuICAgICc2MDAnOiAnIzAzOWJlNScsXG4gICAgJzcwMCc6ICcjMDI4OGQxJyxcbiAgICAnODAwJzogJyMwMjc3YmQnLFxuICAgICc5MDAnOiAnIzAxNTc5YicsXG4gICAgJ0ExMDAnOiAnIzgwZDhmZicsXG4gICAgJ0EyMDAnOiAnIzQwYzRmZicsXG4gICAgJ0E0MDAnOiAnIzAwYjBmZicsXG4gICAgJ0E3MDAnOiAnIzAwOTFlYScsXG4gICAgJ2NvbnRyYXN0RGVmYXVsdENvbG9yJzogJ2RhcmsnLFxuICAgICdjb250cmFzdExpZ2h0Q29sb3JzJzogJzUwMCA2MDAgNzAwIDgwMCA5MDAgQTcwMCcsXG4gICAgJ2NvbnRyYXN0U3Ryb25nTGlnaHRDb2xvcnMnOiAnNTAwIDYwMCA3MDAgODAwIEE3MDAnXG4gIH0sXG4gICdjeWFuJzoge1xuICAgICc1MCc6ICcjZTBmN2ZhJyxcbiAgICAnMTAwJzogJyNiMmViZjInLFxuICAgICcyMDAnOiAnIzgwZGVlYScsXG4gICAgJzMwMCc6ICcjNGRkMGUxJyxcbiAgICAnNDAwJzogJyMyNmM2ZGEnLFxuICAgICc1MDAnOiAnIzAwYmNkNCcsXG4gICAgJzYwMCc6ICcjMDBhY2MxJyxcbiAgICAnNzAwJzogJyMwMDk3YTcnLFxuICAgICc4MDAnOiAnIzAwODM4ZicsXG4gICAgJzkwMCc6ICcjMDA2MDY0JyxcbiAgICAnQTEwMCc6ICcjODRmZmZmJyxcbiAgICAnQTIwMCc6ICcjMThmZmZmJyxcbiAgICAnQTQwMCc6ICcjMDBlNWZmJyxcbiAgICAnQTcwMCc6ICcjMDBiOGQ0JyxcbiAgICAnY29udHJhc3REZWZhdWx0Q29sb3InOiAnZGFyaycsXG4gICAgJ2NvbnRyYXN0TGlnaHRDb2xvcnMnOiAnNTAwIDYwMCA3MDAgODAwIDkwMCcsXG4gICAgJ2NvbnRyYXN0U3Ryb25nTGlnaHRDb2xvcnMnOiAnNTAwIDYwMCA3MDAgODAwJ1xuICB9LFxuICAndGVhbCc6IHtcbiAgICAnNTAnOiAnI2UwZjJmMScsXG4gICAgJzEwMCc6ICcjYjJkZmRiJyxcbiAgICAnMjAwJzogJyM4MGNiYzQnLFxuICAgICczMDAnOiAnIzRkYjZhYycsXG4gICAgJzQwMCc6ICcjMjZhNjlhJyxcbiAgICAnNTAwJzogJyMwMDk2ODgnLFxuICAgICc2MDAnOiAnIzAwODk3YicsXG4gICAgJzcwMCc6ICcjMDA3OTZiJyxcbiAgICAnODAwJzogJyMwMDY5NWMnLFxuICAgICc5MDAnOiAnIzAwNGQ0MCcsXG4gICAgJ0ExMDAnOiAnI2E3ZmZlYicsXG4gICAgJ0EyMDAnOiAnIzY0ZmZkYScsXG4gICAgJ0E0MDAnOiAnIzFkZTliNicsXG4gICAgJ0E3MDAnOiAnIzAwYmZhNScsXG4gICAgJ2NvbnRyYXN0RGVmYXVsdENvbG9yJzogJ2RhcmsnLFxuICAgICdjb250cmFzdExpZ2h0Q29sb3JzJzogJzUwMCA2MDAgNzAwIDgwMCA5MDAnLFxuICAgICdjb250cmFzdFN0cm9uZ0xpZ2h0Q29sb3JzJzogJzUwMCA2MDAgNzAwJ1xuICB9LFxuICAnZ3JlZW4nOiB7XG4gICAgJzUwJzogJyNlOGY1ZTknLFxuICAgICcxMDAnOiAnI2M4ZTZjOScsXG4gICAgJzIwMCc6ICcjYTVkNmE3JyxcbiAgICAnMzAwJzogJyM4MWM3ODQnLFxuICAgICc0MDAnOiAnIzY2YmI2YScsXG4gICAgJzUwMCc6ICcjNGNhZjUwJyxcbiAgICAnNjAwJzogJyM0M2EwNDcnLFxuICAgICc3MDAnOiAnIzM4OGUzYycsXG4gICAgJzgwMCc6ICcjMmU3ZDMyJyxcbiAgICAnOTAwJzogJyMxYjVlMjAnLFxuICAgICdBMTAwJzogJyNiOWY2Y2EnLFxuICAgICdBMjAwJzogJyM2OWYwYWUnLFxuICAgICdBNDAwJzogJyMwMGU2NzYnLFxuICAgICdBNzAwJzogJyMwMGM4NTMnLFxuICAgICdjb250cmFzdERlZmF1bHRDb2xvcic6ICdkYXJrJyxcbiAgICAnY29udHJhc3RMaWdodENvbG9ycyc6ICc1MDAgNjAwIDcwMCA4MDAgOTAwJyxcbiAgICAnY29udHJhc3RTdHJvbmdMaWdodENvbG9ycyc6ICc1MDAgNjAwIDcwMCdcbiAgfSxcbiAgJ2xpZ2h0LWdyZWVuJzoge1xuICAgICc1MCc6ICcjZjFmOGU5JyxcbiAgICAnMTAwJzogJyNkY2VkYzgnLFxuICAgICcyMDAnOiAnI2M1ZTFhNScsXG4gICAgJzMwMCc6ICcjYWVkNTgxJyxcbiAgICAnNDAwJzogJyM5Y2NjNjUnLFxuICAgICc1MDAnOiAnIzhiYzM0YScsXG4gICAgJzYwMCc6ICcjN2NiMzQyJyxcbiAgICAnNzAwJzogJyM2ODlmMzgnLFxuICAgICc4MDAnOiAnIzU1OGIyZicsXG4gICAgJzkwMCc6ICcjMzM2OTFlJyxcbiAgICAnQTEwMCc6ICcjY2NmZjkwJyxcbiAgICAnQTIwMCc6ICcjYjJmZjU5JyxcbiAgICAnQTQwMCc6ICcjNzZmZjAzJyxcbiAgICAnQTcwMCc6ICcjNjRkZDE3JyxcbiAgICAnY29udHJhc3REZWZhdWx0Q29sb3InOiAnZGFyaycsXG4gICAgJ2NvbnRyYXN0TGlnaHRDb2xvcnMnOiAnODAwIDkwMCcsXG4gICAgJ2NvbnRyYXN0U3Ryb25nTGlnaHRDb2xvcnMnOiAnODAwIDkwMCdcbiAgfSxcbiAgJ2xpbWUnOiB7XG4gICAgJzUwJzogJyNmOWZiZTcnLFxuICAgICcxMDAnOiAnI2YwZjRjMycsXG4gICAgJzIwMCc6ICcjZTZlZTljJyxcbiAgICAnMzAwJzogJyNkY2U3NzUnLFxuICAgICc0MDAnOiAnI2Q0ZTE1NycsXG4gICAgJzUwMCc6ICcjY2RkYzM5JyxcbiAgICAnNjAwJzogJyNjMGNhMzMnLFxuICAgICc3MDAnOiAnI2FmYjQyYicsXG4gICAgJzgwMCc6ICcjOWU5ZDI0JyxcbiAgICAnOTAwJzogJyM4Mjc3MTcnLFxuICAgICdBMTAwJzogJyNmNGZmODEnLFxuICAgICdBMjAwJzogJyNlZWZmNDEnLFxuICAgICdBNDAwJzogJyNjNmZmMDAnLFxuICAgICdBNzAwJzogJyNhZWVhMDAnLFxuICAgICdjb250cmFzdERlZmF1bHRDb2xvcic6ICdkYXJrJyxcbiAgICAnY29udHJhc3RMaWdodENvbG9ycyc6ICc5MDAnLFxuICAgICdjb250cmFzdFN0cm9uZ0xpZ2h0Q29sb3JzJzogJzkwMCdcbiAgfSxcbiAgJ3llbGxvdyc6IHtcbiAgICAnNTAnOiAnI2ZmZmRlNycsXG4gICAgJzEwMCc6ICcjZmZmOWM0JyxcbiAgICAnMjAwJzogJyNmZmY1OWQnLFxuICAgICczMDAnOiAnI2ZmZjE3NicsXG4gICAgJzQwMCc6ICcjZmZlZTU4JyxcbiAgICAnNTAwJzogJyNmZmViM2InLFxuICAgICc2MDAnOiAnI2ZkZDgzNScsXG4gICAgJzcwMCc6ICcjZmJjMDJkJyxcbiAgICAnODAwJzogJyNmOWE4MjUnLFxuICAgICc5MDAnOiAnI2Y1N2YxNycsXG4gICAgJ0ExMDAnOiAnI2ZmZmY4ZCcsXG4gICAgJ0EyMDAnOiAnI2ZmZmYwMCcsXG4gICAgJ0E0MDAnOiAnI2ZmZWEwMCcsXG4gICAgJ0E3MDAnOiAnI2ZmZDYwMCcsXG4gICAgJ2NvbnRyYXN0RGVmYXVsdENvbG9yJzogJ2RhcmsnXG4gIH0sXG4gICdhbWJlcic6IHtcbiAgICAnNTAnOiAnI2ZmZjhlMScsXG4gICAgJzEwMCc6ICcjZmZlY2IzJyxcbiAgICAnMjAwJzogJyNmZmUwODInLFxuICAgICczMDAnOiAnI2ZmZDU0ZicsXG4gICAgJzQwMCc6ICcjZmZjYTI4JyxcbiAgICAnNTAwJzogJyNmZmMxMDcnLFxuICAgICc2MDAnOiAnI2ZmYjMwMCcsXG4gICAgJzcwMCc6ICcjZmZhMDAwJyxcbiAgICAnODAwJzogJyNmZjhmMDAnLFxuICAgICc5MDAnOiAnI2ZmNmYwMCcsXG4gICAgJ0ExMDAnOiAnI2ZmZTU3ZicsXG4gICAgJ0EyMDAnOiAnI2ZmZDc0MCcsXG4gICAgJ0E0MDAnOiAnI2ZmYzQwMCcsXG4gICAgJ0E3MDAnOiAnI2ZmYWIwMCcsXG4gICAgJ2NvbnRyYXN0RGVmYXVsdENvbG9yJzogJ2RhcmsnXG4gIH0sXG4gICdvcmFuZ2UnOiB7XG4gICAgJzUwJzogJyNmZmYzZTAnLFxuICAgICcxMDAnOiAnI2ZmZTBiMicsXG4gICAgJzIwMCc6ICcjZmZjYzgwJyxcbiAgICAnMzAwJzogJyNmZmI3NGQnLFxuICAgICc0MDAnOiAnI2ZmYTcyNicsXG4gICAgJzUwMCc6ICcjZmY5ODAwJyxcbiAgICAnNjAwJzogJyNmYjhjMDAnLFxuICAgICc3MDAnOiAnI2Y1N2MwMCcsXG4gICAgJzgwMCc6ICcjZWY2YzAwJyxcbiAgICAnOTAwJzogJyNlNjUxMDAnLFxuICAgICdBMTAwJzogJyNmZmQxODAnLFxuICAgICdBMjAwJzogJyNmZmFiNDAnLFxuICAgICdBNDAwJzogJyNmZjkxMDAnLFxuICAgICdBNzAwJzogJyNmZjZkMDAnLFxuICAgICdjb250cmFzdERlZmF1bHRDb2xvcic6ICdkYXJrJyxcbiAgICAnY29udHJhc3RMaWdodENvbG9ycyc6ICc4MDAgOTAwJyxcbiAgICAnY29udHJhc3RTdHJvbmdMaWdodENvbG9ycyc6ICc4MDAgOTAwJ1xuICB9LFxuICAnZGVlcC1vcmFuZ2UnOiB7XG4gICAgJzUwJzogJyNmYmU5ZTcnLFxuICAgICcxMDAnOiAnI2ZmY2NiYycsXG4gICAgJzIwMCc6ICcjZmZhYjkxJyxcbiAgICAnMzAwJzogJyNmZjhhNjUnLFxuICAgICc0MDAnOiAnI2ZmNzA0MycsXG4gICAgJzUwMCc6ICcjZmY1NzIyJyxcbiAgICAnNjAwJzogJyNmNDUxMWUnLFxuICAgICc3MDAnOiAnI2U2NGExOScsXG4gICAgJzgwMCc6ICcjZDg0MzE1JyxcbiAgICAnOTAwJzogJyNiZjM2MGMnLFxuICAgICdBMTAwJzogJyNmZjllODAnLFxuICAgICdBMjAwJzogJyNmZjZlNDAnLFxuICAgICdBNDAwJzogJyNmZjNkMDAnLFxuICAgICdBNzAwJzogJyNkZDJjMDAnLFxuICAgICdjb250cmFzdERlZmF1bHRDb2xvcic6ICdsaWdodCcsXG4gICAgJ2NvbnRyYXN0RGFya0NvbG9ycyc6ICc1MCAxMDAgMjAwIDMwMCA0MDAgQTEwMCBBMjAwJyxcbiAgICAnY29udHJhc3RTdHJvbmdMaWdodENvbG9ycyc6ICc1MDAgNjAwIDcwMCA4MDAgOTAwIEE0MDAgQTcwMCdcbiAgfSxcbiAgJ2Jyb3duJzoge1xuICAgICc1MCc6ICcjZWZlYmU5JyxcbiAgICAnMTAwJzogJyNkN2NjYzgnLFxuICAgICcyMDAnOiAnI2JjYWFhNCcsXG4gICAgJzMwMCc6ICcjYTE4ODdmJyxcbiAgICAnNDAwJzogJyM4ZDZlNjMnLFxuICAgICc1MDAnOiAnIzc5NTU0OCcsXG4gICAgJzYwMCc6ICcjNmQ0YzQxJyxcbiAgICAnNzAwJzogJyM1ZDQwMzcnLFxuICAgICc4MDAnOiAnIzRlMzQyZScsXG4gICAgJzkwMCc6ICcjM2UyNzIzJyxcbiAgICAnQTEwMCc6ICcjZDdjY2M4JyxcbiAgICAnQTIwMCc6ICcjYmNhYWE0JyxcbiAgICAnQTQwMCc6ICcjOGQ2ZTYzJyxcbiAgICAnQTcwMCc6ICcjNWQ0MDM3JyxcbiAgICAnY29udHJhc3REZWZhdWx0Q29sb3InOiAnbGlnaHQnLFxuICAgICdjb250cmFzdERhcmtDb2xvcnMnOiAnNTAgMTAwIDIwMCcsXG4gICAgJ2NvbnRyYXN0U3Ryb25nTGlnaHRDb2xvcnMnOiAnMzAwIDQwMCdcbiAgfSxcbiAgJ2dyZXknOiB7XG4gICAgJzUwJzogJyNmYWZhZmEnLFxuICAgICcxMDAnOiAnI2Y1ZjVmNScsXG4gICAgJzIwMCc6ICcjZWVlZWVlJyxcbiAgICAnMzAwJzogJyNlMGUwZTAnLFxuICAgICc0MDAnOiAnI2JkYmRiZCcsXG4gICAgJzUwMCc6ICcjOWU5ZTllJyxcbiAgICAnNjAwJzogJyM3NTc1NzUnLFxuICAgICc3MDAnOiAnIzYxNjE2MScsXG4gICAgJzgwMCc6ICcjNDI0MjQyJyxcbiAgICAnOTAwJzogJyMyMTIxMjEnLFxuICAgICcxMDAwJzogJyMwMDAwMDAnLFxuICAgICdBMTAwJzogJyNmZmZmZmYnLFxuICAgICdBMjAwJzogJyNlZWVlZWUnLFxuICAgICdBNDAwJzogJyNiZGJkYmQnLFxuICAgICdBNzAwJzogJyM2MTYxNjEnLFxuICAgICdjb250cmFzdERlZmF1bHRDb2xvcic6ICdkYXJrJyxcbiAgICAnY29udHJhc3RMaWdodENvbG9ycyc6ICc2MDAgNzAwIDgwMCA5MDAnXG4gIH0sXG4gICdibHVlLWdyZXknOiB7XG4gICAgJzUwJzogJyNlY2VmZjEnLFxuICAgICcxMDAnOiAnI2NmZDhkYycsXG4gICAgJzIwMCc6ICcjYjBiZWM1JyxcbiAgICAnMzAwJzogJyM5MGE0YWUnLFxuICAgICc0MDAnOiAnIzc4OTA5YycsXG4gICAgJzUwMCc6ICcjNjA3ZDhiJyxcbiAgICAnNjAwJzogJyM1NDZlN2EnLFxuICAgICc3MDAnOiAnIzQ1NWE2NCcsXG4gICAgJzgwMCc6ICcjMzc0NzRmJyxcbiAgICAnOTAwJzogJyMyNjMyMzgnLFxuICAgICdBMTAwJzogJyNjZmQ4ZGMnLFxuICAgICdBMjAwJzogJyNiMGJlYzUnLFxuICAgICdBNDAwJzogJyM3ODkwOWMnLFxuICAgICdBNzAwJzogJyM0NTVhNjQnLFxuICAgICdjb250cmFzdERlZmF1bHRDb2xvcic6ICdsaWdodCcsXG4gICAgJ2NvbnRyYXN0RGFya0NvbG9ycyc6ICc1MCAxMDAgMjAwIDMwMCcsXG4gICAgJ2NvbnRyYXN0U3Ryb25nTGlnaHRDb2xvcnMnOiAnNDAwIDUwMCdcbiAgfVxufSk7XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29yZS50aGVtaW5nJywgWydtYXRlcmlhbC5jb3JlLnRoZW1pbmcucGFsZXR0ZSddKVxuICAuZGlyZWN0aXZlKCdtZFRoZW1lJywgVGhlbWluZ0RpcmVjdGl2ZSlcbiAgLmRpcmVjdGl2ZSgnbWRUaGVtYWJsZScsIFRoZW1hYmxlRGlyZWN0aXZlKVxuICAucHJvdmlkZXIoJyRtZFRoZW1pbmcnLCBUaGVtaW5nUHJvdmlkZXIpXG4gIC5ydW4oZ2VuZXJhdGVUaGVtZXMpO1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJG1kVGhlbWluZ1Byb3ZpZGVyXG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvcmVcbiAqXG4gKiBAZGVzY3JpcHRpb24gUHJvdmlkZXIgdG8gY29uZmlndXJlIHRoZSBgJG1kVGhlbWluZ2Agc2VydmljZS5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRtZFRoZW1pbmdQcm92aWRlciNzZXREZWZhdWx0VGhlbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSB0aGVtZU5hbWUgRGVmYXVsdCB0aGVtZSBuYW1lIHRvIGJlIGFwcGxpZWQgdG8gZWxlbWVudHMuIERlZmF1bHQgdmFsdWUgaXMgYGRlZmF1bHRgLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJG1kVGhlbWluZ1Byb3ZpZGVyI2Fsd2F5c1dhdGNoVGhlbWVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gd2F0Y2ggV2hldGhlciBvciBub3QgdG8gYWx3YXlzIHdhdGNoIHRoZW1lcyBmb3IgY2hhbmdlcyBhbmQgcmUtYXBwbHlcbiAqIGNsYXNzZXMgd2hlbiB0aGV5IGNoYW5nZS4gRGVmYXVsdCBpcyBgZmFsc2VgLiBFbmFibGluZyBjYW4gcmVkdWNlIHBlcmZvcm1hbmNlLlxuICovXG5cbi8qIFNvbWUgRXhhbXBsZSBWYWxpZCBUaGVtaW5nIEV4cHJlc3Npb25zXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBJbnRlbnRpb24gZ3JvdXAgZXhwYW5zaW9uOiAodmFsaWQgZm9yIHByaW1hcnksIGFjY2VudCwgd2FybiwgYmFja2dyb3VuZClcbiAqXG4gKiB7e3ByaW1hcnktMTAwfX0gLSBncmFiIHNoYWRlIDEwMCBmcm9tIHRoZSBwcmltYXJ5IHBhbGV0dGVcbiAqIHt7cHJpbWFyeS0xMDAtMC43fX0gLSBncmFiIHNoYWRlIDEwMCwgYXBwbHkgb3BhY2l0eSBvZiAwLjdcbiAqIHt7cHJpbWFyeS1odWUtMX19IC0gZ3JhYiB0aGUgc2hhZGUgYXNzaWduZWQgdG8gaHVlLTEgZnJvbSB0aGUgcHJpbWFyeSBwYWxldHRlXG4gKiB7e3ByaW1hcnktaHVlLTEtMC43fX0gLSBhcHBseSAwLjcgb3BhY2l0eSB0byBwcmltYXJ5LWh1ZS0xXG4gKiB7e3ByaW1hcnktY29sb3J9fSAtIEdlbmVyYXRlcyAubWQtaHVlLTEsIC5tZC1odWUtMiwgLm1kLWh1ZS0zIHdpdGggY29uZmlndXJlZCBzaGFkZXMgc2V0IGZvciBlYWNoIGh1ZVxuICoge3twcmltYXJ5LWNvbG9yLTAuN319IC0gQXBwbHkgMC43IG9wYWNpdHkgdG8gZWFjaCBvZiB0aGUgYWJvdmUgcnVsZXNcbiAqIHt7cHJpbWFyeS1jb250cmFzdH19IC0gR2VuZXJhdGVzIC5tZC1odWUtMSwgLm1kLWh1ZS0yLCAubWQtaHVlLTMgd2l0aCBjb25maWd1cmVkIGNvbnRyYXN0IChpZS4gdGV4dCkgY29sb3Igc2hhZGVzIHNldCBmb3IgZWFjaCBodWVcbiAqIHt7cHJpbWFyeS1jb250cmFzdC0wLjd9fSAtIEFwcGx5IDAuNyBvcGFjaXR5IHRvIGVhY2ggb2YgdGhlIGFib3ZlIHJ1bGVzXG4gKlxuICogRm9yZWdyb3VuZCBleHBhbnNpb246IEFwcGxpZXMgcmdiYSB0byBibGFjay93aGl0ZSBmb3JlZ3JvdW5kIHRleHRcbiAqXG4gKiB7e2ZvcmVncm91bmQtMX19IC0gdXNlZCBmb3IgcHJpbWFyeSB0ZXh0XG4gKiB7e2ZvcmVncm91bmQtMn19IC0gdXNlZCBmb3Igc2Vjb25kYXJ5IHRleHQvZGl2aWRlclxuICoge3tmb3JlZ3JvdW5kLTN9fSAtIHVzZWQgZm9yIGRpc2FibGVkIHRleHRcbiAqIHt7Zm9yZWdyb3VuZC00fX0gLSB1c2VkIGZvciBkaXZpZGVyc1xuICpcbiAqL1xuXG4vLyBJbiBtZW1vcnkgZ2VuZXJhdGVkIENTUyBydWxlczsgcmVnaXN0ZXJlZCBieSB0aGVtZS5uYW1lXG52YXIgR0VORVJBVEVEID0geyB9O1xuXG4vLyBJbiBtZW1vcnkgc3RvcmFnZSBvZiBkZWZpbmVkIHRoZW1lcyBhbmQgY29sb3IgcGFsZXR0ZXMgKGJvdGggbG9hZGVkIGJ5IENTUywgYW5kIHVzZXIgc3BlY2lmaWVkKVxudmFyIFBBTEVUVEVTO1xudmFyIFRIRU1FUztcblxudmFyIERBUktfRk9SRUdST1VORCA9IHtcbiAgbmFtZTogJ2RhcmsnLFxuICAnMSc6ICdyZ2JhKDAsMCwwLDAuODcpJyxcbiAgJzInOiAncmdiYSgwLDAsMCwwLjU0KScsXG4gICczJzogJ3JnYmEoMCwwLDAsMC4yNiknLFxuICAnNCc6ICdyZ2JhKDAsMCwwLDAuMTIpJ1xufTtcbnZhciBMSUdIVF9GT1JFR1JPVU5EID0ge1xuICBuYW1lOiAnbGlnaHQnLFxuICAnMSc6ICdyZ2JhKDI1NSwyNTUsMjU1LDEuMCknLFxuICAnMic6ICdyZ2JhKDI1NSwyNTUsMjU1LDAuNyknLFxuICAnMyc6ICdyZ2JhKDI1NSwyNTUsMjU1LDAuMyknLFxuICAnNCc6ICdyZ2JhKDI1NSwyNTUsMjU1LDAuMTIpJ1xufTtcblxudmFyIERBUktfU0hBRE9XID0gJzFweCAxcHggMHB4IHJnYmEoMCwwLDAsMC40KSwgLTFweCAtMXB4IDBweCByZ2JhKDAsMCwwLDAuNCknO1xudmFyIExJR0hUX1NIQURPVyA9ICcnO1xuXG52YXIgREFSS19DT05UUkFTVF9DT0xPUiA9IGNvbG9yVG9SZ2JhQXJyYXkoJ3JnYmEoMCwwLDAsMC44NyknKTtcbnZhciBMSUdIVF9DT05UUkFTVF9DT0xPUiA9IGNvbG9yVG9SZ2JhQXJyYXkoJ3JnYmEoMjU1LDI1NSwyNTUsMC44NycpO1xudmFyIFNUUk9OR19MSUdIVF9DT05UUkFTVF9DT0xPUiA9IGNvbG9yVG9SZ2JhQXJyYXkoJ3JnYigyNTUsMjU1LDI1NSknKTtcblxudmFyIFRIRU1FX0NPTE9SX1RZUEVTID0gWydwcmltYXJ5JywgJ2FjY2VudCcsICd3YXJuJywgJ2JhY2tncm91bmQnXTtcbnZhciBERUZBVUxUX0NPTE9SX1RZUEUgPSAncHJpbWFyeSc7XG5cbi8vIEEgY29sb3IgaW4gYSB0aGVtZSB3aWxsIHVzZSB0aGVzZSBodWVzIGJ5IGRlZmF1bHQsIGlmIG5vdCBzcGVjaWZpZWQgYnkgdXNlci5cbnZhciBMSUdIVF9ERUZBVUxUX0hVRVMgPSB7XG4gICdhY2NlbnQnOiB7XG4gICAgJ2RlZmF1bHQnOiAnQTIwMCcsXG4gICAgJ2h1ZS0xJzogJ0ExMDAnLFxuICAgICdodWUtMic6ICdBNDAwJyxcbiAgICAnaHVlLTMnOiAnQTcwMCdcbiAgfSxcbiAgJ2JhY2tncm91bmQnOiB7XG4gICAgJ2RlZmF1bHQnOiAnQTEwMCcsXG4gICAgJ2h1ZS0xJzogJzMwMCcsXG4gICAgJ2h1ZS0yJzogJzgwMCcsXG4gICAgJ2h1ZS0zJzogJzkwMCdcbiAgfVxufTtcblxudmFyIERBUktfREVGQVVMVF9IVUVTID0ge1xuICAnYmFja2dyb3VuZCc6IHtcbiAgICAnZGVmYXVsdCc6ICc4MDAnLFxuICAgICdodWUtMSc6ICczMDAnLFxuICAgICdodWUtMic6ICc2MDAnLFxuICAgICdodWUtMyc6ICc5MDAnXG4gIH1cbn07XG5USEVNRV9DT0xPUl9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uKGNvbG9yVHlwZSkge1xuICAvLyBDb2xvciB0eXBlcyB3aXRoIHVuc3BlY2lmaWVkIGRlZmF1bHQgaHVlcyB3aWxsIHVzZSB0aGVzZSBkZWZhdWx0IGh1ZSB2YWx1ZXNcbiAgdmFyIGRlZmF1bHREZWZhdWx0SHVlcyA9IHtcbiAgICAnZGVmYXVsdCc6ICc1MDAnLFxuICAgICdodWUtMSc6ICczMDAnLFxuICAgICdodWUtMic6ICc4MDAnLFxuICAgICdodWUtMyc6ICdBMTAwJ1xuICB9O1xuICBpZiAoIUxJR0hUX0RFRkFVTFRfSFVFU1tjb2xvclR5cGVdKSBMSUdIVF9ERUZBVUxUX0hVRVNbY29sb3JUeXBlXSA9IGRlZmF1bHREZWZhdWx0SHVlcztcbiAgaWYgKCFEQVJLX0RFRkFVTFRfSFVFU1tjb2xvclR5cGVdKSBEQVJLX0RFRkFVTFRfSFVFU1tjb2xvclR5cGVdID0gZGVmYXVsdERlZmF1bHRIdWVzO1xufSk7XG5cbnZhciBWQUxJRF9IVUVfVkFMVUVTID0gW1xuICAnNTAnLCAnMTAwJywgJzIwMCcsICczMDAnLCAnNDAwJywgJzUwMCcsICc2MDAnLFxuICAnNzAwJywgJzgwMCcsICc5MDAnLCAnQTEwMCcsICdBMjAwJywgJ0E0MDAnLCAnQTcwMCdcbl07XG5cbmZ1bmN0aW9uIFRoZW1pbmdQcm92aWRlcigkbWRDb2xvclBhbGV0dGUpIHtcbiAgUEFMRVRURVMgPSB7IH07XG4gIFRIRU1FUyA9IHsgfTtcblxuICB2YXIgdGhlbWluZ1Byb3ZpZGVyO1xuICB2YXIgZGVmYXVsdFRoZW1lID0gJ2RlZmF1bHQnO1xuICB2YXIgYWx3YXlzV2F0Y2hUaGVtZSA9IGZhbHNlO1xuXG4gIC8vIExvYWQgSlMgRGVmaW5lZCBQYWxldHRlc1xuICBhbmd1bGFyLmV4dGVuZChQQUxFVFRFUywgJG1kQ29sb3JQYWxldHRlKTtcblxuICAvLyBEZWZhdWx0IHRoZW1lIGRlZmluZWQgaW4gY29yZS5qc1xuXG4gIFRoZW1pbmdTZXJ2aWNlLiRpbmplY3QgPSBbXCIkcm9vdFNjb3BlXCIsIFwiJGxvZ1wiXTtcbiAgcmV0dXJuIHRoZW1pbmdQcm92aWRlciA9IHtcbiAgICBkZWZpbmVQYWxldHRlOiBkZWZpbmVQYWxldHRlLFxuICAgIGV4dGVuZFBhbGV0dGU6IGV4dGVuZFBhbGV0dGUsXG4gICAgdGhlbWU6IHJlZ2lzdGVyVGhlbWUsXG5cbiAgICBzZXREZWZhdWx0VGhlbWU6IGZ1bmN0aW9uKHRoZW1lKSB7XG4gICAgICBkZWZhdWx0VGhlbWUgPSB0aGVtZTtcbiAgICB9LFxuICAgIGFsd2F5c1dhdGNoVGhlbWU6IGZ1bmN0aW9uKGFsd2F5c1dhdGNoKSB7XG4gICAgICBhbHdheXNXYXRjaFRoZW1lID0gYWx3YXlzV2F0Y2g7XG4gICAgfSxcbiAgICAkZ2V0OiBUaGVtaW5nU2VydmljZSxcbiAgICBfTElHSFRfREVGQVVMVF9IVUVTOiBMSUdIVF9ERUZBVUxUX0hVRVMsXG4gICAgX0RBUktfREVGQVVMVF9IVUVTOiBEQVJLX0RFRkFVTFRfSFVFUyxcbiAgICBfUEFMRVRURVM6IFBBTEVUVEVTLFxuICAgIF9USEVNRVM6IFRIRU1FUyxcbiAgICBfcGFyc2VSdWxlczogcGFyc2VSdWxlcyxcbiAgICBfcmdiYTogcmdiYVxuICB9O1xuXG4gIC8vIEV4YW1wbGU6ICRtZFRoZW1pbmdQcm92aWRlci5kZWZpbmVQYWxldHRlKCduZW9uUmVkJywgeyA1MDogJyNmNWZhZmEnLCAuLi4gfSk7XG4gIGZ1bmN0aW9uIGRlZmluZVBhbGV0dGUobmFtZSwgbWFwKSB7XG4gICAgbWFwID0gbWFwIHx8IHt9O1xuICAgIFBBTEVUVEVTW25hbWVdID0gY2hlY2tQYWxldHRlVmFsaWQobmFtZSwgbWFwKTtcbiAgICByZXR1cm4gdGhlbWluZ1Byb3ZpZGVyO1xuICB9XG5cbiAgLy8gUmV0dXJucyBhbiBuZXcgb2JqZWN0IHdoaWNoIGlzIGEgY29weSBvZiBhIGdpdmVuIHBhbGV0dGUgYG5hbWVgIHdpdGggdmFyaWFibGVzIGZyb21cbiAgLy8gYG1hcGAgb3ZlcndyaXR0ZW5cbiAgLy8gRXhhbXBsZTogdmFyIG5lb25SZWRNYXAgPSAkbWRUaGVtaW5nUHJvdmlkZXIuZXh0ZW5kUGFsZXR0ZSgncmVkJywgeyA1MDogJyNmNWZhZmFmYScgfSk7XG4gIGZ1bmN0aW9uIGV4dGVuZFBhbGV0dGUobmFtZSwgbWFwKSB7XG4gICAgcmV0dXJuIGNoZWNrUGFsZXR0ZVZhbGlkKG5hbWUsICBhbmd1bGFyLmV4dGVuZCh7fSwgUEFMRVRURVNbbmFtZV0gfHwge30sIG1hcCkgKTtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSB0aGF0IHBhbGV0dGUgaGFzIGFsbCByZXF1aXJlZCBodWVzXG4gIGZ1bmN0aW9uIGNoZWNrUGFsZXR0ZVZhbGlkKG5hbWUsIG1hcCkge1xuICAgIHZhciBtaXNzaW5nQ29sb3JzID0gVkFMSURfSFVFX1ZBTFVFUy5maWx0ZXIoZnVuY3Rpb24oZmllbGQpIHtcbiAgICAgIHJldHVybiAhbWFwW2ZpZWxkXTtcbiAgICB9KTtcbiAgICBpZiAobWlzc2luZ0NvbG9ycy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgY29sb3JzICUxIGluIHBhbGV0dGUgJTIhXCJcbiAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnJTEnLCBtaXNzaW5nQ29sb3JzLmpvaW4oJywgJykpXG4gICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoJyUyJywgbmFtZSkpO1xuICAgIH1cblxuICAgIHJldHVybiBtYXA7XG4gIH1cblxuICAvLyBSZWdpc3RlciBhIHRoZW1lICh3aGljaCBpcyBhIGNvbGxlY3Rpb24gb2YgY29sb3IgcGFsZXR0ZXMgdG8gdXNlIHdpdGggdmFyaW91cyBzdGF0ZXNcbiAgLy8gaWUuIHdhcm4sIGFjY2VudCwgcHJpbWFyeSApXG4gIC8vIE9wdGlvbmFsbHkgaW5oZXJpdCBmcm9tIGFuIGV4aXN0aW5nIHRoZW1lXG4gIC8vICRtZFRoZW1pbmdQcm92aWRlci50aGVtZSgnY3VzdG9tLXRoZW1lJykucHJpbWFyeVBhbGV0dGUoJ3JlZCcpO1xuICBmdW5jdGlvbiByZWdpc3RlclRoZW1lKG5hbWUsIGluaGVyaXRGcm9tKSB7XG4gICAgaWYgKFRIRU1FU1tuYW1lXSkgcmV0dXJuIFRIRU1FU1tuYW1lXTtcblxuICAgIGluaGVyaXRGcm9tID0gaW5oZXJpdEZyb20gfHwgJ2RlZmF1bHQnO1xuXG4gICAgdmFyIHBhcmVudFRoZW1lID0gdHlwZW9mIGluaGVyaXRGcm9tID09PSAnc3RyaW5nJyA/IFRIRU1FU1tpbmhlcml0RnJvbV0gOiBpbmhlcml0RnJvbTtcbiAgICB2YXIgdGhlbWUgPSBuZXcgVGhlbWUobmFtZSk7XG5cbiAgICBpZiAocGFyZW50VGhlbWUpIHtcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChwYXJlbnRUaGVtZS5jb2xvcnMsIGZ1bmN0aW9uKGNvbG9yLCBjb2xvclR5cGUpIHtcbiAgICAgICAgdGhlbWUuY29sb3JzW2NvbG9yVHlwZV0gPSB7XG4gICAgICAgICAgbmFtZTogY29sb3IubmFtZSxcbiAgICAgICAgICAvLyBNYWtlIHN1cmUgYSBDT1BZIG9mIHRoZSBodWVzIGlzIGdpdmVuIHRvIHRoZSBjaGlsZCBjb2xvcixcbiAgICAgICAgICAvLyBub3QgdGhlIHNhbWUgcmVmZXJlbmNlLlxuICAgICAgICAgIGh1ZXM6IGFuZ3VsYXIuZXh0ZW5kKHt9LCBjb2xvci5odWVzKVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICAgIFRIRU1FU1tuYW1lXSA9IHRoZW1lO1xuXG4gICAgcmV0dXJuIHRoZW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gVGhlbWUobmFtZSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZWxmLm5hbWUgPSBuYW1lO1xuICAgIHNlbGYuY29sb3JzID0ge307XG5cbiAgICBzZWxmLmRhcmsgPSBzZXREYXJrO1xuICAgIHNldERhcmsoZmFsc2UpO1xuXG4gICAgZnVuY3Rpb24gc2V0RGFyayhpc0RhcmspIHtcbiAgICAgIGlzRGFyayA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDAgPyB0cnVlIDogISFpc0Rhcms7XG5cbiAgICAgIC8vIElmIG5vIGNoYW5nZSwgYWJvcnRcbiAgICAgIGlmIChpc0RhcmsgPT09IHNlbGYuaXNEYXJrKSByZXR1cm47XG5cbiAgICAgIHNlbGYuaXNEYXJrID0gaXNEYXJrO1xuXG4gICAgICBzZWxmLmZvcmVncm91bmRQYWxldHRlID0gc2VsZi5pc0RhcmsgPyBMSUdIVF9GT1JFR1JPVU5EIDogREFSS19GT1JFR1JPVU5EO1xuICAgICAgc2VsZi5mb3JlZ3JvdW5kU2hhZG93ID0gc2VsZi5pc0RhcmsgPyBEQVJLX1NIQURPVyA6IExJR0hUX1NIQURPVztcblxuICAgICAgLy8gTGlnaHQgYW5kIGRhcmsgdGhlbWVzIGhhdmUgZGlmZmVyZW50IGRlZmF1bHQgaHVlcy5cbiAgICAgIC8vIEdvIHRocm91Z2ggZWFjaCBleGlzdGluZyBjb2xvciB0eXBlIGZvciB0aGlzIHRoZW1lLCBhbmQgZm9yIGV2ZXJ5XG4gICAgICAvLyBodWUgdmFsdWUgdGhhdCBpcyBzdGlsbCB0aGUgZGVmYXVsdCBodWUgdmFsdWUgZnJvbSB0aGUgcHJldmlvdXMgbGlnaHQvZGFyayBzZXR0aW5nLFxuICAgICAgLy8gc2V0IGl0IHRvIHRoZSBkZWZhdWx0IGh1ZSB2YWx1ZSBmcm9tIHRoZSBuZXcgbGlnaHQvZGFyayBzZXR0aW5nLlxuICAgICAgdmFyIG5ld0RlZmF1bHRIdWVzID0gc2VsZi5pc0RhcmsgPyBEQVJLX0RFRkFVTFRfSFVFUyA6IExJR0hUX0RFRkFVTFRfSFVFUztcbiAgICAgIHZhciBvbGREZWZhdWx0SHVlcyA9IHNlbGYuaXNEYXJrID8gTElHSFRfREVGQVVMVF9IVUVTIDogREFSS19ERUZBVUxUX0hVRVM7XG4gICAgICBhbmd1bGFyLmZvckVhY2gobmV3RGVmYXVsdEh1ZXMsIGZ1bmN0aW9uKG5ld0RlZmF1bHRzLCBjb2xvclR5cGUpIHtcbiAgICAgICAgdmFyIGNvbG9yID0gc2VsZi5jb2xvcnNbY29sb3JUeXBlXTtcbiAgICAgICAgdmFyIG9sZERlZmF1bHRzID0gb2xkRGVmYXVsdEh1ZXNbY29sb3JUeXBlXTtcbiAgICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgICAgZm9yICh2YXIgaHVlTmFtZSBpbiBjb2xvci5odWVzKSB7XG4gICAgICAgICAgICBpZiAoY29sb3IuaHVlc1todWVOYW1lXSA9PT0gb2xkRGVmYXVsdHNbaHVlTmFtZV0pIHtcbiAgICAgICAgICAgICAgY29sb3IuaHVlc1todWVOYW1lXSA9IG5ld0RlZmF1bHRzW2h1ZU5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIFRIRU1FX0NPTE9SX1RZUEVTLmZvckVhY2goZnVuY3Rpb24oY29sb3JUeXBlKSB7XG4gICAgICB2YXIgZGVmYXVsdEh1ZXMgPSAoc2VsZi5pc0RhcmsgPyBEQVJLX0RFRkFVTFRfSFVFUyA6IExJR0hUX0RFRkFVTFRfSFVFUylbY29sb3JUeXBlXTtcbiAgICAgIHNlbGZbY29sb3JUeXBlICsgJ1BhbGV0dGUnXSA9IGZ1bmN0aW9uIHNldFBhbGV0dGVUeXBlKHBhbGV0dGVOYW1lLCBodWVzKSB7XG4gICAgICAgIHZhciBjb2xvciA9IHNlbGYuY29sb3JzW2NvbG9yVHlwZV0gPSB7XG4gICAgICAgICAgbmFtZTogcGFsZXR0ZU5hbWUsXG4gICAgICAgICAgaHVlczogYW5ndWxhci5leHRlbmQoe30sIGRlZmF1bHRIdWVzLCBodWVzKVxuICAgICAgICB9O1xuXG4gICAgICAgIE9iamVjdC5rZXlzKGNvbG9yLmh1ZXMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgIGlmICghZGVmYXVsdEh1ZXNbbmFtZV0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaHVlIG5hbWUgJyUxJyBpbiB0aGVtZSAlMidzICUzIGNvbG9yICU0LiBBdmFpbGFibGUgaHVlIG5hbWVzOiAlNFwiXG4gICAgICAgICAgICAgIC5yZXBsYWNlKCclMScsIG5hbWUpXG4gICAgICAgICAgICAgIC5yZXBsYWNlKCclMicsIHNlbGYubmFtZSlcbiAgICAgICAgICAgICAgLnJlcGxhY2UoJyUzJywgcGFsZXR0ZU5hbWUpXG4gICAgICAgICAgICAgIC5yZXBsYWNlKCclNCcsIE9iamVjdC5rZXlzKGRlZmF1bHRIdWVzKS5qb2luKCcsICcpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3Qua2V5cyhjb2xvci5odWVzKS5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGNvbG9yLmh1ZXNba2V5XTtcbiAgICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbihodWVWYWx1ZSkge1xuICAgICAgICAgIGlmIChWQUxJRF9IVUVfVkFMVUVTLmluZGV4T2YoaHVlVmFsdWUpID09IC0xKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGh1ZSB2YWx1ZSAnJTEnIGluIHRoZW1lICUyJ3MgJTMgY29sb3IgJTQuIEF2YWlsYWJsZSBodWUgdmFsdWVzOiAlNVwiXG4gICAgICAgICAgICAgIC5yZXBsYWNlKCclMScsIGh1ZVZhbHVlKVxuICAgICAgICAgICAgICAucmVwbGFjZSgnJTInLCBzZWxmLm5hbWUpXG4gICAgICAgICAgICAgIC5yZXBsYWNlKCclMycsIGNvbG9yVHlwZSlcbiAgICAgICAgICAgICAgLnJlcGxhY2UoJyU0JywgcGFsZXR0ZU5hbWUpXG4gICAgICAgICAgICAgIC5yZXBsYWNlKCclNScsIFZBTElEX0hVRV9WQUxVRVMuam9pbignLCAnKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9O1xuXG4gICAgICBzZWxmW2NvbG9yVHlwZSArICdDb2xvciddID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgY29uc29sZS53YXJuKCckbWRUaGVtaW5nUHJvdmlkZXJUaGVtZS4nICsgY29sb3JUeXBlICsgJ0NvbG9yKCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAnVXNlICRtZFRoZW1pbmdQcm92aWRlclRoZW1lLicgKyBjb2xvclR5cGUgKyAnUGFsZXR0ZSgpIGluc3RlYWQuJyk7XG4gICAgICAgIHJldHVybiBzZWxmW2NvbG9yVHlwZSArICdQYWxldHRlJ10uYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRtZFRoZW1pbmdcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFNlcnZpY2UgdGhhdCBtYWtlcyBhbiBlbGVtZW50IGFwcGx5IHRoZW1pbmcgcmVsYXRlZCBjbGFzc2VzIHRvIGl0c2VsZi5cbiAgICpcbiAgICogYGBganNcbiAgICogYXBwLmRpcmVjdGl2ZSgnbXlGYW5jeURpcmVjdGl2ZScsIGZ1bmN0aW9uKCRtZFRoZW1pbmcpIHtcbiAgICogICByZXR1cm4ge1xuICAgKiAgICAgcmVzdHJpY3Q6ICdlJyxcbiAgICogICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbCwgYXR0cnMpIHtcbiAgICogICAgICAgJG1kVGhlbWluZyhlbCk7XG4gICAqICAgICB9XG4gICAqICAgfTtcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKiBAcGFyYW0ge2VsPX0gZWxlbWVudCB0byBhcHBseSB0aGVtaW5nIHRvXG4gICAqL1xuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gVGhlbWluZ1NlcnZpY2UoJHJvb3RTY29wZSwgJGxvZykge1xuXG4gICAgYXBwbHlUaGVtZS5pbmhlcml0ID0gZnVuY3Rpb24oZWwsIHBhcmVudCkge1xuICAgICAgdmFyIGN0cmwgPSBwYXJlbnQuY29udHJvbGxlcignbWRUaGVtZScpO1xuXG4gICAgICB2YXIgYXR0clRoZW1lVmFsdWUgPSBlbC5hdHRyKCdtZC10aGVtZS13YXRjaCcpO1xuICAgICAgaWYgKCAoYWx3YXlzV2F0Y2hUaGVtZSB8fCBhbmd1bGFyLmlzRGVmaW5lZChhdHRyVGhlbWVWYWx1ZSkpICYmIGF0dHJUaGVtZVZhbHVlICE9ICdmYWxzZScpIHtcbiAgICAgICAgdmFyIGRlcmVnaXN0ZXJXYXRjaCA9ICRyb290U2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBjdHJsICYmIGN0cmwuJG1kVGhlbWUgfHwgZGVmYXVsdFRoZW1lO1xuICAgICAgICB9LCBjaGFuZ2VUaGVtZSk7XG4gICAgICAgIGVsLm9uKCckZGVzdHJveScsIGRlcmVnaXN0ZXJXYXRjaCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdGhlbWUgPSBjdHJsICYmIGN0cmwuJG1kVGhlbWUgfHwgZGVmYXVsdFRoZW1lO1xuICAgICAgICBjaGFuZ2VUaGVtZSh0aGVtZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNoYW5nZVRoZW1lKHRoZW1lKSB7XG4gICAgICAgIGlmICghcmVnaXN0ZXJlZCh0aGVtZSkpIHtcbiAgICAgICAgICAkbG9nLndhcm4oJ0F0dGVtcHRlZCB0byB1c2UgdW5yZWdpc3RlcmVkIHRoZW1lIFxcJycgKyB0aGVtZSArICdcXCcuICcgK1xuICAgICAgICAgICAgICAgICAgICAnUmVnaXN0ZXIgaXQgd2l0aCAkbWRUaGVtaW5nUHJvdmlkZXIudGhlbWUoKS4nKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb2xkVGhlbWUgPSBlbC5kYXRhKCckbWRUaGVtZU5hbWUnKTtcbiAgICAgICAgaWYgKG9sZFRoZW1lKSBlbC5yZW1vdmVDbGFzcygnbWQtJyArIG9sZFRoZW1lICsnLXRoZW1lJyk7XG4gICAgICAgIGVsLmFkZENsYXNzKCdtZC0nICsgdGhlbWUgKyAnLXRoZW1lJyk7XG4gICAgICAgIGVsLmRhdGEoJyRtZFRoZW1lTmFtZScsIHRoZW1lKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgYXBwbHlUaGVtZS5USEVNRVMgPSBhbmd1bGFyLmV4dGVuZCh7fSwgVEhFTUVTKTtcbiAgICBhcHBseVRoZW1lLmRlZmF1bHRUaGVtZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gZGVmYXVsdFRoZW1lOyB9O1xuICAgIGFwcGx5VGhlbWUucmVnaXN0ZXJlZCA9IHJlZ2lzdGVyZWQ7XG5cbiAgICByZXR1cm4gYXBwbHlUaGVtZTtcblxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyZWQodGhlbWVOYW1lKSB7XG4gICAgICBpZiAodGhlbWVOYW1lID09PSB1bmRlZmluZWQgfHwgdGhlbWVOYW1lID09PSAnJykgcmV0dXJuIHRydWU7XG4gICAgICByZXR1cm4gYXBwbHlUaGVtZS5USEVNRVNbdGhlbWVOYW1lXSAhPT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5VGhlbWUoc2NvcGUsIGVsKSB7XG4gICAgICAvLyBBbGxvdyB1cyB0byBiZSBpbnZva2VkIHZpYSBhIGxpbmtpbmcgZnVuY3Rpb24gc2lnbmF0dXJlLlxuICAgICAgaWYgKGVsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZWwgPSBzY29wZTtcbiAgICAgICAgc2NvcGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoc2NvcGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzY29wZSA9ICRyb290U2NvcGU7XG4gICAgICB9XG4gICAgICBhcHBseVRoZW1lLmluaGVyaXQoZWwsIGVsKTtcbiAgICB9XG4gIH1cbn1cblRoZW1pbmdQcm92aWRlci4kaW5qZWN0ID0gW1wiJG1kQ29sb3JQYWxldHRlXCJdO1xuXG5mdW5jdGlvbiBUaGVtaW5nRGlyZWN0aXZlKCRtZFRoZW1pbmcsICRpbnRlcnBvbGF0ZSwgJGxvZykge1xuICByZXR1cm4ge1xuICAgIHByaW9yaXR5OiAxMDAsXG4gICAgbGluazoge1xuICAgICAgcHJlOiBmdW5jdGlvbihzY29wZSwgZWwsIGF0dHJzKSB7XG4gICAgICAgIHZhciBjdHJsID0ge1xuICAgICAgICAgICRzZXRUaGVtZTogZnVuY3Rpb24odGhlbWUpIHtcbiAgICAgICAgICAgIGlmICghJG1kVGhlbWluZy5yZWdpc3RlcmVkKHRoZW1lKSkge1xuICAgICAgICAgICAgICAkbG9nLndhcm4oJ2F0dGVtcHRlZCB0byB1c2UgdW5yZWdpc3RlcmVkIHRoZW1lIFxcJycgKyB0aGVtZSArICdcXCcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0cmwuJG1kVGhlbWUgPSB0aGVtZTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGVsLmRhdGEoJyRtZFRoZW1lQ29udHJvbGxlcicsIGN0cmwpO1xuICAgICAgICBjdHJsLiRzZXRUaGVtZSgkaW50ZXJwb2xhdGUoYXR0cnMubWRUaGVtZSkoc2NvcGUpKTtcbiAgICAgICAgYXR0cnMuJG9ic2VydmUoJ21kVGhlbWUnLCBjdHJsLiRzZXRUaGVtZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuVGhlbWluZ0RpcmVjdGl2ZS4kaW5qZWN0ID0gW1wiJG1kVGhlbWluZ1wiLCBcIiRpbnRlcnBvbGF0ZVwiLCBcIiRsb2dcIl07XG5cbmZ1bmN0aW9uIFRoZW1hYmxlRGlyZWN0aXZlKCRtZFRoZW1pbmcpIHtcbiAgcmV0dXJuICRtZFRoZW1pbmc7XG59XG5UaGVtYWJsZURpcmVjdGl2ZS4kaW5qZWN0ID0gW1wiJG1kVGhlbWluZ1wiXTtcblxuZnVuY3Rpb24gcGFyc2VSdWxlcyh0aGVtZSwgY29sb3JUeXBlLCBydWxlcykge1xuICBjaGVja1ZhbGlkUGFsZXR0ZSh0aGVtZSwgY29sb3JUeXBlKTtcblxuICBydWxlcyA9IHJ1bGVzLnJlcGxhY2UoL1RIRU1FX05BTUUvZywgdGhlbWUubmFtZSk7XG4gIHZhciBnZW5lcmF0ZWRSdWxlcyA9IFtdO1xuICB2YXIgY29sb3IgPSB0aGVtZS5jb2xvcnNbY29sb3JUeXBlXTtcblxuICB2YXIgdGhlbWVOYW1lUmVnZXggPSBuZXcgUmVnRXhwKCcubWQtJyArIHRoZW1lLm5hbWUgKyAnLXRoZW1lJywgJ2cnKTtcbiAgLy8gTWF0Y2hlcyAne3sgcHJpbWFyeS1jb2xvciB9fScsIGV0Y1xuICB2YXIgaHVlUmVnZXggPSBuZXcgUmVnRXhwKCcoXFwnfFwiKT97e1xcXFxzKignICsgY29sb3JUeXBlICsgJyktKGNvbG9yfGNvbnRyYXN0KS0/KFxcXFxkXFxcXC4/XFxcXGQqKT9cXFxccyp9fShcXFwifFxcJyk/JywnZycpO1xuICB2YXIgc2ltcGxlVmFyaWFibGVSZWdleCA9IC8nP1wiP1xce1xce1xccyooW2EtekEtWl0rKS0oQT9cXGQrfGh1ZVxcLVswLTNdfHNoYWRvdyktPyhcXGRcXC4/XFxkKik/XFxzKlxcfVxcfSc/XCI/L2c7XG4gIHZhciBwYWxldHRlID0gUEFMRVRURVNbY29sb3IubmFtZV07XG5cbiAgLy8gZmluZCBhbmQgcmVwbGFjZSBzaW1wbGUgdmFyaWFibGVzIHdoZXJlIHdlIHVzZSBhIHNwZWNpZmljIGh1ZSwgbm90IGFuIGVudGlyZSBwYWxldHRlXG4gIC8vIGVnLiBcInt7cHJpbWFyeS0xMDB9fVwiXG4gIC8vXFwoJyArIFRIRU1FX0NPTE9SX1RZUEVTLmpvaW4oJ1xcfCcpICsgJ1xcKSdcbiAgcnVsZXMgPSBydWxlcy5yZXBsYWNlKHNpbXBsZVZhcmlhYmxlUmVnZXgsIGZ1bmN0aW9uKG1hdGNoLCBjb2xvclR5cGUsIGh1ZSwgb3BhY2l0eSkge1xuICAgIGlmIChjb2xvclR5cGUgPT09ICdmb3JlZ3JvdW5kJykge1xuICAgICAgaWYgKGh1ZSA9PSAnc2hhZG93Jykge1xuICAgICAgICByZXR1cm4gdGhlbWUuZm9yZWdyb3VuZFNoYWRvdztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGVtZS5mb3JlZ3JvdW5kUGFsZXR0ZVtodWVdIHx8IHRoZW1lLmZvcmVncm91bmRQYWxldHRlWycxJ107XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChodWUuaW5kZXhPZignaHVlJykgPT09IDApIHtcbiAgICAgIGh1ZSA9IHRoZW1lLmNvbG9yc1tjb2xvclR5cGVdLmh1ZXNbaHVlXTtcbiAgICB9XG4gICAgcmV0dXJuIHJnYmEoIChQQUxFVFRFU1sgdGhlbWUuY29sb3JzW2NvbG9yVHlwZV0ubmFtZSBdW2h1ZV0gfHwgJycpLnZhbHVlLCBvcGFjaXR5ICk7XG4gIH0pO1xuXG4gIC8vIEZvciBlYWNoIHR5cGUsIGdlbmVyYXRlIHJ1bGVzIGZvciBlYWNoIGh1ZSAoaWUuIGRlZmF1bHQsIG1kLWh1ZS0xLCBtZC1odWUtMiwgbWQtaHVlLTMpXG4gIGFuZ3VsYXIuZm9yRWFjaChjb2xvci5odWVzLCBmdW5jdGlvbihodWVWYWx1ZSwgaHVlTmFtZSkge1xuICAgIHZhciBuZXdSdWxlID0gcnVsZXNcbiAgICAgIC5yZXBsYWNlKGh1ZVJlZ2V4LCBmdW5jdGlvbihtYXRjaCwgXywgY29sb3JUeXBlLCBodWVUeXBlLCBvcGFjaXR5KSB7XG4gICAgICAgIHJldHVybiByZ2JhKHBhbGV0dGVbaHVlVmFsdWVdW2h1ZVR5cGUgPT09ICdjb2xvcicgPyAndmFsdWUnIDogJ2NvbnRyYXN0J10sIG9wYWNpdHkpO1xuICAgICAgfSk7XG4gICAgaWYgKGh1ZU5hbWUgIT09ICdkZWZhdWx0Jykge1xuICAgICAgbmV3UnVsZSA9IG5ld1J1bGUucmVwbGFjZSh0aGVtZU5hbWVSZWdleCwgJy5tZC0nICsgdGhlbWUubmFtZSArICctdGhlbWUubWQtJyArIGh1ZU5hbWUpO1xuICAgIH1cblxuICAgIC8vIERvbid0IGFwcGx5IGEgc2VsZWN0b3IgcnVsZSB0byB0aGUgZGVmYXVsdCB0aGVtZSwgbWFraW5nIGl0IGVhc2llciB0byBvdmVycmlkZVxuICAgIC8vIHN0eWxlcyBvZiB0aGUgYmFzZS1jb21wb25lbnRcbiAgICBpZiAodGhlbWUubmFtZSA9PSAnZGVmYXVsdCcpIHtcbiAgICAgIG5ld1J1bGUgPSBuZXdSdWxlLnJlcGxhY2UoL1xcLm1kLWRlZmF1bHQtdGhlbWUvZywgJycpO1xuICAgIH1cbiAgICBnZW5lcmF0ZWRSdWxlcy5wdXNoKG5ld1J1bGUpO1xuICB9KTtcblxuICByZXR1cm4gZ2VuZXJhdGVkUnVsZXM7XG59XG5cbi8vIEdlbmVyYXRlIG91ciB0aGVtZXMgYXQgcnVuIHRpbWUgZ2l2ZW4gdGhlIHN0YXRlIG9mIFRIRU1FUyBhbmQgUEFMRVRURVNcbmZ1bmN0aW9uIGdlbmVyYXRlVGhlbWVzKCRpbmplY3Rvcikge1xuXG4gIHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgdmFyIGZpcnN0Q2hpbGQgPSBoZWFkID8gaGVhZC5maXJzdEVsZW1lbnRDaGlsZCA6IG51bGw7XG4gIHZhciB0aGVtZUNzcyA9ICRpbmplY3Rvci5oYXMoJyRNRF9USEVNRV9DU1MnKSA/ICRpbmplY3Rvci5nZXQoJyRNRF9USEVNRV9DU1MnKSA6ICcnO1xuXG4gIGlmICggIWZpcnN0Q2hpbGQgKSByZXR1cm47XG4gIGlmICh0aGVtZUNzcy5sZW5ndGggPT09IDApIHJldHVybjsgLy8gbm8gcnVsZXMsIHNvIG5vIHBvaW50IGluIHJ1bm5pbmcgdGhpcyBleHBlbnNpdmUgdGFza1xuXG4gIC8vIEV4cG9zZSBjb250cmFzdCBjb2xvcnMgZm9yIHBhbGV0dGVzIHRvIGVuc3VyZSB0aGF0IHRleHQgaXMgYWx3YXlzIHJlYWRhYmxlXG4gIGFuZ3VsYXIuZm9yRWFjaChQQUxFVFRFUywgc2FuaXRpemVQYWxldHRlKTtcblxuICAvLyBNRF9USEVNRV9DU1MgaXMgYSBzdHJpbmcgZ2VuZXJhdGVkIGJ5IHRoZSBidWlsZCBwcm9jZXNzIHRoYXQgaW5jbHVkZXMgYWxsIHRoZSB0aGVtYWJsZVxuICAvLyBjb21wb25lbnRzIGFzIHRlbXBsYXRlc1xuXG4gIC8vIEJyZWFrIHRoZSBDU1MgaW50byBpbmRpdmlkdWFsIHJ1bGVzXG4gIHZhciBydWxlc0J5VHlwZSA9IHt9O1xuICB2YXIgcnVsZXMgPSB0aGVtZUNzc1xuICAgICAgICAgICAgICAgICAgLnNwbGl0KC9cXH0oPyEoXFx9fCd8XCJ8OykpLylcbiAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24ocnVsZSkgeyByZXR1cm4gcnVsZSAmJiBydWxlLmxlbmd0aDsgfSlcbiAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24ocnVsZSkgeyByZXR1cm4gcnVsZS50cmltKCkgKyAnfSc7IH0pO1xuXG5cbiAgdmFyIHJ1bGVNYXRjaFJlZ2V4ID0gbmV3IFJlZ0V4cCgnbWQtKCcgKyBUSEVNRV9DT0xPUl9UWVBFUy5qb2luKCd8JykgKyAnKScsICdnJyk7XG5cbiAgVEhFTUVfQ09MT1JfVFlQRVMuZm9yRWFjaChmdW5jdGlvbih0eXBlKSB7XG4gICAgcnVsZXNCeVR5cGVbdHlwZV0gPSAnJztcbiAgfSk7XG5cblxuICAvLyBTb3J0IHRoZSBydWxlcyBiYXNlZCBvbiB0eXBlLCBhbGxvd2luZyB1cyB0byBkbyBjb2xvciBzdWJzdGl0dXRpb24gb24gYSBwZXItdHlwZSBiYXNpc1xuICBydWxlcy5mb3JFYWNoKGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICB2YXIgbWF0Y2ggPSBydWxlLm1hdGNoKHJ1bGVNYXRjaFJlZ2V4KTtcbiAgICAvLyBGaXJzdDogdGVzdCB0aGF0IGlmIHRoZSBydWxlIGhhcyAnLm1kLWFjY2VudCcsIGl0IGdvZXMgaW50byB0aGUgYWNjZW50IHNldCBvZiBydWxlc1xuICAgIGZvciAodmFyIGkgPSAwLCB0eXBlOyB0eXBlID0gVEhFTUVfQ09MT1JfVFlQRVNbaV07IGkrKykge1xuICAgICAgaWYgKHJ1bGUuaW5kZXhPZignLm1kLScgKyB0eXBlKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiBydWxlc0J5VHlwZVt0eXBlXSArPSBydWxlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIG5vIGVnICdtZC1hY2NlbnQnIGNsYXNzIGlzIGZvdW5kLCB0cnkgdG8ganVzdCBmaW5kICdhY2NlbnQnIGluIHRoZSBydWxlIGFuZCBndWVzcyBmcm9tXG4gICAgLy8gdGhlcmVcbiAgICBmb3IgKGkgPSAwOyB0eXBlID0gVEhFTUVfQ09MT1JfVFlQRVNbaV07IGkrKykge1xuICAgICAgaWYgKHJ1bGUuaW5kZXhPZih0eXBlKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiBydWxlc0J5VHlwZVt0eXBlXSArPSBydWxlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlZmF1bHQgdG8gdGhlIHByaW1hcnkgYXJyYXlcbiAgICByZXR1cm4gcnVsZXNCeVR5cGVbREVGQVVMVF9DT0xPUl9UWVBFXSArPSBydWxlO1xuICB9KTtcblxuICAgIC8vIEZvciBlYWNoIHRoZW1lLCB1c2UgdGhlIGNvbG9yIHBhbGV0dGVzIHNwZWNpZmllZCBmb3JcbiAgICAvLyBgcHJpbWFyeWAsIGB3YXJuYCBhbmQgYGFjY2VudGAgdG8gZ2VuZXJhdGUgQ1NTIHJ1bGVzLlxuXG4gICAgYW5ndWxhci5mb3JFYWNoKFRIRU1FUywgZnVuY3Rpb24odGhlbWUpIHtcbiAgICAgIGlmICggIUdFTkVSQVRFRFt0aGVtZS5uYW1lXSApIHtcblxuXG4gICAgICAgIFRIRU1FX0NPTE9SX1RZUEVTLmZvckVhY2goZnVuY3Rpb24oY29sb3JUeXBlKSB7XG4gICAgICAgICAgdmFyIHN0eWxlU3RyaW5ncyA9IHBhcnNlUnVsZXModGhlbWUsIGNvbG9yVHlwZSwgcnVsZXNCeVR5cGVbY29sb3JUeXBlXSk7XG4gICAgICAgICAgd2hpbGUgKHN0eWxlU3RyaW5ncy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgICAgICAgICAgc3R5bGUuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvY3NzJyk7XG4gICAgICAgICAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzdHlsZVN0cmluZ3Muc2hpZnQoKSkpO1xuICAgICAgICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoc3R5bGUsIGZpcnN0Q2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxuICAgICAgICBpZiAodGhlbWUuY29sb3JzLnByaW1hcnkubmFtZSA9PSB0aGVtZS5jb2xvcnMuYWNjZW50Lm5hbWUpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCIkbWRUaGVtaW5nUHJvdmlkZXI6IFVzaW5nIHRoZSBzYW1lIHBhbGV0dGUgZm9yIHByaW1hcnkgYW5kXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICBcIiBhY2NlbnQuIFRoaXMgdmlvbGF0ZXMgdGhlIG1hdGVyaWFsIGRlc2lnbiBzcGVjLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEdFTkVSQVRFRFt0aGVtZS5uYW1lXSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cblxuICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqXG4gIC8vIEludGVybmFsIGZ1bmN0aW9uc1xuICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgLy8gVGhlIHVzZXIgc3BlY2lmaWVzIGEgJ2RlZmF1bHQnIGNvbnRyYXN0IGNvbG9yIGFzIGVpdGhlciBsaWdodCBvciBkYXJrLFxuICAvLyB0aGVuIGV4cGxpY2l0bHkgbGlzdHMgd2hpY2ggaHVlcyBhcmUgdGhlIG9wcG9zaXRlIGNvbnRyYXN0IChlZy4gQTEwMCBoYXMgZGFyaywgQTIwMCBoYXMgbGlnaHQpXG4gIGZ1bmN0aW9uIHNhbml0aXplUGFsZXR0ZShwYWxldHRlKSB7XG4gICAgdmFyIGRlZmF1bHRDb250cmFzdCA9IHBhbGV0dGUuY29udHJhc3REZWZhdWx0Q29sb3I7XG4gICAgdmFyIGxpZ2h0Q29sb3JzID0gcGFsZXR0ZS5jb250cmFzdExpZ2h0Q29sb3JzIHx8IFtdO1xuICAgIHZhciBzdHJvbmdMaWdodENvbG9ycyA9IHBhbGV0dGUuY29udHJhc3RTdHJvbmdMaWdodENvbG9ycyB8fCBbXTtcbiAgICB2YXIgZGFya0NvbG9ycyA9IHBhbGV0dGUuY29udHJhc3REYXJrQ29sb3JzIHx8IFtdO1xuXG4gICAgLy8gVGhlc2UgY29sb3JzIGFyZSBwcm92aWRlZCBhcyBzcGFjZS1zZXBhcmF0ZWQgbGlzdHNcbiAgICBpZiAodHlwZW9mIGxpZ2h0Q29sb3JzID09PSAnc3RyaW5nJykgbGlnaHRDb2xvcnMgPSBsaWdodENvbG9ycy5zcGxpdCgnICcpO1xuICAgIGlmICh0eXBlb2Ygc3Ryb25nTGlnaHRDb2xvcnMgPT09ICdzdHJpbmcnKSBzdHJvbmdMaWdodENvbG9ycyA9IHN0cm9uZ0xpZ2h0Q29sb3JzLnNwbGl0KCcgJyk7XG4gICAgaWYgKHR5cGVvZiBkYXJrQ29sb3JzID09PSAnc3RyaW5nJykgZGFya0NvbG9ycyA9IGRhcmtDb2xvcnMuc3BsaXQoJyAnKTtcblxuICAgIC8vIENsZWFudXAgYWZ0ZXIgb3Vyc2VsdmVzXG4gICAgZGVsZXRlIHBhbGV0dGUuY29udHJhc3REZWZhdWx0Q29sb3I7XG4gICAgZGVsZXRlIHBhbGV0dGUuY29udHJhc3RMaWdodENvbG9ycztcbiAgICBkZWxldGUgcGFsZXR0ZS5jb250cmFzdFN0cm9uZ0xpZ2h0Q29sb3JzO1xuICAgIGRlbGV0ZSBwYWxldHRlLmNvbnRyYXN0RGFya0NvbG9ycztcblxuICAgIC8vIENoYW5nZSB7ICdBMTAwJzogJyNmZmZlZWUnIH0gdG8geyAnQTEwMCc6IHsgdmFsdWU6ICcjZmZmZWVlJywgY29udHJhc3Q6REFSS19DT05UUkFTVF9DT0xPUiB9XG4gICAgYW5ndWxhci5mb3JFYWNoKHBhbGV0dGUsIGZ1bmN0aW9uKGh1ZVZhbHVlLCBodWVOYW1lKSB7XG4gICAgICBpZiAoYW5ndWxhci5pc09iamVjdChodWVWYWx1ZSkpIHJldHVybjsgLy8gQWxyZWFkeSBjb252ZXJ0ZWRcbiAgICAgIC8vIE1hcCBldmVyeXRoaW5nIHRvIHJnYiBjb2xvcnNcbiAgICAgIHZhciByZ2JWYWx1ZSA9IGNvbG9yVG9SZ2JhQXJyYXkoaHVlVmFsdWUpO1xuICAgICAgaWYgKCFyZ2JWYWx1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb2xvciAlMSwgaW4gcGFsZXR0ZSAlMidzIGh1ZSAlMywgaXMgaW52YWxpZC4gSGV4IG9yIHJnYihhKSBjb2xvciBleHBlY3RlZC5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoJyUxJywgaHVlVmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnJTInLCBwYWxldHRlLm5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnJTMnLCBodWVOYW1lKSk7XG4gICAgICB9XG5cbiAgICAgIHBhbGV0dGVbaHVlTmFtZV0gPSB7XG4gICAgICAgIHZhbHVlOiByZ2JWYWx1ZSxcbiAgICAgICAgY29udHJhc3Q6IGdldENvbnRyYXN0Q29sb3IoKVxuICAgICAgfTtcbiAgICAgIGZ1bmN0aW9uIGdldENvbnRyYXN0Q29sb3IoKSB7XG4gICAgICAgIGlmIChkZWZhdWx0Q29udHJhc3QgPT09ICdsaWdodCcpIHtcbiAgICAgICAgICBpZiAoZGFya0NvbG9ycy5pbmRleE9mKGh1ZU5hbWUpID4gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBEQVJLX0NPTlRSQVNUX0NPTE9SO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc3Ryb25nTGlnaHRDb2xvcnMuaW5kZXhPZihodWVOYW1lKSA+IC0xID8gU1RST05HX0xJR0hUX0NPTlRSQVNUX0NPTE9SXG4gICAgICAgICAgICAgIDogTElHSFRfQ09OVFJBU1RfQ09MT1I7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChsaWdodENvbG9ycy5pbmRleE9mKGh1ZU5hbWUpID4gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJvbmdMaWdodENvbG9ycy5pbmRleE9mKGh1ZU5hbWUpID4gLTEgPyBTVFJPTkdfTElHSFRfQ09OVFJBU1RfQ09MT1JcbiAgICAgICAgICAgICAgOiBMSUdIVF9DT05UUkFTVF9DT0xPUjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIERBUktfQ09OVFJBU1RfQ09MT1I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuXG59XG5nZW5lcmF0ZVRoZW1lcy4kaW5qZWN0ID0gW1wiJGluamVjdG9yXCJdO1xuXG5mdW5jdGlvbiBjaGVja1ZhbGlkUGFsZXR0ZSh0aGVtZSwgY29sb3JUeXBlKSB7XG4gIC8vIElmIHRoZW1lIGF0dGVtcHRzIHRvIHVzZSBhIHBhbGV0dGUgdGhhdCBkb2VzbnQgZXhpc3QsIHRocm93IGVycm9yXG4gIGlmICghUEFMRVRURVNbICh0aGVtZS5jb2xvcnNbY29sb3JUeXBlXSB8fCB7fSkubmFtZSBdKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJZb3Ugc3VwcGxpZWQgYW4gaW52YWxpZCBjb2xvciBwYWxldHRlIGZvciB0aGVtZSAlMSdzICUyIHBhbGV0dGUuIEF2YWlsYWJsZSBwYWxldHRlczogJTNcIlxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnJTEnLCB0aGVtZS5uYW1lKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnJTInLCBjb2xvclR5cGUpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCclMycsIE9iamVjdC5rZXlzKFBBTEVUVEVTKS5qb2luKCcsICcpKVxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29sb3JUb1JnYmFBcnJheShjbHIpIHtcbiAgaWYgKGFuZ3VsYXIuaXNBcnJheShjbHIpICYmIGNsci5sZW5ndGggPT0gMykgcmV0dXJuIGNscjtcbiAgaWYgKC9ecmdiLy50ZXN0KGNscikpIHtcbiAgICByZXR1cm4gY2xyLnJlcGxhY2UoLyheXFxzKnJnYmE/XFwofFxcKVxccyokKS9nLCAnJykuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24odmFsdWUsIGkpIHtcbiAgICAgIHJldHVybiBpID09IDMgPyBwYXJzZUZsb2F0KHZhbHVlLCAxMCkgOiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH0pO1xuICB9XG4gIGlmIChjbHIuY2hhckF0KDApID09ICcjJykgY2xyID0gY2xyLnN1YnN0cmluZygxKTtcbiAgaWYgKCEvXihbYS1mQS1GMC05XXszfSl7MSwyfSQvZy50ZXN0KGNscikpIHJldHVybjtcblxuICB2YXIgZGlnID0gY2xyLmxlbmd0aCAvIDM7XG4gIHZhciByZWQgPSBjbHIuc3Vic3RyKDAsIGRpZyk7XG4gIHZhciBncm4gPSBjbHIuc3Vic3RyKGRpZywgZGlnKTtcbiAgdmFyIGJsdSA9IGNsci5zdWJzdHIoZGlnICogMik7XG4gIGlmIChkaWcgPT09IDEpIHtcbiAgICByZWQgKz0gcmVkO1xuICAgIGdybiArPSBncm47XG4gICAgYmx1ICs9IGJsdTtcbiAgfVxuICByZXR1cm4gW3BhcnNlSW50KHJlZCwgMTYpLCBwYXJzZUludChncm4sIDE2KSwgcGFyc2VJbnQoYmx1LCAxNildO1xufVxuXG5mdW5jdGlvbiByZ2JhKHJnYkFycmF5LCBvcGFjaXR5KSB7XG4gIGlmICggIXJnYkFycmF5ICkgcmV0dXJuIFwicmdiKCcwLDAsMCcpXCI7XG5cbiAgaWYgKHJnYkFycmF5Lmxlbmd0aCA9PSA0KSB7XG4gICAgcmdiQXJyYXkgPSBhbmd1bGFyLmNvcHkocmdiQXJyYXkpO1xuICAgIG9wYWNpdHkgPyByZ2JBcnJheS5wb3AoKSA6IG9wYWNpdHkgPSByZ2JBcnJheS5wb3AoKTtcbiAgfVxuICByZXR1cm4gb3BhY2l0eSAmJiAodHlwZW9mIG9wYWNpdHkgPT0gJ251bWJlcicgfHwgKHR5cGVvZiBvcGFjaXR5ID09ICdzdHJpbmcnICYmIG9wYWNpdHkubGVuZ3RoKSkgP1xuICAgICdyZ2JhKCcgKyByZ2JBcnJheS5qb2luKCcsJykgKyAnLCcgKyBvcGFjaXR5ICsgJyknIDpcbiAgICAncmdiKCcgKyByZ2JBcnJheS5qb2luKCcsJykgKyAnKSc7XG59XG5cblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy5hdXRvY29tcGxldGVcbiAqL1xuLypcbiAqIEBzZWUganMgZm9sZGVyIGZvciBhdXRvY29tcGxldGUgaW1wbGVtZW50YXRpb25cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMuYXV0b2NvbXBsZXRlJywgW1xuICAnbWF0ZXJpYWwuY29yZScsXG4gICdtYXRlcmlhbC5jb21wb25lbnRzLmljb24nXG5dKTtcblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBtYXRlcmlhbC5jb21wb25lbnRzLmJhY2tkcm9wXG4gKiBAZGVzY3JpcHRpb24gQmFja2Ryb3BcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG1kQmFja2Ryb3BcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5iYWNrZHJvcFxuICpcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBgPG1kLWJhY2tkcm9wPmAgaXMgYSBiYWNrZHJvcCBlbGVtZW50IHVzZWQgYnkgb3RoZXIgY29tcG9uZW50cywgc3VjaCBhcyBkaWFsb2cgYW5kIGJvdHRvbSBzaGVldC5cbiAqIEFwcGx5IGNsYXNzIGBvcGFxdWVgIHRvIG1ha2UgdGhlIGJhY2tkcm9wIHVzZSB0aGUgdGhlbWUgYmFja2Ryb3AgY29sb3IuXG4gKlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLmJhY2tkcm9wJywgW1xuICAnbWF0ZXJpYWwuY29yZSdcbl0pXG4gIC5kaXJlY3RpdmUoJ21kQmFja2Ryb3AnLCBCYWNrZHJvcERpcmVjdGl2ZSk7XG5cbmZ1bmN0aW9uIEJhY2tkcm9wRGlyZWN0aXZlKCRtZFRoZW1pbmcpIHtcbiAgcmV0dXJuICRtZFRoZW1pbmc7XG59XG5CYWNrZHJvcERpcmVjdGl2ZS4kaW5qZWN0ID0gW1wiJG1kVGhlbWluZ1wiXTtcblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy5ib3R0b21TaGVldFxuICogQGRlc2NyaXB0aW9uXG4gKiBCb3R0b21TaGVldFxuICovXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5ib3R0b21TaGVldCcsIFtcbiAgJ21hdGVyaWFsLmNvcmUnLFxuICAnbWF0ZXJpYWwuY29tcG9uZW50cy5iYWNrZHJvcCdcbl0pXG4gIC5kaXJlY3RpdmUoJ21kQm90dG9tU2hlZXQnLCBNZEJvdHRvbVNoZWV0RGlyZWN0aXZlKVxuICAucHJvdmlkZXIoJyRtZEJvdHRvbVNoZWV0JywgTWRCb3R0b21TaGVldFByb3ZpZGVyKTtcblxuZnVuY3Rpb24gTWRCb3R0b21TaGVldERpcmVjdGl2ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnXG4gIH07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRtZEJvdHRvbVNoZWV0XG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMuYm90dG9tU2hlZXRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGAkbWRCb3R0b21TaGVldGAgb3BlbnMgYSBib3R0b20gc2hlZXQgb3ZlciB0aGUgYXBwIGFuZCBwcm92aWRlcyBhIHNpbXBsZSBwcm9taXNlIEFQSS5cbiAqXG4gKiAjIyBSZXN0cmljdGlvbnNcbiAqXG4gKiAtIFRoZSBib3R0b20gc2hlZXQncyB0ZW1wbGF0ZSBtdXN0IGhhdmUgYW4gb3V0ZXIgYDxtZC1ib3R0b20tc2hlZXQ+YCBlbGVtZW50LlxuICogLSBBZGQgdGhlIGBtZC1ncmlkYCBjbGFzcyB0byB0aGUgYm90dG9tIHNoZWV0IGZvciBhIGdyaWQgbGF5b3V0LlxuICogLSBBZGQgdGhlIGBtZC1saXN0YCBjbGFzcyB0byB0aGUgYm90dG9tIHNoZWV0IGZvciBhIGxpc3QgbGF5b3V0LlxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxkaXYgbmctY29udHJvbGxlcj1cIk15Q29udHJvbGxlclwiPlxuICogICA8bWQtYnV0dG9uIG5nLWNsaWNrPVwib3BlbkJvdHRvbVNoZWV0KClcIj5cbiAqICAgICBPcGVuIGEgQm90dG9tIFNoZWV0IVxuICogICA8L21kLWJ1dHRvbj5cbiAqIDwvZGl2PlxuICogPC9obGpzPlxuICogPGhsanMgbGFuZz1cImpzXCI+XG4gKiB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsnbmdNYXRlcmlhbCddKTtcbiAqIGFwcC5jb250cm9sbGVyKCdNeUNvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUsICRtZEJvdHRvbVNoZWV0KSB7XG4gKiAgICRzY29wZS5vcGVuQm90dG9tU2hlZXQgPSBmdW5jdGlvbigpIHtcbiAqICAgICAkbWRCb3R0b21TaGVldC5zaG93KHtcbiAqICAgICAgIHRlbXBsYXRlOiAnPG1kLWJvdHRvbS1zaGVldD5IZWxsbyE8L21kLWJvdHRvbS1zaGVldD4nXG4gKiAgICAgfSk7XG4gKiAgIH07XG4gKiB9KTtcbiAqIDwvaGxqcz5cbiAqL1xuXG4gLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkbWRCb3R0b21TaGVldCNzaG93XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTaG93IGEgYm90dG9tIHNoZWV0IHdpdGggdGhlIHNwZWNpZmllZCBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIEFuIG9wdGlvbnMgb2JqZWN0LCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gYHRlbXBsYXRlVXJsYCAtIGB7c3RyaW5nPX1gOiBUaGUgdXJsIG9mIGFuIGh0bWwgdGVtcGxhdGUgZmlsZSB0aGF0IHdpbGxcbiAqICAgYmUgdXNlZCBhcyB0aGUgY29udGVudCBvZiB0aGUgYm90dG9tIHNoZWV0LiBSZXN0cmljdGlvbnM6IHRoZSB0ZW1wbGF0ZSBtdXN0XG4gKiAgIGhhdmUgYW4gb3V0ZXIgYG1kLWJvdHRvbS1zaGVldGAgZWxlbWVudC5cbiAqICAgLSBgdGVtcGxhdGVgIC0gYHtzdHJpbmc9fWA6IFNhbWUgYXMgdGVtcGxhdGVVcmwsIGV4Y2VwdCB0aGlzIGlzIGFuIGFjdHVhbFxuICogICB0ZW1wbGF0ZSBzdHJpbmcuXG4gKiAgIC0gYHNjb3BlYCAtIGB7b2JqZWN0PX1gOiB0aGUgc2NvcGUgdG8gbGluayB0aGUgdGVtcGxhdGUgLyBjb250cm9sbGVyIHRvLiBJZiBub25lIGlzIHNwZWNpZmllZCwgaXQgd2lsbCBjcmVhdGUgYSBuZXcgY2hpbGQgc2NvcGUuXG4gKiAgICAgVGhpcyBzY29wZSB3aWxsIGJlIGRlc3Ryb3llZCB3aGVuIHRoZSBib3R0b20gc2hlZXQgaXMgcmVtb3ZlZCB1bmxlc3MgYHByZXNlcnZlU2NvcGVgIGlzIHNldCB0byB0cnVlLlxuICogICAtIGBwcmVzZXJ2ZVNjb3BlYCAtIGB7Ym9vbGVhbj19YDogd2hldGhlciB0byBwcmVzZXJ2ZSB0aGUgc2NvcGUgd2hlbiB0aGUgZWxlbWVudCBpcyByZW1vdmVkLiBEZWZhdWx0IGlzIGZhbHNlXG4gKiAgIC0gYGNvbnRyb2xsZXJgIC0gYHtzdHJpbmc9fWA6IFRoZSBjb250cm9sbGVyIHRvIGFzc29jaWF0ZSB3aXRoIHRoaXMgYm90dG9tIHNoZWV0LlxuICogICAtIGBsb2NhbHNgIC0gYHtzdHJpbmc9fWA6IEFuIG9iamVjdCBjb250YWluaW5nIGtleS92YWx1ZSBwYWlycy4gVGhlIGtleXMgd2lsbFxuICogICBiZSB1c2VkIGFzIG5hbWVzIG9mIHZhbHVlcyB0byBpbmplY3QgaW50byB0aGUgY29udHJvbGxlci4gRm9yIGV4YW1wbGUsXG4gKiAgIGBsb2NhbHM6IHt0aHJlZTogM31gIHdvdWxkIGluamVjdCBgdGhyZWVgIGludG8gdGhlIGNvbnRyb2xsZXIgd2l0aCB0aGUgdmFsdWVcbiAqICAgb2YgMy5cbiAqICAgLSBgdGFyZ2V0RXZlbnRgIC0gYHtET01DbGlja0V2ZW50PX1gOiBBIGNsaWNrJ3MgZXZlbnQgb2JqZWN0LiBXaGVuIHBhc3NlZCBpbiBhcyBhbiBvcHRpb24sXG4gKiAgIHRoZSBsb2NhdGlvbiBvZiB0aGUgY2xpY2sgd2lsbCBiZSB1c2VkIGFzIHRoZSBzdGFydGluZyBwb2ludCBmb3IgdGhlIG9wZW5pbmcgYW5pbWF0aW9uXG4gKiAgIG9mIHRoZSB0aGUgZGlhbG9nLlxuICogICAtIGByZXNvbHZlYCAtIGB7b2JqZWN0PX1gOiBTaW1pbGFyIHRvIGxvY2FscywgZXhjZXB0IGl0IHRha2VzIHByb21pc2VzIGFzIHZhbHVlc1xuICogICBhbmQgdGhlIGJvdHRvbSBzaGVldCB3aWxsIG5vdCBvcGVuIHVudGlsIHRoZSBwcm9taXNlcyByZXNvbHZlLlxuICogICAtIGBjb250cm9sbGVyQXNgIC0gYHtzdHJpbmc9fWA6IEFuIGFsaWFzIHRvIGFzc2lnbiB0aGUgY29udHJvbGxlciB0byBvbiB0aGUgc2NvcGUuXG4gKiAgIC0gYHBhcmVudGAgLSBge2VsZW1lbnQ9fWA6IFRoZSBlbGVtZW50IHRvIGFwcGVuZCB0aGUgYm90dG9tIHNoZWV0IHRvLiBUaGUgYHBhcmVudGAgbWF5IGJlIGEgYGZ1bmN0aW9uYCwgYHN0cmluZ2AsXG4gKiAgIGBvYmplY3RgLCBvciBudWxsLiBEZWZhdWx0cyB0byBhcHBlbmRpbmcgdG8gdGhlIGJvZHkgb2YgdGhlIHJvb3QgZWxlbWVudCAob3IgdGhlIHJvb3QgZWxlbWVudCkgb2YgdGhlIGFwcGxpY2F0aW9uLlxuICogICBlLmcuIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGVudCcpKSBvciBcIiNjb250ZW50XCJcbiAqICAgLSBgZGlzYWJsZVBhcmVudFNjcm9sbGAgLSBge2Jvb2xlYW49fWA6IFdoZXRoZXIgdG8gZGlzYWJsZSBzY3JvbGxpbmcgd2hpbGUgdGhlIGJvdHRvbSBzaGVldCBpcyBvcGVuLlxuICogICAgIERlZmF1bHQgdHJ1ZS5cbiAqXG4gKiBAcmV0dXJucyB7cHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgY2FuIGJlIHJlc29sdmVkIHdpdGggYCRtZEJvdHRvbVNoZWV0LmhpZGUoKWAgb3JcbiAqIHJlamVjdGVkIHdpdGggYCRtZEJvdHRvbVNoZWV0LmNhbmNlbCgpYC5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRtZEJvdHRvbVNoZWV0I2hpZGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhpZGUgdGhlIGV4aXN0aW5nIGJvdHRvbSBzaGVldCBhbmQgcmVzb2x2ZSB0aGUgcHJvbWlzZSByZXR1cm5lZCBmcm9tXG4gKiBgJG1kQm90dG9tU2hlZXQuc2hvdygpYC4gVGhpcyBjYWxsIHdpbGwgY2xvc2UgdGhlIG1vc3QgcmVjZW50bHkgb3BlbmVkL2N1cnJlbnQgYm90dG9tc2hlZXQgKGlmIGFueSkuXG4gKlxuICogQHBhcmFtIHsqPX0gcmVzcG9uc2UgQW4gYXJndW1lbnQgZm9yIHRoZSByZXNvbHZlZCBwcm9taXNlLlxuICpcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRtZEJvdHRvbVNoZWV0I2NhbmNlbFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSGlkZSB0aGUgZXhpc3RpbmcgYm90dG9tIHNoZWV0IGFuZCByZWplY3QgdGhlIHByb21pc2UgcmV0dXJuZWQgZnJvbVxuICogYCRtZEJvdHRvbVNoZWV0LnNob3coKWAuXG4gKlxuICogQHBhcmFtIHsqPX0gcmVzcG9uc2UgQW4gYXJndW1lbnQgZm9yIHRoZSByZWplY3RlZCBwcm9taXNlLlxuICpcbiAqL1xuXG5mdW5jdGlvbiBNZEJvdHRvbVNoZWV0UHJvdmlkZXIoJCRpbnRlcmltRWxlbWVudFByb3ZpZGVyKSB7XG4gIC8vIGhvdyBmYXN0IHdlIG5lZWQgdG8gZmxpY2sgZG93biB0byBjbG9zZSB0aGUgc2hlZXQsIHBpeGVscy9tc1xuICB2YXIgQ0xPU0lOR19WRUxPQ0lUWSA9IDAuNTtcbiAgdmFyIFBBRERJTkcgPSA4MDsgLy8gc2FtZSBhcyBjc3NcblxuICBib3R0b21TaGVldERlZmF1bHRzLiRpbmplY3QgPSBbXCIkYW5pbWF0ZVwiLCBcIiRtZENvbnN0YW50XCIsIFwiJG1kVXRpbFwiLCBcIiR0aW1lb3V0XCIsIFwiJGNvbXBpbGVcIiwgXCIkbWRUaGVtaW5nXCIsIFwiJG1kQm90dG9tU2hlZXRcIiwgXCIkcm9vdEVsZW1lbnRcIiwgXCIkbWRHZXN0dXJlXCJdO1xuICByZXR1cm4gJCRpbnRlcmltRWxlbWVudFByb3ZpZGVyKCckbWRCb3R0b21TaGVldCcpXG4gICAgLnNldERlZmF1bHRzKHtcbiAgICAgIG1ldGhvZHM6IFsnZGlzYWJsZVBhcmVudFNjcm9sbCcsICdlc2NhcGVUb0Nsb3NlJywgJ3RhcmdldEV2ZW50J10sXG4gICAgICBvcHRpb25zOiBib3R0b21TaGVldERlZmF1bHRzXG4gICAgfSk7XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIGJvdHRvbVNoZWV0RGVmYXVsdHMoJGFuaW1hdGUsICRtZENvbnN0YW50LCAkbWRVdGlsLCAkdGltZW91dCwgJGNvbXBpbGUsICRtZFRoZW1pbmcsICRtZEJvdHRvbVNoZWV0LCAkcm9vdEVsZW1lbnQsICRtZEdlc3R1cmUpIHtcbiAgICB2YXIgYmFja2Ryb3A7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdGhlbWFibGU6IHRydWUsXG4gICAgICB0YXJnZXRFdmVudDogbnVsbCxcbiAgICAgIG9uU2hvdzogb25TaG93LFxuICAgICAgb25SZW1vdmU6IG9uUmVtb3ZlLFxuICAgICAgZXNjYXBlVG9DbG9zZTogdHJ1ZSxcbiAgICAgIGRpc2FibGVQYXJlbnRTY3JvbGw6IHRydWVcbiAgICB9O1xuXG5cbiAgICBmdW5jdGlvbiBvblNob3coc2NvcGUsIGVsZW1lbnQsIG9wdGlvbnMpIHtcblxuICAgICAgZWxlbWVudCA9ICRtZFV0aWwuZXh0cmFjdEVsZW1lbnRCeU5hbWUoZWxlbWVudCwgJ21kLWJvdHRvbS1zaGVldCcpO1xuXG4gICAgICAvLyBBZGQgYSBiYWNrZHJvcCB0aGF0IHdpbGwgY2xvc2Ugb24gY2xpY2tcbiAgICAgIGJhY2tkcm9wID0gJGNvbXBpbGUoJzxtZC1iYWNrZHJvcCBjbGFzcz1cIm1kLW9wYXF1ZSBtZC1ib3R0b20tc2hlZXQtYmFja2Ryb3BcIj4nKShzY29wZSk7XG4gICAgICBiYWNrZHJvcC5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgJHRpbWVvdXQoJG1kQm90dG9tU2hlZXQuY2FuY2VsKTtcbiAgICAgIH0pO1xuICAgICAgJG1kVGhlbWluZy5pbmhlcml0KGJhY2tkcm9wLCBvcHRpb25zLnBhcmVudCk7XG5cbiAgICAgICRhbmltYXRlLmVudGVyKGJhY2tkcm9wLCBvcHRpb25zLnBhcmVudCwgbnVsbCk7XG5cbiAgICAgIHZhciBib3R0b21TaGVldCA9IG5ldyBCb3R0b21TaGVldChlbGVtZW50LCBvcHRpb25zLnBhcmVudCk7XG4gICAgICBvcHRpb25zLmJvdHRvbVNoZWV0ID0gYm90dG9tU2hlZXQ7XG5cbiAgICAgIC8vIEdpdmUgdXAgZm9jdXMgb24gY2FsbGluZyBpdGVtXG4gICAgICBvcHRpb25zLnRhcmdldEV2ZW50ICYmIGFuZ3VsYXIuZWxlbWVudChvcHRpb25zLnRhcmdldEV2ZW50LnRhcmdldCkuYmx1cigpO1xuICAgICAgJG1kVGhlbWluZy5pbmhlcml0KGJvdHRvbVNoZWV0LmVsZW1lbnQsIG9wdGlvbnMucGFyZW50KTtcblxuICAgICAgaWYgKG9wdGlvbnMuZGlzYWJsZVBhcmVudFNjcm9sbCkge1xuICAgICAgICBvcHRpb25zLmxhc3RPdmVyZmxvdyA9IG9wdGlvbnMucGFyZW50LmNzcygnb3ZlcmZsb3cnKTtcbiAgICAgICAgb3B0aW9ucy5wYXJlbnQuY3NzKCdvdmVyZmxvdycsICdoaWRkZW4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICRhbmltYXRlLmVudGVyKGJvdHRvbVNoZWV0LmVsZW1lbnQsIG9wdGlvbnMucGFyZW50KVxuICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgZm9jdXNhYmxlID0gYW5ndWxhci5lbGVtZW50KFxuICAgICAgICAgICAgZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCdidXR0b24nKSB8fFxuICAgICAgICAgICAgZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCdhJykgfHxcbiAgICAgICAgICAgIGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignW25nLWNsaWNrXScpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBmb2N1c2FibGUuZm9jdXMoKTtcblxuICAgICAgICAgIGlmIChvcHRpb25zLmVzY2FwZVRvQ2xvc2UpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucm9vdEVsZW1lbnRLZXl1cENhbGxiYWNrID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAkbWRDb25zdGFudC5LRVlfQ09ERS5FU0NBUEUpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dCgkbWRCb3R0b21TaGVldC5jYW5jZWwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgJHJvb3RFbGVtZW50Lm9uKCdrZXl1cCcsIG9wdGlvbnMucm9vdEVsZW1lbnRLZXl1cENhbGxiYWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25SZW1vdmUoc2NvcGUsIGVsZW1lbnQsIG9wdGlvbnMpIHtcblxuICAgICAgdmFyIGJvdHRvbVNoZWV0ID0gb3B0aW9ucy5ib3R0b21TaGVldDtcblxuICAgICAgJGFuaW1hdGUubGVhdmUoYmFja2Ryb3ApO1xuICAgICAgcmV0dXJuICRhbmltYXRlLmxlYXZlKGJvdHRvbVNoZWV0LmVsZW1lbnQpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmRpc2FibGVQYXJlbnRTY3JvbGwpIHtcbiAgICAgICAgICBvcHRpb25zLnBhcmVudC5jc3MoJ292ZXJmbG93Jywgb3B0aW9ucy5sYXN0T3ZlcmZsb3cpO1xuICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmxhc3RPdmVyZmxvdztcbiAgICAgICAgfVxuXG4gICAgICAgIGJvdHRvbVNoZWV0LmNsZWFudXAoKTtcblxuICAgICAgICAvLyBSZXN0b3JlIGZvY3VzXG4gICAgICAgIG9wdGlvbnMudGFyZ2V0RXZlbnQgJiYgYW5ndWxhci5lbGVtZW50KG9wdGlvbnMudGFyZ2V0RXZlbnQudGFyZ2V0KS5mb2N1cygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQm90dG9tU2hlZXQgY2xhc3MgdG8gYXBwbHkgYm90dG9tLXNoZWV0IGJlaGF2aW9yIHRvIGFuIGVsZW1lbnRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBCb3R0b21TaGVldChlbGVtZW50LCBwYXJlbnQpIHtcbiAgICAgIHZhciBkZXJlZ2lzdGVyID0gJG1kR2VzdHVyZS5yZWdpc3RlcihwYXJlbnQsICdkcmFnJywgeyBob3Jpem9udGFsOiBmYWxzZSB9KTtcbiAgICAgIHBhcmVudC5vbignJG1kLmRyYWdzdGFydCcsIG9uRHJhZ1N0YXJ0KVxuICAgICAgICAub24oJyRtZC5kcmFnJywgb25EcmFnKVxuICAgICAgICAub24oJyRtZC5kcmFnZW5kJywgb25EcmFnRW5kKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgY2xlYW51cDogZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgICAgICBkZXJlZ2lzdGVyKCk7XG4gICAgICAgICAgcGFyZW50Lm9mZignJG1kLmRyYWdzdGFydCcsIG9uRHJhZ1N0YXJ0KVxuICAgICAgICAgICAgLm9mZignJG1kLmRyYWcnLCBvbkRyYWcpXG4gICAgICAgICAgICAub2ZmKCckbWQuZHJhZ2VuZCcsIG9uRHJhZ0VuZCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIG9uRHJhZ1N0YXJ0KGV2KSB7XG4gICAgICAgIC8vIERpc2FibGUgdHJhbnNpdGlvbnMgb24gdHJhbnNmb3JtIHNvIHRoYXQgaXQgZmVlbHMgZmFzdFxuICAgICAgICBlbGVtZW50LmNzcygkbWRDb25zdGFudC5DU1MuVFJBTlNJVElPTl9EVVJBVElPTiwgJzBtcycpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvbkRyYWcoZXYpIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybSA9IGV2LnBvaW50ZXIuZGlzdGFuY2VZO1xuICAgICAgICBpZiAodHJhbnNmb3JtIDwgNSkge1xuICAgICAgICAgIC8vIFNsb3cgZG93biBkcmFnIHdoZW4gdHJ5aW5nIHRvIGRyYWcgdXAsIGFuZCBzdG9wIGFmdGVyIFBBRERJTkdcbiAgICAgICAgICB0cmFuc2Zvcm0gPSBNYXRoLm1heCgtUEFERElORywgdHJhbnNmb3JtIC8gMik7XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudC5jc3MoJG1kQ29uc3RhbnQuQ1NTLlRSQU5TRk9STSwgJ3RyYW5zbGF0ZTNkKDAsJyArIChQQURESU5HICsgdHJhbnNmb3JtKSArICdweCwwKScpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvbkRyYWdFbmQoZXYpIHtcbiAgICAgICAgaWYgKGV2LnBvaW50ZXIuZGlzdGFuY2VZID4gMCAmJlxuICAgICAgICAgICAgKGV2LnBvaW50ZXIuZGlzdGFuY2VZID4gMjAgfHwgTWF0aC5hYnMoZXYucG9pbnRlci52ZWxvY2l0eVkpID4gQ0xPU0lOR19WRUxPQ0lUWSkpIHtcbiAgICAgICAgICB2YXIgZGlzdGFuY2VSZW1haW5pbmcgPSBlbGVtZW50LnByb3AoJ29mZnNldEhlaWdodCcpIC0gZXYucG9pbnRlci5kaXN0YW5jZVk7XG4gICAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IE1hdGgubWluKGRpc3RhbmNlUmVtYWluaW5nIC8gZXYucG9pbnRlci52ZWxvY2l0eVkgKiAwLjc1LCA1MDApO1xuICAgICAgICAgIGVsZW1lbnQuY3NzKCRtZENvbnN0YW50LkNTUy5UUkFOU0lUSU9OX0RVUkFUSU9OLCB0cmFuc2l0aW9uRHVyYXRpb24gKyAnbXMnKTtcbiAgICAgICAgICAkdGltZW91dCgkbWRCb3R0b21TaGVldC5jYW5jZWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW1lbnQuY3NzKCRtZENvbnN0YW50LkNTUy5UUkFOU0lUSU9OX0RVUkFUSU9OLCAnJyk7XG4gICAgICAgICAgZWxlbWVudC5jc3MoJG1kQ29uc3RhbnQuQ1NTLlRSQU5TRk9STSwgJycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gIH1cblxufVxuTWRCb3R0b21TaGVldFByb3ZpZGVyLiRpbmplY3QgPSBbXCIkJGludGVyaW1FbGVtZW50UHJvdmlkZXJcIl07XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG1hdGVyaWFsLmNvbXBvbmVudHMuYnV0dG9uXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBCdXR0b25cbiAqL1xuYW5ndWxhclxuICAgIC5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMuYnV0dG9uJywgWyAnbWF0ZXJpYWwuY29yZScgXSlcbiAgICAuZGlyZWN0aXZlKCdtZEJ1dHRvbicsIE1kQnV0dG9uRGlyZWN0aXZlKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBtZEJ1dHRvblxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLmJ1dHRvblxuICpcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBgPG1kLWJ1dHRvbj5gIGlzIGEgYnV0dG9uIGRpcmVjdGl2ZSB3aXRoIG9wdGlvbmFsIGluayByaXBwbGVzIChkZWZhdWx0IGVuYWJsZWQpLlxuICpcbiAqIElmIHlvdSBzdXBwbHkgYSBgaHJlZmAgb3IgYG5nLWhyZWZgIGF0dHJpYnV0ZSwgaXQgd2lsbCBiZWNvbWUgYW4gYDxhPmAgZWxlbWVudC4gT3RoZXJ3aXNlLCBpdCB3aWxsXG4gKiBiZWNvbWUgYSBgPGJ1dHRvbj5gIGVsZW1lbnQuIEFzIHBlciB0aGUgW01hdGVyaWFsIERlc2lnbiBzcGVjaWZpY2F0aW9uc10oaHR0cDovL3d3dy5nb29nbGUuY29tL2Rlc2lnbi9zcGVjL3N0eWxlL2NvbG9yLmh0bWwjY29sb3ItdWktY29sb3ItYXBwbGljYXRpb24pXG4gKiB0aGUgRkFCIGJ1dHRvbiBiYWNrZ3JvdW5kIGlzIGZpbGxlZCB3aXRoIHRoZSBhY2NlbnQgY29sb3IgW2J5IGRlZmF1bHRdLiBUaGUgcHJpbWFyeSBjb2xvciBwYWxldHRlIG1heSBiZSB1c2VkIHdpdGhcbiAqIHRoZSBgbWQtcHJpbWFyeWAgY2xhc3MuXG4gKlxuICogQHBhcmFtIHtib29sZWFuPX0gbWQtbm8taW5rIElmIHByZXNlbnQsIGRpc2FibGUgcmlwcGxlIGluayBlZmZlY3RzLlxuICogQHBhcmFtIHtleHByZXNzaW9uPX0gbmctZGlzYWJsZWQgRW4vRGlzYWJsZSBiYXNlZCBvbiB0aGUgZXhwcmVzc2lvblxuICogQHBhcmFtIHtzdHJpbmc9fSBtZC1yaXBwbGUtc2l6ZSBPdmVycmlkZXMgdGhlIGRlZmF1bHQgcmlwcGxlIHNpemUgbG9naWMuIE9wdGlvbnM6IGBmdWxsYCwgYHBhcnRpYWxgLCBgYXV0b2BcbiAqIEBwYXJhbSB7c3RyaW5nPX0gYXJpYS1sYWJlbCBBZGRzIGFsdGVybmF0aXZlIHRleHQgdG8gYnV0dG9uIGZvciBhY2Nlc3NpYmlsaXR5LCB1c2VmdWwgZm9yIGljb24gYnV0dG9ucy5cbiAqIElmIG5vIGRlZmF1bHQgdGV4dCBpcyBmb3VuZCwgYSB3YXJuaW5nIHdpbGwgYmUgbG9nZ2VkLlxuICpcbiAqIEB1c2FnZVxuICpcbiAqIFJlZ3VsYXIgYnV0dG9uczpcbiAqXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogIDxtZC1idXR0b24+IEZsYXQgQnV0dG9uIDwvbWQtYnV0dG9uPlxuICogIDxtZC1idXR0b24gaHJlZj1cImh0dHA6Ly9nb29nbGUuY29tXCI+IEZsYXQgbGluayA8L21kLWJ1dHRvbj5cbiAqICA8bWQtYnV0dG9uIGNsYXNzPVwibWQtcmFpc2VkXCI+IFJhaXNlZCBCdXR0b24gPC9tZC1idXR0b24+XG4gKiAgPG1kLWJ1dHRvbiBuZy1kaXNhYmxlZD1cInRydWVcIj4gRGlzYWJsZWQgQnV0dG9uIDwvbWQtYnV0dG9uPlxuICogIDxtZC1idXR0b24+XG4gKiAgICA8bWQtaWNvbiBtZC1zdmctc3JjPVwieW91ci9pY29uLnN2Z1wiPjwvbWQtaWNvbj5cbiAqICAgIFJlZ2lzdGVyIE5vd1xuICogIDwvbWQtYnV0dG9uPlxuICogPC9obGpzPlxuICpcbiAqIEZBQiBidXR0b25zOlxuICpcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiAgPG1kLWJ1dHRvbiBjbGFzcz1cIm1kLWZhYlwiIGFyaWEtbGFiZWw9XCJGQUJcIj5cbiAqICAgIDxtZC1pY29uIG1kLXN2Zy1zcmM9XCJ5b3VyL2ljb24uc3ZnXCI+PC9tZC1pY29uPlxuICogIDwvbWQtYnV0dG9uPlxuICogIDwhLS0gbWluaS1GQUIgLS0+XG4gKiAgPG1kLWJ1dHRvbiBjbGFzcz1cIm1kLWZhYiBtZC1taW5pXCIgYXJpYS1sYWJlbD1cIk1pbmkgRkFCXCI+XG4gKiAgICA8bWQtaWNvbiBtZC1zdmctc3JjPVwieW91ci9pY29uLnN2Z1wiPjwvbWQtaWNvbj5cbiAqICA8L21kLWJ1dHRvbj5cbiAqICA8IS0tIEJ1dHRvbiB3aXRoIFNWRyBJY29uIC0tPlxuICogIDxtZC1idXR0b24gY2xhc3M9XCJtZC1pY29uLWJ1dHRvblwiIGFyaWEtbGFiZWw9XCJDdXN0b20gSWNvbiBCdXR0b25cIj5cbiAqICAgIDxtZC1pY29uIG1kLXN2Zy1pY29uPVwicGF0aC90by95b3VyLnN2Z1wiPjwvbWQtaWNvbj5cbiAqICA8L21kLWJ1dHRvbj5cbiAqIDwvaGxqcz5cbiAqL1xuZnVuY3Rpb24gTWRCdXR0b25EaXJlY3RpdmUoJG1kQnV0dG9uSW5rUmlwcGxlLCAkbWRUaGVtaW5nLCAkbWRBcmlhLCAkdGltZW91dCkge1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHRlbXBsYXRlOiBnZXRUZW1wbGF0ZSxcbiAgICBsaW5rOiBwb3N0TGlua1xuICB9O1xuXG4gIGZ1bmN0aW9uIGlzQW5jaG9yKGF0dHIpIHtcbiAgICByZXR1cm4gYW5ndWxhci5pc0RlZmluZWQoYXR0ci5ocmVmKSB8fCBhbmd1bGFyLmlzRGVmaW5lZChhdHRyLm5nSHJlZikgfHwgYW5ndWxhci5pc0RlZmluZWQoYXR0ci5uZ0xpbmspIHx8IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHIudWlTcmVmKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRlbXBsYXRlKGVsZW1lbnQsIGF0dHIpIHtcbiAgICByZXR1cm4gaXNBbmNob3IoYXR0cikgP1xuICAgICAgICAgICAnPGEgY2xhc3M9XCJtZC1idXR0b25cIiBuZy10cmFuc2NsdWRlPjwvYT4nIDpcbiAgICAgICAgICAgJzxidXR0b24gY2xhc3M9XCJtZC1idXR0b25cIiBuZy10cmFuc2NsdWRlPjwvYnV0dG9uPic7XG4gIH1cblxuICBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgIHZhciBub2RlID0gZWxlbWVudFswXTtcbiAgICAkbWRUaGVtaW5nKGVsZW1lbnQpO1xuICAgICRtZEJ1dHRvbklua1JpcHBsZS5hdHRhY2goc2NvcGUsIGVsZW1lbnQpO1xuXG4gICAgdmFyIGVsZW1lbnRIYXNUZXh0ID0gbm9kZS50ZXh0Q29udGVudC50cmltKCk7XG4gICAgaWYgKCFlbGVtZW50SGFzVGV4dCkge1xuICAgICAgJG1kQXJpYS5leHBlY3QoZWxlbWVudCwgJ2FyaWEtbGFiZWwnKTtcbiAgICB9XG5cbiAgICAvLyBGb3IgYW5jaG9yIGVsZW1lbnRzLCB3ZSBoYXZlIHRvIHNldCB0YWJpbmRleCBtYW51YWxseSB3aGVuIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgZGlzYWJsZWRcbiAgICBpZiAoaXNBbmNob3IoYXR0cikgJiYgYW5ndWxhci5pc0RlZmluZWQoYXR0ci5uZ0Rpc2FibGVkKSApIHtcbiAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nRGlzYWJsZWQsIGZ1bmN0aW9uKGlzRGlzYWJsZWQpIHtcbiAgICAgICAgZWxlbWVudC5hdHRyKCd0YWJpbmRleCcsIGlzRGlzYWJsZWQgPyAtMSA6IDApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gZGlzYWJsaW5nIGNsaWNrIGV2ZW50IHdoZW4gZGlzYWJsZWQgaXMgdHJ1ZVxuICAgIGVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oZSl7XG4gICAgICBpZiAoYXR0ci5kaXNhYmxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyByZXN0cmljdCBmb2N1cyBzdHlsZXMgdG8gdGhlIGtleWJvYXJkXG4gICAgc2NvcGUubW91c2VBY3RpdmUgPSBmYWxzZTtcbiAgICBlbGVtZW50Lm9uKCdtb3VzZWRvd24nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2NvcGUubW91c2VBY3RpdmUgPSB0cnVlO1xuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgIHNjb3BlLm1vdXNlQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgICB9KVxuICAgICAgLm9uKCdmb2N1cycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZihzY29wZS5tb3VzZUFjdGl2ZSA9PT0gZmFsc2UpIHsgZWxlbWVudC5hZGRDbGFzcygnbWQtZm9jdXNlZCcpOyB9XG4gICAgICB9KVxuICAgICAgLm9uKCdibHVyJywgZnVuY3Rpb24oKSB7IGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ21kLWZvY3VzZWQnKTsgfSk7XG4gIH1cblxufVxuTWRCdXR0b25EaXJlY3RpdmUuJGluamVjdCA9IFtcIiRtZEJ1dHRvbklua1JpcHBsZVwiLCBcIiRtZFRoZW1pbmdcIiwgXCIkbWRBcmlhXCIsIFwiJHRpbWVvdXRcIl07XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG1hdGVyaWFsLmNvbXBvbmVudHMuY2FyZFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ2FyZCBjb21wb25lbnRzLlxuICovXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5jYXJkJywgW1xuICAnbWF0ZXJpYWwuY29yZSdcbl0pXG4gIC5kaXJlY3RpdmUoJ21kQ2FyZCcsIG1kQ2FyZERpcmVjdGl2ZSk7XG5cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG1kQ2FyZFxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLmNhcmRcbiAqXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGA8bWQtY2FyZD5gIGRpcmVjdGl2ZSBpcyBhIGNvbnRhaW5lciBlbGVtZW50IHVzZWQgd2l0aGluIGA8bWQtY29udGVudD5gIGNvbnRhaW5lcnMuXG4gKlxuICogQW4gaW1hZ2UgaW5jbHVkZWQgYXMgYSBkaXJlY3QgZGVzY2VuZGFudCB3aWxsIGZpbGwgdGhlIGNhcmQncyB3aWR0aCwgd2hpbGUgdGhlIGA8bWQtY2FyZC1jb250ZW50PmBcbiAqIGNvbnRhaW5lciB3aWxsIHdyYXAgdGV4dCBjb250ZW50IGFuZCBwcm92aWRlIHBhZGRpbmcuIEFuIGA8bWQtY2FyZC1mb290ZXI+YCBlbGVtZW50IGNhbiBiZVxuICogb3B0aW9uYWxseSBpbmNsdWRlZCB0byBwdXQgY29udGVudCBmbHVzaCBhZ2FpbnN0IHRoZSBib3R0b20gZWRnZSBvZiB0aGUgY2FyZC5cbiAqXG4gKiBBY3Rpb24gYnV0dG9ucyBjYW4gYmUgaW5jbHVkZWQgaW4gYW4gZWxlbWVudCB3aXRoIHRoZSBgLm1kLWFjdGlvbnNgIGNsYXNzLCBhbHNvIHVzZWQgaW4gYG1kLWRpYWxvZ2AuXG4gKiBZb3UgY2FuIHRoZW4gcG9zaXRpb24gYnV0dG9ucyB1c2luZyBsYXlvdXQgYXR0cmlidXRlcy5cbiAqXG4gKiBDYXJkcyBoYXZlIGNvbnN0YW50IHdpZHRoIGFuZCB2YXJpYWJsZSBoZWlnaHRzOyB3aGVyZSB0aGUgbWF4aW11bSBoZWlnaHQgaXMgbGltaXRlZCB0byB3aGF0IGNhblxuICogZml0IHdpdGhpbiBhIHNpbmdsZSB2aWV3IG9uIGEgcGxhdGZvcm0sIGJ1dCBpdCBjYW4gdGVtcG9yYXJpbHkgZXhwYW5kIGFzIG5lZWRlZC5cbiAqXG4gKiBAdXNhZ2VcbiAqICMjI0NhcmQgd2l0aCBvcHRpb25hbCBmb290ZXJcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8bWQtY2FyZD5cbiAqICA8aW1nIHNyYz1cImNhcmQtaW1hZ2UucG5nXCIgY2xhc3M9XCJtZC1jYXJkLWltYWdlXCIgYWx0PVwiaW1hZ2UgY2FwdGlvblwiPlxuICogIDxtZC1jYXJkLWNvbnRlbnQ+XG4gKiAgICA8aDI+Q2FyZCBoZWFkbGluZTwvaDI+XG4gKiAgICA8cD5DYXJkIGNvbnRlbnQ8L3A+XG4gKiAgPC9tZC1jYXJkLWNvbnRlbnQ+XG4gKiAgPG1kLWNhcmQtZm9vdGVyPlxuICogICAgQ2FyZCBmb290ZXJcbiAqICA8L21kLWNhcmQtZm9vdGVyPlxuICogPC9tZC1jYXJkPlxuICogPC9obGpzPlxuICpcbiAqICMjI0NhcmQgd2l0aCBhY3Rpb25zXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogPG1kLWNhcmQ+XG4gKiAgPGltZyBzcmM9XCJjYXJkLWltYWdlLnBuZ1wiIGNsYXNzPVwibWQtY2FyZC1pbWFnZVwiIGFsdD1cImltYWdlIGNhcHRpb25cIj5cbiAqICA8bWQtY2FyZC1jb250ZW50PlxuICogICAgPGgyPkNhcmQgaGVhZGxpbmU8L2gyPlxuICogICAgPHA+Q2FyZCBjb250ZW50PC9wPlxuICogIDwvbWQtY2FyZC1jb250ZW50PlxuICogIDxkaXYgY2xhc3M9XCJtZC1hY3Rpb25zXCIgbGF5b3V0PVwicm93XCIgbGF5b3V0LWFsaWduPVwiZW5kIGNlbnRlclwiPlxuICogICAgPG1kLWJ1dHRvbj5BY3Rpb24gMTwvbWQtYnV0dG9uPlxuICogICAgPG1kLWJ1dHRvbj5BY3Rpb24gMjwvbWQtYnV0dG9uPlxuICogIDwvZGl2PlxuICogPC9tZC1jYXJkPlxuICogPC9obGpzPlxuICpcbiAqL1xuZnVuY3Rpb24gbWRDYXJkRGlyZWN0aXZlKCRtZFRoZW1pbmcpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIGxpbms6IGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRyKSB7XG4gICAgICAkbWRUaGVtaW5nKCRlbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tZENhcmREaXJlY3RpdmUuJGluamVjdCA9IFtcIiRtZFRoZW1pbmdcIl07XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG1hdGVyaWFsLmNvbXBvbmVudHMuY2hlY2tib3hcbiAqIEBkZXNjcmlwdGlvbiBDaGVja2JveCBtb2R1bGUhXG4gKi9cbmFuZ3VsYXJcbiAgLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5jaGVja2JveCcsIFsnbWF0ZXJpYWwuY29yZSddKVxuICAuZGlyZWN0aXZlKCdtZENoZWNrYm94JywgTWRDaGVja2JveERpcmVjdGl2ZSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbWRDaGVja2JveFxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLmNoZWNrYm94XG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGNoZWNrYm94IGRpcmVjdGl2ZSBpcyB1c2VkIGxpa2UgdGhlIG5vcm1hbCBbYW5ndWxhciBjaGVja2JveF0oaHR0cHM6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nL2lucHV0L2lucHV0JTVCY2hlY2tib3glNUQpLlxuICpcbiAqIEFzIHBlciB0aGUgW21hdGVyaWFsIGRlc2lnbiBzcGVjXShodHRwOi8vd3d3Lmdvb2dsZS5jb20vZGVzaWduL3NwZWMvc3R5bGUvY29sb3IuaHRtbCNjb2xvci11aS1jb2xvci1hcHBsaWNhdGlvbilcbiAqIHRoZSBjaGVja2JveCBpcyBpbiB0aGUgYWNjZW50IGNvbG9yIGJ5IGRlZmF1bHQuIFRoZSBwcmltYXJ5IGNvbG9yIHBhbGV0dGUgbWF5IGJlIHVzZWQgd2l0aFxuICogdGhlIGBtZC1wcmltYXJ5YCBjbGFzcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmctbW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICogQHBhcmFtIHtleHByZXNzaW9uPX0gbmctdHJ1ZS12YWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIHNlbGVjdGVkLlxuICogQHBhcmFtIHtleHByZXNzaW9uPX0gbmctZmFsc2UtdmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBzZXQgd2hlbiBub3Qgc2VsZWN0ZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nLWNoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBtZC1uby1pbmsgVXNlIG9mIGF0dHJpYnV0ZSBpbmRpY2F0ZXMgdXNlIG9mIHJpcHBsZSBpbmsgZWZmZWN0c1xuICogQHBhcmFtIHtzdHJpbmc9fSBhcmlhLWxhYmVsIEFkZHMgbGFiZWwgdG8gY2hlY2tib3ggZm9yIGFjY2Vzc2liaWxpdHkuXG4gKiBEZWZhdWx0cyB0byBjaGVja2JveCdzIHRleHQuIElmIG5vIGRlZmF1bHQgdGV4dCBpcyBmb3VuZCwgYSB3YXJuaW5nIHdpbGwgYmUgbG9nZ2VkLlxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC1jaGVja2JveCBuZy1tb2RlbD1cImlzQ2hlY2tlZFwiIGFyaWEtbGFiZWw9XCJGaW5pc2hlZD9cIj5cbiAqICAgRmluaXNoZWQgP1xuICogPC9tZC1jaGVja2JveD5cbiAqXG4gKiA8bWQtY2hlY2tib3ggbWQtbm8taW5rIG5nLW1vZGVsPVwiaGFzSW5rXCIgYXJpYS1sYWJlbD1cIk5vIEluayBFZmZlY3RzXCI+XG4gKiAgIE5vIEluayBFZmZlY3RzXG4gKiA8L21kLWNoZWNrYm94PlxuICpcbiAqIDxtZC1jaGVja2JveCBuZy1kaXNhYmxlZD1cInRydWVcIiBuZy1tb2RlbD1cImlzRGlzYWJsZWRcIiBhcmlhLWxhYmVsPVwiRGlzYWJsZWRcIj5cbiAqICAgRGlzYWJsZWRcbiAqIDwvbWQtY2hlY2tib3g+XG4gKlxuICogPC9obGpzPlxuICpcbiAqL1xuZnVuY3Rpb24gTWRDaGVja2JveERpcmVjdGl2ZShpbnB1dERpcmVjdGl2ZSwgJG1kSW5rUmlwcGxlLCAkbWRBcmlhLCAkbWRDb25zdGFudCwgJG1kVGhlbWluZywgJG1kVXRpbCwgJHRpbWVvdXQpIHtcbiAgaW5wdXREaXJlY3RpdmUgPSBpbnB1dERpcmVjdGl2ZVswXTtcbiAgdmFyIENIRUNLRURfQ1NTID0gJ21kLWNoZWNrZWQnO1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsXG4gICAgcHJpb3JpdHk6MjEwLCAvLyBSdW4gYmVmb3JlIG5nQXJpYVxuICAgIHRlbXBsYXRlOiBcbiAgICAgICc8ZGl2IGNsYXNzPVwibWQtY29udGFpbmVyXCIgbWQtaW5rLXJpcHBsZSBtZC1pbmstcmlwcGxlLWNoZWNrYm94PicgK1xuICAgICAgICAnPGRpdiBjbGFzcz1cIm1kLWljb25cIj48L2Rpdj4nICtcbiAgICAgICc8L2Rpdj4nICtcbiAgICAgICc8ZGl2IG5nLXRyYW5zY2x1ZGUgY2xhc3M9XCJtZC1sYWJlbFwiPjwvZGl2PicsXG4gICAgY29tcGlsZTogY29tcGlsZVxuICB9O1xuXG4gIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgLy8gUHJpdmF0ZSBNZXRob2RzXG4gIC8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuICBmdW5jdGlvbiBjb21waWxlICh0RWxlbWVudCwgdEF0dHJzKSB7XG5cbiAgICB0QXR0cnMudHlwZSA9ICdjaGVja2JveCc7XG4gICAgdEF0dHJzLnRhYmluZGV4ID0gdEF0dHJzLnRhYmluZGV4IHx8ICcwJztcbiAgICB0RWxlbWVudC5hdHRyKCdyb2xlJywgdEF0dHJzLnR5cGUpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBuZ01vZGVsQ3RybCkge1xuICAgICAgbmdNb2RlbEN0cmwgPSBuZ01vZGVsQ3RybCB8fCAkbWRVdGlsLmZha2VOZ01vZGVsKCk7XG4gICAgICAkbWRUaGVtaW5nKGVsZW1lbnQpO1xuXG4gICAgICBpZiAoYXR0ci5uZ0NoZWNrZWQpIHtcbiAgICAgICAgc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgc2NvcGUuJGV2YWwuYmluZChzY29wZSwgYXR0ci5uZ0NoZWNrZWQpLFxuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZS5iaW5kKG5nTW9kZWxDdHJsKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgJCR3YXRjaEV4cHIoJ25nRGlzYWJsZWQnLCAndGFiaW5kZXgnLCB7XG4gICAgICAgIHRydWU6ICctMScsXG4gICAgICAgIGZhbHNlOiBhdHRyLnRhYmluZGV4XG4gICAgICB9KTtcbiAgICAgICRtZEFyaWEuZXhwZWN0V2l0aFRleHQoZWxlbWVudCwgJ2FyaWEtbGFiZWwnKTtcblxuICAgICAgLy8gUmV1c2UgdGhlIG9yaWdpbmFsIGlucHV0W3R5cGU9Y2hlY2tib3hdIGRpcmVjdGl2ZSBmcm9tIEFuZ3VsYXIgY29yZS5cbiAgICAgIC8vIFRoaXMgaXMgYSBiaXQgaGFja3kgYXMgd2UgbmVlZCBvdXIgb3duIGV2ZW50IGxpc3RlbmVyIGFuZCBvd24gcmVuZGVyXG4gICAgICAvLyBmdW5jdGlvbi5cbiAgICAgIGlucHV0RGlyZWN0aXZlLmxpbmsucHJlKHNjb3BlLCB7XG4gICAgICAgIG9uOiBhbmd1bGFyLm5vb3AsXG4gICAgICAgIDA6IHt9XG4gICAgICB9LCBhdHRyLCBbbmdNb2RlbEN0cmxdKTtcblxuICAgICAgc2NvcGUubW91c2VBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGVsZW1lbnQub24oJ2NsaWNrJywgbGlzdGVuZXIpXG4gICAgICAgIC5vbigna2V5cHJlc3MnLCBrZXlwcmVzc0hhbmRsZXIpXG4gICAgICAgIC5vbignbW91c2Vkb3duJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2NvcGUubW91c2VBY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzY29wZS5tb3VzZUFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbignZm9jdXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZihzY29wZS5tb3VzZUFjdGl2ZSA9PT0gZmFsc2UpIHsgZWxlbWVudC5hZGRDbGFzcygnbWQtZm9jdXNlZCcpOyB9XG4gICAgICAgIH0pXG4gICAgICAgIC5vbignYmx1cicsIGZ1bmN0aW9uKCkgeyBlbGVtZW50LnJlbW92ZUNsYXNzKCdtZC1mb2N1c2VkJyk7IH0pO1xuXG4gICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyID0gcmVuZGVyO1xuXG4gICAgICBmdW5jdGlvbiAkJHdhdGNoRXhwcihleHByLCBodG1sQXR0ciwgdmFsdWVPcHRzKSB7XG4gICAgICAgIGlmIChhdHRyW2V4cHJdKSB7XG4gICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJbZXhwcl0sIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgaWYgKHZhbHVlT3B0c1t2YWxdKSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQuYXR0cihodG1sQXR0ciwgdmFsdWVPcHRzW3ZhbF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGtleXByZXNzSGFuZGxlcihldikge1xuICAgICAgICB2YXIga2V5Q29kZSA9IGV2LndoaWNoIHx8IGV2LmtleUNvZGU7XG4gICAgICAgIGlmIChrZXlDb2RlID09PSAkbWRDb25zdGFudC5LRVlfQ09ERS5TUEFDRSB8fCBrZXlDb2RlID09PSAkbWRDb25zdGFudC5LRVlfQ09ERS5FTlRFUikge1xuICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgaWYgKCFlbGVtZW50Lmhhc0NsYXNzKCdtZC1mb2N1c2VkJykpIHsgZWxlbWVudC5hZGRDbGFzcygnbWQtZm9jdXNlZCcpOyB9XG4gICAgICAgICAgbGlzdGVuZXIoZXYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBsaXN0ZW5lcihldikge1xuICAgICAgICBpZiAoZWxlbWVudFswXS5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHJldHVybjtcblxuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgLy8gVG9nZ2xlIHRoZSBjaGVja2JveCB2YWx1ZS4uLlxuICAgICAgICAgIHZhciB2aWV3VmFsdWUgPSBhdHRyLm5nQ2hlY2tlZCA/IGF0dHIuY2hlY2tlZCA6ICFuZ01vZGVsQ3RybC4kdmlld1ZhbHVlO1xuXG4gICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZSggdmlld1ZhbHVlLCBldiAmJiBldi50eXBlKTtcbiAgICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIGlmKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpIHtcbiAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKENIRUNLRURfQ1NTKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKENIRUNLRURfQ1NTKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbk1kQ2hlY2tib3hEaXJlY3RpdmUuJGluamVjdCA9IFtcImlucHV0RGlyZWN0aXZlXCIsIFwiJG1kSW5rUmlwcGxlXCIsIFwiJG1kQXJpYVwiLCBcIiRtZENvbnN0YW50XCIsIFwiJG1kVGhlbWluZ1wiLCBcIiRtZFV0aWxcIiwgXCIkdGltZW91dFwiXTtcblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy5jb250ZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTY3JvbGxhYmxlIGNvbnRlbnRcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMuY29udGVudCcsIFtcbiAgJ21hdGVyaWFsLmNvcmUnXG5dKVxuICAuZGlyZWN0aXZlKCdtZENvbnRlbnQnLCBtZENvbnRlbnREaXJlY3RpdmUpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG1kQ29udGVudFxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLmNvbnRlbnRcbiAqXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGA8bWQtY29udGVudD5gIGRpcmVjdGl2ZSBpcyBhIGNvbnRhaW5lciBlbGVtZW50IHVzZWZ1bCBmb3Igc2Nyb2xsYWJsZSBjb250ZW50XG4gKlxuICogQHVzYWdlXG4gKlxuICogLSBBZGQgdGhlIGBbbGF5b3V0LXBhZGRpbmddYCBhdHRyaWJ1dGUgdG8gbWFrZSB0aGUgY29udGVudCBwYWRkZWQuXG4gKlxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqICA8bWQtY29udGVudCBsYXlvdXQtcGFkZGluZz5cbiAqICAgICAgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIG5lIHF1b2Qgbm92dW0gbWVpLlxuICogIDwvbWQtY29udGVudD5cbiAqIDwvaGxqcz5cbiAqXG4gKi9cblxuZnVuY3Rpb24gbWRDb250ZW50RGlyZWN0aXZlKCRtZFRoZW1pbmcpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRlbGVtZW50JywgQ29udGVudENvbnRyb2xsZXJdLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICB2YXIgbm9kZSA9IGVsZW1lbnRbMF07XG5cbiAgICAgICRtZFRoZW1pbmcoZWxlbWVudCk7XG4gICAgICBzY29wZS4kYnJvYWRjYXN0KCckbWRDb250ZW50TG9hZGVkJywgZWxlbWVudCk7XG5cbiAgICAgIGlvc1Njcm9sbEZpeChlbGVtZW50WzBdKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gQ29udGVudENvbnRyb2xsZXIoJHNjb3BlLCAkZWxlbWVudCkge1xuICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgfVxufVxubWRDb250ZW50RGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkbWRUaGVtaW5nXCJdO1xuXG5mdW5jdGlvbiBpb3NTY3JvbGxGaXgobm9kZSkge1xuICAvLyBJT1MgRklYOlxuICAvLyBJZiB3ZSBzY3JvbGwgd2hlcmUgdGhlcmUgaXMgbm8gbW9yZSByb29tIGZvciB0aGUgd2VidmlldyB0byBzY3JvbGwsXG4gIC8vIGJ5IGRlZmF1bHQgdGhlIHdlYnZpZXcgaXRzZWxmIHdpbGwgc2Nyb2xsIHVwIGFuZCBkb3duLCB0aGlzIGxvb2tzIHJlYWxseVxuICAvLyBiYWQuICBTbyBpZiB3ZSBhcmUgc2Nyb2xsaW5nIHRvIHRoZSB2ZXJ5IHRvcCBvciBib3R0b20sIGFkZC9zdWJ0cmFjdCBvbmVcbiAgYW5ndWxhci5lbGVtZW50KG5vZGUpLm9uKCckbWQucHJlc3Nkb3duJywgZnVuY3Rpb24oZXYpIHtcbiAgICAvLyBPbmx5IHRvdWNoIGV2ZW50c1xuICAgIGlmIChldi5wb2ludGVyLnR5cGUgIT09ICd0JykgcmV0dXJuO1xuICAgIC8vIERvbid0IGxldCBhIGNoaWxkIGNvbnRlbnQncyB0b3VjaHN0YXJ0IHJ1aW4gaXQgZm9yIHVzLlxuICAgIGlmIChldi4kbWF0ZXJpYWxTY3JvbGxGaXhlZCkgcmV0dXJuO1xuICAgIGV2LiRtYXRlcmlhbFNjcm9sbEZpeGVkID0gdHJ1ZTtcblxuICAgIGlmIChub2RlLnNjcm9sbFRvcCA9PT0gMCkge1xuICAgICAgbm9kZS5zY3JvbGxUb3AgPSAxO1xuICAgIH0gZWxzZSBpZiAobm9kZS5zY3JvbGxIZWlnaHQgPT09IG5vZGUuc2Nyb2xsVG9wICsgbm9kZS5vZmZzZXRIZWlnaHQpIHtcbiAgICAgIG5vZGUuc2Nyb2xsVG9wIC09IDE7XG4gICAgfVxuICB9KTtcbn1cblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy5jaGlwc1xuICovXG4vKlxuICogQHNlZSBqcyBmb2xkZXIgZm9yIGNoaXBzIGltcGxlbWVudGF0aW9uXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLmNoaXBzJywgW1xuICAnbWF0ZXJpYWwuY29yZScsXG4gICdtYXRlcmlhbC5jb21wb25lbnRzLmF1dG9jb21wbGV0ZSdcbl0pO1xuXG59KSgpO1xuKGZ1bmN0aW9uKCl7XG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBtYXRlcmlhbC5jb21wb25lbnRzLmRpYWxvZ1xuICovXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5kaWFsb2cnLCBbXG4gICdtYXRlcmlhbC5jb3JlJyxcbiAgJ21hdGVyaWFsLmNvbXBvbmVudHMuYmFja2Ryb3AnXG5dKVxuICAuZGlyZWN0aXZlKCdtZERpYWxvZycsIE1kRGlhbG9nRGlyZWN0aXZlKVxuICAucHJvdmlkZXIoJyRtZERpYWxvZycsIE1kRGlhbG9nUHJvdmlkZXIpO1xuXG5mdW5jdGlvbiBNZERpYWxvZ0RpcmVjdGl2ZSgkJHJBRiwgJG1kVGhlbWluZykge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICRtZFRoZW1pbmcoZWxlbWVudCk7XG4gICAgICAkJHJBRihmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJ21kLWRpYWxvZy1jb250ZW50Jyk7XG4gICAgICAgIGlmIChjb250ZW50ICYmIGNvbnRlbnQuc2Nyb2xsSGVpZ2h0ID4gY29udGVudC5jbGllbnRIZWlnaHQpIHtcbiAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdtZC1jb250ZW50LW92ZXJmbG93Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cbk1kRGlhbG9nRGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkJHJBRlwiLCBcIiRtZFRoZW1pbmdcIl07XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRtZERpYWxvZ1xuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLmRpYWxvZ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogYCRtZERpYWxvZ2Agb3BlbnMgYSBkaWFsb2cgb3ZlciB0aGUgYXBwIHRvIGluZm9ybSB1c2VycyBhYm91dCBjcml0aWNhbCBpbmZvcm1hdGlvbiBvciByZXF1aXJlXG4gKiAgdGhlbSB0byBtYWtlIGRlY2lzaW9ucy4gVGhlcmUgYXJlIHR3byBhcHByb2FjaGVzIGZvciBzZXR1cDogYSBzaW1wbGUgcHJvbWlzZSBBUElcbiAqICBhbmQgcmVndWxhciBvYmplY3Qgc3ludGF4LlxuICpcbiAqICMjIFJlc3RyaWN0aW9uc1xuICpcbiAqIC0gVGhlIGRpYWxvZyBpcyBhbHdheXMgZ2l2ZW4gYW4gaXNvbGF0ZSBzY29wZS5cbiAqIC0gVGhlIGRpYWxvZydzIHRlbXBsYXRlIG11c3QgaGF2ZSBhbiBvdXRlciBgPG1kLWRpYWxvZz5gIGVsZW1lbnQuXG4gKiAgIEluc2lkZSwgdXNlIGFuIGA8bWQtZGlhbG9nLWNvbnRlbnQ+YCBlbGVtZW50IGZvciB0aGUgZGlhbG9nJ3MgY29udGVudCwgYW5kIHVzZVxuICogICBhbiBlbGVtZW50IHdpdGggY2xhc3MgYG1kLWFjdGlvbnNgIGZvciB0aGUgZGlhbG9nJ3MgYWN0aW9ucy5cbiAqIC0gRGlhbG9ncyBtdXN0IGNvdmVyIHRoZSBlbnRpcmUgYXBwbGljYXRpb24gdG8ga2VlcCBpbnRlcmFjdGlvbnMgaW5zaWRlIG9mIHRoZW0uXG4gKiBVc2UgdGhlIGBwYXJlbnRgIG9wdGlvbiB0byBjaGFuZ2Ugd2hlcmUgZGlhbG9ncyBhcmUgYXBwZW5kZWQuXG4gKlxuICogIyMgU2l6aW5nXG4gKiAtIENvbXBsZXggZGlhbG9ncyBjYW4gYmUgc2l6ZWQgd2l0aCBgZmxleD1cInBlcmNlbnRhZ2VcImAsIGkuZS4gYGZsZXg9XCI2NlwiYC5cbiAqIC0gRGVmYXVsdCBtYXgtd2lkdGggaXMgODAlIG9mIHRoZSBgcm9vdEVsZW1lbnRgIG9yIGBwYXJlbnRgLlxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxkaXYgIG5nLWFwcD1cImRlbW9BcHBcIiBuZy1jb250cm9sbGVyPVwiRW1wbG95ZWVDb250cm9sbGVyXCI+XG4gKiAgIDxkaXY+XG4gKiAgICAgPG1kLWJ1dHRvbiBuZy1jbGljaz1cInNob3dBbGVydCgpXCIgY2xhc3M9XCJtZC1yYWlzZWQgbWQtd2FyblwiPlxuICogICAgICAgRW1wbG95ZWUgQWxlcnQhXG4gKiAgICAgICA8L21kLWJ1dHRvbj5cbiAqICAgPC9kaXY+XG4gKiAgIDxkaXY+XG4gKiAgICAgPG1kLWJ1dHRvbiBuZy1jbGljaz1cInNob3dEaWFsb2coJGV2ZW50KVwiIGNsYXNzPVwibWQtcmFpc2VkXCI+XG4gKiAgICAgICBDdXN0b20gRGlhbG9nXG4gKiAgICAgICA8L21kLWJ1dHRvbj5cbiAqICAgPC9kaXY+XG4gKiAgIDxkaXY+XG4gKiAgICAgPG1kLWJ1dHRvbiBuZy1jbGljaz1cImNsb3NlQWxlcnQoKVwiIG5nLWRpc2FibGVkPVwiIWhhc0FsZXJ0KClcIiBjbGFzcz1cIm1kLXJhaXNlZFwiPlxuICogICAgICAgQ2xvc2UgQWxlcnRcbiAqICAgICA8L21kLWJ1dHRvbj5cbiAqICAgPC9kaXY+XG4gKiAgIDxkaXY+XG4gKiAgICAgPG1kLWJ1dHRvbiBuZy1jbGljaz1cInNob3dHcmVldGluZygkZXZlbnQpXCIgY2xhc3M9XCJtZC1yYWlzZWQgbWQtcHJpbWFyeVwiID5cbiAqICAgICAgIEdyZWV0IEVtcGxveWVlXG4gKiAgICAgICA8L21kLWJ1dHRvbj5cbiAqICAgPC9kaXY+XG4gKiA8L2Rpdj5cbiAqIDwvaGxqcz5cbiAqXG4gKiAjIyMgSmF2YVNjcmlwdDogb2JqZWN0IHN5bnRheFxuICogPGhsanMgbGFuZz1cImpzXCI+XG4gKiAoZnVuY3Rpb24oYW5ndWxhciwgdW5kZWZpbmVkKXtcbiAqICAgXCJ1c2Ugc3RyaWN0XCI7XG4gKlxuICogICBhbmd1bGFyXG4gKiAgICAubW9kdWxlKCdkZW1vQXBwJywgWyduZ01hdGVyaWFsJ10pXG4gKiAgICAuY29udHJvbGxlcignQXBwQ3RybCcsIEFwcENvbnRyb2xsZXIpO1xuICpcbiAqICAgZnVuY3Rpb24gQXBwQ29udHJvbGxlcigkc2NvcGUsICRtZERpYWxvZykge1xuICogICAgIHZhciBhbGVydDtcbiAqICAgICAkc2NvcGUuc2hvd0FsZXJ0ID0gc2hvd0FsZXJ0O1xuICogICAgICRzY29wZS5zaG93RGlhbG9nID0gc2hvd0RpYWxvZztcbiAqICAgICAkc2NvcGUuaXRlbXMgPSBbMSwgMiwgM107XG4gKlxuICogICAgIC8vIEludGVybmFsIG1ldGhvZFxuICogICAgIGZ1bmN0aW9uIHNob3dBbGVydCgpIHtcbiAqICAgICAgIGFsZXJ0ID0gJG1kRGlhbG9nLmFsZXJ0KHtcbiAqICAgICAgICAgdGl0bGU6ICdBdHRlbnRpb24nLFxuICogICAgICAgICBjb250ZW50OiAnVGhpcyBpcyBhbiBleGFtcGxlIG9mIGhvdyBlYXN5IGRpYWxvZ3MgY2FuIGJlIScsXG4gKiAgICAgICAgIG9rOiAnQ2xvc2UnXG4gKiAgICAgICB9KTtcbiAqXG4gKiAgICAgICAkbWREaWFsb2dcbiAqICAgICAgICAgLnNob3coIGFsZXJ0IClcbiAqICAgICAgICAgLmZpbmFsbHkoZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgICAgYWxlcnQgPSB1bmRlZmluZWQ7XG4gKiAgICAgICAgIH0pO1xuICogICAgIH1cbiAqXG4gKiAgICAgZnVuY3Rpb24gc2hvd0RpYWxvZygkZXZlbnQpIHtcbiAqICAgICAgICB2YXIgcGFyZW50RWwgPSBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuYm9keSk7XG4gKiAgICAgICAgJG1kRGlhbG9nLnNob3coe1xuICogICAgICAgICAgcGFyZW50OiBwYXJlbnRFbCxcbiAqICAgICAgICAgIHRhcmdldEV2ZW50OiAkZXZlbnQsXG4gKiAgICAgICAgICB0ZW1wbGF0ZTpcbiAqICAgICAgICAgICAgJzxtZC1kaWFsb2cgYXJpYS1sYWJlbD1cIkxpc3QgZGlhbG9nXCI+JyArXG4gKiAgICAgICAgICAgICcgIDxtZC1kaWFsb2ctY29udGVudD4nK1xuICogICAgICAgICAgICAnICAgIDxtZC1saXN0PicrXG4gKiAgICAgICAgICAgICcgICAgICA8bWQtbGlzdC1pdGVtIG5nLXJlcGVhdD1cIml0ZW0gaW4gaXRlbXNcIj4nK1xuICogICAgICAgICAgICAnICAgICAgIDxwPk51bWJlciB7e2l0ZW19fTwvcD4nICtcbiAqICAgICAgICAgICAgJyAgICAgIDwvbWQtaXRlbT4nK1xuICogICAgICAgICAgICAnICAgIDwvbWQtbGlzdD4nK1xuICogICAgICAgICAgICAnICA8L21kLWRpYWxvZy1jb250ZW50PicgK1xuICogICAgICAgICAgICAnICA8ZGl2IGNsYXNzPVwibWQtYWN0aW9uc1wiPicgK1xuICogICAgICAgICAgICAnICAgIDxtZC1idXR0b24gbmctY2xpY2s9XCJjbG9zZURpYWxvZygpXCIgY2xhc3M9XCJtZC1wcmltYXJ5XCI+JyArXG4gKiAgICAgICAgICAgICcgICAgICBDbG9zZSBEaWFsb2cnICtcbiAqICAgICAgICAgICAgJyAgICA8L21kLWJ1dHRvbj4nICtcbiAqICAgICAgICAgICAgJyAgPC9kaXY+JyArXG4gKiAgICAgICAgICAgICc8L21kLWRpYWxvZz4nLFxuICogICAgICAgICAgbG9jYWxzOiB7XG4gKiAgICAgICAgICAgIGl0ZW1zOiAkc2NvcGUuaXRlbXNcbiAqICAgICAgICAgIH0sXG4gKiAgICAgICAgICBjb250cm9sbGVyOiBEaWFsb2dDb250cm9sbGVyXG4gKiAgICAgICB9KTtcbiAqICAgICAgIGZ1bmN0aW9uIERpYWxvZ0NvbnRyb2xsZXIoJHNjb3BlLCAkbWREaWFsb2csIGl0ZW1zKSB7XG4gKiAgICAgICAgICRzY29wZS5pdGVtcyA9IGl0ZW1zO1xuICogICAgICAgICAkc2NvcGUuY2xvc2VEaWFsb2cgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAkbWREaWFsb2cuaGlkZSgpO1xuICogICAgICAgICB9XG4gKiAgICAgICB9XG4gKiAgICAgfVxuICogICB9XG4gKiB9KShhbmd1bGFyKTtcbiAqIDwvaGxqcz5cbiAqXG4gKiAjIyMgSmF2YVNjcmlwdDogcHJvbWlzZSBBUEkgc3ludGF4LCBjdXN0b20gZGlhbG9nIHRlbXBsYXRlXG4gKiA8aGxqcyBsYW5nPVwianNcIj5cbiAqIChmdW5jdGlvbihhbmd1bGFyLCB1bmRlZmluZWQpe1xuICogICBcInVzZSBzdHJpY3RcIjtcbiAqXG4gKiAgIGFuZ3VsYXJcbiAqICAgICAubW9kdWxlKCdkZW1vQXBwJywgWyduZ01hdGVyaWFsJ10pXG4gKiAgICAgLmNvbnRyb2xsZXIoJ0VtcGxveWVlQ29udHJvbGxlcicsIEVtcGxveWVlRWRpdG9yKVxuICogICAgIC5jb250cm9sbGVyKCdHcmVldGluZ0NvbnRyb2xsZXInLCBHcmVldGluZ0NvbnRyb2xsZXIpO1xuICpcbiAqICAgLy8gRmljdGl0aW91cyBFbXBsb3llZSBFZGl0b3IgdG8gc2hvdyBob3cgdG8gdXNlIHNpbXBsZSBhbmQgY29tcGxleCBkaWFsb2dzLlxuICpcbiAqICAgZnVuY3Rpb24gRW1wbG95ZWVFZGl0b3IoJHNjb3BlLCAkbWREaWFsb2cpIHtcbiAqICAgICB2YXIgYWxlcnQ7XG4gKlxuICogICAgICRzY29wZS5zaG93QWxlcnQgPSBzaG93QWxlcnQ7XG4gKiAgICAgJHNjb3BlLmNsb3NlQWxlcnQgPSBjbG9zZUFsZXJ0O1xuICogICAgICRzY29wZS5zaG93R3JlZXRpbmcgPSBzaG93Q3VzdG9tR3JlZXRpbmc7XG4gKlxuICogICAgICRzY29wZS5oYXNBbGVydCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gISFhbGVydCB9O1xuICogICAgICRzY29wZS51c2VyTmFtZSA9ICRzY29wZS51c2VyTmFtZSB8fCAnQm9iYnknO1xuICpcbiAqICAgICAvLyBEaWFsb2cgIzEgLSBTaG93IHNpbXBsZSBhbGVydCBkaWFsb2cgYW5kIGNhY2hlXG4gKiAgICAgLy8gcmVmZXJlbmNlIHRvIGRpYWxvZyBpbnN0YW5jZVxuICpcbiAqICAgICBmdW5jdGlvbiBzaG93QWxlcnQoKSB7XG4gKiAgICAgICBhbGVydCA9ICRtZERpYWxvZy5hbGVydCgpXG4gKiAgICAgICAgIC50aXRsZSgnQXR0ZW50aW9uLCAnICsgJHNjb3BlLnVzZXJOYW1lKVxuICogICAgICAgICAuY29udGVudCgnVGhpcyBpcyBhbiBleGFtcGxlIG9mIGhvdyBlYXN5IGRpYWxvZ3MgY2FuIGJlIScpXG4gKiAgICAgICAgIC5vaygnQ2xvc2UnKTtcbiAqXG4gKiAgICAgICAkbWREaWFsb2dcbiAqICAgICAgICAgICAuc2hvdyggYWxlcnQgKVxuICogICAgICAgICAgIC5maW5hbGx5KGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgYWxlcnQgPSB1bmRlZmluZWQ7XG4gKiAgICAgICAgICAgfSk7XG4gKiAgICAgfVxuICpcbiAqICAgICAvLyBDbG9zZSB0aGUgc3BlY2lmaWVkIGRpYWxvZyBpbnN0YW5jZSBhbmQgcmVzb2x2ZSB3aXRoICdmaW5pc2hlZCcgZmxhZ1xuICogICAgIC8vIE5vcm1hbGx5IHRoaXMgaXMgbm90IG5lZWRlZCwganVzdCB1c2UgJyRtZERpYWxvZy5oaWRlKCknIHRvIGNsb3NlXG4gKiAgICAgLy8gdGhlIG1vc3QgcmVjZW50IGRpYWxvZyBwb3B1cC5cbiAqXG4gKiAgICAgZnVuY3Rpb24gY2xvc2VBbGVydCgpIHtcbiAqICAgICAgICRtZERpYWxvZy5oaWRlKCBhbGVydCwgXCJmaW5pc2hlZFwiICk7XG4gKiAgICAgICBhbGVydCA9IHVuZGVmaW5lZDtcbiAqICAgICB9XG4gKlxuICogICAgIC8vIERpYWxvZyAjMiAtIERlbW9uc3RyYXRlIG1vcmUgY29tcGxleCBkaWFsb2dzIGNvbnN0cnVjdGlvbiBhbmQgcG9wdXAuXG4gKlxuICogICAgIGZ1bmN0aW9uIHNob3dDdXN0b21HcmVldGluZygkZXZlbnQpIHtcbiAqICAgICAgICAgJG1kRGlhbG9nLnNob3coe1xuICogICAgICAgICAgIHRhcmdldEV2ZW50OiAkZXZlbnQsXG4gKiAgICAgICAgICAgdGVtcGxhdGU6XG4gKiAgICAgICAgICAgICAnPG1kLWRpYWxvZz4nICtcbiAqXG4gKiAgICAgICAgICAgICAnICA8bWQtZGlhbG9nLWNvbnRlbnQ+SGVsbG8ge3sgZW1wbG95ZWUgfX0hPC9tZC1kaWFsb2ctY29udGVudD4nICtcbiAqXG4gKiAgICAgICAgICAgICAnICA8ZGl2IGNsYXNzPVwibWQtYWN0aW9uc1wiPicgK1xuICogICAgICAgICAgICAgJyAgICA8bWQtYnV0dG9uIG5nLWNsaWNrPVwiY2xvc2VEaWFsb2coKVwiIGNsYXNzPVwibWQtcHJpbWFyeVwiPicgK1xuICogICAgICAgICAgICAgJyAgICAgIENsb3NlIEdyZWV0aW5nJyArXG4gKiAgICAgICAgICAgICAnICAgIDwvbWQtYnV0dG9uPicgK1xuICogICAgICAgICAgICAgJyAgPC9kaXY+JyArXG4gKiAgICAgICAgICAgICAnPC9tZC1kaWFsb2c+JyxcbiAqICAgICAgICAgICBjb250cm9sbGVyOiAnR3JlZXRpbmdDb250cm9sbGVyJyxcbiAqICAgICAgICAgICBvbkNvbXBsZXRlOiBhZnRlclNob3dBbmltYXRpb24sXG4gKiAgICAgICAgICAgbG9jYWxzOiB7IGVtcGxveWVlOiAkc2NvcGUudXNlck5hbWUgfVxuICogICAgICAgICB9KTtcbiAqXG4gKiAgICAgICAgIC8vIFdoZW4gdGhlICdlbnRlcicgYW5pbWF0aW9uIGZpbmlzaGVzLi4uXG4gKlxuICogICAgICAgICBmdW5jdGlvbiBhZnRlclNob3dBbmltYXRpb24oc2NvcGUsIGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAqICAgICAgICAgICAgLy8gcG9zdC1zaG93IGNvZGUgaGVyZTogRE9NIGVsZW1lbnQgZm9jdXMsIGV0Yy5cbiAqICAgICAgICAgfVxuICogICAgIH1cbiAqXG4gKiAgICAgLy8gRGlhbG9nICMzIC0gRGVtb25zdHJhdGUgdXNlIG9mIENvbnRyb2xsZXJBcyBhbmQgcGFzc2luZyAkc2NvcGUgdG8gZGlhbG9nXG4gKiAgICAgLy8gICAgICAgICAgICAgSGVyZSB3ZSB1c2VkIG5nLWNvbnRyb2xsZXI9XCJHcmVldGluZ0NvbnRyb2xsZXIgYXMgdm1cIiBhbmRcbiAqICAgICAvLyAgICAgICAgICAgICAkc2NvcGUudm0gPT09IDxjb250cm9sbGVyIGluc3RhbmNlPlxuICpcbiAqICAgICBmdW5jdGlvbiBzaG93Q3VzdG9tR3JlZXRpbmcoKSB7XG4gKlxuICogICAgICAgICRtZERpYWxvZy5zaG93KHtcbiAqICAgICAgICAgICBjbGlja091dHNpZGVUb0Nsb3NlOiB0cnVlLFxuICpcbiAqICAgICAgICAgICBzY29wZTogJHNjb3BlLCAgICAgICAgLy8gdXNlIHBhcmVudCBzY29wZSBpbiB0ZW1wbGF0ZVxuICogICAgICAgICAgIHByZXNlcnZlU2NvcGU6IHRydWUsICAvLyBkbyBub3QgZm9yZ2V0IHRoaXMgaWYgdXNlIHBhcmVudCBzY29wZVxuXG4gKiAgICAgICAgICAgLy8gU2luY2UgR3JlZXRpbmdDb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZCB3aXRoIENvbnRyb2xsZXJBcyBzeW50YXhcbiAqICAgICAgICAgICAvLyBBTkQgd2UgYXJlIHBhc3NpbmcgdGhlIHBhcmVudCAnJHNjb3BlJyB0byB0aGUgZGlhbG9nLCB3ZSBNVVNUXG4gKiAgICAgICAgICAgLy8gdXNlICd2bS48eHh4PicgaW4gdGhlIHRlbXBsYXRlIG1hcmt1cFxuICpcbiAqICAgICAgICAgICB0ZW1wbGF0ZTogJzxtZC1kaWFsb2c+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICcgIDxtZC1kaWFsb2ctY29udGVudD4nICtcbiAqICAgICAgICAgICAgICAgICAgICAgJyAgICAgSGkgVGhlcmUge3t2bS5lbXBsb3llZX19JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICcgIDwvbWQtZGlhbG9nLWNvbnRlbnQ+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICc8L21kLWRpYWxvZz4nLFxuICpcbiAqICAgICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbiBEaWFsb2dDb250cm9sbGVyKCRzY29wZSwgJG1kRGlhbG9nKSB7XG4gKiAgICAgICAgICAgICAkc2NvcGUuY2xvc2VEaWFsb2cgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcbiAqICAgICAgICAgICAgIH1cbiAqICAgICAgICAgICB9XG4gKiAgICAgICAgfSk7XG4gKiAgICAgfVxuICpcbiAqICAgfVxuICpcbiAqICAgLy8gR3JlZXRpbmcgY29udHJvbGxlciB1c2VkIHdpdGggdGhlIG1vcmUgY29tcGxleCAnc2hvd0N1c3RvbUdyZWV0aW5nKCknIGN1c3RvbSBkaWFsb2dcbiAqXG4gKiAgIGZ1bmN0aW9uIEdyZWV0aW5nQ29udHJvbGxlcigkc2NvcGUsICRtZERpYWxvZywgZW1wbG95ZWUpIHtcbiAqICAgICAvLyBBc3NpZ25lZCBmcm9tIGNvbnN0cnVjdGlvbiA8Y29kZT5sb2NhbHM8L2NvZGU+IG9wdGlvbnMuLi5cbiAqICAgICAkc2NvcGUuZW1wbG95ZWUgPSBlbXBsb3llZTtcbiAqXG4gKiAgICAgJHNjb3BlLmNsb3NlRGlhbG9nID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgICAvLyBFYXNpbHkgaGlkZXMgbW9zdCByZWNlbnQgZGlhbG9nIHNob3duLi4uXG4gKiAgICAgICAvLyBubyBzcGVjaWZpYyBpbnN0YW5jZSByZWZlcmVuY2UgaXMgbmVlZGVkLlxuICogICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcbiAqICAgICB9O1xuICogICB9XG4gKlxuICogfSkoYW5ndWxhcik7XG4gKiA8L2hsanM+XG4gKi9cblxuIC8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJG1kRGlhbG9nI2FsZXJ0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBCdWlsZHMgYSBwcmVjb25maWd1cmVkIGRpYWxvZyB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZS5cbiAqXG4gKiBAcmV0dXJucyB7b2JqfSBhbiBgJG1kRGlhbG9nUHJlc2V0YCB3aXRoIHRoZSBjaGFpbmFibGUgY29uZmlndXJhdGlvbiBtZXRob2RzOlxuICpcbiAqIC0gJG1kRGlhbG9nUHJlc2V0I3RpdGxlKHN0cmluZykgLSBzZXRzIHRpdGxlIHRvIHN0cmluZ1xuICogLSAkbWREaWFsb2dQcmVzZXQjY29udGVudChzdHJpbmcpIC0gc2V0cyBjb250ZW50IC8gbWVzc2FnZSB0byBzdHJpbmdcbiAqIC0gJG1kRGlhbG9nUHJlc2V0I29rKHN0cmluZykgLSBzZXRzIG9rYXkgYnV0dG9uIHRleHQgdG8gc3RyaW5nXG4gKiAtICRtZERpYWxvZ1ByZXNldCN0aGVtZShzdHJpbmcpIC0gc2V0cyB0aGUgdGhlbWUgb2YgdGhlIGRpYWxvZ1xuICpcbiAqL1xuXG4gLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkbWREaWFsb2cjY29uZmlybVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQnVpbGRzIGEgcHJlY29uZmlndXJlZCBkaWFsb2cgd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UuIFlvdSBjYW4gY2FsbCBzaG93IGFuZCB0aGUgcHJvbWlzZSByZXR1cm5lZFxuICogd2lsbCBiZSByZXNvbHZlZCBvbmx5IGlmIHRoZSB1c2VyIGNsaWNrcyB0aGUgY29uZmlybSBhY3Rpb24gb24gdGhlIGRpYWxvZy5cbiAqXG4gKiBAcmV0dXJucyB7b2JqfSBhbiBgJG1kRGlhbG9nUHJlc2V0YCB3aXRoIHRoZSBjaGFpbmFibGUgY29uZmlndXJhdGlvbiBtZXRob2RzOlxuICpcbiAqIEFkZGl0aW9uYWxseSwgaXQgc3VwcG9ydHMgdGhlIGZvbGxvd2luZyBtZXRob2RzOlxuICpcbiAqIC0gJG1kRGlhbG9nUHJlc2V0I3RpdGxlKHN0cmluZykgLSBzZXRzIHRpdGxlIHRvIHN0cmluZ1xuICogLSAkbWREaWFsb2dQcmVzZXQjY29udGVudChzdHJpbmcpIC0gc2V0cyBjb250ZW50IC8gbWVzc2FnZSB0byBzdHJpbmdcbiAqIC0gJG1kRGlhbG9nUHJlc2V0I29rKHN0cmluZykgLSBzZXRzIG9rYXkgYnV0dG9uIHRleHQgdG8gc3RyaW5nXG4gKiAtICRtZERpYWxvZ1ByZXNldCNjYW5jZWwoc3RyaW5nKSAtIHNldHMgY2FuY2VsIGJ1dHRvbiB0ZXh0IHRvIHN0cmluZ1xuICogLSAkbWREaWFsb2dQcmVzZXQjdGhlbWUoc3RyaW5nKSAtIHNldHMgdGhlIHRoZW1lIG9mIHRoZSBkaWFsb2dcbiAqXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkbWREaWFsb2cjc2hvd1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2hvdyBhIGRpYWxvZyB3aXRoIHRoZSBzcGVjaWZpZWQgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc09yUHJlc2V0IEVpdGhlciBwcm92aWRlIGFuIGAkbWREaWFsb2dQcmVzZXRgIHJldHVybmVkIGZyb20gYGFsZXJ0KClgLCBhbmRcbiAqIGBjb25maXJtKClgLCBvciBhbiBvcHRpb25zIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqICAgLSBgdGVtcGxhdGVVcmxgIC0gYHtzdHJpbmc9fWA6IFRoZSB1cmwgb2YgYSB0ZW1wbGF0ZSB0aGF0IHdpbGwgYmUgdXNlZCBhcyB0aGUgY29udGVudFxuICogICBvZiB0aGUgZGlhbG9nLlxuICogICAtIGB0ZW1wbGF0ZWAgLSBge3N0cmluZz19YDogU2FtZSBhcyB0ZW1wbGF0ZVVybCwgZXhjZXB0IHRoaXMgaXMgYW4gYWN0dWFsIHRlbXBsYXRlIHN0cmluZy5cbiAqICAgLSBgdGFyZ2V0RXZlbnRgIC0gYHtET01DbGlja0V2ZW50PX1gOiBBIGNsaWNrJ3MgZXZlbnQgb2JqZWN0LiBXaGVuIHBhc3NlZCBpbiBhcyBhbiBvcHRpb24sXG4gKiAgICAgdGhlIGxvY2F0aW9uIG9mIHRoZSBjbGljayB3aWxsIGJlIHVzZWQgYXMgdGhlIHN0YXJ0aW5nIHBvaW50IGZvciB0aGUgb3BlbmluZyBhbmltYXRpb25cbiAqICAgICBvZiB0aGUgdGhlIGRpYWxvZy5cbiAqICAgLSBgc2NvcGVgIC0gYHtvYmplY3Q9fWA6IHRoZSBzY29wZSB0byBsaW5rIHRoZSB0ZW1wbGF0ZSAvIGNvbnRyb2xsZXIgdG8uIElmIG5vbmUgaXMgc3BlY2lmaWVkLFxuICogICAgIGl0IHdpbGwgY3JlYXRlIGEgbmV3IGlzb2xhdGUgc2NvcGUuXG4gKiAgICAgVGhpcyBzY29wZSB3aWxsIGJlIGRlc3Ryb3llZCB3aGVuIHRoZSBkaWFsb2cgaXMgcmVtb3ZlZCB1bmxlc3MgYHByZXNlcnZlU2NvcGVgIGlzIHNldCB0byB0cnVlLlxuICogICAtIGBwcmVzZXJ2ZVNjb3BlYCAtIGB7Ym9vbGVhbj19YDogd2hldGhlciB0byBwcmVzZXJ2ZSB0aGUgc2NvcGUgd2hlbiB0aGUgZWxlbWVudCBpcyByZW1vdmVkLiBEZWZhdWx0IGlzIGZhbHNlXG4gKiAgIC0gYGRpc2FibGVQYXJlbnRTY3JvbGxgIC0gYHtib29sZWFuPX1gOiBXaGV0aGVyIHRvIGRpc2FibGUgc2Nyb2xsaW5nIHdoaWxlIHRoZSBkaWFsb2cgaXMgb3Blbi5cbiAqICAgICBEZWZhdWx0IHRydWUuXG4gKiAgIC0gYGhhc0JhY2tkcm9wYCAtIGB7Ym9vbGVhbj19YDogV2hldGhlciB0aGVyZSBzaG91bGQgYmUgYW4gb3BhcXVlIGJhY2tkcm9wIGJlaGluZCB0aGUgZGlhbG9nLlxuICogICAgIERlZmF1bHQgdHJ1ZS5cbiAqICAgLSBgY2xpY2tPdXRzaWRlVG9DbG9zZWAgLSBge2Jvb2xlYW49fWA6IFdoZXRoZXIgdGhlIHVzZXIgY2FuIGNsaWNrIG91dHNpZGUgdGhlIGRpYWxvZyB0b1xuICogICAgIGNsb3NlIGl0LiBEZWZhdWx0IGZhbHNlLlxuICogICAtIGBlc2NhcGVUb0Nsb3NlYCAtIGB7Ym9vbGVhbj19YDogV2hldGhlciB0aGUgdXNlciBjYW4gcHJlc3MgZXNjYXBlIHRvIGNsb3NlIHRoZSBkaWFsb2cuXG4gKiAgICAgRGVmYXVsdCB0cnVlLlxuICogICAtIGBmb2N1c09uT3BlbmAgLSBge2Jvb2xlYW49fWA6IEFuIG9wdGlvbiB0byBvdmVycmlkZSBmb2N1cyBiZWhhdmlvciBvbiBvcGVuLiBPbmx5IGRpc2FibGUgaWZcbiAqICAgICBmb2N1c2luZyBzb21lIG90aGVyIHdheSwgYXMgZm9jdXMgbWFuYWdlbWVudCBpcyByZXF1aXJlZCBmb3IgZGlhbG9ncyB0byBiZSBhY2Nlc3NpYmxlLlxuICogICAgIERlZmF1bHRzIHRvIHRydWUuXG4gKiAgIC0gYGNvbnRyb2xsZXJgIC0gYHtzdHJpbmc9fWA6IFRoZSBjb250cm9sbGVyIHRvIGFzc29jaWF0ZSB3aXRoIHRoZSBkaWFsb2cuIFRoZSBjb250cm9sbGVyXG4gKiAgICAgd2lsbCBiZSBpbmplY3RlZCB3aXRoIHRoZSBsb2NhbCBgJG1kRGlhbG9nYCwgd2hpY2ggcGFzc2VzIGFsb25nIGEgc2NvcGUgZm9yIHRoZSBkaWFsb2cuXG4gKiAgIC0gYGxvY2Fsc2AgLSBge29iamVjdD19YDogQW4gb2JqZWN0IGNvbnRhaW5pbmcga2V5L3ZhbHVlIHBhaXJzLiBUaGUga2V5cyB3aWxsIGJlIHVzZWQgYXMgbmFtZXNcbiAqICAgICBvZiB2YWx1ZXMgdG8gaW5qZWN0IGludG8gdGhlIGNvbnRyb2xsZXIuIEZvciBleGFtcGxlLCBgbG9jYWxzOiB7dGhyZWU6IDN9YCB3b3VsZCBpbmplY3RcbiAqICAgICBgdGhyZWVgIGludG8gdGhlIGNvbnRyb2xsZXIsIHdpdGggdGhlIHZhbHVlIDMuIElmIGBiaW5kVG9Db250cm9sbGVyYCBpcyB0cnVlLCB0aGV5IHdpbGwgYmVcbiAqICAgICBjb3BpZWQgdG8gdGhlIGNvbnRyb2xsZXIgaW5zdGVhZC5cbiAqICAgLSBgYmluZFRvQ29udHJvbGxlcmAgLSBgYm9vbGA6IGJpbmQgdGhlIGxvY2FscyB0byB0aGUgY29udHJvbGxlciwgaW5zdGVhZCBvZiBwYXNzaW5nIHRoZW0gaW4uXG4gKiAgICAgVGhlc2UgdmFsdWVzIHdpbGwgbm90IGJlIGF2YWlsYWJsZSB1bnRpbCBhZnRlciBpbml0aWFsaXphdGlvbi5cbiAqICAgLSBgcmVzb2x2ZWAgLSBge29iamVjdD19YDogU2ltaWxhciB0byBsb2NhbHMsIGV4Y2VwdCBpdCB0YWtlcyBwcm9taXNlcyBhcyB2YWx1ZXMsIGFuZCB0aGVcbiAqICAgICBkaWFsb2cgd2lsbCBub3Qgb3BlbiB1bnRpbCBhbGwgb2YgdGhlIHByb21pc2VzIHJlc29sdmUuXG4gKiAgIC0gYGNvbnRyb2xsZXJBc2AgLSBge3N0cmluZz19YDogQW4gYWxpYXMgdG8gYXNzaWduIHRoZSBjb250cm9sbGVyIHRvIG9uIHRoZSBzY29wZS5cbiAqICAgLSBgcGFyZW50YCAtIGB7ZWxlbWVudD19YDogVGhlIGVsZW1lbnQgdG8gYXBwZW5kIHRoZSBkaWFsb2cgdG8uIERlZmF1bHRzIHRvIGFwcGVuZGluZ1xuICogICAgIHRvIHRoZSByb290IGVsZW1lbnQgb2YgdGhlIGFwcGxpY2F0aW9uLlxuICogICAtIGBvbkNvbXBsZXRlYCBge2Z1bmN0aW9uPX1gOiBDYWxsYmFjayBmdW5jdGlvbiB1c2VkIHRvIGFubm91bmNlIHdoZW4gdGhlIHNob3coKSBhY3Rpb24gaXNcbiAqICAgICBmaW5pc2hlZC5cbiAqXG4gKiBAcmV0dXJucyB7cHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgY2FuIGJlIHJlc29sdmVkIHdpdGggYCRtZERpYWxvZy5oaWRlKClgIG9yXG4gKiByZWplY3RlZCB3aXRoIGAkbWREaWFsb2cuY2FuY2VsKClgLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJG1kRGlhbG9nI2hpZGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhpZGUgYW4gZXhpc3RpbmcgZGlhbG9nIGFuZCByZXNvbHZlIHRoZSBwcm9taXNlIHJldHVybmVkIGZyb20gYCRtZERpYWxvZy5zaG93KClgLlxuICpcbiAqIEBwYXJhbSB7Kj19IHJlc3BvbnNlIEFuIGFyZ3VtZW50IGZvciB0aGUgcmVzb2x2ZWQgcHJvbWlzZS5cbiAqXG4gKiBAcmV0dXJucyB7cHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiB0aGUgZGlhbG9nIGhhcyBiZWVuIGNsb3NlZC5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRtZERpYWxvZyNjYW5jZWxcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhpZGUgYW4gZXhpc3RpbmcgZGlhbG9nIGFuZCByZWplY3QgdGhlIHByb21pc2UgcmV0dXJuZWQgZnJvbSBgJG1kRGlhbG9nLnNob3coKWAuXG4gKlxuICogQHBhcmFtIHsqPX0gcmVzcG9uc2UgQW4gYXJndW1lbnQgZm9yIHRoZSByZWplY3RlZCBwcm9taXNlLlxuICpcbiAqIEByZXR1cm5zIHtwcm9taXNlfSBBIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCB3aGVuIHRoZSBkaWFsb2cgaGFzIGJlZW4gY2xvc2VkLlxuICovXG5cbmZ1bmN0aW9uIE1kRGlhbG9nUHJvdmlkZXIoJCRpbnRlcmltRWxlbWVudFByb3ZpZGVyKSB7XG5cbiAgdmFyIGFsZXJ0RGlhbG9nTWV0aG9kcyA9IFsndGl0bGUnLCAnY29udGVudCcsICdhcmlhTGFiZWwnLCAnb2snXTtcblxuICBhZHZhbmNlZERpYWxvZ09wdGlvbnMuJGluamVjdCA9IFtcIiRtZERpYWxvZ1wiLCBcIiRtZFRoZW1pbmdcIl07XG4gIGRpYWxvZ0RlZmF1bHRPcHRpb25zLiRpbmplY3QgPSBbXCIkbWRBcmlhXCIsIFwiJGRvY3VtZW50XCIsIFwiJG1kVXRpbFwiLCBcIiRtZENvbnN0YW50XCIsIFwiJG1kVGhlbWluZ1wiLCBcIiRtZERpYWxvZ1wiLCBcIiR0aW1lb3V0XCIsIFwiJHJvb3RFbGVtZW50XCIsIFwiJGFuaW1hdGVcIiwgXCIkJHJBRlwiLCBcIiRxXCJdO1xuICByZXR1cm4gJCRpbnRlcmltRWxlbWVudFByb3ZpZGVyKCckbWREaWFsb2cnKVxuICAgIC5zZXREZWZhdWx0cyh7XG4gICAgICBtZXRob2RzOiBbJ2Rpc2FibGVQYXJlbnRTY3JvbGwnLCAnaGFzQmFja2Ryb3AnLCAnY2xpY2tPdXRzaWRlVG9DbG9zZScsICdlc2NhcGVUb0Nsb3NlJywgJ3RhcmdldEV2ZW50JywgJ3BhcmVudCddLFxuICAgICAgb3B0aW9uczogZGlhbG9nRGVmYXVsdE9wdGlvbnNcbiAgICB9KVxuICAgIC5hZGRQcmVzZXQoJ2FsZXJ0Jywge1xuICAgICAgbWV0aG9kczogWyd0aXRsZScsICdjb250ZW50JywgJ2FyaWFMYWJlbCcsICdvaycsICd0aGVtZSddLFxuICAgICAgb3B0aW9uczogYWR2YW5jZWREaWFsb2dPcHRpb25zXG4gICAgfSlcbiAgICAuYWRkUHJlc2V0KCdjb25maXJtJywge1xuICAgICAgbWV0aG9kczogWyd0aXRsZScsICdjb250ZW50JywgJ2FyaWFMYWJlbCcsICdvaycsICdjYW5jZWwnLCAndGhlbWUnXSxcbiAgICAgIG9wdGlvbnM6IGFkdmFuY2VkRGlhbG9nT3B0aW9uc1xuICAgIH0pO1xuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBhZHZhbmNlZERpYWxvZ09wdGlvbnMoJG1kRGlhbG9nLCAkbWRUaGVtaW5nKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRlbXBsYXRlOiBbXG4gICAgICAgICc8bWQtZGlhbG9nIG1kLXRoZW1lPVwie3sgZGlhbG9nLnRoZW1lIH19XCIgYXJpYS1sYWJlbD1cInt7IGRpYWxvZy5hcmlhTGFiZWwgfX1cIj4nLFxuICAgICAgICAgICc8bWQtZGlhbG9nLWNvbnRlbnQgcm9sZT1cImRvY3VtZW50XCIgdGFiSW5kZXg9XCItMVwiPicsXG4gICAgICAgICAgICAnPGgyIGNsYXNzPVwibWQtdGl0bGVcIj57eyBkaWFsb2cudGl0bGUgfX08L2gyPicsXG4gICAgICAgICAgICAnPHA+e3sgZGlhbG9nLmNvbnRlbnQgfX08L3A+JyxcbiAgICAgICAgICAnPC9tZC1kaWFsb2ctY29udGVudD4nLFxuICAgICAgICAgICc8ZGl2IGNsYXNzPVwibWQtYWN0aW9uc1wiPicsXG4gICAgICAgICAgICAnPG1kLWJ1dHRvbiBuZy1pZj1cImRpYWxvZy4kdHlwZSA9PSBcXCdjb25maXJtXFwnXCInICtcbiAgICAgICAgICAgICAgICAgICAgICAnIG5nLWNsaWNrPVwiZGlhbG9nLmFib3J0KClcIiBjbGFzcz1cIm1kLXByaW1hcnlcIj4nLFxuICAgICAgICAgICAgICAne3sgZGlhbG9nLmNhbmNlbCB9fScsXG4gICAgICAgICAgICAnPC9tZC1idXR0b24+JyxcbiAgICAgICAgICAgICc8bWQtYnV0dG9uIG5nLWNsaWNrPVwiZGlhbG9nLmhpZGUoKVwiIGNsYXNzPVwibWQtcHJpbWFyeVwiPicsXG4gICAgICAgICAgICAgICd7eyBkaWFsb2cub2sgfX0nLFxuICAgICAgICAgICAgJzwvbWQtYnV0dG9uPicsXG4gICAgICAgICAgJzwvZGl2PicsXG4gICAgICAgICc8L21kLWRpYWxvZz4nXG4gICAgICBdLmpvaW4oJycpLFxuICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24gbWREaWFsb2dDdHJsKCkge1xuICAgICAgICB0aGlzLmhpZGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkbWREaWFsb2cuaGlkZSh0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRtZERpYWxvZy5jYW5jZWwoKTtcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBjb250cm9sbGVyQXM6ICdkaWFsb2cnLFxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgIHRoZW1lOiAkbWRUaGVtaW5nLmRlZmF1bHRUaGVtZSgpXG4gICAgfTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBkaWFsb2dEZWZhdWx0T3B0aW9ucygkbWRBcmlhLCAkZG9jdW1lbnQsICRtZFV0aWwsICRtZENvbnN0YW50LCAkbWRUaGVtaW5nLCAkbWREaWFsb2csICR0aW1lb3V0LCAkcm9vdEVsZW1lbnQsICRhbmltYXRlLCAkJHJBRiwgJHEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaGFzQmFja2Ryb3A6IHRydWUsXG4gICAgICBpc29sYXRlU2NvcGU6IHRydWUsXG4gICAgICBvblNob3c6IG9uU2hvdyxcbiAgICAgIG9uUmVtb3ZlOiBvblJlbW92ZSxcbiAgICAgIGNsaWNrT3V0c2lkZVRvQ2xvc2U6IGZhbHNlLFxuICAgICAgZXNjYXBlVG9DbG9zZTogdHJ1ZSxcbiAgICAgIHRhcmdldEV2ZW50OiBudWxsLFxuICAgICAgZm9jdXNPbk9wZW46IHRydWUsXG4gICAgICBkaXNhYmxlUGFyZW50U2Nyb2xsOiB0cnVlLFxuICAgICAgdHJhbnNmb3JtVGVtcGxhdGU6IGZ1bmN0aW9uKHRlbXBsYXRlKSB7XG4gICAgICAgIHJldHVybiAnPGRpdiBjbGFzcz1cIm1kLWRpYWxvZy1jb250YWluZXJcIj4nICsgdGVtcGxhdGUgKyAnPC9kaXY+JztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdHJhcEZvY3VzKGV2KSB7XG4gICAgICB2YXIgZGlhbG9nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWQtZGlhbG9nJyk7XG5cbiAgICAgIGlmIChkaWFsb2cgJiYgIWRpYWxvZy5jb250YWlucyhldi50YXJnZXQpKSB7XG4gICAgICAgIGV2LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICBkaWFsb2cuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPbiBzaG93IG1ldGhvZCBmb3IgZGlhbG9nc1xuICAgIGZ1bmN0aW9uIG9uU2hvdyhzY29wZSwgZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgYW5ndWxhci5lbGVtZW50KCRkb2N1bWVudFswXS5ib2R5KS5hZGRDbGFzcygnbWQtZGlhbG9nLWlzLXNob3dpbmcnKTtcbiAgICAgIGVsZW1lbnQgPSAkbWRVdGlsLmV4dHJhY3RFbGVtZW50QnlOYW1lKGVsZW1lbnQsICdtZC1kaWFsb2cnKTtcblxuICAgICAgLy8gSW5jYXNlIHRoZSB1c2VyIHByb3ZpZGVzIGEgcmF3IGRvbSBlbGVtZW50LCBhbHdheXMgd3JhcCBpdCBpbiBqcUxpdGVcbiAgICAgIG9wdGlvbnMucGFyZW50ID0gYW5ndWxhci5lbGVtZW50KG9wdGlvbnMucGFyZW50KTtcblxuICAgICAgb3B0aW9ucy5wb3BJblRhcmdldCA9IGFuZ3VsYXIuZWxlbWVudCgob3B0aW9ucy50YXJnZXRFdmVudCB8fCB7fSkudGFyZ2V0KTtcbiAgICAgIHZhciBjbG9zZUJ1dHRvbiA9IGZpbmRDbG9zZUJ1dHRvbigpO1xuXG4gICAgICBpZiAob3B0aW9ucy5oYXNCYWNrZHJvcCkge1xuICAgICAgICAvLyBGaXggZm9yIElFIDEwXG4gICAgICAgIHZhciBjb21wdXRlRnJvbSA9IChvcHRpb25zLnBhcmVudFswXSA9PSAkZG9jdW1lbnRbMF0uYm9keSAmJiAkZG9jdW1lbnRbMF0uZG9jdW1lbnRFbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAkZG9jdW1lbnRbMF0uZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCkgPyBhbmd1bGFyLmVsZW1lbnQoJGRvY3VtZW50WzBdLmRvY3VtZW50RWxlbWVudCkgOiBvcHRpb25zLnBhcmVudDtcbiAgICAgICAgdmFyIHBhcmVudE9mZnNldCA9IGNvbXB1dGVGcm9tLnByb3AoJ3Njcm9sbFRvcCcpO1xuICAgICAgICBvcHRpb25zLmJhY2tkcm9wID0gYW5ndWxhci5lbGVtZW50KCc8bWQtYmFja2Ryb3AgY2xhc3M9XCJtZC1kaWFsb2ctYmFja2Ryb3AgbWQtb3BhcXVlXCI+Jyk7XG4gICAgICAgIG9wdGlvbnMuYmFja2Ryb3AuY3NzKCd0b3AnLCBwYXJlbnRPZmZzZXQgKydweCcpO1xuICAgICAgICAkbWRUaGVtaW5nLmluaGVyaXQob3B0aW9ucy5iYWNrZHJvcCwgb3B0aW9ucy5wYXJlbnQpO1xuICAgICAgICAkYW5pbWF0ZS5lbnRlcihvcHRpb25zLmJhY2tkcm9wLCBvcHRpb25zLnBhcmVudCk7XG4gICAgICAgIGVsZW1lbnQuY3NzKCd0b3AnLCBwYXJlbnRPZmZzZXQgKydweCcpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcm9sZSA9ICdkaWFsb2cnLFxuICAgICAgICAgIGVsZW1lbnRUb0ZvY3VzID0gY2xvc2VCdXR0b247XG5cbiAgICAgIGlmIChvcHRpb25zLiR0eXBlID09PSAnYWxlcnQnKSB7XG4gICAgICAgIHJvbGUgPSAnYWxlcnRkaWFsb2cnO1xuICAgICAgICBlbGVtZW50VG9Gb2N1cyA9IGVsZW1lbnQuZmluZCgnbWQtZGlhbG9nLWNvbnRlbnQnKTtcbiAgICAgIH1cblxuICAgICAgY29uZmlndXJlQXJpYShlbGVtZW50LmZpbmQoJ21kLWRpYWxvZycpLCByb2xlLCBvcHRpb25zKTtcblxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0cmFwRm9jdXMsIHRydWUpO1xuXG4gICAgICBpZiAob3B0aW9ucy5kaXNhYmxlUGFyZW50U2Nyb2xsKSB7XG4gICAgICAgIG9wdGlvbnMubGFzdE92ZXJmbG93ID0gb3B0aW9ucy5wYXJlbnQuY3NzKCdvdmVyZmxvdycpO1xuICAgICAgICBvcHRpb25zLnBhcmVudC5jc3MoJ292ZXJmbG93JywgJ2hpZGRlbicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGlhbG9nUG9wSW4oXG4gICAgICAgIGVsZW1lbnQsXG4gICAgICAgIG9wdGlvbnMucGFyZW50LFxuICAgICAgICBvcHRpb25zLnBvcEluVGFyZ2V0ICYmIG9wdGlvbnMucG9wSW5UYXJnZXQubGVuZ3RoICYmIG9wdGlvbnMucG9wSW5UYXJnZXRcbiAgICAgIClcbiAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGFwcGx5QXJpYVRvU2libGluZ3MoZWxlbWVudCwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuZXNjYXBlVG9DbG9zZSkge1xuICAgICAgICAgIG9wdGlvbnMucm9vdEVsZW1lbnRLZXl1cENhbGxiYWNrID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gJG1kQ29uc3RhbnQuS0VZX0NPREUuRVNDQVBFKSB7XG4gICAgICAgICAgICAgICR0aW1lb3V0KCRtZERpYWxvZy5jYW5jZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgJHJvb3RFbGVtZW50Lm9uKCdrZXl1cCcsIG9wdGlvbnMucm9vdEVsZW1lbnRLZXl1cENhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmNsaWNrT3V0c2lkZVRvQ2xvc2UpIHtcbiAgICAgICAgICBvcHRpb25zLmRpYWxvZ0NsaWNrT3V0c2lkZUNhbGxiYWNrID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIC8vIE9ubHkgY2xvc2UgaWYgd2UgY2xpY2sgdGhlIGZsZXggY29udGFpbmVyIG91dHNpZGUgdGhlIGJhY2tkcm9wXG4gICAgICAgICAgICBpZiAoZXYudGFyZ2V0ID09PSBlbGVtZW50WzBdKSB7XG4gICAgICAgICAgICAgICR0aW1lb3V0KCRtZERpYWxvZy5jYW5jZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgZWxlbWVudC5vbignY2xpY2snLCBvcHRpb25zLmRpYWxvZ0NsaWNrT3V0c2lkZUNhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmZvY3VzT25PcGVuKSB7XG4gICAgICAgICAgZWxlbWVudFRvRm9jdXMuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cblxuICAgICAgZnVuY3Rpb24gZmluZENsb3NlQnV0dG9uKCkge1xuICAgICAgICAvL0lmIG5vIGVsZW1lbnQgd2l0aCBjbGFzcyBkaWFsb2ctY2xvc2UsIHRyeSB0byBmaW5kIHRoZSBsYXN0XG4gICAgICAgIC8vYnV0dG9uIGNoaWxkIGluIG1kLWFjdGlvbnMgYW5kIGFzc3VtZSBpdCBpcyBhIGNsb3NlIGJ1dHRvblxuICAgICAgICB2YXIgY2xvc2VCdXR0b24gPSBlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJy5kaWFsb2ctY2xvc2UnKTtcbiAgICAgICAgaWYgKCFjbG9zZUJ1dHRvbikge1xuICAgICAgICAgIHZhciBhY3Rpb25CdXR0b25zID0gZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yQWxsKCcubWQtYWN0aW9ucyBidXR0b24nKTtcbiAgICAgICAgICBjbG9zZUJ1dHRvbiA9IGFjdGlvbkJ1dHRvbnNbIGFjdGlvbkJ1dHRvbnMubGVuZ3RoIC0gMSBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbmd1bGFyLmVsZW1lbnQoY2xvc2VCdXR0b24pO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgLy8gT24gcmVtb3ZlIGZ1bmN0aW9uIGZvciBhbGwgZGlhbG9nc1xuICAgIGZ1bmN0aW9uIG9uUmVtb3ZlKHNjb3BlLCBlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICBhbmd1bGFyLmVsZW1lbnQoJGRvY3VtZW50WzBdLmJvZHkpLnJlbW92ZUNsYXNzKCdtZC1kaWFsb2ctaXMtc2hvd2luZycpO1xuXG4gICAgICBpZiAob3B0aW9ucy5iYWNrZHJvcCkge1xuICAgICAgICAkYW5pbWF0ZS5sZWF2ZShvcHRpb25zLmJhY2tkcm9wKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmRpc2FibGVQYXJlbnRTY3JvbGwpIHtcbiAgICAgICAgb3B0aW9ucy5wYXJlbnQuY3NzKCdvdmVyZmxvdycsIG9wdGlvbnMubGFzdE92ZXJmbG93KTtcbiAgICAgICAgZGVsZXRlIG9wdGlvbnMubGFzdE92ZXJmbG93O1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuZXNjYXBlVG9DbG9zZSkge1xuICAgICAgICAkcm9vdEVsZW1lbnQub2ZmKCdrZXl1cCcsIG9wdGlvbnMucm9vdEVsZW1lbnRLZXl1cENhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmNsaWNrT3V0c2lkZVRvQ2xvc2UpIHtcbiAgICAgICAgZWxlbWVudC5vZmYoJ2NsaWNrJywgb3B0aW9ucy5kaWFsb2dDbGlja091dHNpZGVDYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIGFwcGx5QXJpYVRvU2libGluZ3MoZWxlbWVudCwgZmFsc2UpO1xuXG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIHRyYXBGb2N1cywgdHJ1ZSk7XG5cbiAgICAgIHJldHVybiBkaWFsb2dQb3BPdXQoXG4gICAgICAgIGVsZW1lbnQsXG4gICAgICAgIG9wdGlvbnMucGFyZW50LFxuICAgICAgICBvcHRpb25zLnBvcEluVGFyZ2V0ICYmIG9wdGlvbnMucG9wSW5UYXJnZXQubGVuZ3RoICYmIG9wdGlvbnMucG9wSW5UYXJnZXRcbiAgICAgICkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgb3B0aW9ucy5wb3BJblRhcmdldCAmJiBvcHRpb25zLnBvcEluVGFyZ2V0LmZvY3VzKCk7XG4gICAgICB9KTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluamVjdCBBUklBLXNwZWNpZmljIGF0dHJpYnV0ZXMgYXBwcm9wcmlhdGUgZm9yIERpYWxvZ3NcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25maWd1cmVBcmlhKGVsZW1lbnQsIHJvbGUsIG9wdGlvbnMpIHtcblxuICAgICAgZWxlbWVudC5hdHRyKHtcbiAgICAgICAgJ3JvbGUnOiByb2xlLFxuICAgICAgICAndGFiSW5kZXgnOiAnLTEnXG4gICAgICB9KTtcblxuICAgICAgdmFyIGRpYWxvZ0NvbnRlbnQgPSBlbGVtZW50LmZpbmQoJ21kLWRpYWxvZy1jb250ZW50Jyk7XG4gICAgICBpZiAoZGlhbG9nQ29udGVudC5sZW5ndGggPT09IDApe1xuICAgICAgICBkaWFsb2dDb250ZW50ID0gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpYWxvZ0lkID0gZWxlbWVudC5hdHRyKCdpZCcpIHx8ICgnZGlhbG9nXycgKyAkbWRVdGlsLm5leHRVaWQoKSk7XG4gICAgICBkaWFsb2dDb250ZW50LmF0dHIoJ2lkJywgZGlhbG9nSWQpO1xuICAgICAgZWxlbWVudC5hdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JywgZGlhbG9nSWQpO1xuXG4gICAgICBpZiAob3B0aW9ucy5hcmlhTGFiZWwpIHtcbiAgICAgICAgJG1kQXJpYS5leHBlY3QoZWxlbWVudCwgJ2FyaWEtbGFiZWwnLCBvcHRpb25zLmFyaWFMYWJlbCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgJG1kQXJpYS5leHBlY3RBc3luYyhlbGVtZW50LCAnYXJpYS1sYWJlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB3b3JkcyA9IGRpYWxvZ0NvbnRlbnQudGV4dCgpLnNwbGl0KC9cXHMrLyk7XG4gICAgICAgICAgaWYgKHdvcmRzLmxlbmd0aCA+IDMpIHdvcmRzID0gd29yZHMuc2xpY2UoMCwzKS5jb25jYXQoJy4uLicpO1xuICAgICAgICAgIHJldHVybiB3b3Jkcy5qb2luKCcgJyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGZpbHRlciBvdXQgcmF3IERPTSBub2Rlc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTm9kZU9uZU9mKGVsZW0sIG5vZGVUeXBlQXJyYXkpIHtcbiAgICAgIGlmIChub2RlVHlwZUFycmF5LmluZGV4T2YoZWxlbS5ub2RlTmFtZSkgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBXYWxrIERPTSB0byBhcHBseSBvciByZW1vdmUgYXJpYS1oaWRkZW4gb24gc2libGluZyBub2Rlc1xuICAgICAqIGFuZCBwYXJlbnQgc2libGluZyBub2Rlc1xuICAgICAqXG4gICAgICogUHJldmVudHMgc2NyZWVuIHJlYWRlciBpbnRlcmFjdGlvbiBiZWhpbmQgbW9kYWwgd2luZG93XG4gICAgICogb24gc3dpcGUgaW50ZXJmYWNlc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFwcGx5QXJpYVRvU2libGluZ3MoZWxlbWVudCwgdmFsdWUpIHtcbiAgICAgIHZhciBhdHRyaWJ1dGUgPSAnYXJpYS1oaWRkZW4nO1xuXG4gICAgICAvLyBnZXQgcmF3IERPTSBub2RlXG4gICAgICBlbGVtZW50ID0gZWxlbWVudFswXTtcblxuICAgICAgZnVuY3Rpb24gd2Fsa0RPTShlbGVtZW50KSB7XG4gICAgICAgIHdoaWxlIChlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBpZiAoZWxlbWVudCA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBlbGVtZW50LnBhcmVudE5vZGUuY2hpbGRyZW47XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gc2tpcCBvdmVyIGNoaWxkIGlmIGl0IGlzIGFuIGFzY2VuZGFudCBvZiB0aGUgZGlhbG9nXG4gICAgICAgICAgICAvLyBvciBhIHNjcmlwdCBvciBzdHlsZSB0YWdcbiAgICAgICAgICAgIGlmIChlbGVtZW50ICE9PSBjaGlsZHJlbltpXSAmJiAhaXNOb2RlT25lT2YoY2hpbGRyZW5baV0sIFsnU0NSSVBUJywgJ1NUWUxFJ10pKSB7XG4gICAgICAgICAgICAgIGNoaWxkcmVuW2ldLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB3YWxrRE9NKGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3YWxrRE9NKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpYWxvZ1BvcEluKGNvbnRhaW5lciwgcGFyZW50RWxlbWVudCwgY2xpY2tFbGVtZW50KSB7XG4gICAgICB2YXIgZGlhbG9nRWwgPSBjb250YWluZXIuZmluZCgnbWQtZGlhbG9nJyk7XG5cbiAgICAgIHBhcmVudEVsZW1lbnQuYXBwZW5kKGNvbnRhaW5lcik7XG4gICAgICB0cmFuc2Zvcm1Ub0NsaWNrRWxlbWVudChkaWFsb2dFbCwgY2xpY2tFbGVtZW50KTtcblxuICAgICAgJCRyQUYoZnVuY3Rpb24oKSB7XG4gICAgICAgIGRpYWxvZ0VsLmFkZENsYXNzKCd0cmFuc2l0aW9uLWluJylcbiAgICAgICAgICAuY3NzKCRtZENvbnN0YW50LkNTUy5UUkFOU0ZPUk0sICcnKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gJG1kVXRpbC50cmFuc2l0aW9uRW5kUHJvbWlzZShkaWFsb2dFbCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlhbG9nUG9wT3V0KGNvbnRhaW5lciwgcGFyZW50RWxlbWVudCwgY2xpY2tFbGVtZW50KSB7XG4gICAgICB2YXIgZGlhbG9nRWwgPSBjb250YWluZXIuZmluZCgnbWQtZGlhbG9nJyk7XG5cbiAgICAgIGRpYWxvZ0VsLmFkZENsYXNzKCd0cmFuc2l0aW9uLW91dCcpLnJlbW92ZUNsYXNzKCd0cmFuc2l0aW9uLWluJyk7XG4gICAgICB0cmFuc2Zvcm1Ub0NsaWNrRWxlbWVudChkaWFsb2dFbCwgY2xpY2tFbGVtZW50KTtcblxuICAgICAgcmV0dXJuICRtZFV0aWwudHJhbnNpdGlvbkVuZFByb21pc2UoZGlhbG9nRWwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybVRvQ2xpY2tFbGVtZW50KGRpYWxvZ0VsLCBjbGlja0VsZW1lbnQpIHtcbiAgICAgIGlmIChjbGlja0VsZW1lbnQpIHtcbiAgICAgICAgdmFyIGNsaWNrUmVjdCA9IGNsaWNrRWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdmFyIGRpYWxvZ1JlY3QgPSBkaWFsb2dFbFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICB2YXIgc2NhbGVYID0gTWF0aC5taW4oMC41LCBjbGlja1JlY3Qud2lkdGggLyBkaWFsb2dSZWN0LndpZHRoKTtcbiAgICAgICAgdmFyIHNjYWxlWSA9IE1hdGgubWluKDAuNSwgY2xpY2tSZWN0LmhlaWdodCAvIGRpYWxvZ1JlY3QuaGVpZ2h0KTtcblxuICAgICAgICBkaWFsb2dFbC5jc3MoJG1kQ29uc3RhbnQuQ1NTLlRSQU5TRk9STSwgJ3RyYW5zbGF0ZTNkKCcgK1xuICAgICAgICAgICgtZGlhbG9nUmVjdC5sZWZ0ICsgY2xpY2tSZWN0LmxlZnQgKyBjbGlja1JlY3Qud2lkdGgvMiAtIGRpYWxvZ1JlY3Qud2lkdGgvMikgKyAncHgsJyArXG4gICAgICAgICAgKC1kaWFsb2dSZWN0LnRvcCArIGNsaWNrUmVjdC50b3AgKyBjbGlja1JlY3QuaGVpZ2h0LzIgLSBkaWFsb2dSZWN0LmhlaWdodC8yKSArICdweCwnICtcbiAgICAgICAgICAnMCkgc2NhbGUoJyArIHNjYWxlWCArICcsJyArIHNjYWxlWSArICcpJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpYWxvZ1RyYW5zaXRpb25FbmQoZGlhbG9nRWwpIHtcbiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICBkaWFsb2dFbC5vbigkbWRDb25zdGFudC5DU1MuVFJBTlNJVElPTkVORCwgZmluaXNoZWQpO1xuICAgICAgZnVuY3Rpb24gZmluaXNoZWQoZXYpIHtcbiAgICAgICAgLy9NYWtlIHN1cmUgdGhpcyB0cmFuc2l0aW9uZW5kIGRpZG4ndCBidWJibGUgdXAgZnJvbSBhIGNoaWxkXG4gICAgICAgIGlmIChldi50YXJnZXQgPT09IGRpYWxvZ0VsWzBdKSB7XG4gICAgICAgICAgZGlhbG9nRWwub2ZmKCRtZENvbnN0YW50LkNTUy5UUkFOU0lUSU9ORU5ELCBmaW5pc2hlZCk7XG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9XG5cbiAgfVxufVxuTWREaWFsb2dQcm92aWRlci4kaW5qZWN0ID0gW1wiJCRpbnRlcmltRWxlbWVudFByb3ZpZGVyXCJdO1xuXG59KSgpO1xuKGZ1bmN0aW9uKCl7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMuZmFiQWN0aW9ucycsIFsnbWF0ZXJpYWwuY29yZSddKVxuICAgIC5kaXJlY3RpdmUoJ21kRmFiQWN0aW9ucycsIE1kRmFiQWN0aW9uc0RpcmVjdGl2ZSk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgbWRGYWJBY3Rpb25zXG4gICAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5mYWJTcGVlZERpYWxcbiAgICpcbiAgICogQHJlc3RyaWN0IEVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoZSBgPG1kLWZhYi1hY3Rpb25zPmAgZGlyZWN0aXZlIGlzIHVzZWQgaW5zaWRlIG9mIGEgYDxtZC1mYWItc3BlZWQtZGlhbD5gIG9yXG4gICAqIGA8bWQtZmFiLXRvb2xiYXI+YCBkaXJlY3RpdmUgdG8gbWFyayB0aGUgYW4gZWxlbWVudCAob3IgZWxlbWVudHMpIGFzIHRoZSBhY3Rpb25zIGFuZCBzZXR1cCB0aGVcbiAgICogcHJvcGVyIGV2ZW50IGxpc3RlbmVycy5cbiAgICpcbiAgICogQHVzYWdlXG4gICAqIFNlZSB0aGUgYDxtZC1mYWItc3BlZWQtZGlhbD5gIG9yIGA8bWQtZmFiLXRvb2xiYXI+YCBkaXJlY3RpdmVzIGZvciBleGFtcGxlIHVzYWdlLlxuICAgKi9cbiAgZnVuY3Rpb24gTWRGYWJBY3Rpb25zRGlyZWN0aXZlKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0UnLFxuXG4gICAgICByZXF1aXJlOiBbJ14/bWRGYWJTcGVlZERpYWwnLCAnXj9tZEZhYlRvb2xiYXInXSxcblxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMsIGNvbnRyb2xsZXJzKSB7XG4gICAgICAgIC8vIEdyYWIgd2hpY2hldmVyIHBhcmVudCBjb250cm9sbGVyIGlzIHVzZWRcbiAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1swXSB8fCBjb250cm9sbGVyc1sxXTtcblxuICAgICAgICAvLyBNYWtlIHRoZSBjaGlsZHJlbiBvcGVuL2Nsb3NlIHRoZWlyIHBhcmVudCBkaXJlY3RpdmVcbiAgICAgICAgaWYgKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZWxlbWVudC5jaGlsZHJlbigpLCBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KGNoaWxkKS5vbignZm9jdXMnLCBjb250cm9sbGVyLm9wZW4pO1xuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KGNoaWxkKS5vbignYmx1cicsIGNvbnRyb2xsZXIuY2xvc2UpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWZ0ZXIgc2V0dGluZyB1cCB0aGUgbGlzdGVuZXJzLCB3cmFwIGV2ZXJ5IGNoaWxkIGluIGEgbmV3IGRpdiBhbmQgYWRkIGEgY2xhc3MgdGhhdCB3ZSBjYW5cbiAgICAgICAgLy8gc2NhbGUvZmxpbmcgaW5kZXBlbmRlbnRseVxuICAgICAgICBlbGVtZW50LmNoaWxkcmVuKCkud3JhcCgnPGRpdiBjbGFzcz1cIm1kLWZhYi1hY3Rpb24taXRlbVwiPicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59KSgpO1xufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy5kaXZpZGVyXG4gKiBAZGVzY3JpcHRpb24gRGl2aWRlciBtb2R1bGUhXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLmRpdmlkZXInLCBbXG4gICdtYXRlcmlhbC5jb3JlJ1xuXSlcbiAgLmRpcmVjdGl2ZSgnbWREaXZpZGVyJywgTWREaXZpZGVyRGlyZWN0aXZlKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBtZERpdmlkZXJcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5kaXZpZGVyXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGl2aWRlcnMgZ3JvdXAgYW5kIHNlcGFyYXRlIGNvbnRlbnQgd2l0aGluIGxpc3RzIGFuZCBwYWdlIGxheW91dHMgdXNpbmcgc3Ryb25nIHZpc3VhbCBhbmQgc3BhdGlhbCBkaXN0aW5jdGlvbnMuIFRoaXMgZGl2aWRlciBpcyBhIHRoaW4gcnVsZSwgbGlnaHR3ZWlnaHQgZW5vdWdoIHRvIG5vdCBkaXN0cmFjdCB0aGUgdXNlciBmcm9tIGNvbnRlbnQuXG4gKlxuICogQHBhcmFtIHtib29sZWFuPX0gbWQtaW5zZXQgQWRkIHRoaXMgYXR0cmlidXRlIHRvIGFjdGl2YXRlIHRoZSBpbnNldCBkaXZpZGVyIHN0eWxlLlxuICogQHVzYWdlXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogPG1kLWRpdmlkZXI+PC9tZC1kaXZpZGVyPlxuICpcbiAqIDxtZC1kaXZpZGVyIG1kLWluc2V0PjwvbWQtZGl2aWRlcj5cbiAqIDwvaGxqcz5cbiAqXG4gKi9cbmZ1bmN0aW9uIE1kRGl2aWRlckRpcmVjdGl2ZSgkbWRUaGVtaW5nKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICBsaW5rOiAkbWRUaGVtaW5nXG4gIH07XG59XG5NZERpdmlkZXJEaXJlY3RpdmUuJGluamVjdCA9IFtcIiRtZFRoZW1pbmdcIl07XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5mYWJTcGVlZERpYWwnLCBbXG4gICAgICAnbWF0ZXJpYWwuY29yZScsXG4gICAgICAnbWF0ZXJpYWwuY29tcG9uZW50cy5mYWJUcmlnZ2VyJyxcbiAgICAgICdtYXRlcmlhbC5jb21wb25lbnRzLmZhYkFjdGlvbnMnXG4gICAgXSlcbiAgICAuZGlyZWN0aXZlKCdtZEZhYlNwZWVkRGlhbCcsIE1kRmFiU3BlZWREaWFsRGlyZWN0aXZlKVxuICAgIC5hbmltYXRpb24oJy5tZC1mbGluZycsIE1kRmFiU3BlZWREaWFsRmxpbmdBbmltYXRpb24pXG4gICAgLmFuaW1hdGlvbignLm1kLXNjYWxlJywgTWRGYWJTcGVlZERpYWxTY2FsZUFuaW1hdGlvbik7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgbWRGYWJTcGVlZERpYWxcbiAgICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLmZhYlNwZWVkRGlhbFxuICAgKlxuICAgKiBAcmVzdHJpY3QgRVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhlIGA8bWQtZmFiLXNwZWVkLWRpYWw+YCBkaXJlY3RpdmUgaXMgdXNlZCB0byBwcmVzZW50IGEgc2VyaWVzIG9mIHBvcHVwIGVsZW1lbnRzICh1c3VhbGx5XG4gICAqIGA8bWQtYnV0dG9uPmBzKSBmb3IgcXVpY2sgYWNjZXNzIHRvIGNvbW1vbiBhY3Rpb25zLlxuICAgKlxuICAgKiBUaGVyZSBhcmUgY3VycmVudGx5IHR3byBhbmltYXRpb25zIGF2YWlsYWJsZSBieSBhcHBseWluZyBvbmUgb2YgdGhlIGZvbGxvd2luZyBjbGFzc2VzIHRvXG4gICAqIHRoZSBjb21wb25lbnQ6XG4gICAqXG4gICAqICAtIGBtZC1mbGluZ2AgLSBUaGUgc3BlZWQgZGlhbCBpdGVtcyBhcHBlYXIgZnJvbSB1bmRlcm5lYXRoIHRoZSB0cmlnZ2VyIGFuZCBtb3ZlIGludG8gdGhlaXJcbiAgICogICAgYXBwcm9wcmlhdGUgcG9zaXRpb25zLlxuICAgKiAgLSBgbWQtc2NhbGVgIC0gVGhlIHNwZWVkIGRpYWwgaXRlbXMgYXBwZWFyIGluIHRoZWlyIHByb3BlciBwbGFjZXMgYnkgc2NhbGluZyBmcm9tIDAlIHRvIDEwMCUuXG4gICAqXG4gICAqIEB1c2FnZVxuICAgKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICAgKiA8bWQtZmFiLXNwZWVkLWRpYWwgZGlyZWN0aW9uPVwidXBcIiBjbGFzcz1cIm1kLWZsaW5nXCI+XG4gICAqICAgPG1kLWZhYi10cmlnZ2VyPlxuICAgKiAgICAgPG1kLWJ1dHRvbiBhcmlhLWxhYmVsPVwiQWRkLi4uXCI+PG1kLWljb24gaWNvbj1cIi9pbWcvaWNvbnMvcGx1cy5zdmdcIj48L21kLWljb24+PC9tZC1idXR0b24+XG4gICAqICAgPC9tZC1mYWItdHJpZ2dlcj5cbiAgICpcbiAgICogICA8bWQtZmFiLWFjdGlvbnM+XG4gICAqICAgICA8bWQtYnV0dG9uIGFyaWEtbGFiZWw9XCJBZGQgVXNlclwiPlxuICAgKiAgICAgICA8bWQtaWNvbiBpY29uPVwiL2ltZy9pY29ucy91c2VyLnN2Z1wiPjwvbWQtaWNvbj5cbiAgICogICAgIDwvbWQtYnV0dG9uPlxuICAgKlxuICAgKiAgICAgPG1kLWJ1dHRvbiBhcmlhLWxhYmVsPVwiQWRkIEdyb3VwXCI+XG4gICAqICAgICAgIDxtZC1pY29uIGljb249XCIvaW1nL2ljb25zL2dyb3VwLnN2Z1wiPjwvbWQtaWNvbj5cbiAgICogICAgIDwvbWQtYnV0dG9uPlxuICAgKiAgIDwvbWQtZmFiLWFjdGlvbnM+XG4gICAqIDwvbWQtZmFiLXNwZWVkLWRpYWw+XG4gICAqIDwvaGxqcz5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtZC1kaXJlY3Rpb24gRnJvbSB3aGljaCBkaXJlY3Rpb24geW91IHdvdWxkIGxpa2UgdGhlIHNwZWVkIGRpYWwgdG8gYXBwZWFyXG4gICAqIHJlbGF0aXZlIHRvIHRoZSB0cmlnZ2VyIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG1kLW9wZW4gUHJvZ3JhbW1hdGljYWxseSBjb250cm9sIHdoZXRoZXIgb3Igbm90IHRoZSBzcGVlZC1kaWFsIGlzIHZpc2libGUuXG4gICAqL1xuICBmdW5jdGlvbiBNZEZhYlNwZWVkRGlhbERpcmVjdGl2ZSgpIHtcbiAgICBGYWJTcGVlZERpYWxDb250cm9sbGVyLiRpbmplY3QgPSBbXCIkc2NvcGVcIiwgXCIkZWxlbWVudFwiLCBcIiRhbmltYXRlXCJdO1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0UnLFxuXG4gICAgICBzY29wZToge1xuICAgICAgICBkaXJlY3Rpb246ICdAP21kRGlyZWN0aW9uJyxcbiAgICAgICAgaXNPcGVuOiAnPT9tZE9wZW4nXG4gICAgICB9LFxuXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgY29udHJvbGxlcjogRmFiU3BlZWREaWFsQ29udHJvbGxlcixcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcblxuICAgICAgbGluazogRmFiU3BlZWREaWFsTGlua1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBGYWJTcGVlZERpYWxMaW5rKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICAvLyBQcmVwZW5kIGFuIGVsZW1lbnQgdG8gaG9sZCBvdXIgQ1NTIHZhcmlhYmxlcyBzbyB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIGFuaW1hdGlvbnMgYmVsb3dcbiAgICAgIGVsZW1lbnQucHJlcGVuZCgnPGRpdiBjbGFzcz1cIm1kLWNzcy12YXJpYWJsZXNcIj48L2Rpdj4nKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBGYWJTcGVlZERpYWxDb250cm9sbGVyKCRzY29wZSwgJGVsZW1lbnQsICRhbmltYXRlKSB7XG4gICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAvLyBEZWZpbmUgb3VyIG9wZW4vY2xvc2UgZnVuY3Rpb25zXG4gICAgICAvLyBOb3RlOiBVc2VkIGJ5IGZhYlRyaWdnZXIgYW5kIGZhYkFjdGlvbnMgZGlyZWN0aXZlc1xuICAgICAgdm0ub3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2NvcGUuJGFwcGx5KCd2bS5pc09wZW4gPSB0cnVlJyk7XG4gICAgICB9O1xuXG4gICAgICB2bS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2NvcGUuJGFwcGx5KCd2bS5pc09wZW4gPSBmYWxzZScpO1xuICAgICAgfTtcblxuICAgICAgc2V0dXBEZWZhdWx0cygpO1xuICAgICAgc2V0dXBMaXN0ZW5lcnMoKTtcbiAgICAgIHNldHVwV2F0Y2hlcnMoKTtcblxuICAgICAgLy8gU2V0IG91ciBkZWZhdWx0IHZhcmlhYmxlc1xuICAgICAgZnVuY3Rpb24gc2V0dXBEZWZhdWx0cygpIHtcbiAgICAgICAgLy8gU2V0IHRoZSBkZWZhdWx0IGRpcmVjdGlvbiB0byAnZG93bicgaWYgbm9uZSBpcyBzcGVjaWZpZWRcbiAgICAgICAgdm0uZGlyZWN0aW9uID0gdm0uZGlyZWN0aW9uIHx8ICdkb3duJztcblxuICAgICAgICAvLyBTZXQgdGhlIGRlZmF1bHQgdG8gYmUgY2xvc2VkXG4gICAgICAgIHZtLmlzT3BlbiA9IHZtLmlzT3BlbiB8fCBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gU2V0dXAgb3VyIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgZnVuY3Rpb24gc2V0dXBMaXN0ZW5lcnMoKSB7XG4gICAgICAgICRlbGVtZW50Lm9uKCdtb3VzZWVudGVyJywgdm0ub3Blbik7XG4gICAgICAgICRlbGVtZW50Lm9uKCdtb3VzZWxlYXZlJywgdm0uY2xvc2UpO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXR1cCBvdXIgd2F0Y2hlcnNcbiAgICAgIGZ1bmN0aW9uIHNldHVwV2F0Y2hlcnMoKSB7XG4gICAgICAgIC8vIFdhdGNoIGZvciBjaGFuZ2VzIHRvIHRoZSBkaXJlY3Rpb24gYW5kIHVwZGF0ZSBjbGFzc2VzL2F0dHJpYnV0ZXNcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgndm0uZGlyZWN0aW9uJywgZnVuY3Rpb24obmV3RGlyLCBvbGREaXIpIHtcbiAgICAgICAgICAvLyBBZGQgdGhlIGFwcHJvcHJpYXRlIGNsYXNzZXMgc28gd2UgY2FuIHRhcmdldCB0aGUgZGlyZWN0aW9uIGluIHRoZSBDU1NcbiAgICAgICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcygkZWxlbWVudCwgJ21kLScgKyBvbGREaXIpO1xuICAgICAgICAgICRhbmltYXRlLmFkZENsYXNzKCRlbGVtZW50LCAnbWQtJyArIG5ld0Rpcik7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgLy8gV2F0Y2ggZm9yIGNoYW5nZXMgdG8gbWQtb3BlblxuICAgICAgICAkc2NvcGUuJHdhdGNoKCd2bS5pc09wZW4nLCBmdW5jdGlvbihpc09wZW4pIHtcbiAgICAgICAgICB2YXIgdG9BZGQgPSBpc09wZW4gPyAnbWQtaXMtb3BlbicgOiAnJztcbiAgICAgICAgICB2YXIgdG9SZW1vdmUgPSBpc09wZW4gPyAnJyA6ICdtZC1pcy1vcGVuJztcblxuICAgICAgICAgICRhbmltYXRlLnNldENsYXNzKCRlbGVtZW50LCB0b0FkZCwgdG9SZW1vdmUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBNZEZhYlNwZWVkRGlhbEZsaW5nQW5pbWF0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHJ1bkFuaW1hdGlvbihlbGVtZW50KSB7XG4gICAgICB2YXIgZWwgPSBlbGVtZW50WzBdO1xuICAgICAgdmFyIGN0cmwgPSBlbGVtZW50LmNvbnRyb2xsZXIoJ21kRmFiU3BlZWREaWFsJyk7XG4gICAgICB2YXIgaXRlbXMgPSBlbC5xdWVyeVNlbGVjdG9yQWxsKCcubWQtZmFiLWFjdGlvbi1pdGVtJyk7XG5cbiAgICAgIC8vIEdyYWIgb3VyIGVsZW1lbnQgd2hpY2ggc3RvcmVzIENTUyB2YXJpYWJsZXNcbiAgICAgIHZhciB2YXJpYWJsZXNFbGVtZW50ID0gZWwucXVlcnlTZWxlY3RvcignLm1kLWNzcy12YXJpYWJsZXMnKTtcblxuICAgICAgLy8gU2V0dXAgSlMgdmFyaWFibGVzIGJhc2VkIG9uIG91ciBDU1MgdmFyaWFibGVzXG4gICAgICB2YXIgc3RhcnRaSW5kZXggPSB2YXJpYWJsZXNFbGVtZW50LnN0eWxlLnpJbmRleDtcblxuICAgICAgLy8gQWx3YXlzIHJlc2V0IHRoZSBpdGVtcyB0byB0aGVpciBuYXR1cmFsIHBvc2l0aW9uL3N0YXRlXG4gICAgICBhbmd1bGFyLmZvckVhY2goaXRlbXMsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHZhciBzdHlsZXMgPSBpdGVtLnN0eWxlO1xuXG4gICAgICAgIHN0eWxlcy50cmFuc2Zvcm0gPSAnJztcbiAgICAgICAgc3R5bGVzLnRyYW5zaXRpb25EZWxheSA9ICcnO1xuICAgICAgICBzdHlsZXMub3BhY2l0eSA9IDE7XG5cbiAgICAgICAgLy8gTWFrZSB0aGUgaXRlbXMgY2xvc2VzdCB0byB0aGUgdHJpZ2dlciBoYXZlIHRoZSBoaWdoZXN0IHotaW5kZXhcbiAgICAgICAgaXRlbS5zdHlsZS56SW5kZXggPSAoaXRlbXMubGVuZ3RoIC0gaW5kZXgpICsgc3RhcnRaSW5kZXg7XG4gICAgICB9KTtcblxuICAgICAgLy8gSWYgdGhlIGNvbnRyb2wgaXMgY2xvc2VkLCBoaWRlIHRoZSBpdGVtcyBiZWhpbmQgdGhlIHRyaWdnZXJcbiAgICAgIGlmICghY3RybC5pc09wZW4pIHtcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICAgIHZhciBuZXdQb3NpdGlvbiwgYXhpcztcblxuICAgICAgICAgIHN3aXRjaCAoY3RybC5kaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgJ3VwJzpcbiAgICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBpdGVtLnNjcm9sbEhlaWdodCAqIChpbmRleCArIDEpO1xuICAgICAgICAgICAgICBheGlzID0gJ1knO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Rvd24nOlxuICAgICAgICAgICAgICBuZXdQb3NpdGlvbiA9IC1pdGVtLnNjcm9sbEhlaWdodCAqIChpbmRleCArIDEpO1xuICAgICAgICAgICAgICBheGlzID0gJ1knO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICBuZXdQb3NpdGlvbiA9IGl0ZW0uc2Nyb2xsV2lkdGggKiAoaW5kZXggKyAxKTtcbiAgICAgICAgICAgICAgYXhpcyA9ICdYJztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gLWl0ZW0uc2Nyb2xsV2lkdGggKiAoaW5kZXggKyAxKTtcbiAgICAgICAgICAgICAgYXhpcyA9ICdYJztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXRlbS5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlJyArIGF4aXMgKyAnKCcgKyBuZXdQb3NpdGlvbiArICdweCknO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgZG9uZSkge1xuICAgICAgICBpZiAoZWxlbWVudC5oYXNDbGFzcygnbWQtZmxpbmcnKSkge1xuICAgICAgICAgIHJ1bkFuaW1hdGlvbihlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGRvbmUpIHtcbiAgICAgICAgcnVuQW5pbWF0aW9uKGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIE1kRmFiU3BlZWREaWFsU2NhbGVBbmltYXRpb24oKSB7XG4gICAgdmFyIGRlbGF5ID0gNjU7XG5cbiAgICBmdW5jdGlvbiBydW5BbmltYXRpb24oZWxlbWVudCkge1xuICAgICAgdmFyIGVsID0gZWxlbWVudFswXTtcbiAgICAgIHZhciBjdHJsID0gZWxlbWVudC5jb250cm9sbGVyKCdtZEZhYlNwZWVkRGlhbCcpO1xuICAgICAgdmFyIGl0ZW1zID0gZWwucXVlcnlTZWxlY3RvckFsbCgnLm1kLWZhYi1hY3Rpb24taXRlbScpO1xuXG4gICAgICAvLyBBbHdheXMgcmVzZXQgdGhlIGl0ZW1zIHRvIHRoZWlyIG5hdHVyYWwgcG9zaXRpb24vc3RhdGVcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChpdGVtcywgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIHN0eWxlcyA9IGl0ZW0uc3R5bGUsXG4gICAgICAgICAgb2Zmc2V0RGVsYXkgPSBpbmRleCAqIGRlbGF5O1xuXG4gICAgICAgIHN0eWxlcy5vcGFjaXR5ID0gY3RybC5pc09wZW4gPyAxIDogMDtcbiAgICAgICAgc3R5bGVzLnRyYW5zZm9ybSA9IGN0cmwuaXNPcGVuID8gJ3NjYWxlKDEpJyA6ICdzY2FsZSgwKSc7XG4gICAgICAgIHN0eWxlcy50cmFuc2l0aW9uRGVsYXkgPSAoY3RybC5pc09wZW4gPyAgb2Zmc2V0RGVsYXkgOiAoaXRlbXMubGVuZ3RoIC0gb2Zmc2V0RGVsYXkpKSArICdtcyc7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgZG9uZSkge1xuICAgICAgICBydW5BbmltYXRpb24oZWxlbWVudCk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBkb25lKSB7XG4gICAgICAgIHJ1bkFuaW1hdGlvbihlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pKCk7XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5mYWJUb29sYmFyJywgW1xuICAgICAgJ21hdGVyaWFsLmNvcmUnLFxuICAgICAgJ21hdGVyaWFsLmNvbXBvbmVudHMuZmFiVHJpZ2dlcicsXG4gICAgICAnbWF0ZXJpYWwuY29tcG9uZW50cy5mYWJBY3Rpb25zJ1xuICAgIF0pXG4gICAgLmRpcmVjdGl2ZSgnbWRGYWJUb29sYmFyJywgTWRGYWJUb29sYmFyRGlyZWN0aXZlKVxuICAgIC5hbmltYXRpb24oJy5tZC1mYWItdG9vbGJhcicsIE1kRmFiVG9vbGJhckFuaW1hdGlvbik7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgbWRGYWJUb29sYmFyXG4gICAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5mYWJUb29sYmFyXG4gICAqXG4gICAqIEByZXN0cmljdCBFXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBUaGUgYDxtZC1mYWItdG9vbGJhcj5gIGRpcmVjdGl2ZSBpcyB1c2VkIHByZXNlbnQgYSB0b29sYmFyIG9mIGVsZW1lbnRzICh1c3VhbGx5IGA8bWQtYnV0dG9uPmBzKVxuICAgKiBmb3IgcXVpY2sgYWNjZXNzIHRvIGNvbW1vbiBhY3Rpb25zIHdoZW4gYSBmbG9hdGluZyBhY3Rpb24gYnV0dG9uIGlzIGFjdGl2YXRlZCAodmlhIGhvdmVyIG9yXG4gICAqIGtleWJvYXJkIG5hdmlnYXRpb24pLlxuICAgKlxuICAgKiBAdXNhZ2VcbiAgICpcbiAgICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAgICogPG1kLWZhYi10b29sYmFyPlxuICAgKiAgIDxtZC1mYWItdHJpZ2dlcj5cbiAgICogICAgIDxtZC1idXR0b24gYXJpYS1sYWJlbD1cIkFkZC4uLlwiPjxtZC1pY29uIGljb249XCIvaW1nL2ljb25zL3BsdXMuc3ZnXCI+PC9tZC1pY29uPjwvbWQtYnV0dG9uPlxuICAgKiAgIDwvbWQtZmFiLXRyaWdnZXI+XG4gICAqXG4gICAqICAgPG1kLWZhYi1hY3Rpb25zPlxuICAgKiAgICAgPG1kLWJ1dHRvbiBhcmlhLWxhYmVsPVwiQWRkIFVzZXJcIj5cbiAgICogICAgICAgPG1kLWljb24gaWNvbj1cIi9pbWcvaWNvbnMvdXNlci5zdmdcIj48L21kLWljb24+XG4gICAqICAgICA8L21kLWJ1dHRvbj5cbiAgICpcbiAgICogICAgIDxtZC1idXR0b24gYXJpYS1sYWJlbD1cIkFkZCBHcm91cFwiPlxuICAgKiAgICAgICA8bWQtaWNvbiBpY29uPVwiL2ltZy9pY29ucy9ncm91cC5zdmdcIj48L21kLWljb24+XG4gICAqICAgICA8L21kLWJ1dHRvbj5cbiAgICogICA8L21kLWZhYi1hY3Rpb25zPlxuICAgKiA8L21kLWZhYi10b29sYmFyPlxuICAgKiA8L2hsanM+XG4gICAqXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG1kLW9wZW4gUHJvZ3JhbW1hdGljYWxseSBjb250cm9sIHdoZXRoZXIgb3Igbm90IHRoZSB0b29sYmFyIGlzIHZpc2libGUuXG4gICAqL1xuICBmdW5jdGlvbiBNZEZhYlRvb2xiYXJEaXJlY3RpdmUoKSB7XG4gICAgRmFiVG9vbGJhckNvbnRyb2xsZXIuJGluamVjdCA9IFtcIiRzY29wZVwiLCBcIiRlbGVtZW50XCIsIFwiJGFuaW1hdGVcIl07XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgdGVtcGxhdGU6XG4gICAgICAgICc8ZGl2IGNsYXNzPVwibWQtZmFiLXRvb2xiYXItd3JhcHBlclwiPicgK1xuICAgICAgICAnICA8ZGl2IGNsYXNzPVwibWQtZmFiLXRvb2xiYXItY29udGVudFwiIG5nLXRyYW5zY2x1ZGU+PC9kaXY+JyArXG4gICAgICAgICc8L2Rpdj4nLFxuXG4gICAgICBzY29wZToge1xuICAgICAgICBpc09wZW46ICc9P21kT3BlbidcbiAgICAgIH0sXG5cbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb250cm9sbGVyOiBGYWJUb29sYmFyQ29udHJvbGxlcixcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcblxuICAgICAgbGluazogbGlua1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBGYWJUb29sYmFyQ29udHJvbGxlcigkc2NvcGUsICRlbGVtZW50LCAkYW5pbWF0ZSkge1xuICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgLy8gU2V0IHRoZSBkZWZhdWx0IHRvIGJlIGNsb3NlZFxuICAgICAgdm0uaXNPcGVuID0gdm0uaXNPcGVuIHx8IGZhbHNlO1xuXG4gICAgICB2bS5vcGVuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZtLmlzT3BlbiA9IHRydWU7XG4gICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgIH07XG5cbiAgICAgIHZtLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZtLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICB9O1xuXG4gICAgICAvLyBBZGQgb3VyIGNsYXNzIHNvIHdlIGNhbiB0cmlnZ2VyIHRoZSBhbmltYXRpb24gb24gc3RhcnRcbiAgICAgICRlbGVtZW50LmFkZENsYXNzKCdtZC1mYWItdG9vbGJhcicpO1xuXG4gICAgICAvLyBTZXR1cCBzb21lIG1vdXNlIGV2ZW50cyBzbyB0aGUgaG92ZXIgZWZmZWN0IGNhbiBiZSB0cmlnZ2VyZWRcbiAgICAgIC8vIGFueXdoZXJlIG92ZXIgdGhlIHRvb2xiYXJcbiAgICAgICRlbGVtZW50Lm9uKCdtb3VzZWVudGVyJywgdm0ub3Blbik7XG4gICAgICAkZWxlbWVudC5vbignbW91c2VsZWF2ZScsIHZtLmNsb3NlKTtcblxuICAgICAgLy8gV2F0Y2ggZm9yIGNoYW5nZXMgdG8gbWQtb3BlbiBhbmQgdG9nZ2xlIG91ciBjbGFzc1xuICAgICAgJHNjb3BlLiR3YXRjaCgndm0uaXNPcGVuJywgZnVuY3Rpb24oaXNPcGVuKSB7XG4gICAgICAgIHZhciB0b0FkZCA9IGlzT3BlbiA/ICdtZC1pcy1vcGVuJyA6ICcnO1xuICAgICAgICB2YXIgdG9SZW1vdmUgPSBpc09wZW4gPyAnJyA6ICdtZC1pcy1vcGVuJztcblxuICAgICAgICAkYW5pbWF0ZS5zZXRDbGFzcygkZWxlbWVudCwgdG9BZGQsIHRvUmVtb3ZlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgICAgIC8vIERvbid0IGFsbG93IGZvY3VzIG9uIHRoZSB0cmlnZ2VyXG4gICAgICBlbGVtZW50LmZpbmQoJ21kLWZhYi10cmlnZ2VyJykuZmluZCgnYnV0dG9uJykuYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcblxuICAgICAgLy8gUHJlcGVuZCB0aGUgYmFja2dyb3VuZCBlbGVtZW50IHRvIHRoZSB0cmlnZ2VyJ3MgYnV0dG9uXG4gICAgICBlbGVtZW50LmZpbmQoJ21kLWZhYi10cmlnZ2VyJykuZmluZCgnYnV0dG9uJylcbiAgICAgICAgLnByZXBlbmQoJzxkaXYgY2xhc3M9XCJtZC1mYWItdG9vbGJhci1iYWNrZ3JvdW5kXCI+PC9kaXY+Jyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gTWRGYWJUb29sYmFyQW5pbWF0aW9uKCkge1xuICAgIHZhciBvcmlnaW5hbEljb25EZWxheTtcblxuICAgIGZ1bmN0aW9uIHJ1bkFuaW1hdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGRvbmUpIHtcbiAgICAgIHZhciBlbCA9IGVsZW1lbnRbMF07XG4gICAgICB2YXIgY3RybCA9IGVsZW1lbnQuY29udHJvbGxlcignbWRGYWJUb29sYmFyJyk7XG5cbiAgICAgIC8vIEdyYWIgdGhlIHJlbGV2YW50IGNoaWxkIGVsZW1lbnRzXG4gICAgICB2YXIgYmFja2dyb3VuZEVsZW1lbnQgPSBlbC5xdWVyeVNlbGVjdG9yKCcubWQtZmFiLXRvb2xiYXItYmFja2dyb3VuZCcpO1xuICAgICAgdmFyIHRyaWdnZXJFbGVtZW50ID0gZWwucXVlcnlTZWxlY3RvcignbWQtZmFiLXRyaWdnZXIgYnV0dG9uJyk7XG4gICAgICB2YXIgaWNvbkVsZW1lbnQgPSBlbC5xdWVyeVNlbGVjdG9yKCdtZC1mYWItdHJpZ2dlciBidXR0b24gbWQtaWNvbicpO1xuICAgICAgdmFyIGFjdGlvbnMgPSBlbGVtZW50LmZpbmQoJ21kLWZhYi1hY3Rpb25zJykuY2hpbGRyZW4oKTtcblxuICAgICAgLy8gSWYgd2UgaGF2ZSBib3RoIGVsZW1lbnRzLCB1c2UgdGhlbSB0byBwb3NpdGlvbiB0aGUgbmV3IGJhY2tncm91bmRcbiAgICAgIGlmICh0cmlnZ2VyRWxlbWVudCAmJiBiYWNrZ3JvdW5kRWxlbWVudCkge1xuICAgICAgICAvLyBHZXQgb3VyIHZhcmlhYmxlc1xuICAgICAgICB2YXIgY29sb3IgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0cmlnZ2VyRWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZSgnYmFja2dyb3VuZC1jb2xvcicpO1xuICAgICAgICB2YXIgd2lkdGggPSBlbC5vZmZzZXRXaWR0aDtcbiAgICAgICAgdmFyIGhlaWdodCA9IGVsLm9mZnNldEhlaWdodDtcblxuICAgICAgICAvLyBNYWtlIGEgc3F1YXJlXG4gICAgICAgIHZhciBzY2FsZSA9IHdpZHRoICogMjtcblxuICAgICAgICAvLyBTZXQgc29tZSBiYXNpYyBzdHlsZXMgbm8gbWF0dGVyIHdoYXQgYW5pbWF0aW9uIHdlJ3JlIGRvaW5nXG4gICAgICAgIGJhY2tncm91bmRFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xuICAgICAgICBiYWNrZ3JvdW5kRWxlbWVudC5zdHlsZS5ib3JkZXJSYWRpdXMgPSB3aWR0aCArICdweCc7XG5cbiAgICAgICAgLy8gSWYgd2UncmUgb3BlblxuICAgICAgICBpZiAoY3RybC5pc09wZW4pIHtcblxuICAgICAgICAgIC8vIFNldCB0aGUgd2lkdGgvaGVpZ2h0IHRvIHRha2UgdXAgdGhlIGZ1bGwgdG9vbGJhciB3aWR0aFxuICAgICAgICAgIGJhY2tncm91bmRFbGVtZW50LnN0eWxlLndpZHRoID0gc2NhbGUgKyAncHgnO1xuICAgICAgICAgIGJhY2tncm91bmRFbGVtZW50LnN0eWxlLmhlaWdodCA9IHNjYWxlICsgJ3B4JztcblxuICAgICAgICAgIC8vIFNldCB0aGUgdG9wL2xlZnQgdG8gbW92ZSB1cC9sZWZ0IChvciByaWdodCkgYnkgdGhlIHNjYWxlIHdpZHRoL2hlaWdodFxuICAgICAgICAgIGJhY2tncm91bmRFbGVtZW50LnN0eWxlLnRvcCA9IC0oc2NhbGUgLyAyKSArICdweCc7XG5cbiAgICAgICAgICBpZiAoZWxlbWVudC5oYXNDbGFzcygnbWQtbGVmdCcpKSB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kRWxlbWVudC5zdHlsZS5sZWZ0ID0gLShzY2FsZSAvIDIpICsgJ3B4JztcbiAgICAgICAgICAgIGJhY2tncm91bmRFbGVtZW50LnN0eWxlLnJpZ2h0ID0gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZWxlbWVudC5oYXNDbGFzcygnbWQtcmlnaHQnKSkge1xuICAgICAgICAgICAgYmFja2dyb3VuZEVsZW1lbnQuc3R5bGUucmlnaHQgPSAtKHNjYWxlIC8gMikgKyAncHgnO1xuICAgICAgICAgICAgYmFja2dyb3VuZEVsZW1lbnQuc3R5bGUubGVmdCA9IG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU2V0IHRoZSBuZXh0IGNsb3NlIGFuaW1hdGlvbiB0byBoYXZlIHRoZSBwcm9wZXIgZGVsYXlzXG4gICAgICAgICAgYmFja2dyb3VuZEVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbkRlbGF5ID0gJzBtcyc7XG4gICAgICAgICAgaWNvbkVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbkRlbGF5ID0gJy4zcyc7XG5cbiAgICAgICAgICAvLyBBcHBseSBhIHRyYW5zaXRpb24gZGVsYXkgdG8gYWN0aW9uc1xuICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChhY3Rpb25zLCBmdW5jdGlvbihhY3Rpb24sIGluZGV4KSB7XG4gICAgICAgICAgICBhY3Rpb24uc3R5bGUudHJhbnNpdGlvbkRlbGF5ID0gKGFjdGlvbnMubGVuZ3RoIC0gaW5kZXgpICogMjUgKyAnbXMnO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSwgc2V0IHRoZSB3aWR0aC9oZWlnaHQgdG8gdGhlIHRyaWdnZXIncyB3aWR0aC9oZWlnaHRcbiAgICAgICAgICBiYWNrZ3JvdW5kRWxlbWVudC5zdHlsZS53aWR0aCA9IHRyaWdnZXJFbGVtZW50Lm9mZnNldFdpZHRoICsgJ3B4JztcbiAgICAgICAgICBiYWNrZ3JvdW5kRWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0cmlnZ2VyRWxlbWVudC5vZmZzZXRIZWlnaHQgKyAncHgnO1xuXG4gICAgICAgICAgLy8gUmVzZXQgdGhlIHBvc2l0aW9uXG4gICAgICAgICAgYmFja2dyb3VuZEVsZW1lbnQuc3R5bGUudG9wID0gJzBweCc7XG5cbiAgICAgICAgICBpZiAoZWxlbWVudC5oYXNDbGFzcygnbWQtbGVmdCcpKSB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kRWxlbWVudC5zdHlsZS5sZWZ0ID0gJzBweCc7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kRWxlbWVudC5zdHlsZS5yaWdodCA9IG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGVsZW1lbnQuaGFzQ2xhc3MoJ21kLXJpZ2h0JykpIHtcbiAgICAgICAgICAgIGJhY2tncm91bmRFbGVtZW50LnN0eWxlLnJpZ2h0ID0gJzBweCc7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kRWxlbWVudC5zdHlsZS5sZWZ0ID0gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBTZXQgdGhlIG5leHQgb3BlbiBhbmltYXRpb24gdG8gaGF2ZSB0aGUgcHJvcGVyIGRlbGF5c1xuICAgICAgICAgIGJhY2tncm91bmRFbGVtZW50LnN0eWxlLnRyYW5zaXRpb25EZWxheSA9ICcyMDBtcyc7XG4gICAgICAgICAgaWNvbkVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbkRlbGF5ID0gJzBtcyc7XG5cbiAgICAgICAgICAvLyBBcHBseSBhIHRyYW5zaXRpb24gZGVsYXkgdG8gYWN0aW9uc1xuICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChhY3Rpb25zLCBmdW5jdGlvbihhY3Rpb24sIGluZGV4KSB7XG4gICAgICAgICAgICBhY3Rpb24uc3R5bGUudHJhbnNpdGlvbkRlbGF5ID0gKGluZGV4ICogMjUpICsgJ21zJztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhZGRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBkb25lKSB7XG4gICAgICAgIHJ1bkFuaW1hdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGRvbmUpO1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgZG9uZSkge1xuICAgICAgICBydW5BbmltYXRpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBkb25lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pKCk7XG59KSgpO1xuKGZ1bmN0aW9uKCl7XG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBtYXRlcmlhbC5jb21wb25lbnRzLmdyaWRMaXN0XG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLmdyaWRMaXN0JywgWydtYXRlcmlhbC5jb3JlJ10pXG4gICAgICAgLmRpcmVjdGl2ZSgnbWRHcmlkTGlzdCcsIEdyaWRMaXN0RGlyZWN0aXZlKVxuICAgICAgIC5kaXJlY3RpdmUoJ21kR3JpZFRpbGUnLCBHcmlkVGlsZURpcmVjdGl2ZSlcbiAgICAgICAuZGlyZWN0aXZlKCdtZEdyaWRUaWxlRm9vdGVyJywgR3JpZFRpbGVDYXB0aW9uRGlyZWN0aXZlKVxuICAgICAgIC5kaXJlY3RpdmUoJ21kR3JpZFRpbGVIZWFkZXInLCBHcmlkVGlsZUNhcHRpb25EaXJlY3RpdmUpXG4gICAgICAgLmZhY3RvcnkoJyRtZEdyaWRMYXlvdXQnLCBHcmlkTGF5b3V0RmFjdG9yeSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbWRHcmlkTGlzdFxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLmdyaWRMaXN0XG4gKiBAcmVzdHJpY3QgRVxuICogQGRlc2NyaXB0aW9uXG4gKiBHcmlkIGxpc3RzIGFyZSBhbiBhbHRlcm5hdGl2ZSB0byBzdGFuZGFyZCBsaXN0IHZpZXdzLiBHcmlkIGxpc3RzIGFyZSBkaXN0aW5jdFxuICogZnJvbSBncmlkcyB1c2VkIGZvciBsYXlvdXRzIGFuZCBvdGhlciB2aXN1YWwgcHJlc2VudGF0aW9ucy5cbiAqXG4gKiBBIGdyaWQgbGlzdCBpcyBiZXN0IHN1aXRlZCB0byBwcmVzZW50aW5nIGEgaG9tb2dlbm91cyBkYXRhIHR5cGUsIHR5cGljYWxseVxuICogaW1hZ2VzLCBhbmQgaXMgb3B0aW1pemVkIGZvciB2aXN1YWwgY29tcHJlaGVuc2lvbiBhbmQgZGlmZmVyZW50aWF0aW5nIGJldHdlZW5cbiAqIGxpa2UgZGF0YSB0eXBlcy5cbiAqXG4gKiBBIGdyaWQgbGlzdCBpcyBhIGNvbnRpbnVvdXMgZWxlbWVudCBjb25zaXN0aW5nIG9mIHRlc3NlbGxhdGVkLCByZWd1bGFyXG4gKiBzdWJkaXZpc2lvbnMgY2FsbGVkIGNlbGxzIHRoYXQgY29udGFpbiB0aWxlcyAoYG1kLWdyaWQtdGlsZWApLlxuICpcbiAqIDxpbWcgc3JjPVwiLy9tYXRlcmlhbC1kZXNpZ24uc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9wdWJsaXNoL3ZfMi9tYXRlcmlhbF9leHRfcHVibGlzaC8wQng0QlN0NmpuaUQ3T1ZsRWFYWjVZbVUxWHpnL2NvbXBvbmVudHNfZ3JpZHNfdXNhZ2UyLnBuZ1wiXG4gKiAgICBzdHlsZT1cIndpZHRoOiAzMDBweDsgaGVpZ2h0OiBhdXRvOyBtYXJnaW4tcmlnaHQ6IDE2cHg7XCIgYWx0PVwiQ29uY2VwdCBvZiBncmlkIGV4cGxhaW5lZCB2aXN1YWxseVwiPlxuICogPGltZyBzcmM9XCIvL21hdGVyaWFsLWRlc2lnbi5zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3B1Ymxpc2gvdl8yL21hdGVyaWFsX2V4dF9wdWJsaXNoLzBCeDRCU3Q2am5pRDdWR2hzT0U1aWRXbEpXWE0vY29tcG9uZW50c19ncmlkc191c2FnZTMucG5nXCJcbiAqICAgIHN0eWxlPVwid2lkdGg6IDMwMHB4OyBoZWlnaHQ6IGF1dG87XCIgYWx0PVwiR3JpZCBjb25jZXB0cyBsZWdlbmRcIj5cbiAqXG4gKiBDZWxscyBhcmUgYXJyYXllZCB2ZXJ0aWNhbGx5IGFuZCBob3Jpem9udGFsbHkgd2l0aGluIHRoZSBncmlkLlxuICpcbiAqIFRpbGVzIGhvbGQgY29udGVudCBhbmQgY2FuIHNwYW4gb25lIG9yIG1vcmUgY2VsbHMgdmVydGljYWxseSBvciBob3Jpem9udGFsbHkuXG4gKlxuICogIyMjIFJlc3BvbnNpdmUgQXR0cmlidXRlc1xuICpcbiAqIFRoZSBgbWQtZ3JpZC1saXN0YCBkaXJlY3RpdmUgc3VwcG9ydHMgXCJyZXNwb25zaXZlXCIgYXR0cmlidXRlcywgd2hpY2ggYWxsb3dcbiAqIGRpZmZlcmVudCBgbWQtY29sc2AsIGBtZC1ndXR0ZXJgIGFuZCBgbWQtcm93LWhlaWdodGAgdmFsdWVzIGRlcGVuZGluZyBvbiB0aGVcbiAqIGN1cnJlbnRseSBtYXRjaGluZyBtZWRpYSBxdWVyeSAoYXMgZGVmaW5lZCBpbiBgJG1kQ29uc3RhbnQuTUVESUFgKS5cbiAqXG4gKiBJbiBvcmRlciB0byBzZXQgYSByZXNwb25zaXZlIGF0dHJpYnV0ZSwgZmlyc3QgZGVmaW5lIHRoZSBmYWxsYmFjayB2YWx1ZSB3aXRoXG4gKiB0aGUgc3RhbmRhcmQgYXR0cmlidXRlIG5hbWUsIHRoZW4gYWRkIGFkZGl0aW9uYWwgYXR0cmlidXRlcyB3aXRoIHRoZVxuICogZm9sbG93aW5nIGNvbnZlbnRpb246IGB7YmFzZS1hdHRyaWJ1dGUtbmFtZX0te21lZGlhLXF1ZXJ5LW5hbWV9PVwie3ZhbHVlfVwiYFxuICogKGllLiBgbWQtY29scy1sZz1cIjhcImApXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG1kLWNvbHMgTnVtYmVyIG9mIGNvbHVtbnMgaW4gdGhlIGdyaWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gbWQtcm93LWhlaWdodCBPbmUgb2ZcbiAqIDx1bD5cbiAqICAgPGxpPkNTUyBsZW5ndGggLSBGaXhlZCBoZWlnaHQgcm93cyAoZWcuIGA4cHhgIG9yIGAxcmVtYCk8L2xpPlxuICogICA8bGk+YHt3aWR0aH06e2hlaWdodH1gIC0gUmF0aW8gb2Ygd2lkdGggdG8gaGVpZ2h0IChlZy5cbiAqICAgYG1kLXJvdy1oZWlnaHQ9XCIxNjo5XCJgKTwvbGk+XG4gKiAgIDxsaT5gXCJmaXRcImAgLSBIZWlnaHQgd2lsbCBiZSBkZXRlcm1pbmVkIGJ5IHN1YmRpdmlkaW5nIHRoZSBhdmFpbGFibGVcbiAqICAgaGVpZ2h0IGJ5IHRoZSBudW1iZXIgb2Ygcm93czwvbGk+XG4gKiA8L3VsPlxuICogQHBhcmFtIHtzdHJpbmc9fSBtZC1ndXR0ZXIgVGhlIGFtb3VudCBvZiBzcGFjZSBiZXR3ZWVuIHRpbGVzIGluIENTUyB1bml0c1xuICogICAgIChkZWZhdWx0IDFweClcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG1kLW9uLWxheW91dCBFeHByZXNzaW9uIHRvIGV2YWx1YXRlIGFmdGVyIGxheW91dC4gRXZlbnRcbiAqICAgICBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgLCBhbmQgY29udGFpbnMgcGVyZm9ybWFuY2UgaW5mb3JtYXRpb24uXG4gKlxuICogQHVzYWdlXG4gKiBCYXNpYzpcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8bWQtZ3JpZC1saXN0IG1kLWNvbHM9XCI1XCIgbWQtZ3V0dGVyPVwiMWVtXCIgbWQtcm93LWhlaWdodD1cIjQ6M1wiPlxuICogICA8bWQtZ3JpZC10aWxlPjwvbWQtZ3JpZC10aWxlPlxuICogPC9tZC1ncmlkLWxpc3Q+XG4gKiA8L2hsanM+XG4gKlxuICogRml4ZWQtaGVpZ2h0IHJvd3M6XG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogPG1kLWdyaWQtbGlzdCBtZC1jb2xzPVwiNFwiIG1kLXJvdy1oZWlnaHQ9XCIyMDBweFwiIC4uLj5cbiAqICAgPG1kLWdyaWQtdGlsZT48L21kLWdyaWQtdGlsZT5cbiAqIDwvbWQtZ3JpZC1saXN0PlxuICogPC9obGpzPlxuICpcbiAqIEZpdCByb3dzOlxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC1ncmlkLWxpc3QgbWQtY29scz1cIjRcIiBtZC1yb3ctaGVpZ2h0PVwiZml0XCIgc3R5bGU9XCJoZWlnaHQ6IDQwMHB4O1wiIC4uLj5cbiAqICAgPG1kLWdyaWQtdGlsZT48L21kLWdyaWQtdGlsZT5cbiAqIDwvbWQtZ3JpZC1saXN0PlxuICogPC9obGpzPlxuICpcbiAqIFVzaW5nIHJlc3BvbnNpdmUgYXR0cmlidXRlczpcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8bWQtZ3JpZC1saXN0XG4gKiAgICAgbWQtY29scy1zbT1cIjJcIlxuICogICAgIG1kLWNvbHMtbWQ9XCI0XCJcbiAqICAgICBtZC1jb2xzLWxnPVwiOFwiXG4gKiAgICAgbWQtY29scy1ndC1sZz1cIjEyXCJcbiAqICAgICAuLi4+XG4gKiAgIDxtZC1ncmlkLXRpbGU+PC9tZC1ncmlkLXRpbGU+XG4gKiA8L21kLWdyaWQtbGlzdD5cbiAqIDwvaGxqcz5cbiAqL1xuZnVuY3Rpb24gR3JpZExpc3REaXJlY3RpdmUoJGludGVycG9sYXRlLCAkbWRDb25zdGFudCwgJG1kR3JpZExheW91dCwgJG1kTWVkaWEpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIGNvbnRyb2xsZXI6IEdyaWRMaXN0Q29udHJvbGxlcixcbiAgICBzY29wZToge1xuICAgICAgbWRPbkxheW91dDogJyYnXG4gICAgfSxcbiAgICBsaW5rOiBwb3N0TGlua1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybCkge1xuICAgIC8vIEFwcGx5IHNlbWFudGljc1xuICAgIGVsZW1lbnQuYXR0cigncm9sZScsICdsaXN0Jyk7XG5cbiAgICAvLyBQcm92aWRlIHRoZSBjb250cm9sbGVyIHdpdGggYSB3YXkgdG8gdHJpZ2dlciBsYXlvdXRzLlxuICAgIGN0cmwubGF5b3V0RGVsZWdhdGUgPSBsYXlvdXREZWxlZ2F0ZTtcblxuICAgIHZhciBpbnZhbGlkYXRlTGF5b3V0ID0gYW5ndWxhci5iaW5kKGN0cmwsIGN0cmwuaW52YWxpZGF0ZUxheW91dCksXG4gICAgICAgIHVud2F0Y2hBdHRycyA9IHdhdGNoTWVkaWEoKTtcbiAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCB1bndhdGNoTWVkaWEpO1xuXG4gICAgLyoqXG4gICAgICogV2F0Y2hlcyBmb3IgY2hhbmdlcyBpbiBtZWRpYSwgaW52YWxpZGF0aW5nIGxheW91dCBhcyBuZWNlc3NhcnkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gd2F0Y2hNZWRpYSgpIHtcbiAgICAgIGZvciAodmFyIG1lZGlhTmFtZSBpbiAkbWRDb25zdGFudC5NRURJQSkge1xuICAgICAgICAkbWRNZWRpYShtZWRpYU5hbWUpOyAvLyBpbml0aWFsaXplXG4gICAgICAgICRtZE1lZGlhLmdldFF1ZXJ5KCRtZENvbnN0YW50Lk1FRElBW21lZGlhTmFtZV0pXG4gICAgICAgICAgICAuYWRkTGlzdGVuZXIoaW52YWxpZGF0ZUxheW91dCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gJG1kTWVkaWEud2F0Y2hSZXNwb25zaXZlQXR0cmlidXRlcyhcbiAgICAgICAgICBbJ21kLWNvbHMnLCAnbWQtcm93LWhlaWdodCddLCBhdHRycywgbGF5b3V0SWZNZWRpYU1hdGNoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bndhdGNoTWVkaWEoKSB7XG4gICAgICBjdHJsLmxheW91dERlbGVnYXRlID0gYW5ndWxhci5ub29wO1xuXG4gICAgICB1bndhdGNoQXR0cnMoKTtcbiAgICAgIGZvciAodmFyIG1lZGlhTmFtZSBpbiAkbWRDb25zdGFudC5NRURJQSkge1xuICAgICAgICAkbWRNZWRpYS5nZXRRdWVyeSgkbWRDb25zdGFudC5NRURJQVttZWRpYU5hbWVdKVxuICAgICAgICAgICAgLnJlbW92ZUxpc3RlbmVyKGludmFsaWRhdGVMYXlvdXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGdyaWQgbGF5b3V0IGlmIHRoZSBwcm92aWRlZCBtZWRpYU5hbWUgbWF0Y2hlcyB0aGUgY3VycmVudGx5XG4gICAgICogYWN0aXZlIG1lZGlhIHR5cGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF5b3V0SWZNZWRpYU1hdGNoKG1lZGlhTmFtZSkge1xuICAgICAgaWYgKG1lZGlhTmFtZSA9PSBudWxsKSB7XG4gICAgICAgIC8vIFRPRE8oc2h5bmRtYW4pOiBJdCB3b3VsZCBiZSBuaWNlIHRvIG9ubHkgbGF5b3V0IGlmIHdlIGhhdmVcbiAgICAgICAgLy8gaW5zdGFuY2VzIG9mIGF0dHJpYnV0ZXMgdXNpbmcgdGhpcyBtZWRpYSB0eXBlXG4gICAgICAgIGN0cmwuaW52YWxpZGF0ZUxheW91dCgpO1xuICAgICAgfSBlbHNlIGlmICgkbWRNZWRpYShtZWRpYU5hbWUpKSB7XG4gICAgICAgIGN0cmwuaW52YWxpZGF0ZUxheW91dCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsYXN0TGF5b3V0UHJvcHM7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBsYXlvdXQgZW5naW5lLCBhbmQgdXNlcyBpdHMgcmVzdWx0cyB0byBsYXkgb3V0IG91clxuICAgICAqIHRpbGUgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHRpbGVzSW52YWxpZGF0ZWQgV2hldGhlciB0aWxlcyBoYXZlIGJlZW5cbiAgICAgKiAgICBhZGRlZC9yZW1vdmVkL21vdmVkIHNpbmNlIHRoZSBsYXN0IGxheW91dC4gVGhpcyBpcyB0byBhdm9pZCBzaXR1YXRpb25zXG4gICAgICogICAgd2hlcmUgdGlsZXMgYXJlIHJlcGxhY2VkIHdpdGggcHJvcGVydGllcyBpZGVudGljYWwgdG8gdGhlaXIgcmVtb3ZlZFxuICAgICAqICAgIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXlvdXREZWxlZ2F0ZSh0aWxlc0ludmFsaWRhdGVkKSB7XG4gICAgICB2YXIgdGlsZXMgPSBnZXRUaWxlRWxlbWVudHMoKTtcbiAgICAgIHZhciBwcm9wcyA9IHtcbiAgICAgICAgdGlsZVNwYW5zOiBnZXRUaWxlU3BhbnModGlsZXMpLFxuICAgICAgICBjb2xDb3VudDogZ2V0Q29sdW1uQ291bnQoKSxcbiAgICAgICAgcm93TW9kZTogZ2V0Um93TW9kZSgpLFxuICAgICAgICByb3dIZWlnaHQ6IGdldFJvd0hlaWdodCgpLFxuICAgICAgICBndXR0ZXI6IGdldEd1dHRlcigpXG4gICAgICB9O1xuXG4gICAgICBpZiAoIXRpbGVzSW52YWxpZGF0ZWQgJiYgYW5ndWxhci5lcXVhbHMocHJvcHMsIGxhc3RMYXlvdXRQcm9wcykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGVyZm9ybWFuY2UgPVxuICAgICAgICAkbWRHcmlkTGF5b3V0KHByb3BzLmNvbENvdW50LCBwcm9wcy50aWxlU3BhbnMsIHRpbGVzKVxuICAgICAgICAgIC5tYXAoZnVuY3Rpb24odGlsZVBvc2l0aW9ucywgcm93Q291bnQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICAgICAgICAgIHN0eWxlOiBnZXRHcmlkU3R5bGUocHJvcHMuY29sQ291bnQsIHJvd0NvdW50LFxuICAgICAgICAgICAgICAgICAgICBwcm9wcy5ndXR0ZXIsIHByb3BzLnJvd01vZGUsIHByb3BzLnJvd0hlaWdodClcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdGlsZXM6IHRpbGVQb3NpdGlvbnMubWFwKGZ1bmN0aW9uKHBzLCBpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGFuZ3VsYXIuZWxlbWVudCh0aWxlc1tpXSksXG4gICAgICAgICAgICAgICAgICBzdHlsZTogZ2V0VGlsZVN0eWxlKHBzLnBvc2l0aW9uLCBwcy5zcGFucyxcbiAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5jb2xDb3VudCwgcHJvcHMucm93Q291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgcHJvcHMuZ3V0dGVyLCBwcm9wcy5yb3dNb2RlLCBwcm9wcy5yb3dIZWlnaHQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLnJlZmxvdygpXG4gICAgICAgICAgLnBlcmZvcm1hbmNlKCk7XG5cbiAgICAgIC8vIFJlcG9ydCBsYXlvdXRcbiAgICAgIHNjb3BlLm1kT25MYXlvdXQoe1xuICAgICAgICAkZXZlbnQ6IHtcbiAgICAgICAgICBwZXJmb3JtYW5jZTogcGVyZm9ybWFuY2VcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGxhc3RMYXlvdXRQcm9wcyA9IHByb3BzO1xuICAgIH1cblxuICAgIC8vIFVzZSAkaW50ZXJwb2xhdGUgdG8gZG8gc29tZSBzaW1wbGUgc3RyaW5nIGludGVycG9sYXRpb24gYXMgYSBjb252ZW5pZW5jZS5cblxuICAgIHZhciBzdGFydFN5bWJvbCA9ICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpO1xuICAgIHZhciBlbmRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCk7XG5cbiAgICAvLyBSZXR1cm5zIGFuIGV4cHJlc3Npb24gd3JhcHBlZCBpbiB0aGUgaW50ZXJwb2xhdG9yJ3Mgc3RhcnQgYW5kIGVuZCBzeW1ib2xzLlxuICAgIGZ1bmN0aW9uIGV4cHIoZXhwclN0cikge1xuICAgICAgcmV0dXJuIHN0YXJ0U3ltYm9sICsgZXhwclN0ciArIGVuZFN5bWJvbDtcbiAgICB9XG5cbiAgICAvLyBUaGUgYW1vdW50IG9mIHNwYWNlIGEgc2luZ2xlIDF4MSB0aWxlIHdvdWxkIHRha2UgdXAgKGVpdGhlciB3aWR0aCBvciBoZWlnaHQpLCB1c2VkIGFzXG4gICAgLy8gYSBiYXNpcyBmb3Igb3RoZXIgY2FsY3VsYXRpb25zLiBUaGlzIGNvbnNpc3RzIG9mIHRha2luZyB0aGUgYmFzZSBzaXplIHBlcmNlbnQgKGFzIHdvdWxkIGJlXG4gICAgLy8gaWYgZXZlbmx5IGRpdmlkaW5nIHRoZSBzaXplIGJldHdlZW4gY2VsbHMpLCBhbmQgdGhlbiBzdWJ0cmFjdGluZyB0aGUgc2l6ZSBvZiBvbmUgZ3V0dGVyLlxuICAgIC8vIEhvd2V2ZXIsIHNpbmNlIHRoZXJlIGFyZSBubyBndXR0ZXJzIG9uIHRoZSBlZGdlcywgZWFjaCB0aWxlIG9ubHkgdXNlcyBhIGZyYXRpb25cbiAgICAvLyAoZ3V0dGVyU2hhcmUgPSBudW1HdXR0ZXJzIC8gbnVtQ2VsbHMpIG9mIHRoZSBndXR0ZXIgc2l6ZS4gKEltYWdpbmUgaGF2aW5nIG9uZSBndXR0ZXIgcGVyXG4gICAgLy8gdGlsZSwgYW5kIHRoZW4gYnJlYWtpbmcgdXAgdGhlIGV4dHJhIGd1dHRlciBvbiB0aGUgZWRnZSBldmVubHkgYW1vbmcgdGhlIGNlbGxzKS5cbiAgICB2YXIgVU5JVCA9ICRpbnRlcnBvbGF0ZShleHByKCdzaGFyZScpICsgJyUgLSAoJyArIGV4cHIoJ2d1dHRlcicpICsgJyAqICcgKyBleHByKCdndXR0ZXJTaGFyZScpICsgJyknKTtcblxuICAgIC8vIFRoZSBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHBvc2l0aW9uIG9mIGEgdGlsZSwgZS5nLiwgdGhlICd0b3AnIG9yICdsZWZ0JyBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAvLyBUaGUgcG9zaXRpb24gY29tZXMgdGhlIHNpemUgb2YgYSAxeDEgdGlsZSBwbHVzIGd1dHRlciBmb3IgZWFjaCBwcmV2aW91cyB0aWxlIGluIHRoZVxuICAgIC8vIHJvdy9jb2x1bW4gKG9mZnNldCkuXG4gICAgdmFyIFBPU0lUSU9OICA9ICRpbnRlcnBvbGF0ZSgnY2FsYygoJyArIGV4cHIoJ3VuaXQnKSArICcgKyAnICsgZXhwcignZ3V0dGVyJykgKyAnKSAqICcgKyBleHByKCdvZmZzZXQnKSArICcpJyk7XG5cbiAgICAvLyBUaGUgYWN0dWFsIHNpemUgb2YgYSB0aWxlLCBlLmcuLCB3aWR0aCBvciBoZWlnaHQsIHRha2luZyByb3dTcGFuIG9yIGNvbFNwYW4gaW50byBhY2NvdW50LlxuICAgIC8vIFRoaXMgaXMgY29tcHV0ZWQgYnkgbXVsdGlwbHlpbmcgdGhlIGJhc2UgdW5pdCBieSB0aGUgcm93U3Bhbi9jb2xTcGFuLCBhbmQgdGhlbiBhZGRpbmcgYmFja1xuICAgIC8vIGluIHRoZSBzcGFjZSB0aGF0IHRoZSBndXR0ZXIgd291bGQgbm9ybWFsbHkgaGF2ZSB1c2VkICh3aGljaCB3YXMgYWxyZWFkeSBhY2NvdW50ZWQgZm9yIGluXG4gICAgLy8gdGhlIGJhc2UgdW5pdCBjYWxjdWxhdGlvbikuXG4gICAgdmFyIERJTUVOU0lPTiA9ICRpbnRlcnBvbGF0ZSgnY2FsYygoJyArIGV4cHIoJ3VuaXQnKSArICcpICogJyArIGV4cHIoJ3NwYW4nKSArICcgKyAoJyArIGV4cHIoJ3NwYW4nKSArICcgLSAxKSAqICcgKyBleHByKCdndXR0ZXInKSArICcpJyk7XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzdHlsZXMgYXBwbGllZCB0byBhIHRpbGUgZWxlbWVudCBkZXNjcmliZWQgYnkgdGhlIGdpdmVuIHBhcmFtZXRlcnMuXG4gICAgICogQHBhcmFtIHt7cm93OiBudW1iZXIsIGNvbDogbnVtYmVyfX0gcG9zaXRpb24gVGhlIHJvdyBhbmQgY29sdW1uIGluZGljZXMgb2YgdGhlIHRpbGUuXG4gICAgICogQHBhcmFtIHt7cm93OiBudW1iZXIsIGNvbDogbnVtYmVyfX0gc3BhbnMgVGhlIHJvd1NwYW4gYW5kIGNvbFNwYW4gb2YgdGhlIHRpbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbENvdW50IFRoZSBudW1iZXIgb2YgY29sdW1ucy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcm93Q291bnQgVGhlIG51bWJlciBvZiByb3dzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBndXR0ZXIgVGhlIGFtb3VudCBvZiBzcGFjZSBiZXR3ZWVuIHRpbGVzLiBUaGlzIHdpbGwgYmUgc29tZXRoaW5nIGxpa2VcbiAgICAgKiAgICAgJzVweCcgb3IgJzJlbScuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJvd01vZGUgVGhlIHJvdyBoZWlnaHQgbW9kZS4gQ2FuIGJlIG9uZSBvZjpcbiAgICAgKiAgICAgJ2ZpeGVkJzogYWxsIHJvd3MgaGF2ZSBhIGZpeGVkIHNpemUsIGdpdmVuIGJ5IHJvd0hlaWdodCxcbiAgICAgKiAgICAgJ3JhdGlvJzogcm93IGhlaWdodCBkZWZpbmVkIGFzIGEgcmF0aW8gdG8gd2lkdGgsIG9yXG4gICAgICogICAgICdmaXQnOiBmaXQgdG8gdGhlIGdyaWQtbGlzdCBlbGVtZW50IGhlaWdodCwgZGl2aW5kaW5nIGV2ZW5seSBhbW9uZyByb3dzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gcm93SGVpZ2h0IFRoZSBoZWlnaHQgb2YgYSByb3cuIFRoaXMgaXMgb25seSB1c2VkIGZvciAnZml4ZWQnIG1vZGUgYW5kXG4gICAgICogICAgIGZvciAncmF0aW8nIG1vZGUuIEZvciAncmF0aW8nIG1vZGUsIHRoaXMgaXMgdGhlICpyYXRpbyogb2Ygd2lkdGgtdG8taGVpZ2h0IChlLmcuLCAwLjc1KS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBNYXAgb2YgQ1NTIHByb3BlcnRpZXMgdG8gYmUgYXBwbGllZCB0byB0aGUgc3R5bGUgZWxlbWVudC4gV2lsbCBkZWZpbmVcbiAgICAgKiAgICAgdmFsdWVzIGZvciB0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHQsIG1hcmdpblRvcCwgYW5kIHBhZGRpbmdUb3AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VGlsZVN0eWxlKHBvc2l0aW9uLCBzcGFucywgY29sQ291bnQsIHJvd0NvdW50LCBndXR0ZXIsIHJvd01vZGUsIHJvd0hlaWdodCkge1xuICAgICAgLy8gVE9ETyhzaHluZG1hbik6IFRoZXJlIGFyZSBzdHlsZSBjYWNoaW5nIG9wcG9ydHVuaXRpZXMgaGVyZS5cblxuICAgICAgLy8gUGVyY2VudCBvZiB0aGUgYXZhaWxhYmxlIGhvcml6b250YWwgc3BhY2UgdGhhdCBvbmUgY29sdW1uIHRha2VzIHVwLlxuICAgICAgdmFyIGhTaGFyZSA9ICgxIC8gY29sQ291bnQpICogMTAwO1xuXG4gICAgICAvLyBGcmFjdGlvbiBvZiB0aGUgZ3V0dGVyIHNpemUgdGhhdCBlYWNoIGNvbHVtbiB0YWtlcyB1cC5cbiAgICAgIHZhciBoR3V0dGVyU2hhcmUgPSAoY29sQ291bnQgLSAxKSAvIGNvbENvdW50O1xuXG4gICAgICAvLyBCYXNlIGhvcml6b250YWwgc2l6ZSBvZiBhIGNvbHVtbi5cbiAgICAgIHZhciBoVW5pdCA9IFVOSVQoe3NoYXJlOiBoU2hhcmUsIGd1dHRlclNoYXJlOiBoR3V0dGVyU2hhcmUsIGd1dHRlcjogZ3V0dGVyfSk7XG5cbiAgICAgIC8vIFRoZSB3aWR0aCBhbmQgaG9yaXpvbnRhbCBwb3NpdGlvbiBvZiBlYWNoIHRpbGUgaXMgYWx3YXlzIGNhbGN1bGF0ZWQgdGhlIHNhbWUgd2F5LCBidXQgdGhlXG4gICAgICAvLyBoZWlnaHQgYW5kIHZlcnRpY2FsIHBvc2l0aW9uIGRlcGVuZHMgb24gdGhlIHJvd01vZGUuXG4gICAgICB2YXIgc3R5bGUgPSB7XG4gICAgICAgIGxlZnQ6IFBPU0lUSU9OKHsgdW5pdDogaFVuaXQsIG9mZnNldDogcG9zaXRpb24uY29sLCBndXR0ZXI6IGd1dHRlciB9KSxcbiAgICAgICAgd2lkdGg6IERJTUVOU0lPTih7IHVuaXQ6IGhVbml0LCBzcGFuOiBzcGFucy5jb2wsIGd1dHRlcjogZ3V0dGVyIH0pLFxuICAgICAgICAvLyByZXNldHNcbiAgICAgICAgcGFkZGluZ1RvcDogJycsXG4gICAgICAgIG1hcmdpblRvcDogJycsXG4gICAgICAgIHRvcDogJycsXG4gICAgICAgIGhlaWdodDogJydcbiAgICAgIH07XG5cbiAgICAgIHN3aXRjaCAocm93TW9kZSkge1xuICAgICAgICBjYXNlICdmaXhlZCc6XG4gICAgICAgICAgLy8gSW4gZml4ZWQgbW9kZSwgc2ltcGx5IHVzZSB0aGUgZ2l2ZW4gcm93SGVpZ2h0LlxuICAgICAgICAgIHN0eWxlLnRvcCA9IFBPU0lUSU9OKHsgdW5pdDogcm93SGVpZ2h0LCBvZmZzZXQ6IHBvc2l0aW9uLnJvdywgZ3V0dGVyOiBndXR0ZXIgfSk7XG4gICAgICAgICAgc3R5bGUuaGVpZ2h0ID0gRElNRU5TSU9OKHsgdW5pdDogcm93SGVpZ2h0LCBzcGFuOiBzcGFucy5yb3csIGd1dHRlcjogZ3V0dGVyIH0pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3JhdGlvJzpcbiAgICAgICAgICAvLyBQZXJjZW50IG9mIHRoZSBhdmFpbGFibGUgdmVydGljYWwgc3BhY2UgdGhhdCBvbmUgcm93IHRha2VzIHVwLiBIZXJlLCByb3dIZWlnaHQgaG9sZHNcbiAgICAgICAgICAvLyB0aGUgcmF0aW8gdmFsdWUuIEZvciBleGFtcGxlLCBpZiB0aGUgd2lkdGg6aGVpZ2h0IHJhdGlvIGlzIDQ6Mywgcm93SGVpZ2h0ID0gMS4zMzMuXG4gICAgICAgICAgdmFyIHZTaGFyZSA9IGhTaGFyZSAvIHJvd0hlaWdodDtcblxuICAgICAgICAgIC8vIEJhc2UgdmVyaXRjYWwgc2l6ZSBvZiBhIHJvdy5cbiAgICAgICAgICB2YXIgdlVuaXQgPSBVTklUKHsgc2hhcmU6IHZTaGFyZSwgZ3V0dGVyU2hhcmU6IGhHdXR0ZXJTaGFyZSwgZ3V0dGVyOiBndXR0ZXIgfSk7XG5cbiAgICAgICAgICAvLyBwYWRpZG5nVG9wIGFuZCBtYXJnaW5Ub3AgYXJlIHVzZWQgdG8gbWFpbnRhaW4gdGhlIGdpdmVuIGFzcGVjdCByYXRpbywgYXNcbiAgICAgICAgICAvLyBhIHBlcmNlbnRhZ2UtYmFzZWQgdmFsdWUgZm9yIHRoZXNlIHByb3BlcnRpZXMgaXMgYXBwbGllZCB0byB0aGUgKndpZHRoKiBvZiB0aGVcbiAgICAgICAgICAvLyBjb250YWluaW5nIGJsb2NrLiBTZWUgaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMi9ib3guaHRtbCNtYXJnaW4tcHJvcGVydGllc1xuICAgICAgICAgIHN0eWxlLnBhZGRpbmdUb3AgPSBESU1FTlNJT04oeyB1bml0OiB2VW5pdCwgc3Bhbjogc3BhbnMucm93LCBndXR0ZXI6IGd1dHRlcn0pO1xuICAgICAgICAgIHN0eWxlLm1hcmdpblRvcCA9IFBPU0lUSU9OKHsgdW5pdDogdlVuaXQsIG9mZnNldDogcG9zaXRpb24ucm93LCBndXR0ZXI6IGd1dHRlciB9KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdmaXQnOlxuICAgICAgICAgIC8vIEZyYWN0aW9uIG9mIHRoZSBndXR0ZXIgc2l6ZSB0aGF0IGVhY2ggY29sdW1uIHRha2VzIHVwLlxuICAgICAgICAgIHZhciB2R3V0dGVyU2hhcmUgPSAocm93Q291bnQgLSAxKSAvIHJvd0NvdW50O1xuXG4gICAgICAgICAgLy8gUGVyY2VudCBvZiB0aGUgYXZhaWxhYmxlIHZlcnRpY2FsIHNwYWNlIHRoYXQgb25lIHJvdyB0YWtlcyB1cC5cbiAgICAgICAgICB2YXIgdlNoYXJlID0gKDEgLyByb3dDb3VudCkgKiAxMDA7XG5cbiAgICAgICAgICAvLyBCYXNlIHZlcnRpY2FsIHNpemUgb2YgYSByb3cuXG4gICAgICAgICAgdmFyIHZVbml0ID0gVU5JVCh7c2hhcmU6IHZTaGFyZSwgZ3V0dGVyU2hhcmU6IHZHdXR0ZXJTaGFyZSwgZ3V0dGVyOiBndXR0ZXJ9KTtcblxuICAgICAgICAgIHN0eWxlLnRvcCA9IFBPU0lUSU9OKHt1bml0OiB2VW5pdCwgb2Zmc2V0OiBwb3NpdGlvbi5yb3csIGd1dHRlcjogZ3V0dGVyfSk7XG4gICAgICAgICAgc3R5bGUuaGVpZ2h0ID0gRElNRU5TSU9OKHt1bml0OiB2VW5pdCwgc3Bhbjogc3BhbnMucm93LCBndXR0ZXI6IGd1dHRlcn0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0R3JpZFN0eWxlKGNvbENvdW50LCByb3dDb3VudCwgZ3V0dGVyLCByb3dNb2RlLCByb3dIZWlnaHQpIHtcbiAgICAgIHZhciBzdHlsZSA9IHtcbiAgICAgICAgaGVpZ2h0OiAnJyxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogJydcbiAgICAgIH07XG5cbiAgICAgIHN3aXRjaChyb3dNb2RlKSB7XG4gICAgICAgIGNhc2UgJ2ZpeGVkJzpcbiAgICAgICAgICBzdHlsZS5oZWlnaHQgPSBESU1FTlNJT04oeyB1bml0OiByb3dIZWlnaHQsIHNwYW46IHJvd0NvdW50LCBndXR0ZXI6IGd1dHRlciB9KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdyYXRpbyc6XG4gICAgICAgICAgLy8gcm93SGVpZ2h0IGlzIHdpZHRoIC8gaGVpZ2h0XG4gICAgICAgICAgdmFyIGhHdXR0ZXJTaGFyZSA9IGNvbENvdW50ID09PSAxID8gMCA6IChjb2xDb3VudCAtIDEpIC8gY29sQ291bnQsXG4gICAgICAgICAgICAgIGhTaGFyZSA9ICgxIC8gY29sQ291bnQpICogMTAwLFxuICAgICAgICAgICAgICB2U2hhcmUgPSBoU2hhcmUgKiAoMSAvIHJvd0hlaWdodCksXG4gICAgICAgICAgICAgIHZVbml0ID0gVU5JVCh7IHNoYXJlOiB2U2hhcmUsIGd1dHRlclNoYXJlOiBoR3V0dGVyU2hhcmUsIGd1dHRlcjogZ3V0dGVyIH0pO1xuXG4gICAgICAgICAgc3R5bGUucGFkZGluZ0JvdHRvbSA9IERJTUVOU0lPTih7IHVuaXQ6IHZVbml0LCBzcGFuOiByb3dDb3VudCwgZ3V0dGVyOiBndXR0ZXJ9KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdmaXQnOlxuICAgICAgICAgIC8vIG5vb3AsIGFzIHRoZSBoZWlnaHQgaXMgdXNlciBzZXRcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFRpbGVFbGVtZW50cygpIHtcbiAgICAgIHJldHVybiBbXS5maWx0ZXIuY2FsbChlbGVtZW50LmNoaWxkcmVuKCksIGZ1bmN0aW9uKGVsZSkge1xuICAgICAgICByZXR1cm4gZWxlLnRhZ05hbWUgPT0gJ01ELUdSSUQtVElMRSc7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFuIGFycmF5IG9mIG9iamVjdHMgY29udGFpbmluZyB0aGUgcm93c3BhbiBhbmQgY29sc3BhbiBmb3IgZWFjaCB0aWxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheTx7cm93OiBudW1iZXIsIGNvbDogbnVtYmVyfT59XG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VGlsZVNwYW5zKHRpbGVFbGVtZW50cykge1xuICAgICAgcmV0dXJuIFtdLm1hcC5jYWxsKHRpbGVFbGVtZW50cywgZnVuY3Rpb24oZWxlKSB7XG4gICAgICAgIHZhciBjdHJsID0gYW5ndWxhci5lbGVtZW50KGVsZSkuY29udHJvbGxlcignbWRHcmlkVGlsZScpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJvdzogcGFyc2VJbnQoXG4gICAgICAgICAgICAgICRtZE1lZGlhLmdldFJlc3BvbnNpdmVBdHRyaWJ1dGUoY3RybC4kYXR0cnMsICdtZC1yb3dzcGFuJyksIDEwKSB8fCAxLFxuICAgICAgICAgIGNvbDogcGFyc2VJbnQoXG4gICAgICAgICAgICAgICRtZE1lZGlhLmdldFJlc3BvbnNpdmVBdHRyaWJ1dGUoY3RybC4kYXR0cnMsICdtZC1jb2xzcGFuJyksIDEwKSB8fCAxXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDb2x1bW5Db3VudCgpIHtcbiAgICAgIHZhciBjb2xDb3VudCA9IHBhcnNlSW50KCRtZE1lZGlhLmdldFJlc3BvbnNpdmVBdHRyaWJ1dGUoYXR0cnMsICdtZC1jb2xzJyksIDEwKTtcbiAgICAgIGlmIChpc05hTihjb2xDb3VudCkpIHtcbiAgICAgICAgdGhyb3cgJ21kLWdyaWQtbGlzdDogbWQtY29scyBhdHRyaWJ1dGUgd2FzIG5vdCBmb3VuZCwgb3IgY29udGFpbmVkIGEgbm9uLW51bWVyaWMgdmFsdWUnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbENvdW50O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEd1dHRlcigpIHtcbiAgICAgIHJldHVybiBhcHBseURlZmF1bHRVbml0KCRtZE1lZGlhLmdldFJlc3BvbnNpdmVBdHRyaWJ1dGUoYXR0cnMsICdtZC1ndXR0ZXInKSB8fCAxKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRSb3dIZWlnaHQoKSB7XG4gICAgICB2YXIgcm93SGVpZ2h0ID0gJG1kTWVkaWEuZ2V0UmVzcG9uc2l2ZUF0dHJpYnV0ZShhdHRycywgJ21kLXJvdy1oZWlnaHQnKTtcbiAgICAgIHN3aXRjaCAoZ2V0Um93TW9kZSgpKSB7XG4gICAgICAgIGNhc2UgJ2ZpeGVkJzpcbiAgICAgICAgICByZXR1cm4gYXBwbHlEZWZhdWx0VW5pdChyb3dIZWlnaHQpO1xuICAgICAgICBjYXNlICdyYXRpbyc6XG4gICAgICAgICAgdmFyIHdoUmF0aW8gPSByb3dIZWlnaHQuc3BsaXQoJzonKTtcbiAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh3aFJhdGlvWzBdKSAvIHBhcnNlRmxvYXQod2hSYXRpb1sxXSk7XG4gICAgICAgIGNhc2UgJ2ZpdCc6XG4gICAgICAgICAgcmV0dXJuIDA7IC8vIE4vQVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFJvd01vZGUoKSB7XG4gICAgICB2YXIgcm93SGVpZ2h0ID0gJG1kTWVkaWEuZ2V0UmVzcG9uc2l2ZUF0dHJpYnV0ZShhdHRycywgJ21kLXJvdy1oZWlnaHQnKTtcbiAgICAgIGlmIChyb3dIZWlnaHQgPT0gJ2ZpdCcpIHtcbiAgICAgICAgcmV0dXJuICdmaXQnO1xuICAgICAgfSBlbHNlIGlmIChyb3dIZWlnaHQuaW5kZXhPZignOicpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gJ3JhdGlvJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAnZml4ZWQnO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5RGVmYXVsdFVuaXQodmFsKSB7XG4gICAgICByZXR1cm4gL1xcRCQvLnRlc3QodmFsKSA/IHZhbCA6IHZhbCArICdweCc7XG4gICAgfVxuICB9XG59XG5HcmlkTGlzdERpcmVjdGl2ZS4kaW5qZWN0ID0gW1wiJGludGVycG9sYXRlXCIsIFwiJG1kQ29uc3RhbnRcIiwgXCIkbWRHcmlkTGF5b3V0XCIsIFwiJG1kTWVkaWFcIl07XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gR3JpZExpc3RDb250cm9sbGVyKCR0aW1lb3V0KSB7XG4gIHRoaXMubGF5b3V0SW52YWxpZGF0ZWQgPSBmYWxzZTtcbiAgdGhpcy50aWxlc0ludmFsaWRhdGVkID0gZmFsc2U7XG4gIHRoaXMuJHRpbWVvdXRfID0gJHRpbWVvdXQ7XG4gIHRoaXMubGF5b3V0RGVsZWdhdGUgPSBhbmd1bGFyLm5vb3A7XG59XG5HcmlkTGlzdENvbnRyb2xsZXIuJGluamVjdCA9IFtcIiR0aW1lb3V0XCJdO1xuXG5HcmlkTGlzdENvbnRyb2xsZXIucHJvdG90eXBlID0ge1xuICBpbnZhbGlkYXRlVGlsZXM6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGlsZXNJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgdGhpcy5pbnZhbGlkYXRlTGF5b3V0KCk7XG4gIH0sXG5cbiAgaW52YWxpZGF0ZUxheW91dDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMubGF5b3V0SW52YWxpZGF0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5sYXlvdXRJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgdGhpcy4kdGltZW91dF8oYW5ndWxhci5iaW5kKHRoaXMsIHRoaXMubGF5b3V0KSk7XG4gIH0sXG5cbiAgbGF5b3V0OiBmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5sYXlvdXREZWxlZ2F0ZSh0aGlzLnRpbGVzSW52YWxpZGF0ZWQpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLmxheW91dEludmFsaWRhdGVkID0gZmFsc2U7XG4gICAgICB0aGlzLnRpbGVzSW52YWxpZGF0ZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbn07XG5cblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBHcmlkTGF5b3V0RmFjdG9yeSgkbWRVdGlsKSB7XG4gIHZhciBkZWZhdWx0QW5pbWF0b3IgPSBHcmlkVGlsZUFuaW1hdG9yO1xuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHJlZmxvdyBhbmltYXRvciBjYWxsYmFja1xuICAgKi9cbiAgR3JpZExheW91dC5hbmltYXRlV2l0aCA9IGZ1bmN0aW9uKGN1c3RvbUFuaW1hdG9yKSB7XG4gICAgZGVmYXVsdEFuaW1hdG9yID0gIWFuZ3VsYXIuaXNGdW5jdGlvbihjdXN0b21BbmltYXRvcikgPyBHcmlkVGlsZUFuaW1hdG9yIDogY3VzdG9tQW5pbWF0b3I7XG4gIH07XG5cbiAgcmV0dXJuIEdyaWRMYXlvdXQ7XG5cbiAgLyoqXG4gICAqIFB1Ymxpc2ggbGF5b3V0IGZ1bmN0aW9uXG4gICAqL1xuICBmdW5jdGlvbiBHcmlkTGF5b3V0KGNvbENvdW50LCB0aWxlU3BhbnMpIHtcbiAgICAgIHZhciBzZWxmLCBsYXlvdXRJbmZvLCBncmlkU3R5bGVzLCBsYXlvdXRUaW1lLCBtYXBUaW1lLCByZWZsb3dUaW1lO1xuXG4gICAgICBsYXlvdXRUaW1lID0gJG1kVXRpbC50aW1lKGZ1bmN0aW9uKCkge1xuICAgICAgICBsYXlvdXRJbmZvID0gY2FsY3VsYXRlR3JpZEZvcihjb2xDb3VudCwgdGlsZVNwYW5zKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gc2VsZiA9IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQW4gYXJyYXkgb2Ygb2JqZWN0cyBkZXNjcmliaW5nIGVhY2ggdGlsZSdzIHBvc2l0aW9uIGluIHRoZSBncmlkLlxuICAgICAgICAgKi9cbiAgICAgICAgbGF5b3V0SW5mbzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGxheW91dEluZm87XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1hcHMgZ3JpZCBwb3NpdGlvbmluZyB0byBhbiBlbGVtZW50IGFuZCBhIHNldCBvZiBzdHlsZXMgdXNpbmcgdGhlXG4gICAgICAgICAqIHByb3ZpZGVkIHVwZGF0ZUZuLlxuICAgICAgICAgKi9cbiAgICAgICAgbWFwOiBmdW5jdGlvbih1cGRhdGVGbikge1xuICAgICAgICAgIG1hcFRpbWUgPSAkbWRVdGlsLnRpbWUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaW5mbyA9IHNlbGYubGF5b3V0SW5mbygpO1xuICAgICAgICAgICAgZ3JpZFN0eWxlcyA9IHVwZGF0ZUZuKGluZm8ucG9zaXRpb25pbmcsIGluZm8ucm93Q291bnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZhdWx0IGFuaW1hdG9yIHNpbXBseSBzZXRzIHRoZSBlbGVtZW50LmNzcyggPHN0eWxlcz4gKS4gQW4gYWx0ZXJuYXRlXG4gICAgICAgICAqIGFuaW1hdG9yIGNhbiBiZSBwcm92aWRlZCBhcyBhbiBhcmd1bWVudC4gVGhlIGZ1bmN0aW9uIGhhcyB0aGUgZm9sbG93aW5nXG4gICAgICAgICAqIHNpZ25hdHVyZTpcbiAgICAgICAgICpcbiAgICAgICAgICogICAgZnVuY3Rpb24oe2dyaWQ6IHtlbGVtZW50OiBKUUxpdGUsIHN0eWxlOiBPYmplY3R9LCB0aWxlczogQXJyYXk8e2VsZW1lbnQ6IEpRTGl0ZSwgc3R5bGU6IE9iamVjdH0+KVxuICAgICAgICAgKi9cbiAgICAgICAgcmVmbG93OiBmdW5jdGlvbihhbmltYXRvckZuKSB7XG4gICAgICAgICAgcmVmbG93VGltZSA9ICRtZFV0aWwudGltZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhbmltYXRvciA9IGFuaW1hdG9yRm4gfHwgZGVmYXVsdEFuaW1hdG9yO1xuICAgICAgICAgICAgYW5pbWF0b3IoZ3JpZFN0eWxlcy5ncmlkLCBncmlkU3R5bGVzLnRpbGVzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGltaW5nIGZvciB0aGUgbW9zdCByZWNlbnQgbGF5b3V0IHJ1bi5cbiAgICAgICAgICovXG4gICAgICAgIHBlcmZvcm1hbmNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGlsZUNvdW50OiB0aWxlU3BhbnMubGVuZ3RoLFxuICAgICAgICAgICAgbGF5b3V0VGltZTogbGF5b3V0VGltZSxcbiAgICAgICAgICAgIG1hcFRpbWU6IG1hcFRpbWUsXG4gICAgICAgICAgICByZWZsb3dUaW1lOiByZWZsb3dUaW1lLFxuICAgICAgICAgICAgdG90YWxUaW1lOiBsYXlvdXRUaW1lICsgbWFwVGltZSArIHJlZmxvd1RpbWVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAvKipcbiAgICogRGVmYXVsdCBHcmlkbGlzdCBhbmltYXRvciBzaW1wbGUgc2V0cyB0aGUgY3NzIGZvciBlYWNoIGVsZW1lbnQ7XG4gICAqIE5PVEU6IGFueSB0cmFuc2l0aW9ucyBlZmZlY3RzIG11c3QgYmUgbWFudWFsbHkgc2V0IGluIHRoZSBDU1MuXG4gICAqIGUuZy5cbiAgICpcbiAgICogIG1kLWdyaWQtdGlsZSB7XG4gICAqICAgIHRyYW5zaXRpb246IGFsbCA3MDBtcyBlYXNlLW91dCA1MG1zO1xuICAgKiAgfVxuICAgKlxuICAgKi9cbiAgZnVuY3Rpb24gR3JpZFRpbGVBbmltYXRvcihncmlkLCB0aWxlcykge1xuICAgIGdyaWQuZWxlbWVudC5jc3MoZ3JpZC5zdHlsZSk7XG4gICAgdGlsZXMuZm9yRWFjaChmdW5jdGlvbih0KSB7XG4gICAgICB0LmVsZW1lbnQuY3NzKHQuc3R5bGUpO1xuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgcG9zaXRpb25zIG9mIHRpbGVzLlxuICAgKlxuICAgKiBUaGUgYWxnb3JpdGhtIHdvcmtzIGFzIGZvbGxvd3M6XG4gICAqICAgIEFuIEFycmF5PE51bWJlcj4gd2l0aCBsZW5ndGggY29sQ291bnQgKHNwYWNlVHJhY2tlcikga2VlcHMgdHJhY2sgb2ZcbiAgICogICAgYXZhaWxhYmxlIHRpbGluZyBwb3NpdGlvbnMsIHdoZXJlIGVsZW1lbnRzIG9mIHZhbHVlIDAgcmVwcmVzZW50cyBhblxuICAgKiAgICBlbXB0eSBwb3NpdGlvbi4gU3BhY2UgZm9yIGEgdGlsZSBpcyByZXNlcnZlZCBieSBmaW5kaW5nIGEgc2VxdWVuY2Ugb2ZcbiAgICogICAgMHMgd2l0aCBsZW5ndGggPD0gdGhhbiB0aGUgdGlsZSdzIGNvbHNwYW4uIFdoZW4gc3VjaCBhIHNwYWNlIGhhcyBiZWVuXG4gICAqICAgIGZvdW5kLCB0aGUgb2NjdXBpZWQgdGlsZSBwb3NpdGlvbnMgYXJlIGluY3JlbWVudGVkIGJ5IHRoZSB0aWxlJ3NcbiAgICogICAgcm93c3BhbiB2YWx1ZSwgYXMgdGhlc2UgcG9zaXRpb25zIGhhdmUgYmVjb21lIHVuYXZhaWxhYmxlIGZvciB0aGF0XG4gICAqICAgIG1hbnkgcm93cy5cbiAgICpcbiAgICogICAgSWYgdGhlIGVuZCBvZiBhIHJvdyBoYXMgYmVlbiByZWFjaGVkIHdpdGhvdXQgZmluZGluZyBzcGFjZSBmb3IgdGhlXG4gICAqICAgIHRpbGUsIHNwYWNlVHJhY2tlcidzIGVsZW1lbnRzIGFyZSBlYWNoIGRlY3JlbWVudGVkIGJ5IDEgdG8gYSBtaW5pbXVtXG4gICAqICAgIG9mIDAuIFJvd3MgYXJlIHNlYXJjaGVkIGluIHRoaXMgZmFzaGlvbiB1bnRpbCBzcGFjZSBpcyBmb3VuZC5cbiAgICovXG4gIGZ1bmN0aW9uIGNhbGN1bGF0ZUdyaWRGb3IoY29sQ291bnQsIHRpbGVTcGFucykge1xuICAgIHZhciBjdXJDb2wgPSAwLFxuICAgICAgICBjdXJSb3cgPSAwLFxuICAgICAgICBzcGFjZVRyYWNrZXIgPSBuZXdTcGFjZVRyYWNrZXIoKTtcblxuICAgIHJldHVybiB7XG4gICAgICBwb3NpdGlvbmluZzogdGlsZVNwYW5zLm1hcChmdW5jdGlvbihzcGFucywgaSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNwYW5zOiBzcGFucyxcbiAgICAgICAgICBwb3NpdGlvbjogcmVzZXJ2ZVNwYWNlKHNwYW5zLCBpKVxuICAgICAgICB9O1xuICAgICAgfSksXG4gICAgICByb3dDb3VudDogY3VyUm93ICsgTWF0aC5tYXguYXBwbHkoTWF0aCwgc3BhY2VUcmFja2VyKVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZXNlcnZlU3BhY2Uoc3BhbnMsIGkpIHtcbiAgICAgIGlmIChzcGFucy5jb2wgPiBjb2xDb3VudCkge1xuICAgICAgICB0aHJvdyAnbWQtZ3JpZC1saXN0OiBUaWxlIGF0IHBvc2l0aW9uICcgKyBpICsgJyBoYXMgYSBjb2xzcGFuICcgK1xuICAgICAgICAgICAgJygnICsgc3BhbnMuY29sICsgJykgdGhhdCBleGNlZWRzIHRoZSBjb2x1bW4gY291bnQgJyArXG4gICAgICAgICAgICAnKCcgKyBjb2xDb3VudCArICcpJztcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXJ0ID0gMCxcbiAgICAgICAgICBlbmQgPSAwO1xuXG4gICAgICAvLyBUT0RPKHNoeW5kbWFuKTogVGhpcyBsb29wIGlzbid0IHN0cmljdGx5IG5lY2Vzc2FyeSBpZiB5b3UgY2FuXG4gICAgICAvLyBkZXRlcm1pbmUgdGhlIG1pbmltdW0gbnVtYmVyIG9mIHJvd3MgYmVmb3JlIGEgc3BhY2Ugb3BlbnMgdXAuIFRvIGRvXG4gICAgICAvLyB0aGlzLCByZWNvZ25pemUgdGhhdCB5b3UndmUgaXRlcmF0ZWQgYWNyb3NzIGFuIGVudGlyZSByb3cgbG9va2luZyBmb3JcbiAgICAgIC8vIHNwYWNlLCBhbmQgaWYgc28gZmFzdC1mb3J3YXJkIGJ5IHRoZSBtaW5pbXVtIHJvd1NwYW4gY291bnQuIFJlcGVhdFxuICAgICAgLy8gdW50aWwgdGhlIHJlcXVpcmVkIHNwYWNlIG9wZW5zIHVwLlxuICAgICAgd2hpbGUgKGVuZCAtIHN0YXJ0IDwgc3BhbnMuY29sKSB7XG4gICAgICAgIGlmIChjdXJDb2wgPj0gY29sQ291bnQpIHtcbiAgICAgICAgICBuZXh0Um93KCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydCA9IHNwYWNlVHJhY2tlci5pbmRleE9mKDAsIGN1ckNvbCk7XG4gICAgICAgIGlmIChzdGFydCA9PT0gLTEgfHwgKGVuZCA9IGZpbmRFbmQoc3RhcnQgKyAxKSkgPT09IC0xKSB7XG4gICAgICAgICAgc3RhcnQgPSBlbmQgPSAwO1xuICAgICAgICAgIG5leHRSb3coKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1ckNvbCA9IGVuZCArIDE7XG4gICAgICB9XG5cbiAgICAgIGFkanVzdFJvdyhzdGFydCwgc3BhbnMuY29sLCBzcGFucy5yb3cpO1xuICAgICAgY3VyQ29sID0gc3RhcnQgKyBzcGFucy5jb2w7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbDogc3RhcnQsXG4gICAgICAgIHJvdzogY3VyUm93XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5leHRSb3coKSB7XG4gICAgICBjdXJDb2wgPSAwO1xuICAgICAgY3VyUm93Kys7XG4gICAgICBhZGp1c3RSb3coMCwgY29sQ291bnQsIC0xKTsgLy8gRGVjcmVtZW50IHJvdyBzcGFucyBieSBvbmVcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGp1c3RSb3coZnJvbSwgY29scywgYnkpIHtcbiAgICAgIGZvciAodmFyIGkgPSBmcm9tOyBpIDwgZnJvbSArIGNvbHM7IGkrKykge1xuICAgICAgICBzcGFjZVRyYWNrZXJbaV0gPSBNYXRoLm1heChzcGFjZVRyYWNrZXJbaV0gKyBieSwgMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmluZEVuZChzdGFydCkge1xuICAgICAgdmFyIGk7XG4gICAgICBmb3IgKGkgPSBzdGFydDsgaSA8IHNwYWNlVHJhY2tlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoc3BhY2VUcmFja2VyW2ldICE9PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGkgPT09IHNwYWNlVHJhY2tlci5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV3U3BhY2VUcmFja2VyKCkge1xuICAgICAgdmFyIHRyYWNrZXIgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sQ291bnQ7IGkrKykge1xuICAgICAgICB0cmFja2VyLnB1c2goMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJhY2tlcjtcbiAgICB9XG4gIH1cbn1cbkdyaWRMYXlvdXRGYWN0b3J5LiRpbmplY3QgPSBbXCIkbWRVdGlsXCJdO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG1kR3JpZFRpbGVcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5ncmlkTGlzdFxuICogQHJlc3RyaWN0IEVcbiAqIEBkZXNjcmlwdGlvblxuICogVGlsZXMgY29udGFpbiB0aGUgY29udGVudCBvZiBhbiBgbWQtZ3JpZC1saXN0YC4gVGhleSBzcGFuIG9uZSBvciBtb3JlIGdyaWRcbiAqIGNlbGxzIHZlcnRpY2FsbHkgb3IgaG9yaXpvbnRhbGx5LCBhbmQgdXNlIGBtZC1ncmlkLXRpbGUte2Zvb3RlcixoZWFkZXJ9YCB0b1xuICogZGlzcGxheSBzZWNvbmRhcnkgY29udGVudC5cbiAqXG4gKiAjIyMgUmVzcG9uc2l2ZSBBdHRyaWJ1dGVzXG4gKlxuICogVGhlIGBtZC1ncmlkLXRpbGVgIGRpcmVjdGl2ZSBzdXBwb3J0cyBcInJlc3BvbnNpdmVcIiBhdHRyaWJ1dGVzLCB3aGljaCBhbGxvd1xuICogZGlmZmVyZW50IGBtZC1yb3dzcGFuYCBhbmQgYG1kLWNvbHNwYW5gIHZhbHVlcyBkZXBlbmRpbmcgb24gdGhlIGN1cnJlbnRseVxuICogbWF0Y2hpbmcgbWVkaWEgcXVlcnkgKGFzIGRlZmluZWQgaW4gYCRtZENvbnN0YW50Lk1FRElBYCkuXG4gKlxuICogSW4gb3JkZXIgdG8gc2V0IGEgcmVzcG9uc2l2ZSBhdHRyaWJ1dGUsIGZpcnN0IGRlZmluZSB0aGUgZmFsbGJhY2sgdmFsdWUgd2l0aFxuICogdGhlIHN0YW5kYXJkIGF0dHJpYnV0ZSBuYW1lLCB0aGVuIGFkZCBhZGRpdGlvbmFsIGF0dHJpYnV0ZXMgd2l0aCB0aGVcbiAqIGZvbGxvd2luZyBjb252ZW50aW9uOiBge2Jhc2UtYXR0cmlidXRlLW5hbWV9LXttZWRpYS1xdWVyeS1uYW1lfT1cInt2YWx1ZX1cImBcbiAqIChpZS4gYG1kLWNvbHNwYW4tc209XCI0XCJgKVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyPX0gbWQtY29sc3BhbiBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgdG8gc3BhbiAoZGVmYXVsdCAxKS4gQ2Fubm90XG4gKiAgICBleGNlZWQgdGhlIG51bWJlciBvZiBjb2x1bW5zIGluIHRoZSBncmlkLiBTdXBwb3J0cyBpbnRlcnBvbGF0aW9uLlxuICogQHBhcmFtIHtudW1iZXI9fSBtZC1yb3dzcGFuIFRoZSBudW1iZXIgb2Ygcm93cyB0byBzcGFuIChkZWZhdWx0IDEpLiBTdXBwb3J0c1xuICogICAgIGludGVycG9sYXRpb24uXG4gKlxuICogQHVzYWdlXG4gKiBXaXRoIGhlYWRlcjpcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8bWQtZ3JpZC10aWxlPlxuICogICA8bWQtZ3JpZC10aWxlLWhlYWRlcj5cbiAqICAgICA8aDM+VGhpcyBpcyBhIGhlYWRlcjwvaDM+XG4gKiAgIDwvbWQtZ3JpZC10aWxlLWhlYWRlcj5cbiAqIDwvbWQtZ3JpZC10aWxlPlxuICogPC9obGpzPlxuICpcbiAqIFdpdGggZm9vdGVyOlxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC1ncmlkLXRpbGU+XG4gKiAgIDxtZC1ncmlkLXRpbGUtZm9vdGVyPlxuICogICAgIDxoMz5UaGlzIGlzIGEgZm9vdGVyPC9oMz5cbiAqICAgPC9tZC1ncmlkLXRpbGUtZm9vdGVyPlxuICogPC9tZC1ncmlkLXRpbGU+XG4gKiA8L2hsanM+XG4gKlxuICogU3Bhbm5pbmcgbXVsdGlwbGUgcm93cy9jb2x1bW5zOlxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC1ncmlkLXRpbGUgbWQtY29sc3Bhbj1cIjJcIiBtZC1yb3dzcGFuPVwiM1wiPlxuICogPC9tZC1ncmlkLXRpbGU+XG4gKiA8L2hsanM+XG4gKlxuICogUmVzcG9uc2l2ZSBhdHRyaWJ1dGVzOlxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC1ncmlkLXRpbGUgbWQtY29sc3Bhbj1cIjFcIiBtZC1jb2xzcGFuLXNtPVwiM1wiIG1kLWNvbHNwYW4tbWQ9XCI1XCI+XG4gKiA8L21kLWdyaWQtdGlsZT5cbiAqIDwvaGxqcz5cbiAqL1xuZnVuY3Rpb24gR3JpZFRpbGVEaXJlY3RpdmUoJG1kTWVkaWEpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6ICdebWRHcmlkTGlzdCcsXG4gICAgdGVtcGxhdGU6ICc8ZmlndXJlIG5nLXRyYW5zY2x1ZGU+PC9maWd1cmU+JyxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHNjb3BlOiB7fSxcbiAgICAvLyBTaW1wbGUgY29udHJvbGxlciB0aGF0IGV4cG9zZXMgYXR0cmlidXRlcyB0byB0aGUgZ3JpZCBkaXJlY3RpdmVcbiAgICBjb250cm9sbGVyOiBbXCIkYXR0cnNcIiwgZnVuY3Rpb24oJGF0dHJzKSB7XG4gICAgICB0aGlzLiRhdHRycyA9ICRhdHRycztcbiAgICB9XSxcbiAgICBsaW5rOiBwb3N0TGlua1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgZ3JpZEN0cmwpIHtcbiAgICAvLyBBcHBseSBzZW1hbnRpY3NcbiAgICBlbGVtZW50LmF0dHIoJ3JvbGUnLCAnbGlzdGl0ZW0nKTtcblxuICAgIC8vIElmIG91ciBjb2xzcGFuIG9yIHJvd3NwYW4gY2hhbmdlcywgdHJpZ2dlciBhIGxheW91dFxuICAgIHZhciB1bndhdGNoQXR0cnMgPSAkbWRNZWRpYS53YXRjaFJlc3BvbnNpdmVBdHRyaWJ1dGVzKFsnbWQtY29sc3BhbicsICdtZC1yb3dzcGFuJ10sXG4gICAgICAgIGF0dHJzLCBhbmd1bGFyLmJpbmQoZ3JpZEN0cmwsIGdyaWRDdHJsLmludmFsaWRhdGVMYXlvdXQpKTtcblxuICAgIC8vIFRpbGUgcmVnaXN0cmF0aW9uL2RlcmVnaXN0cmF0aW9uXG4gICAgZ3JpZEN0cmwuaW52YWxpZGF0ZVRpbGVzKCk7XG4gICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgdW53YXRjaEF0dHJzKCk7XG4gICAgICBncmlkQ3RybC5pbnZhbGlkYXRlTGF5b3V0KCk7XG4gICAgfSk7XG5cbiAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoc2NvcGUuJHBhcmVudC4kaW5kZXgpKSB7XG4gICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24oKSB7IHJldHVybiBzY29wZS4kcGFyZW50LiRpbmRleDsgfSxcbiAgICAgICAgZnVuY3Rpb24gaW5kZXhDaGFuZ2VkKG5ld0lkeCwgb2xkSWR4KSB7XG4gICAgICAgICAgaWYgKG5ld0lkeCA9PT0gb2xkSWR4KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGdyaWRDdHJsLmludmFsaWRhdGVUaWxlcygpO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbkdyaWRUaWxlRGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkbWRNZWRpYVwiXTtcblxuXG5mdW5jdGlvbiBHcmlkVGlsZUNhcHRpb25EaXJlY3RpdmUoKSB7XG4gIHJldHVybiB7XG4gICAgdGVtcGxhdGU6ICc8ZmlnY2FwdGlvbiBuZy10cmFuc2NsdWRlPjwvZmlnY2FwdGlvbj4nLFxuICAgIHRyYW5zY2x1ZGU6IHRydWVcbiAgfTtcbn1cblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLmZhYlRyaWdnZXInLCBbICdtYXRlcmlhbC5jb3JlJyBdKVxuICAgIC5kaXJlY3RpdmUoJ21kRmFiVHJpZ2dlcicsIE1kRmFiVHJpZ2dlckRpcmVjdGl2ZSk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAgICogQG5hbWUgbWRGYWJUcmlnZ2VyXG4gICAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5mYWJTcGVlZERpYWxcbiAgICpcbiAgICogQHJlc3RyaWN0IEVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoZSBgPG1kLWZhYi10cmlnZ2VyPmAgZGlyZWN0aXZlIGlzIHVzZWQgaW5zaWRlIG9mIGEgYDxtZC1mYWItc3BlZWQtZGlhbD5gIG9yXG4gICAqIGA8bWQtZmFiLXRvb2xiYXI+YCBkaXJlY3RpdmUgdG8gbWFyayB0aGUgYW4gZWxlbWVudCAob3IgZWxlbWVudHMpIGFzIHRoZSB0cmlnZ2VyIGFuZCBzZXR1cCB0aGVcbiAgICogcHJvcGVyIGV2ZW50IGxpc3RlbmVycy5cbiAgICpcbiAgICogQHVzYWdlXG4gICAqIFNlZSB0aGUgYDxtZC1mYWItc3BlZWQtZGlhbD5gIG9yIGA8bWQtZmFiLXRvb2xiYXI+YCBkaXJlY3RpdmVzIGZvciBleGFtcGxlIHVzYWdlLlxuICAgKi9cbiAgZnVuY3Rpb24gTWRGYWJUcmlnZ2VyRGlyZWN0aXZlKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0UnLFxuXG4gICAgICByZXF1aXJlOiBbJ14/bWRGYWJTcGVlZERpYWwnLCAnXj9tZEZhYlRvb2xiYXInXSxcblxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMsIGNvbnRyb2xsZXJzKSB7XG4gICAgICAgIC8vIEdyYWIgd2hpY2hldmVyIHBhcmVudCBjb250cm9sbGVyIGlzIHVzZWRcbiAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1swXSB8fCBjb250cm9sbGVyc1sxXTtcblxuICAgICAgICAvLyBNYWtlIHRoZSBjaGlsZHJlbiBvcGVuL2Nsb3NlIHRoZWlyIHBhcmVudCBkaXJlY3RpdmVcbiAgICAgICAgaWYgKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZWxlbWVudC5jaGlsZHJlbigpLCBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KGNoaWxkKS5vbignZm9jdXMnLCBjb250cm9sbGVyLm9wZW4pO1xuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KGNoaWxkKS5vbignYmx1cicsIGNvbnRyb2xsZXIuY2xvc2UpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59KSgpO1xuXG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG1hdGVyaWFsLmNvbXBvbmVudHMuaWNvblxuICogQGRlc2NyaXB0aW9uXG4gKiBJY29uXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLmljb24nLCBbXG4gICAgJ21hdGVyaWFsLmNvcmUnXG4gIF0pXG4gIC5kaXJlY3RpdmUoJ21kSWNvbicsIG1kSWNvbkRpcmVjdGl2ZSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbWRJY29uXG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMuaWNvblxuICpcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYDxtZC1pY29uPmAgZGlyZWN0aXZlIGlzIGFuIG1hcmt1cCBlbGVtZW50IHVzZWZ1bCBmb3Igc2hvd2luZyBhbiBpY29uIGJhc2VkIG9uIGEgZm9udC1pY29uXG4gKiBvciBhIFNWRy4gSWNvbnMgYXJlIHZpZXctb25seSBlbGVtZW50cyB0aGF0IHNob3VsZCBub3QgYmUgdXNlZCBkaXJlY3RseSBhcyBidXR0b25zOyBpbnN0ZWFkIG5lc3QgYSBgPG1kLWljb24+YFxuICogaW5zaWRlIGEgYG1kLWJ1dHRvbmAgdG8gYWRkIGhvdmVyIGFuZCBjbGljayBmZWF0dXJlcy5cbiAqXG4gKiBXaGVuIHVzaW5nIFNWR3MsIGJvdGggZXh0ZXJuYWwgU1ZHcyAodmlhIFVSTHMpIG9yIHNldHMgb2YgU1ZHcyBbZnJvbSBpY29uIHNldHNdIGNhbiBiZVxuICogZWFzaWx5IGxvYWRlZCBhbmQgdXNlZC5XaGVuIHVzZSBmb250LWljb25zLCBkZXZlbG9wZXJzIG11c3QgZm9sbG93aW5nIHRocmVlICgzKSBzaW1wbGUgc3RlcHM6XG4gKlxuICogPG9sPlxuICogPGxpPkxvYWQgdGhlIGZvbnQgbGlicmFyeS4gZS5nLjxici8+XG4gKiAgICAmbHQ7bGluayBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9pY29uP2ZhbWlseT1NYXRlcmlhbCtJY29uc1wiXG4gKiAgICByZWw9XCJzdHlsZXNoZWV0XCImZ3Q7XG4gKiA8L2xpPlxuICogPGxpPiBVc2UgZWl0aGVyIChhKSBmb250LWljb24gY2xhc3MgbmFtZXMgb3IgKGIpIGZvbnQgbGlnYXR1cmVzIHRvIHJlbmRlciB0aGUgZm9udCBnbHlwaCBieSB1c2luZyBpdHMgdGV4dHVhbCBuYW1lPC9saT5cbiAqIDxsaT4gVXNlICZsdDttZC1pY29uIG1kLWZvbnQtaWNvbj1cImNsYXNzbmFtZVwiIC8mZ3Q7IG9yIDxici8+XG4gKiAgICAgdXNlICZsdDttZC1pY29uIG1kLWZvbnQtc2V0PVwiZm9udCBsaWJyYXJ5IGNsYXNzbmFtZSBvciBhbGlhc1wiJmd0OyB0ZXh0dWFsX25hbWUgJmx0Oy9tZC1pY29uJmd0OyBvciA8YnIvPlxuICogICAgIHVzZSAmbHQ7bWQtaWNvbiBtZC1mb250LXNldD1cImZvbnQgbGlicmFyeSBjbGFzc25hbWUgb3IgYWxpYXNcIiZndDsgbnVtZXJpY2FsX2NoYXJhY3Rlcl9yZWZlcmVuY2UgJmx0Oy9tZC1pY29uJmd0O1xuICogPC9saT5cbiAqIDwvb2w+XG4gKlxuICogRnVsbCBkZXRhaWxzIGZvciB0aGVzZSBzdGVwcyBjYW4gYmUgZm91bmQ6XG4gKlxuICogPHVsPlxuICogPGxpPmh0dHA6Ly9nb29nbGUuZ2l0aHViLmlvL21hdGVyaWFsLWRlc2lnbi1pY29ucy88L2xpPlxuICogPGxpPmh0dHA6Ly9nb29nbGUuZ2l0aHViLmlvL21hdGVyaWFsLWRlc2lnbi1pY29ucy8jaWNvbi1mb250LWZvci10aGUtd2ViPC9saT5cbiAqIDwvdWw+XG4gKlxuICogVGhlIE1hdGVyaWFsIERlc2lnbiBpY29uIHN0eWxlIDxjb2RlPi5tYXRlcmlhbC1pY29uczwvY29kZT4gYW5kIHRoZSBpY29uIGZvbnQgcmVmZXJlbmNlcyBhcmUgcHVibGlzaGVkIGluXG4gKiBNYXRlcmlhbCBEZXNpZ24gSWNvbnM6XG4gKlxuICogPHVsPlxuICogPGxpPmh0dHA6Ly93d3cuZ29vZ2xlLmNvbS9kZXNpZ24vaWNvbnMvPC9saT5cbiAqIDxsaT5odHRwczovL3d3dy5nb29nbGUuY29tL2Rlc2lnbi9pY29ucy8jaWNfYWNjZXNzaWJpbGl0eTwvbGk+XG4gKiA8L3VsPlxuICpcbiAqIDxoMiBpZD1cIm1hdGVyaWFsX2Rlc2lnbl9pY29uc1wiPk1hdGVyaWFsIERlc2lnbiBJY29uczwvaDI+XG4gKiBVc2luZyB0aGUgTWF0ZXJpYWwgRGVzaWduIEljb24tU2VsZWN0b3IsIGRldmVsb3BlcnMgY2FuIGVhc2lseSBhbmQgcXVpY2tseSBzZWFyY2ggZm9yIGEgTWF0ZXJpYWwgRGVzaWduIGZvbnQtaWNvbiBhbmRcbiAqIGRldGVybWluZSBpdHMgdGV4dHVhbCBuYW1lIGFuZCBjaGFyYWN0ZXIgcmVmZXJlbmNlIGNvZGUuIENsaWNrIG9uIGFueSBpY29uIHRvIHNlZSB0aGUgc2xpZGUtdXAgaW5mb3JtYXRpb25cbiAqIHBhbmVsIHdpdGggZGV0YWlscyByZWdhcmRpbmcgYSBTVkcgZG93bmxvYWQgb3IgaW5mb3JtYXRpb24gb24gdGhlIGZvbnQtaWNvbiB1c2FnZS5cbiAqXG4gKiA8YSBocmVmPVwiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9kZXNpZ24vaWNvbnMvI2ljX2FjY2Vzc2liaWxpdHlcIiB0YXJnZXQ9XCJfYmxhbmtcIiBzdHlsZT1cImJvcmRlci1ib3R0b206bm9uZTtcIj5cbiAqIDxpbWcgc3JjPVwiaHR0cHM6Ly9jbG91ZC5naXRodWJ1c2VyY29udGVudC5jb20vYXNzZXRzLzIxMDQxMy83OTAyNDkwL2ZlOGRkMTRjLTA3ODAtMTFlNS05OGZiLWM4MjFjYzY0NzVlNi5wbmdcIlxuICogICAgICBhcmlhLWxhYmVsPVwiTWF0ZXJpYWwgRGVzaWduIEljb24tU2VsZWN0b3JcIiBzdHlsZT1cIm1heC13aWR0aDo3NSU7cGFkZGluZy1sZWZ0OjEwJVwiPlxuICogPC9hPlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW1hZ2VfY2FwdGlvblwiPlxuICogIENsaWNrIG9uIHRoZSBpbWFnZSBhYm92ZSB0byBsaW5rIHRvIHRoZVxuICogIDxhIGhyZWY9XCJodHRwczovL3d3dy5nb29nbGUuY29tL2Rlc2lnbi9pY29ucy8jaWNfYWNjZXNzaWJpbGl0eVwiIHRhcmdldD1cIl9ibGFua1wiPk1hdGVyaWFsIERlc2lnbiBJY29uLVNlbGVjdG9yPC9hPi5cbiAqIDwvc3Bhbj5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWQtZm9udC1pY29uIE5hbWUgb2YgQ1NTIGljb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBmb250LWZhY2Ugd2lsbCBiZSB1c2VkXG4gKiB0byByZW5kZXIgdGhlIGljb24uIFJlcXVpcmVzIHRoZSBmb250cyBhbmQgdGhlIG5hbWVkIENTUyBzdHlsZXMgdG8gYmUgcHJlbG9hZGVkLlxuICogQHBhcmFtIHtzdHJpbmd9IG1kLWZvbnQtc2V0IENTUyBzdHlsZSBuYW1lIGFzc29jaWF0ZWQgd2l0aCB0aGUgZm9udCBsaWJyYXJ5OyB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIGFzXG4gKiB0aGUgY2xhc3MgZm9yIHRoZSBmb250LWljb24gbGlnYXR1cmUuIFRoaXMgdmFsdWUgbWF5IGFsc28gYmUgYW4gYWxpYXMgdGhhdCBpcyB1c2VkIHRvIGxvb2t1cCB0aGUgY2xhc3NuYW1lO1xuICogaW50ZXJuYWxseSB1c2UgYCRtZEljb25Qcm92aWRlci5mb250U2V0KDxhbGlhcz4pYCB0byBkZXRlcm1pbmUgdGhlIHN0eWxlIG5hbWUuXG4gKiBAcGFyYW0ge3N0cmluZ30gbWQtc3ZnLXNyYyBVUkwgW29yIGV4cHJlc3Npb24gXSB1c2VkIHRvIGxvYWQsIGNhY2hlLCBhbmQgZGlzcGxheSBhbiBleHRlcm5hbCBTVkcuXG4gKiBAcGFyYW0ge3N0cmluZ30gbWQtc3ZnLWljb24gTmFtZSB1c2VkIGZvciBsb29rdXAgb2YgdGhlIGljb24gZnJvbSB0aGUgaW50ZXJuYWwgY2FjaGU7IGludGVycG9sYXRlZCBzdHJpbmdzIG9yXG4gKiBleHByZXNzaW9ucyBtYXkgYWxzbyBiZSB1c2VkLiBTcGVjaWZpYyBzZXQgbmFtZXMgY2FuIGJlIHVzZWQgd2l0aCB0aGUgc3ludGF4IGA8c2V0IG5hbWU+OjxpY29uIG5hbWU+YC48YnIvPjxici8+XG4gKiBUbyB1c2UgaWNvbiBzZXRzLCBkZXZlbG9wZXJzIGFyZSByZXF1aXJlZCB0byBwcmUtcmVnaXN0ZXIgdGhlIHNldHMgdXNpbmcgdGhlIGAkbWRJY29uUHJvdmlkZXJgIHNlcnZpY2UuXG4gKiBAcGFyYW0ge3N0cmluZz19IGFyaWEtbGFiZWwgTGFiZWxzIGljb24gZm9yIGFjY2Vzc2liaWxpdHkuIElmIGFuIGVtcHR5IHN0cmluZyBpcyBwcm92aWRlZCwgaWNvblxuICogd2lsbCBiZSBoaWRkZW4gZnJvbSBhY2Nlc3NpYmlsaXR5IGxheWVyIHdpdGggYGFyaWEtaGlkZGVuPVwidHJ1ZVwiYC4gSWYgdGhlcmUncyBubyBhcmlhLWxhYmVsIG9uIHRoZSBpY29uXG4gKiBub3IgYSBsYWJlbCBvbiB0aGUgcGFyZW50IGVsZW1lbnQsIGEgd2FybmluZyB3aWxsIGJlIGxvZ2dlZCB0byB0aGUgY29uc29sZS5cbiAqXG4gKiBAdXNhZ2VcbiAqIFdoZW4gdXNpbmcgU1ZHczpcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKlxuICogIDwhLS0gSWNvbiBJRDsgbWF5IGNvbnRhaW4gb3B0aW9uYWwgaWNvbiBzZXQgcHJlZml4OyBpY29ucyBtdXN0IHJlZ2lzdGVyZWQgdXNpbmcgJG1kSWNvblByb3ZpZGVyIC0tPlxuICogIDxtZC1pY29uIG1kLXN2Zy1pY29uPVwic29jaWFsOmFuZHJvaWRcIiAgICBhcmlhLWxhYmVsPVwiYW5kcm9pZCBcIiA+PC9tZC1pY29uPlxuICpcbiAqICA8IS0tIEljb24gdXJsczsgbWF5IGJlIHByZWxvYWRlZCBpbiB0ZW1wbGF0ZUNhY2hlIC0tPlxuICogIDxtZC1pY29uIG1kLXN2Zy1zcmM9XCIvYW5kcm9pZC5zdmdcIiAgICAgICBhcmlhLWxhYmVsPVwiYW5kcm9pZCBcIiA+PC9tZC1pY29uPlxuICogIDxtZC1pY29uIG1kLXN2Zy1zcmM9XCJ7eyBnZXRBbmRyb2lkKCkgfX1cIiBhcmlhLWxhYmVsPVwiYW5kcm9pZCBcIiA+PC9tZC1pY29uPlxuICpcbiAqIDwvaGxqcz5cbiAqXG4gKiBVc2UgdGhlIDxjb2RlPiRtZEljb25Qcm92aWRlcjwvY29kZT4gdG8gY29uZmlndXJlIHlvdXIgYXBwbGljYXRpb24gd2l0aFxuICogc3ZnIGljb25zZXRzLlxuICpcbiAqIDxobGpzIGxhbmc9XCJqc1wiPlxuICogIGFuZ3VsYXIubW9kdWxlKCdhcHBTdmdJY29uU2V0cycsIFsnbmdNYXRlcmlhbCddKVxuICogICAgLmNvbnRyb2xsZXIoJ0RlbW9DdHJsJywgZnVuY3Rpb24oJHNjb3BlKSB7fSlcbiAqICAgIC5jb25maWcoZnVuY3Rpb24oJG1kSWNvblByb3ZpZGVyKSB7XG4gKiAgICAgICRtZEljb25Qcm92aWRlclxuICogICAgICAgICAuaWNvblNldCgnc29jaWFsJywgJ2ltZy9pY29ucy9zZXRzL3NvY2lhbC1pY29ucy5zdmcnLCAyNClcbiAqICAgICAgICAgLmRlZmF1bHRJY29uU2V0KCdpbWcvaWNvbnMvc2V0cy9jb3JlLWljb25zLnN2ZycsIDI0KTtcbiAqICAgICB9KTtcbiAqIDwvaGxqcz5cbiAqXG4gKlxuICogV2hlbiB1c2luZyBGb250IEljb25zIHdpdGggY2xhc3NuYW1lczpcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKlxuICogIDxtZC1pY29uIG1kLWZvbnQtaWNvbj1cImFuZHJvaWRcIiBhcmlhLWxhYmVsPVwiYW5kcm9pZFwiID48L21kLWljb24+XG4gKiAgPG1kLWljb24gY2xhc3M9XCJpY29uX2hvbWVcIiAgICAgIGFyaWEtbGFiZWw9XCJIb21lXCIgICAgPjwvbWQtaWNvbj5cbiAqXG4gKiA8L2hsanM+XG4gKlxuICogV2hlbiB1c2luZyBNYXRlcmlhbCBGb250IEljb25zIHdpdGggbGlnYXR1cmVzOlxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqICA8IS0tIEZvciBNYXRlcmlhbCBEZXNpZ24gSWNvbnMgLS0+XG4gKiAgPCEtLSBUaGUgY2xhc3MgJy5tYXRlcmlhbC1pY29ucycgaXMgYXV0by1hZGRlZC4gLS0+XG4gKiAgPG1kLWljb24+IGZhY2UgPC9tZC1pY29uPlxuICogIDxtZC1pY29uIGNsYXNzPVwibWQtbGlnaHQgbWQtNDhcIj4gZmFjZSA8L21kLWljb24+XG4gKiAgPG1kLWljb24gbWQtZm9udC1zZXQ9XCJtYXRlcmlhbC1pY29uc1wiPiBmYWNlIDwvbWQtaWNvbj5cbiAqICA8bWQtaWNvbj4gI3hFODdDOyA8L21kLWljb24+XG4gKiA8L2hsanM+XG4gKlxuICogV2hlbiB1c2luZyBvdGhlciBGb250LUljb24gbGlicmFyaWVzOlxuICpcbiAqIDxobGpzIGxhbmc9XCJqc1wiPlxuICogIC8vIFNwZWNpZnkgYSBmb250LWljb24gc3R5bGUgYWxpYXNcbiAqICBhbmd1bGFyLmNvbmZpZyhmdW5jdGlvbigkbWRJY29uUHJvdmlkZXIpIHtcbiAqICAgICRtZEljb25Qcm92aWRlci5mb250U2V0KCdmYScsICdmb250YXdlc29tZScpO1xuICogIH0pO1xuICogPC9obGpzPlxuICpcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiAgPG1kLWljb24gbWQtZm9udC1zZXQ9XCJmYVwiPmVtYWlsPC9tZC1pY29uPlxuICogPC9obGpzPlxuICpcbiAqL1xuZnVuY3Rpb24gbWRJY29uRGlyZWN0aXZlKCRtZEljb24sICRtZFRoZW1pbmcsICRtZEFyaWEsICRpbnRlcnBvbGF0ZSApIHtcblxuICByZXR1cm4ge1xuICAgIHNjb3BlOiB7XG4gICAgICBmb250U2V0IDogJ0BtZEZvbnRTZXQnLFxuICAgICAgZm9udEljb246ICdAbWRGb250SWNvbicsXG4gICAgICBzdmdJY29uIDogJ0BtZFN2Z0ljb24nLFxuICAgICAgc3ZnU3JjICA6ICdAbWRTdmdTcmMnXG4gICAgfSxcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIGxpbmsgOiBwb3N0TGlua1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIERpcmVjdGl2ZSBwb3N0TGlua1xuICAgKiBTdXBwb3J0cyBlbWJlZGRlZCBTVkdzLCBmb250LWljb25zLCAmIGV4dGVybmFsIFNWR3NcbiAgICovXG4gIGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgJG1kVGhlbWluZyhlbGVtZW50KTtcblxuICAgIHByZXBhcmVGb3JGb250SWNvbigpO1xuXG4gICAgLy8gSWYgdXNpbmcgYSBmb250LWljb24sIHRoZW4gdGhlIHRleHR1YWwgbmFtZSBvZiB0aGUgaWNvbiBpdHNlbGZcbiAgICAvLyBwcm92aWRlcyB0aGUgYXJpYS1sYWJlbC5cblxuICAgIHZhciBsYWJlbCA9IGF0dHIuYWx0IHx8IHNjb3BlLmZvbnRJY29uIHx8IHNjb3BlLnN2Z0ljb24gfHwgZWxlbWVudC50ZXh0KCk7XG4gICAgdmFyIGF0dHJOYW1lID0gYXR0ci4kbm9ybWFsaXplKGF0dHIuJGF0dHIubWRTdmdJY29uIHx8IGF0dHIuJGF0dHIubWRTdmdTcmMgfHwgJycpO1xuXG4gICAgaWYgKCAhYXR0clsnYXJpYS1sYWJlbCddICkge1xuXG4gICAgICBpZiAobGFiZWwgIT0gJycgJiYgIXBhcmVudHNIYXZlVGV4dCgpICkge1xuXG4gICAgICAgICRtZEFyaWEuZXhwZWN0KGVsZW1lbnQsICdhcmlhLWxhYmVsJywgbGFiZWwpO1xuICAgICAgICAkbWRBcmlhLmV4cGVjdChlbGVtZW50LCAncm9sZScsICdpbWcnKTtcblxuICAgICAgfSBlbHNlIGlmICggIWVsZW1lbnQudGV4dCgpICkge1xuICAgICAgICAvLyBJZiBub3QgYSBmb250LWljb24gd2l0aCBsaWdhdHVyZSwgdGhlblxuICAgICAgICAvLyBoaWRlIGZyb20gdGhlIGFjY2Vzc2liaWxpdHkgbGF5ZXIuXG5cbiAgICAgICAgJG1kQXJpYS5leHBlY3QoZWxlbWVudCwgJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYXR0ck5hbWUpIHtcbiAgICAgIC8vIFVzZSBlaXRoZXIgcHJlLWNvbmZpZ3VyZWQgU1ZHIG9yIFVSTCBzb3VyY2UsIHJlc3BlY3RpdmVseS5cbiAgICAgIGF0dHIuJG9ic2VydmUoYXR0ck5hbWUsIGZ1bmN0aW9uKGF0dHJWYWwpIHtcblxuICAgICAgICBlbGVtZW50LmVtcHR5KCk7XG4gICAgICAgIGlmIChhdHRyVmFsKSB7XG4gICAgICAgICAgJG1kSWNvbihhdHRyVmFsKS50aGVuKGZ1bmN0aW9uKHN2Zykge1xuICAgICAgICAgICAgZWxlbWVudC5hcHBlbmQoc3ZnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJlbnRzSGF2ZVRleHQoKSB7XG4gICAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnQoKTtcbiAgICAgIGlmIChwYXJlbnQuYXR0cignYXJpYS1sYWJlbCcpIHx8IHBhcmVudC50ZXh0KCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBlbHNlIGlmKHBhcmVudC5wYXJlbnQoKS5hdHRyKCdhcmlhLWxhYmVsJykgfHwgcGFyZW50LnBhcmVudCgpLnRleHQoKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlRm9yRm9udEljb24gKCkge1xuICAgICAgaWYgKCFzY29wZS5zdmdJY29uICYmICFzY29wZS5zdmdTcmMpIHtcbiAgICAgICAgaWYgKHNjb3BlLmZvbnRJY29uKSB7XG4gICAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnbWQtZm9udCcpO1xuICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3Moc2NvcGUuZm9udEljb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJG1kSWNvbi5mb250U2V0KHNjb3BlLmZvbnRTZXQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfVxuICB9XG59XG5tZEljb25EaXJlY3RpdmUuJGluamVjdCA9IFtcIiRtZEljb25cIiwgXCIkbWRUaGVtaW5nXCIsIFwiJG1kQXJpYVwiLCBcIiRpbnRlcnBvbGF0ZVwiXTtcblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMuaWNvbicgKVxuICAgIC5wcm92aWRlcignJG1kSWNvbicsIE1kSWNvblByb3ZpZGVyKTtcblxuICAvKipcbiAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgKiBAbmFtZSAkbWRJY29uUHJvdmlkZXJcbiAgICAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5pY29uXG4gICAgKlxuICAgICogQGRlc2NyaXB0aW9uXG4gICAgKiBgJG1kSWNvblByb3ZpZGVyYCBpcyB1c2VkIG9ubHkgdG8gcmVnaXN0ZXIgaWNvbiBJRHMgd2l0aCBVUkxzLiBUaGVzZSBjb25maWd1cmF0aW9uIGZlYXR1cmVzIGFsbG93XG4gICAgKiBpY29ucyBhbmQgaWNvbiBzZXRzIHRvIGJlIHByZS1yZWdpc3RlcmVkIGFuZCBhc3NvY2lhdGVkIHdpdGggc291cmNlIFVSTHMgKipiZWZvcmUqKiB0aGUgYDxtZC1pY29uIC8+YFxuICAgICogZGlyZWN0aXZlcyBhcmUgY29tcGlsZWQuXG4gICAgKlxuICAgICogSWYgdXNpbmcgZm9udC1pY29ucywgdGhlIGRldmVsb3BlciBpcyByZXBzb25zaWJsZSBmb3IgbG9hZGluZyB0aGUgZm9udHMuXG4gICAgKlxuICAgICogSWYgdXNpbmcgU1ZHcywgbG9hZGluZyBvZiB0aGUgYWN0dWFsIHN2ZyBmaWxlcyBhcmUgZGVmZXJyZWQgdG8gb24tZGVtYW5kIHJlcXVlc3RzIGFuZCBhcmUgbG9hZGVkXG4gICAgKiBpbnRlcm5hbGx5IGJ5IHRoZSBgJG1kSWNvbmAgc2VydmljZSB1c2luZyB0aGUgYCRodHRwYCBzZXJ2aWNlLiBXaGVuIGFuIFNWRyBpcyByZXF1ZXN0ZWQgYnkgbmFtZS9JRCxcbiAgICAqIHRoZSBgJG1kSWNvbmAgc2VydmljZSBzZWFyY2hlcyBpdHMgcmVnaXN0cnkgZm9yIHRoZSBhc3NvY2lhdGVkIHNvdXJjZSBVUkw7XG4gICAgKiB0aGF0IFVSTCBpcyB1c2VkIHRvIG9uLWRlbWFuZCBsb2FkIGFuZCBwYXJzZSB0aGUgU1ZHIGR5bmFtaWNhbGx5LlxuICAgICpcbiAgICAqIEB1c2FnZVxuICAgICogPGhsanMgbGFuZz1cImpzXCI+XG4gICAgKiAgIGFwcC5jb25maWcoZnVuY3Rpb24oJG1kSWNvblByb3ZpZGVyKSB7XG4gICAgKlxuICAgICogICAgIC8vIENvbmZpZ3VyZSBVUkxzIGZvciBpY29ucyBzcGVjaWZpZWQgYnkgW3NldDpdaWQuXG4gICAgKlxuICAgICogICAgICRtZEljb25Qcm92aWRlclxuICAgICogICAgICAgICAgLmRlZmF1bHRGb250U2V0KCAnZm9udGF3ZXNvbWUnIClcbiAgICAqICAgICAgICAgIC5kZWZhdWx0SWNvblNldCgnbXkvYXBwL2ljb25zLnN2ZycpICAgICAgIC8vIFJlZ2lzdGVyIGEgZGVmYXVsdCBzZXQgb2YgU1ZHIGljb25zXG4gICAgKiAgICAgICAgICAuaWNvblNldCgnc29jaWFsJywgJ215L2FwcC9zb2NpYWwuc3ZnJykgICAvLyBSZWdpc3RlciBhIG5hbWVkIGljb24gc2V0IG9mIFNWR3NcbiAgICAqICAgICAgICAgIC5pY29uKCdhbmRyb2lkJywgJ215L2FwcC9hbmRyb2lkLnN2ZycpICAgIC8vIFJlZ2lzdGVyIGEgc3BlY2lmaWMgaWNvbiAoYnkgbmFtZSlcbiAgICAqICAgICAgICAgIC5pY29uKCd3b3JrOmNoYWlyJywgJ215L2FwcC9jaGFpci5zdmcnKTsgIC8vIFJlZ2lzdGVyIGljb24gaW4gYSBzcGVjaWZpYyBzZXRcbiAgICAqICAgfSk7XG4gICAgKiA8L2hsanM+XG4gICAgKlxuICAgICogU1ZHIGljb25zIGFuZCBpY29uIHNldHMgY2FuIGJlIGVhc2lseSBwcmUtbG9hZGVkIGFuZCBjYWNoZWQgdXNpbmcgZWl0aGVyIChhKSBhIGJ1aWxkIHByb2Nlc3Mgb3IgKGIpIGEgcnVudGltZVxuICAgICogKipzdGFydHVwKiogcHJvY2VzcyAoc2hvd24gYmVsb3cpOlxuICAgICpcbiAgICAqIDxobGpzIGxhbmc9XCJqc1wiPlxuICAgICogICBhcHAuY29uZmlnKGZ1bmN0aW9uKCRtZEljb25Qcm92aWRlcikge1xuICAgICpcbiAgICAqICAgICAvLyBSZWdpc3RlciBhIGRlZmF1bHQgc2V0IG9mIFNWRyBpY29uIGRlZmluaXRpb25zXG4gICAgKiAgICAgJG1kSWNvblByb3ZpZGVyLmRlZmF1bHRJY29uU2V0KCdteS9hcHAvaWNvbnMuc3ZnJylcbiAgICAqXG4gICAgKiAgIH0pXG4gICAgKiAgIC5ydW4oZnVuY3Rpb24oJGh0dHAsICR0ZW1wbGF0ZUNhY2hlKXtcbiAgICAqXG4gICAgKiAgICAgLy8gUHJlLWZldGNoIGljb25zIHNvdXJjZXMgYnkgVVJMIGFuZCBjYWNoZSBpbiB0aGUgJHRlbXBsYXRlQ2FjaGUuLi5cbiAgICAqICAgICAvLyBzdWJzZXF1ZW50ICRodHRwIGNhbGxzIHdpbGwgbG9vayB0aGVyZSBmaXJzdC5cbiAgICAqXG4gICAgKiAgICAgdmFyIHVybHMgPSBbICdpbXkvYXBwL2ljb25zLnN2ZycsICdpbWcvaWNvbnMvYW5kcm9pZC5zdmcnXTtcbiAgICAqXG4gICAgKiAgICAgYW5ndWxhci5mb3JFYWNoKHVybHMsIGZ1bmN0aW9uKHVybCkge1xuICAgICogICAgICAgJGh0dHAuZ2V0KHVybCwge2NhY2hlOiAkdGVtcGxhdGVDYWNoZX0pO1xuICAgICogICAgIH0pO1xuICAgICpcbiAgICAqICAgfSk7XG4gICAgKlxuICAgICogPC9obGpzPlxuICAgICpcbiAgICAqIE5PVEU6IHRoZSBsb2FkZWQgU1ZHIGRhdGEgaXMgc3Vic2VxdWVudGx5IGNhY2hlZCBpbnRlcm5hbGx5IGZvciBmdXR1cmUgcmVxdWVzdHMuXG4gICAgKlxuICAgICovXG5cbiAgIC8qKlxuICAgICogQG5nZG9jIG1ldGhvZFxuICAgICogQG5hbWUgJG1kSWNvblByb3ZpZGVyI2ljb25cbiAgICAqXG4gICAgKiBAZGVzY3JpcHRpb25cbiAgICAqIFJlZ2lzdGVyIGEgc291cmNlIFVSTCBmb3IgYSBzcGVjaWZpYyBpY29uIG5hbWU7IHRoZSBuYW1lIG1heSBpbmNsdWRlIG9wdGlvbmFsICdpY29uIHNldCcgbmFtZSBwcmVmaXguXG4gICAgKiBUaGVzZSBpY29ucyAgd2lsbCBsYXRlciBiZSByZXRyaWV2ZWQgZnJvbSB0aGUgY2FjaGUgdXNpbmcgYCRtZEljb24oIDxpY29uIG5hbWU+IClgXG4gICAgKlxuICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEljb24gbmFtZS9pZCB1c2VkIHRvIHJlZ2lzdGVyIHRoZSBpY29uXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIHNwZWNpZmllcyB0aGUgZXh0ZXJuYWwgbG9jYXRpb24gZm9yIHRoZSBkYXRhIGZpbGUuIFVzZWQgaW50ZXJuYWxseSBieSBgJGh0dHBgIHRvIGxvYWQgdGhlXG4gICAgKiBkYXRhIG9yIGFzIHBhcnQgb2YgdGhlIGxvb2t1cCBpbiBgJHRlbXBsYXRlQ2FjaGVgIGlmIHByZS1sb2FkaW5nIHdhcyBjb25maWd1cmVkLlxuICAgICogQHBhcmFtIHtudW1iZXI9fSB2aWV3Qm94U2l6ZSBTZXRzIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IHRoZSBpY29uJ3Mgdmlld0JveC5cbiAgICAqIEl0IGlzIGlnbm9yZWQgZm9yIGljb25zIHdpdGggYW4gZXhpc3Rpbmcgdmlld0JveC4gRGVmYXVsdCBzaXplIGlzIDI0LlxuICAgICpcbiAgICAqIEByZXR1cm5zIHtvYmp9IGFuIGAkbWRJY29uUHJvdmlkZXJgIHJlZmVyZW5jZTsgdXNlZCB0byBzdXBwb3J0IG1ldGhvZCBjYWxsIGNoYWlucyBmb3IgdGhlIEFQSVxuICAgICpcbiAgICAqIEB1c2FnZVxuICAgICogPGhsanMgbGFuZz1cImpzXCI+XG4gICAgKiAgIGFwcC5jb25maWcoZnVuY3Rpb24oJG1kSWNvblByb3ZpZGVyKSB7XG4gICAgKlxuICAgICogICAgIC8vIENvbmZpZ3VyZSBVUkxzIGZvciBpY29ucyBzcGVjaWZpZWQgYnkgW3NldDpdaWQuXG4gICAgKlxuICAgICogICAgICRtZEljb25Qcm92aWRlclxuICAgICogICAgICAgICAgLmljb24oJ2FuZHJvaWQnLCAnbXkvYXBwL2FuZHJvaWQuc3ZnJykgICAgLy8gUmVnaXN0ZXIgYSBzcGVjaWZpYyBpY29uIChieSBuYW1lKVxuICAgICogICAgICAgICAgLmljb24oJ3dvcms6Y2hhaXInLCAnbXkvYXBwL2NoYWlyLnN2ZycpOyAgLy8gUmVnaXN0ZXIgaWNvbiBpbiBhIHNwZWNpZmljIHNldFxuICAgICogICB9KTtcbiAgICAqIDwvaGxqcz5cbiAgICAqXG4gICAgKi9cbiAgIC8qKlxuICAgICogQG5nZG9jIG1ldGhvZFxuICAgICogQG5hbWUgJG1kSWNvblByb3ZpZGVyI2ljb25TZXRcbiAgICAqXG4gICAgKiBAZGVzY3JpcHRpb25cbiAgICAqIFJlZ2lzdGVyIGEgc291cmNlIFVSTCBmb3IgYSAnbmFtZWQnIHNldCBvZiBpY29uczsgZ3JvdXAgb2YgU1ZHIGRlZmluaXRpb25zIHdoZXJlIGVhY2ggZGVmaW5pdGlvblxuICAgICogaGFzIGFuIGljb24gaWQuIEluZGl2aWR1YWwgaWNvbnMgY2FuIGJlIHN1YnNlcXVlbnRseSByZXRyaWV2ZWQgZnJvbSB0aGlzIGNhY2hlZCBzZXQgdXNpbmdcbiAgICAqIGAkbWRJY29uKDxpY29uIHNldCBuYW1lPjo8aWNvbiBuYW1lPilgXG4gICAgKlxuICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEljb24gbmFtZS9pZCB1c2VkIHRvIHJlZ2lzdGVyIHRoZSBpY29uc2V0XG4gICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIHNwZWNpZmllcyB0aGUgZXh0ZXJuYWwgbG9jYXRpb24gZm9yIHRoZSBkYXRhIGZpbGUuIFVzZWQgaW50ZXJuYWxseSBieSBgJGh0dHBgIHRvIGxvYWQgdGhlXG4gICAgKiBkYXRhIG9yIGFzIHBhcnQgb2YgdGhlIGxvb2t1cCBpbiBgJHRlbXBsYXRlQ2FjaGVgIGlmIHByZS1sb2FkaW5nIHdhcyBjb25maWd1cmVkLlxuICAgICogQHBhcmFtIHtudW1iZXI9fSB2aWV3Qm94U2l6ZSBTZXRzIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoZSB2aWV3Qm94IG9mIGFsbCBpY29ucyBpbiB0aGUgc2V0LiBcbiAgICAqIEl0IGlzIGlnbm9yZWQgZm9yIGljb25zIHdpdGggYW4gZXhpc3Rpbmcgdmlld0JveC4gQWxsIGljb25zIGluIHRoZSBpY29uIHNldCBzaG91bGQgYmUgdGhlIHNhbWUgc2l6ZS5cbiAgICAqIERlZmF1bHQgdmFsdWUgaXMgMjQuXG4gICAgKlxuICAgICogQHJldHVybnMge29ian0gYW4gYCRtZEljb25Qcm92aWRlcmAgcmVmZXJlbmNlOyB1c2VkIHRvIHN1cHBvcnQgbWV0aG9kIGNhbGwgY2hhaW5zIGZvciB0aGUgQVBJXG4gICAgKlxuICAgICpcbiAgICAqIEB1c2FnZVxuICAgICogPGhsanMgbGFuZz1cImpzXCI+XG4gICAgKiAgIGFwcC5jb25maWcoZnVuY3Rpb24oJG1kSWNvblByb3ZpZGVyKSB7XG4gICAgKlxuICAgICogICAgIC8vIENvbmZpZ3VyZSBVUkxzIGZvciBpY29ucyBzcGVjaWZpZWQgYnkgW3NldDpdaWQuXG4gICAgKlxuICAgICogICAgICRtZEljb25Qcm92aWRlclxuICAgICogICAgICAgICAgLmljb25TZXQoJ3NvY2lhbCcsICdteS9hcHAvc29jaWFsLnN2ZycpICAgLy8gUmVnaXN0ZXIgYSBuYW1lZCBpY29uIHNldFxuICAgICogICB9KTtcbiAgICAqIDwvaGxqcz5cbiAgICAqXG4gICAgKi9cbiAgIC8qKlxuICAgICogQG5nZG9jIG1ldGhvZFxuICAgICogQG5hbWUgJG1kSWNvblByb3ZpZGVyI2RlZmF1bHRJY29uU2V0XG4gICAgKlxuICAgICogQGRlc2NyaXB0aW9uXG4gICAgKiBSZWdpc3RlciBhIHNvdXJjZSBVUkwgZm9yIHRoZSBkZWZhdWx0ICduYW1lZCcgc2V0IG9mIGljb25zLiBVbmxlc3MgZXhwbGljaXRseSByZWdpc3RlcmVkLFxuICAgICogc3Vic2VxdWVudCBsb29rdXBzIG9mIGljb25zIHdpbGwgZmFpbG92ZXIgdG8gc2VhcmNoIHRoaXMgJ2RlZmF1bHQnIGljb24gc2V0LlxuICAgICogSWNvbiBjYW4gYmUgcmV0cmlldmVkIGZyb20gdGhpcyBjYWNoZWQsIGRlZmF1bHQgc2V0IHVzaW5nIGAkbWRJY29uKDxuYW1lPilgXG4gICAgKlxuICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBzcGVjaWZpZXMgdGhlIGV4dGVybmFsIGxvY2F0aW9uIGZvciB0aGUgZGF0YSBmaWxlLiBVc2VkIGludGVybmFsbHkgYnkgYCRodHRwYCB0byBsb2FkIHRoZVxuICAgICogZGF0YSBvciBhcyBwYXJ0IG9mIHRoZSBsb29rdXAgaW4gYCR0ZW1wbGF0ZUNhY2hlYCBpZiBwcmUtbG9hZGluZyB3YXMgY29uZmlndXJlZC5cbiAgICAqIEBwYXJhbSB7bnVtYmVyPX0gdmlld0JveFNpemUgU2V0cyB0aGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgdmlld0JveCBvZiBhbGwgaWNvbnMgaW4gdGhlIHNldC4gXG4gICAgKiBJdCBpcyBpZ25vcmVkIGZvciBpY29ucyB3aXRoIGFuIGV4aXN0aW5nIHZpZXdCb3guIEFsbCBpY29ucyBpbiB0aGUgaWNvbiBzZXQgc2hvdWxkIGJlIHRoZSBzYW1lIHNpemUuXG4gICAgKiBEZWZhdWx0IHZhbHVlIGlzIDI0LlxuICAgICpcbiAgICAqIEByZXR1cm5zIHtvYmp9IGFuIGAkbWRJY29uUHJvdmlkZXJgIHJlZmVyZW5jZTsgdXNlZCB0byBzdXBwb3J0IG1ldGhvZCBjYWxsIGNoYWlucyBmb3IgdGhlIEFQSVxuICAgICpcbiAgICAqIEB1c2FnZVxuICAgICogPGhsanMgbGFuZz1cImpzXCI+XG4gICAgKiAgIGFwcC5jb25maWcoZnVuY3Rpb24oJG1kSWNvblByb3ZpZGVyKSB7XG4gICAgKlxuICAgICogICAgIC8vIENvbmZpZ3VyZSBVUkxzIGZvciBpY29ucyBzcGVjaWZpZWQgYnkgW3NldDpdaWQuXG4gICAgKlxuICAgICogICAgICRtZEljb25Qcm92aWRlclxuICAgICogICAgICAgICAgLmRlZmF1bHRJY29uU2V0KCAnbXkvYXBwL3NvY2lhbC5zdmcnICkgICAvLyBSZWdpc3RlciBhIGRlZmF1bHQgaWNvbiBzZXRcbiAgICAqICAgfSk7XG4gICAgKiA8L2hsanM+XG4gICAgKlxuICAgICovXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRtZEljb25Qcm92aWRlciNkZWZhdWx0Rm9udFNldFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogV2hlbiB1c2luZyBGb250LUljb25zLCBBbmd1bGFyIE1hdGVyaWFsIGFzc3VtZXMgdGhlIHRoZSBNYXRlcmlhbCBEZXNpZ24gaWNvbnMgd2lsbCBiZSB1c2VkIGFuZCBhdXRvbWF0aWNhbGx5XG4gICAqIGNvbmZpZ3VyZXMgdGhlIGRlZmF1bHQgZm9udC1zZXQgPT0gJ21hdGVyaWFsLWljb25zJy4gTm90ZSB0aGF0IHRoZSBmb250LXNldCByZWZlcmVuY2VzIHRoZSBmb250LWljb24gbGlicmFyeVxuICAgKiBjbGFzcyBzdHlsZSB0aGF0IHNob3VsZCBiZSBhcHBsaWVkIHRvIHRoZSBgPG1kLWljb24+YC5cbiAgICpcbiAgICogQ29uZmlndXJpbmcgdGhlIGRlZmF1bHQgbWVhbnMgdGhhdCB0aGUgYXR0cmlidXRlc1xuICAgKiBgbWQtZm9udC1zZXQ9XCJtYXRlcmlhbC1pY29uc1wiYCBvciBgY2xhc3M9XCJtYXRlcmlhbC1pY29uc1wiYCBkbyBub3QgbmVlZCB0byBiZSBleHBsaWNpdGx5IGRlY2xhcmVkIG9uIHRoZVxuICAgKiBgPG1kLWljb24+YCBtYXJrdXAuIEZvciBleGFtcGxlOlxuICAgKlxuICAgKiAgYDxtZC1pY29uPiBmYWNlIDwvbWQtaWNvbj5gXG4gICAqICB3aWxsIHJlbmRlciBhc1xuICAgKiAgYDxzcGFuIGNsYXNzPVwibWF0ZXJpYWwtaWNvbnNcIj4gZmFjZSA8L3NwYW4+YCwgYW5kXG4gICAqXG4gICAqICBgPG1kLWljb24gbWQtZm9udC1zZXQ9XCJmYVwiPiBmYWNlIDwvbWQtaWNvbj5gXG4gICAqICB3aWxsIHJlbmRlciBhc1xuICAgKiAgYDxzcGFuIGNsYXNzPVwiZmFcIj4gZmFjZSA8L3NwYW4+YFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBvZiB0aGUgZm9udC1saWJyYXJ5IHN0eWxlIHRoYXQgc2hvdWxkIGJlIGFwcGxpZWQgdG8gdGhlIG1kLWljb24gRE9NIGVsZW1lbnRcbiAgICpcbiAgICogQHVzYWdlXG4gICAqIDxobGpzIGxhbmc9XCJqc1wiPlxuICAgKiAgIGFwcC5jb25maWcoZnVuY3Rpb24oJG1kSWNvblByb3ZpZGVyKSB7XG4gICAqICAgICAkbWRJY29uUHJvdmlkZXIuZGVmYXVsdEZvbnRTZXQoICdmb250YXdlc29tZScgKTtcbiAgICogICB9KTtcbiAgICogPC9obGpzPlxuICAgKlxuICAgKi9cblxuICAgLyoqXG4gICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgKiBAbmFtZSAkbWRJY29uUHJvdmlkZXIjZGVmYXVsdFZpZXdCb3hTaXplXG4gICAgKlxuICAgICogQGRlc2NyaXB0aW9uXG4gICAgKiBXaGlsZSBgPG1kLWljb24gLz5gIG1hcmt1cCBjYW4gYWxzbyBiZSBzdHlsZSB3aXRoIHNpemluZyBDU1MsIHRoaXMgbWV0aG9kIGNvbmZpZ3VyZXNcbiAgICAqIHRoZSBkZWZhdWx0IHdpZHRoICoqYW5kKiogaGVpZ2h0IHVzZWQgZm9yIGFsbCBpY29uczsgdW5sZXNzIG92ZXJyaWRkZW4gYnkgc3BlY2lmaWMgQ1NTLlxuICAgICogVGhlIGRlZmF1bHQgc2l6aW5nIGlzICgyNHB4LCAyNHB4KS5cbiAgICAqIEBwYXJhbSB7bnVtYmVyPX0gdmlld0JveFNpemUgU2V0cyB0aGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgdmlld0JveCBmb3IgYW4gaWNvbiBvciBhbiBpY29uIHNldC5cbiAgICAqIEFsbCBpY29ucyBpbiBhIHNldCBzaG91bGQgYmUgdGhlIHNhbWUgc2l6ZS4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgMjQuXG4gICAgKlxuICAgICogQHJldHVybnMge29ian0gYW4gYCRtZEljb25Qcm92aWRlcmAgcmVmZXJlbmNlOyB1c2VkIHRvIHN1cHBvcnQgbWV0aG9kIGNhbGwgY2hhaW5zIGZvciB0aGUgQVBJXG4gICAgKlxuICAgICogQHVzYWdlXG4gICAgKiA8aGxqcyBsYW5nPVwianNcIj5cbiAgICAqICAgYXBwLmNvbmZpZyhmdW5jdGlvbigkbWRJY29uUHJvdmlkZXIpIHtcbiAgICAqXG4gICAgKiAgICAgLy8gQ29uZmlndXJlIFVSTHMgZm9yIGljb25zIHNwZWNpZmllZCBieSBbc2V0Ol1pZC5cbiAgICAqXG4gICAgKiAgICAgJG1kSWNvblByb3ZpZGVyXG4gICAgKiAgICAgICAgICAuZGVmYXVsdFZpZXdCb3hTaXplKDM2KSAgIC8vIFJlZ2lzdGVyIGEgZGVmYXVsdCBpY29uIHNpemUgKHdpZHRoID09IGhlaWdodClcbiAgICAqICAgfSk7XG4gICAgKiA8L2hsanM+XG4gICAgKlxuICAgICovXG5cbiB2YXIgY29uZmlnID0ge1xuICAgZGVmYXVsdFZpZXdCb3hTaXplOiAyNCxcbiAgIGRlZmF1bHRGb250U2V0OiAnbWF0ZXJpYWwtaWNvbnMnLFxuICAgZm9udFNldHMgOiBbIF1cbiB9O1xuXG4gZnVuY3Rpb24gTWRJY29uUHJvdmlkZXIoKSB7IH1cblxuIE1kSWNvblByb3ZpZGVyLnByb3RvdHlwZSA9IHtcbiAgIGljb24gOiBmdW5jdGlvbiAoaWQsIHVybCwgdmlld0JveFNpemUpIHtcbiAgICAgaWYgKCBpZC5pbmRleE9mKCc6JykgPT0gLTEgKSBpZCA9ICckZGVmYXVsdDonICsgaWQ7XG5cbiAgICAgY29uZmlnW2lkXSA9IG5ldyBDb25maWd1cmF0aW9uSXRlbSh1cmwsIHZpZXdCb3hTaXplICk7XG4gICAgIHJldHVybiB0aGlzO1xuICAgfSxcblxuICAgaWNvblNldCA6IGZ1bmN0aW9uIChpZCwgdXJsLCB2aWV3Qm94U2l6ZSkge1xuICAgICBjb25maWdbaWRdID0gbmV3IENvbmZpZ3VyYXRpb25JdGVtKHVybCwgdmlld0JveFNpemUgKTtcbiAgICAgcmV0dXJuIHRoaXM7XG4gICB9LFxuXG4gICBkZWZhdWx0SWNvblNldCA6IGZ1bmN0aW9uICh1cmwsIHZpZXdCb3hTaXplKSB7XG4gICAgIHZhciBzZXROYW1lID0gJyRkZWZhdWx0JztcblxuICAgICBpZiAoICFjb25maWdbc2V0TmFtZV0gKSB7XG4gICAgICAgY29uZmlnW3NldE5hbWVdID0gbmV3IENvbmZpZ3VyYXRpb25JdGVtKHVybCwgdmlld0JveFNpemUgKTtcbiAgICAgfVxuXG4gICAgIGNvbmZpZ1tzZXROYW1lXS52aWV3Qm94U2l6ZSA9IHZpZXdCb3hTaXplIHx8IGNvbmZpZy5kZWZhdWx0Vmlld0JveFNpemU7XG5cbiAgICAgcmV0dXJuIHRoaXM7XG4gICB9LFxuXG4gICBkZWZhdWx0Vmlld0JveFNpemUgOiBmdW5jdGlvbiAodmlld0JveFNpemUpIHtcbiAgICAgY29uZmlnLmRlZmF1bHRWaWV3Qm94U2l6ZSA9IHZpZXdCb3hTaXplO1xuICAgICByZXR1cm4gdGhpcztcbiAgIH0sXG4gICBcbiAgIC8qKlxuICAgICogUmVnaXN0ZXIgYW4gYWxpYXMgbmFtZSBhc3NvY2lhdGVkIHdpdGggYSBmb250LWljb24gbGlicmFyeSBzdHlsZSA7XG4gICAgKi9cbiAgIGZvbnRTZXQgOiBmdW5jdGlvbiBmb250U2V0KGFsaWFzLCBjbGFzc05hbWUpIHtcbiAgICBjb25maWcuZm9udFNldHMucHVzaCh7XG4gICAgICBhbGlhcyA6IGFsaWFzLFxuICAgICAgZm9udFNldCA6IGNsYXNzTmFtZSB8fCBhbGlhc1xuICAgIH0pO1xuICAgfSxcblxuICAgLyoqXG4gICAgKiBTcGVjaWZ5IGEgZGVmYXVsdCBzdHlsZSBuYW1lIGFzc29jaWF0ZWQgd2l0aCBhIGZvbnQtaWNvbiBsaWJyYXJ5XG4gICAgKiBmYWxsYmFjayB0byBNYXRlcmlhbCBJY29ucy5cbiAgICAqXG4gICAgKi9cbiAgIGRlZmF1bHRGb250U2V0IDogZnVuY3Rpb24gZGVmYXVsdEZvbnRTZXQoY2xhc3NOYW1lKSB7XG4gICAgY29uZmlnLmRlZmF1bHRGb250U2V0ID0gIWNsYXNzTmFtZSA/ICcnIDogY2xhc3NOYW1lO1xuICAgIHJldHVybiB0aGlzO1xuICAgfSxcblxuICAgZGVmYXVsdEljb25TaXplIDogZnVuY3Rpb24gZGVmYXVsdEljb25TaXplKGljb25TaXplKSB7XG4gICAgIGNvbmZpZy5kZWZhdWx0SWNvblNpemUgPSBpY29uU2l6ZTtcbiAgICAgcmV0dXJuIHRoaXM7XG4gICB9LFxuXG4gICBwcmVsb2FkSWNvbnM6IGZ1bmN0aW9uICgkdGVtcGxhdGVDYWNoZSkge1xuICAgICB2YXIgaWNvblByb3ZpZGVyID0gdGhpcztcbiAgICAgdmFyIHN2Z1JlZ2lzdHJ5ID0gW1xuICAgICAgIHtcbiAgICAgICAgIGlkIDogJ21kLXRhYnMtYXJyb3cnLFxuICAgICAgICAgdXJsOiAnbWQtdGFicy1hcnJvdy5zdmcnLFxuICAgICAgICAgc3ZnOiAnPHN2ZyB2ZXJzaW9uPVwiMS4xXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PGc+PHBvbHlnb24gcG9pbnRzPVwiMTUuNCw3LjQgMTQsNiA4LDEyIDE0LDE4IDE1LjQsMTYuNiAxMC44LDEyIFwiLz48L2c+PC9zdmc+J1xuICAgICAgIH0sXG4gICAgICAge1xuICAgICAgICAgaWQgOiAnbWQtY2xvc2UnLFxuICAgICAgICAgdXJsOiAnbWQtY2xvc2Uuc3ZnJyxcbiAgICAgICAgIHN2ZzogJzxzdmcgdmVyc2lvbj1cIjEuMVwiIHg9XCIwcHhcIiB5PVwiMHB4XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxnPjxwYXRoIGQ9XCJNMTkgNi40MWwtMS40MS0xLjQxLTUuNTkgNS41OS01LjU5LTUuNTktMS40MSAxLjQxIDUuNTkgNS41OS01LjU5IDUuNTkgMS40MSAxLjQxIDUuNTktNS41OSA1LjU5IDUuNTkgMS40MS0xLjQxLTUuNTktNS41OXpcIi8+PC9nPjwvc3ZnPidcbiAgICAgICB9LFxuICAgICAgIHtcbiAgICAgICAgIGlkOiAgJ21kLWNhbmNlbCcsXG4gICAgICAgICB1cmw6ICdtZC1jYW5jZWwuc3ZnJyxcbiAgICAgICAgIHN2ZzogJzxzdmcgdmVyc2lvbj1cIjEuMVwiIHg9XCIwcHhcIiB5PVwiMHB4XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxnPjxwYXRoIGQ9XCJNMTIgMmMtNS41MyAwLTEwIDQuNDctMTAgMTBzNC40NyAxMCAxMCAxMCAxMC00LjQ3IDEwLTEwLTQuNDctMTAtMTAtMTB6bTUgMTMuNTlsLTEuNDEgMS40MS0zLjU5LTMuNTktMy41OSAzLjU5LTEuNDEtMS40MSAzLjU5LTMuNTktMy41OS0zLjU5IDEuNDEtMS40MSAzLjU5IDMuNTkgMy41OS0zLjU5IDEuNDEgMS40MS0zLjU5IDMuNTkgMy41OSAzLjU5elwiLz48L2c+PC9zdmc+J1xuICAgICAgIH0sXG4gICAgICAge1xuICAgICAgICAgaWQ6ICAnbWQtbWVudScsXG4gICAgICAgICB1cmw6ICdtZC1tZW51LnN2ZycsXG4gICAgICAgICBzdmc6ICc8c3ZnIHZlcnNpb249XCIxLjFcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgMTAwIDEwMFwiPjxwYXRoIGQ9XCJNIDUwIDAgTCAxMDAgMTQgTCA5MiA4MCBMIDUwIDEwMCBMIDggODAgTCAwIDE0IFpcIiBmaWxsPVwiI2IyYjJiMlwiPjwvcGF0aD48cGF0aCBkPVwiTSA1MCA1IEwgNiAxOCBMIDEzLjUgNzcgTCA1MCA5NCBaXCIgZmlsbD1cIiNFNDI5MzlcIj48L3BhdGg+PHBhdGggZD1cIk0gNTAgNSBMIDk0IDE4IEwgODYuNSA3NyBMIDUwIDk0IFpcIiBmaWxsPVwiI0I3MjgzM1wiPjwvcGF0aD48cGF0aCBkPVwiTSA1MCA3IEwgODMgNzUgTCA3MiA3NSBMIDY1IDU5IEwgNTAgNTkgTCA1MCA1MCBMIDYxIDUwIEwgNTAgMjYgWlwiIGZpbGw9XCIjYjJiMmIyXCI+PC9wYXRoPjxwYXRoIGQ9XCJNIDUwIDcgTCAxNyA3NSBMIDI4IDc1IEwgMzUgNTkgTCA1MCA1OSBMIDUwIDUwIEwgMzkgNTAgTCA1MCAyNiBaXCIgZmlsbD1cIiNmZmZcIj48L3BhdGg+PC9zdmc+J1xuICAgICAgIH0sXG4gICAgICAge1xuICAgICAgICAgaWQ6ICAnbWQtdG9nZ2xlLWFycm93JyxcbiAgICAgICAgIHVybDogJ21kLXRvZ2dsZS1hcnJvdy1zdmcnLFxuICAgICAgICAgc3ZnOiAnPHN2ZyB2ZXJzaW9uPVwiMS4xXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDQ4IDQ4XCI+PHBhdGggZD1cIk0yNCAxNmwtMTIgMTIgMi44MyAyLjgzIDkuMTctOS4xNyA5LjE3IDkuMTcgMi44My0yLjgzelwiLz48cGF0aCBkPVwiTTAgMGg0OHY0OGgtNDh6XCIgZmlsbD1cIm5vbmVcIi8+PC9zdmc+J1xuICAgICAgIH1cbiAgICAgXTtcblxuICAgICBzdmdSZWdpc3RyeS5mb3JFYWNoKGZ1bmN0aW9uKGFzc2V0KXtcbiAgICAgICBpY29uUHJvdmlkZXIuaWNvbihhc3NldC5pZCwgIGFzc2V0LnVybCk7XG4gICAgICAgJHRlbXBsYXRlQ2FjaGUucHV0KGFzc2V0LnVybCwgYXNzZXQuc3ZnKTtcbiAgICAgfSk7XG5cbiAgIH0sXG5cbiAgICRnZXQgOiBbJyRodHRwJywgJyRxJywgJyRsb2cnLCAnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkaHR0cCwgJHEsICRsb2csICR0ZW1wbGF0ZUNhY2hlKSB7XG4gICAgIHRoaXMucHJlbG9hZEljb25zKCR0ZW1wbGF0ZUNhY2hlKTtcbiAgICAgcmV0dXJuIE1kSWNvblNlcnZpY2UoY29uZmlnLCAkaHR0cCwgJHEsICRsb2csICR0ZW1wbGF0ZUNhY2hlKTtcbiAgIH1dXG4gfTtcblxuICAgLyoqXG4gICAgKiAgQ29uZmlndXJhdGlvbiBpdGVtIHN0b3JlZCBpbiB0aGUgSWNvbiByZWdpc3RyeTsgdXNlZCBmb3IgbG9va3Vwc1xuICAgICogIHRvIGxvYWQgaWYgbm90IGFscmVhZHkgY2FjaGVkIGluIHRoZSBgbG9hZGVkYCBjYWNoZVxuICAgICovXG4gICBmdW5jdGlvbiBDb25maWd1cmF0aW9uSXRlbSh1cmwsIHZpZXdCb3hTaXplKSB7XG4gICAgIHRoaXMudXJsID0gdXJsO1xuICAgICB0aGlzLnZpZXdCb3hTaXplID0gdmlld0JveFNpemUgfHwgY29uZmlnLmRlZmF1bHRWaWV3Qm94U2l6ZTtcbiAgIH1cblxuIC8qKlxuICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICogQG5hbWUgJG1kSWNvblxuICAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5pY29uXG4gICpcbiAgKiBAZGVzY3JpcHRpb25cbiAgKiBUaGUgYCRtZEljb25gIHNlcnZpY2UgaXMgYSBmdW5jdGlvbiB1c2VkIHRvIGxvb2t1cCBTVkcgaWNvbnMuXG4gICpcbiAgKiBAcGFyYW0ge3N0cmluZ30gaWQgUXVlcnkgdmFsdWUgZm9yIGEgdW5pcXVlIElkIG9yIFVSTC4gSWYgdGhlIGFyZ3VtZW50IGlzIGEgVVJMLCB0aGVuIHRoZSBzZXJ2aWNlIHdpbGwgcmV0cmlldmUgdGhlIGljb24gZWxlbWVudFxuICAqIGZyb20gaXRzIGludGVybmFsIGNhY2hlIG9yIGxvYWQgdGhlIGljb24gYW5kIGNhY2hlIGl0IGZpcnN0LiBJZiB0aGUgdmFsdWUgaXMgbm90IGEgVVJMLXR5cGUgc3RyaW5nLCB0aGVuIGFuIElEIGxvb2t1cCBpc1xuICAqIHBlcmZvcm1lZC4gVGhlIElkIG1heSBiZSBhIHVuaXF1ZSBpY29uIElEIG9yIG1heSBpbmNsdWRlIGFuIGljb25TZXQgSUQgcHJlZml4LlxuICAqXG4gICogRm9yIHRoZSAqKmlkKiogcXVlcnkgdG8gd29yayBwcm9wZXJseSwgdGhpcyBtZWFucyB0aGF0IGFsbCBpZC10by1VUkwgbWFwcGluZ3MgbXVzdCBoYXZlIGJlZW4gcHJldmlvdXNseSBjb25maWd1cmVkXG4gICogdXNpbmcgdGhlIGAkbWRJY29uUHJvdmlkZXJgLlxuICAqXG4gICogQHJldHVybnMge29ian0gQ2xvbmUgb2YgdGhlIGluaXRpYWwgU1ZHIERPTSBlbGVtZW50OyB3aGljaCB3YXMgY3JlYXRlZCBmcm9tIHRoZSBTVkcgbWFya3VwIGluIHRoZSBTVkcgZGF0YSBmaWxlLlxuICAqXG4gICogQHVzYWdlXG4gICogPGhsanMgbGFuZz1cImpzXCI+XG4gICogZnVuY3Rpb24gU29tZURpcmVjdGl2ZSgkbWRJY29uKSB7XG4gICpcbiAgKiAgIC8vIFNlZSBpZiB0aGUgaWNvbiBoYXMgYWxyZWFkeSBiZWVuIGxvYWRlZCwgaWYgbm90XG4gICogICAvLyB0aGVuIGxvb2t1cCB0aGUgaWNvbiBmcm9tIHRoZSByZWdpc3RyeSBjYWNoZSwgbG9hZCBhbmQgY2FjaGVcbiAgKiAgIC8vIGl0IGZvciBmdXR1cmUgcmVxdWVzdHMuXG4gICogICAvLyBOT1RFOiBJRCBxdWVyaWVzIHJlcXVpcmUgY29uZmlndXJhdGlvbiB3aXRoICRtZEljb25Qcm92aWRlclxuICAqXG4gICogICAkbWRJY29uKCdhbmRyb2lkJykudGhlbihmdW5jdGlvbihpY29uRWwpICAgIHsgZWxlbWVudC5hcHBlbmQoaWNvbkVsKTsgfSk7XG4gICogICAkbWRJY29uKCd3b3JrOmNoYWlyJykudGhlbihmdW5jdGlvbihpY29uRWwpIHsgZWxlbWVudC5hcHBlbmQoaWNvbkVsKTsgfSk7XG4gICpcbiAgKiAgIC8vIExvYWQgYW5kIGNhY2hlIHRoZSBleHRlcm5hbCBTVkcgdXNpbmcgYSBVUkxcbiAgKlxuICAqICAgJG1kSWNvbignaW1nL2ljb25zL2FuZHJvaWQuc3ZnJykudGhlbihmdW5jdGlvbihpY29uRWwpIHtcbiAgKiAgICAgZWxlbWVudC5hcHBlbmQoaWNvbkVsKTtcbiAgKiAgIH0pO1xuICAqIH07XG4gICogPC9obGpzPlxuICAqXG4gICogTk9URTogVGhlIGA8bWQtaWNvbiAvPiAgYCBkaXJlY3RpdmUgaW50ZXJuYWxseSB1c2VzIHRoZSBgJG1kSWNvbmAgc2VydmljZSB0byBxdWVyeSwgbG9hZGVkLCBhbmQgaW5zdGFudGlhdGVcbiAgKiBTVkcgRE9NIGVsZW1lbnRzLlxuICAqL1xuIGZ1bmN0aW9uIE1kSWNvblNlcnZpY2UoY29uZmlnLCAkaHR0cCwgJHEsICRsb2csICR0ZW1wbGF0ZUNhY2hlKSB7XG4gICB2YXIgaWNvbkNhY2hlID0ge307XG4gICB2YXIgdXJsUmVnZXggPSAvWy1hLXpBLVowLTlAOiVfXFwrLn4jPyYvLz1dezIsMjU2fVxcLlthLXpdezIsNH1cXGIoXFwvWy1hLXpBLVowLTlAOiVfXFwrLn4jPyYvLz1dKik/L2k7XG5cbiAgIEljb24ucHJvdG90eXBlID0geyBjbG9uZSA6IGNsb25lU1ZHLCBwcmVwYXJlOiBwcmVwYXJlQW5kU3R5bGUgfTtcbiAgIGdldEljb24uZm9udFNldCA9IGZpbmRSZWdpc3RlcmVkRm9udFNldDtcblxuICAgLy8gUHVibGlzaCBzZXJ2aWNlLi4uXG4gICByZXR1cm4gZ2V0SWNvbjtcblxuICAgLyoqXG4gICAgKiBBY3R1YWwgJG1kSWNvbiBzZXJ2aWNlIGlzIGVzc2VudGlhbGx5IGEgbG9va3VwIGZ1bmN0aW9uXG4gICAgKi9cbiAgIGZ1bmN0aW9uIGdldEljb24oaWQpIHtcbiAgICAgaWQgPSBpZCB8fCAnJztcblxuICAgICAvLyBJZiBhbHJlYWR5IGxvYWRlZCBhbmQgY2FjaGVkLCB1c2UgYSBjbG9uZSBvZiB0aGUgY2FjaGVkIGljb24uXG4gICAgIC8vIE90aGVyd2lzZSBlaXRoZXIgbG9hZCBieSBVUkwsIG9yIGxvb2t1cCBpbiB0aGUgcmVnaXN0cnkgYW5kIHRoZW4gbG9hZCBieSBVUkwsIGFuZCBjYWNoZS5cblxuICAgICBpZiAoIGljb25DYWNoZVtpZF0gICAgICAgICApIHJldHVybiAkcS53aGVuKCBpY29uQ2FjaGVbaWRdLmNsb25lKCkgKTtcbiAgICAgaWYgKCB1cmxSZWdleC50ZXN0KGlkKSAgICAgKSByZXR1cm4gbG9hZEJ5VVJMKGlkKS50aGVuKCBjYWNoZUljb24oaWQpICk7XG4gICAgIGlmICggaWQuaW5kZXhPZignOicpID09IC0xICkgaWQgPSAnJGRlZmF1bHQ6JyArIGlkO1xuXG4gICAgIHJldHVybiBsb2FkQnlJRChpZClcbiAgICAgICAgIC5jYXRjaChsb2FkRnJvbUljb25TZXQpXG4gICAgICAgICAuY2F0Y2goYW5ub3VuY2VJZE5vdEZvdW5kKVxuICAgICAgICAgLmNhdGNoKGFubm91bmNlTm90Rm91bmQpXG4gICAgICAgICAudGhlbiggY2FjaGVJY29uKGlkKSApO1xuICAgfVxuXG4gICAvKipcbiAgICAqIExvb2t1cCByZWdpc3RlcmVkIGZvbnRTZXQgc3R5bGUgdXNpbmcgaXRzIGFsaWFzLi4uXG4gICAgKiBJZiBub3QgZm91bmQsXG4gICAgKi9cbiAgIGZ1bmN0aW9uIGZpbmRSZWdpc3RlcmVkRm9udFNldChhbGlhcykge1xuICAgICAgdmFyIHVzZURlZmF1bHQgPSBhbmd1bGFyLmlzVW5kZWZpbmVkKGFsaWFzKSB8fCAhKGFsaWFzICYmIGFsaWFzLmxlbmd0aCk7XG4gICAgICBpZiAoIHVzZURlZmF1bHQgKSByZXR1cm4gY29uZmlnLmRlZmF1bHRGb250U2V0O1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYWxpYXM7XG4gICAgICBhbmd1bGFyLmZvckVhY2goY29uZmlnLmZvbnRTZXRzLCBmdW5jdGlvbihpdCl7XG4gICAgICAgIGlmICggaXQuYWxpYXMgPT0gYWxpYXMgKSByZXN1bHQgPSBpdC5mb250U2V0IHx8IHJlc3VsdDtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgfVxuXG4gICAvKipcbiAgICAqIFByZXBhcmUgYW5kIGNhY2hlIHRoZSBsb2FkZWQgaWNvbiBmb3IgdGhlIHNwZWNpZmllZCBgaWRgXG4gICAgKi9cbiAgIGZ1bmN0aW9uIGNhY2hlSWNvbiggaWQgKSB7XG5cbiAgICAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZUNhY2hlKCBpY29uICkge1xuICAgICAgIGljb25DYWNoZVtpZF0gPSBpc0ljb24oaWNvbikgPyBpY29uIDogbmV3IEljb24oaWNvbiwgY29uZmlnW2lkXSk7XG5cbiAgICAgICByZXR1cm4gaWNvbkNhY2hlW2lkXS5jbG9uZSgpO1xuICAgICB9O1xuICAgfVxuXG4gICAvKipcbiAgICAqIExvb2t1cCB0aGUgY29uZmlndXJhdGlvbiBpbiB0aGUgcmVnaXN0cnksIGlmICFyZWdpc3RlcmVkIHRocm93IGFuIGVycm9yXG4gICAgKiBvdGhlcndpc2UgbG9hZCB0aGUgaWNvbiBbb24tZGVtYW5kXSB1c2luZyB0aGUgcmVnaXN0ZXJlZCBVUkwuXG4gICAgKlxuICAgICovXG4gICBmdW5jdGlvbiBsb2FkQnlJRChpZCkge1xuICAgICB2YXIgaWNvbkNvbmZpZyA9IGNvbmZpZ1tpZF07XG5cbiAgICAgcmV0dXJuICFpY29uQ29uZmlnID8gJHEucmVqZWN0KGlkKSA6IGxvYWRCeVVSTChpY29uQ29uZmlnLnVybCkudGhlbihmdW5jdGlvbihpY29uKSB7XG4gICAgICAgcmV0dXJuIG5ldyBJY29uKGljb24sIGljb25Db25maWcpO1xuICAgICB9KTtcbiAgIH1cblxuICAgLyoqXG4gICAgKiAgICBMb2FkcyB0aGUgZmlsZSBhcyBYTUwgYW5kIHVzZXMgcXVlcnlTZWxlY3RvciggPGlkPiApIHRvIGZpbmRcbiAgICAqICAgIHRoZSBkZXNpcmVkIG5vZGUuLi5cbiAgICAqL1xuICAgZnVuY3Rpb24gbG9hZEZyb21JY29uU2V0KGlkKSB7XG4gICAgIHZhciBzZXROYW1lID0gaWQuc3Vic3RyaW5nKDAsIGlkLmxhc3RJbmRleE9mKCc6JykpIHx8ICckZGVmYXVsdCc7XG4gICAgIHZhciBpY29uU2V0Q29uZmlnID0gY29uZmlnW3NldE5hbWVdO1xuXG4gICAgIHJldHVybiAhaWNvblNldENvbmZpZyA/ICRxLnJlamVjdChpZCkgOiBsb2FkQnlVUkwoaWNvblNldENvbmZpZy51cmwpLnRoZW4oZXh0cmFjdEZyb21TZXQpO1xuXG4gICAgIGZ1bmN0aW9uIGV4dHJhY3RGcm9tU2V0KHNldCkge1xuICAgICAgIHZhciBpY29uTmFtZSA9IGlkLnNsaWNlKGlkLmxhc3RJbmRleE9mKCc6JykgKyAxKTtcbiAgICAgICB2YXIgaWNvbiA9IHNldC5xdWVyeVNlbGVjdG9yKCcjJyArIGljb25OYW1lKTtcbiAgICAgICByZXR1cm4gIWljb24gPyAkcS5yZWplY3QoaWQpIDogbmV3IEljb24oaWNvbiwgaWNvblNldENvbmZpZyk7XG4gICAgIH1cbiAgIH1cblxuICAgLyoqXG4gICAgKiBMb2FkIHRoZSBpY29uIGJ5IFVSTCAobWF5IHVzZSB0aGUgJHRlbXBsYXRlQ2FjaGUpLlxuICAgICogRXh0cmFjdCB0aGUgZGF0YSBmb3IgbGF0ZXIgY29udmVyc2lvbiB0byBJY29uXG4gICAgKi9cbiAgIGZ1bmN0aW9uIGxvYWRCeVVSTCh1cmwpIHtcbiAgICAgcmV0dXJuICRodHRwXG4gICAgICAgLmdldCh1cmwsIHsgY2FjaGU6ICR0ZW1wbGF0ZUNhY2hlIH0pXG4gICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgIHJldHVybiBhbmd1bGFyLmVsZW1lbnQoJzxkaXY+JykuYXBwZW5kKHJlc3BvbnNlLmRhdGEpLmZpbmQoJ3N2ZycpWzBdO1xuICAgICAgIH0pO1xuICAgfVxuXG4gICAvKipcbiAgICAqIFVzZXIgZGlkIG5vdCBzcGVjaWZ5IGEgVVJMIGFuZCB0aGUgSUQgaGFzIG5vdCBiZWVuIHJlZ2lzdGVyZWQgd2l0aCB0aGUgJG1kSWNvblxuICAgICogcmVnaXN0cnlcbiAgICAqL1xuICAgZnVuY3Rpb24gYW5ub3VuY2VJZE5vdEZvdW5kKGlkKSB7XG4gICAgIHZhciBtc2c7XG5cbiAgICAgaWYgKGFuZ3VsYXIuaXNTdHJpbmcoaWQpKSB7XG4gICAgICAgbXNnID0gJ2ljb24gJyArIGlkICsgJyBub3QgZm91bmQnO1xuICAgICAgICRsb2cud2Fybihtc2cpO1xuICAgICB9XG5cbiAgICAgcmV0dXJuICRxLnJlamVjdChtc2cgfHwgaWQpO1xuICAgfVxuXG4gICAvKipcbiAgICAqIENhdGNoIEhUVFAgb3IgZ2VuZXJpYyBlcnJvcnMgbm90IHJlbGF0ZWQgdG8gaW5jb3JyZWN0IGljb24gSURzLlxuICAgICovXG4gICBmdW5jdGlvbiBhbm5vdW5jZU5vdEZvdW5kKGVycikge1xuICAgICB2YXIgbXNnID0gYW5ndWxhci5pc1N0cmluZyhlcnIpID8gZXJyIDogKGVyci5tZXNzYWdlIHx8IGVyci5kYXRhIHx8IGVyci5zdGF0dXNUZXh0KTtcbiAgICAgJGxvZy53YXJuKG1zZyk7XG5cbiAgICAgcmV0dXJuICRxLnJlamVjdChtc2cpO1xuICAgfVxuXG4gICAvKipcbiAgICAqIENoZWNrIHRhcmdldCBzaWduYXR1cmUgdG8gc2VlIGlmIGl0IGlzIGFuIEljb24gaW5zdGFuY2UuXG4gICAgKi9cbiAgIGZ1bmN0aW9uIGlzSWNvbih0YXJnZXQpIHtcbiAgICAgcmV0dXJuIGFuZ3VsYXIuaXNEZWZpbmVkKHRhcmdldC5lbGVtZW50KSAmJiBhbmd1bGFyLmlzRGVmaW5lZCh0YXJnZXQuY29uZmlnKTtcbiAgIH1cblxuICAgLyoqXG4gICAgKiAgRGVmaW5lIHRoZSBJY29uIGNsYXNzXG4gICAgKi9cbiAgIGZ1bmN0aW9uIEljb24oZWwsIGNvbmZpZykge1xuICAgICBpZiAoZWwudGFnTmFtZSAhPSAnc3ZnJykge1xuICAgICAgIGVsID0gYW5ndWxhci5lbGVtZW50KCc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj4nKS5hcHBlbmQoZWwpWzBdO1xuICAgICB9XG5cbiAgICAgLy8gSW5qZWN0IHRoZSBuYW1lc3BhY2UgaWYgbm90IGF2YWlsYWJsZS4uLlxuICAgICBpZiAoICFlbC5nZXRBdHRyaWJ1dGUoJ3htbG5zJykgKSB7XG4gICAgICAgZWwuc2V0QXR0cmlidXRlKCd4bWxucycsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG4gICAgIH1cblxuICAgICB0aGlzLmVsZW1lbnQgPSBlbDtcbiAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgIHRoaXMucHJlcGFyZSgpO1xuICAgfVxuXG4gICAvKipcbiAgICAqICBQcmVwYXJlIHRoZSBET00gZWxlbWVudCB0aGF0IHdpbGwgYmUgY2FjaGVkIGluIHRoZVxuICAgICogIGxvYWRlZCBpY29uQ2FjaGUgc3RvcmUuXG4gICAgKi9cbiAgIGZ1bmN0aW9uIHByZXBhcmVBbmRTdHlsZSgpIHtcbiAgICAgdmFyIHZpZXdCb3hTaXplID0gdGhpcy5jb25maWcgPyB0aGlzLmNvbmZpZy52aWV3Qm94U2l6ZSA6IGNvbmZpZy5kZWZhdWx0Vmlld0JveFNpemU7XG4gICAgICAgICBhbmd1bGFyLmZvckVhY2goe1xuICAgICAgICAgICAnZml0JyAgIDogJycsXG4gICAgICAgICAgICdoZWlnaHQnOiAnMTAwJScsXG4gICAgICAgICAgICd3aWR0aCcgOiAnMTAwJScsXG4gICAgICAgICAgICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJzogJ3hNaWRZTWlkIG1lZXQnLFxuICAgICAgICAgICAndmlld0JveCcgOiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd2aWV3Qm94JykgfHwgKCcwIDAgJyArIHZpZXdCb3hTaXplICsgJyAnICsgdmlld0JveFNpemUpXG4gICAgICAgICB9LCBmdW5jdGlvbih2YWwsIGF0dHIpIHtcbiAgICAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyLCB2YWwpO1xuICAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh7XG4gICAgICAgICAgICdwb2ludGVyLWV2ZW50cycgOiAnbm9uZScsXG4gICAgICAgICAgICdkaXNwbGF5JyA6ICdibG9jaydcbiAgICAgICAgIH0sIGZ1bmN0aW9uKHZhbCwgc3R5bGUpIHtcbiAgICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlW3N0eWxlXSA9IHZhbDtcbiAgICAgICAgIH0sIHRoaXMpO1xuICAgfVxuXG4gICAvKipcbiAgICAqIENsb25lIHRoZSBJY29uIERPTSBlbGVtZW50LlxuICAgICovXG4gICBmdW5jdGlvbiBjbG9uZVNWRygpe1xuICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmNsb25lTm9kZSh0cnVlKTtcbiAgIH1cblxuIH1cblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy5pbnB1dFxuICovXG5cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLmlucHV0JywgW1xuICAnbWF0ZXJpYWwuY29yZSdcbl0pXG4gIC5kaXJlY3RpdmUoJ21kSW5wdXRDb250YWluZXInLCBtZElucHV0Q29udGFpbmVyRGlyZWN0aXZlKVxuICAuZGlyZWN0aXZlKCdsYWJlbCcsIGxhYmVsRGlyZWN0aXZlKVxuICAuZGlyZWN0aXZlKCdpbnB1dCcsIGlucHV0VGV4dGFyZWFEaXJlY3RpdmUpXG4gIC5kaXJlY3RpdmUoJ3RleHRhcmVhJywgaW5wdXRUZXh0YXJlYURpcmVjdGl2ZSlcbiAgLmRpcmVjdGl2ZSgnbWRNYXhsZW5ndGgnLCBtZE1heGxlbmd0aERpcmVjdGl2ZSlcbiAgLmRpcmVjdGl2ZSgncGxhY2Vob2xkZXInLCBwbGFjZWhvbGRlckRpcmVjdGl2ZSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbWRJbnB1dENvbnRhaW5lclxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLmlucHV0XG4gKlxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGA8bWQtaW5wdXQtY29udGFpbmVyPmAgaXMgdGhlIHBhcmVudCBvZiBhbnkgaW5wdXQgb3IgdGV4dGFyZWEgZWxlbWVudC5cbiAqXG4gKiBJbnB1dCBhbmQgdGV4dGFyZWEgZWxlbWVudHMgd2lsbCBub3QgYmVoYXZlIHByb3Blcmx5IHVubGVzcyB0aGUgbWQtaW5wdXQtY29udGFpbmVyXG4gKiBwYXJlbnQgaXMgcHJvdmlkZWQuXG4gKlxuICogQHBhcmFtIG1kLWlzLWVycm9yIHtleHByZXNzaW9uPX0gV2hlbiB0aGUgZ2l2ZW4gZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZSwgdGhlIGlucHV0IGNvbnRhaW5lciB3aWxsIGdvIGludG8gZXJyb3Igc3RhdGUuIERlZmF1bHRzIHRvIGVycm9yaW5nIGlmIHRoZSBpbnB1dCBoYXMgYmVlbiB0b3VjaGVkIGFuZCBpcyBpbnZhbGlkLlxuICogQHBhcmFtIG1kLW5vLWZsb2F0IHtib29sZWFuPX0gV2hlbiBwcmVzZW50LCBwbGFjZWhvbGRlcnMgd2lsbCBub3QgYmUgY29udmVydGVkIHRvIGZsb2F0aW5nIGxhYmVsc1xuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqXG4gKiA8bWQtaW5wdXQtY29udGFpbmVyPlxuICogICA8bGFiZWw+VXNlcm5hbWU8L2xhYmVsPlxuICogICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInVzZXIubmFtZVwiPlxuICogPC9tZC1pbnB1dC1jb250YWluZXI+XG4gKlxuICogPG1kLWlucHV0LWNvbnRhaW5lcj5cbiAqICAgPGxhYmVsPkRlc2NyaXB0aW9uPC9sYWJlbD5cbiAqICAgPHRleHRhcmVhIG5nLW1vZGVsPVwidXNlci5kZXNjcmlwdGlvblwiPjwvdGV4dGFyZWE+XG4gKiA8L21kLWlucHV0LWNvbnRhaW5lcj5cbiAqXG4gKiA8L2hsanM+XG4gKi9cbmZ1bmN0aW9uIG1kSW5wdXRDb250YWluZXJEaXJlY3RpdmUoJG1kVGhlbWluZywgJHBhcnNlKSB7XG4gIENvbnRhaW5lckN0cmwuJGluamVjdCA9IFtcIiRzY29wZVwiLCBcIiRlbGVtZW50XCIsIFwiJGF0dHJzXCJdO1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgbGluazogcG9zdExpbmssXG4gICAgY29udHJvbGxlcjogQ29udGFpbmVyQ3RybFxuICB9O1xuXG4gIGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgJG1kVGhlbWluZyhlbGVtZW50KTtcbiAgfVxuICBmdW5jdGlvbiBDb250YWluZXJDdHJsKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHNlbGYuaXNFcnJvckdldHRlciA9ICRhdHRycy5tZElzRXJyb3IgJiYgJHBhcnNlKCRhdHRycy5tZElzRXJyb3IpO1xuXG4gICAgc2VsZi5kZWxlZ2F0ZUNsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLmlucHV0LmZvY3VzKCk7XG4gICAgfTtcbiAgICBzZWxmLmVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICBzZWxmLnNldEZvY3VzZWQgPSBmdW5jdGlvbihpc0ZvY3VzZWQpIHtcbiAgICAgICRlbGVtZW50LnRvZ2dsZUNsYXNzKCdtZC1pbnB1dC1mb2N1c2VkJywgISFpc0ZvY3VzZWQpO1xuICAgIH07XG4gICAgc2VsZi5zZXRIYXNWYWx1ZSA9IGZ1bmN0aW9uKGhhc1ZhbHVlKSB7XG4gICAgICAkZWxlbWVudC50b2dnbGVDbGFzcygnbWQtaW5wdXQtaGFzLXZhbHVlJywgISFoYXNWYWx1ZSk7XG4gICAgfTtcbiAgICBzZWxmLnNldEludmFsaWQgPSBmdW5jdGlvbihpc0ludmFsaWQpIHtcbiAgICAgICRlbGVtZW50LnRvZ2dsZUNsYXNzKCdtZC1pbnB1dC1pbnZhbGlkJywgISFpc0ludmFsaWQpO1xuICAgIH07XG4gICAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzZWxmLmxhYmVsICYmIHNlbGYuaW5wdXQ7XG4gICAgfSwgZnVuY3Rpb24oaGFzTGFiZWxBbmRJbnB1dCkge1xuICAgICAgaWYgKGhhc0xhYmVsQW5kSW5wdXQgJiYgIXNlbGYubGFiZWwuYXR0cignZm9yJykpIHtcbiAgICAgICAgc2VsZi5sYWJlbC5hdHRyKCdmb3InLCBzZWxmLmlucHV0LmF0dHIoJ2lkJykpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5tZElucHV0Q29udGFpbmVyRGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkbWRUaGVtaW5nXCIsIFwiJHBhcnNlXCJdO1xuXG5mdW5jdGlvbiBsYWJlbERpcmVjdGl2ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6ICdeP21kSW5wdXRDb250YWluZXInLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjb250YWluZXJDdHJsKSB7XG4gICAgICBpZiAoIWNvbnRhaW5lckN0cmwgfHwgYXR0ci5tZE5vRmxvYXQpIHJldHVybjtcblxuICAgICAgY29udGFpbmVyQ3RybC5sYWJlbCA9IGVsZW1lbnQ7XG4gICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnRhaW5lckN0cmwubGFiZWwgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG1kSW5wdXRcbiAqIEByZXN0cmljdCBFXG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMuaW5wdXRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSB0aGUgYDxpbnB1dD5gIG9yIHRoZSAgYDx0ZXh0YXJlYT5gIGFzIGEgY2hpbGQgb2YgYW4gYDxtZC1pbnB1dC1jb250YWluZXI+YC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcj19IG1kLW1heGxlbmd0aCBUaGUgbWF4aW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyBhbGxvd2VkIGluIHRoaXMgaW5wdXQuIElmIHRoaXMgaXMgc3BlY2lmaWVkLCBhIGNoYXJhY3RlciBjb3VudGVyIHdpbGwgYmUgc2hvd24gdW5kZXJuZWF0aCB0aGUgaW5wdXQuPGJyLz48YnIvPlxuICogVGhlIHB1cnBvc2Ugb2YgKipgbWQtbWF4bGVuZ3RoYCoqIGlzIGV4YWN0bHkgdG8gc2hvdyB0aGUgbWF4IGxlbmd0aCBjb3VudGVyIHRleHQuIElmIHlvdSBkb24ndCB3YW50IHRoZSBjb3VudGVyIHRleHQgYW5kIG9ubHkgbmVlZCBcInBsYWluXCIgdmFsaWRhdGlvbiwgeW91IGNhbiB1c2UgdGhlIFwic2ltcGxlXCIgYG5nLW1heGxlbmd0aGAgb3IgbWF4bGVuZ3RoIGF0dHJpYnV0ZXMuXG4gKiBAcGFyYW0ge3N0cmluZz19IGFyaWEtbGFiZWwgQXJpYS1sYWJlbCBpcyByZXF1aXJlZCB3aGVuIG5vIGxhYmVsIGlzIHByZXNlbnQuICBBIHdhcm5pbmcgbWVzc2FnZSB3aWxsIGJlIGxvZ2dlZCBpbiB0aGUgY29uc29sZSBpZiBub3QgcHJlc2VudC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gcGxhY2Vob2xkZXIgQW4gYWx0ZXJuYXRpdmUgYXBwcm9hY2ggdG8gdXNpbmcgYXJpYS1sYWJlbCB3aGVuIHRoZSBsYWJlbCBpcyBub3QgcHJlc2VudC4gIFRoZSBwbGFjZWhvbGRlciB0ZXh0IGlzIGNvcGllZCB0byB0aGUgYXJpYS1sYWJlbCBhdHRyaWJ1dGUuXG4gKlxuICogQHVzYWdlXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogPG1kLWlucHV0LWNvbnRhaW5lcj5cbiAqICAgPGxhYmVsPkNvbG9yPC9sYWJlbD5cbiAqICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJjb2xvclwiIHJlcXVpcmVkIG1kLW1heGxlbmd0aD1cIjEwXCI+XG4gKiA8L21kLWlucHV0LWNvbnRhaW5lcj5cbiAqIDwvaGxqcz5cbiAqIDxoMz5XaXRoIEVycm9yczwvaDM+XG4gKlxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxmb3JtIG5hbWU9XCJ1c2VyRm9ybVwiPlxuICogICA8bWQtaW5wdXQtY29udGFpbmVyPlxuICogICAgIDxsYWJlbD5MYXN0IE5hbWU8L2xhYmVsPlxuICogICAgIDxpbnB1dCBuYW1lPVwibGFzdE5hbWVcIiBuZy1tb2RlbD1cImxhc3ROYW1lXCIgcmVxdWlyZWQgbWQtbWF4bGVuZ3RoPVwiMTBcIiBtaW5sZW5ndGg9XCI0XCI+XG4gKiAgICAgPGRpdiBuZy1tZXNzYWdlcz1cInVzZXJGb3JtLmxhc3ROYW1lLiRlcnJvclwiIG5nLXNob3c9XCJ1c2VyRm9ybS5sYXN0TmFtZS4kZGlydHlcIj5cbiAqICAgICAgIDxkaXYgbmctbWVzc2FnZT1cInJlcXVpcmVkXCI+VGhpcyBpcyByZXF1aXJlZCE8L2Rpdj5cbiAqICAgICAgIDxkaXYgbmctbWVzc2FnZT1cIm1kLW1heGxlbmd0aFwiPlRoYXQncyB0b28gbG9uZyE8L2Rpdj5cbiAqICAgICAgIDxkaXYgbmctbWVzc2FnZT1cIm1pbmxlbmd0aFwiPlRoYXQncyB0b28gc2hvcnQhPC9kaXY+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvbWQtaW5wdXQtY29udGFpbmVyPlxuICogICA8bWQtaW5wdXQtY29udGFpbmVyPlxuICogICAgIDxsYWJlbD5CaW9ncmFwaHk8L2xhYmVsPlxuICogICAgIDx0ZXh0YXJlYSBuYW1lPVwiYmlvXCIgbmctbW9kZWw9XCJiaW9ncmFwaHlcIiByZXF1aXJlZCBtZC1tYXhsZW5ndGg9XCIxNTBcIj48L3RleHRhcmVhPlxuICogICAgIDxkaXYgbmctbWVzc2FnZXM9XCJ1c2VyRm9ybS5iaW8uJGVycm9yXCIgbmctc2hvdz1cInVzZXJGb3JtLmJpby4kZGlydHlcIj5cbiAqICAgICAgIDxkaXYgbmctbWVzc2FnZT1cInJlcXVpcmVkXCI+VGhpcyBpcyByZXF1aXJlZCE8L2Rpdj5cbiAqICAgICAgIDxkaXYgbmctbWVzc2FnZT1cIm1kLW1heGxlbmd0aFwiPlRoYXQncyB0b28gbG9uZyE8L2Rpdj5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9tZC1pbnB1dC1jb250YWluZXI+XG4gKiAgIDxtZC1pbnB1dC1jb250YWluZXI+XG4gKiAgICAgPGlucHV0IGFyaWEtbGFiZWw9J3RpdGxlJyBuZy1tb2RlbD0ndGl0bGUnPlxuICogICA8L21kLWlucHV0LWNvbnRhaW5lcj5cbiAqICAgPG1kLWlucHV0LWNvbnRhaW5lcj5cbiAqICAgICA8aW5wdXQgcGxhY2Vob2xkZXI9J3RpdGxlJyBuZy1tb2RlbD0ndGl0bGUnPlxuICogICA8L21kLWlucHV0LWNvbnRhaW5lcj5cbiAqIDwvZm9ybT5cbiAqIDwvaGxqcz5cbiAqXG4gKiBSZXF1aXJlcyBbbmdNZXNzYWdlc10oaHR0cHM6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nTWVzc2FnZXMpLlxuICogQmVoYXZlcyBsaWtlIHRoZSBbQW5ndWxhckpTIGlucHV0IGRpcmVjdGl2ZV0oaHR0cHM6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nL2RpcmVjdGl2ZS9pbnB1dCkuXG4gKlxuICovXG5cbmZ1bmN0aW9uIGlucHV0VGV4dGFyZWFEaXJlY3RpdmUoJG1kVXRpbCwgJHdpbmRvdywgJG1kQXJpYSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgcmVxdWlyZTogWydeP21kSW5wdXRDb250YWluZXInLCAnP25nTW9kZWwnXSxcbiAgICBsaW5rOiBwb3N0TGlua1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuXG4gICAgdmFyIGNvbnRhaW5lckN0cmwgPSBjdHJsc1swXTtcbiAgICB2YXIgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXSB8fCAkbWRVdGlsLmZha2VOZ01vZGVsKCk7XG4gICAgdmFyIGlzUmVhZG9ubHkgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRyLnJlYWRvbmx5KTtcblxuICAgIGlmICggIWNvbnRhaW5lckN0cmwgKSByZXR1cm47XG4gICAgaWYgKGNvbnRhaW5lckN0cmwuaW5wdXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIjxtZC1pbnB1dC1jb250YWluZXI+IGNhbiBvbmx5IGhhdmUgKm9uZSogPGlucHV0PiBvciA8dGV4dGFyZWE+IGNoaWxkIGVsZW1lbnQhXCIpO1xuICAgIH1cbiAgICBjb250YWluZXJDdHJsLmlucHV0ID0gZWxlbWVudDtcblxuICAgIGlmKCFjb250YWluZXJDdHJsLmxhYmVsKSB7XG4gICAgICAkbWRBcmlhLmV4cGVjdChlbGVtZW50LCAnYXJpYS1sYWJlbCcsIGVsZW1lbnQuYXR0cigncGxhY2Vob2xkZXInKSk7XG4gICAgfVxuXG4gICAgZWxlbWVudC5hZGRDbGFzcygnbWQtaW5wdXQnKTtcbiAgICBpZiAoIWVsZW1lbnQuYXR0cignaWQnKSkge1xuICAgICAgZWxlbWVudC5hdHRyKCdpZCcsICdpbnB1dF8nICsgJG1kVXRpbC5uZXh0VWlkKCkpO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50WzBdLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJykge1xuICAgICAgc2V0dXBUZXh0YXJlYSgpO1xuICAgIH1cblxuICAgIHZhciBpc0Vycm9yR2V0dGVyID0gY29udGFpbmVyQ3RybC5pc0Vycm9yR2V0dGVyIHx8IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5nTW9kZWxDdHJsLiRpbnZhbGlkICYmIG5nTW9kZWxDdHJsLiR0b3VjaGVkO1xuICAgIH07XG4gICAgc2NvcGUuJHdhdGNoKGlzRXJyb3JHZXR0ZXIsIGNvbnRhaW5lckN0cmwuc2V0SW52YWxpZCk7XG5cbiAgICBuZ01vZGVsQ3RybC4kcGFyc2Vycy5wdXNoKG5nTW9kZWxQaXBlbGluZUNoZWNrVmFsdWUpO1xuICAgIG5nTW9kZWxDdHJsLiRmb3JtYXR0ZXJzLnB1c2gobmdNb2RlbFBpcGVsaW5lQ2hlY2tWYWx1ZSk7XG5cbiAgICBlbGVtZW50Lm9uKCdpbnB1dCcsIGlucHV0Q2hlY2tWYWx1ZSk7XG5cbiAgICBpZiAoIWlzUmVhZG9ubHkpIHtcbiAgICAgIGVsZW1lbnRcbiAgICAgICAgLm9uKCdmb2N1cycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgY29udGFpbmVyQ3RybC5zZXRGb2N1c2VkKHRydWUpO1xuICAgICAgICB9KVxuICAgICAgICAub24oJ2JsdXInLCBmdW5jdGlvbihldikge1xuICAgICAgICAgIGNvbnRhaW5lckN0cmwuc2V0Rm9jdXNlZChmYWxzZSk7XG4gICAgICAgICAgaW5wdXRDaGVja1ZhbHVlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgLy9uZ01vZGVsQ3RybC4kc2V0VG91Y2hlZCgpO1xuICAgIC8vaWYoIG5nTW9kZWxDdHJsLiRpbnZhbGlkICkgY29udGFpbmVyQ3RybC5zZXRJbnZhbGlkKCk7XG5cbiAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICBjb250YWluZXJDdHJsLnNldEZvY3VzZWQoZmFsc2UpO1xuICAgICAgY29udGFpbmVyQ3RybC5zZXRIYXNWYWx1ZShmYWxzZSk7XG4gICAgICBjb250YWluZXJDdHJsLmlucHV0ID0gbnVsbDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmdNb2RlbFBpcGVsaW5lQ2hlY2tWYWx1ZShhcmcpIHtcbiAgICAgIGNvbnRhaW5lckN0cmwuc2V0SGFzVmFsdWUoIW5nTW9kZWxDdHJsLiRpc0VtcHR5KGFyZykpO1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5wdXRDaGVja1ZhbHVlKCkge1xuICAgICAgLy8gQW4gaW5wdXQncyB2YWx1ZSBjb3VudHMgaWYgaXRzIGxlbmd0aCA+IDAsXG4gICAgICAvLyBvciBpZiB0aGUgaW5wdXQncyB2YWxpZGl0eSBzdGF0ZSBzYXlzIGl0IGhhcyBiYWQgaW5wdXQgKGVnIHN0cmluZyBpbiBhIG51bWJlciBpbnB1dClcbiAgICAgIGNvbnRhaW5lckN0cmwuc2V0SGFzVmFsdWUoZWxlbWVudC52YWwoKS5sZW5ndGggPiAwIHx8IChlbGVtZW50WzBdLnZhbGlkaXR5fHx7fSkuYmFkSW5wdXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldHVwVGV4dGFyZWEoKSB7XG4gICAgICB2YXIgbm9kZSA9IGVsZW1lbnRbMF07XG4gICAgICB2YXIgb25DaGFuZ2VUZXh0YXJlYSA9ICRtZFV0aWwuZGVib3VuY2UoZ3Jvd1RleHRhcmVhLCAxKTtcblxuICAgICAgZnVuY3Rpb24gcGlwZWxpbmVMaXN0ZW5lcih2YWx1ZSkge1xuICAgICAgICBvbkNoYW5nZVRleHRhcmVhKCk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5nTW9kZWxDdHJsKSB7XG4gICAgICAgIG5nTW9kZWxDdHJsLiRmb3JtYXR0ZXJzLnB1c2gocGlwZWxpbmVMaXN0ZW5lcik7XG4gICAgICAgIG5nTW9kZWxDdHJsLiR2aWV3Q2hhbmdlTGlzdGVuZXJzLnB1c2gocGlwZWxpbmVMaXN0ZW5lcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbkNoYW5nZVRleHRhcmVhKCk7XG4gICAgICB9XG4gICAgICBlbGVtZW50Lm9uKCdrZXlkb3duIGlucHV0Jywgb25DaGFuZ2VUZXh0YXJlYSk7XG4gICAgICBlbGVtZW50Lm9uKCdzY3JvbGwnLCBvblNjcm9sbCk7XG4gICAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykub24oJ3Jlc2l6ZScsIG9uQ2hhbmdlVGV4dGFyZWEpO1xuXG4gICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vZmYoJ3Jlc2l6ZScsIG9uQ2hhbmdlVGV4dGFyZWEpO1xuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIGdyb3dUZXh0YXJlYSgpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5oZWlnaHQgPSBcImF1dG9cIjtcbiAgICAgICAgbm9kZS5zY3JvbGxUb3AgPSAwO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gZ2V0SGVpZ2h0KCk7XG4gICAgICAgIGlmIChoZWlnaHQpIG5vZGUuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0SGVpZ2h0ICgpIHtcbiAgICAgICAgdmFyIGxpbmUgPSBub2RlLnNjcm9sbEhlaWdodCAtIG5vZGUub2Zmc2V0SGVpZ2h0O1xuICAgICAgICByZXR1cm4gbm9kZS5vZmZzZXRIZWlnaHQgKyAobGluZSA+IDAgPyBsaW5lIDogMCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG9uU2Nyb2xsKGUpIHtcbiAgICAgICAgbm9kZS5zY3JvbGxUb3AgPSAwO1xuICAgICAgICAvLyBmb3Igc21vb3RoIG5ldyBsaW5lIGFkZGluZ1xuICAgICAgICB2YXIgbGluZSA9IG5vZGUuc2Nyb2xsSGVpZ2h0IC0gbm9kZS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIHZhciBoZWlnaHQgPSBub2RlLm9mZnNldEhlaWdodCArIGxpbmU7XG4gICAgICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmlucHV0VGV4dGFyZWFEaXJlY3RpdmUuJGluamVjdCA9IFtcIiRtZFV0aWxcIiwgXCIkd2luZG93XCIsIFwiJG1kQXJpYVwiXTtcblxuZnVuY3Rpb24gbWRNYXhsZW5ndGhEaXJlY3RpdmUoJGFuaW1hdGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6IFsnbmdNb2RlbCcsICdebWRJbnB1dENvbnRhaW5lciddLFxuICAgIGxpbms6IHBvc3RMaW5rXG4gIH07XG5cbiAgZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG4gICAgdmFyIG1heGxlbmd0aDtcbiAgICB2YXIgbmdNb2RlbEN0cmwgPSBjdHJsc1swXTtcbiAgICB2YXIgY29udGFpbmVyQ3RybCA9IGN0cmxzWzFdO1xuICAgIHZhciBjaGFyQ291bnRFbCA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdiBjbGFzcz1cIm1kLWNoYXItY291bnRlclwiPicpO1xuXG4gICAgLy8gU3RvcCBtb2RlbCBmcm9tIHRyaW1taW5nLiBUaGlzIG1ha2VzIGl0IHNvIHdoaXRlc3BhY2VcbiAgICAvLyBvdmVyIHRoZSBtYXhsZW5ndGggc3RpbGwgY291bnRzIGFzIGludmFsaWQuXG4gICAgYXR0ci4kc2V0KCduZ1RyaW0nLCAnZmFsc2UnKTtcbiAgICBjb250YWluZXJDdHJsLmVsZW1lbnQuYXBwZW5kKGNoYXJDb3VudEVsKTtcblxuICAgIG5nTW9kZWxDdHJsLiRmb3JtYXR0ZXJzLnB1c2gocmVuZGVyQ2hhckNvdW50KTtcbiAgICBuZ01vZGVsQ3RybC4kdmlld0NoYW5nZUxpc3RlbmVycy5wdXNoKHJlbmRlckNoYXJDb3VudCk7XG4gICAgZWxlbWVudC5vbignaW5wdXQga2V5ZG93bicsIGZ1bmN0aW9uKCkge1xuICAgICAgcmVuZGVyQ2hhckNvdW50KCk7IC8vbWFrZSBzdXJlIGl0J3MgY2FsbGVkIHdpdGggbm8gYXJnc1xuICAgIH0pO1xuXG4gICAgc2NvcGUuJHdhdGNoKGF0dHIubWRNYXhsZW5ndGgsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBtYXhsZW5ndGggPSB2YWx1ZTtcbiAgICAgIGlmIChhbmd1bGFyLmlzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZSA+IDApIHtcbiAgICAgICAgaWYgKCFjaGFyQ291bnRFbC5wYXJlbnQoKS5sZW5ndGgpIHtcbiAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjaGFyQ291bnRFbCwgY29udGFpbmVyQ3RybC5lbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChjb250YWluZXJDdHJsLmVsZW1lbnRbMF0ubGFzdEVsZW1lbnRDaGlsZCkpO1xuICAgICAgICB9XG4gICAgICAgIHJlbmRlckNoYXJDb3VudCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGFuaW1hdGUubGVhdmUoY2hhckNvdW50RWwpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbmdNb2RlbEN0cmwuJHZhbGlkYXRvcnNbJ21kLW1heGxlbmd0aCddID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICBpZiAoIWFuZ3VsYXIuaXNOdW1iZXIobWF4bGVuZ3RoKSB8fCBtYXhsZW5ndGggPCAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuICggbW9kZWxWYWx1ZSB8fCBlbGVtZW50LnZhbCgpIHx8IHZpZXdWYWx1ZSB8fCAnJyApLmxlbmd0aCA8PSBtYXhsZW5ndGg7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlbmRlckNoYXJDb3VudCh2YWx1ZSkge1xuICAgICAgY2hhckNvdW50RWwudGV4dCggKCBlbGVtZW50LnZhbCgpIHx8IHZhbHVlIHx8ICcnICkubGVuZ3RoICsgJy8nICsgbWF4bGVuZ3RoICk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59XG5tZE1heGxlbmd0aERpcmVjdGl2ZS4kaW5qZWN0ID0gW1wiJGFuaW1hdGVcIl07XG5cbmZ1bmN0aW9uIHBsYWNlaG9sZGVyRGlyZWN0aXZlKCRsb2cpIHtcbiAgdmFyIGJsYWNrTGlzdEVsZW1lbnRzID0gWydNRC1TRUxFQ1QnXTtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICdeXj9tZElucHV0Q29udGFpbmVyJyxcbiAgICBwcmlvcml0eTogMjAwLFxuICAgIGxpbms6IHBvc3RMaW5rXG4gIH07XG5cbiAgZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGlucHV0Q29udGFpbmVyKSB7XG4gICAgaWYgKCFpbnB1dENvbnRhaW5lcikgcmV0dXJuO1xuICAgIGlmIChibGFja0xpc3RFbGVtZW50cy5pbmRleE9mKGVsZW1lbnRbMF0ubm9kZU5hbWUpICE9IC0xKSByZXR1cm47XG4gICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGlucHV0Q29udGFpbmVyLmVsZW1lbnQuYXR0cignbWQtbm8tZmxvYXQnKSkpIHJldHVybjtcblxuICAgIHZhciBwbGFjZWhvbGRlclRleHQgPSBhdHRyLnBsYWNlaG9sZGVyO1xuICAgIGVsZW1lbnQucmVtb3ZlQXR0cigncGxhY2Vob2xkZXInKTtcblxuICAgIGlmICggaW5wdXRDb250YWluZXIuZWxlbWVudC5maW5kKCdsYWJlbCcpLmxlbmd0aCA9PSAwICkge1xuICAgICAgdmFyIHBsYWNlaG9sZGVyID0gJzxsYWJlbCBuZy1jbGljaz1cImRlbGVnYXRlQ2xpY2soKVwiPicgKyBwbGFjZWhvbGRlclRleHQgKyAnPC9sYWJlbD4nO1xuXG4gICAgICBpbnB1dENvbnRhaW5lci5lbGVtZW50LmFkZENsYXNzKCdtZC1pY29uLWZsb2F0Jyk7XG4gICAgICBpbnB1dENvbnRhaW5lci5lbGVtZW50LnByZXBlbmQocGxhY2Vob2xkZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkbG9nLndhcm4oXCJUaGUgcGxhY2Vob2xkZXI9J1wiICsgcGxhY2Vob2xkZXJUZXh0ICsgXCInIHdpbGwgYmUgaWdub3JlZCBzaW5jZSB0aGlzIG1kLWlucHV0LWNvbnRhaW5lciBoYXMgYSBjaGlsZCBsYWJlbCBlbGVtZW50LlwiKTtcbiAgICB9XG5cbiAgfVxufVxucGxhY2Vob2xkZXJEaXJlY3RpdmUuJGluamVjdCA9IFtcIiRsb2dcIl07XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG1hdGVyaWFsLmNvbXBvbmVudHMubGlzdFxuICogQGRlc2NyaXB0aW9uXG4gKiBMaXN0IG1vZHVsZVxuICovXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5saXN0JywgW1xuICAnbWF0ZXJpYWwuY29yZSdcbl0pXG4gIC5jb250cm9sbGVyKCdNZExpc3RDb250cm9sbGVyJywgTWRMaXN0Q29udHJvbGxlcilcbiAgLmRpcmVjdGl2ZSgnbWRMaXN0JywgbWRMaXN0RGlyZWN0aXZlKVxuICAuZGlyZWN0aXZlKCdtZExpc3RJdGVtJywgbWRMaXN0SXRlbURpcmVjdGl2ZSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbWRMaXN0XG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMubGlzdFxuICpcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYDxtZC1saXN0PmAgZGlyZWN0aXZlIGlzIGEgbGlzdCBjb250YWluZXIgZm9yIDEuLm4gYDxtZC1saXN0LWl0ZW0+YCB0YWdzLlxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC1saXN0PlxuICogICA8bWQtbGlzdC1pdGVtIGNsYXNzPVwibWQtMi1saW5lXCIgbmctcmVwZWF0PVwiaXRlbSBpbiB0b2Rvc1wiPlxuICogICAgIDxtZC1jaGVja2JveCBuZy1tb2RlbD1cIml0ZW0uZG9uZVwiPjwvbWQtY2hlY2tib3g+XG4gKiAgICAgPGRpdiBjbGFzcz1cIm1kLWxpc3QtaXRlbS10ZXh0XCI+XG4gKiAgICAgICA8aDM+e3tpdGVtLnRpdGxlfX08L2gzPlxuICogICAgICAgPHA+e3tpdGVtLmRlc2NyaXB0aW9ufX08L3A+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvbWQtbGlzdC1pdGVtPlxuICogPC9tZC1saXN0PlxuICogPC9obGpzPlxuICovXG5cbmZ1bmN0aW9uIG1kTGlzdERpcmVjdGl2ZSgkbWRUaGVtaW5nKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICBjb21waWxlOiBmdW5jdGlvbih0RWwpIHtcbiAgICAgIHRFbFswXS5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnbGlzdCcpO1xuICAgICAgcmV0dXJuICRtZFRoZW1pbmc7XG4gICAgfVxuICB9O1xufVxubWRMaXN0RGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkbWRUaGVtaW5nXCJdO1xuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBtZExpc3RJdGVtXG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMubGlzdFxuICpcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYDxtZC1saXN0LWl0ZW0+YCBkaXJlY3RpdmUgaXMgYSBjb250YWluZXIgaW50ZW5kZWQgZm9yIHJvdyBpdGVtcyBpbiBhIGA8bWQtbGlzdD5gIGNvbnRhaW5lci5cbiAqXG4gKiBAdXNhZ2VcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiAgPG1kLWxpc3Q+XG4gKiAgICA8bWQtbGlzdC1pdGVtPlxuICogICAgICAgICAgICBJdGVtIGNvbnRlbnQgaW4gbGlzdFxuICogICAgPC9tZC1saXN0LWl0ZW0+XG4gKiAgPC9tZC1saXN0PlxuICogPC9obGpzPlxuICpcbiAqL1xuZnVuY3Rpb24gbWRMaXN0SXRlbURpcmVjdGl2ZSgkbWRBcmlhLCAkbWRDb25zdGFudCwgJHRpbWVvdXQpIHtcbiAgdmFyIHByb3hpZWRUeXBlcyA9IFsnbWQtY2hlY2tib3gnLCAnbWQtc3dpdGNoJ107XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICBjb250cm9sbGVyOiAnTWRMaXN0Q29udHJvbGxlcicsXG4gICAgY29tcGlsZTogZnVuY3Rpb24odEVsLCB0QXR0cnMpIHtcbiAgICAgIC8vIENoZWNrIGZvciBwcm94eSBjb250cm9scyAobm8gbmctY2xpY2sgb24gcGFyZW50LCBhbmQgYSBjb250cm9sIGluc2lkZSlcbiAgICAgIHZhciBzZWNvbmRhcnlJdGVtID0gdEVsWzBdLnF1ZXJ5U2VsZWN0b3IoJy5tZC1zZWNvbmRhcnknKTtcbiAgICAgIHZhciBoYXNQcm94aWVkRWxlbWVudDtcbiAgICAgIHZhciBwcm94eUVsZW1lbnQ7XG5cbiAgICAgIHRFbFswXS5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnbGlzdGl0ZW0nKTtcblxuICAgICAgaWYgKCF0QXR0cnMubmdDbGljaykge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgdHlwZTsgdHlwZSA9IHByb3hpZWRUeXBlc1tpXTsgKytpKSB7XG4gICAgICAgICAgaWYgKHByb3h5RWxlbWVudCA9IHRFbFswXS5xdWVyeVNlbGVjdG9yKHR5cGUpKSB7XG4gICAgICAgICAgICBoYXNQcm94aWVkRWxlbWVudCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc1Byb3hpZWRFbGVtZW50KSB7XG4gICAgICAgICAgd3JhcEluKCdkaXYnKTtcbiAgICAgICAgfSBlbHNlIGlmICghdEVsWzBdLnF1ZXJ5U2VsZWN0b3IoJ21kLWJ1dHRvbicpKSB7XG4gICAgICAgICAgdEVsLmFkZENsYXNzKCdtZC1uby1wcm94eScpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3cmFwSW4oJ2J1dHRvbicpO1xuICAgICAgfVxuICAgICAgc2V0dXBUb2dnbGVBcmlhKCk7XG5cblxuICAgICAgZnVuY3Rpb24gc2V0dXBUb2dnbGVBcmlhKCkge1xuICAgICAgICB2YXIgdG9nZ2xlVHlwZXMgPSBbJ21kLXN3aXRjaCcsICdtZC1jaGVja2JveCddO1xuICAgICAgICB2YXIgdG9nZ2xlO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCB0b2dnbGVUeXBlOyB0b2dnbGVUeXBlID0gdG9nZ2xlVHlwZXNbaV07ICsraSkge1xuICAgICAgICAgIGlmICh0b2dnbGUgPSB0RWwuZmluZCh0b2dnbGVUeXBlKVswXSkge1xuICAgICAgICAgICAgaWYgKCF0b2dnbGUuaGFzQXR0cmlidXRlKCdhcmlhLWxhYmVsJykpIHtcbiAgICAgICAgICAgICAgdmFyIHAgPSB0RWwuZmluZCgncCcpWzBdO1xuICAgICAgICAgICAgICBpZiAoIXApIHJldHVybjtcbiAgICAgICAgICAgICAgdG9nZ2xlLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsICdUb2dnbGUgJyArIHAudGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB3cmFwSW4odHlwZSkge1xuICAgICAgICB2YXIgY29udGFpbmVyO1xuICAgICAgICBpZiAodHlwZSA9PSAnZGl2Jykge1xuICAgICAgICAgIGNvbnRhaW5lciA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdiBjbGFzcz1cIm1kLW5vLXN0eWxlIG1kLWxpc3QtaXRlbS1pbm5lclwiPicpO1xuICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmQodEVsLmNvbnRlbnRzKCkpO1xuICAgICAgICAgIHRFbC5hZGRDbGFzcygnbWQtcHJveHktZm9jdXMnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250YWluZXIgPSBhbmd1bGFyLmVsZW1lbnQoJzxtZC1idXR0b24gY2xhc3M9XCJtZC1uby1zdHlsZVwiPjxkaXYgY2xhc3M9XCJtZC1saXN0LWl0ZW0taW5uZXJcIj48L2Rpdj48L21kLWJ1dHRvbj4nKTtcbiAgICAgICAgICB2YXIgY29waWVkQXR0cnMgPSBbJ25nLWNsaWNrJywgJ2FyaWEtbGFiZWwnLCAnbmctZGlzYWJsZWQnXTtcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2goY29waWVkQXR0cnMsIGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgICAgICAgIGlmICh0RWxbMF0uaGFzQXR0cmlidXRlKGF0dHIpKSB7XG4gICAgICAgICAgICAgIGNvbnRhaW5lclswXS5zZXRBdHRyaWJ1dGUoYXR0ciwgdEVsWzBdLmdldEF0dHJpYnV0ZShhdHRyKSk7XG4gICAgICAgICAgICAgIHRFbFswXS5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29udGFpbmVyLmNoaWxkcmVuKCkuZXEoMCkuYXBwZW5kKHRFbC5jb250ZW50cygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRFbFswXS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgIHRFbC5hcHBlbmQoY29udGFpbmVyKTtcblxuICAgICAgICBpZiAoc2Vjb25kYXJ5SXRlbSAmJiBzZWNvbmRhcnlJdGVtLmhhc0F0dHJpYnV0ZSgnbmctY2xpY2snKSkge1xuICAgICAgICAgICRtZEFyaWEuZXhwZWN0KHNlY29uZGFyeUl0ZW0sICdhcmlhLWxhYmVsJyk7XG4gICAgICAgICAgdmFyIGJ1dHRvbldyYXBwZXIgPSBhbmd1bGFyLmVsZW1lbnQoJzxtZC1idXR0b24gY2xhc3M9XCJtZC1zZWNvbmRhcnktY29udGFpbmVyIG1kLWljb24tYnV0dG9uXCI+Jyk7XG4gICAgICAgICAgYnV0dG9uV3JhcHBlci5hdHRyKCduZy1jbGljaycsIHNlY29uZGFyeUl0ZW0uZ2V0QXR0cmlidXRlKCduZy1jbGljaycpKTtcbiAgICAgICAgICBzZWNvbmRhcnlJdGVtLnJlbW92ZUF0dHJpYnV0ZSgnbmctY2xpY2snKTtcbiAgICAgICAgICBzZWNvbmRhcnlJdGVtLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgICBzZWNvbmRhcnlJdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ21kLXNlY29uZGFyeScpO1xuICAgICAgICAgIGJ1dHRvbldyYXBwZXIuYXBwZW5kKHNlY29uZGFyeUl0ZW0pO1xuICAgICAgICAgIHNlY29uZGFyeUl0ZW0gPSBidXR0b25XcmFwcGVyWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIGEgc2Vjb25kYXJ5IGl0ZW0gYW5kIG1vdmUgaXQgb3V0c2lkZVxuICAgICAgICBpZiAoIHNlY29uZGFyeUl0ZW0gJiYgKFxuICAgICAgICAgIHNlY29uZGFyeUl0ZW0uaGFzQXR0cmlidXRlKCduZy1jbGljaycpIHx8XG4gICAgICAgICAgICAoIHRBdHRycy5uZ0NsaWNrICYmXG4gICAgICAgICAgICAgaXNQcm94aWVkRWxlbWVudChzZWNvbmRhcnlJdGVtKSApXG4gICAgICAgICkpIHtcbiAgICAgICAgICB0RWwuYWRkQ2xhc3MoJ21kLXdpdGgtc2Vjb25kYXJ5Jyk7XG4gICAgICAgICAgdEVsLmFwcGVuZChzZWNvbmRhcnlJdGVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpc1Byb3hpZWRFbGVtZW50KGVsKSB7XG4gICAgICAgIHJldHVybiBwcm94aWVkVHlwZXMuaW5kZXhPZihlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSAhPSAtMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBvc3RMaW5rO1xuXG4gICAgICBmdW5jdGlvbiBwb3N0TGluaygkc2NvcGUsICRlbGVtZW50LCAkYXR0ciwgY3RybCkge1xuXG4gICAgICAgIHZhciBwcm94aWVzICAgID0gW10sXG4gICAgICAgICAgICBmaXJzdENoaWxkID0gJGVsZW1lbnRbMF0uZmlyc3RFbGVtZW50Q2hpbGQsXG4gICAgICAgICAgICBoYXNDbGljayAgID0gZmlyc3RDaGlsZCAmJiBmaXJzdENoaWxkLmhhc0F0dHJpYnV0ZSgnbmctY2xpY2snKTtcblxuICAgICAgICBjb21wdXRlUHJveGllcygpO1xuICAgICAgICBjb21wdXRlQ2xpY2thYmxlKCk7XG5cbiAgICAgICAgaWYgKCRlbGVtZW50Lmhhc0NsYXNzKCdtZC1wcm94eS1mb2N1cycpICYmIHByb3hpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHByb3hpZXMsIGZ1bmN0aW9uKHByb3h5KSB7XG4gICAgICAgICAgICBwcm94eSA9IGFuZ3VsYXIuZWxlbWVudChwcm94eSk7XG5cbiAgICAgICAgICAgICRzY29wZS5tb3VzZUFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgcHJveHkub24oJ21vdXNlZG93bicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAkc2NvcGUubW91c2VBY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICRzY29wZS5tb3VzZUFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignZm9jdXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKCRzY29wZS5tb3VzZUFjdGl2ZSA9PT0gZmFsc2UpIHsgJGVsZW1lbnQuYWRkQ2xhc3MoJ21kLWZvY3VzZWQnKTsgfVxuICAgICAgICAgICAgICBwcm94eS5vbignYmx1cicsIGZ1bmN0aW9uIHByb3h5T25CbHVyKCkge1xuICAgICAgICAgICAgICAgICRlbGVtZW50LnJlbW92ZUNsYXNzKCdtZC1mb2N1c2VkJyk7XG4gICAgICAgICAgICAgICAgcHJveHkub2ZmKCdibHVyJywgcHJveHlPbkJsdXIpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY29tcHV0ZVByb3hpZXMoKSB7XG4gICAgICAgICAgdmFyIGNoaWxkcmVuID0gJGVsZW1lbnQuY2hpbGRyZW4oKTtcbiAgICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoICYmICFjaGlsZHJlblswXS5oYXNBdHRyaWJ1dGUoJ25nLWNsaWNrJykpIHtcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChwcm94aWVkVHlwZXMsIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGZpcnN0Q2hpbGQucXVlcnlTZWxlY3RvckFsbCh0eXBlKSwgZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgICAgICAgICBwcm94aWVzLnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb21wdXRlQ2xpY2thYmxlKCkge1xuICAgICAgICAgIGlmIChwcm94aWVzLmxlbmd0aCB8fCBoYXNDbGljaykge1xuICAgICAgICAgICAgJGVsZW1lbnQuYWRkQ2xhc3MoJ21kLWNsaWNrYWJsZScpO1xuXG4gICAgICAgICAgICBjdHJsLmF0dGFjaFJpcHBsZSgkc2NvcGUsIGFuZ3VsYXIuZWxlbWVudCgkZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcubWQtbm8tc3R5bGUnKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaGFzQ2xpY2sgJiYgIXByb3hpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgZmlyc3RDaGlsZCAmJiBmaXJzdENoaWxkLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgaWYgKGUudGFyZ2V0Lm5vZGVOYW1lICE9ICdJTlBVVCcgJiYgZS50YXJnZXQubm9kZU5hbWUgIT0gJ1RFWFRBUkVBJykge1xuICAgICAgICAgICAgICB2YXIga2V5Q29kZSA9IGUud2hpY2ggfHwgZS5rZXlDb2RlO1xuICAgICAgICAgICAgICBpZiAoa2V5Q29kZSA9PSAkbWRDb25zdGFudC5LRVlfQ09ERS5TUEFDRSkge1xuICAgICAgICAgICAgICAgIGlmIChmaXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICBmaXJzdENoaWxkLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgJGVsZW1lbnQub2ZmKCdjbGljaycpO1xuICAgICAgICAkZWxlbWVudC5vZmYoJ2tleXByZXNzJyk7XG5cbiAgICAgICAgaWYgKHByb3hpZXMubGVuZ3RoICYmIGZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAkZWxlbWVudC5jaGlsZHJlbigpLmVxKDApLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmIChmaXJzdENoaWxkLmNvbnRhaW5zKGUudGFyZ2V0KSkge1xuICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gocHJveGllcywgZnVuY3Rpb24ocHJveHkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHByb3h5ICYmICFwcm94eS5jb250YWlucyhlLnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChwcm94eSkudHJpZ2dlckhhbmRsZXIoJ2NsaWNrJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbm1kTGlzdEl0ZW1EaXJlY3RpdmUuJGluamVjdCA9IFtcIiRtZEFyaWFcIiwgXCIkbWRDb25zdGFudFwiLCBcIiR0aW1lb3V0XCJdO1xuXG4vKlxuICogQHByaXZhdGVcbiAqIEBuZ2RvYyBjb250cm9sbGVyXG4gKiBAbmFtZSBNZExpc3RDb250cm9sbGVyXG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMubGlzdFxuICpcbiAqL1xuZnVuY3Rpb24gTWRMaXN0Q29udHJvbGxlcigkc2NvcGUsICRlbGVtZW50LCAkbWRMaXN0SW5rUmlwcGxlKSB7XG4gIHZhciBjdHJsID0gdGhpcztcbiAgY3RybC5hdHRhY2hSaXBwbGUgPSBhdHRhY2hSaXBwbGU7XG5cbiAgZnVuY3Rpb24gYXR0YWNoUmlwcGxlIChzY29wZSwgZWxlbWVudCkge1xuICAgIHZhciBvcHRpb25zID0ge307XG4gICAgJG1kTGlzdElua1JpcHBsZS5hdHRhY2goc2NvcGUsIGVsZW1lbnQsIG9wdGlvbnMpO1xuICB9XG59XG5NZExpc3RDb250cm9sbGVyLiRpbmplY3QgPSBbXCIkc2NvcGVcIiwgXCIkZWxlbWVudFwiLCBcIiRtZExpc3RJbmtSaXBwbGVcIl07XG5cblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy5tZW51XG4gKi9cblxuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMubWVudScsIFtcbiAgJ21hdGVyaWFsLmNvcmUnLFxuICAnbWF0ZXJpYWwuY29tcG9uZW50cy5iYWNrZHJvcCdcbl0pXG4uZGlyZWN0aXZlKCdtZE1lbnUnLCBNZW51RGlyZWN0aXZlKVxuLmNvbnRyb2xsZXIoJ21kTWVudUN0cmwnLCBNZW51Q29udHJvbGxlcik7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbWRNZW51XG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMubWVudVxuICogQHJlc3RyaWN0IEVcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE1lbnVzIGFyZSBlbGVtZW50cyB0aGF0IG9wZW4gd2hlbiBjbGlja2VkLiBUaGV5IGFyZSB1c2VmdWwgZm9yIGRpc3BsYXlpbmdcbiAqIGFkZGl0aW9uYWwgb3B0aW9ucyB3aXRoaW4gdGhlIGNvbnRleHQgb2YgYW4gYWN0aW9uLlxuICpcbiAqIEV2ZXJ5IGBtZC1tZW51YCBtdXN0IHNwZWNpZnkgZXhhY3RseSB0d28gY2hpbGQgZWxlbWVudHMuIFRoZSBmaXJzdCBlbGVtZW50IGlzIHdoYXQgaXNcbiAqIGxlZnQgaW4gdGhlIERPTSBhbmQgaXMgdXNlZCB0byBvcGVuIHRoZSBtZW51LiBUaGlzIGVsZW1lbnQgaXMgY2FsbGVkIHRoZSB0cmlnZ2VyIGVsZW1lbnQuXG4gKiBUaGUgdHJpZ2dlciBlbGVtZW50J3Mgc2NvcGUgaGFzIGFjY2VzcyB0byBgJG1kT3Blbk1lbnUoKWBcbiAqIHdoaWNoIGl0IG1heSBjYWxsIHRvIG9wZW4gdGhlIG1lbnUuXG4gKlxuICogVGhlIHNlY29uZCBlbGVtZW50IGlzIHRoZSBgbWQtbWVudS1jb250ZW50YCBlbGVtZW50IHdoaWNoIHJlcHJlc2VudHMgdGhlXG4gKiBjb250ZW50cyBvZiB0aGUgbWVudSB3aGVuIGl0IGlzIG9wZW4uIFR5cGljYWxseSB0aGlzIHdpbGwgY29udGFpbiBgbWQtbWVudS1pdGVtYHMsXG4gKiBidXQgeW91IGNhbiBkbyBjdXN0b20gY29udGVudCBhcyB3ZWxsLlxuICpcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8bWQtbWVudT5cbiAqICA8IS0tIFRyaWdnZXIgZWxlbWVudCBpcyBhIG1kLWJ1dHRvbiB3aXRoIGFuIGljb24gLS0+XG4gKiAgPG1kLWJ1dHRvbiBuZy1jbGljaz1cIiRtZE9wZW5NZW51KClcIiBjbGFzcz1cIm1kLWljb24tYnV0dG9uXCIgYXJpYS1sYWJlbD1cIk9wZW4gc2FtcGxlIG1lbnVcIj5cbiAqICAgIDxtZC1pY29uIG1kLXN2Zy1pY29uPVwiY2FsbDpwaG9uZVwiPjwvbWQtaWNvbj5cbiAqICA8L21kLWJ1dHRvbj5cbiAqICA8bWQtbWVudS1jb250ZW50PlxuICogICAgPG1kLW1lbnUtaXRlbT48bWQtYnV0dG9uIG5nLWNsaWNrPVwiZG9Tb21ldGhpbmcoKVwiPkRvIFNvbWV0aGluZzwvbWQtYnV0dG9uPjwvbWQtbWVudS1pdGVtPlxuICogIDwvbWQtbWVudS1jb250ZW50PlxuICogPC9tZC1tZW51PlxuICogPC9obGpzPlxuXG4gKiAjIyBTaXppbmcgTWVudXNcbiAqXG4gKiBUaGUgd2lkdGggb2YgdGhlIG1lbnUgd2hlbiBpdCBpcyBvcGVuIG1heSBiZSBzcGVjaWZpZWQgYnkgc3BlY2lmeWluZyBhIGB3aWR0aGBcbiAqIGF0dHJpYnV0ZSBvbiB0aGUgYG1kLW1lbnUtY29udGVudGAgZWxlbWVudC5cbiAqIFNlZSB0aGUgW01hdGVyaWFsIERlc2lnbiBTcGVjXShodHRwOi8vd3d3Lmdvb2dsZS5jb20vZGVzaWduL3NwZWMvY29tcG9uZW50cy9tZW51cy5odG1sI21lbnVzLXNwZWNzKVxuICogZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICpcbiAqICMjIEFsaWduaW5nIE1lbnVzXG4gKlxuICogV2hlbiBhIG1lbnUgb3BlbnMsIGl0IGlzIGltcG9ydGFudCB0aGF0IHRoZSBjb250ZW50IGFsaWducyB3aXRoIHRoZSB0cmlnZ2VyIGVsZW1lbnQuXG4gKiBGYWlsdXJlIHRvIGFsaWduIG1lbnVzIGNhbiByZXN1bHQgaW4gamFycmluZyBleHBlcmllbmNlcyBmb3IgdXNlcnMgYXMgY29udGVudFxuICogc3VkZGVubHkgc2hpZnRzLiBUbyBoZWxwIHdpdGggdGhpcywgYG1kLW1lbnVgIHByb3ZpZGVzIHNlcnZlcmFsIEFQSXMgdG8gaGVscFxuICogd2l0aCBhbGlnbm1lbnQuXG4gKlxuICogIyMjIFRhcmdldCBNb2RlXG4gKlxuICogQnkgZGVmYXVsdCwgYG1kLW1lbnVgIHdpbGwgYXR0ZW1wdCB0byBhbGlnbiB0aGUgYG1kLW1lbnUtY29udGVudGAgYnkgYWxpZ25pbmdcbiAqIGRlc2lnbmF0ZWQgY2hpbGQgZWxlbWVudHMgaW4gYm90aCB0aGUgdHJpZ2dlciBhbmQgdGhlIG1lbnUgY29udGVudC5cbiAqXG4gKiBUbyBzcGVjaWZ5IHRoZSBhbGlnbm1lbnQgZWxlbWVudCBpbiB0aGUgYHRyaWdnZXJgIHlvdSBjYW4gdXNlIHRoZSBgbWQtbWVudS1vcmlnaW5gXG4gKiBhdHRyaWJ1dGUgb24gYSBjaGlsZCBlbGVtZW50LiBJZiBubyBgbWQtbWVudS1vcmlnaW5gIGlzIHNwZWNpZmllZCwgdGhlIGBtZC1tZW51YFxuICogd2lsbCBiZSB1c2VkIGFzIHRoZSBvcmlnaW4gZWxlbWVudC5cbiAqXG4gKiBTaW1pbGFybHksIHRoZSBgbWQtbWVudS1jb250ZW50YCBtYXkgc3BlY2lmeSBhIGBtZC1tZW51LWFsaWduLXRhcmdldGAgZm9yIGFcbiAqIGBtZC1tZW51LWl0ZW1gIHRvIHNwZWNpZnkgdGhlIG5vZGUgdGhhdCBpdCBzaG91bGQgdHJ5IGFuZCBhbGlnbiB3aXRoLlxuICpcbiAqIEluIHRoaXMgZXhhbXBsZSBjb2RlLCB3ZSBzcGVjaWZ5IGFuIGljb24gdG8gYmUgb3VyIG9yaWdpbiBlbGVtZW50LCBhbmQgYW5cbiAqIGljb24gaW4gb3VyIG1lbnUgY29udGVudCB0byBiZSBvdXIgYWxpZ25tZW50IHRhcmdldC4gVGhpcyBlbnN1cmVzIHRoYXQgYm90aFxuICogaWNvbnMgYXJlIGFsaWduZWQgd2hlbiB0aGUgbWVudSBvcGVucy5cbiAqXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogPG1kLW1lbnU+XG4gKiAgPG1kLWJ1dHRvbiBuZy1jbGljaz1cIiRtZE9wZW5NZW51KClcIiBjbGFzcz1cIm1kLWljb24tYnV0dG9uXCIgYXJpYS1sYWJlbD1cIk9wZW4gc29tZSBtZW51XCI+XG4gKiAgICA8bWQtaWNvbiBtZC1tZW51LW9yaWdpbiBtZC1zdmctaWNvbj1cImNhbGw6cGhvbmVcIj48L21kLWljb24+XG4gKiAgPC9tZC1idXR0b24+XG4gKiAgPG1kLW1lbnUtY29udGVudD5cbiAqICAgIDxtZC1tZW51LWl0ZW0+XG4gKiAgICAgIDxtZC1idXR0b24gbmctY2xpY2s9XCJkb1NvbWV0aGluZygpXCIgYXJpYS1sYWJlbD1cIkRvIHNvbWV0aGluZ1wiPlxuICogICAgICAgIDxtZC1pY29uIG1kLW1lbnUtYWxpZ24tdGFyZ2V0IG1kLXN2Zy1pY29uPVwiY2FsbDpwaG9uZVwiPjwvbWQtaWNvbj5cbiAqICAgICAgICBEbyBTb21ldGhpbmdcbiAqICAgICAgPC9tZC1idXR0b24+XG4gKiAgICA8L21kLW1lbnUtaXRlbT5cbiAqICA8L21kLW1lbnUtY29udGVudD5cbiAqIDwvbWQtbWVudT5cbiAqIDwvaGxqcz5cbiAqXG4gKiBTb21ldGltZXMgd2Ugd2FudCB0byBzcGVjaWZ5IGFsaWdubWVudCBvbiB0aGUgcmlnaHQgc2lkZSBvZiBhbiBlbGVtZW50LCBmb3IgZXhhbXBsZVxuICogaWYgd2UgaGF2ZSBhIG1lbnUgb24gdGhlIHJpZ2h0IHNpZGUgYSB0b29sYmFyLCB3ZSB3YW50IHRvIHJpZ2h0IGFsaWduIG91ciBtZW51IGNvbnRlbnQuXG4gKlxuICogV2UgY2FuIHNwZWNpZnkgdGhlIG9yaWdpbiBieSB1c2luZyB0aGUgYG1kLXBvc2l0aW9uLW1vZGVgIGF0dHJpYnV0ZSBvbiBib3RoXG4gKiB0aGUgYHhgIGFuZCBgeWAgYXhpcy4gUmlnaHQgbm93IG9ubHkgdGhlIGB4LWF4aXNgIGhhcyBtb3JlIHRoYW4gb25lIG9wdGlvbi5cbiAqIFlvdSBtYXkgc3BlY2lmeSB0aGUgZGVmYXVsdCBtb2RlIG9mIGB0YXJnZXQgdGFyZ2V0YCBvclxuICogYHRhcmdldC1yaWdodCB0YXJnZXRgIHRvIHNwZWNpZnkgYSByaWdodC1vcmllbnRlZCBhbGlnbm1lbnQgdGFyZ2V0LiBTZWUgdGhlXG4gKiBwb3NpdGlvbiBzZWN0aW9uIG9mIHRoZSBkZW1vcyBmb3IgbW9yZSBleGFtcGxlcy5cbiAqXG4gKiAjIyMgTWVudSBPZmZzZXRzXG4gKlxuICogSXQgaXMgc29tZXRpbWVzIHVuYXZvaWRhYmxlIHRvIG5lZWQgdG8gaGF2ZSBhIGRlZXBlciBsZXZlbCBvZiBjb250cm9sIGZvclxuICogdGhlIHBvc2l0aW9uaW5nIG9mIGEgbWVudSB0byBlbnN1cmUgcGVyZmVjdCBhbGlnbm1lbnQuIGBtZC1tZW51YCBwcm92aWRlc1xuICogdGhlIGBtZC1vZmZzZXRgIGF0dHJpYnV0ZSB0byBhbGxvdyBwaXhlbCBsZXZlbCBzcGVjaWZpY3R5IG9mIGFkanVzdGluZyB0aGVcbiAqIGV4YWN0IHBvc2l0aW9uaW5nLlxuICpcbiAqIFRoaXMgb2Zmc2V0IGlzIHByb3ZpZGVkIGluIHRoZSBmb3JtYXQgb2YgYHggeWAgb3IgYG5gIHdoZXJlIGBuYCB3aWxsIGJlIHVzZWRcbiAqIGluIGJvdGggdGhlIGB4YCBhbmQgYHlgIGF4aXMuXG4gKlxuICogRm9yIGV4YW1wbGUsIHRvIG1vdmUgYSBtZW51IGJ5IGAycHhgIGZyb20gdGhlIHRvcCwgd2UgY2FuIHVzZTpcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8bWQtbWVudSBtZC1vZmZzZXQ9XCIyIDBcIj5cbiAqICAgPCEtLSBtZW51LWNvbnRlbnQgLS0+XG4gKiA8L21kLW1lbnU+XG4gKiA8L2hsanM+XG4gKlxuICogQHVzYWdlXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogPG1kLW1lbnU+XG4gKiAgPG1kLWJ1dHRvbiBuZy1jbGljaz1cIiRtZE9wZW5NZW51KClcIiBjbGFzcz1cIm1kLWljb24tYnV0dG9uXCI+XG4gKiAgICA8bWQtaWNvbiBtZC1zdmctaWNvbj1cImNhbGw6cGhvbmVcIj48L21kLWljb24+XG4gKiAgPC9tZC1idXR0b24+XG4gKiAgPG1kLW1lbnUtY29udGVudD5cbiAqICAgIDxtZC1tZW51LWl0ZW0+PG1kLWJ1dHRvbiBuZy1jbGljaz1cImRvU29tZXRoaW5nKClcIj5EbyBTb21ldGhpbmc8L21kLWJ1dHRvbj48L21kLW1lbnUtaXRlbT5cbiAqICA8L21kLW1lbnUtY29udGVudD5cbiAqIDwvbWQtbWVudT5cbiAqIDwvaGxqcz5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWQtcG9zaXRpb24tbW9kZSBUaGUgcG9zaXRpb24gbW9kZSBpbiB0aGUgZm9ybSBvZlxuICAgICAgICAgICAgIGB4YCwgYHlgLiBEZWZhdWx0IHZhbHVlIGlzIGB0YXJnZXRgLGB0YXJnZXRgLiBSaWdodCBub3cgdGhlIGB4YCBheGlzXG4gICAgICAgICAgICAgYWxzbyBzdXBwcG9ydHMgYHRhcmdldC1yaWdodGAuXG4gKiBAcGFyYW0ge3N0cmluZ30gbWQtb2Zmc2V0IEFuIG9mZnNldCB0byBhcHBseSB0byB0aGUgZHJvcGRvd24gYWZ0ZXIgcG9zaXRpb25pbmdcbiAgICAgICAgICAgICBgeGAsIGB5YC4gRGVmYXVsdCB2YWx1ZSBpcyBgMGAsYDBgLlxuICpcbiAqL1xuXG5mdW5jdGlvbiBNZW51RGlyZWN0aXZlKCRtZE1lbnUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6ICdtZE1lbnUnLFxuICAgIGNvbnRyb2xsZXI6ICdtZE1lbnVDdHJsJywgLy8gZW1wdHkgZnVuY3Rpb24gdG8gYmUgYnVpbHQgYnkgbGlua1xuICAgIHNjb3BlOiB0cnVlLFxuICAgIGNvbXBpbGU6IGNvbXBpbGVcbiAgfTtcblxuICBmdW5jdGlvbiBjb21waWxlKHRlbXBsYXRlRWxlbWVudCkge1xuICAgIHRlbXBsYXRlRWxlbWVudC5hZGRDbGFzcygnbWQtbWVudScpO1xuICAgIHZhciB0cmlnZ2VyRWxlbWVudCA9IHRlbXBsYXRlRWxlbWVudC5jaGlsZHJlbigpWzBdO1xuICAgIGlmICghdHJpZ2dlckVsZW1lbnQuaGFzQXR0cmlidXRlKCduZy1jbGljaycpKSB7XG4gICAgICB0cmlnZ2VyRWxlbWVudCA9IHRyaWdnZXJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tuZy1jbGlja10nKTtcbiAgICB9XG4gICAgdHJpZ2dlckVsZW1lbnQgJiYgdHJpZ2dlckVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhhc3BvcHVwJywgJ3RydWUnKTtcbiAgICBpZiAodGVtcGxhdGVFbGVtZW50LmNoaWxkcmVuKCkubGVuZ3RoICE9IDIpIHtcbiAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIEhUTUwgZm9yIG1kLW1lbnUuIEV4cGVjdGVkIHR3byBjaGlsZHJlbiBlbGVtZW50cy4nKTtcbiAgICB9XG4gICAgcmV0dXJuIGxpbms7XG4gIH1cblxuICBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbWRNZW51Q3RybCkge1xuXG4gICAgLy8gTW92ZSBldmVyeXRoaW5nIGludG8gYSBtZC1tZW51LWNvbnRhaW5lciBhbmQgcGFzcyBpdCB0byB0aGUgY29udHJvbGxlclxuICAgIHZhciBtZW51Q29udGFpbmVyID0gYW5ndWxhci5lbGVtZW50KFxuICAgICAgJzxkaXYgY2xhc3M9XCJtZC1vcGVuLW1lbnUtY29udGFpbmVyIG1kLXdoaXRlZnJhbWUtejJcIj48L2Rpdj4nXG4gICAgKTtcbiAgICB2YXIgbWVudUNvbnRlbnRzID0gZWxlbWVudC5jaGlsZHJlbigpWzFdO1xuICAgIG1lbnVDb250YWluZXIuYXBwZW5kKG1lbnVDb250ZW50cyk7XG4gICAgbWRNZW51Q3RybC5pbml0KG1lbnVDb250YWluZXIpO1xuXG4gICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKG1kTWVudUN0cmwuaXNPcGVuKSB7XG4gICAgICAgIG1lbnVDb250YWluZXIucmVtb3ZlKCk7XG4gICAgICAgIG1kTWVudUN0cmwuY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICB9XG59XG5NZW51RGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkbWRNZW51XCJdO1xuXG5mdW5jdGlvbiBNZW51Q29udHJvbGxlcigkbWRNZW51LCAkYXR0cnMsICRlbGVtZW50LCAkc2NvcGUpIHtcblxuICB2YXIgbWVudUNvbnRhaW5lcjtcbiAgdmFyIGN0cmwgPSB0aGlzO1xuICB2YXIgdHJpZ2dlckVsZW1lbnQ7XG5cbiAgLy8gQ2FsbGVkIGJ5IG91ciBsaW5raW5nIGZuIHRvIHByb3ZpZGUgYWNjZXNzIHRvIHRoZSBtZW51LWNvbnRlbnRcbiAgLy8gZWxlbWVudCByZW1vdmVkIGR1cmluZyBsaW5rXG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKHNldE1lbnVDb250YWluZXIpIHtcbiAgICBtZW51Q29udGFpbmVyID0gc2V0TWVudUNvbnRhaW5lcjtcbiAgICB0cmlnZ2VyRWxlbWVudCA9ICRlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJ1tuZy1jbGlja10nKTtcbiAgfTtcblxuICAvLyBVc2VzIHRoZSAkbWRNZW51IGludGVyaW0gZWxlbWVudCBzZXJ2aWNlIHRvIG9wZW4gdGhlIG1lbnUgY29udGVudHNcbiAgdGhpcy5vcGVuID0gZnVuY3Rpb24gb3Blbk1lbnUoKSB7XG4gICAgY3RybC5pc09wZW4gPSB0cnVlO1xuICAgIHRyaWdnZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgJG1kTWVudS5zaG93KHtcbiAgICAgIG1kTWVudUN0cmw6IGN0cmwsXG4gICAgICBlbGVtZW50OiBtZW51Q29udGFpbmVyLFxuICAgICAgdGFyZ2V0OiAkZWxlbWVudFswXVxuICAgIH0pO1xuICB9O1xuICAvLyBFeHBvc2UgYSBvcGVuIGZ1bmN0aW9uIHRvIHRoZSBjaGlsZCBzY29wZSBmb3IgaHRtbCB0byB1c2VcbiAgJHNjb3BlLiRtZE9wZW5NZW51ID0gdGhpcy5vcGVuO1xuXG4gIC8vIFVzZSB0aGUgJG1kTWVudSBpbnRlcmltIGVsZW1lbnQgc2VydmljZSB0byBjbG9zZSB0aGUgbWVudSBjb250ZW50c1xuICB0aGlzLmNsb3NlID0gZnVuY3Rpb24gY2xvc2VNZW51KHNraXBGb2N1cykge1xuICAgIGN0cmwuaXNPcGVuID0gZmFsc2U7XG4gICAgdHJpZ2dlckVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgJG1kTWVudS5oaWRlKCk7XG5cbiAgICBpZiAoIXNraXBGb2N1cykge1xuICAgICAgJGVsZW1lbnQuY2hpbGRyZW4oKVswXS5mb2N1cygpO1xuICAgIH1cbiAgfTtcblxuICAvLyBCdWlsZCBhIG5pY2Ugb2JqZWN0IG91dCBvZiBvdXIgc3RyaW5nIGF0dHJpYnV0ZSB3aGljaCBzcGVjaWZpZXMgdGhlXG4gIC8vIHRhcmdldCBtb2RlIGZvciBsZWZ0IGFuZCB0b3AgcG9zaXRpb25pbmdcbiAgdGhpcy5wb3NpdGlvbk1vZGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXR0YWNobWVudCA9ICgkYXR0cnMubWRQb3NpdGlvbk1vZGUgfHwgJ3RhcmdldCcpLnNwbGl0KCcgJyk7XG5cbiAgICAvLyBJZiBhdHRhY2htZW50IGlzIGEgc2luZ2xlIGl0ZW0sIGR1cGxpY2F0ZSBpdCBmb3Igb3VyIHNlY29uZCB2YWx1ZS5cbiAgICAvLyBpZS4gJ3RhcmdldCcgLT4gJ3RhcmdldCB0YXJnZXQnXG4gICAgaWYgKGF0dGFjaG1lbnQubGVuZ3RoID09IDEpIHtcbiAgICAgIGF0dGFjaG1lbnQucHVzaChhdHRhY2htZW50WzBdKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogYXR0YWNobWVudFswXSxcbiAgICAgIHRvcDogYXR0YWNobWVudFsxXVxuICAgIH07XG4gIH07XG5cbiAgLy8gQnVpbGQgYSBuaWNlIG9iamVjdCBvdXQgb2Ygb3VyIHN0cmluZyBhdHRyaWJ1dGUgd2hpY2ggc3BlY2lmaWVzXG4gIC8vIHRoZSBvZmZzZXQgb2YgdG9wIGFuZCBsZWZ0IGluIHBpeGVscy5cbiAgdGhpcy5vZmZzZXRzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9mZnNldHMgPSAoJGF0dHJzLm1kT2Zmc2V0IHx8ICcwIDAnKS5zcGxpdCgnICcpLm1hcChwYXJzZUZsb2F0KTtcbiAgICBpZiAob2Zmc2V0cy5sZW5ndGggPT0gMikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogb2Zmc2V0c1swXSxcbiAgICAgICAgdG9wOiBvZmZzZXRzWzFdXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAob2Zmc2V0cy5sZW5ndGggPT0gMSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiBvZmZzZXRzWzBdLFxuICAgICAgICBsZWZ0OiBvZmZzZXRzWzBdXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBvZmZzZXRzIHNwZWNpZmllZC4gUGxlYXNlIGZvbGxvdyBmb3JtYXQgPHgsIHk+IG9yIDxuPicpO1xuICAgIH1cbiAgfTtcbn1cbk1lbnVDb250cm9sbGVyLiRpbmplY3QgPSBbXCIkbWRNZW51XCIsIFwiJGF0dHJzXCIsIFwiJGVsZW1lbnRcIiwgXCIkc2NvcGVcIl07XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5tZW51Jylcbi5wcm92aWRlcignJG1kTWVudScsIE1lbnVQcm92aWRlcik7XG5cbi8qXG4gKiBJbnRlcmltIGVsZW1lbnQgcHJvdmlkZXIgZm9yIHRoZSBtZW51LlxuICogSGFuZGxlcyBiZWhhdmlvciBmb3IgYSBtZW51IHdoaWxlIGl0IGlzIG9wZW4sIGluY2x1ZGluZzpcbiAqICAgIC0gaGFuZGxpbmcgYW5pbWF0aW5nIHRoZSBtZW51IG9wZW5pbmcvY2xvc2luZ1xuICogICAgLSBoYW5kbGluZyBrZXkvbW91c2UgZXZlbnRzIG9uIHRoZSBtZW51IGVsZW1lbnRcbiAqICAgIC0gaGFuZGxpbmcgZW5hYmxpbmcvZGlzYWJsaW5nIHNjcm9sbCB3aGlsZSB0aGUgbWVudSBpcyBvcGVuXG4gKiAgICAtIGhhbmRsaW5nIHJlZHJhd2luZyBkdXJpbmcgcmVzaXplcyBhbmQgb3JpZW50YXRpb24gY2hhbmdlc1xuICpcbiAqL1xuXG5mdW5jdGlvbiBNZW51UHJvdmlkZXIoJCRpbnRlcmltRWxlbWVudFByb3ZpZGVyKSB7XG4gIHZhciBNRU5VX0VER0VfTUFSR0lOID0gODtcblxuICBtZW51RGVmYXVsdE9wdGlvbnMuJGluamVjdCA9IFtcIiQkckFGXCIsIFwiJHdpbmRvd1wiLCBcIiRtZFV0aWxcIiwgXCIkbWRUaGVtaW5nXCIsIFwiJHRpbWVvdXRcIiwgXCIkbWRDb25zdGFudFwiLCBcIiRkb2N1bWVudFwiXTtcbiAgcmV0dXJuICQkaW50ZXJpbUVsZW1lbnRQcm92aWRlcignJG1kTWVudScpXG4gICAgLnNldERlZmF1bHRzKHtcbiAgICAgIG1ldGhvZHM6IFsndGFyZ2V0J10sXG4gICAgICBvcHRpb25zOiBtZW51RGVmYXVsdE9wdGlvbnNcbiAgICB9KTtcblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gbWVudURlZmF1bHRPcHRpb25zKCQkckFGLCAkd2luZG93LCAkbWRVdGlsLCAkbWRUaGVtaW5nLCAkdGltZW91dCwgJG1kQ29uc3RhbnQsICRkb2N1bWVudCkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXJlbnQ6ICdib2R5JyxcbiAgICAgIG9uU2hvdzogb25TaG93LFxuICAgICAgb25SZW1vdmU6IG9uUmVtb3ZlLFxuICAgICAgaGFzQmFja2Ryb3A6IHRydWUsXG4gICAgICBkaXNhYmxlUGFyZW50U2Nyb2xsOiB0cnVlLFxuICAgICAgc2tpcENvbXBpbGU6IHRydWUsXG4gICAgICB0aGVtYWJsZTogdHJ1ZVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBCb2lsZXJwbGF0ZSBpbnRlcmltRWxlbWVudCBvblNob3cgZnVuY3Rpb25cbiAgICAgKiBIYW5kbGVzIGluc2VydGluZyB0aGUgbWVudSBpbnRvIHRoZSBET00sIHBvc2l0aW9uaW5nIGl0LCBhbmQgd2lyaW5nIHVwXG4gICAgICogdmFyaW91cyBpbnRlcmFjdGlvbiBldmVudHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvblNob3coc2NvcGUsIGVsZW1lbnQsIG9wdHMpIHtcblxuICAgICAgLy8gU2FuaXRpemUgYW5kIHNldCBkZWZhdWx0cyBvbiBvcHRzXG4gICAgICBidWlsZE9wdHMob3B0cyk7XG5cbiAgICAgIC8vIFdpcmUgdXAgdGhlbWluZyBvbiBvdXIgbWVudSBlbGVtZW50XG4gICAgICAkbWRUaGVtaW5nLmluaGVyaXQob3B0cy5tZW51Q29udGVudEVsLCBvcHRzLnRhcmdldCk7XG5cbiAgICAgIC8vIFJlZ2lzdGVyIHZhcmlvdXMgbGlzdGVuZXJzIHRvIG1vdmUgbWVudSBvbiByZXNpemUvb3JpZW50YXRpb24gY2hhbmdlXG4gICAgICBoYW5kbGVSZXNpemluZygpO1xuXG4gICAgICAvLyBEaXNhYmxlIHNjcm9sbGluZ1xuICAgICAgaWYgKG9wdHMuZGlzYWJsZVBhcmVudFNjcm9sbCkge1xuICAgICAgICBvcHRzLnJlc3RvcmVTY3JvbGwgPSAkbWRVdGlsLmRpc2FibGVTY3JvbGxBcm91bmQob3B0cy5lbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gT25seSBhY3RpdmF0ZSBjbGljayBsaXN0ZW5lcnMgYWZ0ZXIgYSBzaG9ydCB0aW1lIHRvIHN0b3AgYWNjaWRlbnRhbCBkb3VibGUgdGFwcy9jbGlja3NcbiAgICAgIC8vIGZyb20gY2xpY2tpbmcgdGhlIHdyb25nIGl0ZW1cbiAgICAgICR0aW1lb3V0KGFjdGl2YXRlSW50ZXJhY3Rpb24sIDc1LCBmYWxzZSk7XG5cbiAgICAgIGlmIChvcHRzLmJhY2tkcm9wKSB7XG4gICAgICAgICRtZFRoZW1pbmcuaW5oZXJpdChvcHRzLmJhY2tkcm9wLCBvcHRzLnBhcmVudCk7XG4gICAgICAgIG9wdHMucGFyZW50LmFwcGVuZChvcHRzLmJhY2tkcm9wKTtcbiAgICAgIH1cbiAgICAgIHNob3dNZW51KCk7XG5cbiAgICAgIC8vIFJldHVybiB0aGUgcHJvbWlzZSBmb3Igd2hlbiBvdXIgbWVudSBpcyBkb25lIGFuaW1hdGluZyBpblxuICAgICAgcmV0dXJuICRtZFV0aWwudHJhbnNpdGlvbkVuZFByb21pc2UoZWxlbWVudCwge3RpbWVvdXQ6IDM1MH0pO1xuXG4gICAgICAvKiogQ2hlY2sgZm9yIHZhbGlkIG9wdHMgYW5kIHNldCBzb21lIHNhbmUgZGVmYXVsdHMgKi9cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkT3B0cygpIHtcbiAgICAgICAgaWYgKCFvcHRzLnRhcmdldCkge1xuICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgJyRtZE1lbnUuc2hvdygpIGV4cGVjdGVkIGEgdGFyZ2V0IHRvIGFuaW1hdGUgZnJvbSBpbiBvcHRpb25zLnRhcmdldCdcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGFuZ3VsYXIuZXh0ZW5kKG9wdHMsIHtcbiAgICAgICAgICBhbHJlYWR5T3BlbjogZmFsc2UsXG4gICAgICAgICAgaXNSZW1vdmVkOiBmYWxzZSxcbiAgICAgICAgICB0YXJnZXQ6IGFuZ3VsYXIuZWxlbWVudChvcHRzLnRhcmdldCksIC8vbWFrZSBzdXJlIGl0J3Mgbm90IGEgbmFrZWQgZG9tIG5vZGVcbiAgICAgICAgICBwYXJlbnQ6IGFuZ3VsYXIuZWxlbWVudChvcHRzLnBhcmVudCksXG4gICAgICAgICAgbWVudUNvbnRlbnRFbDogYW5ndWxhci5lbGVtZW50KGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignbWQtbWVudS1jb250ZW50JykpLFxuICAgICAgICAgIGJhY2tkcm9wOiBvcHRzLmhhc0JhY2tkcm9wICYmIGFuZ3VsYXIuZWxlbWVudCgnPG1kLWJhY2tkcm9wIGNsYXNzPVwibWQtbWVudS1iYWNrZHJvcCBtZC1jbGljay1jYXRjaGVyXCI+JylcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8qKiBXaXJldXAgdmFyaW91cyByZXNpemUgbGlzdGVuZXJzIGZvciBzY3JlZW4gY2hhbmdlcyAqL1xuICAgICAgZnVuY3Rpb24gaGFuZGxlUmVzaXppbmcoKSB7XG4gICAgICAgIG9wdHMucmVzaXplRm4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBwb3NpdGlvbk1lbnUoZWxlbWVudCwgb3B0cyk7XG4gICAgICAgIH07XG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vbigncmVzaXplJywgb3B0cy5yZXNpemVGbik7XG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vbignb3JpZW50YXRpb25jaGFuZ2UnLCBvcHRzLnJlc2l6ZUZuKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBQbGFjZSB0aGUgbWVudSBpbnRvIHRoZSBET00gYW5kIGNhbGwgcG9zaXRpb25pbmcgcmVsYXRlZCBmdW5jdGlvbnNcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gc2hvd01lbnUoKSB7XG4gICAgICAgIG9wdHMucGFyZW50LmFwcGVuZChlbGVtZW50KTtcblxuICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCdtZC1sZWF2ZScpO1xuICAgICAgICAvLyBLaWNrIG9mZiBvdXIgYW5pbWF0aW9uL3Bvc2l0aW9uaW5nIGJ1dCBmaXJzdCwgd2FpdCBhIGZldyBmcmFtZXNcbiAgICAgICAgLy8gc28gYWxsIG9mIG91ciBjb21wdXRlZCBwb3NpdGlvbnMvc2l6ZXMgYXJlIGFjY3VyYXRlXG4gICAgICAgICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcG9zaXRpb25NZW51KGVsZW1lbnQsIG9wdHMpO1xuICAgICAgICAgICAgLy8gV2FpdCBhIGZyYW1lIGJlZm9yZSBmYWRpbmcgaW4gbWVudSAobWQtYWN0aXZlKSBzbyB0aGF0IHdlIGRvbid0IHRyaWdnZXJcbiAgICAgICAgICAgIC8vIHRyYW5zaXRpb25zIG9uIHRoZSBtZW51IHBvc2l0aW9uIGNoYW5naW5nXG4gICAgICAgICAgICAkJHJBRihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnbWQtYWN0aXZlJyk7XG4gICAgICAgICAgICAgIG9wdHMuYWxyZWFkeU9wZW4gPSB0cnVlO1xuICAgICAgICAgICAgICBlbGVtZW50WzBdLnN0eWxlWyRtZENvbnN0YW50LkNTUy5UUkFOU0ZPUk1dID0gJyc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBBY3RpdmF0ZSBpbnRlcmFjdGlvbiBvbiB0aGUgbWVudS4gV2lyZSB1cCBrZXlib2FyZCBsaXN0ZXJucyBmb3JcbiAgICAgICAqIGNsaWNrcywga2V5cHJlc3NlcywgYmFja2Ryb3AgY2xvc2luZywgZXRjLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBhY3RpdmF0ZUludGVyYWN0aW9uKCkge1xuICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdtZC1jbGlja2FibGUnKTtcblxuICAgICAgICAvLyBjbG9zZSBvbiBiYWNrZHJvcCBjbGlja1xuICAgICAgICBvcHRzLmJhY2tkcm9wICYmIG9wdHMuYmFja2Ryb3Aub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIG9wdHMubWRNZW51Q3RybC5jbG9zZSh0cnVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gV2lyZSB1cCBrZXlib2FyZCBsaXN0ZW5lcnMuXG4gICAgICAgIC8vIENsb3NlIG9uIGVzY2FwZSwgZm9jdXMgbmV4dCBpdGVtIG9uIGRvd24gYXJyb3csIGZvY3VzIHByZXYgaXRlbSBvbiB1cFxuICAgICAgICBvcHRzLm1lbnVDb250ZW50RWwub24oJ2tleWRvd24nLCBmdW5jdGlvbihldikge1xuICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZXYua2V5Q29kZSkge1xuICAgICAgICAgICAgICBjYXNlICRtZENvbnN0YW50LktFWV9DT0RFLkVTQ0FQRTogb3B0cy5tZE1lbnVDdHJsLmNsb3NlKCk7IGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICRtZENvbnN0YW50LktFWV9DT0RFLlVQX0FSUk9XOiBmb2N1c01lbnVJdGVtKGV2LCBvcHRzLm1lbnVDb250ZW50RWwsIG9wdHMsIC0xKTsgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJG1kQ29uc3RhbnQuS0VZX0NPREUuRE9XTl9BUlJPVzogZm9jdXNNZW51SXRlbShldiwgb3B0cy5tZW51Q29udGVudEVsLCBvcHRzLCAxKTsgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIENsb3NlIG1lbnUgb24gbWVudSBpdGVtIGNsaWNrLCBpZiBzYWlkIG1lbnUtaXRlbSBpcyBub3QgZGlzYWJsZWRcbiAgICAgICAgb3B0cy5tZW51Q29udGVudEVsLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgLy8gVHJhdmVyc2UgdXAgdGhlIGV2ZW50IHVudGlsIHdlIGdldCB0byB0aGUgbWVudUNvbnRlbnRFbCB0byBzZWUgaWZcbiAgICAgICAgICAvLyB0aGVyZSBpcyBhbiBuZy1jbGljayBhbmQgdGhhdCB0aGUgbmctY2xpY2sgaXMgbm90IGRpc2FibGVkXG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQuaGFzQXR0cmlidXRlKCduZy1jbGljaycpKSB7XG4gICAgICAgICAgICAgIGlmICghdGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAoKHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlKSAmJiB0YXJnZXQgIT0gb3B0cy5tZW51Q29udGVudEVsKVxuXG4gICAgICAgICAgZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIG9wdHMubWRNZW51Q3RybC5jbG9zZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBraWNrIG9mZiBpbml0aWFsIGZvY3VzIGluIHRoZSBtZW51IG9uIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICAgIHZhciBmb2N1c1RhcmdldCA9IG9wdHMubWVudUNvbnRlbnRFbFswXS5xdWVyeVNlbGVjdG9yKCdbbWQtbWVudS1mb2N1cy10YXJnZXRdJyk7XG4gICAgICAgIGlmICghZm9jdXNUYXJnZXQpIGZvY3VzVGFyZ2V0ID0gb3B0cy5tZW51Q29udGVudEVsWzBdLmZpcnN0RWxlbWVudENoaWxkLmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICBmb2N1c1RhcmdldC5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAgKiBUYWtlcyBhIGtleXByZXNzIGV2ZW50IGFuZCBmb2N1c2VzIHRoZSBuZXh0L3ByZXZpb3VzIG1lbnVcbiAgICAgICogaXRlbSBmcm9tIHRoZSBlbWl0dGluZyBlbGVtZW50XG4gICAgICAqIEBwYXJhbSB7ZXZlbnR9IGUgLSBUaGUgb3JpZ2luIGtleXByZXNzIGV2ZW50XG4gICAgICAqIEBwYXJhbSB7YW5ndWxhci5lbGVtZW50fSBtZW51RWwgLSBUaGUgbWVudSBlbGVtZW50XG4gICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gVGhlIGludGVyaW0gZWxlbWVudCBvcHRpb25zIGZvciB0aGUgbWRNZW51XG4gICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXJlY3Rpb24gLSBUaGUgZGlyZWN0aW9uIHRvIG1vdmUgaW4gKCsxID0gbmV4dCwgLTEgPSBwcmV2KVxuICAgICAgKi9cbiAgICBmdW5jdGlvbiBmb2N1c01lbnVJdGVtKGUsIG1lbnVFbCwgb3B0cywgZGlyZWN0aW9uKSB7XG4gICAgICB2YXIgY3VycmVudEl0ZW0gPSAkbWRVdGlsLmdldENsb3Nlc3QoZS50YXJnZXQsICdNRC1NRU5VLUlURU0nKTtcblxuICAgICAgdmFyIGl0ZW1zID0gJG1kVXRpbC5ub2Rlc1RvQXJyYXkobWVudUVsWzBdLmNoaWxkcmVuKTtcbiAgICAgIHZhciBjdXJyZW50SW5kZXggPSBpdGVtcy5pbmRleE9mKGN1cnJlbnRJdGVtKTtcblxuICAgICAgLy8gVHJhdmVyc2UgdGhyb3VnaCBvdXIgZWxlbWVudHMgaW4gdGhlIHNwZWNpZmllZCBkaXJlY3Rpb24gKCsvLTEpIGFuZCB0cnkgdG9cbiAgICAgIC8vIGZvY3VzIHRoZW0gdW50aWwgd2UgZmluZCBvbmUgdGhhdCBhY2NlcHRzIGZvY3VzXG4gICAgICBmb3IgKHZhciBpID0gY3VycmVudEluZGV4ICsgZGlyZWN0aW9uOyBpID49IDAgJiYgaSA8IGl0ZW1zLmxlbmd0aDsgaSA9IGkgKyBkaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIGZvY3VzVGFyZ2V0ID0gaXRlbXNbaV0uZmlyc3RFbGVtZW50Q2hpbGQgfHwgaXRlbXNbaV07XG4gICAgICAgIHZhciBkaWRGb2N1cyA9IGF0dGVtcHRGb2N1cyhmb2N1c1RhcmdldCk7XG4gICAgICAgIGlmIChkaWRGb2N1cykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXR0ZW1wdHMgdG8gZm9jdXMgYW4gZWxlbWVudC4gQ2hlY2tzIHdoZXRoZXIgdGhhdCBlbGVtZW50IGlzIHRoZSBjdXJyZW50bHlcbiAgICAgKiBmb2N1c2VkIGVsZW1lbnQgYWZ0ZXIgYXR0ZW1wdGluZy5cbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIHRoZSBlbGVtZW50IHRvIGF0dGVtcHQgZm9jdXMgb25cbiAgICAgKiBAcmV0dXJucyB7Ym9vbH0gLSB3aGV0aGVyIHRoZSBlbGVtZW50IHdhcyBzdWNjZXNzZnVsbHkgZm9jdXNlZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGF0dGVtcHRGb2N1cyhlbCkge1xuICAgICAgaWYgKGVsICYmIGVsLmdldEF0dHJpYnV0ZSgndGFiaW5kZXgnKSAhPSAtMSkge1xuICAgICAgICBlbC5mb2N1cygpO1xuICAgICAgICBpZiAoJGRvY3VtZW50WzBdLmFjdGl2ZUVsZW1lbnQgPT0gZWwpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCb2lsZXJwbGF0ZSBpbnRlcmltRWxlbWVudCBvblJlbW92ZSBmdW5jdGlvblxuICAgICAqIEhhbmRsZXMgcmVtb3ZpbmcgdGhlIG1lbnUgZnJvbSB0aGUgRE9NLCBjbGVhbmluZyB1cCB0aGUgZWxlbWVudFxuICAgICAqIGFuZCByZW1vdmluZyB2YXJpb3VzIGxpc3RlbmVyc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uUmVtb3ZlKHNjb3BlLCBlbGVtZW50LCBvcHRzKSB7XG4gICAgICBvcHRzLmlzUmVtb3ZlZCA9IHRydWU7XG4gICAgICBlbGVtZW50LmFkZENsYXNzKCdtZC1sZWF2ZScpXG4gICAgICAgIC5yZW1vdmVDbGFzcygnbWQtY2xpY2thYmxlJyk7XG5cbiAgICAgIC8vIERpc2FibGUgcmVzaXppbmcgaGFuZGxlcnNcbiAgICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vZmYoJ3Jlc2l6ZScsIG9wdHMucmVzaXplRm4pO1xuICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLm9mZignb3JpZW50YXRpb25jaGFuZ2UnLCBvcHRzLnJlc2l6ZUZuKTtcbiAgICAgIG9wdHMucmVzaXplRm4gPSB1bmRlZmluZWQ7XG5cbiAgICAgIC8vIFdhaXQgZm9yIGFuaW1hdGUgb3V0LCB0aGVuIHJlbW92ZSBmcm9tIHRoZSBET01cbiAgICAgIHJldHVybiAkbWRVdGlsLnRyYW5zaXRpb25FbmRQcm9taXNlKGVsZW1lbnQsIHsgdGltZW91dDogMzUwIH0pLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ21kLWFjdGl2ZScpO1xuICAgICAgICBvcHRzLmJhY2tkcm9wICYmIG9wdHMuYmFja2Ryb3AucmVtb3ZlKCk7XG4gICAgICAgIGlmIChlbGVtZW50WzBdLnBhcmVudE5vZGUgPT09IG9wdHMucGFyZW50WzBdKSB7XG4gICAgICAgICAgb3B0cy5wYXJlbnRbMF0ucmVtb3ZlQ2hpbGQoZWxlbWVudFswXSk7XG4gICAgICAgIH1cbiAgICAgICAgb3B0cy5yZXN0b3JlU2Nyb2xsICYmIG9wdHMucmVzdG9yZVNjcm9sbCgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgbWVudSBwb3NpdGlvbiBhbmQgc2V0cyB0aGUgc3R5bGUgb24gdGhlIG1lbnUgY29udGFpbmVyXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSB0aGUgbWVudSBjb250YWluZXIgZWxlbWVudFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gdGhlIGludGVyaW0gZWxlbWVudCBvcHRpb25zIG9iamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBvc2l0aW9uTWVudShlbCwgb3B0cykge1xuICAgICAgaWYgKG9wdHMuaXNSZW1vdmVkKSByZXR1cm47XG5cbiAgICAgIHZhciBjb250YWluZXJOb2RlID0gZWxbMF0sXG4gICAgICAgICAgb3Blbk1lbnVOb2RlID0gZWxbMF0uZmlyc3RFbGVtZW50Q2hpbGQsXG4gICAgICAgICAgb3Blbk1lbnVOb2RlUmVjdCA9IG9wZW5NZW51Tm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICBib3VuZHJ5Tm9kZSA9IG9wdHMucGFyZW50WzBdLFxuICAgICAgICAgIGJvdW5kcnlOb2RlUmVjdCA9IGJvdW5kcnlOb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICB2YXIgb3JpZ2luTm9kZSA9IG9wdHMudGFyZ2V0WzBdLnF1ZXJ5U2VsZWN0b3IoJ1ttZC1tZW51LW9yaWdpbl0nKSB8fCBvcHRzLnRhcmdldFswXSxcbiAgICAgICAgICBvcmlnaW5Ob2RlUmVjdCA9IG9yaWdpbk5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblxuICAgICAgdmFyIGJvdW5kcyA9IHtcbiAgICAgICAgbGVmdDogYm91bmRyeU5vZGVSZWN0LmxlZnQgKyBNRU5VX0VER0VfTUFSR0lOLFxuICAgICAgICB0b3A6IGJvdW5kcnlOb2RlUmVjdC50b3AgKyBNRU5VX0VER0VfTUFSR0lOLFxuICAgICAgICBib3R0b206IGJvdW5kcnlOb2RlUmVjdC5ib3R0b20gLSBNRU5VX0VER0VfTUFSR0lOLFxuICAgICAgICByaWdodDogYm91bmRyeU5vZGVSZWN0LnJpZ2h0IC0gTUVOVV9FREdFX01BUkdJTlxuICAgICAgfTtcblxuXG4gICAgICB2YXIgYWxpZ25UYXJnZXQsIGFsaWduVGFyZ2V0UmVjdCwgZXhpc3RpbmdPZmZzZXRzO1xuICAgICAgdmFyIHBvc2l0aW9uTW9kZSA9IG9wdHMubWRNZW51Q3RybC5wb3NpdGlvbk1vZGUoKTtcblxuICAgICAgaWYgKHBvc2l0aW9uTW9kZS50b3AgPT0gJ3RhcmdldCcgfHwgcG9zaXRpb25Nb2RlLmxlZnQgPT0gJ3RhcmdldCcgfHwgcG9zaXRpb25Nb2RlLmxlZnQgPT0gJ3RhcmdldC1yaWdodCcpIHtcbiAgICAgICAgLy8gVE9ETzogQWxsb3cgY2VudGVyaW5nIG9uIGFuIGFyYml0cmFyeSBub2RlLCBmb3Igbm93IGNlbnRlciBvbiBmaXJzdCBtZW51LWl0ZW0ncyBjaGlsZFxuICAgICAgICBhbGlnblRhcmdldCA9IG9wZW5NZW51Tm9kZS5maXJzdEVsZW1lbnRDaGlsZC5maXJzdEVsZW1lbnRDaGlsZCB8fCBvcGVuTWVudU5vZGUuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgIGFsaWduVGFyZ2V0ID0gYWxpZ25UYXJnZXQucXVlcnlTZWxlY3RvcignW21kLW1lbnUtYWxpZ24tdGFyZ2V0XScpIHx8IGFsaWduVGFyZ2V0O1xuICAgICAgICBhbGlnblRhcmdldFJlY3QgPSBhbGlnblRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBleGlzdGluZ09mZnNldHMgPSB7XG4gICAgICAgICAgdG9wOiBwYXJzZUZsb2F0KGNvbnRhaW5lck5vZGUuc3R5bGUudG9wIHx8IDApLFxuICAgICAgICAgIGxlZnQ6IHBhcnNlRmxvYXQoY29udGFpbmVyTm9kZS5zdHlsZS5sZWZ0IHx8IDApXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHZhciBwb3NpdGlvbiA9IHsgfTtcbiAgICAgIHZhciB0cmFuc2Zvcm1PcmlnaW4gPSAndG9wICc7XG5cbiAgICAgIHN3aXRjaCAocG9zaXRpb25Nb2RlLnRvcCkge1xuICAgICAgICBjYXNlICd0YXJnZXQnOlxuICAgICAgICAgIHBvc2l0aW9uLnRvcCA9IGV4aXN0aW5nT2Zmc2V0cy50b3AgKyBvcmlnaW5Ob2RlUmVjdC50b3AgLSBhbGlnblRhcmdldFJlY3QudG9wO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBGdXR1cmUgc3VwcG9ydCBmb3IgbWRNZW51QmFyXG4gICAgICAgIC8vIGNhc2UgJ3RvcCc6XG4gICAgICAgIC8vICAgcG9zaXRpb24udG9wID0gb3JpZ2luTm9kZVJlY3QudG9wO1xuICAgICAgICAvLyAgIGJyZWFrO1xuICAgICAgICAvLyBjYXNlICdib3R0b20nOlxuICAgICAgICAvLyAgIHBvc2l0aW9uLnRvcCA9IG9yaWdpbk5vZGVSZWN0LnRvcCArIG9yaWdpbk5vZGVSZWN0LmhlaWdodDtcbiAgICAgICAgLy8gICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdGFyZ2V0IG1vZGUgXCInICsgcG9zaXRpb25Nb2RlLnRvcCArICdcIiBzcGVjaWZpZWQgZm9yIG1kLW1lbnUgb24gWSBheGlzLicpO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKHBvc2l0aW9uTW9kZS5sZWZ0KSB7XG4gICAgICAgIGNhc2UgJ3RhcmdldCc6XG4gICAgICAgICAgcG9zaXRpb24ubGVmdCA9IGV4aXN0aW5nT2Zmc2V0cy5sZWZ0ICsgb3JpZ2luTm9kZVJlY3QubGVmdCAtIGFsaWduVGFyZ2V0UmVjdC5sZWZ0O1xuICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbiArPSAnbGVmdCc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RhcmdldC1yaWdodCc6XG4gICAgICAgICAgcG9zaXRpb24ubGVmdCA9IG9yaWdpbk5vZGVSZWN0LnJpZ2h0IC0gb3Blbk1lbnVOb2RlUmVjdC53aWR0aCArIChvcGVuTWVudU5vZGVSZWN0LnJpZ2h0IC0gYWxpZ25UYXJnZXRSZWN0LnJpZ2h0KTtcbiAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW4gKz0gJ3JpZ2h0JztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gRnV0dXJlIHN1cHBvcnQgZm9yIG1kTWVudUJhclxuICAgICAgICAvLyBjYXNlICdsZWZ0JzpcbiAgICAgICAgLy8gICBwb3NpdGlvbi5sZWZ0ID0gb3JpZ2luTm9kZVJlY3QubGVmdDtcbiAgICAgICAgLy8gICB0cmFuc2Zvcm1PcmlnaW4gKz0gJ2xlZnQnO1xuICAgICAgICAvLyAgIGJyZWFrO1xuICAgICAgICAvLyBjYXNlICdyaWdodCc6XG4gICAgICAgIC8vICAgcG9zaXRpb24ubGVmdCA9IG9yaWdpbk5vZGVSZWN0LnJpZ2h0IC0gY29udGFpbmVyTm9kZS5vZmZzZXRXaWR0aDtcbiAgICAgICAgLy8gICB0cmFuc2Zvcm1PcmlnaW4gKz0gJ3JpZ2h0JztcbiAgICAgICAgLy8gICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdGFyZ2V0IG1vZGUgXCInICsgcG9zaXRpb25Nb2RlLmxlZnQgKyAnXCIgc3BlY2lmaWVkIGZvciBtZC1tZW51IG9uIFggYXhpcy4nKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9mZnNldHMgPSBvcHRzLm1kTWVudUN0cmwub2Zmc2V0cygpO1xuICAgICAgcG9zaXRpb24udG9wICs9IG9mZnNldHMudG9wO1xuICAgICAgcG9zaXRpb24ubGVmdCArPSBvZmZzZXRzLmxlZnQ7XG5cbiAgICAgIGNsYW1wKHBvc2l0aW9uKTtcblxuICAgICAgZWwuY3NzKHtcbiAgICAgICAgdG9wOiBwb3NpdGlvbi50b3AgKyAncHgnLFxuICAgICAgICBsZWZ0OiBwb3NpdGlvbi5sZWZ0ICsgJ3B4J1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnRhaW5lck5vZGUuc3R5bGVbJG1kQ29uc3RhbnQuQ1NTLlRSQU5TRk9STV9PUklHSU5dID0gdHJhbnNmb3JtT3JpZ2luO1xuXG4gICAgICAvLyBBbmltYXRlIGEgc2NhbGUgb3V0IGlmIHdlIGFyZW4ndCBqdXN0IHJlcG9zaXRpb25pbmdcbiAgICAgIGlmICghb3B0cy5hbHJlYWR5T3Blbikge1xuICAgICAgICBjb250YWluZXJOb2RlLnN0eWxlWyRtZENvbnN0YW50LkNTUy5UUkFOU0ZPUk1dID0gJ3NjYWxlKCcgK1xuICAgICAgICAgIE1hdGgubWluKG9yaWdpbk5vZGVSZWN0LndpZHRoIC8gY29udGFpbmVyTm9kZS5vZmZzZXRXaWR0aCwgMS4wKSArICcsJyArXG4gICAgICAgICAgTWF0aC5taW4ob3JpZ2luTm9kZVJlY3QuaGVpZ2h0IC8gY29udGFpbmVyTm9kZS5vZmZzZXRIZWlnaHQsIDEuMCkgK1xuICAgICAgICAnKSc7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2xhbXBzIHRoZSByZXBvc2l0aW9uaW5nIG9mIHRoZSBtZW51IHdpdGhpbiB0aGUgY29uZmluZXMgb2ZcbiAgICAgICAqIGJvdW5kaW5nIGVsZW1lbnQgKG9mdGVuIHRoZSBzY3JlZW4vYm9keSlcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gY2xhbXAocG9zKSB7XG4gICAgICAgIHBvcy50b3AgPSBNYXRoLm1heChNYXRoLm1pbihwb3MudG9wLCBib3VuZHMuYm90dG9tIC0gY29udGFpbmVyTm9kZS5vZmZzZXRIZWlnaHQpLCBib3VuZHMudG9wKTtcbiAgICAgICAgcG9zLmxlZnQgPSBNYXRoLm1heChNYXRoLm1pbihwb3MubGVmdCwgYm91bmRzLnJpZ2h0IC0gY29udGFpbmVyTm9kZS5vZmZzZXRXaWR0aCksIGJvdW5kcy5sZWZ0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbk1lbnVQcm92aWRlci4kaW5qZWN0ID0gW1wiJCRpbnRlcmltRWxlbWVudFByb3ZpZGVyXCJdO1xuXG59KSgpO1xuKGZ1bmN0aW9uKCl7XG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBtYXRlcmlhbC5jb21wb25lbnRzLnByb2dyZXNzQ2lyY3VsYXJcbiAqIEBkZXNjcmlwdGlvbiBDaXJjdWxhciBQcm9ncmVzcyBtb2R1bGUhXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLnByb2dyZXNzQ2lyY3VsYXInLCBbXG4gICdtYXRlcmlhbC5jb3JlJ1xuXSlcbiAgLmRpcmVjdGl2ZSgnbWRQcm9ncmVzc0NpcmN1bGFyJywgTWRQcm9ncmVzc0NpcmN1bGFyRGlyZWN0aXZlKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBtZFByb2dyZXNzQ2lyY3VsYXJcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5wcm9ncmVzc0NpcmN1bGFyXG4gKiBAcmVzdHJpY3QgRVxuICpcbiogQGRlc2NyaXB0aW9uXG4gKiBUaGUgY2lyY3VsYXIgcHJvZ3Jlc3MgZGlyZWN0aXZlIGlzIHVzZWQgdG8gbWFrZSBsb2FkaW5nIGNvbnRlbnQgaW4geW91ciBhcHAgYXMgZGVsaWdodGZ1bCBhbmRcbiAqIHBhaW5sZXNzIGFzIHBvc3NpYmxlIGJ5IG1pbmltaXppbmcgdGhlIGFtb3VudCBvZiB2aXN1YWwgY2hhbmdlIGEgdXNlciBzZWVzIGJlZm9yZSB0aGV5IGNhbiB2aWV3XG4gKiBhbmQgaW50ZXJhY3Qgd2l0aCBjb250ZW50LlxuICpcbiAqIEZvciBvcGVyYXRpb25zIHdoZXJlIHRoZSBwZXJjZW50YWdlIG9mIHRoZSBvcGVyYXRpb24gY29tcGxldGVkIGNhbiBiZSBkZXRlcm1pbmVkLCB1c2UgYVxuICogZGV0ZXJtaW5hdGUgaW5kaWNhdG9yLiBUaGV5IGdpdmUgdXNlcnMgYSBxdWljayBzZW5zZSBvZiBob3cgbG9uZyBhbiBvcGVyYXRpb24gd2lsbCB0YWtlLlxuICpcbiAqIEZvciBvcGVyYXRpb25zIHdoZXJlIHRoZSB1c2VyIGlzIGFza2VkIHRvIHdhaXQgYSBtb21lbnQgd2hpbGUgc29tZXRoaW5nIGZpbmlzaGVzIHVwLCBhbmQgaXTigJlzXG4gKiBub3QgbmVjZXNzYXJ5IHRvIGV4cG9zZSB3aGF0J3MgaGFwcGVuaW5nIGJlaGluZCB0aGUgc2NlbmVzIGFuZCBob3cgbG9uZyBpdCB3aWxsIHRha2UsIHVzZSBhblxuICogaW5kZXRlcm1pbmF0ZSBpbmRpY2F0b3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1kLW1vZGUgU2VsZWN0IGZyb20gb25lIG9mIHR3byBtb2RlczogZGV0ZXJtaW5hdGUgYW5kIGluZGV0ZXJtaW5hdGUuXG4gKiBAcGFyYW0ge251bWJlcj19IHZhbHVlIEluIGRldGVybWluYXRlIG1vZGUsIHRoaXMgbnVtYmVyIHJlcHJlc2VudHMgdGhlIHBlcmNlbnRhZ2Ugb2YgdGhlXG4gKiAgICAgY2lyY3VsYXIgcHJvZ3Jlc3MuIERlZmF1bHQ6IDBcbiAqIEBwYXJhbSB7bnVtYmVyPX0gbWQtZGlhbWV0ZXIgVGhpcyBzcGVjaWZpZXMgdGhlIGRpYW10ZXIgb2YgdGhlIGNpcmN1bGFyIHByb2dyZXNzLiBEZWZhdWx0OiA0OFxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC1wcm9ncmVzcy1jaXJjdWxhciBtZC1tb2RlPVwiZGV0ZXJtaW5hdGVcIiB2YWx1ZT1cIi4uLlwiPjwvbWQtcHJvZ3Jlc3MtY2lyY3VsYXI+XG4gKlxuICogPG1kLXByb2dyZXNzLWNpcmN1bGFyIG1kLW1vZGU9XCJkZXRlcm1pbmF0ZVwiIG5nLXZhbHVlPVwiLi4uXCI+PC9tZC1wcm9ncmVzcy1jaXJjdWxhcj5cbiAqXG4gKiA8bWQtcHJvZ3Jlc3MtY2lyY3VsYXIgbWQtbW9kZT1cImRldGVybWluYXRlXCIgdmFsdWU9XCIuLi5cIiBtZC1kaWFtZXRlcj1cIjEwMFwiPjwvbWQtcHJvZ3Jlc3MtY2lyY3VsYXI+XG4gKlxuICogPG1kLXByb2dyZXNzLWNpcmN1bGFyIG1kLW1vZGU9XCJpbmRldGVybWluYXRlXCI+PC9tZC1wcm9ncmVzcy1jaXJjdWxhcj5cbiAqIDwvaGxqcz5cbiAqL1xuZnVuY3Rpb24gTWRQcm9ncmVzc0NpcmN1bGFyRGlyZWN0aXZlKCRtZENvbnN0YW50LCAkbWRUaGVtaW5nKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICB0ZW1wbGF0ZTpcbiAgICAgICAgLy8gVGhlIHByb2dyZXNzICdjaXJjbGUnIGlzIGNvbXBvc2VkIG9mIHR3byBoYWxmLWNpcmNsZXM6IHRoZSBsZWZ0IHNpZGUgYW5kIHRoZSByaWdodFxuICAgICAgICAvLyBzaWRlLiBFYWNoIHNpZGUgaGFzIENTUyBhcHBsaWVkIHRvICdmaWxsLWluJyB0aGUgaGFsZi1jaXJjbGUgdG8gdGhlIGFwcHJvcHJpYXRlIHByb2dyZXNzLlxuICAgICAgICAnPGRpdiBjbGFzcz1cIm1kLXNwaW5uZXItd3JhcHBlclwiPicgK1xuICAgICAgICAgICc8ZGl2IGNsYXNzPVwibWQtaW5uZXJcIj4nICtcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibWQtZ2FwXCI+PC9kaXY+JyArXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1kLWxlZnRcIj4nICtcbiAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtZC1oYWxmLWNpcmNsZVwiPjwvZGl2PicgK1xuICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtZC1yaWdodFwiPicgK1xuICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1kLWhhbGYtY2lyY2xlXCI+PC9kaXY+JyArXG4gICAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAnPC9kaXY+JyxcbiAgICBjb21waWxlOiBjb21waWxlXG4gIH07XG5cbiAgZnVuY3Rpb24gY29tcGlsZSh0RWxlbWVudCkge1xuICAgIC8vIFRoZSBqYXZhc2NyaXB0IGluIHRoaXMgZmlsZSBpcyBtYWlubHkgcmVzcG9uc2libGUgZm9yIHNldHRpbmcgdGhlIGNvcnJlY3QgYXJpYSBhdHRyaWJ1dGVzLlxuICAgIC8vIFRoZSBhbmltYXRpb24gb2YgdGhlIHByb2dyZXNzIHNwaW5uZXIgaXMgZG9uZSBlbnRpcmVseSB3aXRoIGp1c3QgQ1NTLlxuICAgIHRFbGVtZW50LmF0dHIoJ2FyaWEtdmFsdWVtaW4nLCAwKTtcbiAgICB0RWxlbWVudC5hdHRyKCdhcmlhLXZhbHVlbWF4JywgMTAwKTtcbiAgICB0RWxlbWVudC5hdHRyKCdyb2xlJywgJ3Byb2dyZXNzYmFyJyk7XG5cbiAgICByZXR1cm4gcG9zdExpbms7XG4gIH1cblxuICBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICRtZFRoZW1pbmcoZWxlbWVudCk7XG4gICAgdmFyIGNpcmNsZSA9IGVsZW1lbnRbMF07XG5cbiAgICAvLyBTY2FsZSB0aGUgcHJvZ3Jlc3MgY2lyY2xlIGJhc2VkIG9uIHRoZSBkZWZhdWx0IGRpYW1ldGVyLlxuICAgIHZhciBkaWFtZXRlciA9IGF0dHIubWREaWFtZXRlciB8fCA0ODtcbiAgICB2YXIgc2NhbGUgPSBkaWFtZXRlciAvIDQ4O1xuICAgIGNpcmNsZS5zdHlsZVskbWRDb25zdGFudC5DU1MuVFJBTlNGT1JNXSA9ICdzY2FsZSgnICsgc2NhbGUgKyAnKSc7XG5cbiAgICBhdHRyLiRvYnNlcnZlKCd2YWx1ZScsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgcGVyY2VudFZhbHVlID0gY2xhbXAodmFsdWUpO1xuICAgICAgZWxlbWVudC5hdHRyKCdhcmlhLXZhbHVlbm93JywgcGVyY2VudFZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGFtcHMgdGhlIHZhbHVlIHRvIGJlIGJldHdlZW4gMCBhbmQgMTAwLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsYW1wLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgZnVuY3Rpb24gY2xhbXAodmFsdWUpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4odmFsdWUgfHwgMCwgMTAwKSk7XG4gIH1cbn1cbk1kUHJvZ3Jlc3NDaXJjdWxhckRpcmVjdGl2ZS4kaW5qZWN0ID0gW1wiJG1kQ29uc3RhbnRcIiwgXCIkbWRUaGVtaW5nXCJdO1xuXG59KSgpO1xuKGZ1bmN0aW9uKCl7XG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBtYXRlcmlhbC5jb21wb25lbnRzLnByb2dyZXNzTGluZWFyXG4gKiBAZGVzY3JpcHRpb24gTGluZWFyIFByb2dyZXNzIG1vZHVsZSFcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMucHJvZ3Jlc3NMaW5lYXInLCBbXG4gICdtYXRlcmlhbC5jb3JlJ1xuXSlcbiAgLmRpcmVjdGl2ZSgnbWRQcm9ncmVzc0xpbmVhcicsIE1kUHJvZ3Jlc3NMaW5lYXJEaXJlY3RpdmUpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG1kUHJvZ3Jlc3NMaW5lYXJcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5wcm9ncmVzc0xpbmVhclxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBsaW5lYXIgcHJvZ3Jlc3MgZGlyZWN0aXZlIGlzIHVzZWQgdG8gbWFrZSBsb2FkaW5nIGNvbnRlbnQgaW4geW91ciBhcHAgYXMgZGVsaWdodGZ1bCBhbmQgcGFpbmxlc3MgYXMgcG9zc2libGUgYnkgbWluaW1pemluZyB0aGUgYW1vdW50IG9mIHZpc3VhbCBjaGFuZ2UgYSB1c2VyIHNlZXMgYmVmb3JlIHRoZXkgY2FuIHZpZXcgYW5kIGludGVyYWN0IHdpdGggY29udGVudC4gRWFjaCBvcGVyYXRpb24gc2hvdWxkIG9ubHkgYmUgcmVwcmVzZW50ZWQgYnkgb25lIGFjdGl2aXR5IGluZGljYXRvcuKAlGZvciBleGFtcGxlLCBvbmUgcmVmcmVzaCBvcGVyYXRpb24gc2hvdWxkIG5vdCBkaXNwbGF5IGJvdGggYSByZWZyZXNoIGJhciBhbmQgYW4gYWN0aXZpdHkgY2lyY2xlLlxuICpcbiAqIEZvciBvcGVyYXRpb25zIHdoZXJlIHRoZSBwZXJjZW50YWdlIG9mIHRoZSBvcGVyYXRpb24gY29tcGxldGVkIGNhbiBiZSBkZXRlcm1pbmVkLCB1c2UgYSBkZXRlcm1pbmF0ZSBpbmRpY2F0b3IuIFRoZXkgZ2l2ZSB1c2VycyBhIHF1aWNrIHNlbnNlIG9mIGhvdyBsb25nIGFuIG9wZXJhdGlvbiB3aWxsIHRha2UuXG4gKlxuICogRm9yIG9wZXJhdGlvbnMgd2hlcmUgdGhlIHVzZXIgaXMgYXNrZWQgdG8gd2FpdCBhIG1vbWVudCB3aGlsZSBzb21ldGhpbmcgZmluaXNoZXMgdXAsIGFuZCBpdOKAmXMgbm90IG5lY2Vzc2FyeSB0byBleHBvc2Ugd2hhdCdzIGhhcHBlbmluZyBiZWhpbmQgdGhlIHNjZW5lcyBhbmQgaG93IGxvbmcgaXQgd2lsbCB0YWtlLCB1c2UgYW4gaW5kZXRlcm1pbmF0ZSBpbmRpY2F0b3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1kLW1vZGUgU2VsZWN0IGZyb20gb25lIG9mIGZvdXIgbW9kZXM6IGRldGVybWluYXRlLCBpbmRldGVybWluYXRlLCBidWZmZXIgb3IgcXVlcnkuXG4gKiBAcGFyYW0ge251bWJlcj19IHZhbHVlIEluIGRldGVybWluYXRlIGFuZCBidWZmZXIgbW9kZXMsIHRoaXMgbnVtYmVyIHJlcHJlc2VudHMgdGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIHByaW1hcnkgcHJvZ3Jlc3MgYmFyLiBEZWZhdWx0OiAwXG4gKiBAcGFyYW0ge251bWJlcj19IG1kLWJ1ZmZlci12YWx1ZSBJbiB0aGUgYnVmZmVyIG1vZGUsIHRoaXMgbnVtYmVyIHJlcHJlc2VudHMgdGhlIHByZWNlbnRhZ2Ugb2YgdGhlIHNlY29uZGFyeSBwcm9ncmVzcyBiYXIuIERlZmF1bHQ6IDBcbiAqXG4gKiBAdXNhZ2VcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8bWQtcHJvZ3Jlc3MtbGluZWFyIG1kLW1vZGU9XCJkZXRlcm1pbmF0ZVwiIHZhbHVlPVwiLi4uXCI+PC9tZC1wcm9ncmVzcy1saW5lYXI+XG4gKlxuICogPG1kLXByb2dyZXNzLWxpbmVhciBtZC1tb2RlPVwiZGV0ZXJtaW5hdGVcIiBuZy12YWx1ZT1cIi4uLlwiPjwvbWQtcHJvZ3Jlc3MtbGluZWFyPlxuICpcbiAqIDxtZC1wcm9ncmVzcy1saW5lYXIgbWQtbW9kZT1cImluZGV0ZXJtaW5hdGVcIj48L21kLXByb2dyZXNzLWxpbmVhcj5cbiAqXG4gKiA8bWQtcHJvZ3Jlc3MtbGluZWFyIG1kLW1vZGU9XCJidWZmZXJcIiB2YWx1ZT1cIi4uLlwiIG1kLWJ1ZmZlci12YWx1ZT1cIi4uLlwiPjwvbWQtcHJvZ3Jlc3MtbGluZWFyPlxuICpcbiAqIDxtZC1wcm9ncmVzcy1saW5lYXIgbWQtbW9kZT1cInF1ZXJ5XCI+PC9tZC1wcm9ncmVzcy1saW5lYXI+XG4gKiA8L2hsanM+XG4gKi9cbmZ1bmN0aW9uIE1kUHJvZ3Jlc3NMaW5lYXJEaXJlY3RpdmUoJCRyQUYsICRtZENvbnN0YW50LCAkbWRUaGVtaW5nKSB7XG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1kLWNvbnRhaW5lclwiPicgK1xuICAgICAgJzxkaXYgY2xhc3M9XCJtZC1kYXNoZWRcIj48L2Rpdj4nICtcbiAgICAgICc8ZGl2IGNsYXNzPVwibWQtYmFyIG1kLWJhcjFcIj48L2Rpdj4nICtcbiAgICAgICc8ZGl2IGNsYXNzPVwibWQtYmFyIG1kLWJhcjJcIj48L2Rpdj4nICtcbiAgICAgICc8L2Rpdj4nLFxuICAgIGNvbXBpbGU6IGNvbXBpbGVcbiAgfTtcbiAgXG4gIGZ1bmN0aW9uIGNvbXBpbGUodEVsZW1lbnQsIHRBdHRycywgdHJhbnNjbHVkZSkge1xuICAgIHRFbGVtZW50LmF0dHIoJ2FyaWEtdmFsdWVtaW4nLCAwKTtcbiAgICB0RWxlbWVudC5hdHRyKCdhcmlhLXZhbHVlbWF4JywgMTAwKTtcbiAgICB0RWxlbWVudC5hdHRyKCdyb2xlJywgJ3Byb2dyZXNzYmFyJyk7XG5cbiAgICByZXR1cm4gcG9zdExpbms7XG4gIH1cbiAgZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAkbWRUaGVtaW5nKGVsZW1lbnQpO1xuICAgIHZhciBiYXIxU3R5bGUgPSBlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJy5tZC1iYXIxJykuc3R5bGUsXG4gICAgICBiYXIyU3R5bGUgPSBlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJy5tZC1iYXIyJykuc3R5bGUsXG4gICAgICBjb250YWluZXIgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcubWQtY29udGFpbmVyJykpO1xuXG4gICAgYXR0ci4kb2JzZXJ2ZSgndmFsdWUnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKGF0dHIubWRNb2RlID09ICdxdWVyeScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2xhbXBlZCA9IGNsYW1wKHZhbHVlKTtcbiAgICAgIGVsZW1lbnQuYXR0cignYXJpYS12YWx1ZW5vdycsIGNsYW1wZWQpO1xuICAgICAgYmFyMlN0eWxlWyRtZENvbnN0YW50LkNTUy5UUkFOU0ZPUk1dID0gdHJhbnNmb3Jtc1tjbGFtcGVkXTtcbiAgICB9KTtcblxuICAgIGF0dHIuJG9ic2VydmUoJ21kQnVmZmVyVmFsdWUnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgYmFyMVN0eWxlWyRtZENvbnN0YW50LkNTUy5UUkFOU0ZPUk1dID0gdHJhbnNmb3Jtc1tjbGFtcCh2YWx1ZSldO1xuICAgIH0pO1xuXG4gICAgJCRyQUYoZnVuY3Rpb24oKSB7XG4gICAgICBjb250YWluZXIuYWRkQ2xhc3MoJ21kLXJlYWR5Jyk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGFtcCh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA+IDEwMCkge1xuICAgICAgcmV0dXJuIDEwMDtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgPCAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gTWF0aC5jZWlsKHZhbHVlIHx8IDApO1xuICB9XG59XG5NZFByb2dyZXNzTGluZWFyRGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkJHJBRlwiLCBcIiRtZENvbnN0YW50XCIsIFwiJG1kVGhlbWluZ1wiXTtcblxuXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLyBQcml2YXRlIE1ldGhvZHNcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbnZhciB0cmFuc2Zvcm1zID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdmFsdWVzID0gbmV3IEFycmF5KDEwMSk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCAxMDE7IGkrKyl7XG4gICAgdmFsdWVzW2ldID0gbWFrZVRyYW5zZm9ybShpKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gbWFrZVRyYW5zZm9ybSh2YWx1ZSl7XG4gICAgdmFyIHNjYWxlID0gdmFsdWUvMTAwO1xuICAgIHZhciB0cmFuc2xhdGVYID0gKHZhbHVlLTEwMCkvMjtcbiAgICByZXR1cm4gJ3RyYW5zbGF0ZVgoJyArIHRyYW5zbGF0ZVgudG9TdHJpbmcoKSArICclKSBzY2FsZSgnICsgc2NhbGUudG9TdHJpbmcoKSArICcsIDEpJztcbiAgfVxufSkoKTtcblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy5yYWRpb0J1dHRvblxuICogQGRlc2NyaXB0aW9uIHJhZGlvQnV0dG9uIG1vZHVsZSFcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMucmFkaW9CdXR0b24nLCBbXG4gICdtYXRlcmlhbC5jb3JlJ1xuXSlcbiAgLmRpcmVjdGl2ZSgnbWRSYWRpb0dyb3VwJywgbWRSYWRpb0dyb3VwRGlyZWN0aXZlKVxuICAuZGlyZWN0aXZlKCdtZFJhZGlvQnV0dG9uJywgbWRSYWRpb0J1dHRvbkRpcmVjdGl2ZSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLnJhZGlvQnV0dG9uXG4gKiBAbmFtZSBtZFJhZGlvR3JvdXBcbiAqXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGA8bWQtcmFkaW8tZ3JvdXA+YCBkaXJlY3RpdmUgaWRlbnRpZmllcyBhIGdyb3VwaW5nXG4gKiBjb250YWluZXIgZm9yIHRoZSAxLi5uIGdyb3VwZWQgcmFkaW8gYnV0dG9uczsgc3BlY2lmaWVkIHVzaW5nIG5lc3RlZFxuICogYDxtZC1yYWRpby1idXR0b24+YCB0YWdzLlxuICpcbiAqIEFzIHBlciB0aGUgW21hdGVyaWFsIGRlc2lnbiBzcGVjXShodHRwOi8vd3d3Lmdvb2dsZS5jb20vZGVzaWduL3NwZWMvc3R5bGUvY29sb3IuaHRtbCNjb2xvci11aS1jb2xvci1hcHBsaWNhdGlvbilcbiAqIHRoZSByYWRpbyBidXR0b24gaXMgaW4gdGhlIGFjY2VudCBjb2xvciBieSBkZWZhdWx0LiBUaGUgcHJpbWFyeSBjb2xvciBwYWxldHRlIG1heSBiZSB1c2VkIHdpdGhcbiAqIHRoZSBgbWQtcHJpbWFyeWAgY2xhc3MuXG4gKlxuICogTm90ZTogYDxtZC1yYWRpby1ncm91cD5gIGFuZCBgPG1kLXJhZGlvLWJ1dHRvbj5gIGhhbmRsZSB0YWJpbmRleCBkaWZmZXJlbnRseVxuICogdGhhbiB0aGUgbmF0aXZlIGA8aW5wdXQgdHlwZT0ncmFkaW8nPmAgY29udHJvbHMuIFdoZXJlYXMgdGhlIG5hdGl2ZSBjb250cm9sc1xuICogZm9yY2UgdGhlIHVzZXIgdG8gdGFiIHRocm91Z2ggYWxsIHRoZSByYWRpbyBidXR0b25zLCBgPG1kLXJhZGlvLWdyb3VwPmBcbiAqIGlzIGZvY3VzYWJsZSwgYW5kIGJ5IGRlZmF1bHQgdGhlIGA8bWQtcmFkaW8tYnV0dG9uPmBzIGFyZSBub3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nLW1vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG1kLW5vLWluayBVc2Ugb2YgYXR0cmlidXRlIGluZGljYXRlcyBmbGFnIHRvIGRpc2FibGUgaW5rIHJpcHBsZSBlZmZlY3RzLlxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC1yYWRpby1ncm91cCBuZy1tb2RlbD1cInNlbGVjdGVkXCI+XG4gKlxuICogICA8bWQtcmFkaW8tYnV0dG9uXG4gKiAgICAgICAgbmctcmVwZWF0PVwiZCBpbiBjb2xvck9wdGlvbnNcIlxuICogICAgICAgIG5nLXZhbHVlPVwiZC52YWx1ZVwiIGFyaWEtbGFiZWw9XCJ7eyBkLmxhYmVsIH19XCI+XG4gKlxuICogICAgICAgICAge3sgZC5sYWJlbCB9fVxuICpcbiAqICAgPC9tZC1yYWRpby1idXR0b24+XG4gKlxuICogPC9tZC1yYWRpby1ncm91cD5cbiAqIDwvaGxqcz5cbiAqXG4gKi9cbmZ1bmN0aW9uIG1kUmFkaW9Hcm91cERpcmVjdGl2ZSgkbWRVdGlsLCAkbWRDb25zdGFudCwgJG1kVGhlbWluZywgJHRpbWVvdXQpIHtcbiAgUmFkaW9Hcm91cENvbnRyb2xsZXIucHJvdG90eXBlID0gY3JlYXRlUmFkaW9Hcm91cENvbnRyb2xsZXJQcm90bygpO1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICBjb250cm9sbGVyOiBbJyRlbGVtZW50JywgUmFkaW9Hcm91cENvbnRyb2xsZXJdLFxuICAgIHJlcXVpcmU6IFsnbWRSYWRpb0dyb3VwJywgJz9uZ01vZGVsJ10sXG4gICAgbGluazogeyBwcmU6IGxpbmtSYWRpb0dyb3VwIH1cbiAgfTtcblxuICBmdW5jdGlvbiBsaW5rUmFkaW9Hcm91cChzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHtcbiAgICAkbWRUaGVtaW5nKGVsZW1lbnQpO1xuICAgIHZhciByZ0N0cmwgPSBjdHJsc1swXTtcbiAgICB2YXIgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXSB8fCAkbWRVdGlsLmZha2VOZ01vZGVsKCk7XG5cbiAgICBmdW5jdGlvbiBzZXRGb2N1cygpIHtcbiAgICAgIGlmICghZWxlbWVudC5oYXNDbGFzcygnbWQtZm9jdXNlZCcpKSB7IGVsZW1lbnQuYWRkQ2xhc3MoJ21kLWZvY3VzZWQnKTsgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleWRvd25MaXN0ZW5lcihldikge1xuICAgICAgdmFyIGtleUNvZGUgPSBldi53aGljaCB8fCBldi5rZXlDb2RlO1xuICAgICAgc3dpdGNoKGtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAkbWRDb25zdGFudC5LRVlfQ09ERS5MRUZUX0FSUk9XOlxuICAgICAgICBjYXNlICRtZENvbnN0YW50LktFWV9DT0RFLlVQX0FSUk9XOlxuICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgcmdDdHJsLnNlbGVjdFByZXZpb3VzKCk7XG4gICAgICAgICAgc2V0Rm9jdXMoKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICRtZENvbnN0YW50LktFWV9DT0RFLlJJR0hUX0FSUk9XOlxuICAgICAgICBjYXNlICRtZENvbnN0YW50LktFWV9DT0RFLkRPV05fQVJST1c6XG4gICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICByZ0N0cmwuc2VsZWN0TmV4dCgpO1xuICAgICAgICAgIHNldEZvY3VzKCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAkbWRDb25zdGFudC5LRVlfQ09ERS5FTlRFUjpcbiAgICAgICAgICB2YXIgZm9ybSA9IGFuZ3VsYXIuZWxlbWVudCgkbWRVdGlsLmdldENsb3Nlc3QoZWxlbWVudFswXSwgJ2Zvcm0nKSk7XG4gICAgICAgICAgaWYgKGZvcm0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9ybS50cmlnZ2VySGFuZGxlcignc3VibWl0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJnQ3RybC5pbml0KG5nTW9kZWxDdHJsKTtcblxuICAgIHNjb3BlLm1vdXNlQWN0aXZlID0gZmFsc2U7XG4gICAgZWxlbWVudC5hdHRyKHtcbiAgICAgICAgICAgICAgJ3JvbGUnOiAncmFkaW9ncm91cCcsXG4gICAgICAgICAgICAgICd0YWJJbmRleCc6IGVsZW1lbnQuYXR0cigndGFiaW5kZXgnKSB8fCAnMCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ2tleWRvd24nLCBrZXlkb3duTGlzdGVuZXIpXG4gICAgICAgICAgICAub24oJ21vdXNlZG93bicsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgIHNjb3BlLm1vdXNlQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUubW91c2VBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ2ZvY3VzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmKHNjb3BlLm1vdXNlQWN0aXZlID09PSBmYWxzZSkgeyByZ0N0cmwuJGVsZW1lbnQuYWRkQ2xhc3MoJ21kLWZvY3VzZWQnKTsgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignYmx1cicsIGZ1bmN0aW9uKCkgeyByZ0N0cmwuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ21kLWZvY3VzZWQnKTsgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBSYWRpb0dyb3VwQ29udHJvbGxlcigkZWxlbWVudCkge1xuICAgIHRoaXMuX3JhZGlvQnV0dG9uUmVuZGVyRm5zID0gW107XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUmFkaW9Hcm91cENvbnRyb2xsZXJQcm90bygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW5pdDogZnVuY3Rpb24obmdNb2RlbEN0cmwpIHtcbiAgICAgICAgdGhpcy5fbmdNb2RlbEN0cmwgPSBuZ01vZGVsQ3RybDtcbiAgICAgICAgdGhpcy5fbmdNb2RlbEN0cmwuJHJlbmRlciA9IGFuZ3VsYXIuYmluZCh0aGlzLCB0aGlzLnJlbmRlcik7XG4gICAgICB9LFxuICAgICAgYWRkOiBmdW5jdGlvbihyYlJlbmRlcikge1xuICAgICAgICB0aGlzLl9yYWRpb0J1dHRvblJlbmRlckZucy5wdXNoKHJiUmVuZGVyKTtcbiAgICAgIH0sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uKHJiUmVuZGVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuX3JhZGlvQnV0dG9uUmVuZGVyRm5zLmluZGV4T2YocmJSZW5kZXIpO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgdGhpcy5fcmFkaW9CdXR0b25SZW5kZXJGbnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX3JhZGlvQnV0dG9uUmVuZGVyRm5zLmZvckVhY2goZnVuY3Rpb24ocmJSZW5kZXIpIHtcbiAgICAgICAgICByYlJlbmRlcigpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBzZXRWaWV3VmFsdWU6IGZ1bmN0aW9uKHZhbHVlLCBldmVudFR5cGUpIHtcbiAgICAgICAgdGhpcy5fbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZSh2YWx1ZSwgZXZlbnRUeXBlKTtcbiAgICAgICAgLy8gdXBkYXRlIHRoZSBvdGhlciByYWRpbyBidXR0b25zIGFzIHdlbGxcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgIH0sXG4gICAgICBnZXRWaWV3VmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZTtcbiAgICAgIH0sXG4gICAgICBzZWxlY3ROZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNoYW5nZVNlbGVjdGVkQnV0dG9uKHRoaXMuJGVsZW1lbnQsIDEpO1xuICAgICAgfSxcbiAgICAgIHNlbGVjdFByZXZpb3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNoYW5nZVNlbGVjdGVkQnV0dG9uKHRoaXMuJGVsZW1lbnQsIC0xKTtcbiAgICAgIH0sXG4gICAgICBzZXRBY3RpdmVEZXNjZW5kYW50OiBmdW5jdGlvbiAocmFkaW9JZCkge1xuICAgICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcsIHJhZGlvSWQpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgcmFkaW8gZ3JvdXAncyBzZWxlY3RlZCBidXR0b24gYnkgYSBnaXZlbiBpbmNyZW1lbnQuXG4gICAqIElmIG5vIGJ1dHRvbiBpcyBzZWxlY3RlZCwgc2VsZWN0IHRoZSBmaXJzdCBidXR0b24uXG4gICAqL1xuICBmdW5jdGlvbiBjaGFuZ2VTZWxlY3RlZEJ1dHRvbihwYXJlbnQsIGluY3JlbWVudCkge1xuICAgIC8vIENvZXJjZSBhbGwgY2hpbGQgcmFkaW8gYnV0dG9ucyBpbnRvIGFuIGFycmF5LCB0aGVuIHdyYXAgdGhlbiBpbiBhbiBpdGVyYXRvclxuICAgIHZhciBidXR0b25zID0gJG1kVXRpbC5pdGVyYXRvcihwYXJlbnRbMF0ucXVlcnlTZWxlY3RvckFsbCgnbWQtcmFkaW8tYnV0dG9uJyksIHRydWUpO1xuXG4gICAgaWYgKGJ1dHRvbnMuY291bnQoKSkge1xuICAgICAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGJ1dHRvbikge1xuICAgICAgICAvLyBJZiBkaXNhYmxlZCwgdGhlbiBOT1QgdmFsaWRcbiAgICAgICAgcmV0dXJuICFhbmd1bGFyLmVsZW1lbnQoYnV0dG9uKS5hdHRyKFwiZGlzYWJsZWRcIik7XG4gICAgICB9O1xuICAgICAgdmFyIHNlbGVjdGVkID0gcGFyZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJ21kLXJhZGlvLWJ1dHRvbi5tZC1jaGVja2VkJyk7XG4gICAgICB2YXIgdGFyZ2V0ID0gYnV0dG9uc1tpbmNyZW1lbnQgPCAwID8gJ3ByZXZpb3VzJyA6ICduZXh0J10oc2VsZWN0ZWQsIHZhbGlkYXRlKSB8fCBidXR0b25zLmZpcnN0KCk7XG4gICAgICAvLyBBY3RpdmF0ZSByYWRpb0J1dHRvbidzIGNsaWNrIGxpc3RlbmVyICh0cmlnZ2VySGFuZGxlciB3b24ndCBjcmVhdGUgYSByZWFsIGNsaWNrIGV2ZW50KVxuICAgICAgYW5ndWxhci5lbGVtZW50KHRhcmdldCkudHJpZ2dlckhhbmRsZXIoJ2NsaWNrJyk7XG5cblxuICAgIH1cbiAgfVxuXG59XG5tZFJhZGlvR3JvdXBEaXJlY3RpdmUuJGluamVjdCA9IFtcIiRtZFV0aWxcIiwgXCIkbWRDb25zdGFudFwiLCBcIiRtZFRoZW1pbmdcIiwgXCIkdGltZW91dFwiXTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMucmFkaW9CdXR0b25cbiAqIEBuYW1lIG1kUmFkaW9CdXR0b25cbiAqXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGA8bWQtcmFkaW8tYnV0dG9uPmBkaXJlY3RpdmUgaXMgdGhlIGNoaWxkIGRpcmVjdGl2ZSByZXF1aXJlZCB0byBiZSB1c2VkIHdpdGhpbiBgPG1kLXJhZGlvLWdyb3VwPmAgZWxlbWVudHMuXG4gKlxuICogV2hpbGUgc2ltaWxhciB0byB0aGUgYDxpbnB1dCB0eXBlPVwicmFkaW9cIiBuZy1tb2RlbD1cIlwiIHZhbHVlPVwiXCI+YCBkaXJlY3RpdmUsXG4gKiB0aGUgYDxtZC1yYWRpby1idXR0b24+YCBkaXJlY3RpdmUgcHJvdmlkZXMgaW5rIGVmZmVjdHMsIEFSSUEgc3VwcG9ydCwgYW5kXG4gKiBzdXBwb3J0cyB1c2Ugd2l0aGluIG5hbWVkIHJhZGlvIGdyb3Vwcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdWYWx1ZSBBbmd1bGFyIGV4cHJlc3Npb24gd2hpY2ggc2V0cyB0aGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkXG4gKiAgICBiZSBzZXQgd2hlbiBzZWxlY3RlZC4qXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBzZXQgd2hlbiBzZWxlY3RlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gYXJpYS1sYWJlbCBBZGRzIGxhYmVsIHRvIHJhZGlvIGJ1dHRvbiBmb3IgYWNjZXNzaWJpbGl0eS5cbiAqIERlZmF1bHRzIHRvIHJhZGlvIGJ1dHRvbidzIHRleHQuIElmIG5vIHRleHQgY29udGVudCBpcyBhdmFpbGFibGUsIGEgd2FybmluZyB3aWxsIGJlIGxvZ2dlZC5cbiAqXG4gKiBAdXNhZ2VcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKlxuICogPG1kLXJhZGlvLWJ1dHRvbiB2YWx1ZT1cIjFcIiBhcmlhLWxhYmVsPVwiTGFiZWwgMVwiPlxuICogICBMYWJlbCAxXG4gKiA8L21kLXJhZGlvLWJ1dHRvbj5cbiAqXG4gKiA8bWQtcmFkaW8tYnV0dG9uIG5nLW1vZGVsPVwiY29sb3JcIiBuZy12YWx1ZT1cInNwZWNpYWxWYWx1ZVwiIGFyaWEtbGFiZWw9XCJHcmVlblwiPlxuICogICBHcmVlblxuICogPC9tZC1yYWRpby1idXR0b24+XG4gKlxuICogPC9obGpzPlxuICpcbiAqL1xuZnVuY3Rpb24gbWRSYWRpb0J1dHRvbkRpcmVjdGl2ZSgkbWRBcmlhLCAkbWRVdGlsLCAkbWRUaGVtaW5nKSB7XG5cbiAgdmFyIENIRUNLRURfQ1NTID0gJ21kLWNoZWNrZWQnO1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICByZXF1aXJlOiAnXm1kUmFkaW9Hcm91cCcsXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtZC1jb250YWluZXJcIiBtZC1pbmstcmlwcGxlIG1kLWluay1yaXBwbGUtY2hlY2tib3g+JyArXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtZC1vZmZcIj48L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1kLW9uXCI+PC9kaXY+JyArXG4gICAgICAgICAgICAgICc8L2Rpdj4nICtcbiAgICAgICAgICAgICAgJzxkaXYgbmctdHJhbnNjbHVkZSBjbGFzcz1cIm1kLWxhYmVsXCI+PC9kaXY+JyxcbiAgICBsaW5rOiBsaW5rXG4gIH07XG5cbiAgZnVuY3Rpb24gbGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgcmdDdHJsKSB7XG4gICAgdmFyIGxhc3RDaGVja2VkO1xuXG4gICAgJG1kVGhlbWluZyhlbGVtZW50KTtcbiAgICBjb25maWd1cmVBcmlhKGVsZW1lbnQsIHNjb3BlKTtcblxuICAgIHJnQ3RybC5hZGQocmVuZGVyKTtcbiAgICBhdHRyLiRvYnNlcnZlKCd2YWx1ZScsIHJlbmRlcik7XG5cbiAgICBlbGVtZW50XG4gICAgICAub24oJ2NsaWNrJywgbGlzdGVuZXIpXG4gICAgICAub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJnQ3RybC5yZW1vdmUocmVuZGVyKTtcbiAgICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoZXYpIHtcbiAgICAgIGlmIChlbGVtZW50WzBdLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkgcmV0dXJuO1xuXG4gICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJnQ3RybC5zZXRWaWV3VmFsdWUoYXR0ci52YWx1ZSwgZXYgJiYgZXYudHlwZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgY2hlY2tlZCA9IChyZ0N0cmwuZ2V0Vmlld1ZhbHVlKCkgPT0gYXR0ci52YWx1ZSk7XG4gICAgICBpZiAoY2hlY2tlZCA9PT0gbGFzdENoZWNrZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGFzdENoZWNrZWQgPSBjaGVja2VkO1xuICAgICAgZWxlbWVudC5hdHRyKCdhcmlhLWNoZWNrZWQnLCBjaGVja2VkKTtcbiAgICAgIGlmIChjaGVja2VkKSB7XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoQ0hFQ0tFRF9DU1MpO1xuICAgICAgICByZ0N0cmwuc2V0QWN0aXZlRGVzY2VuZGFudChlbGVtZW50LmF0dHIoJ2lkJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhDSEVDS0VEX0NTUyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluamVjdCBBUklBLXNwZWNpZmljIGF0dHJpYnV0ZXMgYXBwcm9wcmlhdGUgZm9yIGVhY2ggcmFkaW8gYnV0dG9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZmlndXJlQXJpYSggZWxlbWVudCwgc2NvcGUgKXtcbiAgICAgIHNjb3BlLmFyaWFJZCA9IGJ1aWxkQXJpYUlEKCk7XG5cbiAgICAgIGVsZW1lbnQuYXR0cih7XG4gICAgICAgICdpZCcgOiAgc2NvcGUuYXJpYUlkLFxuICAgICAgICAncm9sZScgOiAncmFkaW8nLFxuICAgICAgICAnYXJpYS1jaGVja2VkJyA6ICdmYWxzZSdcbiAgICAgIH0pO1xuXG4gICAgICAkbWRBcmlhLmV4cGVjdFdpdGhUZXh0KGVsZW1lbnQsICdhcmlhLWxhYmVsJyk7XG5cbiAgICAgIC8qKlxuICAgICAgICogQnVpbGQgYSB1bmlxdWUgSUQgZm9yIGVhY2ggcmFkaW8gYnV0dG9uIHRoYXQgd2lsbCBiZSB1c2VkIHdpdGggYXJpYS1hY3RpdmVkZXNjZW5kYW50LlxuICAgICAgICogUHJlc2VydmUgZXhpc3RpbmcgSUQgaWYgYWxyZWFkeSBzcGVjaWZpZWQuXG4gICAgICAgKiBAcmV0dXJucyB7KnxzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkQXJpYUlEKCkge1xuICAgICAgICByZXR1cm4gYXR0ci5pZCB8fCAoICdyYWRpbycgKyBcIl9cIiArICRtZFV0aWwubmV4dFVpZCgpICk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5tZFJhZGlvQnV0dG9uRGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkbWRBcmlhXCIsIFwiJG1kVXRpbFwiLCBcIiRtZFRoZW1pbmdcIl07XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG1hdGVyaWFsLmNvbXBvbmVudHMuc2VsZWN0XG4gKi9cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4jIyMgVE9ETyAjIyNcbioqRE9DVU1FTlRBVElPTiBBTkQgREVNT1MqKlxuXG4tIFsgXSBuZy1tb2RlbCB3aXRoIGNoaWxkIG1kT3B0aW9ucyAoYmFzaWMpXG4tIFsgXSBuZy1tb2RlbD1cImZvb1wiIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IHRyYWNrQnk6ICckdmFsdWUuaWQnIH1cIiBmb3Igb2JqZWN0c1xuLSBbIF0gbWRPcHRpb24gd2l0aCB2YWx1ZVxuLSBbIF0gVXNhZ2Ugd2l0aCBpbnB1dCBpbnNpZGVcblxuIyMjIFRPRE8gLSBQT1NUIFJDMSAjIyNcbi0gWyBdIEFic3RyYWN0IHBsYWNlbWVudCBsb2dpYyBpbiAkbWRTZWxlY3Qgc2VydmljZSB0byAkbWRNZW51IHNlcnZpY2VcblxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgU0VMRUNUX0VER0VfTUFSR0lOID0gODtcbnZhciBzZWxlY3ROZXh0SWQgPSAwO1xuXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5zZWxlY3QnLCBbXG4gICdtYXRlcmlhbC5jb3JlJyxcbiAgJ21hdGVyaWFsLmNvbXBvbmVudHMuYmFja2Ryb3AnXG5dKVxuLmRpcmVjdGl2ZSgnbWRTZWxlY3QnLCBTZWxlY3REaXJlY3RpdmUpXG4uZGlyZWN0aXZlKCdtZFNlbGVjdE1lbnUnLCBTZWxlY3RNZW51RGlyZWN0aXZlKVxuLmRpcmVjdGl2ZSgnbWRPcHRpb24nLCBPcHRpb25EaXJlY3RpdmUpXG4uZGlyZWN0aXZlKCdtZE9wdGdyb3VwJywgT3B0Z3JvdXBEaXJlY3RpdmUpXG4ucHJvdmlkZXIoJyRtZFNlbGVjdCcsIFNlbGVjdFByb3ZpZGVyKTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG1kU2VsZWN0XG4gKiBAcmVzdHJpY3QgRVxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLnNlbGVjdFxuICpcbiAqIEBkZXNjcmlwdGlvbiBEaXNwbGF5cyBhIHNlbGVjdCBib3gsIGJvdW5kIHRvIGFuIG5nLW1vZGVsLlxuICpcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmctbW9kZWwgVGhlIG1vZGVsIVxuICogQHBhcmFtIHtleHByZXNzaW9uPX0gbWQtb24tY2xvc2UgZXhwcmVzc2lvbiB0byBiZSBldmFsdWF0ZWQgd2hlbiB0aGUgc2VsZWN0IGlzIGNsb3NlZFxuICogQHBhcmFtIHtib29sZWFuPX0gbXVsdGlwbGUgV2hldGhlciBpdCdzIG11bHRpcGxlLlxuICogQHBhcmFtIHtzdHJpbmc9fSBwbGFjZWhvbGRlciBQbGFjZWhvbGRlciBoaW50IHRleHQuXG4gKiBAcGFyYW0ge3N0cmluZz19IGFyaWEtbGFiZWwgT3B0aW9uYWwgbGFiZWwgZm9yIGFjY2Vzc2liaWxpdHkuIE9ubHkgbmVjZXNzYXJ5IGlmIG5vIHBsYWNlaG9sZGVyIG9yXG4gKiBleHBsaWNpdCBsYWJlbCBpcyBwcmVzZW50LlxuICpcbiAqIEB1c2FnZVxuICogV2l0aCBhIHBsYWNlaG9sZGVyIChsYWJlbCBhbmQgYXJpYS1sYWJlbCBhcmUgYWRkZWQgZHluYW1pY2FsbHkpXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogICA8bWQtc2VsZWN0XG4gKiAgICAgbmctbW9kZWw9XCJzb21lTW9kZWxcIlxuICogICAgIHBsYWNlaG9sZGVyPVwiU2VsZWN0IGEgc3RhdGVcIj5cbiAqICAgICA8bWQtb3B0aW9uIG5nLXZhbHVlPVwib3B0XCIgbmctcmVwZWF0PVwib3B0IGluIG5laWdoYm9yaG9vZHMyXCI+e3sgb3B0IH19PC9tZC1vcHRpb24+XG4gKiAgIDwvbWQtc2VsZWN0PlxuICogPC9obGpzPlxuICpcbiAqIFdpdGggYW4gZXhwbGljaXQgbGFiZWxcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiAgIDxtZC1zZWxlY3RcbiAqICAgICBuZy1tb2RlbD1cInNvbWVNb2RlbFwiPlxuICogICAgIDxtZC1zZWxlY3QtbGFiZWw+U2VsZWN0IGEgc3RhdGU8L21kLXNlbGVjdC1sYWJlbD5cbiAqICAgICA8bWQtb3B0aW9uIG5nLXZhbHVlPVwib3B0XCIgbmctcmVwZWF0PVwib3B0IGluIG5laWdoYm9yaG9vZHMyXCI+e3sgb3B0IH19PC9tZC1vcHRpb24+XG4gKiAgIDwvbWQtc2VsZWN0PlxuICogPC9obGpzPlxuICovXG5mdW5jdGlvbiBTZWxlY3REaXJlY3RpdmUoJG1kU2VsZWN0LCAkbWRVdGlsLCAkbWRUaGVtaW5nLCAkbWRBcmlhLCAkaW50ZXJwb2xhdGUsICRjb21waWxlLCAkcGFyc2UpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6IFsnbWRTZWxlY3QnLCAnbmdNb2RlbCcsICc/XmZvcm0nXSxcbiAgICBjb21waWxlOiBjb21waWxlLFxuICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCkgeyB9IC8vIGVtcHR5IHBsYWNlaG9sZGVyIGNvbnRyb2xsZXIgdG8gYmUgaW5pdGlhbGl6ZWQgaW4gbGlua1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNvbXBpbGUoZWxlbWVudCwgYXR0cikge1xuICAgIC8vIFRoZSB1c2VyIGlzIGFsbG93ZWQgdG8gcHJvdmlkZSBhIGxhYmVsIGZvciB0aGUgc2VsZWN0IGFzIG1kLXNlbGVjdC1sYWJlbCBjaGlsZFxuICAgIHZhciBsYWJlbEVsID0gZWxlbWVudC5maW5kKCdtZC1zZWxlY3QtbGFiZWwnKS5yZW1vdmUoKTtcblxuICAgIC8vIElmIG5vdCBwcm92aWRlZCwgd2UgYXV0b21hdGljYWxseSBtYWtlIG9uZVxuICAgIGlmICghbGFiZWxFbC5sZW5ndGgpIHtcbiAgICAgIGxhYmVsRWwgPSBhbmd1bGFyLmVsZW1lbnQoJzxtZC1zZWxlY3QtbGFiZWw+PHNwYW4+PC9zcGFuPjwvbWQtc2VsZWN0LWxhYmVsPicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWxhYmVsRWxbMF0uZmlyc3RFbGVtZW50Q2hpbGQpIHtcbiAgICAgICAgdmFyIHNwYW5XcmFwcGVyID0gYW5ndWxhci5lbGVtZW50KCc8c3Bhbj4nKTtcbiAgICAgICAgc3BhbldyYXBwZXIuYXBwZW5kKGxhYmVsRWwuY29udGVudHMoKSk7XG4gICAgICAgIGxhYmVsRWwuYXBwZW5kKHNwYW5XcmFwcGVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFiZWxFbC5hcHBlbmQoJzxzcGFuIGNsYXNzPVwibWQtc2VsZWN0LWljb25cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+Jyk7XG4gICAgbGFiZWxFbC5hZGRDbGFzcygnbWQtc2VsZWN0LWxhYmVsJyk7XG4gICAgaWYgKCFsYWJlbEVsWzBdLmhhc0F0dHJpYnV0ZSgnaWQnKSkge1xuICAgICAgbGFiZWxFbC5hdHRyKCdpZCcsICdzZWxlY3RfbGFiZWxfJyArICRtZFV0aWwubmV4dFVpZCgpKTtcbiAgICB9XG5cbiAgICAvLyBUaGVyZSdzIGdvdCB0byBiZSBhbiBtZC1jb250ZW50IGluc2lkZS4gSWYgdGhlcmUncyBub3Qgb25lLCBsZXQncyBhZGQgaXQuXG4gICAgaWYgKCFlbGVtZW50LmZpbmQoJ21kLWNvbnRlbnQnKS5sZW5ndGgpIHtcbiAgICAgIGVsZW1lbnQuYXBwZW5kKCBhbmd1bGFyLmVsZW1lbnQoJzxtZC1jb250ZW50PicpLmFwcGVuZChlbGVtZW50LmNvbnRlbnRzKCkpICk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHByb2dyZXNzIHNwaW5uZXIgZm9yIG1kLW9wdGlvbnMtbG9hZGluZ1xuICAgIGlmIChhdHRyLm1kT25PcGVuKSB7XG4gICAgICBlbGVtZW50LmZpbmQoJ21kLWNvbnRlbnQnKS5wcmVwZW5kKFxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJzxtZC1wcm9ncmVzcy1jaXJjdWxhcj4nKVxuICAgICAgICAgICAgICAgLmF0dHIoJ21kLW1vZGUnLCAnaW5kZXRlcm1pbmF0ZScpXG4gICAgICAgICAgICAgICAuYXR0cignbmctaGlkZScsICckJGxvYWRpbmdBc3luY0RvbmUnKVxuICAgICAgICAgICAgICAgLndyYXAoJzxkaXY+JylcbiAgICAgICAgICAgICAgIC5wYXJlbnQoKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoYXR0ci5uYW1lKSB7XG4gICAgICB2YXIgYXV0b2ZpbGxDbG9uZSA9IGFuZ3VsYXIuZWxlbWVudCgnPHNlbGVjdCBjbGFzcz1cIm1kLXZpc3VhbGx5LWhpZGRlblwiPicpO1xuICAgICAgYXV0b2ZpbGxDbG9uZS5hdHRyKHtcbiAgICAgICAgJ25hbWUnOiAnLicgKyBhdHRyLm5hbWUsXG4gICAgICAgICduZy1tb2RlbCc6IGF0dHIubmdNb2RlbCxcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICB9KTtcbiAgICAgIHZhciBvcHRzID0gZWxlbWVudC5maW5kKCdtZC1vcHRpb24nKTtcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChvcHRzLCBmdW5jdGlvbihlbCkge1xuICAgICAgICB2YXIgbmV3RWwgPSBhbmd1bGFyLmVsZW1lbnQoJzxvcHRpb24+JyArIGVsLmlubmVySFRNTCArICc8L29wdGlvbj4nKTtcbiAgICAgICAgaWYgKGVsLmhhc0F0dHJpYnV0ZSgnbmctdmFsdWUnKSkgbmV3RWwuYXR0cignbmctdmFsdWUnLCBlbC5nZXRBdHRyaWJ1dGUoJ25nLXZhbHVlJykpO1xuICAgICAgICBlbHNlIGlmIChlbC5oYXNBdHRyaWJ1dGUoJ3ZhbHVlJykpIG5ld0VsLmF0dHIoJ3ZhbHVlJywgZWwuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKTtcbiAgICAgICAgYXV0b2ZpbGxDbG9uZS5hcHBlbmQobmV3RWwpO1xuICAgICAgfSk7XG5cbiAgICAgIGVsZW1lbnQucGFyZW50KCkuYXBwZW5kKGF1dG9maWxsQ2xvbmUpO1xuICAgIH1cblxuICAgIC8vIFVzZSBldmVyeXRoaW5nIHRoYXQncyBsZWZ0IGluc2lkZSBlbGVtZW50LmNvbnRlbnRzKCkgYXMgdGhlIGNvbnRlbnRzIG9mIHRoZSBtZW51XG4gICAgdmFyIHNlbGVjdFRlbXBsYXRlID0gJzxkaXYgY2xhc3M9XCJtZC1zZWxlY3QtbWVudS1jb250YWluZXJcIj4nICtcbiAgICAgICAgJzxtZC1zZWxlY3QtbWVudSAnICtcbiAgICAgICAgKGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHIubXVsdGlwbGUpID8gJ211bHRpcGxlJyA6ICcnKSArICc+JyArXG4gICAgICAgICAgZWxlbWVudC5odG1sKCkgK1xuICAgICAgICAnPC9tZC1zZWxlY3QtbWVudT48L2Rpdj4nO1xuXG4gICAgZWxlbWVudC5lbXB0eSgpLmFwcGVuZChsYWJlbEVsKTtcblxuICAgIGF0dHIudGFiaW5kZXggPSBhdHRyLnRhYmluZGV4IHx8ICcwJztcblxuICAgIHJldHVybiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHtcbiAgICAgIHZhciBpc09wZW47XG4gICAgICB2YXIgaXNEaXNhYmxlZDtcblxuICAgICAgdmFyIG1kU2VsZWN0Q3RybCA9IGN0cmxzWzBdO1xuICAgICAgdmFyIG5nTW9kZWwgPSBjdHJsc1sxXTtcbiAgICAgIHZhciBmb3JtQ3RybCA9IGN0cmxzWzJdO1xuXG4gICAgICB2YXIgbGFiZWxFbCA9IGVsZW1lbnQuZmluZCgnbWQtc2VsZWN0LWxhYmVsJyk7XG4gICAgICB2YXIgY3VzdG9tTGFiZWwgPSBsYWJlbEVsLnRleHQoKS5sZW5ndGggIT09IDA7XG4gICAgICB2YXIgc2VsZWN0Q29udGFpbmVyLCBzZWxlY3RTY29wZSwgc2VsZWN0TWVudUN0cmw7XG4gICAgICBjcmVhdGVTZWxlY3QoKTtcblxuICAgICAgJG1kVGhlbWluZyhlbGVtZW50KTtcblxuICAgICAgaWYgKGF0dHIubmFtZSAmJiBmb3JtQ3RybCkge1xuICAgICAgICB2YXIgc2VsZWN0RWwgPSBlbGVtZW50LnBhcmVudCgpWzBdLnF1ZXJ5U2VsZWN0b3IoJ3NlbGVjdFtuYW1lPVwiLicgKyBhdHRyLm5hbWUgKyAnXCJdJyk7XG4gICAgICAgIGZvcm1DdHJsLiRyZW1vdmVDb250cm9sKGFuZ3VsYXIuZWxlbWVudChzZWxlY3RFbCkuY29udHJvbGxlcigpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9yaWdpbmFsUmVuZGVyID0gbmdNb2RlbC4kcmVuZGVyO1xuICAgICAgbmdNb2RlbC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIG9yaWdpbmFsUmVuZGVyKCk7XG4gICAgICAgIHN5bmNMYWJlbFRleHQoKTtcbiAgICAgIH07XG5cbiAgICAgIG1kU2VsZWN0Q3RybC5zZXRMYWJlbFRleHQgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgICAgIGlmIChjdXN0b21MYWJlbCkgcmV0dXJuOyAvLyBBc3N1bWUgdGhhdCB1c2VyIGlzIGhhbmRsaW5nIGl0IG9uIHRoZWlyIG93blxuICAgICAgICBtZFNlbGVjdEN0cmwuc2V0SXNQbGFjZWhvbGRlcighdGV4dCk7XG4gICAgICAgIHRleHQgPSB0ZXh0IHx8IGF0dHIucGxhY2Vob2xkZXIgfHwgJyc7XG4gICAgICAgIHZhciB0YXJnZXQgPSBjdXN0b21MYWJlbCA/IGxhYmVsRWwgOiBsYWJlbEVsLmNoaWxkcmVuKCkuZXEoMCk7XG4gICAgICAgIHRhcmdldC50ZXh0KHRleHQpO1xuICAgICAgfTtcblxuICAgICAgbWRTZWxlY3RDdHJsLnNldElzUGxhY2Vob2xkZXIgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgdmFsID8gbGFiZWxFbC5hZGRDbGFzcygnbWQtcGxhY2Vob2xkZXInKSA6IGxhYmVsRWwucmVtb3ZlQ2xhc3MoJ21kLXBsYWNlaG9sZGVyJyk7XG4gICAgICB9O1xuXG4gICAgICBtZFNlbGVjdEN0cmwudHJpZ2dlckNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICRwYXJzZShhdHRyLm1kT25DbG9zZSkoc2NvcGUpO1xuICAgICAgfTtcblxuICAgICAgc2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRBcmlhTGFiZWwoKTtcbiAgICAgICAgc3luY0xhYmVsVGV4dCgpO1xuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIHNldEFyaWFMYWJlbCgpIHtcbiAgICAgICAgdmFyIGxhYmVsVGV4dCA9IGVsZW1lbnQuYXR0cigncGxhY2Vob2xkZXInKTtcbiAgICAgICAgaWYgKCFsYWJlbFRleHQpIHtcbiAgICAgICAgICBsYWJlbFRleHQgPSBlbGVtZW50LmZpbmQoJ21kLXNlbGVjdC1sYWJlbCcpLnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgICAkbWRBcmlhLmV4cGVjdChlbGVtZW50LCAnYXJpYS1sYWJlbCcsIGxhYmVsVGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHN5bmNMYWJlbFRleHQoKSB7XG4gICAgICAgIGlmIChzZWxlY3RDb250YWluZXIpIHtcbiAgICAgICAgICBzZWxlY3RNZW51Q3RybCA9IHNlbGVjdE1lbnVDdHJsIHx8IHNlbGVjdENvbnRhaW5lci5maW5kKCdtZC1zZWxlY3QtbWVudScpLmNvbnRyb2xsZXIoJ21kU2VsZWN0TWVudScpO1xuICAgICAgICAgIG1kU2VsZWN0Q3RybC5zZXRMYWJlbFRleHQoc2VsZWN0TWVudUN0cmwuc2VsZWN0ZWRMYWJlbHMoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGRlcmVnaXN0ZXJXYXRjaGVyO1xuICAgICAgYXR0ci4kb2JzZXJ2ZSgnbmdNdWx0aXBsZScsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBpZiAoZGVyZWdpc3RlcldhdGNoZXIpIGRlcmVnaXN0ZXJXYXRjaGVyKCk7XG4gICAgICAgIHZhciBwYXJzZXIgPSAkcGFyc2UodmFsKTtcbiAgICAgICAgZGVyZWdpc3RlcldhdGNoZXIgPSBzY29wZS4kd2F0Y2goZnVuY3Rpb24oKSB7IHJldHVybiBwYXJzZXIoc2NvcGUpOyB9LCBmdW5jdGlvbihtdWx0aXBsZSwgcHJldlZhbCkge1xuICAgICAgICAgIGlmIChtdWx0aXBsZSA9PT0gdW5kZWZpbmVkICYmIHByZXZWYWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuOyAvLyBhc3N1bWUgY29tcGlsZXIgZGlkIGEgZ29vZCBqb2JcbiAgICAgICAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuYXR0cignbXVsdGlwbGUnLCAnbXVsdGlwbGUnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyKCdtdWx0aXBsZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2VsZWN0Q29udGFpbmVyKSB7XG4gICAgICAgICAgICBzZWxlY3RNZW51Q3RybC5zZXRNdWx0aXBsZShtdWx0aXBsZSk7XG4gICAgICAgICAgICBvcmlnaW5hbFJlbmRlciA9IG5nTW9kZWwuJHJlbmRlcjtcbiAgICAgICAgICAgIG5nTW9kZWwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBvcmlnaW5hbFJlbmRlcigpO1xuICAgICAgICAgICAgICBzeW5jTGFiZWxUZXh0KCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2VsZWN0TWVudUN0cmwucmVmcmVzaFZpZXdWYWx1ZSgpO1xuICAgICAgICAgICAgbmdNb2RlbC4kcmVuZGVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBhdHRyLiRvYnNlcnZlKCdkaXNhYmxlZCcsIGZ1bmN0aW9uKGRpc2FibGVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGlzYWJsZWQgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIGRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmV2ZW50IGNsaWNrIGV2ZW50IGJlaW5nIHJlZ2lzdGVyZWQgdHdpY2VcbiAgICAgICAgaWYgKGlzRGlzYWJsZWQgIT09IHVuZGVmaW5lZCAmJiBpc0Rpc2FibGVkID09PSBkaXNhYmxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpc0Rpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICAgIGVsZW1lbnQuYXR0cih7J3RhYmluZGV4JzogLTEsICdhcmlhLWRpc2FibGVkJzogJ3RydWUnfSk7XG4gICAgICAgICAgZWxlbWVudC5vZmYoJ2NsaWNrJywgb3BlblNlbGVjdCk7XG4gICAgICAgICAgZWxlbWVudC5vZmYoJ2tleWRvd24nLCBoYW5kbGVLZXlwcmVzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWxlbWVudC5hdHRyKHsndGFiaW5kZXgnOiBhdHRyLnRhYmluZGV4LCAnYXJpYS1kaXNhYmxlZCc6ICdmYWxzZSd9KTtcbiAgICAgICAgICBlbGVtZW50Lm9uKCdjbGljaycsIG9wZW5TZWxlY3QpO1xuICAgICAgICAgIGVsZW1lbnQub24oJ2tleWRvd24nLCBoYW5kbGVLZXlwcmVzcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIWF0dHIuZGlzYWJsZWQgJiYgIWF0dHIubmdEaXNhYmxlZCkge1xuICAgICAgICBlbGVtZW50LmF0dHIoeyd0YWJpbmRleCc6IGF0dHIudGFiaW5kZXgsICdhcmlhLWRpc2FibGVkJzogJ2ZhbHNlJ30pO1xuICAgICAgICBlbGVtZW50Lm9uKCdjbGljaycsIG9wZW5TZWxlY3QpO1xuICAgICAgICBlbGVtZW50Lm9uKCdrZXlkb3duJywgaGFuZGxlS2V5cHJlc3MpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXJpYUF0dHJzID0ge1xuICAgICAgICByb2xlOiAnY29tYm9ib3gnLFxuICAgICAgICAnYXJpYS1leHBhbmRlZCc6ICdmYWxzZSdcbiAgICAgIH07XG4gICAgICBpZiAoIWVsZW1lbnRbMF0uaGFzQXR0cmlidXRlKCdpZCcpKSB7XG4gICAgICAgIGFyaWFBdHRycy5pZCA9ICdzZWxlY3RfJyArICRtZFV0aWwubmV4dFVpZCgpO1xuICAgICAgfVxuICAgICAgZWxlbWVudC5hdHRyKGFyaWFBdHRycyk7XG5cbiAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGlzT3Blbikge1xuICAgICAgICAgICRtZFNlbGVjdC5jYW5jZWwoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZWN0Q29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGVjdENvbnRhaW5lci5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cblxuICAgICAgLy8gQ3JlYXRlIGEgZmFrZSBzZWxlY3QgdG8gZmluZCBvdXQgdGhlIGxhYmVsIHZhbHVlXG4gICAgICBmdW5jdGlvbiBjcmVhdGVTZWxlY3QoKSB7XG4gICAgICAgIHNlbGVjdENvbnRhaW5lciA9IGFuZ3VsYXIuZWxlbWVudChzZWxlY3RUZW1wbGF0ZSk7XG4gICAgICAgIHZhciBzZWxlY3RFbCA9IHNlbGVjdENvbnRhaW5lci5maW5kKCdtZC1zZWxlY3QtbWVudScpO1xuICAgICAgICBzZWxlY3RFbC5kYXRhKCckbmdNb2RlbENvbnRyb2xsZXInLCBuZ01vZGVsKTtcbiAgICAgICAgc2VsZWN0RWwuZGF0YSgnJG1kU2VsZWN0Q29udHJvbGxlcicsIG1kU2VsZWN0Q3RybCk7XG4gICAgICAgIHNlbGVjdFNjb3BlID0gc2NvcGUuJG5ldygpO1xuICAgICAgICBzZWxlY3RDb250YWluZXIgPSAkY29tcGlsZShzZWxlY3RDb250YWluZXIpKHNlbGVjdFNjb3BlKTtcbiAgICAgICAgc2VsZWN0TWVudUN0cmwgPSBzZWxlY3RDb250YWluZXIuZmluZCgnbWQtc2VsZWN0LW1lbnUnKS5jb250cm9sbGVyKCdtZFNlbGVjdE1lbnUnKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaGFuZGxlS2V5cHJlc3MoZSkge1xuICAgICAgICB2YXIgYWxsb3dlZENvZGVzID0gWzMyLCAxMywgMzgsIDQwXTtcbiAgICAgICAgaWYgKGFsbG93ZWRDb2Rlcy5pbmRleE9mKGUua2V5Q29kZSkgIT0gLTEgKSB7XG4gICAgICAgICAgLy8gcHJldmVudCBwYWdlIHNjcm9sbGluZyBvbiBpbnRlcmFjdGlvblxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBvcGVuU2VsZWN0KGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChlLmtleUNvZGUgPD0gOTAgJiYgZS5rZXlDb2RlID49IDMxKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IHNlbGVjdE1lbnVDdHJsLm9wdE5vZGVGb3JLZXlib2FyZFNlYXJjaChlKTtcbiAgICAgICAgICAgIGlmICghbm9kZSkgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIG9wdGlvbkN0cmwgPSBhbmd1bGFyLmVsZW1lbnQobm9kZSkuY29udHJvbGxlcignbWRPcHRpb24nKTtcbiAgICAgICAgICAgIGlmICghc2VsZWN0TWVudUN0cmwuaXNNdWx0aXBsZSkge1xuICAgICAgICAgICAgICBzZWxlY3RNZW51Q3RybC5kZXNlbGVjdCggT2JqZWN0LmtleXMoc2VsZWN0TWVudUN0cmwuc2VsZWN0ZWQpWzBdICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxlY3RNZW51Q3RybC5zZWxlY3Qob3B0aW9uQ3RybC5oYXNoS2V5LCBvcHRpb25DdHJsLnZhbHVlKTtcbiAgICAgICAgICAgIHNlbGVjdE1lbnVDdHJsLnJlZnJlc2hWaWV3VmFsdWUoKTtcbiAgICAgICAgICAgIG5nTW9kZWwuJHJlbmRlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvcGVuU2VsZWN0KCkge1xuICAgICAgICBzY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlzT3BlbiA9IHRydWU7XG4gICAgICAgICAgJG1kU2VsZWN0LnNob3coe1xuICAgICAgICAgICAgc2NvcGU6IHNlbGVjdFNjb3BlLFxuICAgICAgICAgICAgcHJlc2VydmVTY29wZTogdHJ1ZSxcbiAgICAgICAgICAgIHNraXBDb21waWxlOiB0cnVlLFxuICAgICAgICAgICAgZWxlbWVudDogc2VsZWN0Q29udGFpbmVyLFxuICAgICAgICAgICAgdGFyZ2V0OiBlbGVtZW50WzBdLFxuICAgICAgICAgICAgaGFzQmFja2Ryb3A6IHRydWUsXG4gICAgICAgICAgICBsb2FkaW5nQXN5bmM6IGF0dHIubWRPbk9wZW4gPyBzY29wZS4kZXZhbChhdHRyLm1kT25PcGVuKSB8fCB0cnVlIDogZmFsc2UsXG4gICAgICAgICAgfSkudGhlbihmdW5jdGlvbihzZWxlY3RlZFRleHQpIHtcbiAgICAgICAgICAgIGlzT3BlbiA9IGZhbHNlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5TZWxlY3REaXJlY3RpdmUuJGluamVjdCA9IFtcIiRtZFNlbGVjdFwiLCBcIiRtZFV0aWxcIiwgXCIkbWRUaGVtaW5nXCIsIFwiJG1kQXJpYVwiLCBcIiRpbnRlcnBvbGF0ZVwiLCBcIiRjb21waWxlXCIsIFwiJHBhcnNlXCJdO1xuXG5mdW5jdGlvbiBTZWxlY3RNZW51RGlyZWN0aXZlKCRwYXJzZSwgJG1kVXRpbCwgJG1kVGhlbWluZykge1xuXG4gIFNlbGVjdE1lbnVDb250cm9sbGVyLiRpbmplY3QgPSBbXCIkc2NvcGVcIiwgXCIkYXR0cnNcIiwgXCIkZWxlbWVudFwiXTtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6IFsnbWRTZWxlY3RNZW51JywgJz9uZ01vZGVsJ10sXG4gICAgY29udHJvbGxlcjogU2VsZWN0TWVudUNvbnRyb2xsZXIsXG4gICAgbGluazogeyBwcmU6IHByZUxpbmsgfVxuICB9O1xuXG4gIC8vIFdlIHVzZSBwcmVMaW5rIGluc3RlYWQgb2YgcG9zdExpbmsgdG8gZW5zdXJlIHRoYXQgdGhlIHNlbGVjdCBpcyBpbml0aWFsaXplZCBiZWZvcmVcbiAgLy8gaXRzIGNoaWxkIG9wdGlvbnMgcnVuIHBvc3RMaW5rLlxuICBmdW5jdGlvbiBwcmVMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgIHZhciBzZWxlY3RDdHJsID0gY3RybHNbMF07XG4gICAgdmFyIG5nTW9kZWwgPSBjdHJsc1sxXTtcblxuICAgICRtZFRoZW1pbmcoZWxlbWVudCk7XG4gICAgZWxlbWVudC5vbignY2xpY2snLCBjbGlja0xpc3RlbmVyKTtcbiAgICBlbGVtZW50Lm9uKCdrZXlwcmVzcycsIGtleUxpc3RlbmVyKTtcbiAgICBpZiAobmdNb2RlbCkgc2VsZWN0Q3RybC5pbml0KG5nTW9kZWwpO1xuICAgIGNvbmZpZ3VyZUFyaWEoKTtcblxuICAgIGZ1bmN0aW9uIGNvbmZpZ3VyZUFyaWEoKSB7XG4gICAgICBlbGVtZW50LmF0dHIoe1xuICAgICAgICAnaWQnOiAnc2VsZWN0X21lbnVfJyArICRtZFV0aWwubmV4dFVpZCgpLFxuICAgICAgICAncm9sZSc6ICdsaXN0Ym94JyxcbiAgICAgICAgJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJzogKHNlbGVjdEN0cmwuaXNNdWx0aXBsZSA/ICd0cnVlJyA6ICdmYWxzZScpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXlMaXN0ZW5lcihlKSB7XG4gICAgICBpZiAoZS5rZXlDb2RlID09IDEzIHx8IGUua2V5Q29kZSA9PSAzMikge1xuICAgICAgICBjbGlja0xpc3RlbmVyKGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsaWNrTGlzdGVuZXIoZXYpIHtcbiAgICAgIHZhciBvcHRpb24gPSAkbWRVdGlsLmdldENsb3Nlc3QoZXYudGFyZ2V0LCAnbWQtb3B0aW9uJyk7XG4gICAgICB2YXIgb3B0aW9uQ3RybCA9IG9wdGlvbiAmJiBhbmd1bGFyLmVsZW1lbnQob3B0aW9uKS5kYXRhKCckbWRPcHRpb25Db250cm9sbGVyJyk7XG4gICAgICBpZiAoIW9wdGlvbiB8fCAhb3B0aW9uQ3RybCkgcmV0dXJuO1xuXG4gICAgICB2YXIgb3B0aW9uSGFzaEtleSA9IHNlbGVjdEN0cmwuaGFzaEdldHRlcihvcHRpb25DdHJsLnZhbHVlKTtcbiAgICAgIHZhciBpc1NlbGVjdGVkID0gYW5ndWxhci5pc0RlZmluZWQoc2VsZWN0Q3RybC5zZWxlY3RlZFtvcHRpb25IYXNoS2V5XSk7XG5cbiAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHNlbGVjdEN0cmwuaXNNdWx0aXBsZSkge1xuICAgICAgICAgIGlmIChpc1NlbGVjdGVkKSB7XG4gICAgICAgICAgICBzZWxlY3RDdHJsLmRlc2VsZWN0KG9wdGlvbkhhc2hLZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxlY3RDdHJsLnNlbGVjdChvcHRpb25IYXNoS2V5LCBvcHRpb25DdHJsLnZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFpc1NlbGVjdGVkKSB7XG4gICAgICAgICAgICBzZWxlY3RDdHJsLmRlc2VsZWN0KCBPYmplY3Qua2V5cyhzZWxlY3RDdHJsLnNlbGVjdGVkKVswXSApO1xuICAgICAgICAgICAgc2VsZWN0Q3RybC5zZWxlY3QoIG9wdGlvbkhhc2hLZXksIG9wdGlvbkN0cmwudmFsdWUgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2VsZWN0Q3RybC5yZWZyZXNoVmlld1ZhbHVlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuXG5cbiAgZnVuY3Rpb24gU2VsZWN0TWVudUNvbnRyb2xsZXIoJHNjb3BlLCAkYXR0cnMsICRlbGVtZW50KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNlbGYuaXNNdWx0aXBsZSA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5tdWx0aXBsZSk7XG4gICAgLy8gc2VsZWN0ZWQgaXMgYW4gb2JqZWN0IHdpdGgga2V5cyBtYXRjaGluZyBhbGwgb2YgdGhlIHNlbGVjdGVkIG9wdGlvbnMnIGhhc2hlZCB2YWx1ZXNcbiAgICBzZWxmLnNlbGVjdGVkID0ge307XG4gICAgLy8gb3B0aW9ucyBpcyBhbiBvYmplY3Qgd2l0aCBrZXlzIG1hdGNoaW5nIGV2ZXJ5IG9wdGlvbidzIGhhc2ggdmFsdWUsXG4gICAgLy8gYW5kIHZhbHVlcyBtYXRjaGluZyBldmVyeSBvcHRpb24ncyBjb250cm9sbGVyLlxuICAgIHNlbGYub3B0aW9ucyA9IHt9O1xuXG4gICAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbigpIHsgcmV0dXJuIHNlbGYub3B0aW9uczsgfSwgZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLm5nTW9kZWwuJHJlbmRlcigpO1xuICAgIH0sIHRydWUpO1xuXG4gICAgdmFyIGRlcmVnaXN0ZXJDb2xsZWN0aW9uV2F0Y2g7XG4gICAgc2VsZi5zZXRNdWx0aXBsZSA9IGZ1bmN0aW9uKGlzTXVsdGlwbGUpIHtcbiAgICAgIHZhciBuZ01vZGVsID0gc2VsZi5uZ01vZGVsO1xuICAgICAgc2VsZi5pc011bHRpcGxlID0gaXNNdWx0aXBsZTtcbiAgICAgIGlmIChkZXJlZ2lzdGVyQ29sbGVjdGlvbldhdGNoKSBkZXJlZ2lzdGVyQ29sbGVjdGlvbldhdGNoKCk7XG5cbiAgICAgIGlmIChzZWxmLmlzTXVsdGlwbGUpIHtcbiAgICAgICAgbmdNb2RlbC4kdmFsaWRhdG9yc1snbWQtbXVsdGlwbGUnXSA9IHZhbGlkYXRlQXJyYXk7XG4gICAgICAgIG5nTW9kZWwuJHJlbmRlciA9IHJlbmRlck11bHRpcGxlO1xuXG4gICAgICAgIC8vIHdhdGNoQ29sbGVjdGlvbiBvbiB0aGUgbW9kZWwgYmVjYXVzZSBieSBkZWZhdWx0IG5nTW9kZWwgb25seSB3YXRjaGVzIHRoZSBtb2RlbCdzXG4gICAgICAgIC8vIHJlZmVyZW5jZS4gVGhpcyBhbGxvd2VkIHRoZSBkZXZlbG9wZXIgdG8gYWxzbyBwdXNoIGFuZCBwb3AgZnJvbSB0aGVpciBhcnJheS5cbiAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oJGF0dHJzLm5nTW9kZWwsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHZhbGlkYXRlQXJyYXkodmFsdWUpKSByZW5kZXJNdWx0aXBsZSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIG5nTW9kZWwuJHZhbGlkYXRvcnNbJ21kLW11bHRpcGxlJ107XG4gICAgICAgIG5nTW9kZWwuJHJlbmRlciA9IHJlbmRlclNpbmd1bGFyO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB2YWxpZGF0ZUFycmF5KG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICAvLyBJZiBhIHZhbHVlIGlzIHRydXRoeSBidXQgbm90IGFuIGFycmF5LCByZWplY3QgaXQuXG4gICAgICAgIC8vIElmIHZhbHVlIGlzIHVuZGVmaW5lZC9mYWxzeSwgYWNjZXB0IHRoYXQgaXQncyBhbiBlbXB0eSBhcnJheS5cbiAgICAgICAgcmV0dXJuIGFuZ3VsYXIuaXNBcnJheShtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZSB8fCBbXSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBzZWFyY2hTdHIgPSAnJztcbiAgICB2YXIgY2xlYXJTZWFyY2hUaW1lb3V0LCBvcHROb2Rlcywgb3B0VGV4dDtcbiAgICB2YXIgQ0xFQVJfU0VBUkNIX0FGVEVSID0gMzAwO1xuICAgIHNlbGYub3B0Tm9kZUZvcktleWJvYXJkU2VhcmNoID0gZnVuY3Rpb24oZSkge1xuICAgICAgY2xlYXJTZWFyY2hUaW1lb3V0ICYmIGNsZWFyVGltZW91dChjbGVhclNlYXJjaFRpbWVvdXQpO1xuICAgICAgY2xlYXJTZWFyY2hUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgY2xlYXJTZWFyY2hUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICBzZWFyY2hTdHIgPSAnJztcbiAgICAgICAgb3B0VGV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgb3B0Tm9kZXMgPSB1bmRlZmluZWQ7XG4gICAgICB9LCBDTEVBUl9TRUFSQ0hfQUZURVIpO1xuICAgICAgc2VhcmNoU3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZS5rZXlDb2RlKTtcbiAgICAgIHZhciBzZWFyY2ggPSBuZXcgUmVnRXhwKCdeJyArIHNlYXJjaFN0ciwgJ2knKTtcbiAgICAgIGlmICghb3B0Tm9kZXMpIHtcbiAgICAgICAgb3B0Tm9kZXMgPSAkZWxlbWVudC5maW5kKCdtZC1vcHRpb24nKTtcbiAgICAgICAgb3B0VGV4dCA9IG5ldyBBcnJheShvcHROb2Rlcy5sZW5ndGgpO1xuICAgICAgICBhbmd1bGFyLmZvckVhY2gob3B0Tm9kZXMsIGZ1bmN0aW9uKGVsLCBpKSB7XG4gICAgICAgICAgb3B0VGV4dFtpXSA9IGVsLnRleHRDb250ZW50LnRyaW0oKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdFRleHQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKHNlYXJjaC50ZXN0KG9wdFRleHRbaV0pKSB7XG4gICAgICAgICAgcmV0dXJuIG9wdE5vZGVzW2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuXG4gICAgc2VsZi5pbml0ID0gZnVuY3Rpb24obmdNb2RlbCkge1xuICAgICAgc2VsZi5uZ01vZGVsID0gbmdNb2RlbDtcblxuICAgICAgLy8gQWxsb3cgdXNlcnMgdG8gcHJvdmlkZSBgbmctbW9kZWw9XCJmb29cIiBuZy1tb2RlbC1vcHRpb25zPVwie3RyYWNrQnk6ICdmb28uaWQnfVwiYCBzb1xuICAgICAgLy8gdGhhdCB3ZSBjYW4gcHJvcGVybHkgY29tcGFyZSBvYmplY3RzIHNldCBvbiB0aGUgbW9kZWwgdG8gdGhlIGF2YWlsYWJsZSBvcHRpb25zXG4gICAgICBpZiAobmdNb2RlbC4kb3B0aW9ucyAmJiBuZ01vZGVsLiRvcHRpb25zLnRyYWNrQnkpIHtcbiAgICAgICAgdmFyIHRyYWNrQnlMb2NhbHMgPSB7fTtcbiAgICAgICAgdmFyIHRyYWNrQnlQYXJzZWQgPSAkcGFyc2UobmdNb2RlbC4kb3B0aW9ucy50cmFja0J5KTtcbiAgICAgICAgc2VsZi5oYXNoR2V0dGVyID0gZnVuY3Rpb24odmFsdWUsIHZhbHVlU2NvcGUpIHtcbiAgICAgICAgICB0cmFja0J5TG9jYWxzLiR2YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0cmFja0J5UGFyc2VkKHZhbHVlU2NvcGUgfHwgJHNjb3BlLCB0cmFja0J5TG9jYWxzKTtcbiAgICAgICAgfTtcbiAgICAgIC8vIElmIHRoZSB1c2VyIGRvZXNuJ3QgcHJvdmlkZSBhIHRyYWNrQnksIHdlIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGUgYW4gaWQgZm9yIGV2ZXJ5XG4gICAgICAvLyB2YWx1ZSBwYXNzZWQgaW5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuaGFzaEdldHRlciA9IGZ1bmN0aW9uIGdldEhhc2hWYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbmd1bGFyLmlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuICdvYmplY3RfJyArICh2YWx1ZS4kJG1kU2VsZWN0SWQgfHwgKHZhbHVlLiQkbWRTZWxlY3RJZCA9ICsrc2VsZWN0TmV4dElkKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHNlbGYuc2V0TXVsdGlwbGUoc2VsZi5pc011bHRpcGxlKTtcbiAgICB9O1xuXG4gICAgc2VsZi5zZWxlY3RlZExhYmVscyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGVjdGVkT3B0aW9uRWxzID0gJG1kVXRpbC5ub2Rlc1RvQXJyYXkoJGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvckFsbCgnbWQtb3B0aW9uW3NlbGVjdGVkXScpKTtcbiAgICAgIGlmIChzZWxlY3RlZE9wdGlvbkVscy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkT3B0aW9uRWxzLm1hcChmdW5jdGlvbihlbCkgeyByZXR1cm4gZWwudGV4dENvbnRlbnQ7IH0pLmpvaW4oJywgJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYuc2VsZWN0ID0gZnVuY3Rpb24oaGFzaEtleSwgaGFzaGVkVmFsdWUpIHtcbiAgICAgIHZhciBvcHRpb24gPSBzZWxmLm9wdGlvbnNbaGFzaEtleV07XG4gICAgICBvcHRpb24gJiYgb3B0aW9uLnNldFNlbGVjdGVkKHRydWUpO1xuICAgICAgc2VsZi5zZWxlY3RlZFtoYXNoS2V5XSA9IGhhc2hlZFZhbHVlO1xuICAgIH07XG4gICAgc2VsZi5kZXNlbGVjdCA9IGZ1bmN0aW9uKGhhc2hLZXkpIHtcbiAgICAgIHZhciBvcHRpb24gPSBzZWxmLm9wdGlvbnNbaGFzaEtleV07XG4gICAgICBvcHRpb24gJiYgb3B0aW9uLnNldFNlbGVjdGVkKGZhbHNlKTtcbiAgICAgIGRlbGV0ZSBzZWxmLnNlbGVjdGVkW2hhc2hLZXldO1xuICAgIH07XG5cbiAgICBzZWxmLmFkZE9wdGlvbiA9IGZ1bmN0aW9uKGhhc2hLZXksIG9wdGlvbkN0cmwpIHtcbiAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChzZWxmLm9wdGlvbnNbaGFzaEtleV0pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRHVwbGljYXRlIG1kLW9wdGlvbiB2YWx1ZXMgYXJlIG5vdCBhbGxvd2VkIGluIGEgc2VsZWN0LiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdEdXBsaWNhdGUgdmFsdWUgXCInICsgb3B0aW9uQ3RybC52YWx1ZSArICdcIiBmb3VuZC4nKTtcbiAgICAgIH1cbiAgICAgIHNlbGYub3B0aW9uc1toYXNoS2V5XSA9IG9wdGlvbkN0cmw7XG5cbiAgICAgIC8vIElmIHRoaXMgb3B0aW9uJ3MgdmFsdWUgd2FzIGFscmVhZHkgaW4gb3VyIG5nTW9kZWwsIGdvIGFoZWFkIGFuZCBzZWxlY3QgaXQuXG4gICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoc2VsZi5zZWxlY3RlZFtoYXNoS2V5XSkpIHtcbiAgICAgICAgc2VsZi5zZWxlY3QoaGFzaEtleSwgb3B0aW9uQ3RybC52YWx1ZSk7XG4gICAgICAgIHNlbGYucmVmcmVzaFZpZXdWYWx1ZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgc2VsZi5yZW1vdmVPcHRpb24gPSBmdW5jdGlvbihoYXNoS2V5KSB7XG4gICAgICBkZWxldGUgc2VsZi5vcHRpb25zW2hhc2hLZXldO1xuICAgICAgLy8gRG9uJ3QgZGVzZWxlY3QgYW4gb3B0aW9uIHdoZW4gaXQncyByZW1vdmVkIC0gdGhlIHVzZXIncyBuZ01vZGVsIHNob3VsZCBiZSBhbGxvd2VkXG4gICAgICAvLyB0byBoYXZlIHZhbHVlcyB0aGF0IGRvIG5vdCBtYXRjaCBhIGN1cnJlbnRseSBhdmFpbGFibGUgb3B0aW9uLlxuICAgIH07XG5cbiAgICBzZWxmLnJlZnJlc2hWaWV3VmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBvcHRpb247XG4gICAgICBmb3IgKHZhciBoYXNoS2V5IGluIHNlbGYuc2VsZWN0ZWQpIHtcbiAgICAgICAgIC8vIElmIHRoaXMgaGFzaEtleSBoYXMgYW4gYXNzb2NpYXRlZCBvcHRpb24sIHB1c2ggdGhhdCBvcHRpb24ncyB2YWx1ZSB0byB0aGUgbW9kZWwuXG4gICAgICAgICBpZiAoKG9wdGlvbiA9IHNlbGYub3B0aW9uc1toYXNoS2V5XSkpIHtcbiAgICAgICAgICAgdmFsdWVzLnB1c2gob3B0aW9uLnZhbHVlKTtcbiAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgIC8vIE90aGVyd2lzZSwgdGhlIGdpdmVuIGhhc2hLZXkgaGFzIG5vIGFzc29jaWF0ZWQgb3B0aW9uLCBhbmQgd2UgZ290IGl0XG4gICAgICAgICAgIC8vIGZyb20gYW4gbmdNb2RlbCB2YWx1ZSBhdCBhbiBlYXJsaWVyIHRpbWUuIFB1c2ggdGhlIHVuaGFzaGVkIHZhbHVlIG9mXG4gICAgICAgICAgIC8vIHRoaXMgaGFzaEtleSB0byB0aGUgbW9kZWwuXG4gICAgICAgICAgIC8vIFRoaXMgYWxsb3dzIHRoZSBkZXZlbG9wZXIgdG8gcHV0IGEgdmFsdWUgaW4gdGhlIG1vZGVsIHRoYXQgZG9lc24ndCB5ZXQgaGF2ZVxuICAgICAgICAgICAvLyBhbiBhc3NvY2lhdGVkIG9wdGlvbi5cbiAgICAgICAgICAgdmFsdWVzLnB1c2goc2VsZi5zZWxlY3RlZFtoYXNoS2V5XSk7XG4gICAgICAgICB9XG4gICAgICB9XG4gICAgICBzZWxmLm5nTW9kZWwuJHNldFZpZXdWYWx1ZShzZWxmLmlzTXVsdGlwbGUgPyB2YWx1ZXMgOiB2YWx1ZXNbMF0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZW5kZXJNdWx0aXBsZSgpIHtcbiAgICAgIHZhciBuZXdTZWxlY3RlZFZhbHVlcyA9IHNlbGYubmdNb2RlbC4kbW9kZWxWYWx1ZSB8fCBzZWxmLm5nTW9kZWwuJHZpZXdWYWx1ZTtcbiAgICAgIGlmICghYW5ndWxhci5pc0FycmF5KG5ld1NlbGVjdGVkVmFsdWVzKSkgcmV0dXJuO1xuXG4gICAgICB2YXIgb2xkU2VsZWN0ZWQgPSBPYmplY3Qua2V5cyhzZWxmLnNlbGVjdGVkKTtcblxuICAgICAgdmFyIG5ld1NlbGVjdGVkSGFzaGVzID0gbmV3U2VsZWN0ZWRWYWx1ZXMubWFwKHNlbGYuaGFzaEdldHRlcik7XG4gICAgICB2YXIgZGVzZWxlY3RlZCA9IG9sZFNlbGVjdGVkLmZpbHRlcihmdW5jdGlvbihoYXNoKSB7XG4gICAgICAgIHJldHVybiBuZXdTZWxlY3RlZEhhc2hlcy5pbmRleE9mKGhhc2gpID09PSAtMTtcbiAgICAgIH0pO1xuXG4gICAgICBkZXNlbGVjdGVkLmZvckVhY2goc2VsZi5kZXNlbGVjdCk7XG4gICAgICBuZXdTZWxlY3RlZEhhc2hlcy5mb3JFYWNoKGZ1bmN0aW9uKGhhc2hLZXksIGkpIHtcbiAgICAgICAgc2VsZi5zZWxlY3QoaGFzaEtleSwgbmV3U2VsZWN0ZWRWYWx1ZXNbaV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbmRlclNpbmd1bGFyKCkge1xuICAgICAgdmFyIHZhbHVlID0gc2VsZi5uZ01vZGVsLiR2aWV3VmFsdWUgfHwgc2VsZi5uZ01vZGVsLiRtb2RlbFZhbHVlO1xuICAgICAgT2JqZWN0LmtleXMoc2VsZi5zZWxlY3RlZCkuZm9yRWFjaChzZWxmLmRlc2VsZWN0KTtcbiAgICAgIHNlbGYuc2VsZWN0KCBzZWxmLmhhc2hHZXR0ZXIodmFsdWUpLCB2YWx1ZSApO1xuICAgIH1cbiAgfVxuXG59XG5TZWxlY3RNZW51RGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkcGFyc2VcIiwgXCIkbWRVdGlsXCIsIFwiJG1kVGhlbWluZ1wiXTtcblxuZnVuY3Rpb24gT3B0aW9uRGlyZWN0aXZlKCRtZEJ1dHRvbklua1JpcHBsZSwgJG1kVXRpbCkge1xuXG4gIE9wdGlvbkNvbnRyb2xsZXIuJGluamVjdCA9IFtcIiRlbGVtZW50XCJdO1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgcmVxdWlyZTogWydtZE9wdGlvbicsICdeXm1kU2VsZWN0TWVudSddLFxuICAgIGNvbnRyb2xsZXI6IE9wdGlvbkNvbnRyb2xsZXIsXG4gICAgY29tcGlsZTogY29tcGlsZVxuICB9O1xuXG4gIGZ1bmN0aW9uIGNvbXBpbGUoZWxlbWVudCwgYXR0cikge1xuICAgIC8vIE1hbnVhbCB0cmFuc2NsdXNpb24gdG8gYXZvaWQgdGhlIGV4dHJhIGlubmVyIDxzcGFuPiB0aGF0IG5nLXRyYW5zY2x1ZGUgZ2VuZXJhdGVzXG4gICAgZWxlbWVudC5hcHBlbmQoIGFuZ3VsYXIuZWxlbWVudCgnPGRpdiBjbGFzcz1cIm1kLXRleHRcIj4nKS5hcHBlbmQoZWxlbWVudC5jb250ZW50cygpKSApO1xuXG4gICAgZWxlbWVudC5hdHRyKCd0YWJpbmRleCcsIGF0dHIudGFiaW5kZXggfHwgJzAnKTtcbiAgICByZXR1cm4gcG9zdExpbms7XG4gIH1cblxuICBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHtcbiAgICB2YXIgb3B0aW9uQ3RybCA9IGN0cmxzWzBdO1xuICAgIHZhciBzZWxlY3RDdHJsID0gY3RybHNbMV07XG5cbiAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoYXR0ci5uZ1ZhbHVlKSkge1xuICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdWYWx1ZSwgc2V0T3B0aW9uVmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoYW5ndWxhci5pc0RlZmluZWQoYXR0ci52YWx1ZSkpIHtcbiAgICAgIHNldE9wdGlvblZhbHVlKGF0dHIudmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24oKSB7IHJldHVybiBlbGVtZW50LnRleHQoKTsgfSwgc2V0T3B0aW9uVmFsdWUpO1xuICAgIH1cblxuICAgIHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ3NlbGVjdGVkJywgZnVuY3Rpb24oc2VsZWN0ZWQpIHtcbiAgICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChzZWxlY3RlZCkpIHJldHVybjtcbiAgICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgICAgaWYgKCFzZWxlY3RDdHJsLmlzTXVsdGlwbGUpIHtcbiAgICAgICAgICAgIHNlbGVjdEN0cmwuZGVzZWxlY3QoIE9iamVjdC5rZXlzKHNlbGVjdEN0cmwuc2VsZWN0ZWQpWzBdICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbGVjdEN0cmwuc2VsZWN0KG9wdGlvbkN0cmwuaGFzaEtleSwgb3B0aW9uQ3RybC52YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZWN0Q3RybC5kZXNlbGVjdChvcHRpb25DdHJsLmhhc2hLZXkpO1xuICAgICAgICB9XG4gICAgICAgIHNlbGVjdEN0cmwucmVmcmVzaFZpZXdWYWx1ZSgpO1xuICAgICAgICBzZWxlY3RDdHJsLm5nTW9kZWwuJHJlbmRlcigpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAkbWRCdXR0b25JbmtSaXBwbGUuYXR0YWNoKHNjb3BlLCBlbGVtZW50KTtcbiAgICBjb25maWd1cmVBcmlhKCk7XG5cbiAgICBmdW5jdGlvbiBzZXRPcHRpb25WYWx1ZShuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIHZhciBvbGRIYXNoS2V5ID0gc2VsZWN0Q3RybC5oYXNoR2V0dGVyKG9sZFZhbHVlLCBzY29wZSk7XG4gICAgICB2YXIgbmV3SGFzaEtleSA9IHNlbGVjdEN0cmwuaGFzaEdldHRlcihuZXdWYWx1ZSwgc2NvcGUpO1xuXG4gICAgICBvcHRpb25DdHJsLmhhc2hLZXkgPSBuZXdIYXNoS2V5O1xuICAgICAgb3B0aW9uQ3RybC52YWx1ZSA9IG5ld1ZhbHVlO1xuXG4gICAgICBzZWxlY3RDdHJsLnJlbW92ZU9wdGlvbihvbGRIYXNoS2V5LCBvcHRpb25DdHJsKTtcbiAgICAgIHNlbGVjdEN0cmwuYWRkT3B0aW9uKG5ld0hhc2hLZXksIG9wdGlvbkN0cmwpO1xuICAgIH1cblxuICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgIHNlbGVjdEN0cmwucmVtb3ZlT3B0aW9uKG9wdGlvbkN0cmwuaGFzaEtleSwgb3B0aW9uQ3RybCk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBjb25maWd1cmVBcmlhKCkge1xuICAgICAgdmFyIGFyaWFBdHRycyA9IHtcbiAgICAgICAgJ3JvbGUnOiAnb3B0aW9uJyxcbiAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiAnZmFsc2UnXG4gICAgICB9O1xuXG4gICAgICBpZiAoIWVsZW1lbnRbMF0uaGFzQXR0cmlidXRlKCdpZCcpKSB7XG4gICAgICAgIGFyaWFBdHRycy5pZCA9ICdzZWxlY3Rfb3B0aW9uXycgKyAkbWRVdGlsLm5leHRVaWQoKTtcbiAgICAgIH1cbiAgICAgIGVsZW1lbnQuYXR0cihhcmlhQXR0cnMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIE9wdGlvbkNvbnRyb2xsZXIoJGVsZW1lbnQpIHtcbiAgICB0aGlzLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgdGhpcy5zZXRTZWxlY3RlZCA9IGZ1bmN0aW9uKGlzU2VsZWN0ZWQpIHtcbiAgICAgIGlmIChpc1NlbGVjdGVkICYmICF0aGlzLnNlbGVjdGVkKSB7XG4gICAgICAgICRlbGVtZW50LmF0dHIoe1xuICAgICAgICAgICdzZWxlY3RlZCc6ICdzZWxlY3RlZCcsXG4gICAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiAndHJ1ZSdcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc1NlbGVjdGVkICYmIHRoaXMuc2VsZWN0ZWQpIHtcbiAgICAgICAgJGVsZW1lbnQucmVtb3ZlQXR0cignc2VsZWN0ZWQnKTtcbiAgICAgICAgJGVsZW1lbnQuYXR0cignYXJpYS1zZWxlY3RlZCcsICdmYWxzZScpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZWxlY3RlZCA9IGlzU2VsZWN0ZWQ7XG4gICAgfTtcbiAgfVxuXG59XG5PcHRpb25EaXJlY3RpdmUuJGluamVjdCA9IFtcIiRtZEJ1dHRvbklua1JpcHBsZVwiLCBcIiRtZFV0aWxcIl07XG5cbmZ1bmN0aW9uIE9wdGdyb3VwRGlyZWN0aXZlKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgY29tcGlsZTogY29tcGlsZVxuICB9O1xuICBmdW5jdGlvbiBjb21waWxlKGVsLCBhdHRycykge1xuICAgIHZhciBsYWJlbEVsZW1lbnQgPSBlbC5maW5kKCdsYWJlbCcpO1xuICAgIGlmICghbGFiZWxFbGVtZW50Lmxlbmd0aCkge1xuICAgICAgbGFiZWxFbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KCc8bGFiZWw+Jyk7XG4gICAgICBlbC5wcmVwZW5kKGxhYmVsRWxlbWVudCk7XG4gICAgfVxuICAgIGlmIChhdHRycy5sYWJlbCkgbGFiZWxFbGVtZW50LnRleHQoYXR0cnMubGFiZWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIFNlbGVjdFByb3ZpZGVyKCQkaW50ZXJpbUVsZW1lbnRQcm92aWRlcikge1xuICBzZWxlY3REZWZhdWx0T3B0aW9ucy4kaW5qZWN0ID0gW1wiJG1kU2VsZWN0XCIsIFwiJG1kQ29uc3RhbnRcIiwgXCIkJHJBRlwiLCBcIiRtZFV0aWxcIiwgXCIkbWRUaGVtaW5nXCIsIFwiJHRpbWVvdXRcIiwgXCIkd2luZG93XCJdO1xuICByZXR1cm4gJCRpbnRlcmltRWxlbWVudFByb3ZpZGVyKCckbWRTZWxlY3QnKVxuICAgIC5zZXREZWZhdWx0cyh7XG4gICAgICBtZXRob2RzOiBbJ3RhcmdldCddLFxuICAgICAgb3B0aW9uczogc2VsZWN0RGVmYXVsdE9wdGlvbnNcbiAgICB9KTtcblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gc2VsZWN0RGVmYXVsdE9wdGlvbnMoJG1kU2VsZWN0LCAkbWRDb25zdGFudCwgJCRyQUYsICRtZFV0aWwsICRtZFRoZW1pbmcsICR0aW1lb3V0LCAkd2luZG93ICkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXJlbnQ6ICdib2R5JyxcbiAgICAgIG9uU2hvdzogb25TaG93LFxuICAgICAgb25SZW1vdmU6IG9uUmVtb3ZlLFxuICAgICAgaGFzQmFja2Ryb3A6IHRydWUsXG4gICAgICBkaXNhYmxlUGFyZW50U2Nyb2xsOiB0cnVlLFxuICAgICAgdGhlbWFibGU6IHRydWVcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gb25TaG93KHNjb3BlLCBlbGVtZW50LCBvcHRzKSB7XG4gICAgICBpZiAoIW9wdHMudGFyZ2V0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignJG1kU2VsZWN0LnNob3coKSBleHBlY3RlZCBhIHRhcmdldCBlbGVtZW50IGluIG9wdGlvbnMudGFyZ2V0IGJ1dCBnb3QgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnXCInICsgb3B0cy50YXJnZXQgKyAnXCIhJyk7XG4gICAgICB9XG5cbiAgICAgIGFuZ3VsYXIuZXh0ZW5kKG9wdHMsIHtcbiAgICAgICAgaXNSZW1vdmVkOiBmYWxzZSxcbiAgICAgICAgdGFyZ2V0OiBhbmd1bGFyLmVsZW1lbnQob3B0cy50YXJnZXQpLCAvL21ha2Ugc3VyZSBpdCdzIG5vdCBhIG5ha2VkIGRvbSBub2RlXG4gICAgICAgIHBhcmVudDogYW5ndWxhci5lbGVtZW50KG9wdHMucGFyZW50KSxcbiAgICAgICAgc2VsZWN0RWw6IGVsZW1lbnQuZmluZCgnbWQtc2VsZWN0LW1lbnUnKSxcbiAgICAgICAgY29udGVudEVsOiBlbGVtZW50LmZpbmQoJ21kLWNvbnRlbnQnKSxcbiAgICAgICAgYmFja2Ryb3A6IG9wdHMuaGFzQmFja2Ryb3AgJiYgYW5ndWxhci5lbGVtZW50KCc8bWQtYmFja2Ryb3AgY2xhc3M9XCJtZC1zZWxlY3QtYmFja2Ryb3AgbWQtY2xpY2stY2F0Y2hlclwiPicpXG4gICAgICB9KTtcblxuICAgICAgb3B0cy5yZXNpemVGbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkJHJBRihmdW5jdGlvbigpIHtcbiAgICAgICAgICAkJHJBRihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGFuaW1hdGVTZWxlY3Qoc2NvcGUsIGVsZW1lbnQsIG9wdHMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vbigncmVzaXplJywgb3B0cy5yZXNpemVGbik7XG4gICAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykub24oJ29yaWVudGF0aW9uY2hhbmdlJywgb3B0cy5yZXNpemVGbik7XG5cblxuICAgICAgY29uZmlndXJlQXJpYSgpO1xuXG4gICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCdtZC1sZWF2ZScpO1xuXG4gICAgICB2YXIgb3B0aW9uTm9kZXMgPSBvcHRzLnNlbGVjdEVsWzBdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdtZC1vcHRpb24nKTtcblxuICAgICAgaWYgKG9wdHMubG9hZGluZ0FzeW5jICYmIG9wdHMubG9hZGluZ0FzeW5jLnRoZW4pIHtcbiAgICAgICAgb3B0cy5sb2FkaW5nQXN5bmMudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICBzY29wZS4kJGxvYWRpbmdBc3luY0RvbmUgPSB0cnVlO1xuICAgICAgICAgIC8vIEdpdmUgb3Vyc2VsdmVzIHR3byBmcmFtZXMgZm9yIHRoZSBwcm9ncmVzcyBsb2FkZXIgdG8gY2xlYXIgb3V0LlxuICAgICAgICAgICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCRyQUYoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIC8vIERvbid0IGdvIGZvcndhcmQgaWYgdGhlIHNlbGVjdCBoYXMgYmVlbiByZW1vdmVkIGluIHRoaXMgdGltZS4uLlxuICAgICAgICAgICAgICBpZiAob3B0cy5pc1JlbW92ZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgYW5pbWF0ZVNlbGVjdChzY29wZSwgZWxlbWVudCwgb3B0cyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKG9wdHMubG9hZGluZ0FzeW5jKSB7XG4gICAgICAgIHNjb3BlLiQkbG9hZGluZ0FzeW5jRG9uZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRzLmRpc2FibGVQYXJlbnRTY3JvbGwgJiYgISRtZFV0aWwuZ2V0Q2xvc2VzdChvcHRzLnRhcmdldCwgJ01ELURJQUxPRycpKSB7XG4gICAgICAgIG9wdHMucmVzdG9yZVNjcm9sbCA9ICRtZFV0aWwuZGlzYWJsZVNjcm9sbEFyb3VuZChvcHRzLmVsZW1lbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0cy5kaXNhYmxlUGFyZW50U2Nyb2xsID0gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBPbmx5IGFjdGl2YXRlIGNsaWNrIGxpc3RlbmVycyBhZnRlciBhIHNob3J0IHRpbWUgdG8gc3RvcCBhY2NpZGVudGFsIGRvdWJsZSB0YXBzL2NsaWNrc1xuICAgICAgLy8gZnJvbSBjbGlja2luZyB0aGUgd3JvbmcgaXRlbVxuICAgICAgJHRpbWVvdXQoYWN0aXZhdGVJbnRlcmFjdGlvbiwgNzUsIGZhbHNlKTtcblxuICAgICAgaWYgKG9wdHMuYmFja2Ryb3ApIHtcbiAgICAgICAgJG1kVGhlbWluZy5pbmhlcml0KG9wdHMuYmFja2Ryb3AsIG9wdHMucGFyZW50KTtcbiAgICAgICAgb3B0cy5wYXJlbnQuYXBwZW5kKG9wdHMuYmFja2Ryb3ApO1xuICAgICAgfVxuICAgICAgb3B0cy5wYXJlbnQuYXBwZW5kKGVsZW1lbnQpO1xuXG4gICAgICAvLyBHaXZlIHRoZSBzZWxlY3QgYSBmcmFtZSB0byAnaW5pdGlhbGl6ZScgaW4gdGhlIERPTSxcbiAgICAgIC8vIHNvIHdlIGNhbiByZWFkIGl0cyBoZWlnaHQvd2lkdGgvcG9zaXRpb25cbiAgICAgICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgICAkJHJBRihmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAob3B0cy5pc1JlbW92ZWQpIHJldHVybjtcbiAgICAgICAgICBhbmltYXRlU2VsZWN0KHNjb3BlLCBlbGVtZW50LCBvcHRzKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuICRtZFV0aWwudHJhbnNpdGlvbkVuZFByb21pc2Uob3B0cy5zZWxlY3RFbCwge3RpbWVvdXQ6IDM1MH0pO1xuXG4gICAgICBmdW5jdGlvbiBjb25maWd1cmVBcmlhKCkge1xuICAgICAgICBvcHRzLnRhcmdldC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYWN0aXZhdGVJbnRlcmFjdGlvbigpIHtcbiAgICAgICAgaWYgKG9wdHMuaXNSZW1vdmVkKSByZXR1cm47XG4gICAgICAgIHZhciBzZWxlY3RDdHJsID0gb3B0cy5zZWxlY3RFbC5jb250cm9sbGVyKCdtZFNlbGVjdE1lbnUnKSB8fCB7fTtcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnbWQtY2xpY2thYmxlJyk7XG5cbiAgICAgICAgb3B0cy5iYWNrZHJvcCAmJiBvcHRzLmJhY2tkcm9wLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBvcHRzLnJlc3RvcmVGb2N1cyA9IGZhbHNlO1xuICAgICAgICAgIHNjb3BlLiRhcHBseSgkbWRTZWxlY3QuY2FuY2VsKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRXNjYXBlIHRvIGNsb3NlXG4gICAgICAgIG9wdHMuc2VsZWN0RWwub24oJ2tleWRvd24nLCBmdW5jdGlvbihldikge1xuICAgICAgICAgIHN3aXRjaCAoZXYua2V5Q29kZSkge1xuICAgICAgICAgICAgY2FzZSAkbWRDb25zdGFudC5LRVlfQ09ERS5TUEFDRTpcbiAgICAgICAgICAgIGNhc2UgJG1kQ29uc3RhbnQuS0VZX0NPREUuRU5URVI6XG4gICAgICAgICAgICAgIHZhciBvcHRpb24gPSAkbWRVdGlsLmdldENsb3Nlc3QoZXYudGFyZ2V0LCAnbWQtb3B0aW9uJyk7XG4gICAgICAgICAgICAgIGlmIChvcHRpb24pIHtcbiAgICAgICAgICAgICAgICBvcHRzLnNlbGVjdEVsLnRyaWdnZXJIYW5kbGVyKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6ICdjbGljaycsXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ6IG9wdGlvblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICRtZENvbnN0YW50LktFWV9DT0RFLlRBQjpcbiAgICAgICAgICAgIGNhc2UgJG1kQ29uc3RhbnQuS0VZX0NPREUuRVNDQVBFOlxuICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBvcHRzLnJlc3RvcmVGb2N1cyA9IHRydWU7XG4gICAgICAgICAgICAgIHNjb3BlLiRhcHBseSgkbWRTZWxlY3QuY2FuY2VsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEN5Y2xpbmcgb2Ygb3B0aW9ucywgYW5kIGNsb3Npbmcgb24gZW50ZXJcbiAgICAgICAgb3B0cy5zZWxlY3RFbC5vbigna2V5ZG93bicsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgc3dpdGNoIChldi5rZXlDb2RlKSB7XG4gICAgICAgICAgICBjYXNlICRtZENvbnN0YW50LktFWV9DT0RFLlVQX0FSUk9XOiByZXR1cm4gZm9jdXNQcmV2T3B0aW9uKCk7XG4gICAgICAgICAgICBjYXNlICRtZENvbnN0YW50LktFWV9DT0RFLkRPV05fQVJST1c6IHJldHVybiBmb2N1c05leHRPcHRpb24oKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGlmIChldi5rZXlDb2RlID49IDMxICYmIGV2LmtleUNvZGUgPD0gOTApIHtcbiAgICAgICAgICAgICAgICB2YXIgb3B0Tm9kZSA9IG9wdHMuc2VsZWN0RWwuY29udHJvbGxlcignbWRTZWxlY3RNZW51Jykub3B0Tm9kZUZvcktleWJvYXJkU2VhcmNoKGV2KTtcbiAgICAgICAgICAgICAgICBvcHROb2RlICYmIG9wdE5vZGUuZm9jdXMoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxuICAgICAgICBmdW5jdGlvbiBmb2N1c09wdGlvbihkaXJlY3Rpb24pIHtcbiAgICAgICAgICB2YXIgb3B0aW9uc0FycmF5ID0gJG1kVXRpbC5ub2Rlc1RvQXJyYXkob3B0aW9uTm9kZXMpO1xuICAgICAgICAgIHZhciBpbmRleCA9IG9wdGlvbnNBcnJheS5pbmRleE9mKG9wdHMuZm9jdXNlZE5vZGUpO1xuICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIFdlIGxvc3QgdGhlIHByZXZpb3VzbHkgZm9jdXNlZCBlbGVtZW50LCByZXNldCB0byBmaXJzdCBvcHRpb25cbiAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ25leHQnICYmIGluZGV4IDwgb3B0aW9uc0FycmF5Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdwcmV2JyAmJiBpbmRleCA+IDApIHtcbiAgICAgICAgICAgIGluZGV4LS07XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBuZXdPcHRpb24gPSBvcHRzLmZvY3VzZWROb2RlID0gb3B0aW9uc0FycmF5W2luZGV4XTtcbiAgICAgICAgICBuZXdPcHRpb24gJiYgbmV3T3B0aW9uLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZm9jdXNOZXh0T3B0aW9uKCkge1xuICAgICAgICAgIGZvY3VzT3B0aW9uKCduZXh0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZm9jdXNQcmV2T3B0aW9uKCkge1xuICAgICAgICAgIGZvY3VzT3B0aW9uKCdwcmV2Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRzLnNlbGVjdEVsLm9uKCdjbGljaycsIGNoZWNrQ2xvc2VNZW51KTtcbiAgICAgICAgb3B0cy5zZWxlY3RFbC5vbigna2V5ZG93bicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBpZiAoZS5rZXlDb2RlID09IDMyIHx8IGUua2V5Q29kZSA9PSAxMykge1xuICAgICAgICAgICAgY2hlY2tDbG9zZU1lbnUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrQ2xvc2VNZW51KCkge1xuICAgICAgICAgIGlmICghc2VsZWN0Q3RybC5pc011bHRpcGxlKSB7XG4gICAgICAgICAgICBvcHRzLnJlc3RvcmVGb2N1cyA9IHRydWU7XG4gICAgICAgICAgICBzY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAkbWRTZWxlY3QuaGlkZShzZWxlY3RDdHJsLm5nTW9kZWwuJHZpZXdWYWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uUmVtb3ZlKHNjb3BlLCBlbGVtZW50LCBvcHRzKSB7XG4gICAgICBvcHRzLmlzUmVtb3ZlZCA9IHRydWU7XG4gICAgICBlbGVtZW50LmFkZENsYXNzKCdtZC1sZWF2ZScpXG4gICAgICAgIC5yZW1vdmVDbGFzcygnbWQtY2xpY2thYmxlJyk7XG4gICAgICBvcHRzLnRhcmdldC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG5cblxuICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLm9mZigncmVzaXplJywgb3B0cy5yZXNpemVGbik7XG4gICAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykub2ZmKCdvcmllbnRhdGlvbmNoYW5nZScsIG9wdHMucmVzaXplZm4pO1xuICAgICAgb3B0cy5yZXNpemVGbiA9IHVuZGVmaW5lZDtcblxuICAgICAgdmFyIG1kU2VsZWN0ID0gb3B0cy5zZWxlY3RFbC5jb250cm9sbGVyKCdtZFNlbGVjdCcpO1xuICAgICAgaWYgKG1kU2VsZWN0KSB7XG4gICAgICAgIG1kU2VsZWN0LnNldExhYmVsVGV4dChvcHRzLnNlbGVjdEVsLmNvbnRyb2xsZXIoJ21kU2VsZWN0TWVudScpLnNlbGVjdGVkTGFiZWxzKCkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJG1kVXRpbC50cmFuc2l0aW9uRW5kUHJvbWlzZShlbGVtZW50LCB7IHRpbWVvdXQ6IDM1MCB9KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCdtZC1hY3RpdmUnKTtcbiAgICAgICAgb3B0cy5iYWNrZHJvcCAmJiBvcHRzLmJhY2tkcm9wLnJlbW92ZSgpO1xuICAgICAgICBpZiAoZWxlbWVudFswXS5wYXJlbnROb2RlID09PSBvcHRzLnBhcmVudFswXSkge1xuICAgICAgICAgIG9wdHMucGFyZW50WzBdLnJlbW92ZUNoaWxkKGVsZW1lbnRbMF0pOyAvLyB1c2UgYnJvd3NlciB0byBhdm9pZCAkZGVzdHJveSBldmVudFxuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRzLmRpc2FibGVQYXJlbnRTY3JvbGwpIHtcbiAgICAgICAgICBvcHRzLnJlc3RvcmVTY3JvbGwoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0cy5yZXN0b3JlRm9jdXMpIG9wdHMudGFyZ2V0LmZvY3VzKCk7XG4gICAgICAgIG1kU2VsZWN0ICYmIG1kU2VsZWN0LnRyaWdnZXJDbG9zZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYW5pbWF0ZVNlbGVjdChzY29wZSwgZWxlbWVudCwgb3B0cykge1xuICAgICAgdmFyIGNvbnRhaW5lck5vZGUgPSBlbGVtZW50WzBdLFxuICAgICAgICAgIHRhcmdldE5vZGUgPSBvcHRzLnRhcmdldFswXS5maXJzdEVsZW1lbnRDaGlsZC5maXJzdEVsZW1lbnRDaGlsZCwgLy8gdGFyZ2V0IHRoZSBmaXJzdCBzcGFuLCBmdW5jdGlvbmluZyBhcyB0aGUgbGFiZWxcbiAgICAgICAgICBwYXJlbnROb2RlID0gb3B0cy5wYXJlbnRbMF0sXG4gICAgICAgICAgc2VsZWN0Tm9kZSA9IG9wdHMuc2VsZWN0RWxbMF0sXG4gICAgICAgICAgY29udGVudE5vZGUgPSBvcHRzLmNvbnRlbnRFbFswXSxcbiAgICAgICAgICBwYXJlbnRSZWN0ID0gcGFyZW50Tm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICB0YXJnZXRSZWN0ID0gdGFyZ2V0Tm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICBzaG91bGRPcGVuQXJvdW5kVGFyZ2V0ID0gZmFsc2UsXG4gICAgICAgICAgYm91bmRzID0ge1xuICAgICAgICAgICAgbGVmdDogcGFyZW50UmVjdC5sZWZ0ICsgU0VMRUNUX0VER0VfTUFSR0lOLFxuICAgICAgICAgICAgdG9wOiBTRUxFQ1RfRURHRV9NQVJHSU4sXG4gICAgICAgICAgICBib3R0b206IHBhcmVudFJlY3QuaGVpZ2h0IC0gU0VMRUNUX0VER0VfTUFSR0lOLFxuICAgICAgICAgICAgcmlnaHQ6IHBhcmVudFJlY3Qud2lkdGggLSBTRUxFQ1RfRURHRV9NQVJHSU4gLSAoJG1kVXRpbC5mbG9hdGluZ1Njcm9sbGJhcnMoKSA/IDE2IDogMClcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNwYWNlQXZhaWxhYmxlID0ge1xuICAgICAgICAgICAgdG9wOiB0YXJnZXRSZWN0LnRvcCAtIGJvdW5kcy50b3AsXG4gICAgICAgICAgICBsZWZ0OiB0YXJnZXRSZWN0LmxlZnQgLSBib3VuZHMubGVmdCxcbiAgICAgICAgICAgIHJpZ2h0OiBib3VuZHMucmlnaHQgLSAodGFyZ2V0UmVjdC5sZWZ0ICsgdGFyZ2V0UmVjdC53aWR0aCksXG4gICAgICAgICAgICBib3R0b206IGJvdW5kcy5ib3R0b20gLSAodGFyZ2V0UmVjdC50b3AgKyB0YXJnZXRSZWN0LmhlaWdodClcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1heFdpZHRoID0gcGFyZW50UmVjdC53aWR0aCAtIFNFTEVDVF9FREdFX01BUkdJTiAqIDIsXG4gICAgICAgICAgaXNTY3JvbGxhYmxlID0gY29udGVudE5vZGUuc2Nyb2xsSGVpZ2h0ID4gY29udGVudE5vZGUub2Zmc2V0SGVpZ2h0LFxuICAgICAgICAgIHNlbGVjdGVkTm9kZSA9IHNlbGVjdE5vZGUucXVlcnlTZWxlY3RvcignbWQtb3B0aW9uW3NlbGVjdGVkXScpLFxuICAgICAgICAgIG9wdGlvbk5vZGVzID0gc2VsZWN0Tm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbWQtb3B0aW9uJyksXG4gICAgICAgICAgb3B0Z3JvdXBOb2RlcyA9IHNlbGVjdE5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ21kLW9wdGdyb3VwJyk7XG5cblxuICAgICAgdmFyIGNlbnRlcmVkTm9kZTtcbiAgICAgIC8vIElmIGEgc2VsZWN0ZWQgbm9kZSwgY2VudGVyIGFyb3VuZCB0aGF0XG4gICAgICBpZiAoc2VsZWN0ZWROb2RlKSB7XG4gICAgICAgIGNlbnRlcmVkTm9kZSA9IHNlbGVjdGVkTm9kZTtcbiAgICAgIC8vIElmIHRoZXJlIGFyZSBvcHRpb24gZ3JvdXBzLCBjZW50ZXIgYXJvdW5kIHRoZSBmaXJzdCBvcHRpb24gZ3JvdXBcbiAgICAgIH0gZWxzZSBpZiAob3B0Z3JvdXBOb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgY2VudGVyZWROb2RlID0gb3B0Z3JvdXBOb2Rlc1swXTtcbiAgICAgIC8vIE90aGVyd2lzZSwgY2VudGVyIGFyb3VuZCB0aGUgZmlyc3Qgb3B0aW9uTm9kZVxuICAgICAgfSBlbHNlIGlmIChvcHRpb25Ob2Rlcy5sZW5ndGgpe1xuICAgICAgICBjZW50ZXJlZE5vZGUgPSBvcHRpb25Ob2Rlc1swXTtcbiAgICAgIC8vIEluIGNhc2UgdGhlcmUgYXJlIG5vIG9wdGlvbnMsIGNlbnRlciBvbiB3aGF0ZXZlcidzIGluIHRoZXJlLi4uIChlZyBwcm9ncmVzcyBpbmRpY2F0b3IpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjZW50ZXJlZE5vZGUgPSBjb250ZW50Tm9kZS5maXJzdEVsZW1lbnRDaGlsZCB8fCBjb250ZW50Tm9kZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbnRlbnROb2RlLm9mZnNldFdpZHRoID4gbWF4V2lkdGgpIHtcbiAgICAgICAgY29udGVudE5vZGUuc3R5bGVbJ21heC13aWR0aCddID0gbWF4V2lkdGggKyAncHgnO1xuICAgICAgfVxuICAgICAgaWYgKHNob3VsZE9wZW5Bcm91bmRUYXJnZXQpIHtcbiAgICAgICAgY29udGVudE5vZGUuc3R5bGVbJ21pbi13aWR0aCddID0gdGFyZ2V0UmVjdC53aWR0aCArICdweCc7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBwYWRkaW5nIGJlZm9yZSB3ZSBjb21wdXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgbWVudVxuICAgICAgaWYgKGlzU2Nyb2xsYWJsZSkge1xuICAgICAgICBzZWxlY3ROb2RlLmNsYXNzTGlzdC5hZGQoJ21kLW92ZXJmbG93Jyk7XG4gICAgICB9XG5cbiAgICAgIC8vIEdldCB0aGUgc2VsZWN0TWVudVJlY3QgKmFmdGVyKiBtYXgtd2lkdGggaXMgcG9zc2libHkgc2V0IGFib3ZlXG4gICAgICB2YXIgc2VsZWN0TWVudVJlY3QgPSBzZWxlY3ROb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIGNlbnRlcmVkUmVjdCA9IGdldE9mZnNldFJlY3QoY2VudGVyZWROb2RlKTtcblxuICAgICAgaWYgKGNlbnRlcmVkTm9kZSkge1xuICAgICAgICB2YXIgY2VudGVyZWRTdHlsZSA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShjZW50ZXJlZE5vZGUpO1xuICAgICAgICBjZW50ZXJlZFJlY3QucGFkZGluZ0xlZnQgPSBwYXJzZUludChjZW50ZXJlZFN0eWxlLnBhZGRpbmdMZWZ0LCAxMCkgfHwgMDtcbiAgICAgICAgY2VudGVyZWRSZWN0LnBhZGRpbmdSaWdodCA9IHBhcnNlSW50KGNlbnRlcmVkU3R5bGUucGFkZGluZ1JpZ2h0LCAxMCkgfHwgMDtcbiAgICAgIH1cblxuICAgICAgdmFyIGZvY3VzZWROb2RlID0gY2VudGVyZWROb2RlO1xuICAgICAgaWYgKChmb2N1c2VkTm9kZS50YWdOYW1lIHx8ICcnKS50b1VwcGVyQ2FzZSgpID09PSAnTUQtT1BUR1JPVVAnKSB7XG4gICAgICAgIGZvY3VzZWROb2RlID0gb3B0aW9uTm9kZXNbMF0gfHwgY29udGVudE5vZGUuZmlyc3RFbGVtZW50Q2hpbGQgfHwgY29udGVudE5vZGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1Njcm9sbGFibGUpIHtcbiAgICAgICAgdmFyIHNjcm9sbEJ1ZmZlciA9IGNvbnRlbnROb2RlLm9mZnNldEhlaWdodCAvIDI7XG4gICAgICAgIGNvbnRlbnROb2RlLnNjcm9sbFRvcCA9IGNlbnRlcmVkUmVjdC50b3AgKyBjZW50ZXJlZFJlY3QuaGVpZ2h0IC8gMiAtIHNjcm9sbEJ1ZmZlcjtcblxuICAgICAgICBpZiAoc3BhY2VBdmFpbGFibGUudG9wIDwgc2Nyb2xsQnVmZmVyKSB7XG4gICAgICAgICAgY29udGVudE5vZGUuc2Nyb2xsVG9wID0gTWF0aC5taW4oXG4gICAgICAgICAgICBjZW50ZXJlZFJlY3QudG9wLFxuICAgICAgICAgICAgY29udGVudE5vZGUuc2Nyb2xsVG9wICsgc2Nyb2xsQnVmZmVyIC0gc3BhY2VBdmFpbGFibGUudG9wXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChzcGFjZUF2YWlsYWJsZS5ib3R0b20gPCBzY3JvbGxCdWZmZXIpIHtcbiAgICAgICAgICBjb250ZW50Tm9kZS5zY3JvbGxUb3AgPSBNYXRoLm1heChcbiAgICAgICAgICAgIGNlbnRlcmVkUmVjdC50b3AgKyBjZW50ZXJlZFJlY3QuaGVpZ2h0IC0gc2VsZWN0TWVudVJlY3QuaGVpZ2h0LFxuICAgICAgICAgICAgY29udGVudE5vZGUuc2Nyb2xsVG9wIC0gc2Nyb2xsQnVmZmVyICsgc3BhY2VBdmFpbGFibGUuYm90dG9tXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgbGVmdCwgdG9wLCB0cmFuc2Zvcm1PcmlnaW47XG4gICAgICBpZiAoc2hvdWxkT3BlbkFyb3VuZFRhcmdldCkge1xuICAgICAgICBsZWZ0ID0gdGFyZ2V0UmVjdC5sZWZ0O1xuICAgICAgICB0b3AgPSB0YXJnZXRSZWN0LnRvcCArIHRhcmdldFJlY3QuaGVpZ2h0O1xuICAgICAgICB0cmFuc2Zvcm1PcmlnaW4gPSAnNTAlIDAnO1xuICAgICAgICBpZiAodG9wICsgc2VsZWN0TWVudVJlY3QuaGVpZ2h0ID4gYm91bmRzLmJvdHRvbSkge1xuICAgICAgICAgIHRvcCA9IHRhcmdldFJlY3QudG9wIC0gc2VsZWN0TWVudVJlY3QuaGVpZ2h0O1xuICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbiA9ICc1MCUgMTAwJSc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlZnQgPSB0YXJnZXRSZWN0LmxlZnQgKyBjZW50ZXJlZFJlY3QubGVmdCAtIGNlbnRlcmVkUmVjdC5wYWRkaW5nTGVmdDtcbiAgICAgICAgdG9wID0gTWF0aC5mbG9vcih0YXJnZXRSZWN0LnRvcCArIHRhcmdldFJlY3QuaGVpZ2h0IC8gMiAtIGNlbnRlcmVkUmVjdC5oZWlnaHQgLyAyIC1cbiAgICAgICAgICBjZW50ZXJlZFJlY3QudG9wICsgY29udGVudE5vZGUuc2Nyb2xsVG9wKTtcblxuXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbiA9IChjZW50ZXJlZFJlY3QubGVmdCArIHRhcmdldFJlY3Qud2lkdGggLyAyKSArICdweCAnICtcbiAgICAgICAgKGNlbnRlcmVkUmVjdC50b3AgKyBjZW50ZXJlZFJlY3QuaGVpZ2h0IC8gMiAtIGNvbnRlbnROb2RlLnNjcm9sbFRvcCkgKyAncHggMHB4JztcblxuICAgICAgICBjb250YWluZXJOb2RlLnN0eWxlLm1pbldpZHRoID0gdGFyZ2V0UmVjdC53aWR0aCArIGNlbnRlcmVkUmVjdC5wYWRkaW5nTGVmdCArXG4gICAgICAgICAgY2VudGVyZWRSZWN0LnBhZGRpbmdSaWdodCArICdweCc7XG4gICAgICB9XG5cbiAgICAgIC8vIEtlZXAgbGVmdCBhbmQgdG9wIHdpdGhpbiB0aGUgd2luZG93XG4gICAgICB2YXIgY29udGFpbmVyUmVjdCA9IGNvbnRhaW5lck5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBjb250YWluZXJOb2RlLnN0eWxlLmxlZnQgPSBjbGFtcChib3VuZHMubGVmdCwgbGVmdCwgYm91bmRzLnJpZ2h0IC0gY29udGFpbmVyUmVjdC53aWR0aCkgKyAncHgnO1xuICAgICAgY29udGFpbmVyTm9kZS5zdHlsZS50b3AgPSBjbGFtcChib3VuZHMudG9wLCB0b3AsIGJvdW5kcy5ib3R0b20gLSBjb250YWluZXJSZWN0LmhlaWdodCkgKyAncHgnO1xuICAgICAgc2VsZWN0Tm9kZS5zdHlsZVskbWRDb25zdGFudC5DU1MuVFJBTlNGT1JNX09SSUdJTl0gPSB0cmFuc2Zvcm1PcmlnaW47XG5cbiAgICAgIHNlbGVjdE5vZGUuc3R5bGVbJG1kQ29uc3RhbnQuQ1NTLlRSQU5TRk9STV0gPSAnc2NhbGUoJyArXG4gICAgICAgIE1hdGgubWluKHRhcmdldFJlY3Qud2lkdGggLyBzZWxlY3RNZW51UmVjdC53aWR0aCwgMS4wKSArICcsJyArXG4gICAgICAgIE1hdGgubWluKHRhcmdldFJlY3QuaGVpZ2h0IC8gc2VsZWN0TWVudVJlY3QuaGVpZ2h0LCAxLjApICtcbiAgICAgICcpJztcblxuXG4gICAgICAkJHJBRihmdW5jdGlvbigpIHtcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnbWQtYWN0aXZlJyk7XG4gICAgICAgIHNlbGVjdE5vZGUuc3R5bGVbJG1kQ29uc3RhbnQuQ1NTLlRSQU5TRk9STV0gPSAnJztcbiAgICAgICAgaWYgKGZvY3VzZWROb2RlKSB7XG4gICAgICAgICAgb3B0cy5mb2N1c2VkTm9kZSA9IGZvY3VzZWROb2RlO1xuICAgICAgICAgIGZvY3VzZWROb2RlLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICB9XG5cbiAgZnVuY3Rpb24gY2xhbXAobWluLCBuLCBtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbihuLCBtYXgpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE9mZnNldFJlY3Qobm9kZSkge1xuICAgIHJldHVybiBub2RlID8ge1xuICAgICAgbGVmdDogbm9kZS5vZmZzZXRMZWZ0LFxuICAgICAgdG9wOiBub2RlLm9mZnNldFRvcCxcbiAgICAgIHdpZHRoOiBub2RlLm9mZnNldFdpZHRoLFxuICAgICAgaGVpZ2h0OiBub2RlLm9mZnNldEhlaWdodFxuICAgIH0gOiB7IGxlZnQ6IDAsIHRvcDogMCwgd2lkdGg6IDAsIGhlaWdodDogMCB9O1xuICB9XG59XG5TZWxlY3RQcm92aWRlci4kaW5qZWN0ID0gW1wiJCRpbnRlcmltRWxlbWVudFByb3ZpZGVyXCJdO1xuXG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG1hdGVyaWFsLmNvbXBvbmVudHMuc2lkZW5hdlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBTaWRlbmF2IFFQIGNvbXBvbmVudC5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMuc2lkZW5hdicsIFtcbiAgICAnbWF0ZXJpYWwuY29yZScsXG4gICAgJ21hdGVyaWFsLmNvbXBvbmVudHMuYmFja2Ryb3AnXG4gIF0pXG4gIC5mYWN0b3J5KCckbWRTaWRlbmF2JywgU2lkZW5hdlNlcnZpY2UgKVxuICAuZGlyZWN0aXZlKCdtZFNpZGVuYXYnLCBTaWRlbmF2RGlyZWN0aXZlKVxuICAuZGlyZWN0aXZlKCdtZFNpZGVuYXZGb2N1cycsIFNpZGVuYXZGb2N1c0RpcmVjdGl2ZSlcbiAgLmNvbnRyb2xsZXIoJyRtZFNpZGVuYXZDb250cm9sbGVyJywgU2lkZW5hdkNvbnRyb2xsZXIpO1xuXG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkbWRTaWRlbmF2XG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMuc2lkZW5hdlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogYCRtZFNpZGVuYXZgIG1ha2VzIGl0IGVhc3kgdG8gaW50ZXJhY3Qgd2l0aCBtdWx0aXBsZSBzaWRlbmF2c1xuICogaW4gYW4gYXBwLlxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImpzXCI+XG4gKiAvLyBBc3luYyBsb29rdXAgZm9yIHNpZGVuYXYgaW5zdGFuY2U7IHdpbGwgcmVzb2x2ZSB3aGVuIHRoZSBpbnN0YW5jZSBpcyBhdmFpbGFibGVcbiAqICRtZFNpZGVuYXYoY29tcG9uZW50SWQpLnRoZW4oZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAqICAgJGxvZy5kZWJ1ZyggY29tcG9uZW50SWQgKyBcImlzIG5vdyByZWFkeVwiICk7XG4gKiB9KTtcbiAqIC8vIEFzeW5jIHRvZ2dsZSB0aGUgZ2l2ZW4gc2lkZW5hdjtcbiAqIC8vIHdoZW4gaW5zdGFuY2UgaXMga25vd24gcmVhZHkgYW5kIGxhenkgbG9va3VwIGlzIG5vdCBuZWVkZWQuXG4gKiAkbWRTaWRlbmF2KGNvbXBvbmVudElkKVxuICogICAgLnRvZ2dsZSgpXG4gKiAgICAudGhlbihmdW5jdGlvbigpe1xuICogICAgICAkbG9nLmRlYnVnKCd0b2dnbGVkJyk7XG4gKiAgICB9KTtcbiAqIC8vIEFzeW5jIG9wZW4gdGhlIGdpdmVuIHNpZGVuYXZcbiAqICRtZFNpZGVuYXYoY29tcG9uZW50SWQpXG4gKiAgICAub3BlbigpXG4gKiAgICAudGhlbihmdW5jdGlvbigpe1xuICogICAgICAkbG9nLmRlYnVnKCdvcGVuZWQnKTtcbiAqICAgIH0pO1xuICogLy8gQXN5bmMgY2xvc2UgdGhlIGdpdmVuIHNpZGVuYXZcbiAqICRtZFNpZGVuYXYoY29tcG9uZW50SWQpXG4gKiAgICAuY2xvc2UoKVxuICogICAgLnRoZW4oZnVuY3Rpb24oKXtcbiAqICAgICAgJGxvZy5kZWJ1ZygnY2xvc2VkJyk7XG4gKiAgICB9KTtcbiAqIC8vIFN5bmMgY2hlY2sgdG8gc2VlIGlmIHRoZSBzcGVjaWZpZWQgc2lkZW5hdiBpcyBzZXQgdG8gYmUgb3BlblxuICogJG1kU2lkZW5hdihjb21wb25lbnRJZCkuaXNPcGVuKCk7XG4gKiAvLyBTeW5jIGNoZWNrIHRvIHdoZXRoZXIgZ2l2ZW4gc2lkZW5hdiBpcyBsb2NrZWQgb3BlblxuICogLy8gSWYgdGhpcyBpcyB0cnVlLCB0aGUgc2lkZW5hdiB3aWxsIGJlIG9wZW4gcmVnYXJkbGVzcyBvZiBjbG9zZSgpXG4gKiAkbWRTaWRlbmF2KGNvbXBvbmVudElkKS5pc0xvY2tlZE9wZW4oKTtcbiAqIDwvaGxqcz5cbiAqL1xuZnVuY3Rpb24gU2lkZW5hdlNlcnZpY2UoJG1kQ29tcG9uZW50UmVnaXN0cnksICRxKSB7XG4gIHJldHVybiBmdW5jdGlvbihoYW5kbGUpIHtcblxuICAgIC8vIExvb2t1cCB0aGUgY29udHJvbGxlciBpbnN0YW5jZSBmb3IgdGhlIHNwZWNpZmllZCBzaWROYXYgaW5zdGFuY2VcbiAgICB2YXIgc2VsZjtcbiAgICB2YXIgZXJyb3JNc2cgPSBcIlNpZGVOYXYgJ1wiICsgaGFuZGxlICsgXCInIGlzIG5vdCBhdmFpbGFibGUhXCI7XG4gICAgdmFyIGluc3RhbmNlID0gJG1kQ29tcG9uZW50UmVnaXN0cnkuZ2V0KGhhbmRsZSk7XG5cbiAgICBpZighaW5zdGFuY2UpIHtcbiAgICAgICRtZENvbXBvbmVudFJlZ2lzdHJ5Lm5vdEZvdW5kRXJyb3IoaGFuZGxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZiA9IHtcbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAvLyBTeW5jIG1ldGhvZHNcbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICBpc09wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaW5zdGFuY2UgJiYgaW5zdGFuY2UuaXNPcGVuKCk7XG4gICAgICB9LFxuICAgICAgaXNMb2NrZWRPcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlICYmIGluc3RhbmNlLmlzTG9ja2VkT3BlbigpO1xuICAgICAgfSxcbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAvLyBBc3luYyBtZXRob2RzXG4gICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlID8gaW5zdGFuY2UudG9nZ2xlKCkgOiAkcS5yZWplY3QoZXJyb3JNc2cpO1xuICAgICAgfSxcbiAgICAgIG9wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaW5zdGFuY2UgPyBpbnN0YW5jZS5vcGVuKCkgOiAkcS5yZWplY3QoZXJyb3JNc2cpO1xuICAgICAgfSxcbiAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlID8gaW5zdGFuY2UuY2xvc2UoKSA6ICRxLnJlamVjdChlcnJvck1zZyk7XG4gICAgICB9LFxuICAgICAgdGhlbiA6IGZ1bmN0aW9uKCBjYWxsYmFja0ZuICkge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IGluc3RhbmNlID8gJHEud2hlbihpbnN0YW5jZSkgOiB3YWl0Rm9ySW5zdGFuY2UoKTtcbiAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbiggY2FsbGJhY2tGbiB8fCBhbmd1bGFyLm5vb3AgKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVmZXJyZWQgbG9va3VwIG9mIGNvbXBvbmVudCBpbnN0YW5jZSB1c2luZyAkY29tcG9uZW50IHJlZ2lzdHJ5XG4gICAgICovXG4gICAgZnVuY3Rpb24gd2FpdEZvckluc3RhbmNlKCkge1xuICAgICAgcmV0dXJuICRtZENvbXBvbmVudFJlZ2lzdHJ5XG4gICAgICAgICAgICAgICAgLndoZW4oaGFuZGxlKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCBpdCApe1xuICAgICAgICAgICAgICAgICAgaW5zdGFuY2UgPSBpdDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBpdDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5TaWRlbmF2U2VydmljZS4kaW5qZWN0ID0gW1wiJG1kQ29tcG9uZW50UmVnaXN0cnlcIiwgXCIkcVwiXTtcbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbWRTaWRlbmF2Rm9jdXNcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5zaWRlbmF2XG4gKlxuICogQHJlc3RyaWN0IEFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGAkbWRTaWRlbmF2Rm9jdXNgIHByb3ZpZGVzIGEgd2F5IHRvIHNwZWNpZnkgdGhlIGZvY3VzZWQgZWxlbWVudCB3aGVuIGEgc2lkZW5hdiBvcGVucy5cbiAqIFRoaXMgaXMgY29tcGxldGVseSBvcHRpb25hbCwgYXMgdGhlIHNpZGVuYXYgaXRzZWxmIGlzIGZvY3VzZWQgYnkgZGVmYXVsdC5cbiAqXG4gKiBAdXNhZ2VcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8bWQtc2lkZW5hdj5cbiAqICAgPGZvcm0+XG4gKiAgICAgPG1kLWlucHV0LWNvbnRhaW5lcj5cbiAqICAgICAgIDxsYWJlbCBmb3I9XCJ0ZXN0SW5wdXRcIj5MYWJlbDwvbGFiZWw+XG4gKiAgICAgICA8aW5wdXQgaWQ9XCJ0ZXN0SW5wdXRcIiB0eXBlPVwidGV4dFwiIG1kLXNpZGVuYXYtZm9jdXM+XG4gKiAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+XG4gKiAgIDwvZm9ybT5cbiAqIDwvbWQtc2lkZW5hdj5cbiAqIDwvaGxqcz5cbiAqKi9cbmZ1bmN0aW9uIFNpZGVuYXZGb2N1c0RpcmVjdGl2ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICdebWRTaWRlbmF2JyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgc2lkZW5hdkN0cmwpIHtcbiAgICAgIHNpZGVuYXZDdHJsLmZvY3VzRWxlbWVudChlbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG1kU2lkZW5hdlxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLnNpZGVuYXZcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQSBTaWRlbmF2IGNvbXBvbmVudCB0aGF0IGNhbiBiZSBvcGVuZWQgYW5kIGNsb3NlZCBwcm9ncmFtYXRpY2FsbHkuXG4gKlxuICogQnkgZGVmYXVsdCwgdXBvbiBvcGVuaW5nIGl0IHdpbGwgc2xpZGUgb3V0IG9uIHRvcCBvZiB0aGUgbWFpbiBjb250ZW50IGFyZWEuXG4gKlxuICogRm9yIGtleWJvYXJkIGFuZCBzY3JlZW4gcmVhZGVyIGFjY2Vzc2liaWxpdHksIGZvY3VzIGlzIHNlbnQgdG8gdGhlIHNpZGVuYXYgd3JhcHBlciBieSBkZWZhdWx0LlxuICogSXQgY2FuIGJlIG92ZXJyaWRkZW4gd2l0aCB0aGUgYG1kLXNpZGVuYXYtZm9jdXNgIGRpcmVjdGl2ZSBvbiB0aGUgY2hpbGQgZWxlbWVudCB5b3Ugd2FudCBmb2N1c2VkLlxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxkaXYgbGF5b3V0PVwicm93XCIgbmctY29udHJvbGxlcj1cIk15Q29udHJvbGxlclwiPlxuICogICA8bWQtc2lkZW5hdiBtZC1jb21wb25lbnQtaWQ9XCJsZWZ0XCIgY2xhc3M9XCJtZC1zaWRlbmF2LWxlZnRcIj5cbiAqICAgICBMZWZ0IE5hdiFcbiAqICAgPC9tZC1zaWRlbmF2PlxuICpcbiAqICAgPG1kLWNvbnRlbnQ+XG4gKiAgICAgQ2VudGVyIENvbnRlbnRcbiAqICAgICA8bWQtYnV0dG9uIG5nLWNsaWNrPVwib3BlbkxlZnRNZW51KClcIj5cbiAqICAgICAgIE9wZW4gTGVmdCBNZW51XG4gKiAgICAgPC9tZC1idXR0b24+XG4gKiAgIDwvbWQtY29udGVudD5cbiAqXG4gKiAgIDxtZC1zaWRlbmF2IG1kLWNvbXBvbmVudC1pZD1cInJpZ2h0XCJcbiAqICAgICBtZC1pcy1sb2NrZWQtb3Blbj1cIiRtZE1lZGlhKCdtaW4td2lkdGg6IDMzM3B4JylcIlxuICogICAgIGNsYXNzPVwibWQtc2lkZW5hdi1yaWdodFwiPlxuICogICAgIDxmb3JtPlxuICogICAgICAgPG1kLWlucHV0LWNvbnRhaW5lcj5cbiAqICAgICAgICAgPGxhYmVsIGZvcj1cInRlc3RJbnB1dFwiPlRlc3QgaW5wdXQ8L2xhYmVsPlxuICogICAgICAgICA8aW5wdXQgaWQ9XCJ0ZXN0SW5wdXRcIiB0eXBlPVwidGV4dFwiXG4gKiAgICAgICAgICAgICAgICBuZy1tb2RlbD1cImRhdGFcIiBtZC1zaWRlbmF2LWZvY3VzPlxuICogICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+XG4gKiAgICAgPC9mb3JtPlxuICogICA8L21kLXNpZGVuYXY+XG4gKiA8L2Rpdj5cbiAqIDwvaGxqcz5cbiAqXG4gKiA8aGxqcyBsYW5nPVwianNcIj5cbiAqIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbJ25nTWF0ZXJpYWwnXSk7XG4gKiBhcHAuY29udHJvbGxlcignTXlDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkbWRTaWRlbmF2KSB7XG4gKiAgICRzY29wZS5vcGVuTGVmdE1lbnUgPSBmdW5jdGlvbigpIHtcbiAqICAgICAkbWRTaWRlbmF2KCdsZWZ0JykudG9nZ2xlKCk7XG4gKiAgIH07XG4gKiB9KTtcbiAqIDwvaGxqcz5cbiAqXG4gKiBAcGFyYW0ge2V4cHJlc3Npb249fSBtZC1pcy1vcGVuIEEgbW9kZWwgYm91bmQgdG8gd2hldGhlciB0aGUgc2lkZW5hdiBpcyBvcGVuZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IG1kLWNvbXBvbmVudC1pZCBjb21wb25lbnRJZCB0byB1c2Ugd2l0aCAkbWRTaWRlbmF2IHNlcnZpY2UuXG4gKiBAcGFyYW0ge2V4cHJlc3Npb249fSBtZC1pcy1sb2NrZWQtb3BlbiBXaGVuIHRoaXMgZXhwcmVzc2lvbiBldmFsdXRlcyB0byB0cnVlLFxuICogdGhlIHNpZGVuYXYgJ2xvY2tzIG9wZW4nOiBpdCBmYWxscyBpbnRvIHRoZSBjb250ZW50J3MgZmxvdyBpbnN0ZWFkXG4gKiBvZiBhcHBlYXJpbmcgb3ZlciBpdC4gVGhpcyBvdmVycmlkZXMgdGhlIGBpcy1vcGVuYCBhdHRyaWJ1dGUuXG4gKlxuICogVGhlICRtZE1lZGlhKCkgc2VydmljZSBpcyBleHBvc2VkIHRvIHRoZSBpcy1sb2NrZWQtb3BlbiBhdHRyaWJ1dGUsIHdoaWNoXG4gKiBjYW4gYmUgZ2l2ZW4gYSBtZWRpYSBxdWVyeSBvciBvbmUgb2YgdGhlIGBzbWAsIGBndC1zbWAsIGBtZGAsIGBndC1tZGAsIGBsZ2Agb3IgYGd0LWxnYCBwcmVzZXRzLlxuICogRXhhbXBsZXM6XG4gKlxuICogICAtIGA8bWQtc2lkZW5hdiBtZC1pcy1sb2NrZWQtb3Blbj1cInNob3VsZExvY2tPcGVuXCI+PC9tZC1zaWRlbmF2PmBcbiAqICAgLSBgPG1kLXNpZGVuYXYgbWQtaXMtbG9ja2VkLW9wZW49XCIkbWRNZWRpYSgnbWluLXdpZHRoOiAxMDAwcHgnKVwiPjwvbWQtc2lkZW5hdj5gXG4gKiAgIC0gYDxtZC1zaWRlbmF2IG1kLWlzLWxvY2tlZC1vcGVuPVwiJG1kTWVkaWEoJ3NtJylcIj48L21kLXNpZGVuYXY+YCAobG9ja3Mgb3BlbiBvbiBzbWFsbCBzY3JlZW5zKVxuICovXG5mdW5jdGlvbiBTaWRlbmF2RGlyZWN0aXZlKCR0aW1lb3V0LCAkYW5pbWF0ZSwgJHBhcnNlLCAkbG9nLCAkbWRNZWRpYSwgJG1kQ29uc3RhbnQsICRjb21waWxlLCAkbWRUaGVtaW5nLCAkcSwgJGRvY3VtZW50KSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICBzY29wZToge1xuICAgICAgaXNPcGVuOiAnPT9tZElzT3BlbidcbiAgICB9LFxuICAgIGNvbnRyb2xsZXI6ICckbWRTaWRlbmF2Q29udHJvbGxlcicsXG4gICAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgZWxlbWVudC5hZGRDbGFzcygnbWQtY2xvc2VkJyk7XG4gICAgICBlbGVtZW50LmF0dHIoJ3RhYkluZGV4JywgJy0xJyk7XG4gICAgICByZXR1cm4gcG9zdExpbms7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBEaXJlY3RpdmUgUG9zdCBMaW5rIGZ1bmN0aW9uLi4uXG4gICAqL1xuICBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgc2lkZW5hdkN0cmwpIHtcbiAgICB2YXIgbGFzdFBhcmVudE92ZXJGbG93O1xuICAgIHZhciB0cmlnZ2VyaW5nRWxlbWVudCA9IG51bGw7XG4gICAgdmFyIHByb21pc2UgPSAkcS53aGVuKHRydWUpO1xuXG4gICAgdmFyIGlzTG9ja2VkT3BlblBhcnNlZCA9ICRwYXJzZShhdHRyLm1kSXNMb2NrZWRPcGVuKTtcbiAgICB2YXIgaXNMb2NrZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBpc0xvY2tlZE9wZW5QYXJzZWQoc2NvcGUuJHBhcmVudCwge1xuICAgICAgICAkbWVkaWE6IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICAgICRsb2cud2FybihcIiRtZWRpYSBpcyBkZXByZWNhdGVkIGZvciBpcy1sb2NrZWQtb3Blbi4gVXNlICRtZE1lZGlhIGluc3RlYWQuXCIpO1xuICAgICAgICAgIHJldHVybiAkbWRNZWRpYShhcmcpO1xuICAgICAgICB9LFxuICAgICAgICAkbWRNZWRpYTogJG1kTWVkaWFcbiAgICAgIH0pO1xuICAgIH07XG4gICAgdmFyIGJhY2tkcm9wID0gJGNvbXBpbGUoXG4gICAgICAnPG1kLWJhY2tkcm9wIGNsYXNzPVwibWQtc2lkZW5hdi1iYWNrZHJvcCBtZC1vcGFxdWUgbmctZW50ZXJcIj4nXG4gICAgKShzY29wZSk7XG5cbiAgICBlbGVtZW50Lm9uKCckZGVzdHJveScsIHNpZGVuYXZDdHJsLmRlc3Ryb3kpO1xuICAgICRtZFRoZW1pbmcuaW5oZXJpdChiYWNrZHJvcCwgZWxlbWVudCk7XG5cbiAgICBzY29wZS4kd2F0Y2goaXNMb2NrZWQsIHVwZGF0ZUlzTG9ja2VkKTtcbiAgICBzY29wZS4kd2F0Y2goJ2lzT3BlbicsIHVwZGF0ZUlzT3Blbik7XG5cblxuICAgIC8vIFB1Ymxpc2ggc3BlY2lhbCBhY2Nlc3NvciBmb3IgdGhlIENvbnRyb2xsZXIgaW5zdGFuY2VcbiAgICBzaWRlbmF2Q3RybC4kdG9nZ2xlT3BlbiA9IHRvZ2dsZU9wZW47XG4gICAgc2lkZW5hdkN0cmwuZm9jdXNFbGVtZW50KCBzaWRlbmF2Q3RybC5mb2N1c0VsZW1lbnQoKSB8fCBlbGVtZW50ICk7XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGUgdGhlIERPTSBjbGFzc2VzIHRvIGluZGljYXRlIGBsb2NrZWRgXG4gICAgICogQHBhcmFtIGlzTG9ja2VkXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlSXNMb2NrZWQoaXNMb2NrZWQsIG9sZFZhbHVlKSB7XG4gICAgICBzY29wZS5pc0xvY2tlZE9wZW4gPSBpc0xvY2tlZDtcbiAgICAgIGlmIChpc0xvY2tlZCA9PT0gb2xkVmFsdWUpIHtcbiAgICAgICAgZWxlbWVudC50b2dnbGVDbGFzcygnbWQtbG9ja2VkLW9wZW4nLCAhIWlzTG9ja2VkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRhbmltYXRlW2lzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKGVsZW1lbnQsICdtZC1sb2NrZWQtb3BlbicpO1xuICAgICAgfVxuICAgICAgYmFja2Ryb3AudG9nZ2xlQ2xhc3MoJ21kLWxvY2tlZC1vcGVuJywgISFpc0xvY2tlZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlIHRoZSBTaWRlTmF2IHZpZXcgYW5kIGF0dGFjaC9kZXRhY2ggbGlzdGVuZXJzXG4gICAgICogQHBhcmFtIGlzT3BlblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZUlzT3Blbihpc09wZW4pIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudCgpO1xuXG4gICAgICBwYXJlbnRbaXNPcGVuID8gJ29uJyA6ICdvZmYnXSgna2V5ZG93bicsIG9uS2V5RG93bik7XG4gICAgICBiYWNrZHJvcFtpc09wZW4gPyAnb24nIDogJ29mZiddKCdjbGljaycsIGNsb3NlKTtcblxuICAgICAgaWYgKCBpc09wZW4gKSB7XG4gICAgICAgIC8vIENhcHR1cmUgdXBvbiBvcGVuaW5nLi5cbiAgICAgICAgdHJpZ2dlcmluZ0VsZW1lbnQgPSAkZG9jdW1lbnRbMF0uYWN0aXZlRWxlbWVudDtcbiAgICAgIH1cbiAgICAgIHZhciBmb2N1c0VsID0gc2lkZW5hdkN0cmwuZm9jdXNFbGVtZW50KCk7XG5cbiAgICAgIGRpc2FibGVQYXJlbnRTY3JvbGwoaXNPcGVuKTtcblxuICAgICAgcmV0dXJuIHByb21pc2UgPSAkcS5hbGwoW1xuICAgICAgICAgICAgICAgIGlzT3BlbiA/ICRhbmltYXRlLmVudGVyKGJhY2tkcm9wLCBwYXJlbnQpIDogJGFuaW1hdGUubGVhdmUoYmFja2Ryb3ApLFxuICAgICAgICAgICAgICAgICRhbmltYXRlW2lzT3BlbiA/ICdyZW1vdmVDbGFzcycgOiAnYWRkQ2xhc3MnXShlbGVtZW50LCAnbWQtY2xvc2VkJylcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gUGVyZm9ybSBmb2N1cyB3aGVuIGFuaW1hdGlvbnMgYXJlIEFMTCBkb25lLi4uXG4gICAgICAgICAgICAgICAgaWYgKHNjb3BlLmlzT3Blbikge1xuICAgICAgICAgICAgICAgICAgZm9jdXNFbCAmJiBmb2N1c0VsLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcmV2ZW50IHBhcmVudCBzY3JvbGxpbmcgKHdoZW4gdGhlIFNpZGVOYXYgaXMgb3BlbilcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkaXNhYmxlUGFyZW50U2Nyb2xsKGRpc2FibGVkKSB7XG4gICAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnQoKTtcbiAgICAgIGlmICggZGlzYWJsZWQgKSB7XG4gICAgICAgIGxhc3RQYXJlbnRPdmVyRmxvdyA9IHBhcmVudC5jc3MoJ292ZXJmbG93Jyk7XG4gICAgICAgIHBhcmVudC5jc3MoJ292ZXJmbG93JywgJ2hpZGRlbicpO1xuICAgICAgfSBlbHNlIGlmIChhbmd1bGFyLmlzRGVmaW5lZChsYXN0UGFyZW50T3ZlckZsb3cpKSB7XG4gICAgICAgIHBhcmVudC5jc3MoJ292ZXJmbG93JywgbGFzdFBhcmVudE92ZXJGbG93KTtcbiAgICAgICAgbGFzdFBhcmVudE92ZXJGbG93ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZSB0aGUgc2lkZU5hdiB2aWV3IGFuZCBwdWJsaXNoIGEgcHJvbWlzZSB0byBiZSByZXNvbHZlZCB3aGVuXG4gICAgICogdGhlIHZpZXcgYW5pbWF0aW9uIGZpbmlzaGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGlzT3BlblxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvZ2dsZU9wZW4oIGlzT3BlbiApIHtcbiAgICAgIGlmIChzY29wZS5pc09wZW4gPT0gaXNPcGVuICkge1xuXG4gICAgICAgIHJldHVybiAkcS53aGVuKHRydWUpO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgIC8vIFRvZ2dsZSB2YWx1ZSB0byBmb3JjZSBhbiBhc3luYyBgdXBkYXRlSXNPcGVuKClgIHRvIHJ1blxuICAgICAgICBzY29wZS5pc09wZW4gPSBpc09wZW47XG5cbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAvLyBXaGVuIHRoZSBjdXJyZW50IGB1cGRhdGVJc09wZW4oKWAgYW5pbWF0aW9uIGZpbmlzaGVzXG4gICAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuXG4gICAgICAgICAgICBpZiAoICFzY29wZS5pc09wZW4gKSB7XG4gICAgICAgICAgICAgIC8vIHJlc2V0IGZvY3VzIHRvIG9yaWdpbmF0aW5nIGVsZW1lbnQgKGlmIGF2YWlsYWJsZSkgdXBvbiBjbG9zZVxuICAgICAgICAgICAgICB0cmlnZ2VyaW5nRWxlbWVudCAmJiB0cmlnZ2VyaW5nRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgICB0cmlnZ2VyaW5nRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICB9LDAsZmFsc2UpO1xuXG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEF1dG8tY2xvc2Ugc2lkZU5hdiB3aGVuIHRoZSBgZXNjYXBlYCBrZXkgaXMgcHJlc3NlZC5cbiAgICAgKiBAcGFyYW0gZXZ0XG4gICAgICovXG4gICAgZnVuY3Rpb24gb25LZXlEb3duKGV2KSB7XG4gICAgICB2YXIgaXNFc2NhcGUgPSAoZXYua2V5Q29kZSA9PT0gJG1kQ29uc3RhbnQuS0VZX0NPREUuRVNDQVBFKTtcbiAgICAgIHJldHVybiBpc0VzY2FwZSA/IGNsb3NlKGV2KSA6ICRxLndoZW4odHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2l0aCBiYWNrZHJvcCBgY2xpY2tzYCBvciBgZXNjYXBlYCBrZXktcHJlc3MsIGltbWVkaWF0ZWx5XG4gICAgICogYXBwbHkgdGhlIENTUyBjbG9zZSB0cmFuc2l0aW9uLi4uIFRoZW4gbm90aWZ5IHRoZSBjb250cm9sbGVyXG4gICAgICogdG8gY2xvc2UoKSBhbmQgcGVyZm9ybSBpdHMgb3duIGFjdGlvbnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvc2UoZXYpIHtcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgcmV0dXJuIHNpZGVuYXZDdHJsLmNsb3NlKCk7XG4gICAgfVxuXG4gIH1cbn1cblNpZGVuYXZEaXJlY3RpdmUuJGluamVjdCA9IFtcIiR0aW1lb3V0XCIsIFwiJGFuaW1hdGVcIiwgXCIkcGFyc2VcIiwgXCIkbG9nXCIsIFwiJG1kTWVkaWFcIiwgXCIkbWRDb25zdGFudFwiLCBcIiRjb21waWxlXCIsIFwiJG1kVGhlbWluZ1wiLCBcIiRxXCIsIFwiJGRvY3VtZW50XCJdO1xuXG4vKlxuICogQHByaXZhdGVcbiAqIEBuZ2RvYyBjb250cm9sbGVyXG4gKiBAbmFtZSBTaWRlbmF2Q29udHJvbGxlclxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLnNpZGVuYXZcbiAqXG4gKi9cbmZ1bmN0aW9uIFNpZGVuYXZDb250cm9sbGVyKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJG1kQ29tcG9uZW50UmVnaXN0cnksICRxKSB7XG5cbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgZm9jdXNFbGVtZW50O1xuXG4gIC8vIFVzZSBEZWZhdWx0IGludGVybmFsIG1ldGhvZCB1bnRpbCBvdmVycmlkZGVuIGJ5IGRpcmVjdGl2ZSBwb3N0TGlua1xuXG4gIC8vIFN5bmNocm9ub3VzIGdldHRlcnNcbiAgc2VsZi5pc09wZW4gPSBmdW5jdGlvbigpIHsgcmV0dXJuICEhJHNjb3BlLmlzT3BlbjsgfTtcbiAgc2VsZi5pc0xvY2tlZE9wZW4gPSBmdW5jdGlvbigpIHsgcmV0dXJuICEhJHNjb3BlLmlzTG9ja2VkT3BlbjsgfTtcblxuICAvLyBBc3luYyBhY3Rpb25zXG4gIHNlbGYub3BlbiAgID0gZnVuY3Rpb24oKSB7IHJldHVybiBzZWxmLiR0b2dnbGVPcGVuKCB0cnVlICk7ICB9O1xuICBzZWxmLmNsb3NlICA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc2VsZi4kdG9nZ2xlT3BlbiggZmFsc2UgKTsgfTtcbiAgc2VsZi50b2dnbGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNlbGYuJHRvZ2dsZU9wZW4oICEkc2NvcGUuaXNPcGVuICk7ICB9O1xuICBzZWxmLmZvY3VzRWxlbWVudCA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgaWYgKCBhbmd1bGFyLmlzRGVmaW5lZChlbCkgKSB7XG4gICAgICBmb2N1c0VsZW1lbnQgPSBlbDtcbiAgICB9XG4gICAgcmV0dXJuIGZvY3VzRWxlbWVudDtcbiAgfTtcblxuICBzZWxmLiR0b2dnbGVPcGVuID0gZnVuY3Rpb24oKSB7IHJldHVybiAkcS53aGVuKCRzY29wZS5pc09wZW4pOyB9O1xuXG4gIHNlbGYuZGVzdHJveSA9ICRtZENvbXBvbmVudFJlZ2lzdHJ5LnJlZ2lzdGVyKHNlbGYsICRhdHRycy5tZENvbXBvbmVudElkKTtcbn1cblNpZGVuYXZDb250cm9sbGVyLiRpbmplY3QgPSBbXCIkc2NvcGVcIiwgXCIkZWxlbWVudFwiLCBcIiRhdHRyc1wiLCBcIiRtZENvbXBvbmVudFJlZ2lzdHJ5XCIsIFwiJHFcIl07XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbW9kdWxlXG4gICAqIEBuYW1lIG1hdGVyaWFsLmNvbXBvbmVudHMuc2xpZGVyXG4gICAqL1xuICBhbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5zbGlkZXInLCBbXG4gICAgJ21hdGVyaWFsLmNvcmUnXG4gIF0pXG4gIC5kaXJlY3RpdmUoJ21kU2xpZGVyJywgU2xpZGVyRGlyZWN0aXZlKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBtZFNsaWRlclxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLnNsaWRlclxuICogQHJlc3RyaWN0IEVcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGA8bWQtc2xpZGVyPmAgY29tcG9uZW50IGFsbG93cyB0aGUgdXNlciB0byBjaG9vc2UgZnJvbSBhIHJhbmdlIG9mXG4gKiB2YWx1ZXMuXG4gKlxuICogQXMgcGVyIHRoZSBbbWF0ZXJpYWwgZGVzaWduIHNwZWNdKGh0dHA6Ly93d3cuZ29vZ2xlLmNvbS9kZXNpZ24vc3BlYy9zdHlsZS9jb2xvci5odG1sI2NvbG9yLXVpLWNvbG9yLWFwcGxpY2F0aW9uKVxuICogdGhlIHNsaWRlciBpcyBpbiB0aGUgYWNjZW50IGNvbG9yIGJ5IGRlZmF1bHQuIFRoZSBwcmltYXJ5IGNvbG9yIHBhbGV0dGUgbWF5IGJlIHVzZWQgd2l0aFxuICogdGhlIGBtZC1wcmltYXJ5YCBjbGFzcy5cbiAqXG4gKiBJdCBoYXMgdHdvIG1vZGVzOiAnbm9ybWFsJyBtb2RlLCB3aGVyZSB0aGUgdXNlciBzbGlkZXMgYmV0d2VlbiBhIHdpZGUgcmFuZ2VcbiAqIG9mIHZhbHVlcywgYW5kICdkaXNjcmV0ZScgbW9kZSwgd2hlcmUgdGhlIHVzZXIgc2xpZGVzIGJldHdlZW4gb25seSBhIGZld1xuICogc2VsZWN0IHZhbHVlcy5cbiAqXG4gKiBUbyBlbmFibGUgZGlzY3JldGUgbW9kZSwgYWRkIHRoZSBgbWQtZGlzY3JldGVgIGF0dHJpYnV0ZSB0byBhIHNsaWRlcixcbiAqIGFuZCB1c2UgdGhlIGBzdGVwYCBhdHRyaWJ1dGUgdG8gY2hhbmdlIHRoZSBkaXN0YW5jZSBiZXR3ZWVuXG4gKiB2YWx1ZXMgdGhlIHVzZXIgaXMgYWxsb3dlZCB0byBwaWNrLlxuICpcbiAqIEB1c2FnZVxuICogPGg0Pk5vcm1hbCBNb2RlPC9oND5cbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8bWQtc2xpZGVyIG5nLW1vZGVsPVwibXlWYWx1ZVwiIG1pbj1cIjVcIiBtYXg9XCI1MDBcIj5cbiAqIDwvbWQtc2xpZGVyPlxuICogPC9obGpzPlxuICogPGg0PkRpc2NyZXRlIE1vZGU8L2g0PlxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC1zbGlkZXIgbWQtZGlzY3JldGUgbmctbW9kZWw9XCJteURpc2NyZXRlVmFsdWVcIiBzdGVwPVwiMTBcIiBtaW49XCIxMFwiIG1heD1cIjEzMFwiPlxuICogPC9tZC1zbGlkZXI+XG4gKiA8L2hsanM+XG4gKlxuICogQHBhcmFtIHtib29sZWFuPX0gbWQtZGlzY3JldGUgV2hldGhlciB0byBlbmFibGUgZGlzY3JldGUgbW9kZS5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gc3RlcCBUaGUgZGlzdGFuY2UgYmV0d2VlbiB2YWx1ZXMgdGhlIHVzZXIgaXMgYWxsb3dlZCB0byBwaWNrLiBEZWZhdWx0IDEuXG4gKiBAcGFyYW0ge251bWJlcj19IG1pbiBUaGUgbWluaW11bSB2YWx1ZSB0aGUgdXNlciBpcyBhbGxvd2VkIHRvIHBpY2suIERlZmF1bHQgMC5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gbWF4IFRoZSBtYXhpbXVtIHZhbHVlIHRoZSB1c2VyIGlzIGFsbG93ZWQgdG8gcGljay4gRGVmYXVsdCAxMDAuXG4gKi9cbmZ1bmN0aW9uIFNsaWRlckRpcmVjdGl2ZSgkJHJBRiwgJHdpbmRvdywgJG1kQXJpYSwgJG1kVXRpbCwgJG1kQ29uc3RhbnQsICRtZFRoZW1pbmcsICRtZEdlc3R1cmUsICRwYXJzZSkge1xuICByZXR1cm4ge1xuICAgIHNjb3BlOiB7fSxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIHRlbXBsYXRlOlxuICAgICAgJzxkaXYgY2xhc3M9XCJtZC1zbGlkZXItd3JhcHBlclwiPlxcXG4gICAgICAgIDxkaXYgY2xhc3M9XCJtZC10cmFjay1jb250YWluZXJcIj5cXFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZC10cmFja1wiPjwvZGl2PlxcXG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm1kLXRyYWNrIG1kLXRyYWNrLWZpbGxcIj48L2Rpdj5cXFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZC10cmFjay10aWNrc1wiPjwvZGl2PlxcXG4gICAgICAgIDwvZGl2PlxcXG4gICAgICAgIDxkaXYgY2xhc3M9XCJtZC10aHVtYi1jb250YWluZXJcIj5cXFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZC10aHVtYlwiPjwvZGl2PlxcXG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm1kLWZvY3VzLXRodW1iXCI+PC9kaXY+XFxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibWQtZm9jdXMtcmluZ1wiPjwvZGl2PlxcXG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm1kLXNpZ25cIj5cXFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZC10aHVtYi10ZXh0XCI+PC9zcGFuPlxcXG4gICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibWQtZGlzYWJsZWQtdGh1bWJcIj48L2Rpdj5cXFxuICAgICAgICA8L2Rpdj5cXFxuICAgICAgPC9kaXY+JyxcbiAgICBjb21waWxlOiBjb21waWxlXG4gIH07XG5cbiAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAvLyBQcml2YXRlIE1ldGhvZHNcbiAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gIGZ1bmN0aW9uIGNvbXBpbGUgKHRFbGVtZW50LCB0QXR0cnMpIHtcbiAgICB0RWxlbWVudC5hdHRyKHtcbiAgICAgIHRhYkluZGV4OiAwLFxuICAgICAgcm9sZTogJ3NsaWRlcidcbiAgICB9KTtcblxuICAgICRtZEFyaWEuZXhwZWN0KHRFbGVtZW50LCAnYXJpYS1sYWJlbCcpO1xuXG4gICAgcmV0dXJuIHBvc3RMaW5rO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIG5nTW9kZWxDdHJsKSB7XG4gICAgJG1kVGhlbWluZyhlbGVtZW50KTtcbiAgICBuZ01vZGVsQ3RybCA9IG5nTW9kZWxDdHJsIHx8IHtcbiAgICAgIC8vIE1vY2sgbmdNb2RlbENvbnRyb2xsZXIgaWYgaXQgZG9lc24ndCBleGlzdCB0byBnaXZlIHVzXG4gICAgICAvLyB0aGUgbWluaW11bSBmdW5jdGlvbmFsaXR5IG5lZWRlZFxuICAgICAgJHNldFZpZXdWYWx1ZTogZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIHRoaXMuJHZpZXdWYWx1ZSA9IHZhbDtcbiAgICAgICAgdGhpcy4kdmlld0NoYW5nZUxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uKGNiKSB7IGNiKCk7IH0pO1xuICAgICAgfSxcbiAgICAgICRwYXJzZXJzOiBbXSxcbiAgICAgICRmb3JtYXR0ZXJzOiBbXSxcbiAgICAgICR2aWV3Q2hhbmdlTGlzdGVuZXJzOiBbXVxuICAgIH07XG5cbiAgICB2YXIgaXNEaXNhYmxlZFBhcnNlZCA9IGF0dHIubmdEaXNhYmxlZCAmJiAkcGFyc2UoYXR0ci5uZ0Rpc2FibGVkKTtcbiAgICB2YXIgaXNEaXNhYmxlZEdldHRlciA9IGlzRGlzYWJsZWRQYXJzZWQgP1xuICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBpc0Rpc2FibGVkUGFyc2VkKHNjb3BlLiRwYXJlbnQpOyB9IDpcbiAgICAgIGFuZ3VsYXIubm9vcDtcbiAgICB2YXIgdGh1bWIgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcubWQtdGh1bWInKSk7XG4gICAgdmFyIHRodW1iVGV4dCA9IGFuZ3VsYXIuZWxlbWVudChlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJy5tZC10aHVtYi10ZXh0JykpO1xuICAgIHZhciB0aHVtYkNvbnRhaW5lciA9IHRodW1iLnBhcmVudCgpO1xuICAgIHZhciB0cmFja0NvbnRhaW5lciA9IGFuZ3VsYXIuZWxlbWVudChlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJy5tZC10cmFjay1jb250YWluZXInKSk7XG4gICAgdmFyIGFjdGl2ZVRyYWNrID0gYW5ndWxhci5lbGVtZW50KGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignLm1kLXRyYWNrLWZpbGwnKSk7XG4gICAgdmFyIHRpY2tDb250YWluZXIgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcubWQtdHJhY2stdGlja3MnKSk7XG4gICAgdmFyIHRocm90dGxlZFJlZnJlc2hEaW1lbnNpb25zID0gJG1kVXRpbC50aHJvdHRsZShyZWZyZXNoU2xpZGVyRGltZW5zaW9ucywgNTAwMCk7XG5cbiAgICAvLyBEZWZhdWx0IHZhbHVlcywgb3ZlcnJpZGFibGUgYnkgYXR0cnNcbiAgICBhbmd1bGFyLmlzRGVmaW5lZChhdHRyLm1pbikgPyBhdHRyLiRvYnNlcnZlKCdtaW4nLCB1cGRhdGVNaW4pIDogdXBkYXRlTWluKDApO1xuICAgIGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHIubWF4KSA/IGF0dHIuJG9ic2VydmUoJ21heCcsIHVwZGF0ZU1heCkgOiB1cGRhdGVNYXgoMTAwKTtcbiAgICBhbmd1bGFyLmlzRGVmaW5lZChhdHRyLnN0ZXApPyBhdHRyLiRvYnNlcnZlKCdzdGVwJywgdXBkYXRlU3RlcCkgOiB1cGRhdGVTdGVwKDEpO1xuXG4gICAgLy8gV2UgaGF2ZSB0byBtYW51YWxseSBzdG9wIHRoZSAkd2F0Y2ggb24gbmdEaXNhYmxlZCBiZWNhdXNlIGl0IGV4aXN0c1xuICAgIC8vIG9uIHRoZSBwYXJlbnQgc2NvcGUsIGFuZCB3b24ndCBiZSBhdXRvbWF0aWNhbGx5IGRlc3Ryb3llZCB3aGVuXG4gICAgLy8gdGhlIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQuXG4gICAgdmFyIHN0b3BEaXNhYmxlZFdhdGNoID0gYW5ndWxhci5ub29wO1xuICAgIGlmIChhdHRyLm5nRGlzYWJsZWQpIHtcbiAgICAgIHN0b3BEaXNhYmxlZFdhdGNoID0gc2NvcGUuJHBhcmVudC4kd2F0Y2goYXR0ci5uZ0Rpc2FibGVkLCB1cGRhdGVBcmlhRGlzYWJsZWQpO1xuICAgIH1cblxuICAgICRtZEdlc3R1cmUucmVnaXN0ZXIoZWxlbWVudCwgJ2RyYWcnKTtcblxuICAgIGVsZW1lbnRcbiAgICAgIC5vbigna2V5ZG93bicsIGtleWRvd25MaXN0ZW5lcilcbiAgICAgIC5vbignJG1kLnByZXNzZG93bicsIG9uUHJlc3NEb3duKVxuICAgICAgLm9uKCckbWQucHJlc3N1cCcsIG9uUHJlc3NVcClcbiAgICAgIC5vbignJG1kLmRyYWdzdGFydCcsIG9uRHJhZ1N0YXJ0KVxuICAgICAgLm9uKCckbWQuZHJhZycsIG9uRHJhZylcbiAgICAgIC5vbignJG1kLmRyYWdlbmQnLCBvbkRyYWdFbmQpO1xuXG4gICAgLy8gT24gcmVzaXplLCByZWNhbGN1bGF0ZSB0aGUgc2xpZGVyJ3MgZGltZW5zaW9ucyBhbmQgcmUtcmVuZGVyXG4gICAgZnVuY3Rpb24gdXBkYXRlQWxsKCkge1xuICAgICAgcmVmcmVzaFNsaWRlckRpbWVuc2lvbnMoKTtcbiAgICAgIG5nTW9kZWxSZW5kZXIoKTtcbiAgICAgIHJlZHJhd1RpY2tzKCk7XG4gICAgfVxuICAgIHNldFRpbWVvdXQodXBkYXRlQWxsKTtcblxuICAgIHZhciBkZWJvdW5jZWRVcGRhdGVBbGwgPSAkJHJBRi50aHJvdHRsZSh1cGRhdGVBbGwpO1xuICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vbigncmVzaXplJywgZGVib3VuY2VkVXBkYXRlQWxsKTtcblxuICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vZmYoJ3Jlc2l6ZScsIGRlYm91bmNlZFVwZGF0ZUFsbCk7XG4gICAgICBzdG9wRGlzYWJsZWRXYXRjaCgpO1xuICAgIH0pO1xuXG4gICAgbmdNb2RlbEN0cmwuJHJlbmRlciA9IG5nTW9kZWxSZW5kZXI7XG4gICAgbmdNb2RlbEN0cmwuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMucHVzaChuZ01vZGVsUmVuZGVyKTtcbiAgICBuZ01vZGVsQ3RybC4kZm9ybWF0dGVycy5wdXNoKG1pbk1heFZhbGlkYXRvcik7XG4gICAgbmdNb2RlbEN0cmwuJGZvcm1hdHRlcnMucHVzaChzdGVwVmFsaWRhdG9yKTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZXNcbiAgICAgKi9cbiAgICB2YXIgbWluO1xuICAgIHZhciBtYXg7XG4gICAgdmFyIHN0ZXA7XG4gICAgZnVuY3Rpb24gdXBkYXRlTWluKHZhbHVlKSB7XG4gICAgICBtaW4gPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgIGVsZW1lbnQuYXR0cignYXJpYS12YWx1ZW1pbicsIHZhbHVlKTtcbiAgICAgIHVwZGF0ZUFsbCgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGVNYXgodmFsdWUpIHtcbiAgICAgIG1heCA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgZWxlbWVudC5hdHRyKCdhcmlhLXZhbHVlbWF4JywgdmFsdWUpO1xuICAgICAgdXBkYXRlQWxsKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZVN0ZXAodmFsdWUpIHtcbiAgICAgIHN0ZXAgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgIHJlZHJhd1RpY2tzKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZUFyaWFEaXNhYmxlZChpc0Rpc2FibGVkKSB7XG4gICAgICBlbGVtZW50LmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAhIWlzRGlzYWJsZWQpO1xuICAgIH1cblxuICAgIC8vIERyYXcgdGhlIHRpY2tzIHdpdGggY2FudmFzLlxuICAgIC8vIFRoZSBhbHRlcm5hdGl2ZSB0byBkcmF3aW5nIHRpY2tzIHdpdGggY2FudmFzIGlzIHRvIGRyYXcgb25lIGVsZW1lbnQgZm9yIGVhY2ggdGljayxcbiAgICAvLyB3aGljaCBjb3VsZCBxdWlja2x5IGJlY29tZSBhIHBlcmZvcm1hbmNlIGJvdHRsZW5lY2suXG4gICAgdmFyIHRpY2tDYW52YXMsIHRpY2tDdHg7XG4gICAgZnVuY3Rpb24gcmVkcmF3VGlja3MoKSB7XG4gICAgICBpZiAoIWFuZ3VsYXIuaXNEZWZpbmVkKGF0dHIubWREaXNjcmV0ZSkpIHJldHVybjtcblxuICAgICAgdmFyIG51bVN0ZXBzID0gTWF0aC5mbG9vciggKG1heCAtIG1pbikgLyBzdGVwICk7XG4gICAgICBpZiAoIXRpY2tDYW52YXMpIHtcbiAgICAgICAgdmFyIHRyYWNrVGlja3NTdHlsZSA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aWNrQ29udGFpbmVyWzBdKTtcbiAgICAgICAgdGlja0NhbnZhcyA9IGFuZ3VsYXIuZWxlbWVudCgnPGNhbnZhcyBzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlO1wiPicpO1xuICAgICAgICB0aWNrQ3R4ID0gdGlja0NhbnZhc1swXS5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICB0aWNrQ3R4LmZpbGxTdHlsZSA9IHRyYWNrVGlja3NTdHlsZS5iYWNrZ3JvdW5kQ29sb3IgfHwgJ2JsYWNrJztcbiAgICAgICAgdGlja0NvbnRhaW5lci5hcHBlbmQodGlja0NhbnZhcyk7XG4gICAgICB9XG4gICAgICB2YXIgZGltZW5zaW9ucyA9IGdldFNsaWRlckRpbWVuc2lvbnMoKTtcbiAgICAgIHRpY2tDYW52YXNbMF0ud2lkdGggPSBkaW1lbnNpb25zLndpZHRoO1xuICAgICAgdGlja0NhbnZhc1swXS5oZWlnaHQgPSBkaW1lbnNpb25zLmhlaWdodDtcblxuICAgICAgdmFyIGRpc3RhbmNlO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gbnVtU3RlcHM7IGkrKykge1xuICAgICAgICBkaXN0YW5jZSA9IE1hdGguZmxvb3IoZGltZW5zaW9ucy53aWR0aCAqIChpIC8gbnVtU3RlcHMpKTtcbiAgICAgICAgdGlja0N0eC5maWxsUmVjdChkaXN0YW5jZSAtIDEsIDAsIDIsIGRpbWVuc2lvbnMuaGVpZ2h0KTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFJlZnJlc2hpbmcgRGltZW5zaW9uc1xuICAgICAqL1xuICAgIHZhciBzbGlkZXJEaW1lbnNpb25zID0ge307XG4gICAgcmVmcmVzaFNsaWRlckRpbWVuc2lvbnMoKTtcbiAgICBmdW5jdGlvbiByZWZyZXNoU2xpZGVyRGltZW5zaW9ucygpIHtcbiAgICAgIHNsaWRlckRpbWVuc2lvbnMgPSB0cmFja0NvbnRhaW5lclswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0U2xpZGVyRGltZW5zaW9ucygpIHtcbiAgICAgIHRocm90dGxlZFJlZnJlc2hEaW1lbnNpb25zKCk7XG4gICAgICByZXR1cm4gc2xpZGVyRGltZW5zaW9ucztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBsZWZ0L3JpZ2h0IGFycm93IGxpc3RlbmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5ZG93bkxpc3RlbmVyKGV2KSB7XG4gICAgICBpZihlbGVtZW50WzBdLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGFuZ2VBbW91bnQ7XG4gICAgICBpZiAoZXYua2V5Q29kZSA9PT0gJG1kQ29uc3RhbnQuS0VZX0NPREUuTEVGVF9BUlJPVykge1xuICAgICAgICBjaGFuZ2VBbW91bnQgPSAtc3RlcDtcbiAgICAgIH0gZWxzZSBpZiAoZXYua2V5Q29kZSA9PT0gJG1kQ29uc3RhbnQuS0VZX0NPREUuUklHSFRfQVJST1cpIHtcbiAgICAgICAgY2hhbmdlQW1vdW50ID0gc3RlcDtcbiAgICAgIH1cbiAgICAgIGlmIChjaGFuZ2VBbW91bnQpIHtcbiAgICAgICAgaWYgKGV2Lm1ldGFLZXkgfHwgZXYuY3RybEtleSB8fCBldi5hbHRLZXkpIHtcbiAgICAgICAgICBjaGFuZ2VBbW91bnQgKj0gNDtcbiAgICAgICAgfVxuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgc2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZXRNb2RlbFZhbHVlKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUgKyBjaGFuZ2VBbW91bnQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBuZ01vZGVsIHNldHRlcnMgYW5kIHZhbGlkYXRvcnNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRNb2RlbFZhbHVlKHZhbHVlKSB7XG4gICAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKCBtaW5NYXhWYWxpZGF0b3Ioc3RlcFZhbGlkYXRvcih2YWx1ZSkpICk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG5nTW9kZWxSZW5kZXIoKSB7XG4gICAgICBpZiAoaXNOYU4obmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSkpIHtcbiAgICAgICAgbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSA9IG5nTW9kZWxDdHJsLiRtb2RlbFZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGVyY2VudCA9IChuZ01vZGVsQ3RybC4kdmlld1ZhbHVlIC0gbWluKSAvIChtYXggLSBtaW4pO1xuICAgICAgc2NvcGUubW9kZWxWYWx1ZSA9IG5nTW9kZWxDdHJsLiR2aWV3VmFsdWU7XG4gICAgICBlbGVtZW50LmF0dHIoJ2FyaWEtdmFsdWVub3cnLCBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKTtcbiAgICAgIHNldFNsaWRlclBlcmNlbnQocGVyY2VudCk7XG4gICAgICB0aHVtYlRleHQudGV4dCggbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1pbk1heFZhbGlkYXRvcih2YWx1ZSkge1xuICAgICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChtaW4sIE1hdGgubWluKG1heCwgdmFsdWUpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc3RlcFZhbGlkYXRvcih2YWx1ZSkge1xuICAgICAgaWYgKGFuZ3VsYXIuaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgIHZhciBmb3JtYXR0ZWRWYWx1ZSA9IChNYXRoLnJvdW5kKHZhbHVlIC8gc3RlcCkgKiBzdGVwKTtcbiAgICAgICAgLy8gRm9ybWF0IHRvIDMgZGlnaXRzIGFmdGVyIHRoZSBkZWNpbWFsIHBvaW50IC0gZml4ZXMgIzIwMTUuXG4gICAgICAgIHJldHVybiAoTWF0aC5yb3VuZChmb3JtYXR0ZWRWYWx1ZSAqIDEwMDApIC8gMTAwMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHBlcmNlbnQgMC0xXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0U2xpZGVyUGVyY2VudChwZXJjZW50KSB7XG4gICAgICBhY3RpdmVUcmFjay5jc3MoJ3dpZHRoJywgKHBlcmNlbnQgKiAxMDApICsgJyUnKTtcbiAgICAgIHRodW1iQ29udGFpbmVyLmNzcyhcbiAgICAgICAgJ2xlZnQnLFxuICAgICAgICAocGVyY2VudCAqIDEwMCkgKyAnJSdcbiAgICAgICk7XG4gICAgICBlbGVtZW50LnRvZ2dsZUNsYXNzKCdtZC1taW4nLCBwZXJjZW50ID09PSAwKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFNsaWRlIGxpc3RlbmVyc1xuICAgICAqL1xuICAgIHZhciBpc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgdmFyIGlzRGlzY3JldGUgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRyLm1kRGlzY3JldGUpO1xuXG4gICAgZnVuY3Rpb24gb25QcmVzc0Rvd24oZXYpIHtcbiAgICAgIGlmIChpc0Rpc2FibGVkR2V0dGVyKCkpIHJldHVybjtcblxuICAgICAgZWxlbWVudC5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICBlbGVtZW50WzBdLmZvY3VzKCk7XG4gICAgICByZWZyZXNoU2xpZGVyRGltZW5zaW9ucygpO1xuXG4gICAgICB2YXIgZXhhY3RWYWwgPSBwZXJjZW50VG9WYWx1ZSggcG9zaXRpb25Ub1BlcmNlbnQoIGV2LnBvaW50ZXIueCApKTtcbiAgICAgIHZhciBjbG9zZXN0VmFsID0gbWluTWF4VmFsaWRhdG9yKCBzdGVwVmFsaWRhdG9yKGV4YWN0VmFsKSApO1xuICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRNb2RlbFZhbHVlKCBjbG9zZXN0VmFsICk7XG4gICAgICAgIHNldFNsaWRlclBlcmNlbnQoIHZhbHVlVG9QZXJjZW50KGNsb3Nlc3RWYWwpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblByZXNzVXAoZXYpIHtcbiAgICAgIGlmIChpc0Rpc2FibGVkR2V0dGVyKCkpIHJldHVybjtcblxuICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnZHJhZ2dpbmcgYWN0aXZlJyk7XG5cbiAgICAgIHZhciBleGFjdFZhbCA9IHBlcmNlbnRUb1ZhbHVlKCBwb3NpdGlvblRvUGVyY2VudCggZXYucG9pbnRlci54ICkpO1xuICAgICAgdmFyIGNsb3Nlc3RWYWwgPSBtaW5NYXhWYWxpZGF0b3IoIHN0ZXBWYWxpZGF0b3IoZXhhY3RWYWwpICk7XG4gICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldE1vZGVsVmFsdWUoY2xvc2VzdFZhbCk7XG4gICAgICAgIG5nTW9kZWxSZW5kZXIoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkRyYWdTdGFydChldikge1xuICAgICAgaWYgKGlzRGlzYWJsZWRHZXR0ZXIoKSkgcmV0dXJuO1xuICAgICAgaXNEcmFnZ2luZyA9IHRydWU7XG4gICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgZWxlbWVudC5hZGRDbGFzcygnZHJhZ2dpbmcnKTtcbiAgICAgIHNldFNsaWRlckZyb21FdmVudChldik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uRHJhZyhldikge1xuICAgICAgaWYgKCFpc0RyYWdnaW5nKSByZXR1cm47XG4gICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHNldFNsaWRlckZyb21FdmVudChldik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uRHJhZ0VuZChldikge1xuICAgICAgaWYgKCFpc0RyYWdnaW5nKSByZXR1cm47XG4gICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRTbGlkZXJGcm9tRXZlbnQoZXYpIHtcbiAgICAgIC8vIFdoaWxlIHBhbm5pbmcgZGlzY3JldGUsIHVwZGF0ZSBvbmx5IHRoZVxuICAgICAgLy8gdmlzdWFsIHBvc2l0aW9uaW5nIGJ1dCBub3QgdGhlIG1vZGVsIHZhbHVlLlxuICAgICAgaWYgKCBpc0Rpc2NyZXRlICkgYWRqdXN0VGh1bWJQb3NpdGlvbiggZXYucG9pbnRlci54ICk7XG4gICAgICBlbHNlICAgICAgICAgICAgICBkb1NsaWRlKCBldi5wb2ludGVyLnggKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTbGlkZSB0aGUgVUkgYnkgY2hhbmdpbmcgdGhlIG1vZGVsIHZhbHVlXG4gICAgICogQHBhcmFtIHhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkb1NsaWRlKCB4ICkge1xuICAgICAgc2NvcGUuJGV2YWxBc3luYyggZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldE1vZGVsVmFsdWUoIHBlcmNlbnRUb1ZhbHVlKCBwb3NpdGlvblRvUGVyY2VudCh4KSApKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNsaWRlIHRoZSBVSSB3aXRob3V0IGNoYW5naW5nIHRoZSBtb2RlbCAod2hpbGUgZHJhZ2dpbmcvcGFubmluZylcbiAgICAgKiBAcGFyYW0geFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkanVzdFRodW1iUG9zaXRpb24oIHggKSB7XG4gICAgICB2YXIgZXhhY3RWYWwgPSBwZXJjZW50VG9WYWx1ZSggcG9zaXRpb25Ub1BlcmNlbnQoIHggKSk7XG4gICAgICB2YXIgY2xvc2VzdFZhbCA9IG1pbk1heFZhbGlkYXRvciggc3RlcFZhbGlkYXRvcihleGFjdFZhbCkgKTtcbiAgICAgIHNldFNsaWRlclBlcmNlbnQoIHBvc2l0aW9uVG9QZXJjZW50KHgpICk7XG4gICAgICB0aHVtYlRleHQudGV4dCggY2xvc2VzdFZhbCApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgaG9yaXpvbnRhbCBwb3NpdGlvbiBvbiBzbGlkZXIgdG8gcGVyY2VudGFnZSB2YWx1ZSBvZiBvZmZzZXQgZnJvbSBiZWdpbm5pbmcuLi5cbiAgICAgKiBAcGFyYW0geFxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcG9zaXRpb25Ub1BlcmNlbnQoIHggKSB7XG4gICAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgKHggLSBzbGlkZXJEaW1lbnNpb25zLmxlZnQpIC8gKHNsaWRlckRpbWVuc2lvbnMud2lkdGgpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBwZXJjZW50YWdlIG9mZnNldCBvbiBzbGlkZSB0byBlcXVpdmFsZW50IG1vZGVsIHZhbHVlXG4gICAgICogQHBhcmFtIHBlcmNlbnRcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwZXJjZW50VG9WYWx1ZSggcGVyY2VudCApIHtcbiAgICAgIHJldHVybiAobWluICsgcGVyY2VudCAqIChtYXggLSBtaW4pKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWx1ZVRvUGVyY2VudCggdmFsICkge1xuICAgICAgcmV0dXJuICh2YWwgLSBtaW4pLyhtYXggLSBtaW4pO1xuICAgIH1cbiAgfVxufVxuU2xpZGVyRGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkJHJBRlwiLCBcIiR3aW5kb3dcIiwgXCIkbWRBcmlhXCIsIFwiJG1kVXRpbFwiLCBcIiRtZENvbnN0YW50XCIsIFwiJG1kVGhlbWluZ1wiLCBcIiRtZEdlc3R1cmVcIiwgXCIkcGFyc2VcIl07XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG1hdGVyaWFsLmNvbXBvbmVudHMuc3ViaGVhZGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFN1YkhlYWRlciBtb2R1bGVcbiAqXG4gKiAgU3ViaGVhZGVycyBhcmUgc3BlY2lhbCBsaXN0IHRpbGVzIHRoYXQgZGVsaW5lYXRlIGRpc3RpbmN0IHNlY3Rpb25zIG9mIGFcbiAqICBsaXN0IG9yIGdyaWQgbGlzdCBhbmQgYXJlIHR5cGljYWxseSByZWxhdGVkIHRvIHRoZSBjdXJyZW50IGZpbHRlcmluZyBvclxuICogIHNvcnRpbmcgY3JpdGVyaWEuIFN1YmhlYWRlciB0aWxlcyBhcmUgZWl0aGVyIGRpc3BsYXllZCBpbmxpbmUgd2l0aCB0aWxlcyBvclxuICogIGNhbiBiZSBhc3NvY2lhdGVkIHdpdGggY29udGVudCwgZm9yIGV4YW1wbGUsIGluIGFuIGFkamFjZW50IGNvbHVtbi5cbiAqXG4gKiAgVXBvbiBzY3JvbGxpbmcsIHN1YmhlYWRlcnMgcmVtYWluIHBpbm5lZCB0byB0aGUgdG9wIG9mIHRoZSBzY3JlZW4gYW5kIHJlbWFpblxuICogIHBpbm5lZCB1bnRpbCBwdXNoZWQgb24gb3Igb2ZmIHNjcmVlbiBieSB0aGUgbmV4dCBzdWJoZWFkZXIuIEBzZWUgW01hdGVyaWFsXG4gKiAgRGVzaWduIFNwZWNpZmljYXRpb25zXShodHRwczovL3d3dy5nb29nbGUuY29tL2Rlc2lnbi9zcGVjL2NvbXBvbmVudHMvc3ViaGVhZGVycy5odG1sKVxuICpcbiAqICA+IFRvIGltcHJvdmUgdGhlIHZpc3VhbCBncm91cGluZyBvZiBjb250ZW50LCB1c2UgdGhlIHN5c3RlbSBjb2xvciBmb3IgeW91ciBzdWJoZWFkZXJzLlxuICpcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMuc3ViaGVhZGVyJywgW1xuICAnbWF0ZXJpYWwuY29yZScsXG4gICdtYXRlcmlhbC5jb21wb25lbnRzLnN0aWNreSdcbl0pXG4gIC5kaXJlY3RpdmUoJ21kU3ViaGVhZGVyJywgTWRTdWJoZWFkZXJEaXJlY3RpdmUpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG1kU3ViaGVhZGVyXG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMuc3ViaGVhZGVyXG4gKlxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgPG1kLXN1YmhlYWRlcj5gIGRpcmVjdGl2ZSBpcyBhIHN1YmhlYWRlciBmb3IgYSBzZWN0aW9uLiBCeSBkZWZhdWx0IGl0IGlzIHN0aWNreS5cbiAqIFlvdSBjYW4gbWFrZSBpdCBub3Qgc3RpY2t5IGJ5IGFwcGx5aW5nIHRoZSBgbWQtbm8tc3RpY2t5YCBjbGFzcyB0byB0aGUgc3ViaGVhZGVyLlxuICpcbiAqXG4gKiBAdXNhZ2VcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8bWQtc3ViaGVhZGVyPk9ubGluZSBGcmllbmRzPC9tZC1zdWJoZWFkZXI+XG4gKiA8L2hsanM+XG4gKi9cblxuZnVuY3Rpb24gTWRTdWJoZWFkZXJEaXJlY3RpdmUoJG1kU3RpY2t5LCAkY29tcGlsZSwgJG1kVGhlbWluZykge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHRlbXBsYXRlOiBcbiAgICAgICc8aDIgY2xhc3M9XCJtZC1zdWJoZWFkZXJcIj4nICtcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJtZC1zdWJoZWFkZXItaW5uZXJcIj4nICtcbiAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJtZC1zdWJoZWFkZXItY29udGVudFwiPjwvc3Bhbj4nICtcbiAgICAgICAgJzwvZGl2PicgK1xuICAgICAgJzwvaDI+JyxcbiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyLCB0cmFuc2NsdWRlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgJG1kVGhlbWluZyhlbGVtZW50KTtcbiAgICAgICAgdmFyIG91dGVySFRNTCA9IGVsZW1lbnRbMF0ub3V0ZXJIVE1MO1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldENvbnRlbnQoZWwpIHtcbiAgICAgICAgICByZXR1cm4gYW5ndWxhci5lbGVtZW50KGVsWzBdLnF1ZXJ5U2VsZWN0b3IoJy5tZC1zdWJoZWFkZXItY29udGVudCcpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyYW5zY2x1ZGUgdGhlIHVzZXItZ2l2ZW4gY29udGVudHMgb2YgdGhlIHN1YmhlYWRlclxuICAgICAgICAvLyB0aGUgY29udmVudGlvbmFsIHdheS5cbiAgICAgICAgdHJhbnNjbHVkZShzY29wZSwgZnVuY3Rpb24oY2xvbmUpIHtcbiAgICAgICAgICBnZXRDb250ZW50KGVsZW1lbnQpLmFwcGVuZChjbG9uZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIENyZWF0ZSBhbm90aGVyIGNsb25lLCB0aGF0IHVzZXMgdGhlIG91dGVyIGFuZCBpbm5lciBjb250ZW50c1xuICAgICAgICAvLyBvZiB0aGUgZWxlbWVudCwgdGhhdCB3aWxsIGJlICdzdGlja2llZCcgYXMgdGhlIHVzZXIgc2Nyb2xscy5cbiAgICAgICAgaWYgKCFlbGVtZW50Lmhhc0NsYXNzKCdtZC1uby1zdGlja3knKSkge1xuICAgICAgICAgIHRyYW5zY2x1ZGUoc2NvcGUsIGZ1bmN0aW9uKGNsb25lKSB7XG4gICAgICAgICAgICB2YXIgc3RpY2t5Q2xvbmUgPSAkY29tcGlsZShhbmd1bGFyLmVsZW1lbnQob3V0ZXJIVE1MKSkoc2NvcGUpO1xuICAgICAgICAgICAgZ2V0Q29udGVudChzdGlja3lDbG9uZSkuYXBwZW5kKGNsb25lKTtcbiAgICAgICAgICAgICRtZFN0aWNreShzY29wZSwgZWxlbWVudCwgc3RpY2t5Q2xvbmUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cbk1kU3ViaGVhZGVyRGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkbWRTdGlja3lcIiwgXCIkY29tcGlsZVwiLCBcIiRtZFRoZW1pbmdcIl07XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG4vKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy5zdGlja3lcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFN0aWNreSBlZmZlY3RzIGZvciBtZFxuICovXG5cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLnN0aWNreScsIFtcbiAgJ21hdGVyaWFsLmNvcmUnLFxuICAnbWF0ZXJpYWwuY29tcG9uZW50cy5jb250ZW50J1xuXSlcbiAgLmZhY3RvcnkoJyRtZFN0aWNreScsIE1kU3RpY2t5KTtcblxuLypcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkbWRTdGlja3lcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5zdGlja3lcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgJG1kU3RpY2t5YHNlcnZpY2UgcHJvdmlkZXMgYSBtaXhpbiB0byBtYWtlIGVsZW1lbnRzIHN0aWNreS5cbiAqXG4gKiBAcmV0dXJucyBBIGAkbWRTdGlja3lgIGZ1bmN0aW9uIHRoYXQgdGFrZXMgdGhyZWUgYXJndW1lbnRzOlxuICogICAtIGBzY29wZWBcbiAqICAgLSBgZWxlbWVudGA6IFRoZSBlbGVtZW50IHRoYXQgd2lsbCBiZSAnc3RpY2t5J1xuICogICAtIGBlbGVtZW50Q2xvbmVgOiBBIGNsb25lIG9mIHRoZSBlbGVtZW50LCB0aGF0IHdpbGwgYmUgc2hvd25cbiAqICAgICB3aGVuIHRoZSB1c2VyIHN0YXJ0cyBzY3JvbGxpbmcgcGFzdCB0aGUgb3JpZ2luYWwgZWxlbWVudC5cbiAqICAgICBJZiBub3QgcHJvdmlkZWQsIGl0IHdpbGwgdXNlIHRoZSByZXN1bHQgb2YgYGVsZW1lbnQuY2xvbmUoKWAuXG4gKi9cblxuZnVuY3Rpb24gTWRTdGlja3koJGRvY3VtZW50LCAkbWRDb25zdGFudCwgJGNvbXBpbGUsICQkckFGLCAkbWRVdGlsKSB7XG5cbiAgdmFyIGJyb3dzZXJTdGlja3lTdXBwb3J0ID0gY2hlY2tTdGlja3lTdXBwb3J0KCk7XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhbiBlbGVtZW50IGFzIHN0aWNreSwgdXNlZCBpbnRlcm5hbGx5IGJ5IGRpcmVjdGl2ZXMgdG8gcmVnaXN0ZXIgdGhlbXNlbHZlc1xuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uIHJlZ2lzdGVyU3RpY2t5RWxlbWVudChzY29wZSwgZWxlbWVudCwgc3RpY2t5Q2xvbmUpIHtcbiAgICB2YXIgY29udGVudEN0cmwgPSBlbGVtZW50LmNvbnRyb2xsZXIoJ21kQ29udGVudCcpO1xuICAgIGlmICghY29udGVudEN0cmwpIHJldHVybjtcblxuICAgIGlmIChicm93c2VyU3RpY2t5U3VwcG9ydCkge1xuICAgICAgZWxlbWVudC5jc3Moe1xuICAgICAgICBwb3NpdGlvbjogYnJvd3NlclN0aWNreVN1cHBvcnQsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgJ3otaW5kZXgnOiAyXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyICQkc3RpY2t5ID0gY29udGVudEN0cmwuJGVsZW1lbnQuZGF0YSgnJCRzdGlja3knKTtcbiAgICAgIGlmICghJCRzdGlja3kpIHtcbiAgICAgICAgJCRzdGlja3kgPSBzZXR1cFN0aWNreShjb250ZW50Q3RybCk7XG4gICAgICAgIGNvbnRlbnRDdHJsLiRlbGVtZW50LmRhdGEoJyQkc3RpY2t5JywgJCRzdGlja3kpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVyZWdpc3RlciA9ICQkc3RpY2t5LmFkZChlbGVtZW50LCBzdGlja3lDbG9uZSB8fCBlbGVtZW50LmNsb25lKCkpO1xuICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGRlcmVnaXN0ZXIpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBzZXR1cFN0aWNreShjb250ZW50Q3RybCkge1xuICAgIHZhciBjb250ZW50RWwgPSBjb250ZW50Q3RybC4kZWxlbWVudDtcblxuICAgIC8vIFJlZnJlc2ggZWxlbWVudHMgaXMgdmVyeSBleHBlbnNpdmUsIHNvIHdlIHVzZSB0aGUgZGVib3VuY2VkXG4gICAgLy8gdmVyc2lvbiB3aGVuIHBvc3NpYmxlLlxuICAgIHZhciBkZWJvdW5jZWRSZWZyZXNoRWxlbWVudHMgPSAkJHJBRi50aHJvdHRsZShyZWZyZXNoRWxlbWVudHMpO1xuXG4gICAgLy8gc2V0dXBBdWdtZW50ZWRTY3JvbGxFdmVudHMgZ2l2ZXMgdXMgYCRzY3JvbGxzdGFydGAgYW5kIGAkc2Nyb2xsYCxcbiAgICAvLyBtb3JlIHJlbGlhYmxlIHRoYW4gYHNjcm9sbGAgb24gYW5kcm9pZC5cbiAgICBzZXR1cEF1Z21lbnRlZFNjcm9sbEV2ZW50cyhjb250ZW50RWwpO1xuICAgIGNvbnRlbnRFbC5vbignJHNjcm9sbHN0YXJ0JywgZGVib3VuY2VkUmVmcmVzaEVsZW1lbnRzKTtcbiAgICBjb250ZW50RWwub24oJyRzY3JvbGwnLCBvblNjcm9sbCk7XG5cbiAgICB2YXIgc2VsZjtcbiAgICB2YXIgc3RpY2t5QmFzZW9mZnNldCA9IGNvbnRlbnRFbC5wcm9wKCdvZmZzZXRUb3AnKTtcbiAgICByZXR1cm4gc2VsZiA9IHtcbiAgICAgIHByZXY6IG51bGwsXG4gICAgICBjdXJyZW50OiBudWxsLCAvL3RoZSBjdXJyZW50bHkgc3RpY2tpZWQgaXRlbVxuICAgICAgbmV4dDogbnVsbCxcbiAgICAgIGl0ZW1zOiBbXSxcbiAgICAgIGFkZDogYWRkLFxuICAgICAgcmVmcmVzaEVsZW1lbnRzOiByZWZyZXNoRWxlbWVudHNcbiAgICB9O1xuXG4gICAgLyoqKioqKioqKioqKioqKlxuICAgICAqIFB1YmxpY1xuICAgICAqKioqKioqKioqKioqKiovXG4gICAgLy8gQWRkIGFuIGVsZW1lbnQgYW5kIGl0cyBzdGlja3kgY2xvbmUgdG8gdGhpcyBjb250ZW50J3Mgc3RpY2t5IGNvbGxlY3Rpb25cbiAgICBmdW5jdGlvbiBhZGQoZWxlbWVudCwgc3RpY2t5Q2xvbmUpIHtcbiAgICAgIHN0aWNreUNsb25lLmFkZENsYXNzKCdtZC1zdGlja3ktY2xvbmUnKTtcbiAgICAgIHN0aWNreUNsb25lLmNzcygndG9wJywgc3RpY2t5QmFzZW9mZnNldCArICdweCcpO1xuXG4gICAgICB2YXIgaXRlbSA9IHtcbiAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgY2xvbmU6IHN0aWNreUNsb25lXG4gICAgICB9O1xuICAgICAgc2VsZi5pdGVtcy5wdXNoKGl0ZW0pO1xuXG4gICAgICBjb250ZW50RWwucGFyZW50KCkucHJlcGVuZChpdGVtLmNsb25lKTtcblxuICAgICAgZGVib3VuY2VkUmVmcmVzaEVsZW1lbnRzKCk7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgIHNlbGYuaXRlbXMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICAgIGlmIChpdGVtLmVsZW1lbnRbMF0gPT09IGVsZW1lbnRbMF0pIHtcbiAgICAgICAgICAgIHNlbGYuaXRlbXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIGl0ZW0uY2xvbmUucmVtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZGVib3VuY2VkUmVmcmVzaEVsZW1lbnRzKCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZnJlc2hFbGVtZW50cygpIHtcbiAgICAgIC8vIFNvcnQgb3VyIGNvbGxlY3Rpb24gb2YgZWxlbWVudHMgYnkgdGhlaXIgY3VycmVudCBwb3NpdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgLy8gV2UgbmVlZCB0byBkbyB0aGlzIGJlY2F1c2Ugb3VyIGVsZW1lbnRzJyBvcmRlciBvZiBiZWluZyBhZGRlZCBtYXkgbm90XG4gICAgICAvLyBiZSB0aGUgc2FtZSBhcyB0aGVpciBvcmRlciBvZiBkaXNwbGF5LlxuICAgICAgc2VsZi5pdGVtcy5mb3JFYWNoKHJlZnJlc2hQb3NpdGlvbik7XG4gICAgICBzZWxmLml0ZW1zID0gc2VsZi5pdGVtcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEudG9wIDwgYi50b3AgPyAtMSA6IDE7XG4gICAgICB9KTtcblxuICAgICAgLy8gRmluZCB3aGljaCBpdGVtIGluIHRoZSBsaXN0IHNob3VsZCBiZSBhY3RpdmUsIFxuICAgICAgLy8gYmFzZWQgdXBvbiB0aGUgY29udGVudCdzIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uXG4gICAgICB2YXIgaXRlbTtcbiAgICAgIHZhciBjdXJyZW50U2Nyb2xsVG9wID0gY29udGVudEVsLnByb3AoJ3Njcm9sbFRvcCcpO1xuICAgICAgZm9yICh2YXIgaSA9IHNlbGYuaXRlbXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgaWYgKGN1cnJlbnRTY3JvbGxUb3AgPiBzZWxmLml0ZW1zW2ldLnRvcCkge1xuICAgICAgICAgIGl0ZW0gPSBzZWxmLml0ZW1zW2ldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzZXRDdXJyZW50SXRlbShpdGVtKTtcbiAgICB9XG5cblxuICAgIC8qKioqKioqKioqKioqKipcbiAgICAgKiBQcml2YXRlXG4gICAgICoqKioqKioqKioqKioqKi9cblxuICAgIC8vIEZpbmQgdGhlIGB0b3BgIG9mIGFuIGl0ZW0gcmVsYXRpdmUgdG8gdGhlIGNvbnRlbnQgZWxlbWVudCxcbiAgICAvLyBhbmQgYWxzbyB0aGUgaGVpZ2h0LlxuICAgIGZ1bmN0aW9uIHJlZnJlc2hQb3NpdGlvbihpdGVtKSB7XG4gICAgICAvLyBGaW5kIHRoZSB0b3Agb2YgYW4gaXRlbSBieSBhZGRpbmcgdG8gdGhlIG9mZnNldEhlaWdodCB1bnRpbCB3ZSByZWFjaCB0aGUgXG4gICAgICAvLyBjb250ZW50IGVsZW1lbnQuXG4gICAgICB2YXIgY3VycmVudCA9IGl0ZW0uZWxlbWVudFswXTtcbiAgICAgIGl0ZW0udG9wID0gMDtcbiAgICAgIGl0ZW0ubGVmdCA9IDA7XG4gICAgICB3aGlsZSAoY3VycmVudCAmJiBjdXJyZW50ICE9PSBjb250ZW50RWxbMF0pIHtcbiAgICAgICAgaXRlbS50b3AgKz0gY3VycmVudC5vZmZzZXRUb3A7XG4gICAgICAgIGl0ZW0ubGVmdCArPSBjdXJyZW50Lm9mZnNldExlZnQ7XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm9mZnNldFBhcmVudDtcbiAgICAgIH1cbiAgICAgIGl0ZW0uaGVpZ2h0ID0gaXRlbS5lbGVtZW50LnByb3AoJ29mZnNldEhlaWdodCcpO1xuICAgICAgaXRlbS5jbG9uZS5jc3MoJ21hcmdpbi1sZWZ0JywgaXRlbS5sZWZ0ICsgJ3B4Jyk7XG4gICAgICBpZiAoJG1kVXRpbC5mbG9hdGluZ1Njcm9sbGJhcnMoKSkge1xuICAgICAgICBpdGVtLmNsb25lLmNzcygnbWFyZ2luLXJpZ2h0JywgJzAnKTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIEFzIHdlIHNjcm9sbCwgcHVzaCBpbiBhbmQgc2VsZWN0IHRoZSBjb3JyZWN0IHN0aWNreSBlbGVtZW50LlxuICAgIGZ1bmN0aW9uIG9uU2Nyb2xsKCkge1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IGNvbnRlbnRFbC5wcm9wKCdzY3JvbGxUb3AnKTtcbiAgICAgIHZhciBpc1Njcm9sbGluZ0Rvd24gPSBzY3JvbGxUb3AgPiAob25TY3JvbGwucHJldlNjcm9sbFRvcCB8fCAwKTtcbiAgICAgIG9uU2Nyb2xsLnByZXZTY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG5cbiAgICAgIC8vIEF0IHRoZSB0b3A/XG4gICAgICBpZiAoc2Nyb2xsVG9wID09PSAwKSB7XG4gICAgICAgIHNldEN1cnJlbnRJdGVtKG51bGwpO1xuXG4gICAgICAvLyBHb2luZyB0byBuZXh0IGl0ZW0/XG4gICAgICB9IGVsc2UgaWYgKGlzU2Nyb2xsaW5nRG93biAmJiBzZWxmLm5leHQpIHtcbiAgICAgICAgaWYgKHNlbGYubmV4dC50b3AgLSBzY3JvbGxUb3AgPD0gMCkge1xuICAgICAgICAgIC8vIFN0aWNreSB0aGUgbmV4dCBpdGVtIGlmIHdlJ3ZlIHNjcm9sbGVkIHBhc3QgaXRzIHBvc2l0aW9uLlxuICAgICAgICAgIHNldEN1cnJlbnRJdGVtKHNlbGYubmV4dCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZi5jdXJyZW50KSB7XG4gICAgICAgICAgLy8gUHVzaCB0aGUgY3VycmVudCBpdGVtIHVwIHdoZW4gd2UncmUgYWxtb3N0IGF0IHRoZSBuZXh0IGl0ZW0uXG4gICAgICAgICAgaWYgKHNlbGYubmV4dC50b3AgLSBzY3JvbGxUb3AgPD0gc2VsZi5uZXh0LmhlaWdodCkge1xuICAgICAgICAgICAgdHJhbnNsYXRlKHNlbGYuY3VycmVudCwgc2VsZi5uZXh0LnRvcCAtIHNlbGYubmV4dC5oZWlnaHQgLSBzY3JvbGxUb3ApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmFuc2xhdGUoc2VsZi5jdXJyZW50LCBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAvLyBTY3JvbGxpbmcgdXAgd2l0aCBhIGN1cnJlbnQgc3RpY2t5IGl0ZW0/XG4gICAgICB9IGVsc2UgaWYgKCFpc1Njcm9sbGluZ0Rvd24gJiYgc2VsZi5jdXJyZW50KSB7XG4gICAgICAgIGlmIChzY3JvbGxUb3AgPCBzZWxmLmN1cnJlbnQudG9wKSB7XG4gICAgICAgICAgLy8gU3RpY2t5IHRoZSBwcmV2aW91cyBpdGVtIGlmIHdlJ3ZlIHNjcm9sbGVkIHVwIHBhc3RcbiAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnRseSBzdGlja2llZCBpdGVtLlxuICAgICAgICAgIHNldEN1cnJlbnRJdGVtKHNlbGYucHJldik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2Nyb2xsaW5nIHVwLCBhbmQganVzdCBidW1waW5nIGludG8gdGhlIGl0ZW0gYWJvdmUgKGp1c3Qgc2V0IHRvIGN1cnJlbnQpP1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgbmV4dCBpdGVtIGJ1bXBpbmcgaW50byB0aGUgY3VycmVudCBpdGVtLCB0cmFuc2xhdGVcbiAgICAgICAgLy8gdGhlIGN1cnJlbnQgaXRlbSB1cCBmcm9tIHRoZSB0b3AgYXMgaXQgc2Nyb2xscyBpbnRvIHZpZXcuXG4gICAgICAgIGlmIChzZWxmLmN1cnJlbnQgJiYgc2VsZi5uZXh0KSB7XG4gICAgICAgICAgaWYgKHNjcm9sbFRvcCA+PSBzZWxmLm5leHQudG9wIC0gc2VsZi5jdXJyZW50LmhlaWdodCkge1xuICAgICAgICAgICAgdHJhbnNsYXRlKHNlbGYuY3VycmVudCwgc2VsZi5uZXh0LnRvcCAtIHNjcm9sbFRvcCAtIHNlbGYuY3VycmVudC5oZWlnaHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmFuc2xhdGUoc2VsZi5jdXJyZW50LCBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgIFxuICAgZnVuY3Rpb24gc2V0Q3VycmVudEl0ZW0oaXRlbSkge1xuICAgICBpZiAoc2VsZi5jdXJyZW50ID09PSBpdGVtKSByZXR1cm47XG4gICAgIC8vIERlYWN0aXZhdGUgY3VycmVudGx5IGFjdGl2ZSBpdGVtXG4gICAgIGlmIChzZWxmLmN1cnJlbnQpIHtcbiAgICAgICB0cmFuc2xhdGUoc2VsZi5jdXJyZW50LCBudWxsKTtcbiAgICAgICBzZXRTdGlja3lTdGF0ZShzZWxmLmN1cnJlbnQsIG51bGwpO1xuICAgICB9XG5cbiAgICAgLy8gQWN0aXZhdGUgbmV3IGl0ZW0gaWYgZ2l2ZW5cbiAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICBzZXRTdGlja3lTdGF0ZShpdGVtLCAnYWN0aXZlJyk7XG4gICAgIH1cblxuICAgICBzZWxmLmN1cnJlbnQgPSBpdGVtO1xuICAgICB2YXIgaW5kZXggPSBzZWxmLml0ZW1zLmluZGV4T2YoaXRlbSk7XG4gICAgIC8vIElmIGluZGV4ID09PSAtMSwgaW5kZXggKyAxID0gMC4gSXQgd29ya3Mgb3V0LlxuICAgICBzZWxmLm5leHQgPSBzZWxmLml0ZW1zW2luZGV4ICsgMV07XG4gICAgIHNlbGYucHJldiA9IHNlbGYuaXRlbXNbaW5kZXggLSAxXTtcbiAgICAgc2V0U3RpY2t5U3RhdGUoc2VsZi5uZXh0LCAnbmV4dCcpO1xuICAgICBzZXRTdGlja3lTdGF0ZShzZWxmLnByZXYsICdwcmV2Jyk7XG4gICB9XG5cbiAgIGZ1bmN0aW9uIHNldFN0aWNreVN0YXRlKGl0ZW0sIHN0YXRlKSB7XG4gICAgIGlmICghaXRlbSB8fCBpdGVtLnN0YXRlID09PSBzdGF0ZSkgcmV0dXJuO1xuICAgICBpZiAoaXRlbS5zdGF0ZSkge1xuICAgICAgIGl0ZW0uY2xvbmUuYXR0cignc3RpY2t5LXByZXYtc3RhdGUnLCBpdGVtLnN0YXRlKTtcbiAgICAgICBpdGVtLmVsZW1lbnQuYXR0cignc3RpY2t5LXByZXYtc3RhdGUnLCBpdGVtLnN0YXRlKTtcbiAgICAgfVxuICAgICBpdGVtLmNsb25lLmF0dHIoJ3N0aWNreS1zdGF0ZScsIHN0YXRlKTtcbiAgICAgaXRlbS5lbGVtZW50LmF0dHIoJ3N0aWNreS1zdGF0ZScsIHN0YXRlKTtcbiAgICAgaXRlbS5zdGF0ZSA9IHN0YXRlO1xuICAgfVxuXG4gICBmdW5jdGlvbiB0cmFuc2xhdGUoaXRlbSwgYW1vdW50KSB7XG4gICAgIGlmICghaXRlbSkgcmV0dXJuO1xuICAgICBpZiAoYW1vdW50ID09PSBudWxsIHx8IGFtb3VudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgaWYgKGl0ZW0udHJhbnNsYXRlWSkge1xuICAgICAgICAgaXRlbS50cmFuc2xhdGVZID0gbnVsbDtcbiAgICAgICAgIGl0ZW0uY2xvbmUuY3NzKCRtZENvbnN0YW50LkNTUy5UUkFOU0ZPUk0sICcnKTtcbiAgICAgICB9XG4gICAgIH0gZWxzZSB7XG4gICAgICAgaXRlbS50cmFuc2xhdGVZID0gYW1vdW50O1xuICAgICAgIGl0ZW0uY2xvbmUuY3NzKFxuICAgICAgICAgJG1kQ29uc3RhbnQuQ1NTLlRSQU5TRk9STSwgXG4gICAgICAgICAndHJhbnNsYXRlM2QoJyArIGl0ZW0ubGVmdCArICdweCwnICsgYW1vdW50ICsgJ3B4LDApJ1xuICAgICAgICk7XG4gICAgIH1cbiAgIH1cbiAgfVxuXG4gIC8vIEZ1bmN0aW9uIHRvIGNoZWNrIGZvciBicm93c2VyIHN0aWNreSBzdXBwb3J0XG4gIGZ1bmN0aW9uIGNoZWNrU3RpY2t5U3VwcG9ydCgkZWwpIHtcbiAgICB2YXIgc3RpY2t5UHJvcDtcbiAgICB2YXIgdGVzdEVsID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2PicpO1xuICAgICRkb2N1bWVudFswXS5ib2R5LmFwcGVuZENoaWxkKHRlc3RFbFswXSk7XG5cbiAgICB2YXIgc3RpY2t5UHJvcHMgPSBbJ3N0aWNreScsICctd2Via2l0LXN0aWNreSddO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RpY2t5UHJvcHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHRlc3RFbC5jc3Moe3Bvc2l0aW9uOiBzdGlja3lQcm9wc1tpXSwgdG9wOiAwLCAnei1pbmRleCc6IDJ9KTtcbiAgICAgIGlmICh0ZXN0RWwuY3NzKCdwb3NpdGlvbicpID09IHN0aWNreVByb3BzW2ldKSB7XG4gICAgICAgIHN0aWNreVByb3AgPSBzdGlja3lQcm9wc1tpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHRlc3RFbC5yZW1vdmUoKTtcbiAgICByZXR1cm4gc3RpY2t5UHJvcDtcbiAgfVxuXG4gIC8vIEFuZHJvaWQgNC40IGRvbid0IGFjY3VyYXRlbHkgZ2l2ZSBzY3JvbGwgZXZlbnRzLlxuICAvLyBUbyBmaXggdGhpcyBwcm9ibGVtLCB3ZSBzZXR1cCBhIGZha2Ugc2Nyb2xsIGV2ZW50LiBXZSBzYXk6XG4gIC8vID4gSWYgYSBzY3JvbGwgb3IgdG91Y2htb3ZlIGV2ZW50IGhhcyBoYXBwZW5lZCBpbiB0aGUgbGFzdCBERUxBWSBtaWxsaXNlY29uZHMsIFxuICAvLyAgIHRoZW4gc2VuZCBhIGAkc2Nyb2xsYCBldmVudCBldmVyeSBhbmltYXRpb25GcmFtZS5cbiAgLy8gQWRkaXRpb25hbGx5LCB3ZSBhZGQgJHNjcm9sbHN0YXJ0IGFuZCAkc2Nyb2xsZW5kIGV2ZW50cy5cbiAgZnVuY3Rpb24gc2V0dXBBdWdtZW50ZWRTY3JvbGxFdmVudHMoZWxlbWVudCkge1xuICAgIHZhciBTQ1JPTExfRU5EX0RFTEFZID0gMjAwO1xuICAgIHZhciBpc1Njcm9sbGluZztcbiAgICB2YXIgbGFzdFNjcm9sbFRpbWU7XG4gICAgZWxlbWVudC5vbignc2Nyb2xsIHRvdWNobW92ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFpc1Njcm9sbGluZykge1xuICAgICAgICBpc1Njcm9sbGluZyA9IHRydWU7XG4gICAgICAgICQkckFGKGxvb3BTY3JvbGxFdmVudCk7XG4gICAgICAgIGVsZW1lbnQudHJpZ2dlckhhbmRsZXIoJyRzY3JvbGxzdGFydCcpO1xuICAgICAgfVxuICAgICAgZWxlbWVudC50cmlnZ2VySGFuZGxlcignJHNjcm9sbCcpO1xuICAgICAgbGFzdFNjcm9sbFRpbWUgPSArJG1kVXRpbC5ub3coKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGxvb3BTY3JvbGxFdmVudCgpIHtcbiAgICAgIGlmICgrJG1kVXRpbC5ub3coKSAtIGxhc3RTY3JvbGxUaW1lID4gU0NST0xMX0VORF9ERUxBWSkge1xuICAgICAgICBpc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgICAgICBlbGVtZW50LnRyaWdnZXJIYW5kbGVyKCckc2Nyb2xsZW5kJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnRyaWdnZXJIYW5kbGVyKCckc2Nyb2xsJyk7XG4gICAgICAgICQkckFGKGxvb3BTY3JvbGxFdmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn1cbk1kU3RpY2t5LiRpbmplY3QgPSBbXCIkZG9jdW1lbnRcIiwgXCIkbWRDb25zdGFudFwiLCBcIiRjb21waWxlXCIsIFwiJCRyQUZcIiwgXCIkbWRVdGlsXCJdO1xuXG59KSgpO1xuKGZ1bmN0aW9uKCl7XG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBtYXRlcmlhbC5jb21wb25lbnRzLnN3aXBlXG4gKiBAZGVzY3JpcHRpb24gU3dpcGUgbW9kdWxlIVxuICovXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5zd2lwZVxuICogQG5hbWUgbWRTd2lwZUxlZnRcbiAqXG4gKiBAcmVzdHJpY3QgQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIG1kLXN3aXBlLWxlZnQgZGlyZWN0aXZlcyBhbGxvd3MgeW91IHRvIHNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIHdoZW4gYW4gZWxlbWVudCBpcyBzd2lwZWRcbiAqIGxlZnQuXG4gKlxuICogQHVzYWdlXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogPGRpdiBtZC1zd2lwZS1sZWZ0PVwib25Td2lwZUxlZnQoKVwiPlN3aXBlIG1lIGxlZnQhPC9kaXY+XG4gKiA8L2hsanM+XG4gKi9cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLnN3aXBlXG4gKiBAbmFtZSBtZFN3aXBlUmlnaHRcbiAqXG4gKiBAcmVzdHJpY3QgQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIG1kLXN3aXBlLXJpZ2h0IGRpcmVjdGl2ZXMgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciB3aGVuIGFuIGVsZW1lbnQgaXMgc3dpcGVkXG4gKiByaWdodC5cbiAqXG4gKiBAdXNhZ2VcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8ZGl2IG1kLXN3aXBlLXJpZ2h0PVwib25Td2lwZVJpZ2h0KClcIj5Td2lwZSBtZSByaWdodCE8L2Rpdj5cbiAqIDwvaGxqcz5cbiAqL1xuXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5zd2lwZScsIFsnbWF0ZXJpYWwuY29yZSddKVxuICAgIC5kaXJlY3RpdmUoJ21kU3dpcGVMZWZ0JywgZ2V0RGlyZWN0aXZlKCdTd2lwZUxlZnQnKSlcbiAgICAuZGlyZWN0aXZlKCdtZFN3aXBlUmlnaHQnLCBnZXREaXJlY3RpdmUoJ1N3aXBlUmlnaHQnKSk7XG5cbmZ1bmN0aW9uIGdldERpcmVjdGl2ZShuYW1lKSB7XG4gIHZhciBkaXJlY3RpdmVOYW1lID0gJ21kJyArIG5hbWU7XG4gIHZhciBldmVudE5hbWUgPSAnJG1kLicgKyBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBEaXJlY3RpdmVGYWN0b3J5LiRpbmplY3QgPSBbXCIkcGFyc2VcIl07XG4gIHJldHVybiBEaXJlY3RpdmVGYWN0b3J5O1xuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBEaXJlY3RpdmVGYWN0b3J5KCRwYXJzZSkge1xuICAgICAgcmV0dXJuIHsgcmVzdHJpY3Q6ICdBJywgbGluazogcG9zdExpbmsgfTtcbiAgICAgIGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIHZhciBmbiA9ICRwYXJzZShhdHRyW2RpcmVjdGl2ZU5hbWVdKTtcbiAgICAgICAgZWxlbWVudC5vbihldmVudE5hbWUsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkgeyBmbihzY29wZSwgeyAkZXZlbnQ6IGV2IH0pOyB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxufVxuXG5cblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG1hdGVyaWFsLmNvbXBvbmVudHMuc3dpdGNoXG4gKi9cblxuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMuc3dpdGNoJywgW1xuICAnbWF0ZXJpYWwuY29yZScsXG4gICdtYXRlcmlhbC5jb21wb25lbnRzLmNoZWNrYm94J1xuXSlcbiAgLmRpcmVjdGl2ZSgnbWRTd2l0Y2gnLCBNZFN3aXRjaCk7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5zd2l0Y2hcbiAqIEBuYW1lIG1kU3dpdGNoXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIFRoZSBzd2l0Y2ggZGlyZWN0aXZlIGlzIHVzZWQgdmVyeSBtdWNoIGxpa2UgdGhlIG5vcm1hbCBbYW5ndWxhciBjaGVja2JveF0oaHR0cHM6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nL2lucHV0L2lucHV0JTVCY2hlY2tib3glNUQpLlxuICpcbiAqIEFzIHBlciB0aGUgW21hdGVyaWFsIGRlc2lnbiBzcGVjXShodHRwOi8vd3d3Lmdvb2dsZS5jb20vZGVzaWduL3NwZWMvc3R5bGUvY29sb3IuaHRtbCNjb2xvci11aS1jb2xvci1hcHBsaWNhdGlvbilcbiAqIHRoZSBzd2l0Y2ggaXMgaW4gdGhlIGFjY2VudCBjb2xvciBieSBkZWZhdWx0LiBUaGUgcHJpbWFyeSBjb2xvciBwYWxldHRlIG1heSBiZSB1c2VkIHdpdGhcbiAqIHRoZSBgbWQtcHJpbWFyeWAgY2xhc3MuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nLW1vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG5nLXRydWUtdmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBzZXQgd2hlbiBzZWxlY3RlZC5cbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG5nLWZhbHNlLXZhbHVlIFRoZSB2YWx1ZSB0byB3aGljaCB0aGUgZXhwcmVzc2lvbiBzaG91bGQgYmUgc2V0IHdoZW4gbm90IHNlbGVjdGVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZy1jaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlciBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICogQHBhcmFtIHtib29sZWFuPX0gbWQtbm8taW5rIFVzZSBvZiBhdHRyaWJ1dGUgaW5kaWNhdGVzIHVzZSBvZiByaXBwbGUgaW5rIGVmZmVjdHMuXG4gKiBAcGFyYW0ge3N0cmluZz19IGFyaWEtbGFiZWwgUHVibGlzaCB0aGUgYnV0dG9uIGxhYmVsIHVzZWQgYnkgc2NyZWVuLXJlYWRlcnMgZm9yIGFjY2Vzc2liaWxpdHkuIERlZmF1bHRzIHRvIHRoZSBzd2l0Y2gncyB0ZXh0LlxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC1zd2l0Y2ggbmctbW9kZWw9XCJpc0FjdGl2ZVwiIGFyaWEtbGFiZWw9XCJGaW5pc2hlZD9cIj5cbiAqICAgRmluaXNoZWQgP1xuICogPC9tZC1zd2l0Y2g+XG4gKlxuICogPG1kLXN3aXRjaCBtZC1uby1pbmsgbmctbW9kZWw9XCJoYXNJbmtcIiBhcmlhLWxhYmVsPVwiTm8gSW5rIEVmZmVjdHNcIj5cbiAqICAgTm8gSW5rIEVmZmVjdHNcbiAqIDwvbWQtc3dpdGNoPlxuICpcbiAqIDxtZC1zd2l0Y2ggbmctZGlzYWJsZWQ9XCJ0cnVlXCIgbmctbW9kZWw9XCJpc0Rpc2FibGVkXCIgYXJpYS1sYWJlbD1cIkRpc2FibGVkXCI+XG4gKiAgIERpc2FibGVkXG4gKiA8L21kLXN3aXRjaD5cbiAqXG4gKiA8L2hsanM+XG4gKi9cbmZ1bmN0aW9uIE1kU3dpdGNoKG1kQ2hlY2tib3hEaXJlY3RpdmUsICRtZFRoZW1pbmcsICRtZFV0aWwsICRkb2N1bWVudCwgJG1kQ29uc3RhbnQsICRwYXJzZSwgJCRyQUYsICRtZEdlc3R1cmUpIHtcbiAgdmFyIGNoZWNrYm94RGlyZWN0aXZlID0gbWRDaGVja2JveERpcmVjdGl2ZVswXTtcblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgcHJpb3JpdHk6MjEwLCAvLyBSdW4gYmVmb3JlIG5nQXJpYVxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgdGVtcGxhdGU6XG4gICAgICAnPGRpdiBjbGFzcz1cIm1kLWNvbnRhaW5lclwiPicgK1xuICAgICAgICAnPGRpdiBjbGFzcz1cIm1kLWJhclwiPjwvZGl2PicgK1xuICAgICAgICAnPGRpdiBjbGFzcz1cIm1kLXRodW1iLWNvbnRhaW5lclwiPicgK1xuICAgICAgICAgICc8ZGl2IGNsYXNzPVwibWQtdGh1bWJcIiBtZC1pbmstcmlwcGxlIG1kLWluay1yaXBwbGUtY2hlY2tib3g+PC9kaXY+JyArXG4gICAgICAgICc8L2Rpdj4nK1xuICAgICAgJzwvZGl2PicgK1xuICAgICAgJzxkaXYgbmctdHJhbnNjbHVkZSBjbGFzcz1cIm1kLWxhYmVsXCI+JyArXG4gICAgICAnPC9kaXY+JyxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIGNvbXBpbGU6IGNvbXBpbGVcbiAgfTtcblxuICBmdW5jdGlvbiBjb21waWxlKGVsZW1lbnQsIGF0dHIpIHtcbiAgICB2YXIgY2hlY2tib3hMaW5rID0gY2hlY2tib3hEaXJlY3RpdmUuY29tcGlsZShlbGVtZW50LCBhdHRyKTtcbiAgICAvLyBubyB0cmFuc2l0aW9uIG9uIGluaXRpYWwgbG9hZFxuICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ21kLWRyYWdnaW5nJyk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBuZ01vZGVsKSB7XG4gICAgICBuZ01vZGVsID0gbmdNb2RlbCB8fCAkbWRVdGlsLmZha2VOZ01vZGVsKCk7XG4gICAgICB2YXIgZGlzYWJsZWRHZXR0ZXIgPSAkcGFyc2UoYXR0ci5uZ0Rpc2FibGVkKTtcbiAgICAgIHZhciB0aHVtYkNvbnRhaW5lciA9IGFuZ3VsYXIuZWxlbWVudChlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJy5tZC10aHVtYi1jb250YWluZXInKSk7XG4gICAgICB2YXIgc3dpdGNoQ29udGFpbmVyID0gYW5ndWxhci5lbGVtZW50KGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignLm1kLWNvbnRhaW5lcicpKTtcblxuICAgICAgLy8gbm8gdHJhbnNpdGlvbiBvbiBpbml0aWFsIGxvYWRcbiAgICAgICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCdtZC1kcmFnZ2luZycpO1xuICAgICAgfSk7XG5cbiAgICAgIGNoZWNrYm94TGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgbmdNb2RlbCk7XG5cbiAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChhdHRyLm5nRGlzYWJsZWQpKSB7XG4gICAgICAgIHNjb3BlLiR3YXRjaChkaXNhYmxlZEdldHRlciwgZnVuY3Rpb24oaXNEaXNhYmxlZCkge1xuICAgICAgICAgIGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCBpc0Rpc2FibGVkID8gLTEgOiAwKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZXNlIGV2ZW50cyBhcmUgdHJpZ2dlcmVkIGJ5IHNldHVwIGRyYWdcbiAgICAgICRtZEdlc3R1cmUucmVnaXN0ZXIoc3dpdGNoQ29udGFpbmVyLCAnZHJhZycpO1xuICAgICAgc3dpdGNoQ29udGFpbmVyXG4gICAgICAgIC5vbignJG1kLmRyYWdzdGFydCcsIG9uRHJhZ1N0YXJ0KVxuICAgICAgICAub24oJyRtZC5kcmFnJywgb25EcmFnKVxuICAgICAgICAub24oJyRtZC5kcmFnZW5kJywgb25EcmFnRW5kKTtcblxuICAgICAgdmFyIGRyYWc7XG4gICAgICBmdW5jdGlvbiBvbkRyYWdTdGFydChldikge1xuICAgICAgICAvLyBEb24ndCBnbyBpZiBuZy1kaXNhYmxlZD09PXRydWVcbiAgICAgICAgaWYgKGRpc2FibGVkR2V0dGVyKHNjb3BlKSkgcmV0dXJuO1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdtZC1kcmFnZ2luZycpO1xuICAgICAgICBkcmFnID0ge1xuICAgICAgICAgIHdpZHRoOiB0aHVtYkNvbnRhaW5lci5wcm9wKCdvZmZzZXRXaWR0aCcpXG4gICAgICAgIH07XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ3RyYW5zaXRpb24nKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gb25EcmFnKGV2KSB7XG4gICAgICAgIGlmICghZHJhZykgcmV0dXJuO1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZXYuc3JjRXZlbnQgJiYgZXYuc3JjRXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICB2YXIgcGVyY2VudCA9IGV2LnBvaW50ZXIuZGlzdGFuY2VYIC8gZHJhZy53aWR0aDtcblxuICAgICAgICAvL2lmIGNoZWNrZWQsIHN0YXJ0IGZyb20gcmlnaHQuIGVsc2UsIHN0YXJ0IGZyb20gbGVmdFxuICAgICAgICB2YXIgdHJhbnNsYXRlID0gbmdNb2RlbC4kdmlld1ZhbHVlID8gIDEgKyBwZXJjZW50IDogcGVyY2VudDtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBzd2l0Y2ggc3RheXMgaW5zaWRlIGl0cyBib3VuZHMsIDAtMSVcbiAgICAgICAgdHJhbnNsYXRlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgdHJhbnNsYXRlKSk7XG5cbiAgICAgICAgdGh1bWJDb250YWluZXIuY3NzKCRtZENvbnN0YW50LkNTUy5UUkFOU0ZPUk0sICd0cmFuc2xhdGUzZCgnICsgKDEwMCp0cmFuc2xhdGUpICsgJyUsMCwwKScpO1xuICAgICAgICBkcmFnLnRyYW5zbGF0ZSA9IHRyYW5zbGF0ZTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gb25EcmFnRW5kKGV2KSB7XG4gICAgICAgIGlmICghZHJhZykgcmV0dXJuO1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCdtZC1kcmFnZ2luZycpO1xuICAgICAgICB0aHVtYkNvbnRhaW5lci5jc3MoJG1kQ29uc3RhbnQuQ1NTLlRSQU5TRk9STSwgJycpO1xuXG4gICAgICAgIC8vIFdlIGNoYW5nZWQgaWYgdGhlcmUgaXMgbm8gZGlzdGFuY2UgKHRoaXMgaXMgYSBjbGljayBhIGNsaWNrKSxcbiAgICAgICAgLy8gb3IgaWYgdGhlIGRyYWcgZGlzdGFuY2UgaXMgPjUwJSBvZiB0aGUgdG90YWwuXG4gICAgICAgIHZhciBpc0NoYW5nZWQgPSBuZ01vZGVsLiR2aWV3VmFsdWUgPyBkcmFnLnRyYW5zbGF0ZSA8IDAuNSA6IGRyYWcudHJhbnNsYXRlID4gMC41O1xuICAgICAgICBpZiAoaXNDaGFuZ2VkKSB7XG4gICAgICAgICAgYXBwbHlNb2RlbFZhbHVlKCFuZ01vZGVsLiR2aWV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGRyYWcgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhcHBseU1vZGVsVmFsdWUobmV3VmFsdWUpIHtcbiAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5nTW9kZWwuJHNldFZpZXdWYWx1ZShuZXdWYWx1ZSk7XG4gICAgICAgICAgbmdNb2RlbC4kcmVuZGVyKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgfTtcbiAgfVxuXG5cbn1cbk1kU3dpdGNoLiRpbmplY3QgPSBbXCJtZENoZWNrYm94RGlyZWN0aXZlXCIsIFwiJG1kVGhlbWluZ1wiLCBcIiRtZFV0aWxcIiwgXCIkZG9jdW1lbnRcIiwgXCIkbWRDb25zdGFudFwiLCBcIiRwYXJzZVwiLCBcIiQkckFGXCIsIFwiJG1kR2VzdHVyZVwiXTtcblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy50YWJzXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiAgVGFicywgY3JlYXRlZCB3aXRoIHRoZSBgPG1kLXRhYnM+YCBkaXJlY3RpdmUgcHJvdmlkZSAqdGFiYmVkKiBuYXZpZ2F0aW9uIHdpdGggZGlmZmVyZW50IHN0eWxlcy5cbiAqICBUaGUgVGFicyBjb21wb25lbnQgY29uc2lzdHMgb2YgY2xpY2thYmxlIHRhYnMgdGhhdCBhcmUgYWxpZ25lZCBob3Jpem9udGFsbHkgc2lkZS1ieS1zaWRlLlxuICpcbiAqICBGZWF0dXJlcyBpbmNsdWRlIHN1cHBvcnQgZm9yOlxuICpcbiAqICAtIHN0YXRpYyBvciBkeW5hbWljIHRhYnMsXG4gKiAgLSByZXNwb25zaXZlIGRlc2lnbnMsXG4gKiAgLSBhY2Nlc3NpYmlsaXR5IHN1cHBvcnQgKEFSSUEpLFxuICogIC0gdGFiIHBhZ2luYXRpb24sXG4gKiAgLSBleHRlcm5hbCBvciBpbnRlcm5hbCB0YWIgY29udGVudCxcbiAqICAtIGZvY3VzIGluZGljYXRvcnMgYW5kIGFycm93LWtleSBuYXZpZ2F0aW9ucyxcbiAqICAtIHByb2dyYW1tYXRpYyBsb29rdXAgYW5kIGFjY2VzcyB0byB0YWIgY29udHJvbGxlcnMsIGFuZFxuICogIC0gZHluYW1pYyB0cmFuc2l0aW9ucyB0aHJvdWdoIGRpZmZlcmVudCB0YWIgY29udGVudHMuXG4gKlxuICovXG4vKlxuICogQHNlZSBqcyBmb2xkZXIgZm9yIHRhYnMgaW1wbGVtZW50YXRpb25cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMudGFicycsIFtcbiAgJ21hdGVyaWFsLmNvcmUnLFxuICAnbWF0ZXJpYWwuY29tcG9uZW50cy5pY29uJ1xuXSk7XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG1hdGVyaWFsLmNvbXBvbmVudHMudG9hc3RcbiAqIEBkZXNjcmlwdGlvblxuICogVG9hc3RcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMudG9hc3QnLCBbXG4gICdtYXRlcmlhbC5jb3JlJyxcbiAgJ21hdGVyaWFsLmNvbXBvbmVudHMuYnV0dG9uJ1xuXSlcbiAgLmRpcmVjdGl2ZSgnbWRUb2FzdCcsIE1kVG9hc3REaXJlY3RpdmUpXG4gIC5wcm92aWRlcignJG1kVG9hc3QnLCBNZFRvYXN0UHJvdmlkZXIpO1xuXG5mdW5jdGlvbiBNZFRvYXN0RGlyZWN0aXZlKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRSdcbiAgfTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJG1kVG9hc3RcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy50b2FzdFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogYCRtZFRvYXN0YCBpcyBhIHNlcnZpY2UgdG8gYnVpbGQgYSB0b2FzdCBub3RpZmljYXRpb24gb24gYW55IHBvc2l0aW9uXG4gKiBvbiB0aGUgc2NyZWVuIHdpdGggYW4gb3B0aW9uYWwgZHVyYXRpb24sIGFuZCBwcm92aWRlcyBhIHNpbXBsZSBwcm9taXNlIEFQSS5cbiAqXG4gKlxuICogIyMgUmVzdHJpY3Rpb25zIG9uIGN1c3RvbSB0b2FzdHNcbiAqIC0gVGhlIHRvYXN0J3MgdGVtcGxhdGUgbXVzdCBoYXZlIGFuIG91dGVyIGA8bWQtdG9hc3Q+YCBlbGVtZW50LlxuICogLSBGb3IgYSB0b2FzdCBhY3Rpb24sIHVzZSBlbGVtZW50IHdpdGggY2xhc3MgYG1kLWFjdGlvbmAuXG4gKiAtIEFkZCB0aGUgY2xhc3MgYG1kLWNhcHN1bGVgIGZvciBjdXJ2ZWQgY29ybmVycy5cbiAqXG4gKiBAdXNhZ2VcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJNeUNvbnRyb2xsZXJcIj5cbiAqICAgPG1kLWJ1dHRvbiBuZy1jbGljaz1cIm9wZW5Ub2FzdCgpXCI+XG4gKiAgICAgT3BlbiBhIFRvYXN0IVxuICogICA8L21kLWJ1dHRvbj5cbiAqIDwvZGl2PlxuICogPC9obGpzPlxuICpcbiAqIDxobGpzIGxhbmc9XCJqc1wiPlxuICogdmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ25nTWF0ZXJpYWwnXSk7XG4gKiBhcHAuY29udHJvbGxlcignTXlDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkbWRUb2FzdCkge1xuICogICAkc2NvcGUub3BlblRvYXN0ID0gZnVuY3Rpb24oJGV2ZW50KSB7XG4gKiAgICAgJG1kVG9hc3Quc2hvdygkbWRUb2FzdC5zaW1wbGUoKS5jb250ZW50KCdIZWxsbyEnKSk7XG4gKiAgICAgLy8gQ291bGQgYWxzbyBkbyAkbWRUb2FzdC5zaG93U2ltcGxlKCdIZWxsbycpO1xuICogICB9O1xuICogfSk7XG4gKiA8L2hsanM+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkbWRUb2FzdCNzaG93U2ltcGxlXG4gKiBcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVuaWVuY2UgbWV0aG9kIHdoaWNoIGJ1aWxkcyBhbmQgc2hvd3MgYSBzaW1wbGUgdG9hc3QuXG4gKlxuICogQHJldHVybnMge3Byb21pc2V9IEEgcHJvbWlzZSB0aGF0IGNhbiBiZSByZXNvbHZlZCB3aXRoIGAkbWRUb2FzdC5oaWRlKClgIG9yXG4gKiByZWplY3RlZCB3aXRoIGAkbWRUb2FzdC5jYW5jZWwoKWAuXG4gKlxuICovXG5cbiAvKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRtZFRvYXN0I3NpbXBsZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQnVpbGRzIGEgcHJlY29uZmlndXJlZCB0b2FzdC5cbiAqXG4gKiBAcmV0dXJucyB7b2JqfSBhIGAkbWRUb2FzdFByZXNldGAgd2l0aCB0aGUgY2hhaW5hYmxlIGNvbmZpZ3VyYXRpb24gbWV0aG9kczpcbiAqXG4gKiAtICRtZFRvYXN0UHJlc2V0I2NvbnRlbnQoc3RyaW5nKSAtIHNldHMgdG9hc3QgY29udGVudCB0byBzdHJpbmdcbiAqIC0gJG1kVG9hc3RQcmVzZXQjYWN0aW9uKHN0cmluZykgLSBhZGRzIGFuIGFjdGlvbiBidXR0b24sIHdoaWNoIHJlc29sdmVzIHRoZSBwcm9taXNlIHJldHVybmVkIGZyb20gYHNob3coKWAgaWYgY2xpY2tlZC5cbiAqIC0gJG1kVG9hc3RQcmVzZXQjaGlnaGxpZ2h0QWN0aW9uKGJvb2xlYW4pIC0gc2V0cyBhY3Rpb24gYnV0dG9uIHRvIGJlIGhpZ2hsaWdodGVkXG4gKiAtICRtZFRvYXN0UHJlc2V0I2NhcHN1bGUoYm9vbGVhbikgLSBhZGRzICdtZC1jYXBzdWxlJyBjbGFzcyB0byB0aGUgdG9hc3QgKGN1cnZlZCBjb3JuZXJzKVxuICogLSAkbWRUb2FzdFByZXNldCN0aGVtZShib29sZWFuKSAtIHNldHMgdGhlIHRoZW1lIG9uIHRoZSB0b2FzdCB0byB0aGVtZSAoZGVmYXVsdCBpcyBgJG1kVGhlbWluZ1Byb3ZpZGVyYCdzIGRlZmF1bHQgdGhlbWUpXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkbWRUb2FzdCN1cGRhdGVDb250ZW50XG4gKiBcbiAqIEBkZXNjcmlwdGlvblxuICogVXBkYXRlcyB0aGUgY29udGVudCBvZiBhbiBleGlzdGluZyB0b2FzdC4gVXNlZnVsIGZvciB1cGRhdGluZyB0aGluZ3MgbGlrZSBjb3VudHMsIGV0Yy5cbiAqXG4gKi9cblxuIC8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJG1kVG9hc3QjYnVpbGRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYSBjdXN0b20gYCRtZFRvYXN0UHJlc2V0YCB0aGF0IHlvdSBjYW4gY29uZmlndXJlLlxuICpcbiAqIEByZXR1cm5zIHtvYmp9IGEgYCRtZFRvYXN0UHJlc2V0YCB3aXRoIHRoZSBjaGFpbmFibGUgY29uZmlndXJhdGlvbiBtZXRob2RzIGZvciBzaG93cycgb3B0aW9ucyAoc2VlIGJlbG93KS5cbiAqL1xuXG4gLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkbWRUb2FzdCNzaG93XG4gKlxuICogQGRlc2NyaXB0aW9uIFNob3dzIHRoZSB0b2FzdC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc09yUHJlc2V0IEVpdGhlciBwcm92aWRlIGFuIGAkbWRUb2FzdFByZXNldGAgcmV0dXJuZWQgZnJvbSBgc2ltcGxlKClgXG4gKiBhbmQgYGJ1aWxkKClgLCBvciBhbiBvcHRpb25zIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gYHRlbXBsYXRlVXJsYCAtIGB7c3RyaW5nPX1gOiBUaGUgdXJsIG9mIGFuIGh0bWwgdGVtcGxhdGUgZmlsZSB0aGF0IHdpbGxcbiAqICAgICBiZSB1c2VkIGFzIHRoZSBjb250ZW50IG9mIHRoZSB0b2FzdC4gUmVzdHJpY3Rpb25zOiB0aGUgdGVtcGxhdGUgbXVzdFxuICogICAgIGhhdmUgYW4gb3V0ZXIgYG1kLXRvYXN0YCBlbGVtZW50LlxuICogICAtIGB0ZW1wbGF0ZWAgLSBge3N0cmluZz19YDogU2FtZSBhcyB0ZW1wbGF0ZVVybCwgZXhjZXB0IHRoaXMgaXMgYW4gYWN0dWFsXG4gKiAgICAgdGVtcGxhdGUgc3RyaW5nLlxuICogICAtIGBzY29wZWAgLSBge29iamVjdD19YDogdGhlIHNjb3BlIHRvIGxpbmsgdGhlIHRlbXBsYXRlIC8gY29udHJvbGxlciB0by4gSWYgbm9uZSBpcyBzcGVjaWZpZWQsIGl0IHdpbGwgY3JlYXRlIGEgbmV3IGNoaWxkIHNjb3BlLlxuICogICAgIFRoaXMgc2NvcGUgd2lsbCBiZSBkZXN0cm95ZWQgd2hlbiB0aGUgdG9hc3QgaXMgcmVtb3ZlZCB1bmxlc3MgYHByZXNlcnZlU2NvcGVgIGlzIHNldCB0byB0cnVlLlxuICogICAtIGBwcmVzZXJ2ZVNjb3BlYCAtIGB7Ym9vbGVhbj19YDogd2hldGhlciB0byBwcmVzZXJ2ZSB0aGUgc2NvcGUgd2hlbiB0aGUgZWxlbWVudCBpcyByZW1vdmVkLiBEZWZhdWx0IGlzIGZhbHNlXG4gKiAgIC0gYGhpZGVEZWxheWAgLSBge251bWJlcj19YDogSG93IG1hbnkgbWlsbGlzZWNvbmRzIHRoZSB0b2FzdCBzaG91bGQgc3RheVxuICogICAgIGFjdGl2ZSBiZWZvcmUgYXV0b21hdGljYWxseSBjbG9zaW5nLiAgU2V0IHRvIDAgb3IgZmFsc2UgdG8gaGF2ZSB0aGUgdG9hc3Qgc3RheSBvcGVuIHVudGlsXG4gKiAgICAgY2xvc2VkIG1hbnVhbGx5LiBEZWZhdWx0OiAzMDAwLlxuICogICAtIGBwb3NpdGlvbmAgLSBge3N0cmluZz19YDogV2hlcmUgdG8gcGxhY2UgdGhlIHRvYXN0LiBBdmFpbGFibGU6IGFueSBjb21iaW5hdGlvblxuICogICAgIG9mICdib3R0b20nLCAnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnZml0Jy4gRGVmYXVsdDogJ2JvdHRvbSBsZWZ0Jy5cbiAqICAgLSBgY29udHJvbGxlcmAgLSBge3N0cmluZz19YDogVGhlIGNvbnRyb2xsZXIgdG8gYXNzb2NpYXRlIHdpdGggdGhpcyB0b2FzdC5cbiAqICAgICBUaGUgY29udHJvbGxlciB3aWxsIGJlIGluamVjdGVkIHRoZSBsb2NhbCBgJGhpZGVUb2FzdGAsIHdoaWNoIGlzIGEgZnVuY3Rpb25cbiAqICAgICB1c2VkIHRvIGhpZGUgdGhlIHRvYXN0LlxuICogICAtIGBsb2NhbHNgIC0gYHtzdHJpbmc9fWA6IEFuIG9iamVjdCBjb250YWluaW5nIGtleS92YWx1ZSBwYWlycy4gVGhlIGtleXMgd2lsbFxuICogICAgIGJlIHVzZWQgYXMgbmFtZXMgb2YgdmFsdWVzIHRvIGluamVjdCBpbnRvIHRoZSBjb250cm9sbGVyLiBGb3IgZXhhbXBsZSxcbiAqICAgICBgbG9jYWxzOiB7dGhyZWU6IDN9YCB3b3VsZCBpbmplY3QgYHRocmVlYCBpbnRvIHRoZSBjb250cm9sbGVyIHdpdGggdGhlIHZhbHVlXG4gKiAgICAgb2YgMy5cbiAqICAgLSBgYmluZFRvQ29udHJvbGxlcmAgLSBgYm9vbGA6IGJpbmQgdGhlIGxvY2FscyB0byB0aGUgY29udHJvbGxlciwgaW5zdGVhZCBvZiBwYXNzaW5nIHRoZW0gaW4uIFRoZXNlIHZhbHVlcyB3aWxsIG5vdCBiZSBhdmFpbGFibGUgdW50aWwgYWZ0ZXIgaW5pdGlhbGl6YXRpb24uXG4gKiAgIC0gYHJlc29sdmVgIC0gYHtvYmplY3Q9fWA6IFNpbWlsYXIgdG8gbG9jYWxzLCBleGNlcHQgaXQgdGFrZXMgcHJvbWlzZXMgYXMgdmFsdWVzXG4gKiAgICAgYW5kIHRoZSB0b2FzdCB3aWxsIG5vdCBvcGVuIHVudGlsIHRoZSBwcm9taXNlcyByZXNvbHZlLlxuICogICAtIGBjb250cm9sbGVyQXNgIC0gYHtzdHJpbmc9fWA6IEFuIGFsaWFzIHRvIGFzc2lnbiB0aGUgY29udHJvbGxlciB0byBvbiB0aGUgc2NvcGUuXG4gKiAgIC0gYHBhcmVudGAgLSBge2VsZW1lbnQ9fWA6IFRoZSBlbGVtZW50IHRvIGFwcGVuZCB0aGUgdG9hc3QgdG8uIERlZmF1bHRzIHRvIGFwcGVuZGluZ1xuICogICAgIHRvIHRoZSByb290IGVsZW1lbnQgb2YgdGhlIGFwcGxpY2F0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtwcm9taXNlfSBBIHByb21pc2UgdGhhdCBjYW4gYmUgcmVzb2x2ZWQgd2l0aCBgJG1kVG9hc3QuaGlkZSgpYCBvclxuICogcmVqZWN0ZWQgd2l0aCBgJG1kVG9hc3QuY2FuY2VsKClgLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJG1kVG9hc3QjaGlkZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSGlkZSBhbiBleGlzdGluZyB0b2FzdCBhbmQgcmVzb2x2ZSB0aGUgcHJvbWlzZSByZXR1cm5lZCBmcm9tIGAkbWRUb2FzdC5zaG93KClgLlxuICpcbiAqIEBwYXJhbSB7Kj19IHJlc3BvbnNlIEFuIGFyZ3VtZW50IGZvciB0aGUgcmVzb2x2ZWQgcHJvbWlzZS5cbiAqXG4gKiBAcmV0dXJucyB7cHJvbWlzZX0gYSBwcm9taXNlIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIGV4aXN0aW5nIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET01cbiAqXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkbWRUb2FzdCNjYW5jZWxcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhpZGUgdGhlIGV4aXN0aW5nIHRvYXN0IGFuZCByZWplY3QgdGhlIHByb21pc2UgcmV0dXJuZWQgZnJvbVxuICogYCRtZFRvYXN0LnNob3coKWAuXG4gKlxuICogQHBhcmFtIHsqPX0gcmVzcG9uc2UgQW4gYXJndW1lbnQgZm9yIHRoZSByZWplY3RlZCBwcm9taXNlLlxuICpcbiAqIEByZXR1cm5zIHtwcm9taXNlfSBhIHByb21pc2UgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgZXhpc3RpbmcgZWxlbWVudCBpcyByZW1vdmVkIGZyb20gdGhlIERPTVxuICpcbiAqL1xuXG5mdW5jdGlvbiBNZFRvYXN0UHJvdmlkZXIoJCRpbnRlcmltRWxlbWVudFByb3ZpZGVyKSB7XG4gIHZhciBhY3RpdmVUb2FzdENvbnRlbnQ7XG4gIHZhciAkbWRUb2FzdCA9ICQkaW50ZXJpbUVsZW1lbnRQcm92aWRlcignJG1kVG9hc3QnKVxuICAgIC5zZXREZWZhdWx0cyh7XG4gICAgICBtZXRob2RzOiBbJ3Bvc2l0aW9uJywgJ2hpZGVEZWxheScsICdjYXBzdWxlJyBdLFxuICAgICAgb3B0aW9uczogdG9hc3REZWZhdWx0T3B0aW9uc1xuICAgIH0pXG4gICAgLmFkZFByZXNldCgnc2ltcGxlJywge1xuICAgICAgYXJnT3B0aW9uOiAnY29udGVudCcsXG4gICAgICBtZXRob2RzOiBbJ2NvbnRlbnQnLCAnYWN0aW9uJywgJ2hpZ2hsaWdodEFjdGlvbicsICd0aGVtZScsICdwYXJlbnQnXSxcbiAgICAgIG9wdGlvbnM6IC8qIEBuZ0luamVjdCAqLyBbXCIkbWRUb2FzdFwiLCBcIiRtZFRoZW1pbmdcIiwgZnVuY3Rpb24oJG1kVG9hc3QsICRtZFRoZW1pbmcpIHtcbiAgICAgICAgdmFyIG9wdHMgPSB7XG4gICAgICAgICAgdGVtcGxhdGU6IFtcbiAgICAgICAgICAgICc8bWQtdG9hc3QgbWQtdGhlbWU9XCJ7eyB0b2FzdC50aGVtZSB9fVwiIG5nLWNsYXNzPVwie1xcJ21kLWNhcHN1bGVcXCc6IHRvYXN0LmNhcHN1bGV9XCI+JyxcbiAgICAgICAgICAgICAgJzxzcGFuIGZsZXg+e3sgdG9hc3QuY29udGVudCB9fTwvc3Bhbj4nLFxuICAgICAgICAgICAgICAnPG1kLWJ1dHRvbiBjbGFzcz1cIm1kLWFjdGlvblwiIG5nLWlmPVwidG9hc3QuYWN0aW9uXCIgbmctY2xpY2s9XCJ0b2FzdC5yZXNvbHZlKClcIiBuZy1jbGFzcz1cIntcXCdtZC1oaWdobGlnaHRcXCc6IHRvYXN0LmhpZ2hsaWdodEFjdGlvbn1cIj4nLFxuICAgICAgICAgICAgICAgICd7eyB0b2FzdC5hY3Rpb24gfX0nLFxuICAgICAgICAgICAgICAnPC9tZC1idXR0b24+JyxcbiAgICAgICAgICAgICc8L21kLXRvYXN0PidcbiAgICAgICAgICBdLmpvaW4oJycpLFxuICAgICAgICAgIGNvbnRyb2xsZXI6IC8qIEBuZ0luamVjdCAqLyBbXCIkc2NvcGVcIiwgZnVuY3Rpb24gbWRUb2FzdEN0cmwoJHNjb3BlKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkgeyByZXR1cm4gYWN0aXZlVG9hc3RDb250ZW50OyB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgc2VsZi5jb250ZW50ID0gYWN0aXZlVG9hc3RDb250ZW50O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgJG1kVG9hc3QuaGlkZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XSxcbiAgICAgICAgICB0aGVtZTogJG1kVGhlbWluZy5kZWZhdWx0VGhlbWUoKSxcbiAgICAgICAgICBjb250cm9sbGVyQXM6ICd0b2FzdCcsXG4gICAgICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gb3B0cztcbiAgICAgIH1dXG4gICAgfSlcbiAgICAuYWRkTWV0aG9kKCd1cGRhdGVDb250ZW50JywgZnVuY3Rpb24obmV3Q29udGVudCkge1xuICAgICAgYWN0aXZlVG9hc3RDb250ZW50ID0gbmV3Q29udGVudDtcbiAgICB9KTtcblxuICB0b2FzdERlZmF1bHRPcHRpb25zLiRpbmplY3QgPSBbXCIkdGltZW91dFwiLCBcIiRhbmltYXRlXCIsIFwiJG1kVG9hc3RcIiwgXCIkbWRVdGlsXCJdO1xuICAgIHJldHVybiAkbWRUb2FzdDtcblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gdG9hc3REZWZhdWx0T3B0aW9ucygkdGltZW91dCwgJGFuaW1hdGUsICRtZFRvYXN0LCAkbWRVdGlsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uU2hvdzogb25TaG93LFxuICAgICAgb25SZW1vdmU6IG9uUmVtb3ZlLFxuICAgICAgcG9zaXRpb246ICdib3R0b20gbGVmdCcsXG4gICAgICB0aGVtYWJsZTogdHJ1ZSxcbiAgICAgIGhpZGVEZWxheTogMzAwMFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBvblNob3coc2NvcGUsIGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIGVsZW1lbnQgPSAkbWRVdGlsLmV4dHJhY3RFbGVtZW50QnlOYW1lKGVsZW1lbnQsICdtZC10b2FzdCcpO1xuXG4gICAgICAvLyAndG9wIGxlZnQnIC0+ICdtZC10b3AgbWQtbGVmdCdcbiAgICAgIGFjdGl2ZVRvYXN0Q29udGVudCA9IG9wdGlvbnMuY29udGVudDtcbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3Mob3B0aW9ucy5wb3NpdGlvbi5zcGxpdCgnICcpLm1hcChmdW5jdGlvbihwb3MpIHtcbiAgICAgICAgcmV0dXJuICdtZC0nICsgcG9zO1xuICAgICAgfSkuam9pbignICcpKTtcbiAgICAgIG9wdGlvbnMucGFyZW50LmFkZENsYXNzKHRvYXN0T3BlbkNsYXNzKG9wdGlvbnMucG9zaXRpb24pKTtcblxuICAgICAgb3B0aW9ucy5vblN3aXBlID0gZnVuY3Rpb24oZXYsIGdlc3R1cmUpIHtcbiAgICAgICAgLy9BZGQgc3dpcGVsZWZ0L3N3aXBlcmlnaHQgY2xhc3MgdG8gZWxlbWVudCBzbyBpdCBjYW4gYW5pbWF0ZSBjb3JyZWN0bHlcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnbWQtJyArIGV2LnR5cGUucmVwbGFjZSgnJG1kLicsJycpKTtcbiAgICAgICAgJHRpbWVvdXQoJG1kVG9hc3QuY2FuY2VsKTtcbiAgICAgIH07XG4gICAgICBlbGVtZW50Lm9uKCckbWQuc3dpcGVsZWZ0ICRtZC5zd2lwZXJpZ2h0Jywgb3B0aW9ucy5vblN3aXBlKTtcbiAgICAgIHJldHVybiAkYW5pbWF0ZS5lbnRlcihlbGVtZW50LCBvcHRpb25zLnBhcmVudCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25SZW1vdmUoc2NvcGUsIGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIGVsZW1lbnQub2ZmKCckbWQuc3dpcGVsZWZ0ICRtZC5zd2lwZXJpZ2h0Jywgb3B0aW9ucy5vblN3aXBlKTtcbiAgICAgIG9wdGlvbnMucGFyZW50LnJlbW92ZUNsYXNzKHRvYXN0T3BlbkNsYXNzKG9wdGlvbnMucG9zaXRpb24pKTtcbiAgICAgIHJldHVybiAkYW5pbWF0ZS5sZWF2ZShlbGVtZW50KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b2FzdE9wZW5DbGFzcyhwb3NpdGlvbikge1xuICAgICAgcmV0dXJuICdtZC10b2FzdC1vcGVuLScgK1xuICAgICAgICAocG9zaXRpb24uaW5kZXhPZigndG9wJykgPiAtMSA/ICd0b3AnIDogJ2JvdHRvbScpO1xuICAgIH1cbiAgfVxuXG59XG5NZFRvYXN0UHJvdmlkZXIuJGluamVjdCA9IFtcIiQkaW50ZXJpbUVsZW1lbnRQcm92aWRlclwiXTtcblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy50b29sYmFyXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLnRvb2xiYXInLCBbXG4gICdtYXRlcmlhbC5jb3JlJyxcbiAgJ21hdGVyaWFsLmNvbXBvbmVudHMuY29udGVudCdcbl0pXG4gIC5kaXJlY3RpdmUoJ21kVG9vbGJhcicsIG1kVG9vbGJhckRpcmVjdGl2ZSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbWRUb29sYmFyXG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMudG9vbGJhclxuICogQHJlc3RyaWN0IEVcbiAqIEBkZXNjcmlwdGlvblxuICogYG1kLXRvb2xiYXJgIGlzIHVzZWQgdG8gcGxhY2UgYSB0b29sYmFyIGluIHlvdXIgYXBwLlxuICpcbiAqIFRvb2xiYXJzIGFyZSB1c3VhbGx5IHVzZWQgYWJvdmUgYSBjb250ZW50IGFyZWEgdG8gZGlzcGxheSB0aGUgdGl0bGUgb2YgdGhlXG4gKiBjdXJyZW50IHBhZ2UsIGFuZCBzaG93IHJlbGV2YW50IGFjdGlvbiBidXR0b25zIGZvciB0aGF0IHBhZ2UuXG4gKlxuICogWW91IGNhbiBjaGFuZ2UgdGhlIGhlaWdodCBvZiB0aGUgdG9vbGJhciBieSBhZGRpbmcgZWl0aGVyIHRoZVxuICogYG1kLW1lZGl1bS10YWxsYCBvciBgbWQtdGFsbGAgY2xhc3MgdG8gdGhlIHRvb2xiYXIuXG4gKlxuICogQHVzYWdlXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogPGRpdiBsYXlvdXQ9XCJjb2x1bW5cIiBsYXlvdXQtZmlsbD5cbiAqICAgPG1kLXRvb2xiYXI+XG4gKlxuICogICAgIDxkaXYgY2xhc3M9XCJtZC10b29sYmFyLXRvb2xzXCI+XG4gKiAgICAgICA8c3Bhbj5NeSBBcHAncyBUaXRsZTwvc3Bhbj5cbiAqXG4gKiAgICAgICA8IS0tIGZpbGwgdXAgdGhlIHNwYWNlIGJldHdlZW4gbGVmdCBhbmQgcmlnaHQgYXJlYSAtLT5cbiAqICAgICAgIDxzcGFuIGZsZXg+PC9zcGFuPlxuICpcbiAqICAgICAgIDxtZC1idXR0b24+XG4gKiAgICAgICAgIFJpZ2h0IEJhciBCdXR0b25cbiAqICAgICAgIDwvbWQtYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICpcbiAqICAgPC9tZC10b29sYmFyPlxuICogICA8bWQtY29udGVudD5cbiAqICAgICBIZWxsbyFcbiAqICAgPC9tZC1jb250ZW50PlxuICogPC9kaXY+XG4gKiA8L2hsanM+XG4gKlxuICogQHBhcmFtIHtib29sZWFuPX0gbWQtc2Nyb2xsLXNocmluayBXaGV0aGVyIHRoZSBoZWFkZXIgc2hvdWxkIHNocmluayBhd2F5IGFzXG4gKiB0aGUgdXNlciBzY3JvbGxzIGRvd24sIGFuZCByZXZlYWwgaXRzZWxmIGFzIHRoZSB1c2VyIHNjcm9sbHMgdXAuXG4gKiBOb3RlOiBmb3Igc2Nyb2xsU2hyaW5rIHRvIHdvcmssIHRoZSB0b29sYmFyIG11c3QgYmUgYSBzaWJsaW5nIG9mIGFcbiAqIGBtZC1jb250ZW50YCBlbGVtZW50LCBwbGFjZWQgYmVmb3JlIGl0LiBTZWUgdGhlIHNjcm9sbCBzaHJpbmsgZGVtby5cbiAqXG4gKlxuICogQHBhcmFtIHtudW1iZXI9fSBtZC1zaHJpbmstc3BlZWQtZmFjdG9yIEhvdyBtdWNoIHRvIGNoYW5nZSB0aGUgc3BlZWQgb2YgdGhlIHRvb2xiYXInc1xuICogc2hyaW5raW5nIGJ5LiBGb3IgZXhhbXBsZSwgaWYgMC4yNSBpcyBnaXZlbiB0aGVuIHRoZSB0b29sYmFyIHdpbGwgc2hyaW5rXG4gKiBhdCBvbmUgZm91cnRoIHRoZSByYXRlIGF0IHdoaWNoIHRoZSB1c2VyIHNjcm9sbHMgZG93bi4gRGVmYXVsdCAwLjUuXG4gKi9cbmZ1bmN0aW9uIG1kVG9vbGJhckRpcmVjdGl2ZSgkJHJBRiwgJG1kQ29uc3RhbnQsICRtZFV0aWwsICRtZFRoZW1pbmcsICRhbmltYXRlLCAkdGltZW91dCkge1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICBjb250cm9sbGVyOiBhbmd1bGFyLm5vb3AsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICRtZFRoZW1pbmcoZWxlbWVudCk7XG5cbiAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChhdHRyLm1kU2Nyb2xsU2hyaW5rKSkge1xuICAgICAgICBzZXR1cFNjcm9sbFNocmluaygpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzZXR1cFNjcm9sbFNocmluaygpIHtcbiAgICAgICAgLy8gQ3VycmVudCBcInlcIiBwb3NpdGlvbiBvZiBzY3JvbGxcbiAgICAgICAgdmFyIHkgPSAwO1xuICAgICAgICAvLyBTdG9yZSB0aGUgbGFzdCBzY3JvbGwgdG9wIHBvc2l0aW9uXG4gICAgICAgIHZhciBwcmV2U2Nyb2xsVG9wID0gMDtcblxuICAgICAgICB2YXIgc2hyaW5rU3BlZWRGYWN0b3IgPSBhdHRyLm1kU2hyaW5rU3BlZWRGYWN0b3IgfHwgMC41O1xuXG4gICAgICAgIHZhciB0b29sYmFySGVpZ2h0O1xuICAgICAgICB2YXIgY29udGVudEVsZW1lbnQ7XG5cbiAgICAgICAgdmFyIGRlYm91bmNlZENvbnRlbnRTY3JvbGwgPSAkJHJBRi50aHJvdHRsZShvbkNvbnRlbnRTY3JvbGwpO1xuICAgICAgICB2YXIgZGVib3VuY2VkVXBkYXRlSGVpZ2h0ID0gJG1kVXRpbC5kZWJvdW5jZSh1cGRhdGVUb29sYmFySGVpZ2h0LCA1ICogMTAwMCk7XG5cbiAgICAgICAgLy8gV2FpdCBmb3IgJG1kQ29udGVudExvYWRlZCBldmVudCBmcm9tIG1kQ29udGVudCBkaXJlY3RpdmUuXG4gICAgICAgIC8vIElmIHRoZSBtZENvbnRlbnQgZWxlbWVudCBpcyBhIHNpYmxpbmcgb2Ygb3VyIHRvb2xiYXIsIGhvb2sgaXQgdXBcbiAgICAgICAgLy8gdG8gc2Nyb2xsIGV2ZW50cy5cbiAgICAgICAgc2NvcGUuJG9uKCckbWRDb250ZW50TG9hZGVkJywgb25NZENvbnRlbnRMb2FkKTtcblxuICAgICAgICBmdW5jdGlvbiBvbk1kQ29udGVudExvYWQoJGV2ZW50LCBuZXdDb250ZW50RWwpIHtcbiAgICAgICAgICAvLyBUb29sYmFyIGFuZCBjb250ZW50IG11c3QgYmUgc2libGluZ3NcbiAgICAgICAgICBpZiAoZWxlbWVudC5wYXJlbnQoKVswXSA9PT0gbmV3Q29udGVudEVsLnBhcmVudCgpWzBdKSB7XG4gICAgICAgICAgICAvLyB1bmhvb2sgb2xkIGNvbnRlbnQgZXZlbnQgbGlzdGVuZXIgaWYgZXhpc3RzXG4gICAgICAgICAgICBpZiAoY29udGVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgY29udGVudEVsZW1lbnQub2ZmKCdzY3JvbGwnLCBkZWJvdW5jZWRDb250ZW50U2Nyb2xsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbmV3Q29udGVudEVsLm9uKCdzY3JvbGwnLCBkZWJvdW5jZWRDb250ZW50U2Nyb2xsKTtcbiAgICAgICAgICAgIG5ld0NvbnRlbnRFbC5hdHRyKCdzY3JvbGwtc2hyaW5rJywgJ3RydWUnKTtcblxuICAgICAgICAgICAgY29udGVudEVsZW1lbnQgPSBuZXdDb250ZW50RWw7XG4gICAgICAgICAgICAkJHJBRih1cGRhdGVUb29sYmFySGVpZ2h0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVUb29sYmFySGVpZ2h0KCkge1xuICAgICAgICAgIHRvb2xiYXJIZWlnaHQgPSBlbGVtZW50LnByb3AoJ29mZnNldEhlaWdodCcpO1xuICAgICAgICAgIC8vIEFkZCBhIG5lZ2F0aXZlIG1hcmdpbi10b3AgdGhlIHNpemUgb2YgdGhlIHRvb2xiYXIgdG8gdGhlIGNvbnRlbnQgZWwuXG4gICAgICAgICAgLy8gVGhlIGNvbnRlbnQgd2lsbCBzdGFydCB0cmFuc2Zvcm1lZCBkb3duIHRoZSB0b29sYmFySGVpZ2h0IGFtb3VudCxcbiAgICAgICAgICAvLyBzbyBldmVyeXRoaW5nIGxvb2tzIG5vcm1hbC5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIEFzIHRoZSB1c2VyIHNjcm9sbHMgZG93biwgdGhlIGNvbnRlbnQgd2lsbCBiZSB0cmFuc2Zvcm1lZCB1cCBzbG93bHlcbiAgICAgICAgICAvLyB0byBwdXQgdGhlIGNvbnRlbnQgdW5kZXJuZWF0aCB3aGVyZSB0aGUgdG9vbGJhciB3YXMuXG4gICAgICAgICAgdmFyIG1hcmdpbiA9ICAoLXRvb2xiYXJIZWlnaHQgKiBzaHJpbmtTcGVlZEZhY3RvcikgKyAncHgnO1xuICAgICAgICAgIGNvbnRlbnRFbGVtZW50LmNzcygnbWFyZ2luLXRvcCcsIG1hcmdpbik7XG4gICAgICAgICAgY29udGVudEVsZW1lbnQuY3NzKCdtYXJnaW4tYm90dG9tJywgbWFyZ2luKTtcblxuICAgICAgICAgIG9uQ29udGVudFNjcm9sbCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb25Db250ZW50U2Nyb2xsKGUpIHtcbiAgICAgICAgICB2YXIgc2Nyb2xsVG9wID0gZSA/IGUudGFyZ2V0LnNjcm9sbFRvcCA6IHByZXZTY3JvbGxUb3A7XG5cbiAgICAgICAgICBkZWJvdW5jZWRVcGRhdGVIZWlnaHQoKTtcblxuICAgICAgICAgIHkgPSBNYXRoLm1pbihcbiAgICAgICAgICAgIHRvb2xiYXJIZWlnaHQgLyBzaHJpbmtTcGVlZEZhY3RvcixcbiAgICAgICAgICAgIE1hdGgubWF4KDAsIHkgKyBzY3JvbGxUb3AgLSBwcmV2U2Nyb2xsVG9wKVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBlbGVtZW50LmNzcyhcbiAgICAgICAgICAgICRtZENvbnN0YW50LkNTUy5UUkFOU0ZPUk0sXG4gICAgICAgICAgICAndHJhbnNsYXRlM2QoMCwnICsgKC15ICogc2hyaW5rU3BlZWRGYWN0b3IpICsgJ3B4LDApJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgY29udGVudEVsZW1lbnQuY3NzKFxuICAgICAgICAgICAgJG1kQ29uc3RhbnQuQ1NTLlRSQU5TRk9STSxcbiAgICAgICAgICAgICd0cmFuc2xhdGUzZCgwLCcgKyAoKHRvb2xiYXJIZWlnaHQgLSB5KSAqIHNocmlua1NwZWVkRmFjdG9yKSArICdweCwwKSdcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgcHJldlNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcblxuICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzQ2xhc3MoJ21kLXdoaXRlZnJhbWUtejEnKSkge1xuICAgICAgICAgICAgICBpZiAoIXkpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7ICRhbmltYXRlLnJlbW92ZUNsYXNzKGVsZW1lbnQsICdtZC13aGl0ZWZyYW1lLXoxJyk7IH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoeSkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHsgJGFuaW1hdGUuYWRkQ2xhc3MoZWxlbWVudCwgJ21kLXdoaXRlZnJhbWUtejEnKTsgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICB9XG4gIH07XG5cbn1cbm1kVG9vbGJhckRpcmVjdGl2ZS4kaW5qZWN0ID0gW1wiJCRyQUZcIiwgXCIkbWRDb25zdGFudFwiLCBcIiRtZFV0aWxcIiwgXCIkbWRUaGVtaW5nXCIsIFwiJGFuaW1hdGVcIiwgXCIkdGltZW91dFwiXTtcblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy50b29sdGlwXG4gKi9cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLnRvb2x0aXAnLCBbICdtYXRlcmlhbC5jb3JlJyBdKVxuICAgIC5kaXJlY3RpdmUoJ21kVG9vbHRpcCcsIE1kVG9vbHRpcERpcmVjdGl2ZSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbWRUb29sdGlwXG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMudG9vbHRpcFxuICogQGRlc2NyaXB0aW9uXG4gKiBUb29sdGlwcyBhcmUgdXNlZCB0byBkZXNjcmliZSBlbGVtZW50cyB0aGF0IGFyZSBpbnRlcmFjdGl2ZSBhbmQgcHJpbWFyaWx5IGdyYXBoaWNhbCAobm90IHRleHR1YWwpLlxuICpcbiAqIFBsYWNlIGEgYDxtZC10b29sdGlwPmAgYXMgYSBjaGlsZCBvZiB0aGUgZWxlbWVudCBpdCBkZXNjcmliZXMuXG4gKlxuICogQSB0b29sdGlwIHdpbGwgYWN0aXZhdGUgd2hlbiB0aGUgdXNlciBmb2N1c2VzLCBob3ZlcnMgb3Zlciwgb3IgdG91Y2hlcyB0aGUgcGFyZW50LlxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC1idXR0b24gY2xhc3M9XCJtZC1mYWIgbWQtYWNjZW50XCIgYXJpYS1sYWJlbD1cIlBsYXlcIj5cbiAqICAgPG1kLXRvb2x0aXA+XG4gKiAgICAgUGxheSBNdXNpY1xuICogICA8L21kLXRvb2x0aXA+XG4gKiAgIDxtZC1pY29uIGljb249XCJpbWcvaWNvbnMvaWNfcGxheV9hcnJvd18yNHB4LnN2Z1wiPjwvbWQtaWNvbj5cbiAqIDwvbWQtYnV0dG9uPlxuICogPC9obGpzPlxuICpcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG1kLXZpc2libGUgQm9vbGVhbiBib3VuZCB0byB3aGV0aGVyIHRoZSB0b29sdGlwIGlzXG4gKiBjdXJyZW50bHkgdmlzaWJsZS5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gbWQtZGVsYXkgSG93IG1hbnkgbWlsbGlzZWNvbmRzIHRvIHdhaXQgdG8gc2hvdyB0aGUgdG9vbHRpcCBhZnRlciB0aGUgdXNlciBmb2N1c2VzLCBob3ZlcnMsIG9yIHRvdWNoZXMgdGhlIHBhcmVudC4gRGVmYXVsdHMgdG8gNDAwbXMuXG4gKiBAcGFyYW0ge3N0cmluZz19IG1kLWRpcmVjdGlvbiBXaGljaCBkaXJlY3Rpb24gd291bGQgeW91IGxpa2UgdGhlIHRvb2x0aXAgdG8gZ28/ICBTdXBwb3J0cyBsZWZ0LCByaWdodCwgdG9wLCBhbmQgYm90dG9tLiAgRGVmYXVsdHMgdG8gYm90dG9tLlxuICogQHBhcmFtIHtib29sZWFuPX0gbWQtYXV0b2hpZGUgSWYgcHJlc2VudCBvciBwcm92aWRlZCB3aXRoIGEgYm9vbGVhbiB2YWx1ZSwgdGhlIHRvb2x0aXAgd2lsbCBoaWRlIG9uIG1vdXNlIGxlYXZlLCByZWdhcmRsZXNzIG9mIGZvY3VzXG4gKi9cbmZ1bmN0aW9uIE1kVG9vbHRpcERpcmVjdGl2ZSgkdGltZW91dCwgJHdpbmRvdywgJCRyQUYsICRkb2N1bWVudCwgJG1kVXRpbCwgJG1kVGhlbWluZywgJHJvb3RFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhbmltYXRlLCAkcSkge1xuXG4gIHZhciBUT09MVElQX1NIT1dfREVMQVkgPSAzMDA7XG4gIHZhciBUT09MVElQX1dJTkRPV19FREdFX1NQQUNFID0gODtcblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICBwcmlvcml0eToyMTAsIC8vIEJlZm9yZSBuZ0FyaWFcbiAgICB0ZW1wbGF0ZTogJ1xcXG4gICAgICAgIDxkaXYgY2xhc3M9XCJtZC1iYWNrZ3JvdW5kXCI+PC9kaXY+XFxcbiAgICAgICAgPGRpdiBjbGFzcz1cIm1kLWNvbnRlbnRcIiBuZy10cmFuc2NsdWRlPjwvZGl2PicsXG4gICAgc2NvcGU6IHtcbiAgICAgIHZpc2libGU6ICc9P21kVmlzaWJsZScsXG4gICAgICBkZWxheTogJz0/bWREZWxheScsXG4gICAgICBhdXRvaGlkZTogJz0/bWRBdXRvaGlkZSdcbiAgICB9LFxuICAgIGxpbms6IHBvc3RMaW5rXG4gIH07XG5cbiAgZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcblxuICAgICRtZFRoZW1pbmcoZWxlbWVudCk7XG5cbiAgICB2YXIgcGFyZW50ICAgICAgICA9IGdldFBhcmVudFdpdGhQb2ludGVyRXZlbnRzKCksXG4gICAgICAgIGJhY2tncm91bmQgICAgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudFswXS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdtZC1iYWNrZ3JvdW5kJylbMF0pLFxuICAgICAgICBjb250ZW50ICAgICAgID0gYW5ndWxhci5lbGVtZW50KGVsZW1lbnRbMF0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbWQtY29udGVudCcpWzBdKSxcbiAgICAgICAgZGlyZWN0aW9uICAgICA9IGF0dHIubWREaXJlY3Rpb24sXG4gICAgICAgIGN1cnJlbnQgICAgICAgPSBnZXROZWFyZXN0Q29udGVudEVsZW1lbnQoKSxcbiAgICAgICAgdG9vbHRpcFBhcmVudCA9IGFuZ3VsYXIuZWxlbWVudChjdXJyZW50IHx8IGRvY3VtZW50LmJvZHkpLFxuICAgICAgICBkZWJvdW5jZWRPblJlc2l6ZSA9ICQkckFGLnRocm90dGxlKGZ1bmN0aW9uICgpIHsgaWYgKHNjb3BlLnZpc2libGUpIHBvc2l0aW9uVG9vbHRpcCgpOyB9KTtcblxuICAgIHJldHVybiBpbml0KCk7XG5cbiAgICBmdW5jdGlvbiBpbml0ICgpIHtcbiAgICAgIHNldERlZmF1bHRzKCk7XG4gICAgICBtYW5pcHVsYXRlRWxlbWVudCgpO1xuICAgICAgYmluZEV2ZW50cygpO1xuICAgICAgY29uZmlndXJlV2F0Y2hlcnMoKTtcbiAgICAgIGFkZEFyaWFMYWJlbCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldERlZmF1bHRzICgpIHtcbiAgICAgIGlmICghYW5ndWxhci5pc0RlZmluZWQoYXR0ci5tZERlbGF5KSkgc2NvcGUuZGVsYXkgPSBUT09MVElQX1NIT1dfREVMQVk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlndXJlV2F0Y2hlcnMgKCkge1xuICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzY29wZS52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vZmYoJ3Jlc2l6ZScsIGRlYm91bmNlZE9uUmVzaXplKTtcbiAgICAgIH0pO1xuICAgICAgc2NvcGUuJHdhdGNoKCd2aXNpYmxlJywgZnVuY3Rpb24gKGlzVmlzaWJsZSkge1xuICAgICAgICBpZiAoaXNWaXNpYmxlKSBzaG93VG9vbHRpcCgpO1xuICAgICAgICBlbHNlIGhpZGVUb29sdGlwKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRBcmlhTGFiZWwgKCkge1xuICAgICAgaWYgKCFwYXJlbnQuYXR0cignYXJpYS1sYWJlbCcpICYmICFwYXJlbnQudGV4dCgpLnRyaW0oKSkge1xuICAgICAgICBwYXJlbnQuYXR0cignYXJpYS1sYWJlbCcsIGVsZW1lbnQudGV4dCgpLnRyaW0oKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFuaXB1bGF0ZUVsZW1lbnQgKCkge1xuICAgICAgZWxlbWVudC5kZXRhY2goKTtcbiAgICAgIGVsZW1lbnQuYXR0cigncm9sZScsICd0b29sdGlwJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGFyZW50V2l0aFBvaW50ZXJFdmVudHMgKCkge1xuICAgICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50KCk7XG4gICAgICB3aGlsZSAocGFyZW50ICYmICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnRbMF0pWydwb2ludGVyLWV2ZW50cyddID09ICdub25lJykge1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyZW50O1xuICAgIH1cblxuICAgICBmdW5jdGlvbiBnZXROZWFyZXN0Q29udGVudEVsZW1lbnQgKCkge1xuICAgICAgIHZhciBjdXJyZW50ID0gZWxlbWVudC5wYXJlbnQoKVswXTtcbiAgICAgICAvLyBMb29rIGZvciB0aGUgbmVhcmVzdCBwYXJlbnQgbWQtY29udGVudCwgc3RvcHBpbmcgYXQgdGhlIHJvb3RFbGVtZW50LlxuICAgICAgIHdoaWxlIChjdXJyZW50ICYmIGN1cnJlbnQgIT09ICRyb290RWxlbWVudFswXSAmJiBjdXJyZW50ICE9PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnROb2RlO1xuICAgICAgIH1cbiAgICAgICByZXR1cm4gY3VycmVudDtcbiAgICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzQ29tcHV0ZWRTdHlsZVZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2Ugc2hvdWxkIHNob3cgaXQgb3Igbm90Li4uXG4gICAgICAgIHZhciBjb21wdXRlZFN0eWxlcyA9ICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50WzBdKTtcbiAgICAgICAgcmV0dXJuIGFuZ3VsYXIuaXNEZWZpbmVkKGNvbXB1dGVkU3R5bGVzW2tleV0pICYmIChjb21wdXRlZFN0eWxlc1trZXldID09IHZhbHVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBiaW5kRXZlbnRzICgpIHtcbiAgICAgIHZhciBtb3VzZUFjdGl2ZSA9IGZhbHNlO1xuICAgICAgdmFyIGVudGVySGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIWhhc0NvbXB1dGVkU3R5bGVWYWx1ZSgncG9pbnRlci1ldmVudHMnLCdub25lJykpIHtcbiAgICAgICAgICBzZXRWaXNpYmxlKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGxlYXZlSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGF1dG9oaWRlID0gc2NvcGUuaGFzT3duUHJvcGVydHkoJ2F1dG9oaWRlJykgPyBzY29wZS5hdXRvaGlkZSA6IGF0dHIuaGFzT3duUHJvcGVydHkoJ21kQXV0b2hpZGUnKTtcbiAgICAgICAgaWYgKGF1dG9oaWRlIHx8IG1vdXNlQWN0aXZlIHx8ICgkZG9jdW1lbnRbMF0uYWN0aXZlRWxlbWVudCAhPT0gcGFyZW50WzBdKSApIHtcbiAgICAgICAgICBzZXRWaXNpYmxlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBtb3VzZUFjdGl2ZSA9IGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgLy8gdG8gYXZvaWQgYHN5bnRoZXRpYyBjbGlja3NgIHdlIGxpc3RlbiB0byBtb3VzZWRvd24gaW5zdGVhZCBvZiBgY2xpY2tgXG4gICAgICBwYXJlbnQub24oJ21vdXNlZG93bicsIGZ1bmN0aW9uKCkgeyBtb3VzZUFjdGl2ZSA9IHRydWU7IH0pO1xuICAgICAgcGFyZW50Lm9uKCdmb2N1cyBtb3VzZWVudGVyIHRvdWNoc3RhcnQnLCBlbnRlckhhbmRsZXIgKTtcbiAgICAgIHBhcmVudC5vbignYmx1ciBtb3VzZWxlYXZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsJywgbGVhdmVIYW5kbGVyICk7XG5cblxuICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLm9uKCdyZXNpemUnLCBkZWJvdW5jZWRPblJlc2l6ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0VmlzaWJsZSAodmFsdWUpIHtcbiAgICAgIHNldFZpc2libGUudmFsdWUgPSAhIXZhbHVlO1xuICAgICAgaWYgKCFzZXRWaXNpYmxlLnF1ZXVlZCkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICBzZXRWaXNpYmxlLnF1ZXVlZCA9IHRydWU7XG4gICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzY29wZS52aXNpYmxlID0gc2V0VmlzaWJsZS52YWx1ZTtcbiAgICAgICAgICAgIHNldFZpc2libGUucXVldWVkID0gZmFsc2U7XG4gICAgICAgICAgfSwgc2NvcGUuZGVsYXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkgeyBzY29wZS52aXNpYmxlID0gZmFsc2U7IH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2hvd1Rvb2x0aXAoKSB7XG4gICAgICAvLyBJbnNlcnQgdGhlIGVsZW1lbnQgYmVmb3JlIHBvc2l0aW9uaW5nIGl0LCBzbyB3ZSBjYW4gZ2V0IHRoZSBwb3NpdGlvblxuICAgICAgLy8gYW5kIGNoZWNrIGlmIHdlIHNob3VsZCBkaXNwbGF5IGl0XG4gICAgICB0b29sdGlwUGFyZW50LmFwcGVuZChlbGVtZW50KTtcblxuICAgICAgLy8gQ2hlY2sgaWYgd2Ugc2hvdWxkIGRpc3BsYXkgaXQgb3Igbm90LlxuICAgICAgLy8gVGhpcyBoYW5kbGVzIGhpZGUtKiBhbmQgc2hvdy0qIGFsb25nIHdpdGggYW55IHVzZXIgZGVmaW5lZCBjc3NcbiAgICAgIGlmICggaGFzQ29tcHV0ZWRTdHlsZVZhbHVlKCdkaXNwbGF5Jywnbm9uZScpICkge1xuICAgICAgICBzY29wZS52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIGVsZW1lbnQuZGV0YWNoKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcG9zaXRpb25Ub29sdGlwKCk7XG4gICAgICBhbmd1bGFyLmZvckVhY2goW2VsZW1lbnQsIGJhY2tncm91bmQsIGNvbnRlbnRdLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCAnbWQtc2hvdycpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGlkZVRvb2x0aXAoKSB7XG4gICAgICAkcS5hbGwoW1xuICAgICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyhjb250ZW50LCAnbWQtc2hvdycpLFxuICAgICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyhiYWNrZ3JvdW5kLCAnbWQtc2hvdycpLFxuICAgICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCAnbWQtc2hvdycpXG4gICAgICBdKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFzY29wZS52aXNpYmxlKSBlbGVtZW50LmRldGFjaCgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9zaXRpb25Ub29sdGlwKCkge1xuICAgICAgdmFyIHRpcFJlY3QgPSAkbWRVdGlsLm9mZnNldFJlY3QoZWxlbWVudCwgdG9vbHRpcFBhcmVudCk7XG4gICAgICB2YXIgcGFyZW50UmVjdCA9ICRtZFV0aWwub2Zmc2V0UmVjdChwYXJlbnQsIHRvb2x0aXBQYXJlbnQpO1xuICAgICAgdmFyIG5ld1Bvc2l0aW9uID0gZ2V0UG9zaXRpb24oZGlyZWN0aW9uKTtcblxuICAgICAgLy8gSWYgdGhlIHVzZXIgcHJvdmlkZWQgYSBkaXJlY3Rpb24sIGp1c3QgbnVkZ2UgdGhlIHRvb2x0aXAgb250byB0aGUgc2NyZWVuXG4gICAgICAvLyBPdGhlcndpc2UsIHJlY2FsY3VsYXRlIGJhc2VkIG9uICd0b3AnIHNpbmNlIGRlZmF1bHQgaXMgJ2JvdHRvbSdcbiAgICAgIGlmIChkaXJlY3Rpb24pIHtcbiAgICAgICAgbmV3UG9zaXRpb24gPSBmaXRJblBhcmVudChuZXdQb3NpdGlvbik7XG4gICAgICB9IGVsc2UgaWYgKG5ld1Bvc2l0aW9uLnRvcCA+IGVsZW1lbnQucHJvcCgnb2Zmc2V0UGFyZW50Jykuc2Nyb2xsSGVpZ2h0IC0gdGlwUmVjdC5oZWlnaHQgLSBUT09MVElQX1dJTkRPV19FREdFX1NQQUNFKSB7XG4gICAgICAgIG5ld1Bvc2l0aW9uID0gZml0SW5QYXJlbnQoZ2V0UG9zaXRpb24oJ3RvcCcpKTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5jc3Moe3RvcDogbmV3UG9zaXRpb24udG9wICsgJ3B4JywgbGVmdDogbmV3UG9zaXRpb24ubGVmdCArICdweCd9KTtcblxuICAgICAgcG9zaXRpb25CYWNrZ3JvdW5kKCk7XG5cbiAgICAgIGZ1bmN0aW9uIHBvc2l0aW9uQmFja2dyb3VuZCAoKSB7XG4gICAgICAgIHZhciBzaXplID0gZGlyZWN0aW9uID09PSAnbGVmdCcgfHwgZGlyZWN0aW9uID09PSAncmlnaHQnXG4gICAgICAgICAgICAgID8gTWF0aC5zcXJ0KE1hdGgucG93KHRpcFJlY3Qud2lkdGgsIDIpICsgTWF0aC5wb3codGlwUmVjdC5oZWlnaHQgLyAyLCAyKSkgKiAyXG4gICAgICAgICAgICAgIDogTWF0aC5zcXJ0KE1hdGgucG93KHRpcFJlY3Qud2lkdGggLyAyLCAyKSArIE1hdGgucG93KHRpcFJlY3QuaGVpZ2h0LCAyKSkgKiAyLFxuICAgICAgICAgICAgcG9zaXRpb24gPSBkaXJlY3Rpb24gPT09ICdsZWZ0JyA/IHsgbGVmdDogMTAwLCB0b3A6IDUwIH1cbiAgICAgICAgICAgICAgOiBkaXJlY3Rpb24gPT09ICdyaWdodCcgPyB7IGxlZnQ6IDAsIHRvcDogNTAgfVxuICAgICAgICAgICAgICA6IGRpcmVjdGlvbiA9PT0gJ3RvcCcgPyB7IGxlZnQ6IDUwLCB0b3A6IDEwMCB9XG4gICAgICAgICAgICAgIDogeyBsZWZ0OiA1MCwgdG9wOiAwIH07XG4gICAgICAgIGJhY2tncm91bmQuY3NzKHtcbiAgICAgICAgICB3aWR0aDogc2l6ZSArICdweCcsXG4gICAgICAgICAgaGVpZ2h0OiBzaXplICsgJ3B4JyxcbiAgICAgICAgICBsZWZ0OiBwb3NpdGlvbi5sZWZ0ICsgJyUnLFxuICAgICAgICAgIHRvcDogcG9zaXRpb24udG9wICsgJyUnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmaXRJblBhcmVudCAocG9zKSB7XG4gICAgICAgIHZhciBuZXdQb3NpdGlvbiA9IHsgbGVmdDogcG9zLmxlZnQsIHRvcDogcG9zLnRvcCB9O1xuICAgICAgICBuZXdQb3NpdGlvbi5sZWZ0ID0gTWF0aC5taW4oIG5ld1Bvc2l0aW9uLmxlZnQsIHRvb2x0aXBQYXJlbnQucHJvcCgnc2Nyb2xsV2lkdGgnKSAtIHRpcFJlY3Qud2lkdGggLSBUT09MVElQX1dJTkRPV19FREdFX1NQQUNFICk7XG4gICAgICAgIG5ld1Bvc2l0aW9uLmxlZnQgPSBNYXRoLm1heCggbmV3UG9zaXRpb24ubGVmdCwgVE9PTFRJUF9XSU5ET1dfRURHRV9TUEFDRSApO1xuICAgICAgICBuZXdQb3NpdGlvbi50b3AgID0gTWF0aC5taW4oIG5ld1Bvc2l0aW9uLnRvcCwgIHRvb2x0aXBQYXJlbnQucHJvcCgnc2Nyb2xsSGVpZ2h0JykgLSB0aXBSZWN0LmhlaWdodCAtIFRPT0xUSVBfV0lORE9XX0VER0VfU1BBQ0UgKTtcbiAgICAgICAgbmV3UG9zaXRpb24udG9wICA9IE1hdGgubWF4KCBuZXdQb3NpdGlvbi50b3AsICBUT09MVElQX1dJTkRPV19FREdFX1NQQUNFICk7XG4gICAgICAgIHJldHVybiBuZXdQb3NpdGlvbjtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0UG9zaXRpb24gKGRpcikge1xuICAgICAgICByZXR1cm4gZGlyID09PSAnbGVmdCdcbiAgICAgICAgICA/IHsgbGVmdDogcGFyZW50UmVjdC5sZWZ0IC0gdGlwUmVjdC53aWR0aCAtIFRPT0xUSVBfV0lORE9XX0VER0VfU1BBQ0UsXG4gICAgICAgICAgICAgIHRvcDogcGFyZW50UmVjdC50b3AgKyBwYXJlbnRSZWN0LmhlaWdodCAvIDIgLSB0aXBSZWN0LmhlaWdodCAvIDIgfVxuICAgICAgICAgIDogZGlyID09PSAncmlnaHQnXG4gICAgICAgICAgPyB7IGxlZnQ6IHBhcmVudFJlY3QubGVmdCArIHBhcmVudFJlY3Qud2lkdGggKyBUT09MVElQX1dJTkRPV19FREdFX1NQQUNFLFxuICAgICAgICAgICAgICB0b3A6IHBhcmVudFJlY3QudG9wICsgcGFyZW50UmVjdC5oZWlnaHQgLyAyIC0gdGlwUmVjdC5oZWlnaHQgLyAyIH1cbiAgICAgICAgICA6IGRpciA9PT0gJ3RvcCdcbiAgICAgICAgICA/IHsgbGVmdDogcGFyZW50UmVjdC5sZWZ0ICsgcGFyZW50UmVjdC53aWR0aCAvIDIgLSB0aXBSZWN0LndpZHRoIC8gMixcbiAgICAgICAgICAgICAgdG9wOiBwYXJlbnRSZWN0LnRvcCAtIHRpcFJlY3QuaGVpZ2h0IC0gVE9PTFRJUF9XSU5ET1dfRURHRV9TUEFDRSB9XG4gICAgICAgICAgOiB7IGxlZnQ6IHBhcmVudFJlY3QubGVmdCArIHBhcmVudFJlY3Qud2lkdGggLyAyIC0gdGlwUmVjdC53aWR0aCAvIDIsXG4gICAgICAgICAgICAgIHRvcDogcGFyZW50UmVjdC50b3AgKyBwYXJlbnRSZWN0LmhlaWdodCArIFRPT0xUSVBfV0lORE9XX0VER0VfU1BBQ0UgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG59XG5NZFRvb2x0aXBEaXJlY3RpdmUuJGluamVjdCA9IFtcIiR0aW1lb3V0XCIsIFwiJHdpbmRvd1wiLCBcIiQkckFGXCIsIFwiJGRvY3VtZW50XCIsIFwiJG1kVXRpbFwiLCBcIiRtZFRoZW1pbmdcIiwgXCIkcm9vdEVsZW1lbnRcIiwgXCIkYW5pbWF0ZVwiLCBcIiRxXCJdO1xuXG59KSgpO1xuKGZ1bmN0aW9uKCl7XG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBtYXRlcmlhbC5jb21wb25lbnRzLndoaXRlZnJhbWVcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMud2hpdGVmcmFtZScsIFtdKTtcblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLmF1dG9jb21wbGV0ZScpXG4gICAgLmNvbnRyb2xsZXIoJ01kQXV0b2NvbXBsZXRlQ3RybCcsIE1kQXV0b2NvbXBsZXRlQ3RybCk7XG5cbnZhciBJVEVNX0hFSUdIVCA9IDQxLFxuICAgIE1BWF9IRUlHSFQgPSA1LjUgKiBJVEVNX0hFSUdIVCxcbiAgICBNRU5VX1BBRERJTkcgPSA4O1xuXG5mdW5jdGlvbiBNZEF1dG9jb21wbGV0ZUN0cmwgKCRzY29wZSwgJGVsZW1lbnQsICRtZFV0aWwsICRtZENvbnN0YW50LCAkdGltZW91dCwgJG1kVGhlbWluZywgJHdpbmRvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFuaW1hdGUsICRyb290RWxlbWVudCwgJGF0dHJzKSB7XG4gIC8vLS0gcHJpdmF0ZSB2YXJpYWJsZXNcbiAgdmFyIGN0cmwgICAgICA9IHRoaXMsXG4gICAgICBpdGVtUGFydHMgPSAkc2NvcGUuaXRlbXNFeHByLnNwbGl0KC8gaW4gL2kpLFxuICAgICAgaXRlbUV4cHIgID0gaXRlbVBhcnRzWzFdLFxuICAgICAgZWxlbWVudHMgID0gbnVsbCxcbiAgICAgIHByb21pc2UgICA9IG51bGwsXG4gICAgICBjYWNoZSAgICAgPSB7fSxcbiAgICAgIG5vQmx1ciAgICA9IGZhbHNlLFxuICAgICAgc2VsZWN0ZWRJdGVtV2F0Y2hlcnMgPSBbXSxcbiAgICAgIGhhc0ZvY3VzICA9IGZhbHNlLFxuICAgICAgbGFzdENvdW50ID0gMDtcblxuICAvLy0tIHB1YmxpYyB2YXJpYWJsZXMgd2l0aCBoYW5kbGVyc1xuICBkZWZpbmVQcm9wZXJ0eSgnaGlkZGVuJywgaGFuZGxlSGlkZGVuQ2hhbmdlLCB0cnVlKTtcblxuICAvLy0tIHB1YmxpYyB2YXJpYWJsZXNcbiAgY3RybC5zY29wZSAgICAgID0gJHNjb3BlO1xuICBjdHJsLnBhcmVudCAgICAgPSAkc2NvcGUuJHBhcmVudDtcbiAgY3RybC5pdGVtTmFtZSAgID0gaXRlbVBhcnRzWzBdO1xuICBjdHJsLm1hdGNoZXMgICAgPSBbXTtcbiAgY3RybC5sb2FkaW5nICAgID0gZmFsc2U7XG4gIGN0cmwuaGlkZGVuICAgICA9IHRydWU7XG4gIGN0cmwuaW5kZXggICAgICA9IG51bGw7XG4gIGN0cmwubWVzc2FnZXMgICA9IFtdO1xuICBjdHJsLmlkICAgICAgICAgPSAkbWRVdGlsLm5leHRVaWQoKTtcbiAgY3RybC5pc0Rpc2FibGVkID0gbnVsbDtcbiAgY3RybC5pc1JlcXVpcmVkID0gbnVsbDtcblxuICAvLy0tIHB1YmxpYyBtZXRob2RzXG4gIGN0cmwua2V5ZG93biAgICA9IGtleWRvd247XG4gIGN0cmwuYmx1ciAgICAgICA9IGJsdXI7XG4gIGN0cmwuZm9jdXMgICAgICA9IGZvY3VzO1xuICBjdHJsLmNsZWFyICAgICAgPSBjbGVhclZhbHVlO1xuICBjdHJsLnNlbGVjdCAgICAgPSBzZWxlY3Q7XG4gIGN0cmwubGlzdEVudGVyICA9IG9uTGlzdEVudGVyO1xuICBjdHJsLmxpc3RMZWF2ZSAgPSBvbkxpc3RMZWF2ZTtcbiAgY3RybC5tb3VzZVVwICAgID0gb25Nb3VzZXVwO1xuICBjdHJsLmdldEN1cnJlbnREaXNwbGF5VmFsdWUgICAgICAgICA9IGdldEN1cnJlbnREaXNwbGF5VmFsdWU7XG4gIGN0cmwucmVnaXN0ZXJTZWxlY3RlZEl0ZW1XYXRjaGVyICAgID0gcmVnaXN0ZXJTZWxlY3RlZEl0ZW1XYXRjaGVyO1xuICBjdHJsLnVucmVnaXN0ZXJTZWxlY3RlZEl0ZW1XYXRjaGVyICA9IHVucmVnaXN0ZXJTZWxlY3RlZEl0ZW1XYXRjaGVyO1xuXG4gIHJldHVybiBpbml0KCk7XG5cbiAgLy8tLSBpbml0aWFsaXphdGlvbiBtZXRob2RzXG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgdGhlIGNvbnRyb2xsZXIsIHNldHVwIHdhdGNoZXJzLCBnYXRoZXIgZWxlbWVudHNcbiAgICovXG4gIGZ1bmN0aW9uIGluaXQgKCkge1xuICAgICRtZFV0aWwuaW5pdE9wdGlvbmFsUHJvcGVydGllcygkc2NvcGUsICRhdHRycywgeyBzZWFyY2hUZXh0OiBudWxsLCBzZWxlY3RlZEl0ZW06IG51bGwgfSApO1xuICAgICRtZFRoZW1pbmcoJGVsZW1lbnQpO1xuICAgIGNvbmZpZ3VyZVdhdGNoZXJzKCk7XG4gICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgZ2F0aGVyRWxlbWVudHMoKTtcbiAgICAgIGZvY3VzRWxlbWVudCgpO1xuICAgICAgbW92ZURyb3Bkb3duKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgZHJvcGRvd24ncyBwb3NpdGlvbiBhbmQgYXBwbGllcyB0aGUgbmV3IHN0eWxlcyB0byB0aGUgbWVudSBlbGVtZW50XG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgZnVuY3Rpb24gcG9zaXRpb25Ecm9wZG93biAoKSB7XG4gICAgaWYgKCFlbGVtZW50cykgcmV0dXJuICR0aW1lb3V0KHBvc2l0aW9uRHJvcGRvd24sIDAsIGZhbHNlKTtcbiAgICB2YXIgaHJlY3QgID0gZWxlbWVudHMud3JhcC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgdnJlY3QgID0gZWxlbWVudHMuc25hcC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgcm9vdCAgID0gZWxlbWVudHMucm9vdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgdG9wICAgID0gdnJlY3QuYm90dG9tIC0gcm9vdC50b3AsXG4gICAgICAgIGJvdCAgICA9IHJvb3QuYm90dG9tIC0gdnJlY3QudG9wLFxuICAgICAgICBsZWZ0ICAgPSBocmVjdC5sZWZ0IC0gcm9vdC5sZWZ0LFxuICAgICAgICB3aWR0aCAgPSBocmVjdC53aWR0aCxcbiAgICAgICAgc3R5bGVzID0ge1xuICAgICAgICAgIGxlZnQ6ICAgICBsZWZ0ICsgJ3B4JyxcbiAgICAgICAgICBtaW5XaWR0aDogd2lkdGggKyAncHgnLFxuICAgICAgICAgIG1heFdpZHRoOiBNYXRoLm1heChocmVjdC5yaWdodCAtIHJvb3QubGVmdCwgcm9vdC5yaWdodCAtIGhyZWN0LmxlZnQpIC0gTUVOVV9QQURESU5HICsgJ3B4J1xuICAgICAgICB9O1xuICAgIGlmICh0b3AgPiBib3QgJiYgcm9vdC5oZWlnaHQgLSBocmVjdC5ib3R0b20gLSBNRU5VX1BBRERJTkcgPCBNQVhfSEVJR0hUKSB7XG4gICAgICBzdHlsZXMudG9wID0gJ2F1dG8nO1xuICAgICAgc3R5bGVzLmJvdHRvbSA9IGJvdCArICdweCc7XG4gICAgICBzdHlsZXMubWF4SGVpZ2h0ID0gTWF0aC5taW4oTUFYX0hFSUdIVCwgaHJlY3QudG9wIC0gcm9vdC50b3AgLSBNRU5VX1BBRERJTkcpICsgJ3B4JztcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzLnRvcCA9IHRvcCArICdweCc7XG4gICAgICBzdHlsZXMuYm90dG9tID0gJ2F1dG8nO1xuICAgICAgc3R5bGVzLm1heEhlaWdodCA9IE1hdGgubWluKE1BWF9IRUlHSFQsIHJvb3QuYm90dG9tIC0gaHJlY3QuYm90dG9tIC0gTUVOVV9QQURESU5HKSArICdweCc7XG4gICAgfVxuICAgIGVsZW1lbnRzLiQudWwuY3NzKHN0eWxlcyk7XG4gICAgJHRpbWVvdXQoY29ycmVjdEhvcml6b250YWxBbGlnbm1lbnQsIDAsIGZhbHNlKTtcblxuICAgIC8qKlxuICAgICAqIE1ha2VzIHN1cmUgdGhhdCB0aGUgbWVudSBkb2Vzbid0IGdvIG9mZiBvZiB0aGUgc2NyZWVuIG9uIGVpdGhlciBzaWRlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcnJlY3RIb3Jpem9udGFsQWxpZ25tZW50ICgpIHtcbiAgICAgIHZhciBkcm9wZG93biA9IGVsZW1lbnRzLnVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgIHN0eWxlcyAgID0ge307XG4gICAgICBpZiAoZHJvcGRvd24ucmlnaHQgPiByb290LnJpZ2h0IC0gTUVOVV9QQURESU5HKSB7XG4gICAgICAgIHN0eWxlcy5sZWZ0ID0gKGhyZWN0LnJpZ2h0IC0gZHJvcGRvd24ud2lkdGgpICsgJ3B4JztcbiAgICAgIH1cbiAgICAgIGVsZW1lbnRzLiQudWwuY3NzKHN0eWxlcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1vdmVzIHRoZSBkcm9wZG93biBtZW51IHRvIHRoZSBib2R5IHRhZyBpbiBvcmRlciB0byBhdm9pZCB6LWluZGV4IGFuZCBvdmVyZmxvdyBpc3N1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBtb3ZlRHJvcGRvd24gKCkge1xuICAgIGlmICghZWxlbWVudHMuJC5yb290Lmxlbmd0aCkgcmV0dXJuO1xuICAgICRtZFRoZW1pbmcoZWxlbWVudHMuJC51bCk7XG4gICAgZWxlbWVudHMuJC51bC5kZXRhY2goKTtcbiAgICBlbGVtZW50cy4kLnJvb3QuYXBwZW5kKGVsZW1lbnRzLiQudWwpO1xuICAgIGlmICgkYW5pbWF0ZS5waW4pICRhbmltYXRlLnBpbihlbGVtZW50cy4kLnVsLCAkcm9vdEVsZW1lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIGZvY3VzIHRvIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKi9cbiAgZnVuY3Rpb24gZm9jdXNFbGVtZW50ICgpIHtcbiAgICBpZiAoJHNjb3BlLmF1dG9mb2N1cykgZWxlbWVudHMuaW5wdXQuZm9jdXMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHVwIGFueSB3YXRjaGVycyB1c2VkIGJ5IGF1dG9jb21wbGV0ZVxuICAgKi9cbiAgZnVuY3Rpb24gY29uZmlndXJlV2F0Y2hlcnMgKCkge1xuICAgIHZhciB3YWl0ID0gcGFyc2VJbnQoJHNjb3BlLmRlbGF5LCAxMCkgfHwgMDtcbiAgICAkYXR0cnMuJG9ic2VydmUoJ2Rpc2FibGVkJywgZnVuY3Rpb24gKHZhbHVlKSB7IGN0cmwuaXNEaXNhYmxlZCA9IHZhbHVlOyB9KTtcbiAgICAkYXR0cnMuJG9ic2VydmUoJ3JlcXVpcmVkJywgZnVuY3Rpb24gKHZhbHVlKSB7IGN0cmwuaXNSZXF1aXJlZCA9IHZhbHVlICE9PSBudWxsOyB9KTtcbiAgICAkc2NvcGUuJHdhdGNoKCdzZWFyY2hUZXh0Jywgd2FpdCA/ICRtZFV0aWwuZGVib3VuY2UoaGFuZGxlU2VhcmNoVGV4dCwgd2FpdCkgOiBoYW5kbGVTZWFyY2hUZXh0KTtcbiAgICByZWdpc3RlclNlbGVjdGVkSXRlbVdhdGNoZXIoc2VsZWN0ZWRJdGVtQ2hhbmdlKTtcbiAgICAkc2NvcGUuJHdhdGNoKCdzZWxlY3RlZEl0ZW0nLCBoYW5kbGVTZWxlY3RlZEl0ZW1DaGFuZ2UpO1xuICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vbigncmVzaXplJywgcG9zaXRpb25Ecm9wZG93bik7XG4gICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBjbGVhbnVwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFueSBldmVudHMgb3IgbGVmdG92ZXIgZWxlbWVudHMgY3JlYXRlZCBieSB0aGlzIGNvbnRyb2xsZXJcbiAgICovXG4gIGZ1bmN0aW9uIGNsZWFudXAgKCkge1xuICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vZmYoJ3Jlc2l6ZScsIHBvc2l0aW9uRHJvcGRvd24pO1xuICAgIGVsZW1lbnRzLiQudWwucmVtb3ZlKCk7XG4gIH1cblxuICAvKipcbiAgICogR2F0aGVycyBhbGwgb2YgdGhlIGVsZW1lbnRzIG5lZWRlZCBmb3IgdGhpcyBjb250cm9sbGVyXG4gICAqL1xuICBmdW5jdGlvbiBnYXRoZXJFbGVtZW50cyAoKSB7XG4gICAgZWxlbWVudHMgPSB7XG4gICAgICBtYWluOiAgJGVsZW1lbnRbMF0sXG4gICAgICB1bDogICAgJGVsZW1lbnQuZmluZCgndWwnKVswXSxcbiAgICAgIGlucHV0OiAkZWxlbWVudC5maW5kKCdpbnB1dCcpWzBdLFxuICAgICAgd3JhcDogICRlbGVtZW50LmZpbmQoJ21kLWF1dG9jb21wbGV0ZS13cmFwJylbMF0sXG4gICAgICByb290OiAgZG9jdW1lbnQuYm9keVxuICAgIH07XG4gICAgZWxlbWVudHMubGkgPSBlbGVtZW50cy51bC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbGknKTtcbiAgICBlbGVtZW50cy5zbmFwID0gZ2V0U25hcFRhcmdldCgpO1xuICAgIGVsZW1lbnRzLiQgPSBnZXRBbmd1bGFyRWxlbWVudHMoZWxlbWVudHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIHRoZSBlbGVtZW50IHRoYXQgdGhlIG1lbnUgd2lsbCBiYXNlIGl0cyBwb3NpdGlvbiBvblxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIGZ1bmN0aW9uIGdldFNuYXBUYXJnZXQgKCkge1xuICAgIGZvciAodmFyIGVsZW1lbnQgPSAkZWxlbWVudDsgZWxlbWVudC5sZW5ndGg7IGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudCgpKSB7XG4gICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoZWxlbWVudC5hdHRyKCdtZC1hdXRvY29tcGxldGUtc25hcCcpKSkgcmV0dXJuIGVsZW1lbnRbMF07XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50cy53cmFwO1xuICB9XG5cbiAgLyoqXG4gICAqIEdhdGhlcnMgYW5ndWxhci13cmFwcGVkIHZlcnNpb25zIG9mIGVhY2ggZWxlbWVudFxuICAgKiBAcGFyYW0gZWxlbWVudHNcbiAgICogQHJldHVybnMge3t9fVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0QW5ndWxhckVsZW1lbnRzIChlbGVtZW50cykge1xuICAgIHZhciBvYmogPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gZWxlbWVudHMpIHtcbiAgICAgIG9ialtrZXldID0gYW5ndWxhci5lbGVtZW50KGVsZW1lbnRzW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgLy8tLSBldmVudC9jaGFuZ2UgaGFuZGxlcnNcblxuICAvKipcbiAgICogSGFuZGxlcyBjaGFuZ2VzIHRvIHRoZSBgaGlkZGVuYCBwcm9wZXJ0eS5cbiAgICogQHBhcmFtIGhpZGRlblxuICAgKiBAcGFyYW0gb2xkSGlkZGVuXG4gICAqL1xuICBmdW5jdGlvbiBoYW5kbGVIaWRkZW5DaGFuZ2UgKGhpZGRlbiwgb2xkSGlkZGVuKSB7XG4gICAgaWYgKCFoaWRkZW4gJiYgb2xkSGlkZGVuKSBwb3NpdGlvbkRyb3Bkb3duKCk7XG4gICAgaWYgKCFoaWRkZW4pIHtcbiAgICAgIGlmIChlbGVtZW50cykgJHRpbWVvdXQoZnVuY3Rpb24gKCkgeyAkbWRVdGlsLmRpc2FibGVTY3JvbGxBcm91bmQoZWxlbWVudHMudWwpOyB9LCAwLCBmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRtZFV0aWwuZW5hYmxlU2Nyb2xsaW5nKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFdoZW4gdGhlIHVzZXIgbW91c2VzIG92ZXIgdGhlIGRyb3Bkb3duIG1lbnUsIGlnbm9yZSBibHVyIGV2ZW50cy5cbiAgICovXG4gIGZ1bmN0aW9uIG9uTGlzdEVudGVyICgpIHtcbiAgICBub0JsdXIgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZW4gdGhlIHVzZXIncyBtb3VzZSBsZWF2ZXMgdGhlIG1lbnUsIGJsdXIgZXZlbnRzIG1heSBoaWRlIHRoZSBtZW51IGFnYWluLlxuICAgKi9cbiAgZnVuY3Rpb24gb25MaXN0TGVhdmUgKCkge1xuICAgIG5vQmx1ciA9IGZhbHNlO1xuICAgIGlmICghaGFzRm9jdXMpIGN0cmwuaGlkZGVuID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIHRoZSBtb3VzZSBidXR0b24gaXMgcmVsZWFzZWQsIHNlbmQgZm9jdXMgYmFjayB0byB0aGUgaW5wdXQgZmllbGQuXG4gICAqL1xuICBmdW5jdGlvbiBvbk1vdXNldXAgKCkge1xuICAgIGVsZW1lbnRzLmlucHV0LmZvY3VzKCk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBjaGFuZ2VzIHRvIHRoZSBzZWxlY3RlZCBpdGVtLlxuICAgKiBAcGFyYW0gc2VsZWN0ZWRJdGVtXG4gICAqIEBwYXJhbSBwcmV2aW91c1NlbGVjdGVkSXRlbVxuICAgKi9cbiAgZnVuY3Rpb24gc2VsZWN0ZWRJdGVtQ2hhbmdlIChzZWxlY3RlZEl0ZW0sIHByZXZpb3VzU2VsZWN0ZWRJdGVtKSB7XG4gICAgaWYgKHNlbGVjdGVkSXRlbSkge1xuICAgICAgJHNjb3BlLnNlYXJjaFRleHQgPSBnZXREaXNwbGF5VmFsdWUoc2VsZWN0ZWRJdGVtKTtcbiAgICB9XG4gICAgaWYgKCRzY29wZS5pdGVtQ2hhbmdlICYmIHNlbGVjdGVkSXRlbSAhPT0gcHJldmlvdXNTZWxlY3RlZEl0ZW0pXG4gICAgICAkc2NvcGUuaXRlbUNoYW5nZShnZXRJdGVtU2NvcGUoc2VsZWN0ZWRJdGVtKSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgYW55IGV4dGVybmFsIHdhdGNoZXJzIGxpc3RlbmluZyBmb3IgdGhlIHNlbGVjdGVkIGl0ZW0uICBVc2VkIGluIGNvbmp1bmN0aW9uIHdpdGhcbiAgICogYHJlZ2lzdGVyU2VsZWN0ZWRJdGVtV2F0Y2hlcmAuXG4gICAqIEBwYXJhbSBzZWxlY3RlZEl0ZW1cbiAgICogQHBhcmFtIHByZXZpb3VzU2VsZWN0ZWRJdGVtXG4gICAqL1xuICBmdW5jdGlvbiBoYW5kbGVTZWxlY3RlZEl0ZW1DaGFuZ2Uoc2VsZWN0ZWRJdGVtLCBwcmV2aW91c1NlbGVjdGVkSXRlbSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZWN0ZWRJdGVtV2F0Y2hlcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHNlbGVjdGVkSXRlbVdhdGNoZXJzW2ldKHNlbGVjdGVkSXRlbSwgcHJldmlvdXNTZWxlY3RlZEl0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBzZWxlY3RlZCBpdGVtIGNoYW5nZXMuXG4gICAqIEBwYXJhbSBjYlxuICAgKi9cbiAgZnVuY3Rpb24gcmVnaXN0ZXJTZWxlY3RlZEl0ZW1XYXRjaGVyKGNiKSB7XG4gICAgaWYgKHNlbGVjdGVkSXRlbVdhdGNoZXJzLmluZGV4T2YoY2IpID09IC0xKSB7XG4gICAgICBzZWxlY3RlZEl0ZW1XYXRjaGVycy5wdXNoKGNiKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVW5yZWdpc3RlciBhIGZ1bmN0aW9uIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBmb3Igc2VsZWN0ZWQgaXRlbSBjaGFuZ2VzLlxuICAgKiBAcGFyYW0gY2JcbiAgICovXG4gIGZ1bmN0aW9uIHVucmVnaXN0ZXJTZWxlY3RlZEl0ZW1XYXRjaGVyKGNiKSB7XG4gICAgdmFyIGkgPSBzZWxlY3RlZEl0ZW1XYXRjaGVycy5pbmRleE9mKGNiKTtcbiAgICBpZiAoaSAhPSAtMSkge1xuICAgICAgc2VsZWN0ZWRJdGVtV2F0Y2hlcnMuc3BsaWNlKGksIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGNoYW5nZXMgdG8gdGhlIHNlYXJjaFRleHQgcHJvcGVydHkuXG4gICAqIEBwYXJhbSBzZWFyY2hUZXh0XG4gICAqIEBwYXJhbSBwcmV2aW91c1NlYXJjaFRleHRcbiAgICovXG4gIGZ1bmN0aW9uIGhhbmRsZVNlYXJjaFRleHQgKHNlYXJjaFRleHQsIHByZXZpb3VzU2VhcmNoVGV4dCkge1xuICAgIGN0cmwuaW5kZXggPSBnZXREZWZhdWx0SW5kZXgoKTtcbiAgICAvLy0tIGRvIG5vdGhpbmcgb24gaW5pdFxuICAgIGlmIChzZWFyY2hUZXh0ID09PSBwcmV2aW91c1NlYXJjaFRleHQpIHJldHVybjtcbiAgICAvLy0tIGNsZWFyIHNlbGVjdGVkIGl0ZW0gaWYgc2VhcmNoIHRleHQgbm8gbG9uZ2VyIG1hdGNoZXMgaXRcbiAgICBpZiAoc2VhcmNoVGV4dCAhPT0gZ2V0RGlzcGxheVZhbHVlKCRzY29wZS5zZWxlY3RlZEl0ZW0pKSAkc2NvcGUuc2VsZWN0ZWRJdGVtID0gbnVsbDtcbiAgICBlbHNlIHJldHVybjtcbiAgICAvLy0tIHRyaWdnZXIgY2hhbmdlIGV2ZW50IGlmIGF2YWlsYWJsZVxuICAgIGlmICgkc2NvcGUudGV4dENoYW5nZSAmJiBzZWFyY2hUZXh0ICE9PSBwcmV2aW91c1NlYXJjaFRleHQpXG4gICAgICAkc2NvcGUudGV4dENoYW5nZShnZXRJdGVtU2NvcGUoJHNjb3BlLnNlbGVjdGVkSXRlbSkpO1xuICAgIC8vLS0gY2FuY2VsIHJlc3VsdHMgaWYgc2VhcmNoIHRleHQgaXMgbm90IGxvbmcgZW5vdWdoXG4gICAgaWYgKCFpc01pbkxlbmd0aE1ldCgpKSB7XG4gICAgICBjdHJsLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgIGN0cmwubWF0Y2hlcyA9IFtdO1xuICAgICAgY3RybC5oaWRkZW4gPSBzaG91bGRIaWRlKCk7XG4gICAgICB1cGRhdGVNZXNzYWdlcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVRdWVyeSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGlucHV0IGJsdXIgZXZlbnQsIGRldGVybWluZXMgaWYgdGhlIGRyb3Bkb3duIHNob3VsZCBoaWRlLlxuICAgKi9cbiAgZnVuY3Rpb24gYmx1ciAoKSB7XG4gICAgaGFzRm9jdXMgPSBmYWxzZTtcbiAgICBpZiAoIW5vQmx1cikgY3RybC5oaWRkZW4gPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgaW5wdXQgZm9jdXMgZXZlbnQsIGRldGVybWluZXMgaWYgdGhlIGRyb3Bkb3duIHNob3VsZCBzaG93LlxuICAgKi9cbiAgZnVuY3Rpb24gZm9jdXMgKCkge1xuICAgIGhhc0ZvY3VzID0gdHJ1ZTtcbiAgICAvLy0tIGlmIHNlYXJjaFRleHQgaXMgbnVsbCwgbGV0J3MgZm9yY2UgaXQgdG8gYmUgYSBzdHJpbmdcbiAgICBpZiAoIWFuZ3VsYXIuaXNTdHJpbmcoJHNjb3BlLnNlYXJjaFRleHQpKSAkc2NvcGUuc2VhcmNoVGV4dCA9ICcnO1xuICAgIGlmICgkc2NvcGUubWluTGVuZ3RoID4gMCkgcmV0dXJuO1xuICAgIGN0cmwuaGlkZGVuID0gc2hvdWxkSGlkZSgpO1xuICAgIGlmICghY3RybC5oaWRkZW4pIGhhbmRsZVF1ZXJ5KCk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBrZXlib2FyZCBpbnB1dC5cbiAgICogQHBhcmFtIGV2ZW50XG4gICAqL1xuICBmdW5jdGlvbiBrZXlkb3duIChldmVudCkge1xuICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgY2FzZSAkbWRDb25zdGFudC5LRVlfQ09ERS5ET1dOX0FSUk9XOlxuICAgICAgICBpZiAoY3RybC5sb2FkaW5nKSByZXR1cm47XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGN0cmwuaW5kZXggPSBNYXRoLm1pbihjdHJsLmluZGV4ICsgMSwgY3RybC5tYXRjaGVzLmxlbmd0aCAtIDEpO1xuICAgICAgICB1cGRhdGVTY3JvbGwoKTtcbiAgICAgICAgdXBkYXRlTWVzc2FnZXMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICRtZENvbnN0YW50LktFWV9DT0RFLlVQX0FSUk9XOlxuICAgICAgICBpZiAoY3RybC5sb2FkaW5nKSByZXR1cm47XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGN0cmwuaW5kZXggPSBjdHJsLmluZGV4IDwgMCA/IGN0cmwubWF0Y2hlcy5sZW5ndGggLSAxIDogTWF0aC5tYXgoMCwgY3RybC5pbmRleCAtIDEpO1xuICAgICAgICB1cGRhdGVTY3JvbGwoKTtcbiAgICAgICAgdXBkYXRlTWVzc2FnZXMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICRtZENvbnN0YW50LktFWV9DT0RFLlRBQjpcbiAgICAgIGNhc2UgJG1kQ29uc3RhbnQuS0VZX0NPREUuRU5URVI6XG4gICAgICAgIGlmIChjdHJsLmhpZGRlbiB8fCBjdHJsLmxvYWRpbmcgfHwgY3RybC5pbmRleCA8IDAgfHwgY3RybC5tYXRjaGVzLmxlbmd0aCA8IDEpIHJldHVybjtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgc2VsZWN0KGN0cmwuaW5kZXgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJG1kQ29uc3RhbnQuS0VZX0NPREUuRVNDQVBFOlxuICAgICAgICBjdHJsLm1hdGNoZXMgPSBbXTtcbiAgICAgICAgY3RybC5oaWRkZW4gPSB0cnVlO1xuICAgICAgICBjdHJsLmluZGV4ID0gZ2V0RGVmYXVsdEluZGV4KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gIH1cblxuICAvLy0tIGdldHRlcnNcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbWluaW11bSBsZW5ndGggbmVlZGVkIHRvIGRpc3BsYXkgdGhlIGRyb3Bkb3duLlxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIGZ1bmN0aW9uIGdldE1pbkxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIGFuZ3VsYXIuaXNOdW1iZXIoJHNjb3BlLm1pbkxlbmd0aCkgPyAkc2NvcGUubWluTGVuZ3RoIDogMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkaXNwbGF5IHZhbHVlIGZvciBhbiBpdGVtLlxuICAgKiBAcGFyYW0gaXRlbVxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIGZ1bmN0aW9uIGdldERpc3BsYXlWYWx1ZSAoaXRlbSkge1xuICAgIHJldHVybiAoaXRlbSAmJiAkc2NvcGUuaXRlbVRleHQpID8gJHNjb3BlLml0ZW1UZXh0KGdldEl0ZW1TY29wZShpdGVtKSkgOiBpdGVtO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxvY2FscyBvYmplY3QgZm9yIGNvbXBpbGluZyBpdGVtIHRlbXBsYXRlcy5cbiAgICogQHBhcmFtIGl0ZW1cbiAgICogQHJldHVybnMge3t9fVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0SXRlbVNjb3BlIChpdGVtKSB7XG4gICAgaWYgKCFpdGVtKSByZXR1cm47XG4gICAgdmFyIGxvY2FscyA9IHt9O1xuICAgIGlmIChjdHJsLml0ZW1OYW1lKSBsb2NhbHNbY3RybC5pdGVtTmFtZV0gPSBpdGVtO1xuICAgIHJldHVybiBsb2NhbHM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGVmYXVsdCBpbmRleCBiYXNlZCBvbiB3aGV0aGVyIG9yIG5vdCBhdXRvc2VsZWN0IGlzIGVuYWJsZWQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBmdW5jdGlvbiBnZXREZWZhdWx0SW5kZXggKCkge1xuICAgIHJldHVybiAkc2NvcGUuYXV0b3NlbGVjdCA/IDAgOiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBtZW51IHNob3VsZCBiZSBoaWRkZW4uXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gc2hvdWxkSGlkZSAoKSB7XG4gICAgaWYgKCFpc01pbkxlbmd0aE1ldCgpKSByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkaXNwbGF5IHZhbHVlIG9mIHRoZSBjdXJyZW50IGl0ZW0uXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0Q3VycmVudERpc3BsYXlWYWx1ZSAoKSB7XG4gICAgcmV0dXJuIGdldERpc3BsYXlWYWx1ZShjdHJsLm1hdGNoZXNbY3RybC5pbmRleF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIG1pbmltdW0gbGVuZ3RoIGlzIG1ldCBieSB0aGUgc2VhcmNoIHRleHQuXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgZnVuY3Rpb24gaXNNaW5MZW5ndGhNZXQgKCkge1xuICAgIHJldHVybiBhbmd1bGFyLmlzRGVmaW5lZCgkc2NvcGUuc2VhcmNoVGV4dCkgJiYgJHNjb3BlLnNlYXJjaFRleHQubGVuZ3RoID49IGdldE1pbkxlbmd0aCgpO1xuICB9XG5cbiAgLy8tLSBhY3Rpb25zXG5cbiAgLyoqXG4gICAqIERlZmluZXMgYSBwdWJsaWMgcHJvcGVydHkgd2l0aCBhIGhhbmRsZXIgYW5kIGEgZGVmYXVsdCB2YWx1ZS5cbiAgICogQHBhcmFtIGtleVxuICAgKiBAcGFyYW0gaGFuZGxlclxuICAgKiBAcGFyYW0gdmFsdWVcbiAgICovXG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5IChrZXksIGhhbmRsZXIsIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0cmwsIGtleSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWx1ZTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICBoYW5kbGVyKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0cyB0aGUgaXRlbSBhdCB0aGUgZ2l2ZW4gaW5kZXguXG4gICAqIEBwYXJhbSBpbmRleFxuICAgKi9cbiAgZnVuY3Rpb24gc2VsZWN0IChpbmRleCkge1xuICAgICRzY29wZS5zZWxlY3RlZEl0ZW0gPSBjdHJsLm1hdGNoZXNbaW5kZXhdO1xuICAgIGN0cmwuaGlkZGVuID0gdHJ1ZTtcbiAgICBjdHJsLmluZGV4ID0gMDtcbiAgICBjdHJsLm1hdGNoZXMgPSBbXTtcbiAgICAvLy0tIGZvcmNlIGZvcm0gdG8gdXBkYXRlIHN0YXRlIGZvciB2YWxpZGF0aW9uXG4gICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgZWxlbWVudHMuJC5pbnB1dC5jb250cm9sbGVyKCduZ01vZGVsJykuJHNldFZpZXdWYWx1ZShnZXREaXNwbGF5VmFsdWUoJHNjb3BlLnNlbGVjdGVkSXRlbSkgfHxcbiAgICAgICAgICAkc2NvcGUuc2VhcmNoVGV4dCk7XG4gICAgICBjdHJsLmhpZGRlbiA9IHRydWU7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSBzZWFyY2hUZXh0IHZhbHVlIGFuZCBzZWxlY3RlZCBpdGVtLlxuICAgKi9cbiAgZnVuY3Rpb24gY2xlYXJWYWx1ZSAoKSB7XG4gICAgJHNjb3BlLnNlYXJjaFRleHQgPSAnJztcbiAgICBzZWxlY3QoLTEpO1xuXG4gICAgLy8gUGVyIGh0dHA6Ly93d3cudzNzY2hvb2xzLmNvbS9qc3JlZi9ldmVudF9vbmlucHV0LmFzcFxuICAgIHZhciBldmVudE9iaiA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgIGV2ZW50T2JqLmluaXRDdXN0b21FdmVudCgnaW5wdXQnLCB0cnVlLCB0cnVlLCB7dmFsdWU6ICRzY29wZS5zZWFyY2hUZXh0fSk7XG4gICAgZWxlbWVudHMuaW5wdXQuZGlzcGF0Y2hFdmVudChldmVudE9iaik7XG5cbiAgICBlbGVtZW50cy5pbnB1dC5mb2N1cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgdGhlIHJlc3VsdHMgZm9yIHRoZSBwcm92aWRlZCBzZWFyY2ggdGV4dC5cbiAgICogQHBhcmFtIHNlYXJjaFRleHRcbiAgICovXG4gIGZ1bmN0aW9uIGZldGNoUmVzdWx0cyAoc2VhcmNoVGV4dCkge1xuICAgIHZhciBpdGVtcyA9ICRzY29wZS4kcGFyZW50LiRldmFsKGl0ZW1FeHByKSxcbiAgICAgICAgdGVybSA9IHNlYXJjaFRleHQudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoYW5ndWxhci5pc0FycmF5KGl0ZW1zKSkge1xuICAgICAgaGFuZGxlUmVzdWx0cyhpdGVtcyk7XG4gICAgfSBlbHNlIGlmIChpdGVtcykge1xuICAgICAgY3RybC5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgIGlmIChpdGVtcy5zdWNjZXNzKSBpdGVtcy5zdWNjZXNzKGhhbmRsZVJlc3VsdHMpO1xuICAgICAgaWYgKGl0ZW1zLnRoZW4pICAgIGl0ZW1zLnRoZW4oaGFuZGxlUmVzdWx0cyk7XG4gICAgICBpZiAoaXRlbXMuZXJyb3IpICAgaXRlbXMuZXJyb3IoZnVuY3Rpb24gKCkgeyBjdHJsLmxvYWRpbmcgPSBmYWxzZTsgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZVJlc3VsdHMgKG1hdGNoZXMpIHtcbiAgICAgIGNhY2hlW3Rlcm1dID0gbWF0Y2hlcztcbiAgICAgIGlmIChzZWFyY2hUZXh0ICE9PSAkc2NvcGUuc2VhcmNoVGV4dCkgcmV0dXJuOyAvLy0tIGp1c3QgY2FjaGUgdGhlIHJlc3VsdHMgaWYgb2xkIHJlcXVlc3RcbiAgICAgIGN0cmwubG9hZGluZyA9IGZhbHNlO1xuICAgICAgcHJvbWlzZSA9IG51bGw7XG4gICAgICBjdHJsLm1hdGNoZXMgPSBtYXRjaGVzO1xuICAgICAgY3RybC5oaWRkZW4gPSBzaG91bGRIaWRlKCk7XG4gICAgICB1cGRhdGVNZXNzYWdlcygpO1xuICAgICAgcG9zaXRpb25Ecm9wZG93bigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBBUklBIG1lc3NhZ2VzXG4gICAqL1xuICBmdW5jdGlvbiB1cGRhdGVNZXNzYWdlcyAoKSB7XG4gICAgY3RybC5tZXNzYWdlcyA9IFsgZ2V0Q291bnRNZXNzYWdlKCksIGdldEN1cnJlbnREaXNwbGF5VmFsdWUoKSBdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIEFSSUEgbWVzc2FnZSBmb3IgaG93IG1hbnkgcmVzdWx0cyBtYXRjaCB0aGUgY3VycmVudCBxdWVyeS5cbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuICBmdW5jdGlvbiBnZXRDb3VudE1lc3NhZ2UgKCkge1xuICAgIGlmIChsYXN0Q291bnQgPT09IGN0cmwubWF0Y2hlcy5sZW5ndGgpIHJldHVybiAnJztcbiAgICBsYXN0Q291bnQgPSBjdHJsLm1hdGNoZXMubGVuZ3RoO1xuICAgIHN3aXRjaCAoY3RybC5tYXRjaGVzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOiAgcmV0dXJuICdUaGVyZSBhcmUgbm8gbWF0Y2hlcyBhdmFpbGFibGUuJztcbiAgICAgIGNhc2UgMTogIHJldHVybiAnVGhlcmUgaXMgMSBtYXRjaCBhdmFpbGFibGUuJztcbiAgICAgIGRlZmF1bHQ6IHJldHVybiAnVGhlcmUgYXJlICcgKyBjdHJsLm1hdGNoZXMubGVuZ3RoICsgJyBtYXRjaGVzIGF2YWlsYWJsZS4nO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtlcyBzdXJlIHRoYXQgdGhlIGZvY3VzZWQgZWxlbWVudCBpcyB3aXRoaW4gdmlldy5cbiAgICovXG4gIGZ1bmN0aW9uIHVwZGF0ZVNjcm9sbCAoKSB7XG4gICAgaWYgKCFlbGVtZW50cy5saVtjdHJsLmluZGV4XSkgcmV0dXJuO1xuICAgIHZhciBsaSAgPSBlbGVtZW50cy5saVtjdHJsLmluZGV4XSxcbiAgICAgICAgdG9wID0gbGkub2Zmc2V0VG9wLFxuICAgICAgICBib3QgPSB0b3AgKyBsaS5vZmZzZXRIZWlnaHQsXG4gICAgICAgIGhndCA9IGVsZW1lbnRzLnVsLmNsaWVudEhlaWdodDtcbiAgICBpZiAodG9wIDwgZWxlbWVudHMudWwuc2Nyb2xsVG9wKSB7XG4gICAgICBlbGVtZW50cy51bC5zY3JvbGxUb3AgPSB0b3A7XG4gICAgfSBlbHNlIGlmIChib3QgPiBlbGVtZW50cy51bC5zY3JvbGxUb3AgKyBoZ3QpIHtcbiAgICAgIGVsZW1lbnRzLnVsLnNjcm9sbFRvcCA9IGJvdCAtIGhndDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBxdWVyeSB0byBnYXRoZXIgdGhlIHJlc3VsdHMgZm9yIHRoZSBjdXJyZW50IHNlYXJjaFRleHQuICBBdHRlbXB0cyB0byByZXR1cm4gY2FjaGVkXG4gICAqIHJlc3VsdHMgZmlyc3QsIHRoZW4gZm9yd2FyZHMgdGhlIHByb2Nlc3MgdG8gYGZldGNoUmVzdWx0c2AgaWYgbmVjZXNzYXJ5LlxuICAgKi9cbiAgZnVuY3Rpb24gaGFuZGxlUXVlcnkgKCkge1xuICAgIHZhciBzZWFyY2hUZXh0ID0gJHNjb3BlLnNlYXJjaFRleHQsXG4gICAgICAgIHRlcm0gPSBzZWFyY2hUZXh0LnRvTG93ZXJDYXNlKCk7XG4gICAgLy8tLSBjYW5jZWwgcHJvbWlzZSBpZiBhIHByb21pc2UgaXMgaW4gcHJvZ3Jlc3NcbiAgICBpZiAocHJvbWlzZSAmJiBwcm9taXNlLmNhbmNlbCkge1xuICAgICAgcHJvbWlzZS5jYW5jZWwoKTtcbiAgICAgIHByb21pc2UgPSBudWxsO1xuICAgIH1cbiAgICAvLy0tIGlmIHJlc3VsdHMgYXJlIGNhY2hlZCwgcHVsbCBpbiBjYWNoZWQgcmVzdWx0c1xuICAgIGlmICghJHNjb3BlLm5vQ2FjaGUgJiYgY2FjaGVbdGVybV0pIHtcbiAgICAgIGN0cmwubWF0Y2hlcyA9IGNhY2hlW3Rlcm1dO1xuICAgICAgdXBkYXRlTWVzc2FnZXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZmV0Y2hSZXN1bHRzKHNlYXJjaFRleHQpO1xuICAgIH1cbiAgICBpZiAoaGFzRm9jdXMpIGN0cmwuaGlkZGVuID0gc2hvdWxkSGlkZSgpO1xuICB9XG5cbn1cbk1kQXV0b2NvbXBsZXRlQ3RybC4kaW5qZWN0ID0gW1wiJHNjb3BlXCIsIFwiJGVsZW1lbnRcIiwgXCIkbWRVdGlsXCIsIFwiJG1kQ29uc3RhbnRcIiwgXCIkdGltZW91dFwiLCBcIiRtZFRoZW1pbmdcIiwgXCIkd2luZG93XCIsIFwiJGFuaW1hdGVcIiwgXCIkcm9vdEVsZW1lbnRcIiwgXCIkYXR0cnNcIl07XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5hdXRvY29tcGxldGUnKVxuICAgIC5kaXJlY3RpdmUoJ21kQXV0b2NvbXBsZXRlJywgTWRBdXRvY29tcGxldGUpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG1kQXV0b2NvbXBsZXRlXG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMuYXV0b2NvbXBsZXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBgPG1kLWF1dG9jb21wbGV0ZT5gIGlzIGEgc3BlY2lhbCBpbnB1dCBjb21wb25lbnQgd2l0aCBhIGRyb3AtZG93biBvZiBhbGwgcG9zc2libGUgbWF0Y2hlcyB0byBhIGN1c3RvbSBxdWVyeS5cbiAqIFRoaXMgY29tcG9uZW50IGFsbG93cyB5b3UgdG8gcHJvdmlkZSByZWFsLXRpbWUgc3VnZ2VzdGlvbnMgYXMgdGhlIHVzZXIgdHlwZXMgaW4gdGhlIGlucHV0IGFyZWEuXG4gKlxuICogVG8gc3RhcnQsIHlvdSB3aWxsIG5lZWQgdG8gc3BlY2lmeSB0aGUgcmVxdWlyZWQgcGFyYW1ldGVycyBhbmQgcHJvdmlkZSBhIHRlbXBsYXRlIGZvciB5b3VyIHJlc3VsdHMuXG4gKiBUaGUgY29udGVudCBpbnNpZGUgYG1kLWF1dG9jb21wbGV0ZWAgd2lsbCBiZSB0cmVhdGVkIGFzIGEgdGVtcGxhdGUuXG4gKlxuICogSW4gbW9yZSBjb21wbGV4IGNhc2VzLCB5b3UgbWF5IHdhbnQgdG8gaW5jbHVkZSBvdGhlciBjb250ZW50IHN1Y2ggYXMgYSBtZXNzYWdlIHRvIGRpc3BsYXkgd2hlblxuICogbm8gbWF0Y2hlcyB3ZXJlIGZvdW5kLiAgWW91IGNhbiBkbyB0aGlzIGJ5IHdyYXBwaW5nIHlvdXIgdGVtcGxhdGUgaW4gYG1kLWl0ZW0tdGVtcGxhdGVgIGFuZCBhZGRpbmdcbiAqIGEgdGFnIGZvciBgbWQtbm90LWZvdW5kYC4gIEFuIGV4YW1wbGUgb2YgdGhpcyBpcyBzaG93biBiZWxvdy5cbiAqICMjIyBWYWxpZGF0aW9uXG4gKlxuICogWW91IGNhbiB1c2UgYG5nLW1lc3NhZ2VzYCB0byBpbmNsdWRlIHZhbGlkYXRpb24gdGhlIHNhbWUgd2F5IHRoYXQgeW91IHdvdWxkIG5vcm1hbGx5IHZhbGlkYXRlO1xuICogaG93ZXZlciwgaWYgeW91IHdhbnQgdG8gcmVwbGljYXRlIGEgc3RhbmRhcmQgaW5wdXQgd2l0aCBhIGZsb2F0aW5nIGxhYmVsLCB5b3Ugd2lsbCBoYXZlIHRvIGRvIHRoZVxuICogZm9sbG93aW5nOlxuICpcbiAqIC0gTWFrZSBzdXJlIHRoYXQgeW91ciB0ZW1wbGF0ZSBpcyB3cmFwcGVkIGluIGBtZC1pdGVtLXRlbXBsYXRlYFxuICogLSBBZGQgeW91ciBgbmctbWVzc2FnZXNgIGNvZGUgaW5zaWRlIG9mIGBtZC1hdXRvY29tcGxldGVgXG4gKiAtIEFkZCB5b3VyIHZhbGlkYXRpb24gcHJvcGVydGllcyB0byBgbWQtYXV0b2NvbXBsZXRlYCAoaWUuIGByZXF1aXJlZGApXG4gKiAtIEFkZCBhIGBuYW1lYCB0byBgbWQtYXV0b2NvbXBsZXRlYCAodG8gYmUgdXNlZCBvbiB0aGUgZ2VuZXJhdGVkIGBpbnB1dGApXG4gKlxuICogVGhlcmUgaXMgYW4gZXhhbXBsZSBiZWxvdyBvZiBob3cgdGhpcyBzaG91bGQgbG9vay5cbiAqXG4gKlxuICogQHBhcmFtIHtleHByZXNzaW9ufSBtZC1pdGVtcyBBbiBleHByZXNzaW9uIGluIHRoZSBmb3JtYXQgb2YgYGl0ZW0gaW4gaXRlbXNgIHRvIGl0ZXJhdGUgb3ZlciBtYXRjaGVzIGZvciB5b3VyIHNlYXJjaC5cbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG1kLXNlbGVjdGVkLWl0ZW0tY2hhbmdlIEFuIGV4cHJlc3Npb24gdG8gYmUgcnVuIGVhY2ggdGltZSBhIG5ldyBpdGVtIGlzIHNlbGVjdGVkXG4gKiBAcGFyYW0ge2V4cHJlc3Npb249fSBtZC1zZWFyY2gtdGV4dC1jaGFuZ2UgQW4gZXhwcmVzc2lvbiB0byBiZSBydW4gZWFjaCB0aW1lIHRoZSBzZWFyY2ggdGV4dCB1cGRhdGVzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1kLXNlYXJjaC10ZXh0IEEgbW9kZWwgdG8gYmluZCB0aGUgc2VhcmNoIHF1ZXJ5IHRleHQgdG9cbiAqIEBwYXJhbSB7b2JqZWN0PX0gbWQtc2VsZWN0ZWQtaXRlbSBBIG1vZGVsIHRvIGJpbmQgdGhlIHNlbGVjdGVkIGl0ZW0gdG9cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWQtaXRlbS10ZXh0IEFuIGV4cHJlc3Npb24gdGhhdCB3aWxsIGNvbnZlcnQgeW91ciBvYmplY3QgdG8gYSBzaW5nbGUgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmc9fSBwbGFjZWhvbGRlciBQbGFjZWhvbGRlciB0ZXh0IHRoYXQgd2lsbCBiZSBmb3J3YXJkZWQgdG8gdGhlIGlucHV0LlxuICogQHBhcmFtIHtib29sZWFuPX0gbWQtbm8tY2FjaGUgRGlzYWJsZXMgdGhlIGludGVybmFsIGNhY2hpbmcgdGhhdCBoYXBwZW5zIGluIGF1dG9jb21wbGV0ZVxuICogQHBhcmFtIHtib29sZWFuPX0gbmctZGlzYWJsZWQgRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byBkaXNhYmxlIHRoZSBpbnB1dCBmaWVsZFxuICogQHBhcmFtIHtudW1iZXI9fSBtZC1taW4tbGVuZ3RoIFNwZWNpZmllcyB0aGUgbWluaW11bSBsZW5ndGggb2YgdGV4dCBiZWZvcmUgYXV0b2NvbXBsZXRlIHdpbGwgbWFrZSBzdWdnZXN0aW9uc1xuICogQHBhcmFtIHtudW1iZXI9fSBtZC1kZWxheSBTcGVjaWZpZXMgdGhlIGFtb3VudCBvZiB0aW1lIChpbiBtaWxsaXNlY29uZHMpIHRvIHdhaXQgYmVmb3JlIGxvb2tpbmcgZm9yIHJlc3VsdHNcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG1kLWF1dG9mb2N1cyBJZiB0cnVlLCB3aWxsIGltbWVkaWF0ZWx5IGZvY3VzIHRoZSBpbnB1dCBlbGVtZW50XG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBtZC1hdXRvc2VsZWN0IElmIHRydWUsIHRoZSBmaXJzdCBpdGVtIHdpbGwgYmUgc2VsZWN0ZWQgYnkgZGVmYXVsdFxuICogQHBhcmFtIHtzdHJpbmc9fSBtZC1tZW51LWNsYXNzIFRoaXMgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBkcm9wZG93biBtZW51IGZvciBzdHlsaW5nXG4gKiBAcGFyYW0ge3N0cmluZz19IG1kLWZsb2F0aW5nLWxhYmVsIFRoaXMgd2lsbCBhZGQgYSBmbG9hdGluZyBsYWJlbCB0byBhdXRvY29tcGxldGUgYW5kIHdyYXAgaXQgaW4gYG1kLWlucHV0LWNvbnRhaW5lcmBcbiAqXG4gKiBAdXNhZ2VcbiAqICMjI0Jhc2ljIEV4YW1wbGVcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiAgIDxtZC1hdXRvY29tcGxldGVcbiAqICAgICAgIG1kLXNlbGVjdGVkLWl0ZW09XCJzZWxlY3RlZEl0ZW1cIlxuICogICAgICAgbWQtc2VhcmNoLXRleHQ9XCJzZWFyY2hUZXh0XCJcbiAqICAgICAgIG1kLWl0ZW1zPVwiaXRlbSBpbiBnZXRNYXRjaGVzKHNlYXJjaFRleHQpXCJcbiAqICAgICAgIG1kLWl0ZW0tdGV4dD1cIml0ZW0uZGlzcGxheVwiPlxuICogICAgIDxzcGFuIG1kLWhpZ2hsaWdodC10ZXh0PVwic2VhcmNoVGV4dFwiPnt7aXRlbS5kaXNwbGF5fX08L3NwYW4+XG4gKiAgIDwvbWQtYXV0b2NvbXBsZXRlPlxuICogPC9obGpzPlxuICpcbiAqICMjI0V4YW1wbGUgd2l0aCBcIm5vdCBmb3VuZFwiIG1lc3NhZ2VcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8bWQtYXV0b2NvbXBsZXRlXG4gKiAgICAgbWQtc2VsZWN0ZWQtaXRlbT1cInNlbGVjdGVkSXRlbVwiXG4gKiAgICAgbWQtc2VhcmNoLXRleHQ9XCJzZWFyY2hUZXh0XCJcbiAqICAgICBtZC1pdGVtcz1cIml0ZW0gaW4gZ2V0TWF0Y2hlcyhzZWFyY2hUZXh0KVwiXG4gKiAgICAgbWQtaXRlbS10ZXh0PVwiaXRlbS5kaXNwbGF5XCI+XG4gKiAgIDxtZC1pdGVtLXRlbXBsYXRlPlxuICogICAgIDxzcGFuIG1kLWhpZ2hsaWdodC10ZXh0PVwic2VhcmNoVGV4dFwiPnt7aXRlbS5kaXNwbGF5fX08L3NwYW4+XG4gKiAgIDwvbWQtaXRlbS10ZW1wbGF0ZT5cbiAqICAgPG1kLW5vdC1mb3VuZD5cbiAqICAgICBObyBtYXRjaGVzIGZvdW5kLlxuICogICA8L21kLW5vdC1mb3VuZD5cbiAqIDwvbWQtYXV0b2NvbXBsZXRlPlxuICogPC9obGpzPlxuICpcbiAqIEluIHRoaXMgZXhhbXBsZSwgb3VyIGNvZGUgdXRpbGl6ZXMgYG1kLWl0ZW0tdGVtcGxhdGVgIGFuZCBgbWQtbm90LWZvdW5kYCB0byBzcGVjaWZ5IHRoZSBkaWZmZXJlbnRcbiAqIHBhcnRzIHRoYXQgbWFrZSB1cCBvdXIgY29tcG9uZW50LlxuICpcbiAqICMjIyBFeGFtcGxlIHdpdGggdmFsaWRhdGlvblxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxmb3JtIG5hbWU9XCJhdXRvY29tcGxldGVGb3JtXCI+XG4gKiAgIDxtZC1hdXRvY29tcGxldGVcbiAqICAgICAgIHJlcXVpcmVkXG4gKiAgICAgICBpbnB1dC1uYW1lPVwiYXV0b2NvbXBsZXRlXCJcbiAqICAgICAgIG1kLXNlbGVjdGVkLWl0ZW09XCJzZWxlY3RlZEl0ZW1cIlxuICogICAgICAgbWQtc2VhcmNoLXRleHQ9XCJzZWFyY2hUZXh0XCJcbiAqICAgICAgIG1kLWl0ZW1zPVwiaXRlbSBpbiBnZXRNYXRjaGVzKHNlYXJjaFRleHQpXCJcbiAqICAgICAgIG1kLWl0ZW0tdGV4dD1cIml0ZW0uZGlzcGxheVwiPlxuICogICAgIDxtZC1pdGVtLXRlbXBsYXRlPlxuICogICAgICAgPHNwYW4gbWQtaGlnaGxpZ2h0LXRleHQ9XCJzZWFyY2hUZXh0XCI+e3tpdGVtLmRpc3BsYXl9fTwvc3Bhbj5cbiAqICAgICA8L21kLWl0ZW0tdGVtcGxhdGU+XG4gKiAgICAgPGRpdiBuZy1tZXNzYWdlcz1cImF1dG9jb21wbGV0ZUZvcm0uYXV0b2NvbXBsZXRlLiRlcnJvclwiPlxuICogICAgICAgPGRpdiBuZy1tZXNzYWdlPVwicmVxdWlyZWRcIj5UaGlzIGZpZWxkIGlzIHJlcXVpcmVkPC9kaXY+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvbWQtYXV0b2NvbXBsZXRlPlxuICogPC9mb3JtPlxuICogPC9obGpzPlxuICpcbiAqIEluIHRoaXMgZXhhbXBsZSwgb3VyIGNvZGUgdXRpbGl6ZXMgYG1kLWl0ZW0tdGVtcGxhdGVgIGFuZCBgbWQtbm90LWZvdW5kYCB0byBzcGVjaWZ5IHRoZSBkaWZmZXJlbnRcbiAqIHBhcnRzIHRoYXQgbWFrZSB1cCBvdXIgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIE1kQXV0b2NvbXBsZXRlICgkbWRUaGVtaW5nLCAkbWRVdGlsKSB7XG4gIHJldHVybiB7XG4gICAgY29udHJvbGxlcjogICAnTWRBdXRvY29tcGxldGVDdHJsJyxcbiAgICBjb250cm9sbGVyQXM6ICckbWRBdXRvY29tcGxldGVDdHJsJyxcbiAgICBzY29wZTogICAgICAgIHtcbiAgICAgIGlucHV0TmFtZTogICAgICAnQG1kSW5wdXROYW1lJyxcbiAgICAgIGlucHV0TWlubGVuZ3RoOiAnQG1kSW5wdXRNaW5sZW5ndGgnLFxuICAgICAgaW5wdXRNYXhsZW5ndGg6ICdAbWRJbnB1dE1heGxlbmd0aCcsXG4gICAgICBzZWFyY2hUZXh0OiAgICAgJz0/bWRTZWFyY2hUZXh0JyxcbiAgICAgIHNlbGVjdGVkSXRlbTogICAnPT9tZFNlbGVjdGVkSXRlbScsXG4gICAgICBpdGVtc0V4cHI6ICAgICAgJ0BtZEl0ZW1zJyxcbiAgICAgIGl0ZW1UZXh0OiAgICAgICAnJm1kSXRlbVRleHQnLFxuICAgICAgcGxhY2Vob2xkZXI6ICAgICdAcGxhY2Vob2xkZXInLFxuICAgICAgbm9DYWNoZTogICAgICAgICc9P21kTm9DYWNoZScsXG4gICAgICBpdGVtQ2hhbmdlOiAgICAgJyY/bWRTZWxlY3RlZEl0ZW1DaGFuZ2UnLFxuICAgICAgdGV4dENoYW5nZTogICAgICcmP21kU2VhcmNoVGV4dENoYW5nZScsXG4gICAgICBtaW5MZW5ndGg6ICAgICAgJz0/bWRNaW5MZW5ndGgnLFxuICAgICAgZGVsYXk6ICAgICAgICAgICc9P21kRGVsYXknLFxuICAgICAgYXV0b2ZvY3VzOiAgICAgICc9P21kQXV0b2ZvY3VzJyxcbiAgICAgIGZsb2F0aW5nTGFiZWw6ICAnQD9tZEZsb2F0aW5nTGFiZWwnLFxuICAgICAgYXV0b3NlbGVjdDogICAgICc9P21kQXV0b3NlbGVjdCcsXG4gICAgICBtZW51Q2xhc3M6ICAgICAgJ0A/bWRNZW51Q2xhc3MnXG4gICAgfSxcbiAgICB0ZW1wbGF0ZTogZnVuY3Rpb24gKGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHZhciBub0l0ZW1zVGVtcGxhdGUgPSBnZXROb0l0ZW1zVGVtcGxhdGUoKSxcbiAgICAgICAgICBpdGVtVGVtcGxhdGUgPSBnZXRJdGVtVGVtcGxhdGUoKSxcbiAgICAgICAgICBsZWZ0b3ZlciA9IGVsZW1lbnQuaHRtbCgpO1xuICAgICAgcmV0dXJuICdcXFxuICAgICAgICA8bWQtYXV0b2NvbXBsZXRlLXdyYXBcXFxuICAgICAgICAgICAgbGF5b3V0PVwicm93XCJcXFxuICAgICAgICAgICAgbmctY2xhc3M9XCJ7IFxcJ21kLXdoaXRlZnJhbWUtejFcXCc6ICFmbG9hdGluZ0xhYmVsIH1cIlxcXG4gICAgICAgICAgICByb2xlPVwibGlzdGJveFwiPlxcXG4gICAgICAgICAgJyArIGdldElucHV0RWxlbWVudCgpICsgJ1xcXG4gICAgICAgICAgPG1kLXByb2dyZXNzLWxpbmVhclxcXG4gICAgICAgICAgICAgIG5nLWlmPVwiJG1kQXV0b2NvbXBsZXRlQ3RybC5sb2FkaW5nXCJcXFxuICAgICAgICAgICAgICBtZC1tb2RlPVwiaW5kZXRlcm1pbmF0ZVwiPjwvbWQtcHJvZ3Jlc3MtbGluZWFyPlxcXG4gICAgICAgICAgPHVsIHJvbGU9XCJwcmVzZW50YXRpb25cIlxcXG4gICAgICAgICAgICAgIGNsYXNzPVwibWQtYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb25zIG1kLXdoaXRlZnJhbWUtejEge3ttZW51Q2xhc3MgfHwgXFwnXFwnfX1cIlxcXG4gICAgICAgICAgICAgIGlkPVwidWwte3skbWRBdXRvY29tcGxldGVDdHJsLmlkfX1cIlxcXG4gICAgICAgICAgICAgIG5nLWhpZGU9XCIkbWRBdXRvY29tcGxldGVDdHJsLmhpZGRlblwiXFxcbiAgICAgICAgICAgICAgbmctbW91c2VlbnRlcj1cIiRtZEF1dG9jb21wbGV0ZUN0cmwubGlzdEVudGVyKClcIlxcXG4gICAgICAgICAgICAgIG5nLW1vdXNlbGVhdmU9XCIkbWRBdXRvY29tcGxldGVDdHJsLmxpc3RMZWF2ZSgpXCJcXFxuICAgICAgICAgICAgICBuZy1tb3VzZXVwPVwiJG1kQXV0b2NvbXBsZXRlQ3RybC5tb3VzZVVwKClcIj5cXFxuICAgICAgICAgICAgPGxpIG5nLXJlcGVhdD1cIihpbmRleCwgaXRlbSkgaW4gJG1kQXV0b2NvbXBsZXRlQ3RybC5tYXRjaGVzXCJcXFxuICAgICAgICAgICAgICAgIG5nLWNsYXNzPVwieyBzZWxlY3RlZDogaW5kZXggPT09ICRtZEF1dG9jb21wbGV0ZUN0cmwuaW5kZXggfVwiXFxcbiAgICAgICAgICAgICAgICBuZy1jbGljaz1cIiRtZEF1dG9jb21wbGV0ZUN0cmwuc2VsZWN0KGluZGV4KVwiXFxcbiAgICAgICAgICAgICAgICBtZC1hdXRvY29tcGxldGUtbGlzdC1pdGVtPVwiJG1kQXV0b2NvbXBsZXRlQ3RybC5pdGVtTmFtZVwiPlxcXG4gICAgICAgICAgICAgICAgJyArIGl0ZW1UZW1wbGF0ZSArICdcXFxuICAgICAgICAgICAgPC9saT5cXFxuICAgICAgICAgICAgJyArIG5vSXRlbXNUZW1wbGF0ZSArICdcXFxuICAgICAgICAgIDwvdWw+XFxcbiAgICAgICAgPC9tZC1hdXRvY29tcGxldGUtd3JhcD5cXFxuICAgICAgICA8YXJpYS1zdGF0dXNcXFxuICAgICAgICAgICAgY2xhc3M9XCJtZC12aXN1YWxseS1oaWRkZW5cIlxcXG4gICAgICAgICAgICByb2xlPVwic3RhdHVzXCJcXFxuICAgICAgICAgICAgYXJpYS1saXZlPVwiYXNzZXJ0aXZlXCI+XFxcbiAgICAgICAgICA8cCBuZy1yZXBlYXQ9XCJtZXNzYWdlIGluICRtZEF1dG9jb21wbGV0ZUN0cmwubWVzc2FnZXNcIiBuZy1pZj1cIm1lc3NhZ2VcIj57e21lc3NhZ2V9fTwvcD5cXFxuICAgICAgICA8L2FyaWEtc3RhdHVzPic7XG5cbiAgICAgIGZ1bmN0aW9uIGdldEl0ZW1UZW1wbGF0ZSgpIHtcbiAgICAgICAgdmFyIHRlbXBsYXRlVGFnID0gZWxlbWVudC5maW5kKCdtZC1pdGVtLXRlbXBsYXRlJykucmVtb3ZlKCksXG4gICAgICAgICAgICBodG1sID0gdGVtcGxhdGVUYWcubGVuZ3RoID8gdGVtcGxhdGVUYWcuaHRtbCgpIDogZWxlbWVudC5odG1sKCk7XG4gICAgICAgIGlmICghdGVtcGxhdGVUYWcubGVuZ3RoKSBlbGVtZW50LmVtcHR5KCk7XG4gICAgICAgIHJldHVybiBodG1sO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXROb0l0ZW1zVGVtcGxhdGUoKSB7XG4gICAgICAgIHZhciB0ZW1wbGF0ZVRhZyA9IGVsZW1lbnQuZmluZCgnbWQtbm90LWZvdW5kJykucmVtb3ZlKCksXG4gICAgICAgICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlVGFnLmxlbmd0aCA/IHRlbXBsYXRlVGFnLmh0bWwoKSA6ICcnO1xuICAgICAgICByZXR1cm4gdGVtcGxhdGVcbiAgICAgICAgICAgID8gJzxsaSBuZy1pZj1cIiEkbWRBdXRvY29tcGxldGVDdHJsLm1hdGNoZXMubGVuZ3RoICYmICEkbWRBdXRvY29tcGxldGVDdHJsLmxvYWRpbmdcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICYmICEkbWRBdXRvY29tcGxldGVDdHJsLmhpZGRlblwiXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICBuZy1oaWRlPVwiJG1kQXV0b2NvbXBsZXRlQ3RybC5oaWRkZW5cIlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgbWQtYXV0b2NvbXBsZXRlLXBhcmVudC1zY29wZT4nICsgdGVtcGxhdGUgKyAnPC9saT4nXG4gICAgICAgICAgICA6ICcnO1xuXG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldElucHV0RWxlbWVudCgpIHtcbiAgICAgICAgaWYgKGF0dHIubWRGbG9hdGluZ0xhYmVsKSB7XG4gICAgICAgICAgcmV0dXJuICdcXFxuICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBmbGV4IG5nLWlmPVwiZmxvYXRpbmdMYWJlbFwiPlxcXG4gICAgICAgICAgICAgIDxsYWJlbD57e2Zsb2F0aW5nTGFiZWx9fTwvbGFiZWw+XFxcbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJzZWFyY2hcIlxcXG4gICAgICAgICAgICAgICAgICBpZD1cImZsLWlucHV0LXt7JG1kQXV0b2NvbXBsZXRlQ3RybC5pZH19XCJcXFxuICAgICAgICAgICAgICAgICAgbmFtZT1cInt7aW5wdXROYW1lfX1cIlxcXG4gICAgICAgICAgICAgICAgICBhdXRvY29tcGxldGU9XCJvZmZcIlxcXG4gICAgICAgICAgICAgICAgICBuZy1yZXF1aXJlZD1cImlzUmVxdWlyZWRcIlxcXG4gICAgICAgICAgICAgICAgICBuZy1taW5sZW5ndGg9XCJpbnB1dE1pbmxlbmd0aFwiXFxcbiAgICAgICAgICAgICAgICAgIG5nLW1heGxlbmd0aD1cImlucHV0TWF4bGVuZ3RoXCJcXFxuICAgICAgICAgICAgICAgICAgbmctZGlzYWJsZWQ9XCIkbWRBdXRvY29tcGxldGVDdHJsLmlzRGlzYWJsZWRcIlxcXG4gICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cIiRtZEF1dG9jb21wbGV0ZUN0cmwuc2NvcGUuc2VhcmNoVGV4dFwiXFxcbiAgICAgICAgICAgICAgICAgIG5nLWtleWRvd249XCIkbWRBdXRvY29tcGxldGVDdHJsLmtleWRvd24oJGV2ZW50KVwiXFxcbiAgICAgICAgICAgICAgICAgIG5nLWJsdXI9XCIkbWRBdXRvY29tcGxldGVDdHJsLmJsdXIoKVwiXFxcbiAgICAgICAgICAgICAgICAgIG5nLWZvY3VzPVwiJG1kQXV0b2NvbXBsZXRlQ3RybC5mb2N1cygpXCJcXFxuICAgICAgICAgICAgICAgICAgYXJpYS1vd25zPVwidWwte3skbWRBdXRvY29tcGxldGVDdHJsLmlkfX1cIlxcXG4gICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwie3tmbG9hdGluZ0xhYmVsfX1cIlxcXG4gICAgICAgICAgICAgICAgICBhcmlhLWF1dG9jb21wbGV0ZT1cImxpc3RcIlxcXG4gICAgICAgICAgICAgICAgICBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiXFxcbiAgICAgICAgICAgICAgICAgIGFyaWEtYWN0aXZlZGVzY2VuZGFudD1cIlwiXFxcbiAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9XCJ7eyEkbWRBdXRvY29tcGxldGVDdHJsLmhpZGRlbn19XCIvPlxcXG4gICAgICAgICAgICAgIDxkaXYgbWQtYXV0b2NvbXBsZXRlLXBhcmVudC1zY29wZSBtZC1hdXRvY29tcGxldGUtcmVwbGFjZT4nICsgbGVmdG92ZXIgKyAnPC9kaXY+XFxcbiAgICAgICAgICAgIDwvbWQtaW5wdXQtY29udGFpbmVyPic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICdcXFxuICAgICAgICAgICAgPGlucHV0IGZsZXggdHlwZT1cInNlYXJjaFwiXFxcbiAgICAgICAgICAgICAgICBpZD1cImlucHV0LXt7JG1kQXV0b2NvbXBsZXRlQ3RybC5pZH19XCJcXFxuICAgICAgICAgICAgICAgIG5hbWU9XCJ7e2lucHV0TmFtZX19XCJcXFxuICAgICAgICAgICAgICAgIG5nLWlmPVwiIWZsb2F0aW5nTGFiZWxcIlxcXG4gICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlPVwib2ZmXCJcXFxuICAgICAgICAgICAgICAgIG5nLXJlcXVpcmVkPVwiaXNSZXF1aXJlZFwiXFxcbiAgICAgICAgICAgICAgICBuZy1kaXNhYmxlZD1cIiRtZEF1dG9jb21wbGV0ZUN0cmwuaXNEaXNhYmxlZFwiXFxcbiAgICAgICAgICAgICAgICBuZy1tb2RlbD1cIiRtZEF1dG9jb21wbGV0ZUN0cmwuc2NvcGUuc2VhcmNoVGV4dFwiXFxcbiAgICAgICAgICAgICAgICBuZy1rZXlkb3duPVwiJG1kQXV0b2NvbXBsZXRlQ3RybC5rZXlkb3duKCRldmVudClcIlxcXG4gICAgICAgICAgICAgICAgbmctYmx1cj1cIiRtZEF1dG9jb21wbGV0ZUN0cmwuYmx1cigpXCJcXFxuICAgICAgICAgICAgICAgIG5nLWZvY3VzPVwiJG1kQXV0b2NvbXBsZXRlQ3RybC5mb2N1cygpXCJcXFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwie3twbGFjZWhvbGRlcn19XCJcXFxuICAgICAgICAgICAgICAgIGFyaWEtb3ducz1cInVsLXt7JG1kQXV0b2NvbXBsZXRlQ3RybC5pZH19XCJcXFxuICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJ7e3BsYWNlaG9sZGVyfX1cIlxcXG4gICAgICAgICAgICAgICAgYXJpYS1hdXRvY29tcGxldGU9XCJsaXN0XCJcXFxuICAgICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCJcXFxuICAgICAgICAgICAgICAgIGFyaWEtYWN0aXZlZGVzY2VuZGFudD1cIlwiXFxcbiAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPVwie3shJG1kQXV0b2NvbXBsZXRlQ3RybC5oaWRkZW59fVwiLz5cXFxuICAgICAgICAgICAgPGJ1dHRvblxcXG4gICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXFxcbiAgICAgICAgICAgICAgICB0YWJpbmRleD1cIi0xXCJcXFxuICAgICAgICAgICAgICAgIG5nLWlmPVwiJG1kQXV0b2NvbXBsZXRlQ3RybC5zY29wZS5zZWFyY2hUZXh0ICYmICEkbWRBdXRvY29tcGxldGVDdHJsLmlzRGlzYWJsZWRcIlxcXG4gICAgICAgICAgICAgICAgbmctY2xpY2s9XCIkbWRBdXRvY29tcGxldGVDdHJsLmNsZWFyKClcIj5cXFxuICAgICAgICAgICAgICA8bWQtaWNvbiBtZC1zdmctaWNvbj1cIm1kLWNsb3NlXCI+PC9tZC1pY29uPlxcXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWQtdmlzdWFsbHktaGlkZGVuXCI+Q2xlYXI8L3NwYW4+XFxcbiAgICAgICAgICAgIDwvYnV0dG9uPlxcXG4gICAgICAgICAgICAgICAgJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbk1kQXV0b2NvbXBsZXRlLiRpbmplY3QgPSBbXCIkbWRUaGVtaW5nXCIsIFwiJG1kVXRpbFwiXTtcblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLmF1dG9jb21wbGV0ZScpXG4gICAgLmNvbnRyb2xsZXIoJ01kSGlnaGxpZ2h0Q3RybCcsIE1kSGlnaGxpZ2h0Q3RybCk7XG5cbmZ1bmN0aW9uIE1kSGlnaGxpZ2h0Q3RybCAoJHNjb3BlLCAkZWxlbWVudCwgJGludGVycG9sYXRlKSB7XG4gIHRoaXMuaW5pdCA9IGluaXQ7XG5cbiAgcmV0dXJuIGluaXQoKTtcblxuICBmdW5jdGlvbiBpbml0ICh0ZXJtKSB7XG4gICAgdmFyIHVuc2FmZVRleHQgPSAkaW50ZXJwb2xhdGUoJGVsZW1lbnQuaHRtbCgpKSgkc2NvcGUpLFxuICAgICAgICB0ZXh0ID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2PicpLnRleHQodW5zYWZlVGV4dCkuaHRtbCgpLFxuICAgICAgICBmbGFncyA9ICRlbGVtZW50LmF0dHIoJ21kLWhpZ2hsaWdodC1mbGFncycpIHx8ICcnLFxuICAgICAgICB3YXRjaGVyID0gJHNjb3BlLiR3YXRjaCh0ZXJtLCBmdW5jdGlvbiAodGVybSkge1xuICAgICAgICAgIHZhciByZWdleCA9IGdldFJlZ0V4cCh0ZXJtLCBmbGFncyksXG4gICAgICAgICAgICAgIGh0bWwgPSB0ZXh0LnJlcGxhY2UocmVnZXgsICc8c3BhbiBjbGFzcz1cImhpZ2hsaWdodFwiPiQmPC9zcGFuPicpO1xuICAgICAgICAgICRlbGVtZW50Lmh0bWwoaHRtbCk7XG4gICAgICAgIH0pO1xuICAgICRlbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHsgd2F0Y2hlcigpOyB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNhbml0aXplICh0ZXJtKSB7XG4gICAgaWYgKCF0ZXJtKSByZXR1cm4gdGVybTtcbiAgICByZXR1cm4gdGVybS5yZXBsYWNlKC9bXFxcXFxcXlxcJFxcKlxcK1xcP1xcLlxcKFxcKVxcfFxce1xcfVxcW1xcXV0vZywgJ1xcXFwkJicpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UmVnRXhwICh0ZXh0LCBmbGFncykge1xuICAgIHZhciBzdHIgPSAnJztcbiAgICBpZiAoZmxhZ3MuaW5kZXhPZignXicpID49IDEpIHN0ciArPSAnXic7XG4gICAgc3RyICs9IHRleHQ7XG4gICAgaWYgKGZsYWdzLmluZGV4T2YoJyQnKSA+PSAxKSBzdHIgKz0gJyQnO1xuICAgIHJldHVybiBuZXcgUmVnRXhwKHNhbml0aXplKHN0ciksIGZsYWdzLnJlcGxhY2UoL1tcXCRcXF5dL2csICcnKSk7XG4gIH1cbn1cbk1kSGlnaGxpZ2h0Q3RybC4kaW5qZWN0ID0gW1wiJHNjb3BlXCIsIFwiJGVsZW1lbnRcIiwgXCIkaW50ZXJwb2xhdGVcIl07XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5hdXRvY29tcGxldGUnKVxuICAgIC5kaXJlY3RpdmUoJ21kSGlnaGxpZ2h0VGV4dCcsIE1kSGlnaGxpZ2h0KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBtZEhpZ2hsaWdodFRleHRcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5hdXRvY29tcGxldGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbWQtaGlnaGxpZ2h0LXRleHRgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNwZWNpZnkgdGV4dCB0aGF0IHNob3VsZCBiZSBoaWdobGlnaHRlZCB3aXRoaW5cbiAqIGFuIGVsZW1lbnQuICBIaWdobGlnaHRlZCB0ZXh0IHdpbGwgYmUgd3JhcHBlZCBpbiBgPHNwYW4gY2xhc3M9XCJoaWdobGlnaHRcIj48L3NwYW4+YCB3aGljaCBjYW5cbiAqIGJlIHN0eWxlZCB0aHJvdWdoIENTUy4gIFBsZWFzZSBub3RlIHRoYXQgY2hpbGQgZWxlbWVudHMgbWF5IG5vdCBiZSB1c2VkIHdpdGggdGhpcyBkaXJlY3RpdmUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1kLWhpZ2hsaWdodC10ZXh0IEEgbW9kZWwgdG8gYmUgc2VhcmNoZWQgZm9yXG4gKiBAcGFyYW0ge3N0cmluZz19IG1kLWhpZ2hsaWdodC1mbGFncyBBIGxpc3Qgb2YgZmxhZ3MgKGxvb3NlbHkgYmFzZWQgb24gSmF2YVNjcmlwdCBSZXhFeHAgZmxhZ3MpLlxuICogICAgIyMjIyAqKlN1cHBvcnRlZCBmbGFncyoqOlxuICogICAgLSBgZ2A6IEZpbmQgYWxsIG1hdGNoZXMgd2l0aGluIHRoZSBwcm92aWRlZCB0ZXh0XG4gKiAgICAtIGBpYDogSWdub3JlIGNhc2Ugd2hlbiBzZWFyY2hpbmcgZm9yIG1hdGNoZXNcbiAqICAgIC0gYCRgOiBPbmx5IG1hdGNoIGlmIHRoZSB0ZXh0IGVuZHMgd2l0aCB0aGUgc2VhcmNoIHRlcm1cbiAqICAgIC0gYF5gOiBPbmx5IG1hdGNoIGlmIHRoZSB0ZXh0IGJlZ2lucyB3aXRoIHRoZSBzZWFyY2ggdGVybVxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxpbnB1dCBwbGFjZWhvbGRlcj1cIkVudGVyIGEgc2VhcmNoIHRlcm0uLi5cIiBuZy1tb2RlbD1cInNlYXJjaFRlcm1cIiB0eXBlPVwidGV4dFwiIC8+XG4gKiA8dWw+XG4gKiAgIDxsaSBuZy1yZXBlYXQ9XCJyZXN1bHQgaW4gcmVzdWx0c1wiIG1kLWhpZ2hsaWdodC10ZXh0PVwic2VhcmNoVGVybVwiPlxuICogICAgIHt7cmVzdWx0LnRleHR9fVxuICogICA8L2xpPlxuICogPC91bD5cbiAqIDwvaGxqcz5cbiAqL1xuXG5mdW5jdGlvbiBNZEhpZ2hsaWdodCAoKSB7XG4gIHJldHVybiB7XG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgc2NvcGU6IGZhbHNlLFxuICAgIGNvbnRyb2xsZXI6ICdNZEhpZ2hsaWdodEN0cmwnLFxuICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xuICAgICAgY3RybC5pbml0KGF0dHIubWRIaWdobGlnaHRUZXh0KTtcbiAgICB9XG4gIH07XG59XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5hdXRvY29tcGxldGUnKVxuICAgIC5kaXJlY3RpdmUoJ21kQXV0b2NvbXBsZXRlTGlzdEl0ZW0nLCBNZEF1dG9jb21wbGV0ZUxpc3RJdGVtKTtcblxuZnVuY3Rpb24gTWRBdXRvY29tcGxldGVMaXN0SXRlbSAoJGNvbXBpbGUsICRtZFV0aWwpIHtcbiAgcmV0dXJuIHtcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICBsaW5rOiBwb3N0TGluayxcbiAgICBzY29wZTogZmFsc2VcbiAgfTtcbiAgZnVuY3Rpb24gcG9zdExpbmsgKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgdmFyIGN0cmwgICAgID0gc2NvcGUuJHBhcmVudC4kbWRBdXRvY29tcGxldGVDdHJsLFxuICAgICAgICBuZXdTY29wZSA9IGN0cmwucGFyZW50LiRuZXcoZmFsc2UsIGN0cmwucGFyZW50KSxcbiAgICAgICAgaXRlbU5hbWUgPSBjdHJsLnNjb3BlLiRldmFsKGF0dHIubWRBdXRvY29tcGxldGVMaXN0SXRlbSk7XG4gICAgbmV3U2NvcGVbaXRlbU5hbWVdID0gc2NvcGUuaXRlbTtcbiAgICAkY29tcGlsZShlbGVtZW50LmNvbnRlbnRzKCkpKG5ld1Njb3BlKTtcbiAgICBlbGVtZW50LmF0dHIoe1xuICAgICAgcm9sZTogJ29wdGlvbicsXG4gICAgICBpZDogJ2l0ZW1fJyArICRtZFV0aWwubmV4dFVpZCgpXG4gICAgfSk7XG4gIH1cbn1cbk1kQXV0b2NvbXBsZXRlTGlzdEl0ZW0uJGluamVjdCA9IFtcIiRjb21waWxlXCIsIFwiJG1kVXRpbFwiXTtcblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLmF1dG9jb21wbGV0ZScpXG4gICAgLmRpcmVjdGl2ZSgnbWRBdXRvY29tcGxldGVQYXJlbnRTY29wZScsIE1kQXV0b2NvbXBsZXRlUGFyZW50U2NvcGUpO1xuXG5mdW5jdGlvbiBNZEF1dG9jb21wbGV0ZVBhcmVudFNjb3BlICgkY29tcGlsZSwgJG1kVXRpbCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgbGluazogcG9zdExpbmssXG4gICAgc2NvcGU6IGZhbHNlXG4gIH07XG4gIGZ1bmN0aW9uIHBvc3RMaW5rIChzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgIHZhciBjdHJsICAgICA9IHNjb3BlLiRwYXJlbnQuJG1kQXV0b2NvbXBsZXRlQ3RybDtcbiAgICAkY29tcGlsZShlbGVtZW50LmNvbnRlbnRzKCkpKGN0cmwucGFyZW50KTtcbiAgICBpZiAoYXR0ci5oYXNPd25Qcm9wZXJ0eSgnbWRBdXRvY29tcGxldGVSZXBsYWNlJykpIHtcbiAgICAgIGVsZW1lbnQuYWZ0ZXIoZWxlbWVudC5jb250ZW50cygpKTtcbiAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgfVxuICB9XG59XG5NZEF1dG9jb21wbGV0ZVBhcmVudFNjb3BlLiRpbmplY3QgPSBbXCIkY29tcGlsZVwiLCBcIiRtZFV0aWxcIl07XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5jaGlwcycpXG4gICAgLmRpcmVjdGl2ZSgnbWRDaGlwJywgTWRDaGlwKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBtZENoaXBcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5jaGlwc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogYDxtZC1jaGlwPmAgaXMgYSBjb21wb25lbnQgdXNlZCB3aXRoaW4gYDxtZC1jaGlwcz5gIGFuZCBpcyByZXNwb25zaWJsZSBmb3IgcmVuZGVyaW5nIGluZGl2aWR1YWxcbiAqIGNoaXBzLlxuICpcbiAqXG4gKiBAdXNhZ2VcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiAgIDxtZC1jaGlwPnt7JGNoaXB9fTwvbWQtY2hpcD5cbiAqIDwvaGxqcz5cbiAqXG4gKi9cblxuLy8gVGhpcyBoaW50IHRleHQgaXMgaGlkZGVuIHdpdGhpbiBhIGNoaXAgYnV0IHVzZWQgYnkgc2NyZWVuIHJlYWRlcnMgdG9cbi8vIGluZm9ybSB0aGUgdXNlciBob3cgdGhleSBjYW4gaW50ZXJhY3Qgd2l0aCBhIGNoaXAuXG52YXIgREVMRVRFX0hJTlRfVEVNUExBVEUgPSAnXFxcbiAgICA8c3BhbiBuZy1pZj1cIiEkbWRDaGlwc0N0cmwucmVhZG9ubHlcIiBjbGFzcz1cIm1kLXZpc3VhbGx5LWhpZGRlblwiPlxcXG4gICAgICB7eyRtZENoaXBzQ3RybC5kZWxldGVIaW50fX1cXFxuICAgIDwvc3Bhbj4nO1xuXG4vKipcbiAqIE1EQ2hpcCBEaXJlY3RpdmUgRGVmaW5pdGlvblxuICpcbiAqIEBwYXJhbSAkbWRUaGVtaW5nXG4gKiBAcGFyYW0gJG1kSW5rUmlwcGxlXG4gKiBAbmdJbmplY3RcbiAqL1xuZnVuY3Rpb24gTWRDaGlwKCRtZFRoZW1pbmcpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6ICdeP21kQ2hpcHMnLFxuICAgIGNvbXBpbGU6ICBjb21waWxlXG4gIH07XG5cbiAgZnVuY3Rpb24gY29tcGlsZShlbGVtZW50LCBhdHRyKSB7XG4gICAgZWxlbWVudC5hcHBlbmQoREVMRVRFX0hJTlRfVEVNUExBVEUpO1xuICAgIHJldHVybiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xuICAgICAgZWxlbWVudC5hZGRDbGFzcygnbWQtY2hpcCcpO1xuICAgICAgJG1kVGhlbWluZyhlbGVtZW50KTtcblxuICAgICAgaWYgKGN0cmwpIGFuZ3VsYXIuZWxlbWVudChlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJy5tZC1jaGlwLWNvbnRlbnQnKSlcbiAgICAgICAgICAub24oJ2JsdXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjdHJsLnNlbGVjdGVkQ2hpcCA9IC0xO1xuICAgICAgICAgIH0pO1xuICAgIH07XG4gIH1cbn1cbk1kQ2hpcC4kaW5qZWN0ID0gW1wiJG1kVGhlbWluZ1wiXTtcblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLmNoaXBzJylcbiAgICAuZGlyZWN0aXZlKCdtZENoaXBSZW1vdmUnLCBNZENoaXBSZW1vdmUpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG1kQ2hpcFJlbW92ZVxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLmNoaXBzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBgPG1kLWNoaXAtcmVtb3ZlPmBcbiAqIERlc2lnbmF0ZXMgYW4gZWxlbWVudCB0byBiZSB1c2VkIGFzIHRoZSBkZWxldGUgYnV0dG9uIGZvciBhIGNoaXAuIFRoaXNcbiAqIGVsZW1lbnQgaXMgcGFzc2VkIGFzIGEgY2hpbGQgb2YgdGhlIGBtZC1jaGlwc2AgZWxlbWVudC5cbiAqXG4gKiBAdXNhZ2VcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiAgIDxtZC1jaGlwcz48YnV0dG9uIG1kLWNoaXAtcmVtb3ZlPkRFTDwvYnV0dG9uPjwvbWQtY2hpcHM+XG4gKiA8L2hsanM+XG4gKi9cblxuXG4vKipcbiAqIE1kQ2hpcFJlbW92ZSBEaXJlY3RpdmUgRGVmaW5pdGlvbi5cbiAqIFxuICogQHBhcmFtICRjb21waWxlXG4gKiBAcGFyYW0gJHRpbWVvdXRcbiAqIEByZXR1cm5zIHt7cmVzdHJpY3Q6IHN0cmluZywgcmVxdWlyZTogc3RyaW5nW10sIGxpbms6IEZ1bmN0aW9uLCBzY29wZTogYm9vbGVhbn19XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWRDaGlwUmVtb3ZlICgkdGltZW91dCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJ15tZENoaXBzJyxcbiAgICBzY29wZTogZmFsc2UsXG4gICAgbGluazogcG9zdExpbmtcbiAgfTtcblxuICBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xuICAgIGVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgY3RybC5yZW1vdmVDaGlwKHNjb3BlLiQkcmVwbGFjZWRTY29wZS4kaW5kZXgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBDaGlsZCBlbGVtZW50cyBhcmVuJ3QgYXZhaWxhYmxlIHVudGlsIGFmdGVyIGEgJHRpbWVvdXQgdGljayBhcyB0aGV5IGFyZSBoaWRkZW4gYnkgYW5cbiAgICAvLyBgbmctaWZgLiBzZWUgaHR0cDovL2dvby5nbC96SVdmdXdcbiAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGVsZW1lbnQuYXR0cih7IHRhYmluZGV4OiAtMSwgYXJpYUhpZGRlbjogdHJ1ZSB9KTtcbiAgICAgIGVsZW1lbnQuZmluZCgnYnV0dG9uJykuYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcbiAgICB9KTtcbiAgfVxufVxuTWRDaGlwUmVtb3ZlLiRpbmplY3QgPSBbXCIkdGltZW91dFwiXTtcblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLmNoaXBzJylcbiAgICAuZGlyZWN0aXZlKCdtZENoaXBUcmFuc2NsdWRlJywgTWRDaGlwVHJhbnNjbHVkZSk7XG5cbmZ1bmN0aW9uIE1kQ2hpcFRyYW5zY2x1ZGUgKCRjb21waWxlLCAkbWRVdGlsKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgbGluazogbGluayxcbiAgICBzY29wZTogZmFsc2VcbiAgfTtcbiAgZnVuY3Rpb24gbGluayAoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICB2YXIgY3RybCA9IHNjb3BlLiRwYXJlbnQuJG1kQ2hpcHNDdHJsLFxuICAgICAgICBuZXdTY29wZSA9IGN0cmwucGFyZW50LiRuZXcoZmFsc2UsIGN0cmwucGFyZW50KTtcbiAgICBuZXdTY29wZS4kJHJlcGxhY2VkU2NvcGUgPSBzY29wZTtcbiAgICBuZXdTY29wZS4kY2hpcCA9IHNjb3BlLiRjaGlwO1xuICAgIG5ld1Njb3BlLiRtZENoaXBzQ3RybCA9IGN0cmw7XG4gICAgZWxlbWVudC5odG1sKGN0cmwuJHNjb3BlLiRldmFsKGF0dHIubWRDaGlwVHJhbnNjbHVkZSkpO1xuICAgICRjb21waWxlKGVsZW1lbnQuY29udGVudHMoKSkobmV3U2NvcGUpO1xuICB9XG59XG5NZENoaXBUcmFuc2NsdWRlLiRpbmplY3QgPSBbXCIkY29tcGlsZVwiLCBcIiRtZFV0aWxcIl07XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5jaGlwcycpXG4gICAgLmNvbnRyb2xsZXIoJ01kQ2hpcHNDdHJsJywgTWRDaGlwc0N0cmwpO1xuXG4vKipcbiAqIENvbnRyb2xsZXIgZm9yIHRoZSBNZENoaXBzIGNvbXBvbmVudC4gUmVzcG9uc2libGUgZm9yIGFkZGluZyB0byBhbmRcbiAqIHJlbW92aW5nIGZyb20gdGhlIGxpc3Qgb2YgY2hpcHMsIG1hcmtpbmcgY2hpcHMgYXMgc2VsZWN0ZWQsIGFuZCBiaW5kaW5nIHRvXG4gKiB0aGUgbW9kZWxzIG9mIHZhcmlvdXMgaW5wdXQgY29tcG9uZW50cy5cbiAqXG4gKiBAcGFyYW0gJHNjb3BlXG4gKiBAcGFyYW0gJG1kQ29uc3RhbnRcbiAqIEBwYXJhbSAkbG9nXG4gKiBAcGFyYW0gJGVsZW1lbnRcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBNZENoaXBzQ3RybCAoJHNjb3BlLCAkbWRDb25zdGFudCwgJGxvZywgJGVsZW1lbnQsICR0aW1lb3V0KSB7XG4gIC8qKiBAdHlwZSB7JHRpbWVvdXR9ICoqL1xuICB0aGlzLiR0aW1lb3V0ID0gJHRpbWVvdXQ7XG5cbiAgLyoqIEB0eXBlIHtPYmplY3R9ICovXG4gIHRoaXMuJG1kQ29uc3RhbnQgPSAkbWRDb25zdGFudDtcblxuICAvKiogQHR5cGUge2FuZ3VsYXIuJHNjb3BlfSAqL1xuICB0aGlzLiRzY29wZSA9ICRzY29wZTtcblxuICAvKiogQHR5cGUge2FuZ3VsYXIuJHNjb3BlfSAqL1xuICB0aGlzLnBhcmVudCA9ICRzY29wZS4kcGFyZW50O1xuXG4gIC8qKiBAdHlwZSB7JGxvZ30gKi9cbiAgdGhpcy4kbG9nID0gJGxvZztcblxuICAvKiogQHR5cGUgeyRlbGVtZW50fSAqL1xuICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XG5cbiAgLyoqIEB0eXBlIHthbmd1bGFyLk5nTW9kZWxDb250cm9sbGVyfSAqL1xuICB0aGlzLm5nTW9kZWxDdHJsID0gbnVsbDtcblxuICAvKiogQHR5cGUge2FuZ3VsYXIuTmdNb2RlbENvbnRyb2xsZXJ9ICovXG4gIHRoaXMudXNlcklucHV0TmdNb2RlbEN0cmwgPSBudWxsO1xuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgdGhpcy51c2VySW5wdXRFbGVtZW50ID0gbnVsbDtcblxuICAvKiogQHR5cGUge0FycmF5LjxPYmplY3Q+fSAqL1xuICB0aGlzLml0ZW1zID0gW107XG5cbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gIHRoaXMuc2VsZWN0ZWRDaGlwID0gLTE7XG5cblxuICAvKipcbiAgICogSGlkZGVuIGhpbnQgdGV4dCBmb3IgaG93IHRvIGRlbGV0ZSBhIGNoaXAuIFVzZWQgdG8gZ2l2ZSBjb250ZXh0IHRvIHNjcmVlbiByZWFkZXJzLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5kZWxldGVIaW50ID0gJ1ByZXNzIGRlbGV0ZSB0byByZW1vdmUgdGhpcyBjaGlwLic7XG5cbiAgLyoqXG4gICAqIEhpZGRlbiBsYWJlbCBmb3IgdGhlIGRlbGV0ZSBidXR0b24uIFVzZWQgdG8gZ2l2ZSBjb250ZXh0IHRvIHNjcmVlbiByZWFkZXJzLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5kZWxldGVCdXR0b25MYWJlbCA9ICdSZW1vdmUnO1xuXG4gIC8qKlxuICAgKiBNb2RlbCB1c2VkIGJ5IHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdGhpcy5jaGlwQnVmZmVyID0gJyc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gdXNlIHRoZSBtZE9uQXBwZW5kIGV4cHJlc3Npb24gdG8gdHJhbnNmb3JtIHRoZSBjaGlwIGJ1ZmZlclxuICAgKiBiZWZvcmUgYXBwZW5kaW5nIGl0IHRvIHRoZSBsaXN0LlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMudXNlTWRPbkFwcGVuZCA9IGZhbHNlO1xufVxuTWRDaGlwc0N0cmwuJGluamVjdCA9IFtcIiRzY29wZVwiLCBcIiRtZENvbnN0YW50XCIsIFwiJGxvZ1wiLCBcIiRlbGVtZW50XCIsIFwiJHRpbWVvdXRcIl07XG5cbi8qKlxuICogSGFuZGxlcyB0aGUga2V5ZG93biBldmVudCBvbiB0aGUgaW5wdXQgZWxlbWVudDogPGVudGVyPiBhcHBlbmRzIHRoZVxuICogYnVmZmVyIHRvIHRoZSBjaGlwIGxpc3QsIHdoaWxlIGJhY2tzcGFjZSByZW1vdmVzIHRoZSBsYXN0IGNoaXAgaW4gdGhlIGxpc3RcbiAqIGlmIHRoZSBjdXJyZW50IGJ1ZmZlciBpcyBlbXB0eS5cbiAqIEBwYXJhbSBldmVudFxuICovXG5NZENoaXBzQ3RybC5wcm90b3R5cGUuaW5wdXRLZXlkb3duID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgdmFyIGNoaXBCdWZmZXIgPSB0aGlzLmdldENoaXBCdWZmZXIoKTtcbiAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgY2FzZSB0aGlzLiRtZENvbnN0YW50LktFWV9DT0RFLkVOVEVSOlxuICAgICAgaWYgKHRoaXMuJHNjb3BlLnJlcXVpcmVNYXRjaCB8fCAhY2hpcEJ1ZmZlcikgYnJlYWs7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5hcHBlbmRDaGlwKGNoaXBCdWZmZXIpO1xuICAgICAgdGhpcy5yZXNldENoaXBCdWZmZXIoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgdGhpcy4kbWRDb25zdGFudC5LRVlfQ09ERS5CQUNLU1BBQ0U6XG4gICAgICBpZiAoY2hpcEJ1ZmZlcikgYnJlYWs7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlmICh0aGlzLml0ZW1zLmxlbmd0aCkgdGhpcy5zZWxlY3RBbmRGb2N1c0NoaXBTYWZlKHRoaXMuaXRlbXMubGVuZ3RoIC0gMSk7XG4gICAgICBicmVhaztcbiAgfVxufTtcblxuLyoqXG4gKiBIYW5kbGVzIHRoZSBrZXlkb3duIGV2ZW50IG9uIHRoZSBjaGlwIGVsZW1lbnRzOiBiYWNrc3BhY2UgcmVtb3ZlcyB0aGUgc2VsZWN0ZWQgY2hpcCwgYXJyb3dcbiAqIGtleXMgc3dpdGNoIHdoaWNoIGNoaXBzIGlzIGFjdGl2ZVxuICogQHBhcmFtIGV2ZW50XG4gKi9cbk1kQ2hpcHNDdHJsLnByb3RvdHlwZS5jaGlwS2V5ZG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICBpZiAodGhpcy5nZXRDaGlwQnVmZmVyKCkpIHJldHVybjtcbiAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgY2FzZSB0aGlzLiRtZENvbnN0YW50LktFWV9DT0RFLkJBQ0tTUEFDRTpcbiAgICBjYXNlIHRoaXMuJG1kQ29uc3RhbnQuS0VZX0NPREUuREVMRVRFOlxuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRDaGlwIDwgMCkgcmV0dXJuO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMucmVtb3ZlQW5kU2VsZWN0QWRqYWNlbnRDaGlwKHRoaXMuc2VsZWN0ZWRDaGlwKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgdGhpcy4kbWRDb25zdGFudC5LRVlfQ09ERS5MRUZUX0FSUk9XOlxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmICh0aGlzLnNlbGVjdGVkQ2hpcCA8IDApIHRoaXMuc2VsZWN0ZWRDaGlwID0gdGhpcy5pdGVtcy5sZW5ndGg7XG4gICAgICBpZiAodGhpcy5pdGVtcy5sZW5ndGgpIHRoaXMuc2VsZWN0QW5kRm9jdXNDaGlwU2FmZSh0aGlzLnNlbGVjdGVkQ2hpcCAtIDEpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSB0aGlzLiRtZENvbnN0YW50LktFWV9DT0RFLlJJR0hUX0FSUk9XOlxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuc2VsZWN0QW5kRm9jdXNDaGlwU2FmZSh0aGlzLnNlbGVjdGVkQ2hpcCArIDEpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSB0aGlzLiRtZENvbnN0YW50LktFWV9DT0RFLkVTQ0FQRTpcbiAgICBjYXNlIHRoaXMuJG1kQ29uc3RhbnQuS0VZX0NPREUuVEFCOlxuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRDaGlwIDwgMCkgcmV0dXJuO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMub25Gb2N1cygpO1xuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cbi8qKlxuICogR2V0IHRoZSBpbnB1dCdzIHBsYWNlaG9sZGVyIC0gdXNlcyBgcGxhY2Vob2xkZXJgIHdoZW4gbGlzdCBpcyBlbXB0eSBhbmQgYHNlY29uZGFyeS1wbGFjZWhvbGRlcmBcbiAqIHdoZW4gdGhlIGxpc3QgaXMgbm9uLWVtcHR5LiBJZiBgc2Vjb25kYXJ5LXBsYWNlaG9sZGVyYCBpcyBub3QgcHJvdmlkZWQsIGBwbGFjZWhvbGRlcmAgaXMgdXNlZFxuICogYWx3YXlzLlxuICovXG5NZENoaXBzQ3RybC5wcm90b3R5cGUuZ2V0UGxhY2Vob2xkZXIgPSBmdW5jdGlvbigpIHtcbiAgLy8gQWxsb3cgYHNlY29uZGFyeS1wbGFjZWhvbGRlcmAgdG8gYmUgYmxhbmsuXG4gIHZhciB1c2VTZWNvbmRhcnkgPSAodGhpcy5pdGVtcy5sZW5ndGggJiZcbiAgICAgICh0aGlzLnNlY29uZGFyeVBsYWNlaG9sZGVyID09ICcnIHx8IHRoaXMuc2Vjb25kYXJ5UGxhY2Vob2xkZXIpKTtcbiAgcmV0dXJuIHVzZVNlY29uZGFyeSA/IHRoaXMucGxhY2Vob2xkZXIgOiB0aGlzLnNlY29uZGFyeVBsYWNlaG9sZGVyO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIGNoaXAgYXQge0Bjb2RlIGluZGV4fSBhbmQgc2VsZWN0cyB0aGUgYWRqYWNlbnQgY2hpcC5cbiAqIEBwYXJhbSBpbmRleFxuICovXG5NZENoaXBzQ3RybC5wcm90b3R5cGUucmVtb3ZlQW5kU2VsZWN0QWRqYWNlbnRDaGlwID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgdmFyIHNlbEluZGV4ID0gdGhpcy5nZXRBZGphY2VudENoaXBJbmRleChpbmRleCk7XG4gIHRoaXMucmVtb3ZlQ2hpcChpbmRleCk7XG4gIHRoaXMuJHRpbWVvdXQoYW5ndWxhci5iaW5kKHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuc2VsZWN0QW5kRm9jdXNDaGlwU2FmZShzZWxJbmRleCk7XG4gIH0pKTtcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgc2VsZWN0ZWQgY2hpcCBpbmRleCB0byAtMS5cbiAqL1xuTWRDaGlwc0N0cmwucHJvdG90eXBlLnJlc2V0U2VsZWN0ZWRDaGlwID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2VsZWN0ZWRDaGlwID0gLTE7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IG9mIGFuIGFkamFjZW50IGNoaXAgdG8gc2VsZWN0IGFmdGVyIGRlbGV0aW9uLiBBZGphY2VuY3kgaXNcbiAqIGRldGVybWluZWQgYXMgdGhlIG5leHQgY2hpcCBpbiB0aGUgbGlzdCwgdW5sZXNzIHRoZSB0YXJnZXQgY2hpcCBpcyB0aGVcbiAqIGxhc3QgaW4gdGhlIGxpc3QsIHRoZW4gaXQgaXMgdGhlIGNoaXAgaW1tZWRpYXRlbHkgcHJlY2VkaW5nIHRoZSB0YXJnZXQuIElmXG4gKiB0aGVyZSBpcyBvbmx5IG9uZSBpdGVtIGluIHRoZSBsaXN0LCAtMSBpcyByZXR1cm5lZCAoc2VsZWN0IG5vbmUpLlxuICogVGhlIG51bWJlciByZXR1cm5lZCBpcyB0aGUgaW5kZXggdG8gc2VsZWN0IEFGVEVSIHRoZSB0YXJnZXQgaGFzIGJlZW5cbiAqIHJlbW92ZWQuXG4gKiBJZiB0aGUgY3VycmVudCBjaGlwIGlzIG5vdCBzZWxlY3RlZCwgdGhlbiAtMSBpcyByZXR1cm5lZCB0byBzZWxlY3Qgbm9uZS5cbiAqL1xuTWRDaGlwc0N0cmwucHJvdG90eXBlLmdldEFkamFjZW50Q2hpcEluZGV4ID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgdmFyIGxlbiA9IHRoaXMuaXRlbXMubGVuZ3RoIC0gMTtcbiAgcmV0dXJuIChsZW4gPT0gMCkgPyAtMSA6XG4gICAgICAoaW5kZXggPT0gbGVuKSA/IGluZGV4IC0xIDogaW5kZXg7XG59O1xuXG4vKipcbiAqIEFwcGVuZCB0aGUgY29udGVudHMgb2YgdGhlIGJ1ZmZlciB0byB0aGUgY2hpcCBsaXN0LiBUaGlzIG1ldGhvZCB3aWxsIGZpcnN0XG4gKiBjYWxsIG91dCB0byB0aGUgbWQtb24tYXBwZW5kIG1ldGhvZCwgaWYgcHJvdmlkZWRcbiAqIEBwYXJhbSBuZXdDaGlwXG4gKi9cbk1kQ2hpcHNDdHJsLnByb3RvdHlwZS5hcHBlbmRDaGlwID0gZnVuY3Rpb24obmV3Q2hpcCkge1xuICBpZiAodGhpcy5pdGVtcy5pbmRleE9mKG5ld0NoaXApICsgMSkgcmV0dXJuO1xuICBpZiAodGhpcy51c2VNZE9uQXBwZW5kICYmIHRoaXMubWRPbkFwcGVuZCkge1xuICAgIG5ld0NoaXAgPSB0aGlzLm1kT25BcHBlbmQoeyckY2hpcCc6IG5ld0NoaXB9KTtcbiAgfVxuICB0aGlzLml0ZW1zLnB1c2gobmV3Q2hpcCk7XG59O1xuXG4vKipcbiAqIFNldHMgd2hldGhlciB0byB1c2UgdGhlIG1kLW9uLWFwcGVuZCBleHByZXNzaW9uLiBUaGlzIGV4cHJlc3Npb24gaXNcbiAqIGJvdW5kIHRvIHNjb3BlIGFuZCBjb250cm9sbGVyIGluIHtAY29kZSBNZENoaXBzRGlyZWN0aXZlfSBhc1xuICoge0Bjb2RlIG1kT25BcHBlbmR9LiBEdWUgdG8gdGhlIG5hdHVyZSBvZiBkaXJlY3RpdmUgc2NvcGUgYmluZGluZ3MsIHRoZVxuICogY29udHJvbGxlciBjYW5ub3Qga25vdyBvbiBpdHMgb3duL2Zyb20gdGhlIHNjb3BlIHdoZXRoZXIgYW4gZXhwcmVzc2lvbiB3YXNcbiAqIGFjdHVhbGx5IHByb3ZpZGVkLlxuICovXG5NZENoaXBzQ3RybC5wcm90b3R5cGUudXNlTWRPbkFwcGVuZEV4cHJlc3Npb24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy51c2VNZE9uQXBwZW5kID0gdHJ1ZTtcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgaW5wdXQgYnVmZmVyLiBUaGUgaW5wdXQgYnVmZmVyIGNhbiBiZSB0aGUgbW9kZWwgYm91bmQgdG8gdGhlXG4gKiBkZWZhdWx0IGlucHV0IGl0ZW0ge0Bjb2RlIHRoaXMuY2hpcEJ1ZmZlcn0sIHRoZSB7QGNvZGUgc2VsZWN0ZWRJdGVtfVxuICogbW9kZWwgb2YgYW4ge0Bjb2RlIG1kLWF1dG9jb21wbGV0ZX0sIG9yLCB0aHJvdWdoIHNvbWUgbWFnaWMsIHRoZSBtb2RlbFxuICogYm91bmQgdG8gYW55IGlucHB1dCBvciB0ZXh0IGFyZWEgZWxlbWVudCBmb3VuZCB3aXRoaW4gYVxuICoge0Bjb2RlIG1kLWlucHV0LWNvbnRhaW5lcn0gZWxlbWVudC5cbiAqIEByZXR1cm4ge09iamVjdHxzdHJpbmd9XG4gKi9cbk1kQ2hpcHNDdHJsLnByb3RvdHlwZS5nZXRDaGlwQnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhdGhpcy51c2VySW5wdXRFbGVtZW50ID8gdGhpcy5jaGlwQnVmZmVyIDpcbiAgICAgIHRoaXMudXNlcklucHV0TmdNb2RlbEN0cmwgPyB0aGlzLnVzZXJJbnB1dE5nTW9kZWxDdHJsLiR2aWV3VmFsdWUgOlxuICAgICAgICAgIHRoaXMudXNlcklucHV0RWxlbWVudFswXS52YWx1ZTtcbn07XG5cbi8qKlxuICogUmVzZXRzIHRoZSBpbnB1dCBidWZmZXIgZm9yIGVpdGhlciB0aGUgaW50ZXJuYWwgaW5wdXQgb3IgdXNlciBwcm92aWRlZCBpbnB1dCBlbGVtZW50LlxuICovXG5NZENoaXBzQ3RybC5wcm90b3R5cGUucmVzZXRDaGlwQnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnVzZXJJbnB1dEVsZW1lbnQpIHtcbiAgICBpZiAodGhpcy51c2VySW5wdXROZ01vZGVsQ3RybCkge1xuICAgICAgdGhpcy51c2VySW5wdXROZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKCcnKTtcbiAgICAgIHRoaXMudXNlcklucHV0TmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVzZXJJbnB1dEVsZW1lbnRbMF0udmFsdWUgPSAnJztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5jaGlwQnVmZmVyID0gJyc7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgY2hpcCBhdCB0aGUgZ2l2ZW4gaW5kZXguXG4gKiBAcGFyYW0gaW5kZXhcbiAqL1xuTWRDaGlwc0N0cmwucHJvdG90eXBlLnJlbW92ZUNoaXAgPSBmdW5jdGlvbihpbmRleCkge1xuICB0aGlzLml0ZW1zLnNwbGljZShpbmRleCwgMSk7XG59O1xuXG5NZENoaXBzQ3RybC5wcm90b3R5cGUucmVtb3ZlQ2hpcEFuZEZvY3VzSW5wdXQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgdGhpcy5yZW1vdmVDaGlwKGluZGV4KTtcbiAgdGhpcy5vbkZvY3VzKCk7XG59O1xuLyoqXG4gKiBTZWxlY3RzIHRoZSBjaGlwIGF0IGBpbmRleGAsXG4gKiBAcGFyYW0gaW5kZXhcbiAqL1xuTWRDaGlwc0N0cmwucHJvdG90eXBlLnNlbGVjdEFuZEZvY3VzQ2hpcFNhZmUgPSBmdW5jdGlvbihpbmRleCkge1xuICBpZiAoIXRoaXMuaXRlbXMubGVuZ3RoKSB7XG4gICAgdGhpcy5zZWxlY3RDaGlwKC0xKTtcbiAgICB0aGlzLm9uRm9jdXMoKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGluZGV4ID09PSB0aGlzLml0ZW1zLmxlbmd0aCkgcmV0dXJuIHRoaXMub25Gb2N1cygpO1xuICBpbmRleCA9IE1hdGgubWF4KGluZGV4LCAwKTtcbiAgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdGhpcy5pdGVtcy5sZW5ndGggLSAxKTtcbiAgdGhpcy5zZWxlY3RDaGlwKGluZGV4KTtcbiAgdGhpcy5mb2N1c0NoaXAoaW5kZXgpO1xufTtcblxuLyoqXG4gKiBNYXJrcyB0aGUgY2hpcCBhdCB0aGUgZ2l2ZW4gaW5kZXggYXMgc2VsZWN0ZWQuXG4gKiBAcGFyYW0gaW5kZXhcbiAqL1xuTWRDaGlwc0N0cmwucHJvdG90eXBlLnNlbGVjdENoaXAgPSBmdW5jdGlvbihpbmRleCkge1xuICBpZiAoaW5kZXggPj0gLTEgJiYgaW5kZXggPD0gdGhpcy5pdGVtcy5sZW5ndGgpIHtcbiAgICB0aGlzLnNlbGVjdGVkQ2hpcCA9IGluZGV4O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuJGxvZy53YXJuKCdTZWxlY3RlZCBDaGlwIGluZGV4IG91dCBvZiBib3VuZHM7IGlnbm9yaW5nLicpO1xuICB9XG59O1xuXG4vKipcbiAqIFNlbGVjdHMgdGhlIGNoaXAgYXQgYGluZGV4YCBhbmQgZ2l2ZXMgaXQgZm9jdXMuXG4gKiBAcGFyYW0gaW5kZXhcbiAqL1xuTWRDaGlwc0N0cmwucHJvdG90eXBlLnNlbGVjdEFuZEZvY3VzQ2hpcCA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gIHRoaXMuc2VsZWN0Q2hpcChpbmRleCk7XG4gIGlmIChpbmRleCAhPSAtMSkge1xuICAgIHRoaXMuZm9jdXNDaGlwKGluZGV4KTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsIGBmb2N1cygpYCBvbiB0aGUgY2hpcCBhdCBgaW5kZXhgXG4gKi9cbk1kQ2hpcHNDdHJsLnByb3RvdHlwZS5mb2N1c0NoaXAgPSBmdW5jdGlvbihpbmRleCkge1xuICB0aGlzLiRlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJ21kLWNoaXBbaW5kZXg9XCInICsgaW5kZXggKyAnXCJdIC5tZC1jaGlwLWNvbnRlbnQnKS5mb2N1cygpO1xufTtcblxuLyoqXG4gKiBDb25maWd1cmVzIHRoZSByZXF1aXJlZCBpbnRlcmFjdGlvbnMgd2l0aCB0aGUgbmdNb2RlbCBDb250cm9sbGVyLlxuICogU3BlY2lmaWNhbGx5LCBzZXQge0Bjb2RlIHRoaXMuaXRlbXN9IHRvIHRoZSB7QGNvZGUgTmdNb2RlbEN0cmwjJHZpZXdWYWxlfS5cbiAqIEBwYXJhbSBuZ01vZGVsQ3RybFxuICovXG5NZENoaXBzQ3RybC5wcm90b3R5cGUuY29uZmlndXJlTmdNb2RlbCA9IGZ1bmN0aW9uKG5nTW9kZWxDdHJsKSB7XG4gIHRoaXMubmdNb2RlbEN0cmwgPSBuZ01vZGVsQ3RybDtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBtb2RlbCBpcyB1cGRhdGVkLiBkbyBzb21ldGhpbmcuXG4gICAgc2VsZi5pdGVtcyA9IHNlbGYubmdNb2RlbEN0cmwuJHZpZXdWYWx1ZTtcbiAgfTtcbn07XG5cbk1kQ2hpcHNDdHJsLnByb3RvdHlwZS5vbkZvY3VzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaW5wdXQgPSB0aGlzLiRlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7XG4gIGlucHV0ICYmIGlucHV0LmZvY3VzKCk7XG4gIHRoaXMucmVzZXRTZWxlY3RlZENoaXAoKTtcbn07XG5cbk1kQ2hpcHNDdHJsLnByb3RvdHlwZS5vbklucHV0Rm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuaW5wdXRIYXNGb2N1cyA9IHRydWU7XG4gIHRoaXMucmVzZXRTZWxlY3RlZENoaXAoKTtcbn07XG5cbk1kQ2hpcHNDdHJsLnByb3RvdHlwZS5vbklucHV0Qmx1ciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5pbnB1dEhhc0ZvY3VzID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIENvbmZpZ3VyZSBldmVudCBiaW5kaW5ncyBvbiBhIHVzZXItcHJvdmlkZWQgaW5wdXQgZWxlbWVudC5cbiAqIEBwYXJhbSBpbnB1dEVsZW1lbnRcbiAqL1xuTWRDaGlwc0N0cmwucHJvdG90eXBlLmNvbmZpZ3VyZVVzZXJJbnB1dCA9IGZ1bmN0aW9uKGlucHV0RWxlbWVudCkge1xuICB0aGlzLnVzZXJJbnB1dEVsZW1lbnQgPSBpbnB1dEVsZW1lbnQ7XG5cbiAgLy8gRmluZCB0aGUgTmdNb2RlbEN0cmwgZm9yIHRoZSBpbnB1dCBlbGVtZW50XG4gIHZhciBuZ01vZGVsQ3RybCA9IGlucHV0RWxlbWVudC5jb250cm9sbGVyKCduZ01vZGVsJyk7XG4gIC8vIGAuY29udHJvbGxlcmAgd2lsbCBsb29rIGluIHRoZSBwYXJlbnQgYXMgd2VsbC5cbiAgaWYgKG5nTW9kZWxDdHJsICE9IHRoaXMubmdNb2RlbEN0cmwpIHtcbiAgICB0aGlzLnVzZXJJbnB1dE5nTW9kZWxDdHJsID0gbmdNb2RlbEN0cmw7XG4gIH1cblxuICAvLyBCaW5kIHRvIGtleWRvd24gYW5kIGZvY3VzIGV2ZW50cyBvZiBpbnB1dFxuICB2YXIgc2NvcGUgPSB0aGlzLiRzY29wZTtcbiAgdmFyIGN0cmwgPSB0aGlzO1xuICBpbnB1dEVsZW1lbnRcbiAgICAgIC5hdHRyKHsgdGFiaW5kZXg6IDAgfSlcbiAgICAgIC5vbigna2V5ZG93bicsIGZ1bmN0aW9uKGV2ZW50KSB7IHNjb3BlLiRhcHBseSggYW5ndWxhci5iaW5kKGN0cmwsIGZ1bmN0aW9uKCkgeyBjdHJsLmlucHV0S2V5ZG93bihldmVudCk7IH0pKSB9KVxuICAgICAgLm9uKCdmb2N1cycsIGFuZ3VsYXIuYmluZChjdHJsLCBjdHJsLm9uSW5wdXRGb2N1cykpXG4gICAgICAub24oJ2JsdXInLCBhbmd1bGFyLmJpbmQoY3RybCwgY3RybC5vbklucHV0Qmx1cikpO1xufTtcblxuTWRDaGlwc0N0cmwucHJvdG90eXBlLmNvbmZpZ3VyZUF1dG9jb21wbGV0ZSA9IGZ1bmN0aW9uKGN0cmwpIHtcblxuICBjdHJsLnJlZ2lzdGVyU2VsZWN0ZWRJdGVtV2F0Y2hlcihhbmd1bGFyLmJpbmQodGhpcywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgdGhpcy5hcHBlbmRDaGlwKGl0ZW0pO1xuICAgICAgdGhpcy5yZXNldENoaXBCdWZmZXIoKTtcbiAgICB9XG4gIH0pKTtcblxuICB0aGlzLiRlbGVtZW50LmZpbmQoJ2lucHV0JylcbiAgICAgIC5vbignZm9jdXMnLGFuZ3VsYXIuYmluZCh0aGlzLCB0aGlzLm9uSW5wdXRGb2N1cykgKVxuICAgICAgLm9uKCdibHVyJywgYW5ndWxhci5iaW5kKHRoaXMsIHRoaXMub25JbnB1dEJsdXIpICk7XG59O1xuXG5NZENoaXBzQ3RybC5wcm90b3R5cGUuaGFzRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmlucHV0SGFzRm9jdXMgfHwgdGhpcy5zZWxlY3RlZENoaXAgPj0gMDtcbn07XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG4gIGFuZ3VsYXJcbiAgICAgIC5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMuY2hpcHMnKVxuICAgICAgLmRpcmVjdGl2ZSgnbWRDaGlwcycsIE1kQ2hpcHMpO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG1kQ2hpcHNcbiAgICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLmNoaXBzXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBgPG1kLWNoaXBzPmAgaXMgYW4gaW5wdXQgY29tcG9uZW50IGZvciBidWlsZGluZyBsaXN0cyBvZiBzdHJpbmdzIG9yIG9iamVjdHMuIFRoZSBsaXN0IGl0ZW1zIGFyZVxuICAgKiBkaXNwbGF5ZWQgYXMgJ2NoaXBzJy4gVGhpcyBjb21wb25lbnQgY2FuIG1ha2UgdXNlIG9mIGFuIGA8aW5wdXQ+YCBlbGVtZW50IG9yIGFuXG4gICAqIGA8bWQtYXV0b2NvbXBsZXRlPmAgZWxlbWVudC5cbiAgICpcbiAgICogPHN0cm9uZz5DdXN0b20gYDxtZC1jaGlwLXRlbXBsYXRlPmAgdGVtcGxhdGU8L3N0cm9uZz5cbiAgICogQSBjdXN0b20gdGVtcGxhdGUgbWF5IGJlIHByb3ZpZGVkIHRvIHJlbmRlciB0aGUgY29udGVudCBvZiBlYWNoIGNoaXAuIFRoaXMgaXMgYWNoaWV2ZWQgYnlcbiAgICogc3BlY2lmeWluZyBhbiBgPG1kLWNoaXAtdGVtcGxhdGU+YCBlbGVtZW50IGFzIGEgY2hpbGQgb2YgYDxtZC1jaGlwcz5gLiBOb3RlOiBBbnkgYXR0cmlidXRlcyBvblxuICAgKiBgPG1kLWNoaXAtdGVtcGxhdGU+YCB3aWxsIGJlIGRyb3BwZWQgYXMgb25seSB0aGUgaW5uZXJIVE1MIGlzIHVzZWQgZm9yIHRoZSBjaGlwIHRlbXBsYXRlLiBUaGVcbiAgICogdmFyaWFibGVzIGAkY2hpcGAgYW5kIGAkaW5kZXhgIGFyZSBhdmFpbGFibGUgaW4gdGhlIHNjb3BlIG9mIGA8bWQtY2hpcC10ZW1wbGF0ZT5gLCByZXByZXNlbnRpbmdcbiAgICogdGhlIGNoaXAgb2JqZWN0IGFuZCBpdHMgaW5kZXggaW4gdGhlIGxpc3Qgb2YgY2hpcHMsIHJlc3BlY3RpdmVseS5cbiAgICogVG8gb3ZlcnJpZGUgdGhlIGNoaXAgZGVsZXRlIGNvbnRyb2wsIGluY2x1ZGUgYW4gZWxlbWVudCAoaWRlYWxseSBhIGJ1dHRvbikgd2l0aCB0aGUgYXR0cmlidXRlXG4gICAqIGBtZC1jaGlwLXJlbW92ZWAuIEEgY2xpY2sgbGlzdGVuZXIgdG8gcmVtb3ZlIHRoZSBjaGlwIHdpbGwgYmUgYWRkZWQgYXV0b21hdGljYWxseS4gVGhlIGVsZW1lbnRcbiAgICogaXMgYWxzbyBwbGFjZWQgYXMgYSBzaWJsaW5nIHRvIHRoZSBjaGlwIGNvbnRlbnQgKG9uIHdoaWNoIHRoZXJlIGFyZSBhbHNvIGNsaWNrIGxpc3RlbmVycykgdG9cbiAgICogYXZvaWQgYSBuZXN0ZWQgbmctY2xpY2sgc2l0dWF0aW9uLlxuICAgKlxuICAgKiA8aDM+IFBlbmRpbmcgRmVhdHVyZXMgPC9oMz5cbiAgICogPHVsIHN0eWxlPVwicGFkZGluZy1sZWZ0OjIwcHg7XCI+XG4gICAqXG4gICAqICAgPHVsPlN0eWxlXG4gICAqICAgICA8bGk+Q29sb3VycyBmb3IgaG92ZXIsIHByZXNzIHN0YXRlcyAocmlwcGxlPykuPC9saT5cbiAgICogICA8L3VsPlxuICAgKlxuICAgKiAgIDx1bD5MaXN0IE1hbmlwdWxhdGlvblxuICAgKiAgICAgPGxpPmRlbGV0ZSBpdGVtIHZpYSBERUwgb3IgYmFja3NwYWNlIGtleXMgd2hlbiBzZWxlY3RlZDwvbGk+XG4gICAqICAgPC91bD5cbiAgICpcbiAgICogICA8dWw+VmFsaWRhdGlvblxuICAgKiAgICAgPGxpPmRlLWR1cGUgdmFsdWVzIChvciBzdXBwb3J0IGR1cGxpY2F0ZXMsIGJ1dCBmaXggdGhlIG5nLXJlcGVhdCBkdXBsaWNhdGUga2V5IGlzc3VlKTwvbGk+XG4gICAqICAgICA8bGk+YWxsb3cgYSB2YWxpZGF0aW9uIGNhbGxiYWNrPC9saT5cbiAgICogICAgIDxsaT5oaWxpZ2h0aW5nIHN0eWxlIGZvciBpbnZhbGlkIGNoaXBzPC9saT5cbiAgICogICA8L3VsPlxuICAgKlxuICAgKiAgIDx1bD5JdGVtIG11dGF0aW9uXG4gICAqICAgICA8bGk+U3VwcG9ydCBgXG4gICAqICAgICAgIDxtZC1jaGlwLWVkaXQ+YCB0ZW1wbGF0ZSwgc2hvdy9oaWRlIHRoZSBlZGl0IGVsZW1lbnQgb24gdGFwL2NsaWNrPyBkb3VibGUgdGFwL2RvdWJsZVxuICAgKiAgICAgICBjbGljaz9cbiAgICogICAgIDwvbGk+XG4gICAqICAgPC91bD5cbiAgICpcbiAgICogICA8dWw+VHJ1bmNhdGlvbiBhbmQgRGlzYW1iaWd1YXRpb24gKD8pXG4gICAqICAgICA8bGk+VHJ1bmNhdGUgY2hpcCB0ZXh0IHdoZXJlIHBvc3NpYmxlLCBidXQgZG8gbm90IHRydW5jYXRlIGVudHJpZXMgc3VjaCB0aGF0IHR3byBhcmVcbiAgICogICAgIGluZGlzdGluZ3Vpc2hhYmxlLjwvbGk+XG4gICAqICAgPC91bD5cbiAgICpcbiAgICogICA8dWw+RHJhZyBhbmQgRHJvcFxuICAgKiAgICAgPGxpPkRyYWcgYW5kIGRyb3AgY2hpcHMgYmV0d2VlbiByZWxhdGVkIGA8bWQtY2hpcHM+YCBlbGVtZW50cy5cbiAgICogICAgIDwvbGk+XG4gICAqICAgPC91bD5cbiAgICogPC91bD5cbiAgICpcbiAgICogIDxzcGFuIHN0eWxlPVwiZm9udC1zaXplOi44ZW07dGV4dC1hbGlnbjpjZW50ZXJcIj5cbiAgICogICAgV2FybmluZzogVGhpcyBjb21wb25lbnQgaXMgYSBXT1JLIElOIFBST0dSRVNTLiBJZiB5b3UgdXNlIGl0IG5vdyxcbiAgICogICAgaXQgd2lsbCBwcm9iYWJseSBicmVhayBvbiB5b3UgaW4gdGhlIGZ1dHVyZS5cbiAgICogIDwvc3Bhbj5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmc9fG9iamVjdD19IG5nLW1vZGVsIEEgbW9kZWwgdG8gYmluZCB0aGUgbGlzdCBvZiBpdGVtcyB0b1xuICAgKiBAcGFyYW0ge3N0cmluZz19IHBsYWNlaG9sZGVyIFBsYWNlaG9sZGVyIHRleHQgdGhhdCB3aWxsIGJlIGZvcndhcmRlZCB0byB0aGUgaW5wdXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gc2Vjb25kYXJ5LXBsYWNlaG9sZGVyIFBsYWNlaG9sZGVyIHRleHQgdGhhdCB3aWxsIGJlIGZvcndhcmRlZCB0byB0aGUgaW5wdXQsXG4gICAqICAgIGRpc3BsYXllZCB3aGVuIHRoZXJlIGlzIGF0IGxlYXN0IG9uIGl0ZW0gaW4gdGhlIGxpc3RcbiAgICogQHBhcmFtIHtib29sZWFuPX0gcmVhZG9ubHkgRGlzYWJsZXMgbGlzdCBtYW5pcHVsYXRpb24gKGRlbGV0aW5nIG9yIGFkZGluZyBsaXN0IGl0ZW1zKSwgaGlkaW5nXG4gICAqICAgIHRoZSBpbnB1dCBhbmQgZGVsZXRlIGJ1dHRvbnNcbiAgICogQHBhcmFtIHtleHByZXNzaW9ufSBtZC1vbi1hcHBlbmQgQW4gZXhwcmVzc2lvbiBleHBlY3RlZCB0byBjb252ZXJ0IHRoZSBpbnB1dCBzdHJpbmcgaW50byBhblxuICAgKiAgICBvYmplY3Qgd2hlbiBhZGRpbmcgYSBjaGlwLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IGRlbGV0ZS1oaW50IEEgc3RyaW5nIHJlYWQgYnkgc2NyZWVuIHJlYWRlcnMgaW5zdHJ1Y3RpbmcgdXNlcnMgdGhhdCBwcmVzc2luZ1xuICAgKiAgICB0aGUgZGVsZXRlIGtleSB3aWxsIHJlbW92ZSB0aGUgY2hpcC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBkZWxldGUtYnV0dG9uLWxhYmVsIEEgbGFiZWwgZm9yIHRoZSBkZWxldGUgYnV0dG9uLiBBbHNvIGhpZGRlbiBhbmQgcmVhZCBieVxuICAgKiAgICBzY3JlZW4gcmVhZGVycy5cbiAgICpcbiAgICogQHVzYWdlXG4gICAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gICAqICAgPG1kLWNoaXBzXG4gICAqICAgICAgIG5nLW1vZGVsPVwibXlJdGVtc1wiXG4gICAqICAgICAgIHBsYWNlaG9sZGVyPVwiQWRkIGFuIGl0ZW1cIlxuICAgKiAgICAgICByZWFkb25seT1cImlzUmVhZE9ubHlcIj5cbiAgICogICA8L21kLWNoaXBzPlxuICAgKiA8L2hsanM+XG4gICAqXG4gICAqL1xuXG5cbiAgdmFyIE1EX0NISVBTX1RFTVBMQVRFID0gJ1xcXG4gICAgICA8bWQtY2hpcHMtd3JhcFxcXG4gICAgICAgICAgbmctaWY9XCIhJG1kQ2hpcHNDdHJsLnJlYWRvbmx5IHx8ICRtZENoaXBzQ3RybC5pdGVtcy5sZW5ndGggPiAwXCJcXFxuICAgICAgICAgIG5nLWtleWRvd249XCIkbWRDaGlwc0N0cmwuY2hpcEtleWRvd24oJGV2ZW50KVwiXFxcbiAgICAgICAgICBuZy1jbGFzcz1cInsgXFwnbWQtZm9jdXNlZFxcJzogJG1kQ2hpcHNDdHJsLmhhc0ZvY3VzKCkgfVwiXFxcbiAgICAgICAgICBjbGFzcz1cIm1kLWNoaXBzXCI+XFxcbiAgICAgICAgPG1kLWNoaXAgbmctcmVwZWF0PVwiJGNoaXAgaW4gJG1kQ2hpcHNDdHJsLml0ZW1zXCJcXFxuICAgICAgICAgICAgaW5kZXg9XCJ7eyRpbmRleH19XCJcXFxuICAgICAgICAgICAgbmctY2xhc3M9XCJ7XFwnbWQtZm9jdXNlZFxcJzogJG1kQ2hpcHNDdHJsLnNlbGVjdGVkQ2hpcCA9PSAkaW5kZXh9XCI+XFxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibWQtY2hpcC1jb250ZW50XCJcXFxuICAgICAgICAgICAgICB0YWJpbmRleD1cIi0xXCJcXFxuICAgICAgICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxcXG4gICAgICAgICAgICAgIG5nLWZvY3VzPVwiISRtZENoaXBzQ3RybC5yZWFkb25seSAmJiAkbWRDaGlwc0N0cmwuc2VsZWN0Q2hpcCgkaW5kZXgpXCJcXFxuICAgICAgICAgICAgICBtZC1jaGlwLXRyYW5zY2x1ZGU9XCIkbWRDaGlwc0N0cmwuY2hpcENvbnRlbnRzVGVtcGxhdGVcIj48L2Rpdj5cXFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZC1jaGlwLXJlbW92ZS1jb250YWluZXJcIlxcXG4gICAgICAgICAgICAgIG1kLWNoaXAtdHJhbnNjbHVkZT1cIiRtZENoaXBzQ3RybC5jaGlwUmVtb3ZlVGVtcGxhdGVcIj48L2Rpdj5cXFxuICAgICAgICA8L21kLWNoaXA+XFxcbiAgICAgICAgPGRpdiBuZy1pZj1cIiEkbWRDaGlwc0N0cmwucmVhZG9ubHkgJiYgJG1kQ2hpcHNDdHJsLm5nTW9kZWxDdHJsXCJcXFxuICAgICAgICAgICAgY2xhc3M9XCJtZC1jaGlwLWlucHV0LWNvbnRhaW5lclwiXFxcbiAgICAgICAgICAgIG1kLWNoaXAtdHJhbnNjbHVkZT1cIiRtZENoaXBzQ3RybC5jaGlwSW5wdXRUZW1wbGF0ZVwiPjwvZGl2PlxcXG4gICAgICAgIDwvZGl2PlxcXG4gICAgICA8L21kLWNoaXBzLXdyYXA+JztcblxuICB2YXIgQ0hJUF9JTlBVVF9URU1QTEFURSA9ICdcXFxuICAgICAgICA8aW5wdXRcXFxuICAgICAgICAgICAgdGFiaW5kZXg9XCIwXCJcXFxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJ7eyRtZENoaXBzQ3RybC5nZXRQbGFjZWhvbGRlcigpfX1cIlxcXG4gICAgICAgICAgICBhcmlhLWxhYmVsPVwie3skbWRDaGlwc0N0cmwuZ2V0UGxhY2Vob2xkZXIoKX19XCJcXFxuICAgICAgICAgICAgbmctbW9kZWw9XCIkbWRDaGlwc0N0cmwuY2hpcEJ1ZmZlclwiXFxcbiAgICAgICAgICAgIG5nLWZvY3VzPVwiJG1kQ2hpcHNDdHJsLm9uSW5wdXRGb2N1cygpXCJcXFxuICAgICAgICAgICAgbmctYmx1cj1cIiRtZENoaXBzQ3RybC5vbklucHV0Qmx1cigpXCJcXFxuICAgICAgICAgICAgbmcta2V5ZG93bj1cIiRtZENoaXBzQ3RybC5pbnB1dEtleWRvd24oJGV2ZW50KVwiPic7XG5cbiAgdmFyIENISVBfREVGQVVMVF9URU1QTEFURSA9ICdcXFxuICAgICAgPHNwYW4+e3skY2hpcH19PC9zcGFuPic7XG5cbiAgdmFyIENISVBfUkVNT1ZFX1RFTVBMQVRFID0gJ1xcXG4gICAgICA8YnV0dG9uXFxcbiAgICAgICAgICBjbGFzcz1cIm1kLWNoaXAtcmVtb3ZlXCJcXFxuICAgICAgICAgIG5nLWlmPVwiISRtZENoaXBzQ3RybC5yZWFkb25seVwiXFxcbiAgICAgICAgICBuZy1jbGljaz1cIiRtZENoaXBzQ3RybC5yZW1vdmVDaGlwQW5kRm9jdXNJbnB1dCgkJHJlcGxhY2VkU2NvcGUuJGluZGV4KVwiXFxcbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcXFxuICAgICAgICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXFxcbiAgICAgICAgICB0YWJpbmRleD1cIi0xXCI+XFxcbiAgICAgICAgPG1kLWljb24gbWQtc3ZnLWljb249XCJtZC1jbG9zZVwiPjwvbWQtaWNvbj5cXFxuICAgICAgICA8c3BhbiBjbGFzcz1cIm1kLXZpc3VhbGx5LWhpZGRlblwiPlxcXG4gICAgICAgICAge3skbWRDaGlwc0N0cmwuZGVsZXRlQnV0dG9uTGFiZWx9fVxcXG4gICAgICAgIDwvc3Bhbj5cXFxuICAgICAgPC9idXR0b24+JztcblxuICAvKipcbiAgICogTURDaGlwcyBEaXJlY3RpdmUgRGVmaW5pdGlvblxuICAgKi9cbiAgZnVuY3Rpb24gTWRDaGlwcyAoJG1kVGhlbWluZywgJG1kVXRpbCwgJGNvbXBpbGUsICRsb2csICR0aW1lb3V0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRlbXBsYXRlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgICAvLyBDbG9uZSB0aGUgZWxlbWVudCBpbnRvIGFuIGF0dHJpYnV0ZS4gQnkgcHJlcGVuZGluZyB0aGUgYXR0cmlidXRlXG4gICAgICAgIC8vIG5hbWUgd2l0aCAnJCcsIEFuZ3VsYXIgd29uJ3Qgd3JpdGUgaXQgaW50byB0aGUgRE9NLiBUaGUgY2xvbmVkXG4gICAgICAgIC8vIGVsZW1lbnQgcHJvcGFnYXRlcyB0byB0aGUgbGluayBmdW5jdGlvbiB2aWEgdGhlIGF0dHJzIGFyZ3VtZW50LFxuICAgICAgICAvLyB3aGVyZSB2YXJpb3VzIGNvbnRhaW5lZC1lbGVtZW50cyBjYW4gYmUgY29uc3VtZWQuXG4gICAgICAgIHZhciBjb250ZW50ID0gYXR0cnNbJyRtZFVzZXJUZW1wbGF0ZSddID0gZWxlbWVudC5jbG9uZSgpO1xuICAgICAgICByZXR1cm4gTURfQ0hJUFNfVEVNUExBVEU7XG4gICAgICB9LFxuICAgICAgcmVxdWlyZTogWydtZENoaXBzJ10sXG4gICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgY29udHJvbGxlcjogJ01kQ2hpcHNDdHJsJyxcbiAgICAgIGNvbnRyb2xsZXJBczogJyRtZENoaXBzQ3RybCcsXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgY29tcGlsZTogY29tcGlsZSxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIHJlYWRvbmx5OiAnPXJlYWRvbmx5JyxcbiAgICAgICAgcGxhY2Vob2xkZXI6ICdAJyxcbiAgICAgICAgc2Vjb25kYXJ5UGxhY2Vob2xkZXI6ICdAJyxcbiAgICAgICAgbWRPbkFwcGVuZDogJyYnLFxuICAgICAgICBkZWxldGVIaW50OiAnQCcsXG4gICAgICAgIGRlbGV0ZUJ1dHRvbkxhYmVsOiAnQCcsXG4gICAgICAgIHJlcXVpcmVNYXRjaDogJz0/bWRSZXF1aXJlTWF0Y2gnXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEJ1aWxkcyB0aGUgZmluYWwgdGVtcGxhdGUgZm9yIGBtZC1jaGlwc2AgYW5kIHJldHVybnMgdGhlIHBvc3RMaW5rIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQnVpbGRpbmcgdGhlIHRlbXBsYXRlIGludm9sdmVzIDMga2V5IGNvbXBvbmVudHM6XG4gICAgICogc3RhdGljIGNoaXBzXG4gICAgICogY2hpcCB0ZW1wbGF0ZVxuICAgICAqIGlucHV0IGNvbnRyb2xcbiAgICAgKlxuICAgICAqIElmIG5vIGBuZy1tb2RlbGAgaXMgcHJvdmlkZWQsIG9ubHkgdGhlIHN0YXRpYyBjaGlwIHdvcmsgbmVlZHMgdG8gYmUgZG9uZS5cbiAgICAgKlxuICAgICAqIElmIG5vIHVzZXItcGFzc2VkIGBtZC1jaGlwLXRlbXBsYXRlYCBleGlzdHMsIHRoZSBkZWZhdWx0IHRlbXBsYXRlIGlzIHVzZWQuIFRoaXMgcmVzdWx0aW5nXG4gICAgICogdGVtcGxhdGUgaXMgYXBwZW5kZWQgdG8gdGhlIGNoaXAgY29udGVudCBlbGVtZW50LlxuICAgICAqXG4gICAgICogVGhlIHJlbW92ZSBidXR0b24gbWF5IGJlIG92ZXJyaWRkZW4gYnkgcGFzc2luZyBhbiBlbGVtZW50IHdpdGggYW4gbWQtY2hpcC1yZW1vdmUgYXR0cmlidXRlLlxuICAgICAqXG4gICAgICogSWYgYW4gYGlucHV0YCBvciBgbWQtYXV0b2NvbXBsZXRlYCBlbGVtZW50IGlzIHByb3ZpZGVkIGJ5IHRoZSBjYWxsZXIsIGl0IGlzIHNldCBhc2lkZSBmb3JcbiAgICAgKiB0cmFuc2NsdXNpb24gbGF0ZXIuIFRoZSB0cmFuc2NsdXNpb24gaGFwcGVucyBpbiBgcG9zdExpbmtgIGFzIHRoZSBwYXJlbnQgc2NvcGUgaXMgcmVxdWlyZWQuXG4gICAgICogSWYgbm8gdXNlciBpbnB1dCBpcyBwcm92aWRlZCwgYSBkZWZhdWx0IG9uZSBpcyBhcHBlbmRlZCB0byB0aGUgaW5wdXQgY29udGFpbmVyIG5vZGUgaW4gdGhlXG4gICAgICogdGVtcGxhdGUuXG4gICAgICpcbiAgICAgKiBTdGF0aWMgQ2hpcHMgKGkuZS4gYG1kLWNoaXBgIGVsZW1lbnRzIHBhc3NlZCBmcm9tIHRoZSBjYWxsZXIpIGFyZSBnYXRoZXJlZCBhbmQgc2V0IGFzaWRlIGZvclxuICAgICAqIHRyYW5zY2x1c2lvbiBpbiB0aGUgYHBvc3RMaW5rYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqXG4gICAgICogQHBhcmFtIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gYXR0clxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21waWxlKGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIC8vIEdyYWIgdGhlIHVzZXIgdGVtcGxhdGUgZnJvbSBhdHRyIGFuZCByZXNldCB0aGUgYXR0cmlidXRlIHRvIG51bGwuXG4gICAgICB2YXIgdXNlclRlbXBsYXRlID0gYXR0clsnJG1kVXNlclRlbXBsYXRlJ107XG4gICAgICBhdHRyWyckbWRVc2VyVGVtcGxhdGUnXSA9IG51bGw7XG5cbiAgICAgIC8vIFNldCB0aGUgY2hpcCByZW1vdmUsIGNoaXAgY29udGVudHMgYW5kIGNoaXAgaW5wdXQgdGVtcGxhdGVzLiBUaGUgbGluayBmdW5jdGlvbiB3aWxsIHB1dFxuICAgICAgLy8gdGhlbSBvbiB0aGUgc2NvcGUgZm9yIHRyYW5zY2x1c2lvbiBsYXRlci5cbiAgICAgIHZhciBjaGlwUmVtb3ZlVGVtcGxhdGUgICA9IGdldFRlbXBsYXRlQnlRdWVyeSgnbWQtY2hpcHM+KlttZC1jaGlwLXJlbW92ZV0nKSB8fCBDSElQX1JFTU9WRV9URU1QTEFURSxcbiAgICAgICAgICBjaGlwQ29udGVudHNUZW1wbGF0ZSA9IGdldFRlbXBsYXRlQnlRdWVyeSgnbWQtY2hpcHM+bWQtY2hpcC10ZW1wbGF0ZScpIHx8IENISVBfREVGQVVMVF9URU1QTEFURSxcbiAgICAgICAgICBjaGlwSW5wdXRUZW1wbGF0ZSAgICA9IGdldFRlbXBsYXRlQnlRdWVyeSgnbWQtY2hpcHM+bWQtYXV0b2NvbXBsZXRlJylcbiAgICAgICAgICAgICAgfHwgZ2V0VGVtcGxhdGVCeVF1ZXJ5KCdtZC1jaGlwcz5pbnB1dCcpXG4gICAgICAgICAgICAgIHx8IENISVBfSU5QVVRfVEVNUExBVEUsXG4gICAgICAgICAgc3RhdGljQ2hpcHMgPSB1c2VyVGVtcGxhdGUuZmluZCgnbWQtY2hpcCcpO1xuXG4gICAgICAvLyBXYXJuIG9mIG1hbGZvcm1lZCB0ZW1wbGF0ZS4gU2VlICMyNTQ1XG4gICAgICBpZiAodXNlclRlbXBsYXRlWzBdLnF1ZXJ5U2VsZWN0b3IoJ21kLWNoaXAtdGVtcGxhdGU+KlttZC1jaGlwLXJlbW92ZV0nKSkge1xuICAgICAgICAkbG9nLndhcm4oJ2ludmFsaWQgcGxhY2VtZW50IG9mIG1kLWNoaXAtcmVtb3ZlIHdpdGhpbiBtZC1jaGlwLXRlbXBsYXRlLicpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRUZW1wbGF0ZUJ5UXVlcnkgKHF1ZXJ5KSB7XG4gICAgICAgIGlmICghYXR0ci5uZ01vZGVsKSByZXR1cm47XG4gICAgICAgIHZhciBlbGVtZW50ID0gdXNlclRlbXBsYXRlWzBdLnF1ZXJ5U2VsZWN0b3IocXVlcnkpO1xuICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50Lm91dGVySFRNTDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDb25maWd1cmVzIGNvbnRyb2xsZXIgYW5kIHRyYW5zY2x1ZGVzLlxuICAgICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycykge1xuXG4gICAgICAgICRtZFV0aWwuaW5pdE9wdGlvbmFsUHJvcGVydGllcyhzY29wZSwgYXR0cik7XG5cbiAgICAgICAgJG1kVGhlbWluZyhlbGVtZW50KTtcbiAgICAgICAgdmFyIG1kQ2hpcHNDdHJsID0gY29udHJvbGxlcnNbMF07XG4gICAgICAgIG1kQ2hpcHNDdHJsLmNoaXBDb250ZW50c1RlbXBsYXRlID0gY2hpcENvbnRlbnRzVGVtcGxhdGU7XG4gICAgICAgIG1kQ2hpcHNDdHJsLmNoaXBSZW1vdmVUZW1wbGF0ZSAgID0gY2hpcFJlbW92ZVRlbXBsYXRlO1xuICAgICAgICBtZENoaXBzQ3RybC5jaGlwSW5wdXRUZW1wbGF0ZSAgICA9IGNoaXBJbnB1dFRlbXBsYXRlO1xuXG4gICAgICAgIGVsZW1lbnRcbiAgICAgICAgICAgIC5hdHRyKHsgYXJpYUhpZGRlbjogdHJ1ZSwgdGFiaW5kZXg6IC0xIH0pXG4gICAgICAgICAgICAub24oJ2ZvY3VzJywgZnVuY3Rpb24gKCkgeyBtZENoaXBzQ3RybC5vbkZvY3VzKCk7IH0pO1xuXG4gICAgICAgIGlmIChhdHRyLm5nTW9kZWwpIHtcbiAgICAgICAgICBtZENoaXBzQ3RybC5jb25maWd1cmVOZ01vZGVsKGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpKTtcblxuICAgICAgICAgIC8vIElmIGFuIGBtZC1vbi1hcHBlbmRgIGF0dHJpYnV0ZSB3YXMgc2V0LCB0ZWxsIHRoZSBjb250cm9sbGVyIHRvIHVzZSB0aGUgZXhwcmVzc2lvblxuICAgICAgICAgIC8vIHdoZW4gYXBwZW5kaW5nIGNoaXBzLlxuICAgICAgICAgIGlmIChhdHRycy5tZE9uQXBwZW5kKSBtZENoaXBzQ3RybC51c2VNZE9uQXBwZW5kRXhwcmVzc2lvbigpO1xuXG4gICAgICAgICAgLy8gVGhlIG1kLWF1dG9jb21wbGV0ZSBhbmQgaW5wdXQgZWxlbWVudHMgd29uJ3QgYmUgY29tcGlsZWQgdW50aWwgYWZ0ZXIgdGhpcyBkaXJlY3RpdmVcbiAgICAgICAgICAvLyBpcyBjb21wbGV0ZSAoZHVlIHRvIHRoZWlyIG5lc3RlZCBuYXR1cmUpLiBXYWl0IGEgdGljayBiZWZvcmUgbG9va2luZyBmb3IgdGhlbSB0b1xuICAgICAgICAgIC8vIGNvbmZpZ3VyZSB0aGUgY29udHJvbGxlci5cbiAgICAgICAgICBpZiAoY2hpcElucHV0VGVtcGxhdGUgIT0gQ0hJUF9JTlBVVF9URU1QTEFURSkge1xuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmIChjaGlwSW5wdXRUZW1wbGF0ZS5pbmRleE9mKCc8bWQtYXV0b2NvbXBsZXRlJykgPT09IDApXG4gICAgICAgICAgICAgICAgbWRDaGlwc0N0cmxcbiAgICAgICAgICAgICAgICAgICAgLmNvbmZpZ3VyZUF1dG9jb21wbGV0ZShlbGVtZW50LmZpbmQoJ21kLWF1dG9jb21wbGV0ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY29udHJvbGxlcignbWRBdXRvY29tcGxldGUnKSk7XG4gICAgICAgICAgICAgIG1kQ2hpcHNDdHJsLmNvbmZpZ3VyZVVzZXJJbnB1dChlbGVtZW50LmZpbmQoJ2lucHV0JykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29tcGlsZSB3aXRoIHRoZSBwYXJlbnQncyBzY29wZSBhbmQgcHJlcGVuZCBhbnkgc3RhdGljIGNoaXBzIHRvIHRoZSB3cmFwcGVyLlxuICAgICAgICBpZiAoc3RhdGljQ2hpcHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBjb21waWxlZFN0YXRpY0NoaXBzID0gJGNvbXBpbGUoc3RhdGljQ2hpcHMpKHNjb3BlLiRwYXJlbnQpO1xuICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkgeyBlbGVtZW50LmZpbmQoJ21kLWNoaXBzLXdyYXAnKS5wcmVwZW5kKGNvbXBpbGVkU3RhdGljQ2hpcHMpOyB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgTWRDaGlwcy4kaW5qZWN0ID0gW1wiJG1kVGhlbWluZ1wiLCBcIiRtZFV0aWxcIiwgXCIkY29tcGlsZVwiLCBcIiRsb2dcIiwgXCIkdGltZW91dFwiXTtcblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLmNoaXBzJylcbiAgICAuY29udHJvbGxlcignTWRDb250YWN0Q2hpcHNDdHJsJywgTWRDb250YWN0Q2hpcHNDdHJsKTtcblxuXG5cbi8qKlxuICogQ29udHJvbGxlciBmb3IgdGhlIE1kQ29udGFjdENoaXBzIGNvbXBvbmVudFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE1kQ29udGFjdENoaXBzQ3RybCAoKSB7XG4gIC8qKiBAdHlwZSB7T2JqZWN0fSAqL1xuICB0aGlzLnNlbGVjdGVkSXRlbSA9IG51bGw7XG5cbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIHRoaXMuc2VhcmNoVGV4dCA9ICcnO1xufVxuXG5cbk1kQ29udGFjdENoaXBzQ3RybC5wcm90b3R5cGUucXVlcnlDb250YWN0ID0gZnVuY3Rpb24oc2VhcmNoVGV4dCkge1xuICB2YXIgcmVzdWx0cyA9IHRoaXMuY29udGFjdFF1ZXJ5KHsnJHF1ZXJ5Jzogc2VhcmNoVGV4dH0pO1xuICByZXR1cm4gdGhpcy5maWx0ZXJTZWxlY3RlZCA/XG4gICAgICByZXN1bHRzLmZpbHRlcihhbmd1bGFyLmJpbmQodGhpcywgdGhpcy5maWx0ZXJTZWxlY3RlZENvbnRhY3RzKSkgOiByZXN1bHRzO1xufTtcblxuXG5NZENvbnRhY3RDaGlwc0N0cmwucHJvdG90eXBlLmZpbHRlclNlbGVjdGVkQ29udGFjdHMgPSBmdW5jdGlvbihjb250YWN0KSB7XG4gIHJldHVybiB0aGlzLmNvbnRhY3RzLmluZGV4T2YoY29udGFjdCkgPT0gLTE7XG59O1xuXG59KSgpO1xuKGZ1bmN0aW9uKCl7XG5cInVzZSBzdHJpY3RcIjtcblxuICBhbmd1bGFyXG4gICAgICAubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLmNoaXBzJylcbiAgICAgIC5kaXJlY3RpdmUoJ21kQ29udGFjdENoaXBzJywgTWRDb250YWN0Q2hpcHMpO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZGlyZWN0aXZlXG4gICAqIEBuYW1lIG1kQ29udGFjdENoaXBzXG4gICAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5jaGlwc1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogYDxtZC1jb250YWN0LWNoaXBzPmAgaXMgYW4gaW5wdXQgY29tcG9uZW50IGJhc2VkIG9uIGBtZC1jaGlwc2AgYW5kIG1ha2VzIHVzZSBvZiBhblxuICAgKiAgICBgbWQtYXV0b2NvbXBsZXRlYCBlbGVtZW50LiBUaGUgY29tcG9uZW50IGFsbG93cyB0aGUgY2FsbGVyIHRvIHN1cHBseSBhIHF1ZXJ5IGV4cHJlc3Npb25cbiAgICogICAgd2hpY2ggcmV0dXJucyAgYSBsaXN0IG9mIHBvc3NpYmxlIGNvbnRhY3RzLiBUaGUgdXNlciBjYW4gc2VsZWN0IG9uZSBvZiB0aGVzZSBhbmQgYWRkIGl0IHRvXG4gICAqICAgIHRoZSBsaXN0IG9mIGNoaXBzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZz18b2JqZWN0PX0gbmctbW9kZWwgQSBtb2RlbCB0byBiaW5kIHRoZSBsaXN0IG9mIGl0ZW1zIHRvXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcGxhY2Vob2xkZXIgUGxhY2Vob2xkZXIgdGV4dCB0aGF0IHdpbGwgYmUgZm9yd2FyZGVkIHRvIHRoZSBpbnB1dC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBzZWNvbmRhcnktcGxhY2Vob2xkZXIgUGxhY2Vob2xkZXIgdGV4dCB0aGF0IHdpbGwgYmUgZm9yd2FyZGVkIHRvIHRoZSBpbnB1dCxcbiAgICogICAgZGlzcGxheWVkIHdoZW4gdGhlcmUgaXMgYXQgbGVhc3Qgb24gaXRlbSBpbiB0aGUgbGlzdFxuICAgKiBAcGFyYW0ge2V4cHJlc3Npb259IG1kLWNvbnRhY3RzIEFuIGV4cHJlc3Npb24gZXhwZWN0ZWQgdG8gcmV0dXJuIGNvbnRhY3RzIG1hdGNoaW5nIHRoZSBzZWFyY2hcbiAgICogICAgdGVzdCwgYCRxdWVyeWAuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZC1jb250YWN0LW5hbWUgVGhlIGZpZWxkIG5hbWUgb2YgdGhlIGNvbnRhY3Qgb2JqZWN0IHJlcHJlc2VudGluZyB0aGVcbiAgICogICAgY29udGFjdCdzIG5hbWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZC1jb250YWN0LWVtYWlsIFRoZSBmaWVsZCBuYW1lIG9mIHRoZSBjb250YWN0IG9iamVjdCByZXByZXNlbnRpbmcgdGhlXG4gICAqICAgIGNvbnRhY3QncyBlbWFpbCBhZGRyZXNzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWQtY29udGFjdC1pbWFnZSBUaGUgZmllbGQgbmFtZSBvZiB0aGUgY29udGFjdCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZVxuICAgKiAgICBjb250YWN0J3MgaW1hZ2UuXG4gICAqXG4gICAqXG4gICAqIC8vIFRoZSBmb2xsb3dpbmcgYXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQgYnV0IG1heSBjb21lIGJhY2suXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IGZpbHRlci1zZWxlY3RlZCBXaGV0aGVyIHRvIGZpbHRlciBzZWxlY3RlZCBjb250YWN0cyBmcm9tIHRoZSBsaXN0IG9mXG4gICAqICAgIHN1Z2dlc3Rpb25zIHNob3duIGluIHRoZSBhdXRvY29tcGxldGUuXG4gICAqXG4gICAqXG4gICAqXG4gICAqIEB1c2FnZVxuICAgKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICAgKiAgIDxtZC1jb250YWN0LWNoaXBzXG4gICAqICAgICAgIG5nLW1vZGVsPVwiY3RybC5jb250YWN0c1wiXG4gICAqICAgICAgIG1kLWNvbnRhY3RzPVwiY3RybC5xdWVyeVNlYXJjaCgkcXVlcnkpXCJcbiAgICogICAgICAgbWQtY29udGFjdC1uYW1lPVwibmFtZVwiXG4gICAqICAgICAgIG1kLWNvbnRhY3QtaW1hZ2U9XCJpbWFnZVwiXG4gICAqICAgICAgIG1kLWNvbnRhY3QtZW1haWw9XCJlbWFpbFwiXG4gICAqICAgICAgIHBsYWNlaG9sZGVyPVwiVG9cIj5cbiAgICogICA8L21kLWNvbnRhY3QtY2hpcHM+XG4gICAqIDwvaGxqcz5cbiAgICpcbiAgICovXG5cblxuICB2YXIgTURfQ09OVEFDVF9DSElQU19URU1QTEFURSA9ICdcXFxuICAgICAgPG1kLWNoaXBzIGNsYXNzPVwibWQtY29udGFjdC1jaGlwc1wiXFxcbiAgICAgICAgICBuZy1tb2RlbD1cIiRtZENvbnRhY3RDaGlwc0N0cmwuY29udGFjdHNcIlxcXG4gICAgICAgICAgbWQtcmVxdWlyZS1tYXRjaD1cIiRtZENvbnRhY3RDaGlwc0N0cmwucmVxdWlyZU1hdGNoXCJcXFxuICAgICAgICAgIG1kLWF1dG9jb21wbGV0ZS1zbmFwPlxcXG4gICAgICAgICAgPG1kLWF1dG9jb21wbGV0ZVxcXG4gICAgICAgICAgICAgIG1kLW1lbnUtY2xhc3M9XCJtZC1jb250YWN0LWNoaXBzLXN1Z2dlc3Rpb25zXCJcXFxuICAgICAgICAgICAgICBtZC1zZWxlY3RlZC1pdGVtPVwiJG1kQ29udGFjdENoaXBzQ3RybC5zZWxlY3RlZEl0ZW1cIlxcXG4gICAgICAgICAgICAgIG1kLXNlYXJjaC10ZXh0PVwiJG1kQ29udGFjdENoaXBzQ3RybC5zZWFyY2hUZXh0XCJcXFxuICAgICAgICAgICAgICBtZC1pdGVtcz1cIml0ZW0gaW4gJG1kQ29udGFjdENoaXBzQ3RybC5xdWVyeUNvbnRhY3QoJG1kQ29udGFjdENoaXBzQ3RybC5zZWFyY2hUZXh0KVwiXFxcbiAgICAgICAgICAgICAgbWQtaXRlbS10ZXh0PVwiJG1kQ29udGFjdENoaXBzQ3RybC5tZENvbnRhY3ROYW1lXCJcXFxuICAgICAgICAgICAgICBtZC1uby1jYWNoZT1cInRydWVcIlxcXG4gICAgICAgICAgICAgIG1kLWF1dG9zZWxlY3RcXFxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cInt7JG1kQ29udGFjdENoaXBzQ3RybC5jb250YWN0cy5sZW5ndGggPT0gMCA/XFxcbiAgICAgICAgICAgICAgICAgICRtZENvbnRhY3RDaGlwc0N0cmwucGxhY2Vob2xkZXIgOiAkbWRDb250YWN0Q2hpcHNDdHJsLnNlY29uZGFyeVBsYWNlaG9sZGVyfX1cIj5cXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1kLWNvbnRhY3Qtc3VnZ2VzdGlvblwiPlxcXG4gICAgICAgICAgICAgIDxpbWcgXFxcbiAgICAgICAgICAgICAgICAgIG5nLXNyYz1cInt7aXRlbVskbWRDb250YWN0Q2hpcHNDdHJsLmNvbnRhY3RJbWFnZV19fVwiXFxcbiAgICAgICAgICAgICAgICAgIGFsdD1cInt7aXRlbVskbWRDb250YWN0Q2hpcHNDdHJsLmNvbnRhY3ROYW1lXX19XCIgLz5cXFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kLWNvbnRhY3QtbmFtZVwiIG1kLWhpZ2hsaWdodC10ZXh0PVwiJG1kQ29udGFjdENoaXBzQ3RybC5zZWFyY2hUZXh0XCI+XFxcbiAgICAgICAgICAgICAgICB7e2l0ZW1bJG1kQ29udGFjdENoaXBzQ3RybC5jb250YWN0TmFtZV19fVxcXG4gICAgICAgICAgICAgIDwvc3Bhbj5cXFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kLWNvbnRhY3QtZW1haWxcIiA+e3tpdGVtWyRtZENvbnRhY3RDaGlwc0N0cmwuY29udGFjdEVtYWlsXX19PC9zcGFuPlxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgIDwvbWQtYXV0b2NvbXBsZXRlPlxcXG4gICAgICAgICAgPG1kLWNoaXAtdGVtcGxhdGU+XFxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZC1jb250YWN0LWF2YXRhclwiPlxcXG4gICAgICAgICAgICAgIDxpbWcgXFxcbiAgICAgICAgICAgICAgICAgIG5nLXNyYz1cInt7JGNoaXBbJG1kQ29udGFjdENoaXBzQ3RybC5jb250YWN0SW1hZ2VdfX1cIlxcXG4gICAgICAgICAgICAgICAgICBhbHQ9XCJ7eyRjaGlwWyRtZENvbnRhY3RDaGlwc0N0cmwuY29udGFjdE5hbWVdfX1cIiAvPlxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1kLWNvbnRhY3QtbmFtZVwiPlxcXG4gICAgICAgICAgICAgIHt7JGNoaXBbJG1kQ29udGFjdENoaXBzQ3RybC5jb250YWN0TmFtZV19fVxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgIDwvbWQtY2hpcC10ZW1wbGF0ZT5cXFxuICAgICAgPC9tZC1jaGlwcz4nO1xuXG5cbiAgLyoqXG4gICAqIE1EQ29udGFjdENoaXBzIERpcmVjdGl2ZSBEZWZpbml0aW9uXG4gICAqXG4gICAqIEBwYXJhbSAkbWRUaGVtaW5nXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKiBAbmdJbmplY3RcbiAgICovXG4gIGZ1bmN0aW9uIE1kQ29udGFjdENoaXBzICgkbWRUaGVtaW5nLCAkbWRVdGlsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRlbXBsYXRlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgICByZXR1cm4gTURfQ09OVEFDVF9DSElQU19URU1QTEFURTtcbiAgICAgIH0sXG4gICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgY29udHJvbGxlcjogJ01kQ29udGFjdENoaXBzQ3RybCcsXG4gICAgICBjb250cm9sbGVyQXM6ICckbWRDb250YWN0Q2hpcHNDdHJsJyxcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICBjb21waWxlOiBjb21waWxlLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgY29udGFjdFF1ZXJ5OiAnJm1kQ29udGFjdHMnLFxuICAgICAgICBwbGFjZWhvbGRlcjogJ0AnLFxuICAgICAgICBzZWNvbmRhcnlQbGFjZWhvbGRlcjogJ0AnLFxuICAgICAgICBjb250YWN0TmFtZTogJ0BtZENvbnRhY3ROYW1lJyxcbiAgICAgICAgY29udGFjdEltYWdlOiAnQG1kQ29udGFjdEltYWdlJyxcbiAgICAgICAgY29udGFjdEVtYWlsOiAnQG1kQ29udGFjdEVtYWlsJyxcbiAgICAgICAgY29udGFjdHM6ICc9bmdNb2RlbCcsXG4gICAgICAgIHJlcXVpcmVNYXRjaDogJz0/bWRSZXF1aXJlTWF0Y2gnXG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNvbXBpbGUoZWxlbWVudCwgYXR0cikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMpIHtcblxuICAgICAgICAkbWRVdGlsLmluaXRPcHRpb25hbFByb3BlcnRpZXMoc2NvcGUsIGF0dHIpO1xuICAgICAgICAkbWRUaGVtaW5nKGVsZW1lbnQpO1xuXG4gICAgICAgIGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIE1kQ29udGFjdENoaXBzLiRpbmplY3QgPSBbXCIkbWRUaGVtaW5nXCIsIFwiJG1kVXRpbFwiXTtcblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbWRUYWJcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy50YWJzXG4gKlxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSB0aGUgYDxtZC10YWI+YCBhIG5lc3RlZCBkaXJlY3RpdmUgdXNlZCB3aXRoaW4gYDxtZC10YWJzPmAgdG8gc3BlY2lmeSBhIHRhYiB3aXRoIGEgKipsYWJlbCoqIGFuZCBvcHRpb25hbCAqdmlldyBjb250ZW50Ki5cbiAqXG4gKiBJZiB0aGUgYGxhYmVsYCBhdHRyaWJ1dGUgaXMgbm90IHNwZWNpZmllZCwgdGhlbiBhbiBvcHRpb25hbCBgPG1kLXRhYi1sYWJlbD5gIHRhZyBjYW4gYmUgdXNlZCB0byBzcGVjaWZ5IG1vcmVcbiAqIGNvbXBsZXggdGFiIGhlYWRlciBtYXJrdXAuIElmIG5laXRoZXIgdGhlICoqbGFiZWwqKiBub3IgdGhlICoqbWQtdGFiLWxhYmVsKiogYXJlIHNwZWNpZmllZCwgdGhlbiB0aGUgbmVzdGVkXG4gKiBtYXJrdXAgb2YgdGhlIGA8bWQtdGFiPmAgaXMgdXNlZCBhcyB0aGUgdGFiIGhlYWRlciBtYXJrdXAuXG4gKlxuICogUGxlYXNlIG5vdGUgdGhhdCBpZiB5b3UgdXNlIGA8bWQtdGFiLWxhYmVsPmAsIHlvdXIgY29udGVudCAqKk1VU1QqKiBiZSB3cmFwcGVkIGluIHRoZSBgPG1kLXRhYi1ib2R5PmAgdGFnLiAgVGhpc1xuICogaXMgdG8gZGVmaW5lIGEgY2xlYXIgc2VwYXJhdGlvbiBiZXR3ZWVuIHRoZSB0YWIgY29udGVudCBhbmQgdGhlIHRhYiBsYWJlbC5cbiAqXG4gKiBJZiBhIHRhYiAqKmxhYmVsKiogaGFzIGJlZW4gaWRlbnRpZmllZCwgdGhlbiBhbnkgKipub24tKipgPG1kLXRhYi1sYWJlbD5gIG1hcmt1cFxuICogd2lsbCBiZSBjb25zaWRlcmVkIHRhYiBjb250ZW50IGFuZCB3aWxsIGJlIHRyYW5zY2x1ZGVkIHRvIHRoZSBpbnRlcm5hbCBgPGRpdiBjbGFzcz1cIm1kLXRhYnMtY29udGVudFwiPmAgY29udGFpbmVyLlxuICpcbiAqIFRoaXMgY29udGFpbmVyIGlzIHVzZWQgYnkgdGhlIFRhYnNDb250cm9sbGVyIHRvIHNob3cvaGlkZSB0aGUgYWN0aXZlIHRhYidzIGNvbnRlbnQgdmlldy4gVGhpcyBzeW5jaHJvbml6YXRpb24gaXNcbiAqIGF1dG9tYXRpY2FsbHkgbWFuYWdlZCBieSB0aGUgaW50ZXJuYWwgVGFic0NvbnRyb2xsZXIgd2hlbmV2ZXIgdGhlIHRhYiBzZWxlY3Rpb24gY2hhbmdlcy4gU2VsZWN0aW9uIGNoYW5nZXMgY2FuXG4gKiBiZSBpbml0aWF0ZWQgdmlhIGRhdGEgYmluZGluZyBjaGFuZ2VzLCBwcm9ncmFtbWF0aWMgaW52b2NhdGlvbiwgb3IgdXNlciBnZXN0dXJlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IGxhYmVsIE9wdGlvbmFsIGF0dHJpYnV0ZSB0byBzcGVjaWZ5IGEgc2ltcGxlIHN0cmluZyBhcyB0aGUgdGFiIGxhYmVsXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBkaXNhYmxlZCBJZiBwcmVzZW50LCBkaXNhYmxlZCB0YWIgc2VsZWN0aW9uLlxuICogQHBhcmFtIHtleHByZXNzaW9uPX0gbWQtb24tZGVzZWxlY3QgRXhwcmVzc2lvbiB0byBiZSBldmFsdWF0ZWQgYWZ0ZXIgdGhlIHRhYiBoYXMgYmVlbiBkZS1zZWxlY3RlZC5cbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG1kLW9uLXNlbGVjdCBFeHByZXNzaW9uIHRvIGJlIGV2YWx1YXRlZCBhZnRlciB0aGUgdGFiIGhhcyBiZWVuIHNlbGVjdGVkLlxuICpcbiAqXG4gKiBAdXNhZ2VcbiAqXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogPG1kLXRhYiBsYWJlbD1cIlwiIGRpc2FibGVkPVwiXCIgbWQtb24tc2VsZWN0PVwiXCIgbWQtb24tZGVzZWxlY3Q9XCJcIiA+XG4gKiAgIDxoMz5NeSBUYWIgY29udGVudDwvaDM+XG4gKiA8L21kLXRhYj5cbiAqXG4gKiA8bWQtdGFiID5cbiAqICAgPG1kLXRhYi1sYWJlbD5cbiAqICAgICA8aDM+TXkgVGFiIGNvbnRlbnQ8L2gzPlxuICogICA8L21kLXRhYi1sYWJlbD5cbiAqICAgPG1kLXRhYi1ib2R5PlxuICogICAgIDxwPlxuICogICAgICAgU2VkIHV0IHBlcnNwaWNpYXRpcyB1bmRlIG9tbmlzIGlzdGUgbmF0dXMgZXJyb3Igc2l0IHZvbHVwdGF0ZW0gYWNjdXNhbnRpdW0gZG9sb3JlbXF1ZSBsYXVkYW50aXVtLFxuICogICAgICAgdG90YW0gcmVtIGFwZXJpYW0sIGVhcXVlIGlwc2EgcXVhZSBhYiBpbGxvIGludmVudG9yZSB2ZXJpdGF0aXMgZXQgcXVhc2kgYXJjaGl0ZWN0byBiZWF0YWUgdml0YWVcbiAqICAgICAgIGRpY3RhIHN1bnQgZXhwbGljYWJvLiBOZW1vIGVuaW0gaXBzYW0gdm9sdXB0YXRlbSBxdWlhIHZvbHVwdGFzIHNpdCBhc3Blcm5hdHVyIGF1dCBvZGl0IGF1dCBmdWdpdCxcbiAqICAgICAgIHNlZCBxdWlhIGNvbnNlcXV1bnR1ciBtYWduaSBkb2xvcmVzIGVvcyBxdWkgcmF0aW9uZSB2b2x1cHRhdGVtIHNlcXVpIG5lc2NpdW50LlxuICogICAgIDwvcD5cbiAqICAgPC9tZC10YWItYm9keT5cbiAqIDwvbWQtdGFiPlxuICogPC9obGpzPlxuICpcbiAqL1xuYW5ndWxhclxuICAgIC5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMudGFicycpXG4gICAgLmRpcmVjdGl2ZSgnbWRUYWInLCBNZFRhYik7XG5cbmZ1bmN0aW9uIE1kVGFiICgpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiAnXj9tZFRhYnMnLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIHRlbXBsYXRlOiBmdW5jdGlvbiAoZWxlbWVudCwgYXR0cikge1xuICAgICAgdmFyIGxhYmVsID0gZ2V0TGFiZWwoKSxcbiAgICAgICAgICBib2R5ICA9IGdldFRlbXBsYXRlKCk7XG4gICAgICByZXR1cm4gJycgK1xuICAgICAgICAgICc8bWQtdGFiLWxhYmVsPicgKyBsYWJlbCArICc8L21kLXRhYi1sYWJlbD4nICtcbiAgICAgICAgICAnPG1kLXRhYi1ib2R5PicgKyBib2R5ICsgJzwvbWQtdGFiLWJvZHk+JztcbiAgICAgIGZ1bmN0aW9uIGdldExhYmVsICgpIHtcbiAgICAgICAgcmV0dXJuIGdldExhYmVsRWxlbWVudCgpIHx8IGdldExhYmVsQXR0cmlidXRlKCkgfHwgZ2V0RWxlbWVudENvbnRlbnRzKCk7XG4gICAgICAgIGZ1bmN0aW9uIGdldExhYmVsQXR0cmlidXRlICgpIHsgcmV0dXJuIGF0dHIubGFiZWw7IH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0TGFiZWxFbGVtZW50ICgpIHtcbiAgICAgICAgICB2YXIgbGFiZWwgPSBlbGVtZW50LmZpbmQoJ21kLXRhYi1sYWJlbCcpLmVxKDApO1xuICAgICAgICAgIGlmIChsYWJlbC5sZW5ndGgpIHJldHVybiBsYWJlbC5yZW1vdmUoKS5odG1sKCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0RWxlbWVudENvbnRlbnRzICgpIHtcbiAgICAgICAgICB2YXIgaHRtbCA9IGVsZW1lbnQuaHRtbCgpO1xuICAgICAgICAgIGVsZW1lbnQuZW1wdHkoKTtcbiAgICAgICAgICByZXR1cm4gaHRtbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZnVuY3Rpb24gZ2V0VGVtcGxhdGUgKCkge1xuICAgICAgICB2YXIgY29udGVudCA9IGVsZW1lbnQuZmluZCgnbWQtdGFiLWJvZHknKS5lcSgwKSxcbiAgICAgICAgICAgIHRlbXBsYXRlID0gY29udGVudC5sZW5ndGggPyBjb250ZW50Lmh0bWwoKSA6IGF0dHIubGFiZWwgPyBlbGVtZW50Lmh0bWwoKSA6ICcnO1xuICAgICAgICBpZiAoY29udGVudC5sZW5ndGgpIGNvbnRlbnQucmVtb3ZlKCk7XG4gICAgICAgIGVsc2UgaWYgKGF0dHIubGFiZWwpIGVsZW1lbnQuZW1wdHkoKTtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2NvcGU6IHtcbiAgICAgIGFjdGl2ZTogICAnPT9tZEFjdGl2ZScsXG4gICAgICBkaXNhYmxlZDogJz0/bmdEaXNhYmxlZCcsXG4gICAgICBzZWxlY3Q6ICAgJyY/bWRPblNlbGVjdCcsXG4gICAgICBkZXNlbGVjdDogJyY/bWRPbkRlc2VsZWN0J1xuICAgIH0sXG4gICAgbGluazogcG9zdExpbmtcbiAgfTtcblxuICBmdW5jdGlvbiBwb3N0TGluayAoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHtcbiAgICBpZiAoIWN0cmwpIHJldHVybjtcbiAgICB2YXIgdGFicyA9IGVsZW1lbnQucGFyZW50KClbMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ21kLXRhYicpLFxuICAgICAgICBpbmRleCA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwodGFicywgZWxlbWVudFswXSksXG4gICAgICAgIGJvZHkgPSBlbGVtZW50LmZpbmQoJ21kLXRhYi1ib2R5JykuZXEoMCkucmVtb3ZlKCksXG4gICAgICAgIGxhYmVsID0gZWxlbWVudC5maW5kKCdtZC10YWItbGFiZWwnKS5lcSgwKS5yZW1vdmUoKSxcbiAgICAgICAgZGF0YSA9IGN0cmwuaW5zZXJ0VGFiKHtcbiAgICAgICAgICBzY29wZTogICAgc2NvcGUsXG4gICAgICAgICAgcGFyZW50OiAgIHNjb3BlLiRwYXJlbnQsXG4gICAgICAgICAgaW5kZXg6ICAgIGluZGV4LFxuICAgICAgICAgIGVsZW1lbnQ6ICBlbGVtZW50LFxuICAgICAgICAgIHRlbXBsYXRlOiBib2R5Lmh0bWwoKSxcbiAgICAgICAgICBsYWJlbDogICAgbGFiZWwuaHRtbCgpXG4gICAgICAgIH0sIGluZGV4KTtcblxuICAgIHNjb3BlLnNlbGVjdCAgID0gc2NvcGUuc2VsZWN0ICAgfHwgYW5ndWxhci5ub29wO1xuICAgIHNjb3BlLmRlc2VsZWN0ID0gc2NvcGUuZGVzZWxlY3QgfHwgYW5ndWxhci5ub29wO1xuXG4gICAgc2NvcGUuJHdhdGNoKCdhY3RpdmUnLCBmdW5jdGlvbiAoYWN0aXZlKSB7IGlmIChhY3RpdmUpIGN0cmwuc2VsZWN0KGRhdGEuZ2V0SW5kZXgoKSk7IH0pO1xuICAgIHNjb3BlLiR3YXRjaCgnZGlzYWJsZWQnLCBmdW5jdGlvbiAoKSB7IGN0cmwucmVmcmVzaEluZGV4KCk7IH0pO1xuICAgIHNjb3BlLiR3YXRjaChcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKHRhYnMsIGVsZW1lbnRbMF0pO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAobmV3SW5kZXgpIHtcbiAgICAgICAgICBkYXRhLmluZGV4ID0gbmV3SW5kZXg7XG4gICAgICAgICAgY3RybC51cGRhdGVUYWJPcmRlcigpO1xuICAgICAgICB9XG4gICAgKTtcbiAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkgeyBjdHJsLnJlbW92ZVRhYihkYXRhKTsgfSk7XG5cbiAgfVxufVxuXG59KSgpO1xuKGZ1bmN0aW9uKCl7XG5cInVzZSBzdHJpY3RcIjtcblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMudGFicycpXG4gICAgLmRpcmVjdGl2ZSgnbWRUYWJJdGVtJywgTWRUYWJJdGVtKTtcblxuZnVuY3Rpb24gTWRUYWJJdGVtICgpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiAnXj9tZFRhYnMnLFxuICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsgKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gICAgICBpZiAoIWN0cmwpIHJldHVybjtcbiAgICAgIGN0cmwuYXR0YWNoUmlwcGxlKHNjb3BlLCBlbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy50YWJzJylcbiAgICAuZGlyZWN0aXZlKCdtZFRhYkxhYmVsJywgTWRUYWJMYWJlbCk7XG5cbmZ1bmN0aW9uIE1kVGFiTGFiZWwgKCkge1xuICByZXR1cm4geyB0ZXJtaW5hbDogdHJ1ZSB9O1xufVxuXG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy50YWJzJylcbiAgICAuZGlyZWN0aXZlKCdtZFRhYlNjcm9sbCcsIE1kVGFiU2Nyb2xsKTtcblxuZnVuY3Rpb24gTWRUYWJTY3JvbGwgKCRwYXJzZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29tcGlsZTogZnVuY3Rpb24gKCRlbGVtZW50LCBhdHRyKSB7XG4gICAgICB2YXIgZm4gPSAkcGFyc2UoYXR0ci5tZFRhYlNjcm9sbCwgbnVsbCwgdHJ1ZSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gbmdFdmVudEhhbmRsZXIgKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICAgIGVsZW1lbnQub24oJ21vdXNld2hlZWwnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkgeyBmbihzY29wZSwgeyAkZXZlbnQ6IGV2ZW50IH0pOyB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuTWRUYWJTY3JvbGwuJGluamVjdCA9IFtcIiRwYXJzZVwiXTtcblxufSkoKTtcbihmdW5jdGlvbigpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLnRhYnMnKVxuICAgIC5jb250cm9sbGVyKCdNZFRhYnNDb250cm9sbGVyJywgTWRUYWJzQ29udHJvbGxlcik7XG5cbi8qKlxuICogQG5nSW5qZWN0XG4gKi9cbmZ1bmN0aW9uIE1kVGFic0NvbnRyb2xsZXIgKCRzY29wZSwgJGVsZW1lbnQsICR3aW5kb3csICR0aW1lb3V0LCAkbWRDb25zdGFudCwgJG1kVGFiSW5rUmlwcGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJG1kVXRpbCwgJGFuaW1hdGUsICRhdHRycywgJGNvbXBpbGUsICRtZFRoZW1pbmcpIHtcbiAgLy8tLSBkZWZpbmUgcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gIHZhciBjdHJsICAgICAgID0gdGhpcyxcbiAgICAgIGxvY2tlZCAgICAgPSBmYWxzZSxcbiAgICAgIGVsZW1lbnRzICAgPSBnZXRFbGVtZW50cygpLFxuICAgICAgcXVldWUgICAgICA9IFtdLFxuICAgICAgZGVzdHJveWVkICA9IGZhbHNlLFxuICAgICAgbG9hZGVkICAgICA9IGZhbHNlO1xuXG4gIC8vLS0gZGVmaW5lIHB1YmxpYyBwcm9wZXJ0aWVzIHdpdGggY2hhbmdlIGhhbmRsZXJzXG4gIGRlZmluZVByb3BlcnR5KCdmb2N1c0luZGV4JywgaGFuZGxlRm9jdXNJbmRleENoYW5nZSwgJHNjb3BlLnNlbGVjdGVkSW5kZXggfHwgMCk7XG4gIGRlZmluZVByb3BlcnR5KCdvZmZzZXRMZWZ0JywgaGFuZGxlT2Zmc2V0Q2hhbmdlLCAwKTtcbiAgZGVmaW5lUHJvcGVydHkoJ2hhc0NvbnRlbnQnLCBoYW5kbGVIYXNDb250ZW50LCBmYWxzZSk7XG5cbiAgLy8tLSBkZWZpbmUgcHVibGljIHByb3BlcnRpZXNcbiAgY3RybC5zY29wZSA9ICRzY29wZTtcbiAgY3RybC5wYXJlbnQgPSAkc2NvcGUuJHBhcmVudDtcbiAgY3RybC50YWJzID0gW107XG4gIGN0cmwubGFzdFNlbGVjdGVkSW5kZXggPSBudWxsO1xuICBjdHJsLmhhc0ZvY3VzID0gZmFsc2U7XG4gIGN0cmwubGFzdENsaWNrID0gdHJ1ZTtcbiAgY3RybC5zaG91bGRQYWdpbmF0ZSA9IGZhbHNlO1xuICBjdHJsLnNob3VsZENlbnRlclRhYnMgPSBzaG91bGRDZW50ZXJUYWJzKCk7XG5cbiAgLy8tLSBkZWZpbmUgcHVibGljIG1ldGhvZHNcbiAgY3RybC5yZWRpcmVjdEZvY3VzID0gcmVkaXJlY3RGb2N1cztcbiAgY3RybC5hdHRhY2hSaXBwbGUgPSBhdHRhY2hSaXBwbGU7XG4gIGN0cmwuc2hvdWxkU3RyZXRjaFRhYnMgPSBzaG91bGRTdHJldGNoVGFicztcbiAgY3RybC5pbnNlcnRUYWIgPSBpbnNlcnRUYWI7XG4gIGN0cmwucmVtb3ZlVGFiID0gcmVtb3ZlVGFiO1xuICBjdHJsLnNlbGVjdCA9IHNlbGVjdDtcbiAgY3RybC5zY3JvbGwgPSBzY3JvbGw7XG4gIGN0cmwubmV4dFBhZ2UgPSBuZXh0UGFnZTtcbiAgY3RybC5wcmV2aW91c1BhZ2UgPSBwcmV2aW91c1BhZ2U7XG4gIGN0cmwua2V5ZG93biA9IGtleWRvd247XG4gIGN0cmwuY2FuUGFnZUZvcndhcmQgPSBjYW5QYWdlRm9yd2FyZDtcbiAgY3RybC5jYW5QYWdlQmFjayA9IGNhblBhZ2VCYWNrO1xuICBjdHJsLnJlZnJlc2hJbmRleCA9IHJlZnJlc2hJbmRleDtcbiAgY3RybC5pbmNyZW1lbnRTZWxlY3RlZEluZGV4ID0gaW5jcmVtZW50U2VsZWN0ZWRJbmRleDtcbiAgY3RybC51cGRhdGVJbmtCYXJTdHlsZXMgPSAkbWRVdGlsLmRlYm91bmNlKHVwZGF0ZUlua0JhclN0eWxlcywgMTAwKTtcbiAgY3RybC51cGRhdGVUYWJPcmRlciA9ICRtZFV0aWwuZGVib3VuY2UodXBkYXRlVGFiT3JkZXIsIDEwMCk7XG5cbiAgaW5pdCgpO1xuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGluaXRpYWxpemF0aW9uIGZvciB0aGUgY29udHJvbGxlciwgc2V0dXAgZXZlbnRzIGFuZCB3YXRjaGVyKHMpXG4gICAqL1xuICBmdW5jdGlvbiBpbml0ICgpIHtcbiAgICAkc2NvcGUuc2VsZWN0ZWRJbmRleCA9ICRzY29wZS5zZWxlY3RlZEluZGV4IHx8IDA7XG4gICAgY29tcGlsZVRlbXBsYXRlKCk7XG4gICAgY29uZmlndXJlV2F0Y2hlcnMoKTtcbiAgICBiaW5kRXZlbnRzKCk7XG4gICAgJG1kVGhlbWluZygkZWxlbWVudCk7XG4gICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdXBkYXRlSGVpZ2h0RnJvbUNvbnRlbnQoKTtcbiAgICAgIGFkanVzdE9mZnNldCgpO1xuICAgICAgdXBkYXRlUGFnaW5hdGlvbigpO1xuICAgICAgY3RybC50YWJzWyRzY29wZS5zZWxlY3RlZEluZGV4XSAmJiBjdHJsLnRhYnNbJHNjb3BlLnNlbGVjdGVkSW5kZXhdLnNjb3BlLnNlbGVjdCgpO1xuICAgICAgbG9hZGVkID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBpbGVUZW1wbGF0ZSAoKSB7XG4gICAgdmFyIHRlbXBsYXRlID0gJGF0dHJzLiRtZFRhYnNUZW1wbGF0ZSxcbiAgICAgICAgZWxlbWVudCAgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudHMuZGF0YSk7XG4gICAgZWxlbWVudC5odG1sKHRlbXBsYXRlKTtcbiAgICAkY29tcGlsZShlbGVtZW50LmNvbnRlbnRzKCkpKGN0cmwucGFyZW50KTtcbiAgICBkZWxldGUgJGF0dHJzLiRtZFRhYnNUZW1wbGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpbmRFdmVudHMgKCkge1xuICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vbigncmVzaXplJywgaGFuZGxlV2luZG93UmVzaXplKTtcbiAgICBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudHMucGFnaW5nKS5vbignRE9NU3VidHJlZU1vZGlmaWVkJywgY3RybC51cGRhdGVJbmtCYXJTdHlsZXMpO1xuICAgIGFuZ3VsYXIuZWxlbWVudChlbGVtZW50cy5wYWdpbmcpLm9uKCdET01TdWJ0cmVlTW9kaWZpZWQnLCB1cGRhdGVQYWdpbmF0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpZ3VyZVdhdGNoZXJzICgpIHtcbiAgICAkbWRVdGlsLmluaXRPcHRpb25hbFByb3BlcnRpZXMoJHNjb3BlLCAkYXR0cnMpO1xuICAgICRhdHRycy4kb2JzZXJ2ZSgnbWROb0JhcicsIGZ1bmN0aW9uICh2YWx1ZSkgeyAkc2NvcGUubm9JbmtCYXIgPSBhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSk7IH0pO1xuICAgICRzY29wZS4kd2F0Y2goJ3NlbGVjdGVkSW5kZXgnLCBoYW5kbGVTZWxlY3RlZEluZGV4Q2hhbmdlKTtcbiAgICAkc2NvcGUuJHdhdGNoKCdkeW5hbWljSGVpZ2h0JywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUpICRlbGVtZW50LmFkZENsYXNzKCdtZC1keW5hbWljLWhlaWdodCcpO1xuICAgICAgZWxzZSAkZWxlbWVudC5yZW1vdmVDbGFzcygnbWQtZHluYW1pYy1oZWlnaHQnKTtcbiAgICB9KTtcbiAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGNsZWFudXApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbnkgZXZlbnRzIGRlZmluZWQgYnkgdGhpcyBjb250cm9sbGVyXG4gICAqL1xuICBmdW5jdGlvbiBjbGVhbnVwICgpIHtcbiAgICBkZXN0cm95ZWQgPSB0cnVlO1xuICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vZmYoJ3Jlc2l6ZScsIGhhbmRsZVdpbmRvd1Jlc2l6ZSk7XG4gICAgYW5ndWxhci5lbGVtZW50KGVsZW1lbnRzLnBhZ2luZykub2ZmKCdET01TdWJ0cmVlTW9kaWZpZWQnLCBjdHJsLnVwZGF0ZUlua0JhclN0eWxlcyk7XG4gICAgYW5ndWxhci5lbGVtZW50KGVsZW1lbnRzLnBhZ2luZykub2ZmKCdET01TdWJ0cmVlTW9kaWZpZWQnLCB1cGRhdGVQYWdpbmF0aW9uKTtcbiAgfVxuXG4gIC8vLS0gQ2hhbmdlIGhhbmRsZXJzXG5cbiAgLyoqXG4gICAqIEFkZC9yZW1vdmUgdGhlIGBtZC1uby10YWItY29udGVudGAgY2xhc3MgZGVwZW5kaW5nIG9uIGBjdHJsLmhhc0NvbnRlbnRgXG4gICAqIEBwYXJhbSBoYXNDb250ZW50XG4gICAqL1xuICBmdW5jdGlvbiBoYW5kbGVIYXNDb250ZW50IChoYXNDb250ZW50KSB7XG4gICAgJGVsZW1lbnRbaGFzQ29udGVudCA/ICdyZW1vdmVDbGFzcycgOiAnYWRkQ2xhc3MnXSgnbWQtbm8tdGFiLWNvbnRlbnQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBseSBjdHJsLm9mZnNldExlZnQgdG8gdGhlIHBhZ2luZyBlbGVtZW50IHdoZW4gaXQgY2hhbmdlc1xuICAgKiBAcGFyYW0gbGVmdFxuICAgKi9cbiAgZnVuY3Rpb24gaGFuZGxlT2Zmc2V0Q2hhbmdlIChsZWZ0KSB7XG4gICAgdmFyIG5ld1ZhbHVlID0gY3RybC5zaG91bGRDZW50ZXJUYWJzID8gJycgOiAnLScgKyBsZWZ0ICsgJ3B4JztcbiAgICBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudHMucGFnaW5nKS5jc3MoJG1kQ29uc3RhbnQuQ1NTLlRSQU5TRk9STSwgJ3RyYW5zbGF0ZTNkKCcgKyBuZXdWYWx1ZSArICcsIDAsIDApJyk7XG4gICAgJHNjb3BlLiRicm9hZGNhc3QoJyRtZFRhYnNQYWdpbmF0aW9uQ2hhbmdlZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgVUkgd2hlbmV2ZXIgYGN0cmwuZm9jdXNJbmRleGAgaXMgdXBkYXRlZFxuICAgKiBAcGFyYW0gbmV3SW5kZXhcbiAgICogQHBhcmFtIG9sZEluZGV4XG4gICAqL1xuICBmdW5jdGlvbiBoYW5kbGVGb2N1c0luZGV4Q2hhbmdlIChuZXdJbmRleCwgb2xkSW5kZXgpIHtcbiAgICBpZiAobmV3SW5kZXggPT09IG9sZEluZGV4KSByZXR1cm47XG4gICAgaWYgKCFlbGVtZW50cy50YWJzW25ld0luZGV4XSkgcmV0dXJuO1xuICAgIGFkanVzdE9mZnNldCgpO1xuICAgIHJlZGlyZWN0Rm9jdXMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIFVJIHdoZW5ldmVyIHRoZSBzZWxlY3RlZCBpbmRleCBjaGFuZ2VzLiBDYWxscyB1c2VyLWRlZmluZWQgc2VsZWN0L2Rlc2VsZWN0IG1ldGhvZHMuXG4gICAqIEBwYXJhbSBuZXdWYWx1ZVxuICAgKiBAcGFyYW0gb2xkVmFsdWVcbiAgICovXG4gIGZ1bmN0aW9uIGhhbmRsZVNlbGVjdGVkSW5kZXhDaGFuZ2UgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgIGlmIChuZXdWYWx1ZSA9PT0gb2xkVmFsdWUpIHJldHVybjtcblxuICAgICRzY29wZS5zZWxlY3RlZEluZGV4ID0gZ2V0TmVhcmVzdFNhZmVJbmRleChuZXdWYWx1ZSk7XG4gICAgY3RybC5sYXN0U2VsZWN0ZWRJbmRleCA9IG9sZFZhbHVlO1xuICAgIGN0cmwudXBkYXRlSW5rQmFyU3R5bGVzKCk7XG4gICAgdXBkYXRlSGVpZ2h0RnJvbUNvbnRlbnQoKTtcbiAgICBhZGp1c3RPZmZzZXQobmV3VmFsdWUpO1xuICAgICRzY29wZS4kYnJvYWRjYXN0KCckbWRUYWJzQ2hhbmdlZCcpO1xuICAgIGN0cmwudGFic1tvbGRWYWx1ZV0gJiYgY3RybC50YWJzW29sZFZhbHVlXS5zY29wZS5kZXNlbGVjdCgpO1xuICAgIGN0cmwudGFic1tuZXdWYWx1ZV0gJiYgY3RybC50YWJzW25ld1ZhbHVlXS5zY29wZS5zZWxlY3QoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWV1ZXMgdXAgYSBjYWxsIHRvIGBoYW5kbGVXaW5kb3dSZXNpemVgIHdoZW4gYSByZXNpemUgb2NjdXJzIHdoaWxlIHRoZSB0YWJzIGNvbXBvbmVudCBpc1xuICAgKiBoaWRkZW4uXG4gICAqL1xuICBmdW5jdGlvbiBoYW5kbGVSZXNpemVXaGVuVmlzaWJsZSAoKSB7XG4gICAgLy8tLSBpZiB0aGVyZSBpcyBhbHJlYWR5IGEgd2F0Y2hlciB3YWl0aW5nIGZvciByZXNpemUsIGRvIG5vdGhpbmdcbiAgICBpZiAoaGFuZGxlUmVzaXplV2hlblZpc2libGUud2F0Y2hlcikgcmV0dXJuO1xuICAgIC8vLS0gb3RoZXJ3aXNlLCB3ZSB3aWxsIGFidXNlIHRoZSAkd2F0Y2ggZnVuY3Rpb24gdG8gY2hlY2sgZm9yIHZpc2libGVcbiAgICBoYW5kbGVSZXNpemVXaGVuVmlzaWJsZS53YXRjaGVyID0gJHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAvLy0tIHNpbmNlIHdlIGFyZSBjaGVja2luZyBmb3IgRE9NIHNpemUsIHdlIHVzZSAkdGltZW91dCB0byB3YWl0IGZvciBhZnRlciB0aGUgRE9NIHVwZGF0ZXNcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8tLSBpZiB0aGUgd2F0Y2hlciBoYXMgYWxyZWFkeSBydW4gKGllLiBtdWx0aXBsZSBkaWdlc3RzIGluIG9uZSBjeWNsZSksIGRvIG5vdGhpbmdcbiAgICAgICAgaWYgKCFoYW5kbGVSZXNpemVXaGVuVmlzaWJsZS53YXRjaGVyKSByZXR1cm47XG5cbiAgICAgICAgaWYgKCRlbGVtZW50LnByb3AoJ29mZnNldFBhcmVudCcpKSB7XG4gICAgICAgICAgaGFuZGxlUmVzaXplV2hlblZpc2libGUud2F0Y2hlcigpO1xuICAgICAgICAgIGhhbmRsZVJlc2l6ZVdoZW5WaXNpYmxlLndhdGNoZXIgPSBudWxsO1xuXG4gICAgICAgICAgLy8tLSB3ZSBoYXZlIHRvIHRyaWdnZXIgb3VyIG93biAkYXBwbHkgc28gdGhhdCB0aGUgRE9NIGJpbmRpbmdzIHdpbGwgdXBkYXRlXG4gICAgICAgICAgaGFuZGxlV2luZG93UmVzaXplKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIDAsIGZhbHNlKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vLS0gRXZlbnQgaGFuZGxlcnMgLyBhY3Rpb25zXG5cbiAgLyoqXG4gICAqIEhhbmRsZSB1c2VyIGtleWJvYXJkIGludGVyYWN0aW9uc1xuICAgKiBAcGFyYW0gZXZlbnRcbiAgICovXG4gIGZ1bmN0aW9uIGtleWRvd24gKGV2ZW50KSB7XG4gICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICBjYXNlICRtZENvbnN0YW50LktFWV9DT0RFLkxFRlRfQVJST1c6XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGluY3JlbWVudFNlbGVjdGVkSW5kZXgoLTEsIHRydWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJG1kQ29uc3RhbnQuS0VZX0NPREUuUklHSFRfQVJST1c6XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGluY3JlbWVudFNlbGVjdGVkSW5kZXgoMSwgdHJ1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAkbWRDb25zdGFudC5LRVlfQ09ERS5TUEFDRTpcbiAgICAgIGNhc2UgJG1kQ29uc3RhbnQuS0VZX0NPREUuRU5URVI6XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmICghbG9ja2VkKSAkc2NvcGUuc2VsZWN0ZWRJbmRleCA9IGN0cmwuZm9jdXNJbmRleDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGN0cmwubGFzdENsaWNrID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBzZWxlY3RlZCBpbmRleCBhbmQgdHJpZ2dlciBhIGNsaWNrIGV2ZW50IG9uIHRoZSBvcmlnaW5hbCBgbWQtdGFiYCBlbGVtZW50IGluIG9yZGVyXG4gICAqIHRvIGZpcmUgdXNlci1hZGRlZCBjbGljayBldmVudHMuXG4gICAqIEBwYXJhbSBpbmRleFxuICAgKi9cbiAgZnVuY3Rpb24gc2VsZWN0IChpbmRleCkge1xuICAgIGlmICghbG9ja2VkKSBjdHJsLmZvY3VzSW5kZXggPSAkc2NvcGUuc2VsZWN0ZWRJbmRleCA9IGluZGV4O1xuICAgIGN0cmwubGFzdENsaWNrID0gdHJ1ZTtcbiAgICBjdHJsLnRhYnNbaW5kZXhdLmVsZW1lbnQudHJpZ2dlckhhbmRsZXIoJ2NsaWNrJyk7XG4gIH1cblxuICAvKipcbiAgICogV2hlbiBwYWdpbmF0aW9uIGlzIG9uLCB0aGlzIG1ha2VzIHN1cmUgdGhlIHNlbGVjdGVkIGluZGV4IGlzIGluIHZpZXcuXG4gICAqIEBwYXJhbSBldmVudFxuICAgKi9cbiAgZnVuY3Rpb24gc2Nyb2xsIChldmVudCkge1xuICAgIGlmICghY3RybC5zaG91bGRQYWdpbmF0ZSkgcmV0dXJuO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY3RybC5vZmZzZXRMZWZ0ID0gZml4T2Zmc2V0KGN0cmwub2Zmc2V0TGVmdCAtIGV2ZW50LndoZWVsRGVsdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNsaWRlcyB0aGUgdGFicyBvdmVyIGFwcHJveGltYXRlbHkgb25lIHBhZ2UgZm9yd2FyZC5cbiAgICovXG4gIGZ1bmN0aW9uIG5leHRQYWdlICgpIHtcbiAgICB2YXIgdmlld3BvcnRXaWR0aCA9IGVsZW1lbnRzLmNhbnZhcy5jbGllbnRXaWR0aCxcbiAgICAgICAgdG90YWxXaWR0aCA9IHZpZXdwb3J0V2lkdGggKyBjdHJsLm9mZnNldExlZnQsXG4gICAgICAgIGksIHRhYjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgZWxlbWVudHMudGFicy5sZW5ndGg7IGkrKykge1xuICAgICAgdGFiID0gZWxlbWVudHMudGFic1tpXTtcbiAgICAgIGlmICh0YWIub2Zmc2V0TGVmdCArIHRhYi5vZmZzZXRXaWR0aCA+IHRvdGFsV2lkdGgpIGJyZWFrO1xuICAgIH1cbiAgICBjdHJsLm9mZnNldExlZnQgPSBmaXhPZmZzZXQodGFiLm9mZnNldExlZnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNsaWRlcyB0aGUgdGFicyBvdmVyIGFwcHJveGltYXRlbHkgb25lIHBhZ2UgYmFja3dhcmQuXG4gICAqL1xuICBmdW5jdGlvbiBwcmV2aW91c1BhZ2UgKCkge1xuICAgIHZhciBpLCB0YWI7XG4gICAgZm9yIChpID0gMDsgaSA8IGVsZW1lbnRzLnRhYnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRhYiA9IGVsZW1lbnRzLnRhYnNbaV07XG4gICAgICBpZiAodGFiLm9mZnNldExlZnQgKyB0YWIub2Zmc2V0V2lkdGggPj0gY3RybC5vZmZzZXRMZWZ0KSBicmVhaztcbiAgICB9XG4gICAgY3RybC5vZmZzZXRMZWZ0ID0gZml4T2Zmc2V0KHRhYi5vZmZzZXRMZWZ0ICsgdGFiLm9mZnNldFdpZHRoIC0gZWxlbWVudHMuY2FudmFzLmNsaWVudFdpZHRoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgc2l6ZSBjYWxjdWxhdGlvbnMgd2hlbiB0aGUgd2luZG93IGlzIHJlc2l6ZWQuXG4gICAqL1xuICBmdW5jdGlvbiBoYW5kbGVXaW5kb3dSZXNpemUgKCkge1xuICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xuICAgICAgY3RybC5sYXN0U2VsZWN0ZWRJbmRleCA9ICRzY29wZS5zZWxlY3RlZEluZGV4O1xuICAgICAgY3RybC5vZmZzZXRMZWZ0ID0gZml4T2Zmc2V0KGN0cmwub2Zmc2V0TGVmdCk7XG4gICAgICAkdGltZW91dChjdHJsLnVwZGF0ZUlua0JhclN0eWxlcywgMCwgZmFsc2UpO1xuICAgICAgJHRpbWVvdXQodXBkYXRlUGFnaW5hdGlvbik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEgdGFiIGZyb20gdGhlIGRhdGEgYW5kIHNlbGVjdCB0aGUgbmVhcmVzdCB2YWxpZCB0YWIuXG4gICAqIEBwYXJhbSB0YWJEYXRhXG4gICAqL1xuICBmdW5jdGlvbiByZW1vdmVUYWIgKHRhYkRhdGEpIHtcbiAgICB2YXIgc2VsZWN0ZWRJbmRleCA9ICRzY29wZS5zZWxlY3RlZEluZGV4LFxuICAgICAgICB0YWIgPSBjdHJsLnRhYnMuc3BsaWNlKHRhYkRhdGEuZ2V0SW5kZXgoKSwgMSlbMF07XG4gICAgcmVmcmVzaEluZGV4KCk7XG4gICAgLy8tLSB3aGVuIHJlbW92aW5nIGEgdGFiLCBpZiB0aGUgc2VsZWN0ZWQgaW5kZXggZGlkIG5vdCBjaGFuZ2UsIHdlIGhhdmUgdG8gbWFudWFsbHkgdHJpZ2dlciB0aGVcbiAgICAvLyAgIHRhYiBzZWxlY3QvZGVzZWxlY3QgZXZlbnRzXG4gICAgaWYgKCRzY29wZS5zZWxlY3RlZEluZGV4ID09PSBzZWxlY3RlZEluZGV4ICYmICFkZXN0cm95ZWQpIHtcbiAgICAgIHRhYi5zY29wZS5kZXNlbGVjdCgpO1xuICAgICAgY3RybC50YWJzWyRzY29wZS5zZWxlY3RlZEluZGV4XSAmJiBjdHJsLnRhYnNbJHNjb3BlLnNlbGVjdGVkSW5kZXhdLnNjb3BlLnNlbGVjdCgpO1xuICAgIH1cbiAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB1cGRhdGVQYWdpbmF0aW9uKCk7XG4gICAgICBjdHJsLm9mZnNldExlZnQgPSBmaXhPZmZzZXQoY3RybC5vZmZzZXRMZWZ0KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gZW50cnkgaW4gdGhlIHRhYnMgYXJyYXkgZm9yIGEgbmV3IHRhYiBhdCB0aGUgc3BlY2lmaWVkIGluZGV4LlxuICAgKiBAcGFyYW0gdGFiRGF0YVxuICAgKiBAcGFyYW0gaW5kZXhcbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuICBmdW5jdGlvbiBpbnNlcnRUYWIgKHRhYkRhdGEsIGluZGV4KSB7XG4gICAgdmFyIHByb3RvID0ge1xuICAgICAgICAgIGdldEluZGV4OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjdHJsLnRhYnMuaW5kZXhPZih0YWIpOyB9LFxuICAgICAgICAgIGlzQWN0aXZlOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmdldEluZGV4KCkgPT09ICRzY29wZS5zZWxlY3RlZEluZGV4OyB9LFxuICAgICAgICAgIGlzTGVmdDogICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmdldEluZGV4KCkgPCAkc2NvcGUuc2VsZWN0ZWRJbmRleDsgfSxcbiAgICAgICAgICBpc1JpZ2h0OiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5nZXRJbmRleCgpID4gJHNjb3BlLnNlbGVjdGVkSW5kZXg7IH0sXG4gICAgICAgICAgc2hvdWxkUmVuZGVyOiBmdW5jdGlvbiAoKSB7IHJldHVybiAhJHNjb3BlLm5vRGlzY29ubmVjdCB8fCB0aGlzLmlzQWN0aXZlKCk7IH0sXG4gICAgICAgICAgaGFzRm9jdXM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICFjdHJsLmxhc3RDbGlja1xuICAgICAgICAgICAgICAmJiBjdHJsLmhhc0ZvY3VzICYmIHRoaXMuZ2V0SW5kZXgoKSA9PT0gY3RybC5mb2N1c0luZGV4OyB9LFxuICAgICAgICAgIGlkOiAgICAgICAkbWRVdGlsLm5leHRVaWQoKVxuICAgICAgICB9LFxuICAgICAgICB0YWIgPSBhbmd1bGFyLmV4dGVuZChwcm90bywgdGFiRGF0YSk7XG4gICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGluZGV4KSkge1xuICAgICAgY3RybC50YWJzLnNwbGljZShpbmRleCwgMCwgdGFiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3RybC50YWJzLnB1c2godGFiKTtcbiAgICB9XG4gICAgcHJvY2Vzc1F1ZXVlKCk7XG4gICAgdXBkYXRlSGFzQ29udGVudCgpO1xuICAgIC8vLS0gaWYgYXV0b3NlbGVjdCBpcyBlbmFibGVkLCBzZWxlY3QgdGhlIG5ld2x5IGFkZGVkIHRhYlxuICAgIGlmIChsb2FkZWQgJiYgJHNjb3BlLmF1dG9zZWxlY3QpICR0aW1lb3V0KGZ1bmN0aW9uICgpIHsgc2VsZWN0KGN0cmwudGFicy5pbmRleE9mKHRhYikpOyB9KTtcbiAgICAkdGltZW91dCh1cGRhdGVQYWdpbmF0aW9uKTtcbiAgICByZXR1cm4gdGFiO1xuICB9XG5cbiAgLy8tLSBHZXR0ZXIgbWV0aG9kc1xuXG4gIC8qKlxuICAgKiBHYXRoZXJzIHJlZmVyZW5jZXMgdG8gYWxsIG9mIHRoZSBET00gZWxlbWVudHMgdXNlZCBieSB0aGlzIGNvbnRyb2xsZXIuXG4gICAqIEByZXR1cm5zIHt7fX1cbiAgICovXG4gIGZ1bmN0aW9uIGdldEVsZW1lbnRzICgpIHtcbiAgICB2YXIgZWxlbWVudHMgICAgICA9IHt9O1xuXG4gICAgLy8tLSBnYXRoZXIgdGFiIGJhciBlbGVtZW50c1xuICAgIGVsZW1lbnRzLndyYXBwZXIgID0gJGVsZW1lbnRbMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ21kLXRhYnMtd3JhcHBlcicpWzBdO1xuICAgIGVsZW1lbnRzLmRhdGEgICAgID0gJGVsZW1lbnRbMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ21kLXRhYi1kYXRhJylbMF07XG4gICAgZWxlbWVudHMuY2FudmFzICAgPSBlbGVtZW50cy53cmFwcGVyLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdtZC10YWJzLWNhbnZhcycpWzBdO1xuICAgIGVsZW1lbnRzLnBhZ2luZyAgID0gZWxlbWVudHMuY2FudmFzLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdtZC1wYWdpbmF0aW9uLXdyYXBwZXInKVswXTtcbiAgICBlbGVtZW50cy50YWJzICAgICA9IGVsZW1lbnRzLnBhZ2luZy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbWQtdGFiLWl0ZW0nKTtcbiAgICBlbGVtZW50cy5kdW1taWVzICA9IGVsZW1lbnRzLmNhbnZhcy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbWQtZHVtbXktdGFiJyk7XG4gICAgZWxlbWVudHMuaW5rQmFyICAgPSBlbGVtZW50cy5wYWdpbmcuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ21kLWluay1iYXInKVswXTtcblxuICAgIC8vLS0gZ2F0aGVyIHRhYiBjb250ZW50IGVsZW1lbnRzXG4gICAgZWxlbWVudHMuY29udGVudHNXcmFwcGVyID0gJGVsZW1lbnRbMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ21kLXRhYnMtY29udGVudC13cmFwcGVyJylbMF07XG4gICAgZWxlbWVudHMuY29udGVudHMgPSBlbGVtZW50cy5jb250ZW50c1dyYXBwZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ21kLXRhYi1jb250ZW50Jyk7XG5cbiAgICByZXR1cm4gZWxlbWVudHM7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0aGUgbGVmdCBwYWdpbmF0aW9uIGFycm93IHNob3VsZCBiZSBlbmFibGVkLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGZ1bmN0aW9uIGNhblBhZ2VCYWNrICgpIHtcbiAgICByZXR1cm4gY3RybC5vZmZzZXRMZWZ0ID4gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRoZSByaWdodCBwYWdpbmF0aW9uIGFycm93IHNob3VsZCBiZSBlbmFibGVkLlxuICAgKiBAcmV0dXJucyB7Knxib29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gY2FuUGFnZUZvcndhcmQgKCkge1xuICAgIHZhciBsYXN0VGFiID0gZWxlbWVudHMudGFic1tlbGVtZW50cy50YWJzLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiBsYXN0VGFiICYmIGxhc3RUYWIub2Zmc2V0TGVmdCArIGxhc3RUYWIub2Zmc2V0V2lkdGggPiBlbGVtZW50cy5jYW52YXMuY2xpZW50V2lkdGggK1xuICAgICAgICBjdHJsLm9mZnNldExlZnQ7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgVUkgc2hvdWxkIHN0cmV0Y2ggdGhlIHRhYnMgdG8gZmlsbCB0aGUgYXZhaWxhYmxlIHNwYWNlLlxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIGZ1bmN0aW9uIHNob3VsZFN0cmV0Y2hUYWJzICgpIHtcbiAgICBzd2l0Y2ggKCRzY29wZS5zdHJldGNoVGFicykge1xuICAgICAgY2FzZSAnYWx3YXlzJzogcmV0dXJuIHRydWU7XG4gICAgICBjYXNlICduZXZlcic6ICByZXR1cm4gZmFsc2U7XG4gICAgICBkZWZhdWx0OiAgICAgICByZXR1cm4gIWN0cmwuc2hvdWxkUGFnaW5hdGVcbiAgICAgICAgICAmJiAkd2luZG93Lm1hdGNoTWVkaWEoJyhtYXgtd2lkdGg6IDYwMHB4KScpLm1hdGNoZXM7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIHRhYnMgc2hvdWxkIGFwcGVhciBjZW50ZXJlZC5cbiAgICogQHJldHVybnMge3N0cmluZ3xib29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gc2hvdWxkQ2VudGVyVGFicyAoKSB7XG4gICAgcmV0dXJuICRzY29wZS5jZW50ZXJUYWJzICYmICFjdHJsLnNob3VsZFBhZ2luYXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgcGFnaW5hdGlvbiBpcyBuZWNlc3NhcnkgdG8gZGlzcGxheSB0aGUgdGFicyB3aXRoaW4gdGhlIGF2YWlsYWJsZSBzcGFjZS5cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBmdW5jdGlvbiBzaG91bGRQYWdpbmF0ZSAoKSB7XG4gICAgaWYgKCRzY29wZS5ub1BhZ2luYXRpb24gfHwgIWxvYWRlZCkgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBjYW52YXNXaWR0aCA9ICRlbGVtZW50LnByb3AoJ2NsaWVudFdpZHRoJyk7XG4gICAgYW5ndWxhci5mb3JFYWNoKGVsZW1lbnRzLmR1bW1pZXMsIGZ1bmN0aW9uICh0YWIpIHsgY2FudmFzV2lkdGggLT0gdGFiLm9mZnNldFdpZHRoOyB9KTtcbiAgICByZXR1cm4gY2FudmFzV2lkdGggPCAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIHRoZSBuZWFyZXN0IHRhYiBpbmRleCB0aGF0IGlzIGF2YWlsYWJsZS4gIFRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgZm9yIHdoZW4gdGhlIGFjdGl2ZVxuICAgKiB0YWIgaXMgcmVtb3ZlZC5cbiAgICogQHBhcmFtIG5ld0luZGV4XG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0TmVhcmVzdFNhZmVJbmRleChuZXdJbmRleCkge1xuICAgIHZhciBtYXhPZmZzZXQgPSBNYXRoLm1heChjdHJsLnRhYnMubGVuZ3RoIC0gbmV3SW5kZXgsIG5ld0luZGV4KSxcbiAgICAgICAgaSwgdGFiO1xuICAgIGZvciAoaSA9IDA7IGkgPD0gbWF4T2Zmc2V0OyBpKyspIHtcbiAgICAgIHRhYiA9IGN0cmwudGFic1tuZXdJbmRleCArIGldO1xuICAgICAgaWYgKHRhYiAmJiAodGFiLnNjb3BlLmRpc2FibGVkICE9PSB0cnVlKSkgcmV0dXJuIHRhYi5nZXRJbmRleCgpO1xuICAgICAgdGFiID0gY3RybC50YWJzW25ld0luZGV4IC0gaV07XG4gICAgICBpZiAodGFiICYmICh0YWIuc2NvcGUuZGlzYWJsZWQgIT09IHRydWUpKSByZXR1cm4gdGFiLmdldEluZGV4KCk7XG4gICAgfVxuICAgIHJldHVybiBuZXdJbmRleDtcbiAgfVxuXG4gIC8vLS0gVXRpbGl0eSBtZXRob2RzXG5cbiAgLyoqXG4gICAqIERlZmluZXMgYSBwcm9wZXJ0eSB1c2luZyBhIGdldHRlciBhbmQgc2V0dGVyIGluIG9yZGVyIHRvIHRyaWdnZXIgYSBjaGFuZ2UgaGFuZGxlciB3aXRob3V0XG4gICAqIHVzaW5nIGAkd2F0Y2hgIHRvIG9ic2VydmUgY2hhbmdlcy5cbiAgICogQHBhcmFtIGtleVxuICAgKiBAcGFyYW0gaGFuZGxlclxuICAgKiBAcGFyYW0gdmFsdWVcbiAgICovXG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5IChrZXksIGhhbmRsZXIsIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0cmwsIGtleSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWx1ZTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICBoYW5kbGVyKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB3aGV0aGVyIG9yIG5vdCBwYWdpbmF0aW9uIHNob3VsZCBiZSBkaXNwbGF5ZWQuXG4gICAqL1xuICBmdW5jdGlvbiB1cGRhdGVQYWdpbmF0aW9uICgpIHtcbiAgICBjdHJsLnNob3VsZFBhZ2luYXRlID0gc2hvdWxkUGFnaW5hdGUoKTtcbiAgICBjdHJsLnNob3VsZENlbnRlclRhYnMgPSBzaG91bGRDZW50ZXJUYWJzKCk7XG4gICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYWRqdXN0T2Zmc2V0KCRzY29wZS5zZWxlY3RlZEluZGV4KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZS1vcmRlcnMgdGhlIHRhYnMgYW5kIHVwZGF0ZXMgdGhlIHNlbGVjdGVkIGFuZCBmb2N1cyBpbmRleGVzIHRvIHRoZWlyIG5ldyBwb3NpdGlvbnMuXG4gICAqIFRoaXMgaXMgdHJpZ2dlcmVkIGJ5IGB0YWJEaXJlY3RpdmUuanNgIHdoZW4gdGhlIHVzZXIncyB0YWJzIGhhdmUgYmVlbiByZS1vcmRlcmVkLlxuICAgKi9cbiAgZnVuY3Rpb24gdXBkYXRlVGFiT3JkZXIgKCkge1xuICAgIHZhciBzZWxlY3RlZEl0ZW0gPSBjdHJsLnRhYnNbJHNjb3BlLnNlbGVjdGVkSW5kZXhdLFxuICAgICAgICBmb2N1c0l0ZW0gPSBjdHJsLnRhYnNbY3RybC5mb2N1c0luZGV4XTtcbiAgICBjdHJsLnRhYnMgPSBjdHJsLnRhYnMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEuaW5kZXggLSBiLmluZGV4O1xuICAgIH0pO1xuICAgICRzY29wZS5zZWxlY3RlZEluZGV4ID0gY3RybC50YWJzLmluZGV4T2Yoc2VsZWN0ZWRJdGVtKTtcbiAgICBjdHJsLmZvY3VzSW5kZXggPSBjdHJsLnRhYnMuaW5kZXhPZihmb2N1c0l0ZW0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbW92ZXMgdGhlIHNlbGVjdGVkIG9yIGZvY3VzIGluZGV4IGxlZnQgb3IgcmlnaHQuICBUaGlzIGlzIHVzZWQgYnkgdGhlIGtleWRvd24gaGFuZGxlci5cbiAgICogQHBhcmFtIGluY1xuICAgKi9cbiAgZnVuY3Rpb24gaW5jcmVtZW50U2VsZWN0ZWRJbmRleCAoaW5jKSB7XG4gICAgdmFyIG5ld0luZGV4LFxuICAgICAgICBpbmRleCA9IGN0cmwuZm9jdXNJbmRleDtcbiAgICBmb3IgKG5ld0luZGV4ID0gaW5kZXggKyBpbmM7XG4gICAgICAgICBjdHJsLnRhYnNbbmV3SW5kZXhdICYmIGN0cmwudGFic1tuZXdJbmRleF0uc2NvcGUuZGlzYWJsZWQ7XG4gICAgICAgICBuZXdJbmRleCArPSBpbmMpIHt9XG4gICAgaWYgKGN0cmwudGFic1tuZXdJbmRleF0pIHtcbiAgICAgIGN0cmwuZm9jdXNJbmRleCA9IG5ld0luZGV4O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHVzZWQgdG8gZm9yd2FyZCBmb2N1cyB0byBkdW1teSBlbGVtZW50cy4gIFRoaXMgbWV0aG9kIGlzIG5lY2Vzc2FyeSB0byBhdm9pZCBhbmlhdGlvblxuICAgKiBpc3N1ZXMgd2hlbiBhdHRlbXB0aW5nIHRvIGZvY3VzIGFuIGl0ZW0gdGhhdCBpcyBvdXQgb2Ygdmlldy5cbiAgICovXG4gIGZ1bmN0aW9uIHJlZGlyZWN0Rm9jdXMgKCkge1xuICAgIGVsZW1lbnRzLmR1bW1pZXNbY3RybC5mb2N1c0luZGV4XS5mb2N1cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcmNlcyB0aGUgcGFnaW5hdGlvbiB0byBtb3ZlIHRoZSBmb2N1c2VkIHRhYiBpbnRvIHZpZXcuXG4gICAqL1xuICBmdW5jdGlvbiBhZGp1c3RPZmZzZXQgKGluZGV4KSB7XG4gICAgaWYgKGN0cmwuc2hvdWxkQ2VudGVyVGFicykgcmV0dXJuO1xuICAgIGlmIChpbmRleCA9PSBudWxsKSBpbmRleCA9IGN0cmwuZm9jdXNJbmRleDtcbiAgICB2YXIgdGFiID0gZWxlbWVudHMudGFic1tpbmRleF0sXG4gICAgICAgIGxlZnQgPSB0YWIub2Zmc2V0TGVmdCxcbiAgICAgICAgcmlnaHQgPSB0YWIub2Zmc2V0V2lkdGggKyBsZWZ0O1xuICAgIGN0cmwub2Zmc2V0TGVmdCA9IE1hdGgubWF4KGN0cmwub2Zmc2V0TGVmdCwgZml4T2Zmc2V0KHJpZ2h0IC0gZWxlbWVudHMuY2FudmFzLmNsaWVudFdpZHRoKSk7XG4gICAgY3RybC5vZmZzZXRMZWZ0ID0gTWF0aC5taW4oY3RybC5vZmZzZXRMZWZ0LCBmaXhPZmZzZXQobGVmdCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGVzIHRocm91Z2ggYWxsIHF1ZXVlZCBmdW5jdGlvbnMgYW5kIGNsZWFycyB0aGUgcXVldWUuICBUaGlzIGlzIHVzZWQgZm9yIGZ1bmN0aW9ucyB0aGF0XG4gICAqIGFyZSBjYWxsZWQgYmVmb3JlIHRoZSBVSSBpcyByZWFkeSwgc3VjaCBhcyBzaXplIGNhbGN1bGF0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIHByb2Nlc3NRdWV1ZSAoKSB7XG4gICAgcXVldWUuZm9yRWFjaChmdW5jdGlvbiAoZnVuYykgeyAkdGltZW91dChmdW5jKTsgfSk7XG4gICAgcXVldWUgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSB0YWIgY29udGVudCBhcmVhIGlzIG5lZWRlZC5cbiAgICovXG4gIGZ1bmN0aW9uIHVwZGF0ZUhhc0NvbnRlbnQgKCkge1xuICAgIHZhciBoYXNDb250ZW50ID0gZmFsc2U7XG4gICAgYW5ndWxhci5mb3JFYWNoKGN0cmwudGFicywgZnVuY3Rpb24gKHRhYikge1xuICAgICAgaWYgKHRhYi50ZW1wbGF0ZSkgaGFzQ29udGVudCA9IHRydWU7XG4gICAgfSk7XG4gICAgY3RybC5oYXNDb250ZW50ID0gaGFzQ29udGVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBNb3ZlcyB0aGUgaW5kZXhlcyB0byB0aGVpciBuZWFyZXN0IHZhbGlkIHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHJlZnJlc2hJbmRleCAoKSB7XG4gICAgJHNjb3BlLnNlbGVjdGVkSW5kZXggPSBnZXROZWFyZXN0U2FmZUluZGV4KCRzY29wZS5zZWxlY3RlZEluZGV4KTtcbiAgICBjdHJsLmZvY3VzSW5kZXggPSBnZXROZWFyZXN0U2FmZUluZGV4KGN0cmwuZm9jdXNJbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgY29udGVudCBoZWlnaHQgb2YgdGhlIGN1cnJlbnQgdGFiLlxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIGZ1bmN0aW9uIHVwZGF0ZUhlaWdodEZyb21Db250ZW50ICgpIHtcbiAgICBpZiAoISRzY29wZS5keW5hbWljSGVpZ2h0KSByZXR1cm4gJGVsZW1lbnQuY3NzKCdoZWlnaHQnLCAnJyk7XG4gICAgaWYgKCFjdHJsLnRhYnMubGVuZ3RoKSByZXR1cm4gcXVldWUucHVzaCh1cGRhdGVIZWlnaHRGcm9tQ29udGVudCk7XG4gICAgdmFyIHRhYkNvbnRlbnQgICAgPSBlbGVtZW50cy5jb250ZW50c1skc2NvcGUuc2VsZWN0ZWRJbmRleF0sXG4gICAgICAgIGNvbnRlbnRIZWlnaHQgPSB0YWJDb250ZW50ID8gdGFiQ29udGVudC5vZmZzZXRIZWlnaHQgOiAwLFxuICAgICAgICB0YWJzSGVpZ2h0ICAgID0gZWxlbWVudHMud3JhcHBlci5vZmZzZXRIZWlnaHQsXG4gICAgICAgIG5ld0hlaWdodCAgICAgPSBjb250ZW50SGVpZ2h0ICsgdGFic0hlaWdodCxcbiAgICAgICAgY3VycmVudEhlaWdodCA9ICRlbGVtZW50LnByb3AoJ2NsaWVudEhlaWdodCcpO1xuICAgIGlmIChjdXJyZW50SGVpZ2h0ID09PSBuZXdIZWlnaHQpIHJldHVybjtcbiAgICBsb2NrZWQgPSB0cnVlO1xuICAgICRhbmltYXRlXG4gICAgICAgIC5hbmltYXRlKFxuICAgICAgICAgICRlbGVtZW50LFxuICAgICAgICAgIHsgaGVpZ2h0OiBjdXJyZW50SGVpZ2h0ICsgJ3B4JyB9LFxuICAgICAgICAgIHsgaGVpZ2h0OiBuZXdIZWlnaHQgKyAncHgnfVxuICAgICAgICApXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkZWxlbWVudC5jc3MoJ2hlaWdodCcsICcnKTtcbiAgICAgICAgICBsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVwb3NpdGlvbnMgdGhlIGluayBiYXIgdG8gdGhlIHNlbGVjdGVkIHRhYi5cbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuICBmdW5jdGlvbiB1cGRhdGVJbmtCYXJTdHlsZXMgKCkge1xuICAgIGlmICghZWxlbWVudHMudGFic1skc2NvcGUuc2VsZWN0ZWRJbmRleF0pIHJldHVybjtcbiAgICBpZiAoIWN0cmwudGFicy5sZW5ndGgpIHJldHVybiBxdWV1ZS5wdXNoKGN0cmwudXBkYXRlSW5rQmFyU3R5bGVzKTtcbiAgICAvLy0tIGlmIHRoZSBlbGVtZW50IGlzIG5vdCB2aXNpYmxlLCB3ZSB3aWxsIG5vdCBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBzaXplcyB1bnRpbCBpdCBpc1xuICAgIC8vLS0gd2Ugc2hvdWxkIHRyZWF0IHRoYXQgYXMgYSByZXNpemUgZXZlbnQgcmF0aGVyIHRoYW4ganVzdCB1cGRhdGluZyB0aGUgaW5rIGJhclxuICAgIGlmICghJGVsZW1lbnQucHJvcCgnb2Zmc2V0UGFyZW50JykpIHJldHVybiBoYW5kbGVSZXNpemVXaGVuVmlzaWJsZSgpO1xuICAgIHZhciBpbmRleCA9ICRzY29wZS5zZWxlY3RlZEluZGV4LFxuICAgICAgICB0b3RhbFdpZHRoID0gZWxlbWVudHMucGFnaW5nLm9mZnNldFdpZHRoLFxuICAgICAgICB0YWIgPSBlbGVtZW50cy50YWJzW2luZGV4XSxcbiAgICAgICAgbGVmdCA9IHRhYi5vZmZzZXRMZWZ0LFxuICAgICAgICByaWdodCA9IHRvdGFsV2lkdGggLSBsZWZ0IC0gdGFiLm9mZnNldFdpZHRoO1xuICAgIHVwZGF0ZUlua0JhckNsYXNzTmFtZSgpO1xuICAgIGFuZ3VsYXIuZWxlbWVudChlbGVtZW50cy5pbmtCYXIpLmNzcyh7IGxlZnQ6IGxlZnQgKyAncHgnLCByaWdodDogcmlnaHQgKyAncHgnIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgbGVmdC9yaWdodCBjbGFzc2VzIHNvIHRoYXQgdGhlIGluayBiYXIgd2lsbCBhbmltYXRlIHByb3Blcmx5LlxuICAgKi9cbiAgZnVuY3Rpb24gdXBkYXRlSW5rQmFyQ2xhc3NOYW1lICgpIHtcbiAgICB2YXIgbmV3SW5kZXggPSAkc2NvcGUuc2VsZWN0ZWRJbmRleCxcbiAgICAgICAgb2xkSW5kZXggPSBjdHJsLmxhc3RTZWxlY3RlZEluZGV4LFxuICAgICAgICBpbmsgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudHMuaW5rQmFyKTtcbiAgICBpZiAoIWFuZ3VsYXIuaXNOdW1iZXIob2xkSW5kZXgpKSByZXR1cm47XG4gICAgaWYgKG5ld0luZGV4IDwgb2xkSW5kZXgpIHtcbiAgICAgIGluay5hZGRDbGFzcygnbWQtbGVmdCcpLnJlbW92ZUNsYXNzKCdtZC1yaWdodCcpO1xuICAgIH0gZWxzZSBpZiAobmV3SW5kZXggPiBvbGRJbmRleCkge1xuICAgICAgaW5rLmFkZENsYXNzKCdtZC1yaWdodCcpLnJlbW92ZUNsYXNzKCdtZC1sZWZ0Jyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRha2VzIGFuIG9mZnNldCB2YWx1ZSBhbmQgbWFrZXMgc3VyZSB0aGF0IGl0IGlzIHdpdGhpbiB0aGUgbWluL21heCBhbGxvd2VkIHZhbHVlcy5cbiAgICogQHBhcmFtIHZhbHVlXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgZnVuY3Rpb24gZml4T2Zmc2V0ICh2YWx1ZSkge1xuICAgIGlmICghZWxlbWVudHMudGFicy5sZW5ndGggfHwgIWN0cmwuc2hvdWxkUGFnaW5hdGUpIHJldHVybiAwO1xuICAgIHZhciBsYXN0VGFiID0gZWxlbWVudHMudGFic1tlbGVtZW50cy50YWJzLmxlbmd0aCAtIDFdLFxuICAgICAgICB0b3RhbFdpZHRoID0gbGFzdFRhYi5vZmZzZXRMZWZ0ICsgbGFzdFRhYi5vZmZzZXRXaWR0aDtcbiAgICB2YWx1ZSA9IE1hdGgubWF4KDAsIHZhbHVlKTtcbiAgICB2YWx1ZSA9IE1hdGgubWluKHRvdGFsV2lkdGggLSBlbGVtZW50cy5jYW52YXMuY2xpZW50V2lkdGgsIHZhbHVlKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQXR0YWNoZXMgYSByaXBwbGUgdG8gdGhlIHRhYiBpdGVtIGVsZW1lbnQuXG4gICAqIEBwYXJhbSBzY29wZVxuICAgKiBAcGFyYW0gZWxlbWVudFxuICAgKi9cbiAgZnVuY3Rpb24gYXR0YWNoUmlwcGxlIChzY29wZSwgZWxlbWVudCkge1xuICAgIHZhciBvcHRpb25zID0geyBjb2xvckVsZW1lbnQ6IGFuZ3VsYXIuZWxlbWVudChlbGVtZW50cy5pbmtCYXIpIH07XG4gICAgJG1kVGFiSW5rUmlwcGxlLmF0dGFjaChzY29wZSwgZWxlbWVudCwgb3B0aW9ucyk7XG4gIH1cbn1cbk1kVGFic0NvbnRyb2xsZXIuJGluamVjdCA9IFtcIiRzY29wZVwiLCBcIiRlbGVtZW50XCIsIFwiJHdpbmRvd1wiLCBcIiR0aW1lb3V0XCIsIFwiJG1kQ29uc3RhbnRcIiwgXCIkbWRUYWJJbmtSaXBwbGVcIiwgXCIkbWRVdGlsXCIsIFwiJGFuaW1hdGVcIiwgXCIkYXR0cnNcIiwgXCIkY29tcGlsZVwiLCBcIiRtZFRoZW1pbmdcIl07XG5cbn0pKCk7XG4oZnVuY3Rpb24oKXtcblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG1kVGFic1xuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLnRhYnNcbiAqXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGA8bWQtdGFicz5gIGRpcmVjdGl2ZSBzZXJ2ZXMgYXMgdGhlIGNvbnRhaW5lciBmb3IgMS4ubiBgPG1kLXRhYj5gIGNoaWxkIGRpcmVjdGl2ZXMgdG8gcHJvZHVjZXMgYSBUYWJzIGNvbXBvbmVudHMuXG4gKiBJbiB0dXJuLCB0aGUgbmVzdGVkIGA8bWQtdGFiPmAgZGlyZWN0aXZlIGlzIHVzZWQgdG8gc3BlY2lmeSBhIHRhYiBsYWJlbCBmb3IgdGhlICoqaGVhZGVyIGJ1dHRvbioqIGFuZCBhIFtvcHRpb25hbF0gdGFiIHZpZXdcbiAqIGNvbnRlbnQgdGhhdCB3aWxsIGJlIGFzc29jaWF0ZWQgd2l0aCBlYWNoIHRhYiBidXR0b24uXG4gKlxuICogQmVsb3cgaXMgdGhlIG1hcmt1cCBmb3IgaXRzIHNpbXBsZXN0IHVzYWdlOlxuICpcbiAqICA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogIDxtZC10YWJzPlxuICogICAgPG1kLXRhYiBsYWJlbD1cIlRhYiAjMVwiPjwvbWQtdGFiPlxuICogICAgPG1kLXRhYiBsYWJlbD1cIlRhYiAjMlwiPjwvbWQtdGFiPlxuICogICAgPG1kLXRhYiBsYWJlbD1cIlRhYiAjM1wiPjwvbWQtdGFiPlxuICogIDwvbWQtdGFicz5cbiAqICA8L2hsanM+XG4gKlxuICogVGFicyBzdXBwb3J0cyB0aHJlZSAoMykgdXNhZ2Ugc2NlbmFyaW9zOlxuICpcbiAqICAxLiBUYWJzIChidXR0b25zIG9ubHkpXG4gKiAgMi4gVGFicyB3aXRoIGludGVybmFsIHZpZXcgY29udGVudFxuICogIDMuIFRhYnMgd2l0aCBleHRlcm5hbCB2aWV3IGNvbnRlbnRcbiAqXG4gKiAqKlRhYi1vbmx5Kiogc3VwcG9ydCBpcyB1c2VmdWwgd2hlbiB0YWIgYnV0dG9ucyBhcmUgdXNlZCBmb3IgY3VzdG9tIG5hdmlnYXRpb24gcmVnYXJkbGVzcyBvZiBhbnkgb3RoZXIgY29tcG9uZW50cywgY29udGVudCwgb3Igdmlld3MuXG4gKiAqKlRhYnMgd2l0aCBpbnRlcm5hbCB2aWV3cyoqIGFyZSB0aGUgdHJhZGl0aW9uYWwgdXNhZ2VzIHdoZXJlIGVhY2ggdGFiIGhhcyBhc3NvY2lhdGVkIHZpZXcgY29udGVudCBhbmQgdGhlIHZpZXcgc3dpdGNoaW5nIGlzIG1hbmFnZWQgaW50ZXJuYWxseSBieSB0aGUgVGFicyBjb21wb25lbnQuXG4gKiAqKlRhYnMgd2l0aCBleHRlcm5hbCB2aWV3IGNvbnRlbnQqKiBpcyBvZnRlbiB1c2VmdWwgd2hlbiBjb250ZW50IGFzc29jaWF0ZWQgd2l0aCBlYWNoIHRhYiBpcyBpbmRlcGVuZGVudGx5IG1hbmFnZWQgYW5kIGRhdGEtYmluZGluZyBub3RpZmljYXRpb25zIGFubm91bmNlIHRhYiBzZWxlY3Rpb24gY2hhbmdlcy5cbiAqXG4gKiBBZGRpdGlvbmFsIGZlYXR1cmVzIGFsc28gaW5jbHVkZTpcbiAqXG4gKiAqICBDb250ZW50IGNhbiBpbmNsdWRlIGFueSBtYXJrdXAuXG4gKiAqICBJZiBhIHRhYiBpcyBkaXNhYmxlZCB3aGlsZSBhY3RpdmUvc2VsZWN0ZWQsIHRoZW4gdGhlIG5leHQgdGFiIHdpbGwgYmUgYXV0by1zZWxlY3RlZC5cbiAqXG4gKiAjIyMgRXhwbGFuYXRpb24gb2YgdGFiIHN0cmV0Y2hpbmdcbiAqXG4gKiBJbml0aWFsbHksIHRhYnMgd2lsbCBoYXZlIGFuIGluaGVyZW50IHNpemUuICBUaGlzIHNpemUgd2lsbCBlaXRoZXIgYmUgZGVmaW5lZCBieSBob3cgbXVjaCBzcGFjZSBpcyBuZWVkZWQgdG8gYWNjb21tb2RhdGUgdGhlaXIgdGV4dCBvciBzZXQgYnkgdGhlIHVzZXIgdGhyb3VnaCBDU1MuICBDYWxjdWxhdGlvbnMgd2lsbCBiZSBiYXNlZCBvbiB0aGlzIHNpemUuXG4gKlxuICogT24gbW9iaWxlIGRldmljZXMsIHRhYnMgd2lsbCBiZSBleHBhbmRlZCB0byBmaWxsIHRoZSBhdmFpbGFibGUgaG9yaXpvbnRhbCBzcGFjZS4gIFdoZW4gdGhpcyBoYXBwZW5zLCBhbGwgdGFicyB3aWxsIGJlY29tZSB0aGUgc2FtZSBzaXplLlxuICpcbiAqIE9uIGRlc2t0b3BzLCBieSBkZWZhdWx0LCBzdHJldGNoaW5nIHdpbGwgbmV2ZXIgb2NjdXIuXG4gKlxuICogVGhpcyBkZWZhdWx0IGJlaGF2aW9yIGNhbiBiZSBvdmVycmlkZGVuIHRocm91Z2ggdGhlIGBtZC1zdHJldGNoLXRhYnNgIGF0dHJpYnV0ZS4gIEhlcmUgaXMgYSB0YWJsZSBzaG93aW5nIHdoZW4gc3RyZXRjaGluZyB3aWxsIG9jY3VyOlxuICpcbiAqIGBtZC1zdHJldGNoLXRhYnNgIHwgbW9iaWxlICAgIHwgZGVza3RvcFxuICogLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tfC0tLS0tLS0tXG4gKiBgYXV0b2AgICAgICAgICAgICB8IHN0cmV0Y2hlZCB8IC0tLVxuICogYGFsd2F5c2AgICAgICAgICAgfCBzdHJldGNoZWQgfCBzdHJldGNoZWRcbiAqIGBuZXZlcmAgICAgICAgICAgIHwgLS0tICAgICAgIHwgLS0tXG4gKlxuICogQHBhcmFtIHtpbnRlZ2VyPX0gbWQtc2VsZWN0ZWQgSW5kZXggb2YgdGhlIGFjdGl2ZS9zZWxlY3RlZCB0YWJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG1kLW5vLWluayBJZiBwcmVzZW50LCBkaXNhYmxlcyBpbmsgcmlwcGxlIGVmZmVjdHMuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBtZC1uby1iYXIgSWYgcHJlc2VudCwgZGlzYWJsZXMgdGhlIHNlbGVjdGlvbiBpbmsgYmFyLlxuICogQHBhcmFtIHtzdHJpbmc9fSAgbWQtYWxpZ24tdGFicyBBdHRyaWJ1dGUgdG8gaW5kaWNhdGUgcG9zaXRpb24gb2YgdGFiIGJ1dHRvbnM6IGBib3R0b21gIG9yIGB0b3BgOyBkZWZhdWx0IGlzIGB0b3BgXG4gKiBAcGFyYW0ge3N0cmluZz19IG1kLXN0cmV0Y2gtdGFicyBBdHRyaWJ1dGUgdG8gaW5kaWNhdGUgd2hldGhlciBvciBub3QgdG8gc3RyZXRjaCB0YWJzOiBgYXV0b2AsIGBhbHdheXNgLCBvciBgbmV2ZXJgOyBkZWZhdWx0IGlzIGBhdXRvYFxuICogQHBhcmFtIHtib29sZWFuPX0gbWQtZHluYW1pYy1oZWlnaHQgV2hlbiBlbmFibGVkLCB0aGUgdGFiIHdyYXBwZXIgd2lsbCByZXNpemUgYmFzZWQgb24gdGhlIGNvbnRlbnRzIG9mIHRoZSBzZWxlY3RlZCB0YWJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG1kLWNlbnRlci10YWJzIFdoZW4gZW5hYmxlZCwgdGFicyB3aWxsIGJlIGNlbnRlcmVkIHByb3ZpZGVkIHRoZXJlIGlzIG5vIG5lZWQgZm9yIHBhZ2luYXRpb25cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG1kLW5vLXBhZ2luYXRpb24gV2hlbiBlbmFibGVkLCBwYWdpbmF0aW9uIHdpbGwgcmVtYWluIG9mZlxuICogQHBhcmFtIHtib29sZWFuPX0gbWQtc3dpcGUtY29udGVudCBXaGVuIGVuYWJsZWQsIHN3aXBlIGdlc3R1cmVzIHdpbGwgYmUgZW5hYmxlZCBmb3IgdGhlIGNvbnRlbnQgYXJlYSB0byBqdW1wIGJldHdlZW4gdGFic1xuICogQHBhcmFtIHtib29sZWFuPX0gbWQtbm8tZGlzY29ubmVjdCBJZiB5b3VyIHRhYiBjb250ZW50IGhhcyBiYWNrZ3JvdW5kIHRhc2tzIChpZS4gZXZlbnQgbGlzdGVuZXJzKSwgeW91IHdpbGwgd2FudCB0byBpbmNsdWRlIHRoaXMgdG8gcHJldmVudCB0aGUgc2NvcGUgZnJvbSBiZWluZyBkaXNjb25uZWN0ZWRcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG1kLWF1dG9zZWxlY3QgV2hlbiBwcmVzZW50LCBhbnkgdGFicyBhZGRlZCBhZnRlciB0aGUgaW5pdGlhbCBsb2FkIHdpbGwgYmUgYXV0b21hdGljYWxseSBzZWxlY3RlZFxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC10YWJzIG1kLXNlbGVjdGVkPVwic2VsZWN0ZWRJbmRleFwiID5cbiAqICAgPGltZyBuZy1zcmM9XCJpbWcvYW5ndWxhci5wbmdcIiBjbGFzcz1cImNlbnRlcmVkXCI+XG4gKiAgIDxtZC10YWJcbiAqICAgICAgIG5nLXJlcGVhdD1cInRhYiBpbiB0YWJzIHwgb3JkZXJCeTpwcmVkaWNhdGU6cmV2ZXJzZWRcIlxuICogICAgICAgbWQtb24tc2VsZWN0PVwib25UYWJTZWxlY3RlZCh0YWIpXCJcbiAqICAgICAgIG1kLW9uLWRlc2VsZWN0PVwiYW5ub3VuY2VEZXNlbGVjdGVkKHRhYilcIlxuICogICAgICAgbmctZGlzYWJsZWQ9XCJ0YWIuZGlzYWJsZWRcIj5cbiAqICAgICA8bWQtdGFiLWxhYmVsPlxuICogICAgICAge3t0YWIudGl0bGV9fVxuICogICAgICAgPGltZyBzcmM9XCJpbWcvcmVtb3ZlVGFiLnBuZ1wiIG5nLWNsaWNrPVwicmVtb3ZlVGFiKHRhYilcIiBjbGFzcz1cImRlbGV0ZVwiPlxuICogICAgIDwvbWQtdGFiLWxhYmVsPlxuICogICAgIDxtZC10YWItYm9keT5cbiAqICAgICAgIHt7dGFiLmNvbnRlbnR9fVxuICogICAgIDwvbWQtdGFiLWJvZHk+XG4gKiAgIDwvbWQtdGFiPlxuICogPC9tZC10YWJzPlxuICogPC9obGpzPlxuICpcbiAqL1xuYW5ndWxhclxuICAgIC5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMudGFicycpXG4gICAgLmRpcmVjdGl2ZSgnbWRUYWJzJywgTWRUYWJzKTtcblxuZnVuY3Rpb24gTWRUYWJzICgkbWRUaGVtaW5nLCAkbWRVdGlsLCAkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIHNjb3BlOiB7XG4gICAgICBub1BhZ2luYXRpb246ICAnPT9tZE5vUGFnaW5hdGlvbicsXG4gICAgICBkeW5hbWljSGVpZ2h0OiAnPT9tZER5bmFtaWNIZWlnaHQnLFxuICAgICAgY2VudGVyVGFiczogICAgJz0/bWRDZW50ZXJUYWJzJyxcbiAgICAgIHNlbGVjdGVkSW5kZXg6ICc9P21kU2VsZWN0ZWQnLFxuICAgICAgc3RyZXRjaFRhYnM6ICAgJ0A/bWRTdHJldGNoVGFicycsXG4gICAgICBzd2lwZUNvbnRlbnQ6ICAnPT9tZFN3aXBlQ29udGVudCcsXG4gICAgICBub0Rpc2Nvbm5lY3Q6ICAnPT9tZE5vRGlzY29ubmVjdCcsXG4gICAgICBhdXRvc2VsZWN0OiAgICAnPT9tZEF1dG9zZWxlY3QnXG4gICAgfSxcbiAgICB0ZW1wbGF0ZTogZnVuY3Rpb24gKGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIGF0dHJbXCIkbWRUYWJzVGVtcGxhdGVcIl0gPSBlbGVtZW50Lmh0bWwoKTtcbiAgICAgIHJldHVybiAnXFxcbiAgICAgICAgPG1kLXRhYnMtd3JhcHBlciBuZy1jbGFzcz1cInsgXFwnbWQtc3RyZXRjaC10YWJzXFwnOiAkbWRUYWJzQ3RybC5zaG91bGRTdHJldGNoVGFicygpIH1cIj5cXFxuICAgICAgICAgIDxtZC10YWItZGF0YT48L21kLXRhYi1kYXRhPlxcXG4gICAgICAgICAgPG1kLXByZXYtYnV0dG9uXFxcbiAgICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXFxcbiAgICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXFxcbiAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIlByZXZpb3VzIFBhZ2VcIlxcXG4gICAgICAgICAgICAgIGFyaWEtZGlzYWJsZWQ9XCJ7eyEkbWRUYWJzQ3RybC5jYW5QYWdlQmFjaygpfX1cIlxcXG4gICAgICAgICAgICAgIG5nLWNsYXNzPVwieyBcXCdtZC1kaXNhYmxlZFxcJzogISRtZFRhYnNDdHJsLmNhblBhZ2VCYWNrKCkgfVwiXFxcbiAgICAgICAgICAgICAgbmctaWY9XCIkbWRUYWJzQ3RybC5zaG91bGRQYWdpbmF0ZVwiXFxcbiAgICAgICAgICAgICAgbmctY2xpY2s9XCIkbWRUYWJzQ3RybC5wcmV2aW91c1BhZ2UoKVwiPlxcXG4gICAgICAgICAgICA8bWQtaWNvbiBtZC1zdmctaWNvbj1cIm1kLXRhYnMtYXJyb3dcIj48L21kLWljb24+XFxcbiAgICAgICAgICA8L21kLXByZXYtYnV0dG9uPlxcXG4gICAgICAgICAgPG1kLW5leHQtYnV0dG9uXFxcbiAgICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXFxcbiAgICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXFxcbiAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIk5leHQgUGFnZVwiXFxcbiAgICAgICAgICAgICAgYXJpYS1kaXNhYmxlZD1cInt7ISRtZFRhYnNDdHJsLmNhblBhZ2VGb3J3YXJkKCl9fVwiXFxcbiAgICAgICAgICAgICAgbmctY2xhc3M9XCJ7IFxcJ21kLWRpc2FibGVkXFwnOiAhJG1kVGFic0N0cmwuY2FuUGFnZUZvcndhcmQoKSB9XCJcXFxuICAgICAgICAgICAgICBuZy1pZj1cIiRtZFRhYnNDdHJsLnNob3VsZFBhZ2luYXRlXCJcXFxuICAgICAgICAgICAgICBuZy1jbGljaz1cIiRtZFRhYnNDdHJsLm5leHRQYWdlKClcIj5cXFxuICAgICAgICAgICAgPG1kLWljb24gbWQtc3ZnLWljb249XCJtZC10YWJzLWFycm93XCI+PC9tZC1pY29uPlxcXG4gICAgICAgICAgPC9tZC1uZXh0LWJ1dHRvbj5cXFxuICAgICAgICAgIDxtZC10YWJzLWNhbnZhc1xcXG4gICAgICAgICAgICAgIHRhYmluZGV4PVwiMFwiXFxcbiAgICAgICAgICAgICAgYXJpYS1hY3RpdmVkZXNjZW5kYW50PVwidGFiLWl0ZW0te3skbWRUYWJzQ3RybC50YWJzWyRtZFRhYnNDdHJsLmZvY3VzSW5kZXhdLmlkfX1cIlxcXG4gICAgICAgICAgICAgIG5nLWZvY3VzPVwiJG1kVGFic0N0cmwucmVkaXJlY3RGb2N1cygpXCJcXFxuICAgICAgICAgICAgICBuZy1jbGFzcz1cIntcXFxuICAgICAgICAgICAgICAgICAgXFwnbWQtcGFnaW5hdGVkXFwnOiAkbWRUYWJzQ3RybC5zaG91bGRQYWdpbmF0ZSxcXFxuICAgICAgICAgICAgICAgICAgXFwnbWQtY2VudGVyLXRhYnNcXCc6ICRtZFRhYnNDdHJsLnNob3VsZENlbnRlclRhYnNcXFxuICAgICAgICAgICAgICB9XCJcXFxuICAgICAgICAgICAgICBuZy1rZXlkb3duPVwiJG1kVGFic0N0cmwua2V5ZG93bigkZXZlbnQpXCJcXFxuICAgICAgICAgICAgICByb2xlPVwidGFibGlzdFwiPlxcXG4gICAgICAgICAgICA8bWQtcGFnaW5hdGlvbi13cmFwcGVyXFxcbiAgICAgICAgICAgICAgICBuZy1jbGFzcz1cInsgXFwnbWQtY2VudGVyLXRhYnNcXCc6ICRtZFRhYnNDdHJsLnNob3VsZENlbnRlclRhYnMgfVwiXFxcbiAgICAgICAgICAgICAgICBtZC10YWItc2Nyb2xsPVwiJG1kVGFic0N0cmwuc2Nyb2xsKCRldmVudClcIj5cXFxuICAgICAgICAgICAgICA8bWQtdGFiLWl0ZW1cXFxuICAgICAgICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXFxcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwibWQtdGFiXCJcXFxuICAgICAgICAgICAgICAgICAgc3R5bGU9XCJtYXgtd2lkdGg6IHt7IHRhYldpZHRoID8gdGFiV2lkdGggKyBcXCdweFxcJyA6IFxcJ25vbmVcXCcgfX1cIlxcXG4gICAgICAgICAgICAgICAgICBuZy1yZXBlYXQ9XCJ0YWIgaW4gJG1kVGFic0N0cmwudGFic1wiXFxcbiAgICAgICAgICAgICAgICAgIHJvbGU9XCJ0YWJcIlxcXG4gICAgICAgICAgICAgICAgICBhcmlhLWNvbnRyb2xzPVwidGFiLWNvbnRlbnQte3t0YWIuaWR9fVwiXFxcbiAgICAgICAgICAgICAgICAgIGFyaWEtc2VsZWN0ZWQ9XCJ7e3RhYi5pc0FjdGl2ZSgpfX1cIlxcXG4gICAgICAgICAgICAgICAgICBhcmlhLWRpc2FibGVkPVwie3t0YWIuc2NvcGUuZGlzYWJsZWQgfHwgXFwnZmFsc2VcXCd9fVwiXFxcbiAgICAgICAgICAgICAgICAgIG5nLWNsaWNrPVwiJG1kVGFic0N0cmwuc2VsZWN0KHRhYi5nZXRJbmRleCgpKVwiXFxcbiAgICAgICAgICAgICAgICAgIG5nLWNsYXNzPVwie1xcXG4gICAgICAgICAgICAgICAgICAgICAgXFwnbWQtYWN0aXZlXFwnOiAgICB0YWIuaXNBY3RpdmUoKSxcXFxuICAgICAgICAgICAgICAgICAgICAgIFxcJ21kLWZvY3VzZWRcXCc6ICAgdGFiLmhhc0ZvY3VzKCksXFxcbiAgICAgICAgICAgICAgICAgICAgICBcXCdtZC1kaXNhYmxlZFxcJzogIHRhYi5zY29wZS5kaXNhYmxlZFxcXG4gICAgICAgICAgICAgICAgICB9XCJcXFxuICAgICAgICAgICAgICAgICAgbmctZGlzYWJsZWQ9XCJ0YWIuc2NvcGUuZGlzYWJsZWRcIlxcXG4gICAgICAgICAgICAgICAgICBtZC1zd2lwZS1sZWZ0PVwiJG1kVGFic0N0cmwubmV4dFBhZ2UoKVwiXFxcbiAgICAgICAgICAgICAgICAgIG1kLXN3aXBlLXJpZ2h0PVwiJG1kVGFic0N0cmwucHJldmlvdXNQYWdlKClcIlxcXG4gICAgICAgICAgICAgICAgICBtZC10ZW1wbGF0ZT1cInRhYi5sYWJlbFwiXFxcbiAgICAgICAgICAgICAgICAgIG1kLXNjb3BlPVwidGFiLnBhcmVudFwiPjwvbWQtdGFiLWl0ZW0+XFxcbiAgICAgICAgICAgICAgPG1kLWluay1iYXIgbmctaGlkZT1cIm5vSW5rQmFyXCI+PC9tZC1pbmstYmFyPlxcXG4gICAgICAgICAgICA8L21kLXBhZ2luYXRpb24td3JhcHBlcj5cXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1kLXZpc3VhbGx5LWhpZGRlbiBtZC1kdW1teS13cmFwcGVyXCI+XFxcbiAgICAgICAgICAgICAgPG1kLWR1bW15LXRhYlxcXG4gICAgICAgICAgICAgICAgICBjbGFzcz1cIm1kLXRhYlwiXFxcbiAgICAgICAgICAgICAgICAgIHRhYmluZGV4PVwiLTFcIlxcXG4gICAgICAgICAgICAgICAgICBpZD1cInRhYi1pdGVtLXt7dGFiLmlkfX1cIlxcXG4gICAgICAgICAgICAgICAgICByb2xlPVwidGFiXCJcXFxuICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz1cInRhYi1jb250ZW50LXt7dGFiLmlkfX1cIlxcXG4gICAgICAgICAgICAgICAgICBhcmlhLXNlbGVjdGVkPVwie3t0YWIuaXNBY3RpdmUoKX19XCJcXFxuICAgICAgICAgICAgICAgICAgYXJpYS1kaXNhYmxlZD1cInt7dGFiLnNjb3BlLmRpc2FibGVkIHx8IFxcJ2ZhbHNlXFwnfX1cIlxcXG4gICAgICAgICAgICAgICAgICBuZy1mb2N1cz1cIiRtZFRhYnNDdHJsLmhhc0ZvY3VzID0gdHJ1ZVwiXFxcbiAgICAgICAgICAgICAgICAgIG5nLWJsdXI9XCIkbWRUYWJzQ3RybC5oYXNGb2N1cyA9IGZhbHNlXCJcXFxuICAgICAgICAgICAgICAgICAgbmctcmVwZWF0PVwidGFiIGluICRtZFRhYnNDdHJsLnRhYnNcIlxcXG4gICAgICAgICAgICAgICAgICBtZC10ZW1wbGF0ZT1cInRhYi5sYWJlbFwiXFxcbiAgICAgICAgICAgICAgICAgIG1kLXNjb3BlPVwidGFiLnBhcmVudFwiPjwvbWQtZHVtbXktdGFiPlxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgIDwvbWQtdGFicy1jYW52YXM+XFxcbiAgICAgICAgPC9tZC10YWJzLXdyYXBwZXI+XFxcbiAgICAgICAgPG1kLXRhYnMtY29udGVudC13cmFwcGVyIG5nLXNob3c9XCIkbWRUYWJzQ3RybC5oYXNDb250ZW50XCI+XFxcbiAgICAgICAgICA8bWQtdGFiLWNvbnRlbnRcXFxuICAgICAgICAgICAgICBpZD1cInRhYi1jb250ZW50LXt7dGFiLmlkfX1cIlxcXG4gICAgICAgICAgICAgIHJvbGU9XCJ0YWJwYW5lbFwiXFxcbiAgICAgICAgICAgICAgYXJpYS1sYWJlbGxlZGJ5PVwidGFiLWl0ZW0te3t0YWIuaWR9fVwiXFxcbiAgICAgICAgICAgICAgbWQtc3dpcGUtbGVmdD1cInN3aXBlQ29udGVudCAmJiAkbWRUYWJzQ3RybC5pbmNyZW1lbnRTZWxlY3RlZEluZGV4KDEpXCJcXFxuICAgICAgICAgICAgICBtZC1zd2lwZS1yaWdodD1cInN3aXBlQ29udGVudCAmJiAkbWRUYWJzQ3RybC5pbmNyZW1lbnRTZWxlY3RlZEluZGV4KC0xKVwiXFxcbiAgICAgICAgICAgICAgbmctaWY9XCIkbWRUYWJzQ3RybC5oYXNDb250ZW50XCJcXFxuICAgICAgICAgICAgICBuZy1yZXBlYXQ9XCIoaW5kZXgsIHRhYikgaW4gJG1kVGFic0N0cmwudGFic1wiXFxcbiAgICAgICAgICAgICAgbWQtY29ubmVjdGVkLWlmPVwidGFiLmlzQWN0aXZlKClcIlxcXG4gICAgICAgICAgICAgIG5nLWNsYXNzPVwie1xcXG4gICAgICAgICAgICAgICAgXFwnbWQtbm8tdHJhbnNpdGlvblxcJzogJG1kVGFic0N0cmwubGFzdFNlbGVjdGVkSW5kZXggPT0gbnVsbCxcXFxuICAgICAgICAgICAgICAgIFxcJ21kLWFjdGl2ZVxcJzogICAgICAgIHRhYi5pc0FjdGl2ZSgpLFxcXG4gICAgICAgICAgICAgICAgXFwnbWQtbGVmdFxcJzogICAgICAgICAgdGFiLmlzTGVmdCgpLFxcXG4gICAgICAgICAgICAgICAgXFwnbWQtcmlnaHRcXCc6ICAgICAgICAgdGFiLmlzUmlnaHQoKSxcXFxuICAgICAgICAgICAgICAgIFxcJ21kLW5vLXNjcm9sbFxcJzogICAgIGR5bmFtaWNIZWlnaHRcXFxuICAgICAgICAgICAgICB9XCI+XFxcbiAgICAgICAgICAgIDxkaXZcXFxuICAgICAgICAgICAgICAgIG1kLXRlbXBsYXRlPVwidGFiLnRlbXBsYXRlXCJcXFxuICAgICAgICAgICAgICAgIG1kLXNjb3BlPVwidGFiLnBhcmVudFwiXFxcbiAgICAgICAgICAgICAgICBuZy1pZj1cInRhYi5zaG91bGRSZW5kZXIoKVwiPjwvZGl2PlxcXG4gICAgICAgICAgPC9tZC10YWItY29udGVudD5cXFxuICAgICAgICA8L21kLXRhYnMtY29udGVudC13cmFwcGVyPlxcXG4gICAgICAnO1xuICAgIH0sXG4gICAgY29udHJvbGxlcjogJ01kVGFic0NvbnRyb2xsZXInLFxuICAgIGNvbnRyb2xsZXJBczogJyRtZFRhYnNDdHJsJ1xuICB9O1xufVxuTWRUYWJzLiRpbmplY3QgPSBbXCIkbWRUaGVtaW5nXCIsIFwiJG1kVXRpbFwiLCBcIiRjb21waWxlXCJdO1xuXG59KSgpO1xuKGZ1bmN0aW9uKCl7XG5cInVzZSBzdHJpY3RcIjtcblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMudGFicycpXG4gICAgLmRpcmVjdGl2ZSgnbWRUZW1wbGF0ZScsIE1kVGVtcGxhdGUpO1xuXG5mdW5jdGlvbiBNZFRlbXBsYXRlICgkY29tcGlsZSwgJG1kVXRpbCwgJHRpbWVvdXQpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGxpbms6IGxpbmssXG4gICAgc2NvcGU6IHtcbiAgICAgIHRlbXBsYXRlOiAnPW1kVGVtcGxhdGUnLFxuICAgICAgY29tcGlsZVNjb3BlOiAnPW1kU2NvcGUnLFxuICAgICAgY29ubmVjdGVkOiAnPT9tZENvbm5lY3RlZElmJ1xuICAgIH0sXG4gICAgcmVxdWlyZTogJ14/bWRUYWJzJ1xuICB9O1xuICBmdW5jdGlvbiBsaW5rIChzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xuICAgIGlmICghY3RybCkgcmV0dXJuO1xuICAgIHZhciBjb21waWxlU2NvcGUgPSBzY29wZS5jb21waWxlU2NvcGUuJG5ldygpO1xuICAgIGVsZW1lbnQuaHRtbChzY29wZS50ZW1wbGF0ZSk7XG4gICAgJGNvbXBpbGUoZWxlbWVudC5jb250ZW50cygpKShjb21waWxlU2NvcGUpO1xuICAgIHJldHVybiAkdGltZW91dChoYW5kbGVTY29wZSk7XG4gICAgZnVuY3Rpb24gaGFuZGxlU2NvcGUgKCkge1xuICAgICAgc2NvcGUuJHdhdGNoKCdjb25uZWN0ZWQnLCBmdW5jdGlvbiAodmFsdWUpIHsgdmFsdWUgPT09IGZhbHNlID8gZGlzY29ubmVjdCgpIDogcmVjb25uZWN0KCk7IH0pO1xuICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIHJlY29ubmVjdCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRpc2Nvbm5lY3QgKCkge1xuICAgICAgaWYgKGN0cmwuc2NvcGUubm9EaXNjb25uZWN0KSByZXR1cm47XG4gICAgICAkbWRVdGlsLmRpc2Nvbm5lY3RTY29wZShjb21waWxlU2NvcGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWNvbm5lY3QgKCkge1xuICAgICAgaWYgKGN0cmwuc2NvcGUubm9EaXNjb25uZWN0KSByZXR1cm47XG4gICAgICAkbWRVdGlsLnJlY29ubmVjdFNjb3BlKGNvbXBpbGVTY29wZSk7XG4gICAgfVxuICB9XG59XG5NZFRlbXBsYXRlLiRpbmplY3QgPSBbXCIkY29tcGlsZVwiLCBcIiRtZFV0aWxcIiwgXCIkdGltZW91dFwiXTtcblxufSkoKTtcbihmdW5jdGlvbigpeyBcbmFuZ3VsYXIubW9kdWxlKFwibWF0ZXJpYWwuY29yZVwiKS5jb25zdGFudChcIiRNRF9USEVNRV9DU1NcIiwgXCIvKiBtaXhpbiBkZWZpbml0aW9uIDsgc2V0cyBMVFIgYW5kIFJUTCB3aXRoaW4gdGhlIHNhbWUgc3R5bGUgY2FsbCAqL21kLWF1dG9jb21wbGV0ZS5tZC1USEVNRV9OQU1FLXRoZW1lIHsgIGJhY2tncm91bmQ6ICd7e2JhY2tncm91bmQtNTB9fSc7IH0gIG1kLWF1dG9jb21wbGV0ZS5tZC1USEVNRV9OQU1FLXRoZW1lW2Rpc2FibGVkXSB7ICAgIGJhY2tncm91bmQ6ICd7e2JhY2tncm91bmQtMTAwfX0nOyB9ICBtZC1hdXRvY29tcGxldGUubWQtVEhFTUVfTkFNRS10aGVtZSBidXR0b24gbWQtaWNvbiBwYXRoIHsgICAgZmlsbDogJ3t7YmFja2dyb3VuZC02MDB9fSc7IH0gIG1kLWF1dG9jb21wbGV0ZS5tZC1USEVNRV9OQU1FLXRoZW1lIGJ1dHRvbjphZnRlciB7ICAgIGJhY2tncm91bmQ6ICd7e2JhY2tncm91bmQtNjAwLTAuM319JzsgfS5tZC1hdXRvY29tcGxldGUtc3VnZ2VzdGlvbnMubWQtVEhFTUVfTkFNRS10aGVtZSB7ICBiYWNrZ3JvdW5kOiAne3tiYWNrZ3JvdW5kLTUwfX0nOyB9ICAubWQtYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb25zLm1kLVRIRU1FX05BTUUtdGhlbWUgbGkgeyAgICBjb2xvcjogJ3t7YmFja2dyb3VuZC05MDB9fSc7IH0gICAgLm1kLWF1dG9jb21wbGV0ZS1zdWdnZXN0aW9ucy5tZC1USEVNRV9OQU1FLXRoZW1lIGxpIC5oaWdobGlnaHQgeyAgICAgIGNvbG9yOiAne3tiYWNrZ3JvdW5kLTYwMH19JzsgfSAgICAubWQtYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb25zLm1kLVRIRU1FX05BTUUtdGhlbWUgbGk6aG92ZXIsIC5tZC1hdXRvY29tcGxldGUtc3VnZ2VzdGlvbnMubWQtVEhFTUVfTkFNRS10aGVtZSBsaS5zZWxlY3RlZCB7ICAgICAgYmFja2dyb3VuZDogJ3t7YmFja2dyb3VuZC0yMDB9fSc7IH1tZC1iYWNrZHJvcC5tZC1vcGFxdWUubWQtVEhFTUVfTkFNRS10aGVtZSB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3tmb3JlZ3JvdW5kLTQtMC41fX0nOyB9bWQtYm90dG9tLXNoZWV0Lm1kLVRIRU1FX05BTUUtdGhlbWUgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YmFja2dyb3VuZC01MH19JzsgIGJvcmRlci10b3AtY29sb3I6ICd7e2JhY2tncm91bmQtMzAwfX0nOyB9ICBtZC1ib3R0b20tc2hlZXQubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1saXN0IG1kLWxpc3QtaXRlbSB7ICAgIGNvbG9yOiAne3tmb3JlZ3JvdW5kLTF9fSc7IH0gIG1kLWJvdHRvbS1zaGVldC5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1zdWJoZWFkZXIgeyAgICBiYWNrZ3JvdW5kLWNvbG9yOiAne3tiYWNrZ3JvdW5kLTUwfX0nOyB9ICBtZC1ib3R0b20tc2hlZXQubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtc3ViaGVhZGVyIHsgICAgY29sb3I6ICd7e2ZvcmVncm91bmQtMX19JzsgfWEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZSB7ICBib3JkZXItcmFkaXVzOiAzcHg7IH0gIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pOmhvdmVyLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pOmhvdmVyIHsgICAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YmFja2dyb3VuZC01MDAtMC4yfX0nOyB9ICBhLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKS5tZC1mb2N1c2VkLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLWZvY3VzZWQgeyAgICBiYWNrZ3JvdW5kLWNvbG9yOiAne3tiYWNrZ3JvdW5kLTUwMC0wLjJ9fSc7IH0gIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLWljb24tYnV0dG9uOmhvdmVyLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLWljb24tYnV0dG9uOmhvdmVyIHsgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH0gIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtZmFiLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtZmFiIHsgICAgYm9yZGVyLXJhZGl1czogNTAlOyAgICBiYWNrZ3JvdW5kLWNvbG9yOiAne3thY2NlbnQtY29sb3J9fSc7ICAgIGNvbG9yOiAne3thY2NlbnQtY29udHJhc3R9fSc7IH0gICAgYS5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1mYWIgbWQtaWNvbiwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWZhYiBtZC1pY29uIHsgICAgICBjb2xvcjogJ3t7YWNjZW50LWNvbnRyYXN0fX0nOyB9ICAgIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtZmFiOm5vdChbZGlzYWJsZWRdKTpob3ZlciwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWZhYjpub3QoW2Rpc2FibGVkXSk6aG92ZXIgeyAgICAgIGJhY2tncm91bmQtY29sb3I6ICd7e2FjY2VudC1jb2xvcn19JzsgfSAgICBhLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWZhYjpub3QoW2Rpc2FibGVkXSkubWQtZm9jdXNlZCwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWZhYjpub3QoW2Rpc2FibGVkXSkubWQtZm9jdXNlZCB7ICAgICAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YWNjZW50LUE3MDB9fSc7IH0gIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtaWNvbi1idXR0b24sIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1pY29uLWJ1dHRvbiB7ICAgIGJvcmRlci1yYWRpdXM6IDUwJTsgfSAgYS5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5LCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcHJpbWFyeSB7ICAgIGNvbG9yOiAne3twcmltYXJ5LWNvbG9yfX0nOyB9ICAgIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcHJpbWFyeS5tZC1yYWlzZWQsIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcHJpbWFyeS5tZC1mYWIsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5Lm1kLXJhaXNlZCwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXByaW1hcnkubWQtZmFiIHsgICAgICBjb2xvcjogJ3t7cHJpbWFyeS1jb250cmFzdH19JzsgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAne3twcmltYXJ5LWNvbG9yfX0nOyB9ICAgICAgYS5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5Lm1kLXJhaXNlZDpub3QoW2Rpc2FibGVkXSkgbWQtaWNvbiwgYS5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5Lm1kLWZhYjpub3QoW2Rpc2FibGVkXSkgbWQtaWNvbiwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXByaW1hcnkubWQtcmFpc2VkOm5vdChbZGlzYWJsZWRdKSBtZC1pY29uLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcHJpbWFyeS5tZC1mYWI6bm90KFtkaXNhYmxlZF0pIG1kLWljb24geyAgICAgICAgY29sb3I6ICd7e3ByaW1hcnktY29udHJhc3R9fSc7IH0gICAgICBhLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXByaW1hcnkubWQtcmFpc2VkOm5vdChbZGlzYWJsZWRdKTpob3ZlciwgYS5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5Lm1kLWZhYjpub3QoW2Rpc2FibGVkXSk6aG92ZXIsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5Lm1kLXJhaXNlZDpub3QoW2Rpc2FibGVkXSk6aG92ZXIsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5Lm1kLWZhYjpub3QoW2Rpc2FibGVkXSk6aG92ZXIgeyAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJ3t7cHJpbWFyeS1jb2xvcn19JzsgfSAgICAgIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcHJpbWFyeS5tZC1yYWlzZWQ6bm90KFtkaXNhYmxlZF0pLm1kLWZvY3VzZWQsIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcHJpbWFyeS5tZC1mYWI6bm90KFtkaXNhYmxlZF0pLm1kLWZvY3VzZWQsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5Lm1kLXJhaXNlZDpub3QoW2Rpc2FibGVkXSkubWQtZm9jdXNlZCwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXByaW1hcnkubWQtZmFiOm5vdChbZGlzYWJsZWRdKS5tZC1mb2N1c2VkIHsgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICd7e3ByaW1hcnktNjAwfX0nOyB9ICAgIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcHJpbWFyeTpub3QoW2Rpc2FibGVkXSkgbWQtaWNvbiwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXByaW1hcnk6bm90KFtkaXNhYmxlZF0pIG1kLWljb24geyAgICAgIGNvbG9yOiAne3twcmltYXJ5LWNvbG9yfX0nOyB9ICBhLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWZhYiwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWZhYiB7ICAgIGJvcmRlci1yYWRpdXM6IDUwJTsgICAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YWNjZW50LWNvbG9yfX0nOyAgICBjb2xvcjogJ3t7YWNjZW50LWNvbnRyYXN0fX0nOyB9ICAgIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtZmFiOm5vdChbZGlzYWJsZWRdKSAubWQtaWNvbiwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWZhYjpub3QoW2Rpc2FibGVkXSkgLm1kLWljb24geyAgICAgIGNvbG9yOiAne3thY2NlbnQtY29udHJhc3R9fSc7IH0gICAgYS5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1mYWI6bm90KFtkaXNhYmxlZF0pOmhvdmVyLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtZmFiOm5vdChbZGlzYWJsZWRdKTpob3ZlciB7ICAgICAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YWNjZW50LWNvbG9yfX0nOyB9ICAgIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtZmFiOm5vdChbZGlzYWJsZWRdKS5tZC1mb2N1c2VkLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtZmFiOm5vdChbZGlzYWJsZWRdKS5tZC1mb2N1c2VkIHsgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAne3thY2NlbnQtQTcwMH19JzsgfSAgYS5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1yYWlzZWQsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1yYWlzZWQgeyAgICBjb2xvcjogJ3t7YmFja2dyb3VuZC1jb250cmFzdH19JzsgICAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YmFja2dyb3VuZC01MH19JzsgfSAgICBhLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXJhaXNlZDpub3QoW2Rpc2FibGVkXSkgLm1kLWljb24sIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1yYWlzZWQ6bm90KFtkaXNhYmxlZF0pIC5tZC1pY29uIHsgICAgICBjb2xvcjogJ3t7YmFja2dyb3VuZC1jb250cmFzdH19JzsgfSAgICBhLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXJhaXNlZDpub3QoW2Rpc2FibGVkXSk6aG92ZXIsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1yYWlzZWQ6bm90KFtkaXNhYmxlZF0pOmhvdmVyIHsgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAne3tiYWNrZ3JvdW5kLTUwfX0nOyB9ICAgIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcmFpc2VkOm5vdChbZGlzYWJsZWRdKS5tZC1mb2N1c2VkLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcmFpc2VkOm5vdChbZGlzYWJsZWRdKS5tZC1mb2N1c2VkIHsgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAne3tiYWNrZ3JvdW5kLTIwMH19JzsgfSAgYS5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2FybiB7ICAgIGNvbG9yOiAne3t3YXJuLWNvbG9yfX0nOyB9ICAgIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2Fybi5tZC1yYWlzZWQsIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2Fybi5tZC1mYWIsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuLm1kLXJhaXNlZCwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXdhcm4ubWQtZmFiIHsgICAgICBjb2xvcjogJ3t7d2Fybi1jb250cmFzdH19JzsgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAne3t3YXJuLWNvbG9yfX0nOyB9ICAgICAgYS5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuLm1kLXJhaXNlZDpub3QoW2Rpc2FibGVkXSkgbWQtaWNvbiwgYS5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuLm1kLWZhYjpub3QoW2Rpc2FibGVkXSkgbWQtaWNvbiwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXdhcm4ubWQtcmFpc2VkOm5vdChbZGlzYWJsZWRdKSBtZC1pY29uLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2Fybi5tZC1mYWI6bm90KFtkaXNhYmxlZF0pIG1kLWljb24geyAgICAgICAgY29sb3I6ICd7e3dhcm4tY29udHJhc3R9fSc7IH0gICAgICBhLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXdhcm4ubWQtcmFpc2VkOm5vdChbZGlzYWJsZWRdKTpob3ZlciwgYS5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuLm1kLWZhYjpub3QoW2Rpc2FibGVkXSk6aG92ZXIsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuLm1kLXJhaXNlZDpub3QoW2Rpc2FibGVkXSk6aG92ZXIsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuLm1kLWZhYjpub3QoW2Rpc2FibGVkXSk6aG92ZXIgeyAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJ3t7d2Fybi1jb2xvcn19JzsgfSAgICAgIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2Fybi5tZC1yYWlzZWQ6bm90KFtkaXNhYmxlZF0pLm1kLWZvY3VzZWQsIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2Fybi5tZC1mYWI6bm90KFtkaXNhYmxlZF0pLm1kLWZvY3VzZWQsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuLm1kLXJhaXNlZDpub3QoW2Rpc2FibGVkXSkubWQtZm9jdXNlZCwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXdhcm4ubWQtZmFiOm5vdChbZGlzYWJsZWRdKS5tZC1mb2N1c2VkIHsgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICd7e3dhcm4tNzAwfX0nOyB9ICAgIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2Fybjpub3QoW2Rpc2FibGVkXSkgbWQtaWNvbiwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXdhcm46bm90KFtkaXNhYmxlZF0pIG1kLWljb24geyAgICAgIGNvbG9yOiAne3t3YXJuLWNvbG9yfX0nOyB9ICBhLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWFjY2VudCwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWFjY2VudCB7ICAgIGNvbG9yOiAne3thY2NlbnQtY29sb3J9fSc7IH0gICAgYS5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQubWQtcmFpc2VkLCBhLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWFjY2VudC5tZC1mYWIsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQubWQtcmFpc2VkLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtYWNjZW50Lm1kLWZhYiB7ICAgICAgY29sb3I6ICd7e2FjY2VudC1jb250cmFzdH19JzsgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAne3thY2NlbnQtY29sb3J9fSc7IH0gICAgICBhLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWFjY2VudC5tZC1yYWlzZWQ6bm90KFtkaXNhYmxlZF0pIG1kLWljb24sIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtYWNjZW50Lm1kLWZhYjpub3QoW2Rpc2FibGVkXSkgbWQtaWNvbiwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWFjY2VudC5tZC1yYWlzZWQ6bm90KFtkaXNhYmxlZF0pIG1kLWljb24sIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQubWQtZmFiOm5vdChbZGlzYWJsZWRdKSBtZC1pY29uIHsgICAgICAgIGNvbG9yOiAne3thY2NlbnQtY29udHJhc3R9fSc7IH0gICAgICBhLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWFjY2VudC5tZC1yYWlzZWQ6bm90KFtkaXNhYmxlZF0pOmhvdmVyLCBhLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWFjY2VudC5tZC1mYWI6bm90KFtkaXNhYmxlZF0pOmhvdmVyLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtYWNjZW50Lm1kLXJhaXNlZDpub3QoW2Rpc2FibGVkXSk6aG92ZXIsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQubWQtZmFiOm5vdChbZGlzYWJsZWRdKTpob3ZlciB7ICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAne3thY2NlbnQtY29sb3J9fSc7IH0gICAgICBhLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWFjY2VudC5tZC1yYWlzZWQ6bm90KFtkaXNhYmxlZF0pLm1kLWZvY3VzZWQsIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtYWNjZW50Lm1kLWZhYjpub3QoW2Rpc2FibGVkXSkubWQtZm9jdXNlZCwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWFjY2VudC5tZC1yYWlzZWQ6bm90KFtkaXNhYmxlZF0pLm1kLWZvY3VzZWQsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQubWQtZmFiOm5vdChbZGlzYWJsZWRdKS5tZC1mb2N1c2VkIHsgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICd7e2FjY2VudC03MDB9fSc7IH0gICAgYS5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQ6bm90KFtkaXNhYmxlZF0pIG1kLWljb24sIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQ6bm90KFtkaXNhYmxlZF0pIG1kLWljb24geyAgICAgIGNvbG9yOiAne3thY2NlbnQtY29sb3J9fSc7IH0gIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWVbZGlzYWJsZWRdLCBhLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXJhaXNlZFtkaXNhYmxlZF0sIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtZmFiW2Rpc2FibGVkXSwgYS5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnRbZGlzYWJsZWRdLCBhLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXdhcm5bZGlzYWJsZWRdLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWVbZGlzYWJsZWRdLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcmFpc2VkW2Rpc2FibGVkXSwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWZhYltkaXNhYmxlZF0sIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnRbZGlzYWJsZWRdLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2FybltkaXNhYmxlZF0geyAgICBjb2xvcjogJ3t7Zm9yZWdyb3VuZC0zfX0nOyAgICBjdXJzb3I6IG5vdC1hbGxvd2VkOyB9ICAgIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWVbZGlzYWJsZWRdIG1kLWljb24sIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcmFpc2VkW2Rpc2FibGVkXSBtZC1pY29uLCBhLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWZhYltkaXNhYmxlZF0gbWQtaWNvbiwgYS5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnRbZGlzYWJsZWRdIG1kLWljb24sIGEubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2FybltkaXNhYmxlZF0gbWQtaWNvbiwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lW2Rpc2FibGVkXSBtZC1pY29uLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcmFpc2VkW2Rpc2FibGVkXSBtZC1pY29uLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtZmFiW2Rpc2FibGVkXSBtZC1pY29uLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtYWNjZW50W2Rpc2FibGVkXSBtZC1pY29uLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2FybltkaXNhYmxlZF0gbWQtaWNvbiB7ICAgICAgY29sb3I6ICd7e2ZvcmVncm91bmQtM319JzsgfSAgYS5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1yYWlzZWRbZGlzYWJsZWRdLCBhLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWZhYltkaXNhYmxlZF0sIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1yYWlzZWRbZGlzYWJsZWRdLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtZmFiW2Rpc2FibGVkXSB7ICAgIGJhY2tncm91bmQtY29sb3I6ICd7e2ZvcmVncm91bmQtNH19JzsgfSAgYS5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZVtkaXNhYmxlZF0sIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZVtkaXNhYmxlZF0geyAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfW1kLWNhcmQubWQtVEhFTUVfTkFNRS10aGVtZSB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3tiYWNrZ3JvdW5kLWNvbG9yfX0nOyAgYm9yZGVyLXJhZGl1czogMnB4OyB9ICBtZC1jYXJkLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWNhcmQtaW1hZ2UgeyAgICBib3JkZXItcmFkaXVzOiAycHggMnB4IDAgMDsgfW1kLWNoZWNrYm94Lm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLXJpcHBsZSB7ICBjb2xvcjogJ3t7YWNjZW50LTYwMH19JzsgfW1kLWNoZWNrYm94Lm1kLVRIRU1FX05BTUUtdGhlbWUubWQtY2hlY2tlZCAubWQtcmlwcGxlIHsgIGNvbG9yOiAne3tiYWNrZ3JvdW5kLTYwMH19JzsgfW1kLWNoZWNrYm94Lm1kLVRIRU1FX05BTUUtdGhlbWUubWQtY2hlY2tlZC5tZC1mb2N1c2VkIC5tZC1jb250YWluZXI6YmVmb3JlIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2FjY2VudC1jb2xvci0wLjI2fX0nOyB9bWQtY2hlY2tib3gubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtaWNvbiB7ICBib3JkZXItY29sb3I6ICd7e2ZvcmVncm91bmQtMn19JzsgfW1kLWNoZWNrYm94Lm1kLVRIRU1FX05BTUUtdGhlbWUubWQtY2hlY2tlZCAubWQtaWNvbiB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3thY2NlbnQtY29sb3ItMC44N319JzsgfW1kLWNoZWNrYm94Lm1kLVRIRU1FX05BTUUtdGhlbWUubWQtY2hlY2tlZCAubWQtaWNvbjphZnRlciB7ICBib3JkZXItY29sb3I6ICd7e2JhY2tncm91bmQtMjAwfX0nOyB9bWQtY2hlY2tib3gubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkubWQtcHJpbWFyeSAubWQtcmlwcGxlIHsgIGNvbG9yOiAne3twcmltYXJ5LTYwMH19JzsgfW1kLWNoZWNrYm94Lm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXByaW1hcnkubWQtY2hlY2tlZCAubWQtcmlwcGxlIHsgIGNvbG9yOiAne3tiYWNrZ3JvdW5kLTYwMH19JzsgfW1kLWNoZWNrYm94Lm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXByaW1hcnkgLm1kLWljb24geyAgYm9yZGVyLWNvbG9yOiAne3tmb3JlZ3JvdW5kLTJ9fSc7IH1tZC1jaGVja2JveC5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKS5tZC1wcmltYXJ5Lm1kLWNoZWNrZWQgLm1kLWljb24geyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7cHJpbWFyeS1jb2xvci0wLjg3fX0nOyB9bWQtY2hlY2tib3gubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkubWQtcHJpbWFyeS5tZC1jaGVja2VkLm1kLWZvY3VzZWQgLm1kLWNvbnRhaW5lcjpiZWZvcmUgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7cHJpbWFyeS1jb2xvci0wLjI2fX0nOyB9bWQtY2hlY2tib3gubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkubWQtcHJpbWFyeS5tZC1jaGVja2VkIC5tZC1pY29uOmFmdGVyIHsgIGJvcmRlci1jb2xvcjogJ3t7YmFja2dyb3VuZC0yMDB9fSc7IH1tZC1jaGVja2JveC5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKS5tZC13YXJuIC5tZC1yaXBwbGUgeyAgY29sb3I6ICd7e3dhcm4tNjAwfX0nOyB9bWQtY2hlY2tib3gubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkubWQtd2FybiAubWQtaWNvbiB7ICBib3JkZXItY29sb3I6ICd7e2ZvcmVncm91bmQtMn19JzsgfW1kLWNoZWNrYm94Lm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXdhcm4ubWQtY2hlY2tlZCAubWQtaWNvbiB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3t3YXJuLWNvbG9yLTAuODd9fSc7IH1tZC1jaGVja2JveC5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKS5tZC13YXJuLm1kLWNoZWNrZWQubWQtZm9jdXNlZDpub3QoW2Rpc2FibGVkXSkgLm1kLWNvbnRhaW5lcjpiZWZvcmUgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7d2Fybi1jb2xvci0wLjI2fX0nOyB9bWQtY2hlY2tib3gubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkubWQtd2Fybi5tZC1jaGVja2VkIC5tZC1pY29uOmFmdGVyIHsgIGJvcmRlci1jb2xvcjogJ3t7YmFja2dyb3VuZC0yMDB9fSc7IH1tZC1jaGVja2JveC5tZC1USEVNRV9OQU1FLXRoZW1lW2Rpc2FibGVkXSAubWQtaWNvbiB7ICBib3JkZXItY29sb3I6ICd7e2ZvcmVncm91bmQtM319JzsgfW1kLWNoZWNrYm94Lm1kLVRIRU1FX05BTUUtdGhlbWVbZGlzYWJsZWRdLm1kLWNoZWNrZWQgLm1kLWljb24geyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7Zm9yZWdyb3VuZC0zfX0nOyB9bWQtY2hlY2tib3gubWQtVEhFTUVfTkFNRS10aGVtZVtkaXNhYmxlZF0gLm1kLWxhYmVsIHsgIGNvbG9yOiAne3tmb3JlZ3JvdW5kLTN9fSc7IH1tZC1jb250ZW50Lm1kLVRIRU1FX05BTUUtdGhlbWUgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YmFja2dyb3VuZC1jb2xvcn19JzsgfW1kLWNoaXBzLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWNoaXBzIHsgIGJveC1zaGFkb3c6IDAgMXB4ICd7e2JhY2tncm91bmQtMzAwfX0nOyB9ICBtZC1jaGlwcy5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1jaGlwcy5tZC1mb2N1c2VkIHsgICAgYm94LXNoYWRvdzogMCAycHggJ3t7cHJpbWFyeS1jb2xvcn19JzsgfW1kLWNoaXBzLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWNoaXAgeyAgYmFja2dyb3VuZDogJ3t7YmFja2dyb3VuZC0zMDB9fSc7ICBjb2xvcjogJ3t7YmFja2dyb3VuZC04MDB9fSc7IH0gIG1kLWNoaXBzLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWNoaXAubWQtZm9jdXNlZCB7ICAgIGJhY2tncm91bmQ6ICd7e3ByaW1hcnktY29sb3J9fSc7ICAgIGNvbG9yOiAne3twcmltYXJ5LWNvbnRyYXN0fX0nOyB9ICAgIG1kLWNoaXBzLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWNoaXAubWQtZm9jdXNlZCBtZC1pY29uIHsgICAgICBjb2xvcjogJ3t7cHJpbWFyeS1jb250cmFzdH19JzsgfW1kLWNoaXBzLm1kLVRIRU1FX05BTUUtdGhlbWUgbWQtY2hpcC1yZW1vdmUgLm1kLWJ1dHRvbiBtZC1pY29uIHBhdGggeyAgZmlsbDogJ3t7YmFja2dyb3VuZC01MDB9fSc7IH0ubWQtY29udGFjdC1zdWdnZXN0aW9uIHNwYW4ubWQtY29udGFjdC1lbWFpbCB7ICBjb2xvcjogJ3t7YmFja2dyb3VuZC00MDB9fSc7IH1tZC1kaWFsb2cubWQtVEhFTUVfTkFNRS10aGVtZSB7ICBib3JkZXItcmFkaXVzOiA0cHg7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3tiYWNrZ3JvdW5kLWNvbG9yfX0nOyB9ICBtZC1kaWFsb2cubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1jb250ZW50LW92ZXJmbG93IC5tZC1hY3Rpb25zIHsgICAgYm9yZGVyLXRvcC1jb2xvcjogJ3t7Zm9yZWdyb3VuZC00fX0nOyB9bWQtZGl2aWRlci5tZC1USEVNRV9OQU1FLXRoZW1lIHsgIGJvcmRlci10b3AtY29sb3I6ICd7e2ZvcmVncm91bmQtNH19JzsgfW1kLWljb24ubWQtVEhFTUVfTkFNRS10aGVtZSB7ICBjb2xvcjogJ3t7Zm9yZWdyb3VuZC0yfX0nOyB9ICBtZC1pY29uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcHJpbWFyeSB7ICAgIGNvbG9yOiAne3twcmltYXJ5LWNvbG9yfX0nOyB9ICBtZC1pY29uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtYWNjZW50IHsgICAgY29sb3I6ICd7e2FjY2VudC1jb2xvcn19JzsgfSAgbWQtaWNvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXdhcm4geyAgICBjb2xvcjogJ3t7d2Fybi1jb2xvcn19JzsgfW1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1pbnB1dCB7ICBjb2xvcjogJ3t7Zm9yZWdyb3VuZC0xfX0nOyAgYm9yZGVyLWNvbG9yOiAne3tmb3JlZ3JvdW5kLTR9fSc7ICB0ZXh0LXNoYWRvdzogJ3t7Zm9yZWdyb3VuZC1zaGFkb3d9fSc7IH0gIG1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1pbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciwgbWQtaW5wdXQtY29udGFpbmVyLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWlucHV0OjotbW96LXBsYWNlaG9sZGVyLCBtZC1pbnB1dC1jb250YWluZXIubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtaW5wdXQ6LW1vei1wbGFjZWhvbGRlciwgbWQtaW5wdXQtY29udGFpbmVyLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWlucHV0Oi1tcy1pbnB1dC1wbGFjZWhvbGRlciB7ICAgIGNvbG9yOiAne3tmb3JlZ3JvdW5kLTN9fSc7IH1tZC1pbnB1dC1jb250YWluZXIubWQtVEhFTUVfTkFNRS10aGVtZSA+IG1kLWljb24geyAgY29sb3I6ICd7e2ZvcmVncm91bmQtMX19JzsgfW1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lIGxhYmVsLCBtZC1pbnB1dC1jb250YWluZXIubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtcGxhY2Vob2xkZXIgeyAgdGV4dC1zaGFkb3c6ICd7e2ZvcmVncm91bmQtc2hhZG93fX0nOyAgY29sb3I6ICd7e2ZvcmVncm91bmQtM319JzsgfW1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lIG5nLW1lc3NhZ2VzLCBtZC1pbnB1dC1jb250YWluZXIubWQtVEhFTUVfTkFNRS10aGVtZSBbbmctbWVzc2FnZV0sIG1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lIFtkYXRhLW5nLW1lc3NhZ2VdLCBtZC1pbnB1dC1jb250YWluZXIubWQtVEhFTUVfTkFNRS10aGVtZSBbeC1uZy1tZXNzYWdlXSB7ICBjb2xvcjogJ3t7d2Fybi01MDB9fSc7IH1tZC1pbnB1dC1jb250YWluZXIubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoLm1kLWlucHV0LWludmFsaWQpLm1kLWlucHV0LWhhcy12YWx1ZSBsYWJlbCB7ICBjb2xvcjogJ3t7Zm9yZWdyb3VuZC0yfX0nOyB9bWQtaW5wdXQtY29udGFpbmVyLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KC5tZC1pbnB1dC1pbnZhbGlkKS5tZC1pbnB1dC1mb2N1c2VkIC5tZC1pbnB1dCB7ICBib3JkZXItY29sb3I6ICd7e3ByaW1hcnktNTAwfX0nOyB9bWQtaW5wdXQtY29udGFpbmVyLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KC5tZC1pbnB1dC1pbnZhbGlkKS5tZC1pbnB1dC1mb2N1c2VkIGxhYmVsIHsgIGNvbG9yOiAne3twcmltYXJ5LTUwMH19JzsgfW1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdCgubWQtaW5wdXQtaW52YWxpZCkubWQtaW5wdXQtZm9jdXNlZCBtZC1pY29uIHsgIGNvbG9yOiAne3twcmltYXJ5LTUwMH19JzsgfW1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdCgubWQtaW5wdXQtaW52YWxpZCkubWQtaW5wdXQtZm9jdXNlZC5tZC1hY2NlbnQgLm1kLWlucHV0IHsgIGJvcmRlci1jb2xvcjogJ3t7YWNjZW50LTUwMH19JzsgfW1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdCgubWQtaW5wdXQtaW52YWxpZCkubWQtaW5wdXQtZm9jdXNlZC5tZC1hY2NlbnQgbGFiZWwgeyAgY29sb3I6ICd7e2FjY2VudC01MDB9fSc7IH1tZC1pbnB1dC1jb250YWluZXIubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoLm1kLWlucHV0LWludmFsaWQpLm1kLWlucHV0LWZvY3VzZWQubWQtd2FybiAubWQtaW5wdXQgeyAgYm9yZGVyLWNvbG9yOiAne3t3YXJuLTUwMH19JzsgfW1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdCgubWQtaW5wdXQtaW52YWxpZCkubWQtaW5wdXQtZm9jdXNlZC5tZC13YXJuIGxhYmVsIHsgIGNvbG9yOiAne3t3YXJuLTUwMH19JzsgfW1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWlucHV0LWludmFsaWQgLm1kLWlucHV0IHsgIGJvcmRlci1jb2xvcjogJ3t7d2Fybi01MDB9fSc7IH1tZC1pbnB1dC1jb250YWluZXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1pbnB1dC1pbnZhbGlkLm1kLWlucHV0LWZvY3VzZWQgbGFiZWwgeyAgY29sb3I6ICd7e3dhcm4tNTAwfX0nOyB9bWQtaW5wdXQtY29udGFpbmVyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtaW5wdXQtaW52YWxpZCBuZy1tZXNzYWdlLCBtZC1pbnB1dC1jb250YWluZXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1pbnB1dC1pbnZhbGlkIGRhdGEtbmctbWVzc2FnZSwgbWQtaW5wdXQtY29udGFpbmVyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtaW5wdXQtaW52YWxpZCB4LW5nLW1lc3NhZ2UsIG1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWlucHV0LWludmFsaWQgW25nLW1lc3NhZ2VdLCBtZC1pbnB1dC1jb250YWluZXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1pbnB1dC1pbnZhbGlkIFtkYXRhLW5nLW1lc3NhZ2VdLCBtZC1pbnB1dC1jb250YWluZXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1pbnB1dC1pbnZhbGlkIFt4LW5nLW1lc3NhZ2VdLCBtZC1pbnB1dC1jb250YWluZXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1pbnB1dC1pbnZhbGlkIC5tZC1jaGFyLWNvdW50ZXIgeyAgY29sb3I6ICd7e3dhcm4tNTAwfX0nOyB9bWQtaW5wdXQtY29udGFpbmVyLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWlucHV0W2Rpc2FibGVkXSwgW2Rpc2FibGVkXSBtZC1pbnB1dC1jb250YWluZXIubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtaW5wdXQgeyAgYm9yZGVyLWJvdHRvbS1jb2xvcjogdHJhbnNwYXJlbnQ7ICBjb2xvcjogJ3t7Zm9yZWdyb3VuZC0zfX0nOyAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAne3tmb3JlZ3JvdW5kLTN9fScgMCUsICd7e2ZvcmVncm91bmQtM319JyAzMyUsIHRyYW5zcGFyZW50IDAlKTsgIGJhY2tncm91bmQtaW1hZ2U6IC1tcy1saW5lYXItZ3JhZGllbnQobGVmdCwgdHJhbnNwYXJlbnQgMCUsICd7e2ZvcmVncm91bmQtM319JyAxMDAlKTsgfW1kLWxpc3QubWQtVEhFTUVfTkFNRS10aGVtZSBtZC1saXN0LWl0ZW0ubWQtMi1saW5lIC5tZC1saXN0LWl0ZW0tdGV4dCBoMywgbWQtbGlzdC5tZC1USEVNRV9OQU1FLXRoZW1lIG1kLWxpc3QtaXRlbS5tZC0yLWxpbmUgLm1kLWxpc3QtaXRlbS10ZXh0IGg0LCBtZC1saXN0Lm1kLVRIRU1FX05BTUUtdGhlbWUgbWQtbGlzdC1pdGVtLm1kLTMtbGluZSAubWQtbGlzdC1pdGVtLXRleHQgaDMsIG1kLWxpc3QubWQtVEhFTUVfTkFNRS10aGVtZSBtZC1saXN0LWl0ZW0ubWQtMy1saW5lIC5tZC1saXN0LWl0ZW0tdGV4dCBoNCB7ICBjb2xvcjogJ3t7Zm9yZWdyb3VuZC0xfX0nOyB9bWQtbGlzdC5tZC1USEVNRV9OQU1FLXRoZW1lIG1kLWxpc3QtaXRlbS5tZC0yLWxpbmUgLm1kLWxpc3QtaXRlbS10ZXh0IHAsIG1kLWxpc3QubWQtVEhFTUVfTkFNRS10aGVtZSBtZC1saXN0LWl0ZW0ubWQtMy1saW5lIC5tZC1saXN0LWl0ZW0tdGV4dCBwIHsgIGNvbG9yOiAne3tmb3JlZ3JvdW5kLTJ9fSc7IH1tZC1saXN0Lm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLXByb3h5LWZvY3VzLm1kLWZvY3VzZWQgZGl2Lm1kLW5vLXN0eWxlIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2JhY2tncm91bmQtMTAwfX0nOyB9bWQtbGlzdC5tZC1USEVNRV9OQU1FLXRoZW1lIG1kLWxpc3QtaXRlbSA+IG1kLWljb24geyAgY29sb3I6ICd7e2ZvcmVncm91bmQtMn19JzsgfSAgbWQtbGlzdC5tZC1USEVNRV9OQU1FLXRoZW1lIG1kLWxpc3QtaXRlbSA+IG1kLWljb24ubWQtaGlnaGxpZ2h0IHsgICAgY29sb3I6ICd7e3ByaW1hcnktY29sb3J9fSc7IH0gICAgbWQtbGlzdC5tZC1USEVNRV9OQU1FLXRoZW1lIG1kLWxpc3QtaXRlbSA+IG1kLWljb24ubWQtaGlnaGxpZ2h0Lm1kLWFjY2VudCB7ICAgICAgY29sb3I6ICd7e2FjY2VudC1jb2xvcn19JzsgfW1kLWxpc3QubWQtVEhFTUVfTkFNRS10aGVtZSBtZC1saXN0LWl0ZW0gYnV0dG9uIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2JhY2tncm91bmQtY29sb3J9fSc7IH0gIG1kLWxpc3QubWQtVEhFTUVfTkFNRS10aGVtZSBtZC1saXN0LWl0ZW0gYnV0dG9uLm1kLWJ1dHRvbjpub3QoW2Rpc2FibGVkXSk6aG92ZXIgeyAgICBiYWNrZ3JvdW5kLWNvbG9yOiAne3tiYWNrZ3JvdW5kLWNvbG9yfX0nOyB9bWQtbWVudS1jb250ZW50Lm1kLVRIRU1FX05BTUUtdGhlbWUgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YmFja2dyb3VuZC1jb2xvcn19JzsgfSAgbWQtbWVudS1jb250ZW50Lm1kLVRIRU1FX05BTUUtdGhlbWUgbWQtbWVudS1kaXZpZGVyIHsgICAgYmFja2dyb3VuZC1jb2xvcjogJ3t7Zm9yZWdyb3VuZC00fX0nOyB9bWQtcHJvZ3Jlc3MtY2lyY3VsYXIubWQtVEhFTUVfTkFNRS10aGVtZSB7ICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfSAgbWQtcHJvZ3Jlc3MtY2lyY3VsYXIubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtaW5uZXIgLm1kLWdhcCB7ICAgIGJvcmRlci10b3AtY29sb3I6ICd7e3ByaW1hcnktY29sb3J9fSc7ICAgIGJvcmRlci1ib3R0b20tY29sb3I6ICd7e3ByaW1hcnktY29sb3J9fSc7IH0gIG1kLXByb2dyZXNzLWNpcmN1bGFyLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWlubmVyIC5tZC1sZWZ0IC5tZC1oYWxmLWNpcmNsZSwgbWQtcHJvZ3Jlc3MtY2lyY3VsYXIubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtaW5uZXIgLm1kLXJpZ2h0IC5tZC1oYWxmLWNpcmNsZSB7ICAgIGJvcmRlci10b3AtY29sb3I6ICd7e3ByaW1hcnktY29sb3J9fSc7IH0gIG1kLXByb2dyZXNzLWNpcmN1bGFyLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWlubmVyIC5tZC1yaWdodCAubWQtaGFsZi1jaXJjbGUgeyAgICBib3JkZXItcmlnaHQtY29sb3I6ICd7e3ByaW1hcnktY29sb3J9fSc7IH0gIG1kLXByb2dyZXNzLWNpcmN1bGFyLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWlubmVyIC5tZC1sZWZ0IC5tZC1oYWxmLWNpcmNsZSB7ICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAne3twcmltYXJ5LWNvbG9yfX0nOyB9ICBtZC1wcm9ncmVzcy1jaXJjdWxhci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXdhcm4gLm1kLWlubmVyIC5tZC1nYXAgeyAgICBib3JkZXItdG9wLWNvbG9yOiAne3t3YXJuLWNvbG9yfX0nOyAgICBib3JkZXItYm90dG9tLWNvbG9yOiAne3t3YXJuLWNvbG9yfX0nOyB9ICBtZC1wcm9ncmVzcy1jaXJjdWxhci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXdhcm4gLm1kLWlubmVyIC5tZC1sZWZ0IC5tZC1oYWxmLWNpcmNsZSwgbWQtcHJvZ3Jlc3MtY2lyY3VsYXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuIC5tZC1pbm5lciAubWQtcmlnaHQgLm1kLWhhbGYtY2lyY2xlIHsgICAgYm9yZGVyLXRvcC1jb2xvcjogJ3t7d2Fybi1jb2xvcn19JzsgfSAgbWQtcHJvZ3Jlc3MtY2lyY3VsYXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuIC5tZC1pbm5lciAubWQtcmlnaHQgLm1kLWhhbGYtY2lyY2xlIHsgICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiAne3t3YXJuLWNvbG9yfX0nOyB9ICBtZC1wcm9ncmVzcy1jaXJjdWxhci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXdhcm4gLm1kLWlubmVyIC5tZC1sZWZ0IC5tZC1oYWxmLWNpcmNsZSB7ICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAne3t3YXJuLWNvbG9yfX0nOyB9ICBtZC1wcm9ncmVzcy1jaXJjdWxhci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWFjY2VudCAubWQtaW5uZXIgLm1kLWdhcCB7ICAgIGJvcmRlci10b3AtY29sb3I6ICd7e2FjY2VudC1jb2xvcn19JzsgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogJ3t7YWNjZW50LWNvbG9yfX0nOyB9ICBtZC1wcm9ncmVzcy1jaXJjdWxhci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWFjY2VudCAubWQtaW5uZXIgLm1kLWxlZnQgLm1kLWhhbGYtY2lyY2xlLCBtZC1wcm9ncmVzcy1jaXJjdWxhci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWFjY2VudCAubWQtaW5uZXIgLm1kLXJpZ2h0IC5tZC1oYWxmLWNpcmNsZSB7ICAgIGJvcmRlci10b3AtY29sb3I6ICd7e2FjY2VudC1jb2xvcn19JzsgfSAgbWQtcHJvZ3Jlc3MtY2lyY3VsYXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQgLm1kLWlubmVyIC5tZC1yaWdodCAubWQtaGFsZi1jaXJjbGUgeyAgICBib3JkZXItcmlnaHQtY29sb3I6ICd7e2FjY2VudC1jb2xvcn19JzsgfSAgbWQtcHJvZ3Jlc3MtY2lyY3VsYXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQgLm1kLWlubmVyIC5tZC1sZWZ0IC5tZC1oYWxmLWNpcmNsZSB7ICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAne3thY2NlbnQtY29sb3J9fSc7IH1tZC1wcm9ncmVzcy1saW5lYXIubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtY29udGFpbmVyIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e3ByaW1hcnktMTAwfX0nOyB9bWQtcHJvZ3Jlc3MtbGluZWFyLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWJhciB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3twcmltYXJ5LWNvbG9yfX0nOyB9bWQtcHJvZ3Jlc3MtbGluZWFyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2FybiAubWQtY29udGFpbmVyIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e3dhcm4tMTAwfX0nOyB9bWQtcHJvZ3Jlc3MtbGluZWFyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2FybiAubWQtYmFyIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e3dhcm4tY29sb3J9fSc7IH1tZC1wcm9ncmVzcy1saW5lYXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQgLm1kLWNvbnRhaW5lciB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3thY2NlbnQtMTAwfX0nOyB9bWQtcHJvZ3Jlc3MtbGluZWFyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtYWNjZW50IC5tZC1iYXIgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YWNjZW50LWNvbG9yfX0nOyB9bWQtcHJvZ3Jlc3MtbGluZWFyLm1kLVRIRU1FX05BTUUtdGhlbWVbbWQtbW9kZT1idWZmZXJdLm1kLXdhcm4gLm1kLWJhcjEgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7d2Fybi0xMDB9fSc7IH1tZC1wcm9ncmVzcy1saW5lYXIubWQtVEhFTUVfTkFNRS10aGVtZVttZC1tb2RlPWJ1ZmZlcl0ubWQtd2FybiAubWQtZGFzaGVkOmJlZm9yZSB7ICBiYWNrZ3JvdW5kOiByYWRpYWwtZ3JhZGllbnQoJ3t7d2Fybi0xMDB9fScgMCUsICd7e3dhcm4tMTAwfX0nIDE2JSwgdHJhbnNwYXJlbnQgNDIlKTsgfW1kLXByb2dyZXNzLWxpbmVhci5tZC1USEVNRV9OQU1FLXRoZW1lW21kLW1vZGU9YnVmZmVyXS5tZC1hY2NlbnQgLm1kLWJhcjEgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YWNjZW50LTEwMH19JzsgfW1kLXByb2dyZXNzLWxpbmVhci5tZC1USEVNRV9OQU1FLXRoZW1lW21kLW1vZGU9YnVmZmVyXS5tZC1hY2NlbnQgLm1kLWRhc2hlZDpiZWZvcmUgeyAgYmFja2dyb3VuZDogcmFkaWFsLWdyYWRpZW50KCd7e2FjY2VudC0xMDB9fScgMCUsICd7e2FjY2VudC0xMDB9fScgMTYlLCB0cmFuc3BhcmVudCA0MiUpOyB9bWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLW9mZiB7ICBib3JkZXItY29sb3I6ICd7e2ZvcmVncm91bmQtMn19JzsgfW1kLXJhZGlvLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1vbiB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3thY2NlbnQtY29sb3ItMC44N319JzsgfW1kLXJhZGlvLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWNoZWNrZWQgLm1kLW9mZiB7ICBib3JkZXItY29sb3I6ICd7e2FjY2VudC1jb2xvci0wLjg3fX0nOyB9bWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtY2hlY2tlZCAubWQtaW5rLXJpcHBsZSB7ICBjb2xvcjogJ3t7YWNjZW50LWNvbG9yLTAuODd9fSc7IH1tZC1yYWRpby1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtY29udGFpbmVyIC5tZC1yaXBwbGUgeyAgY29sb3I6ICd7e2FjY2VudC02MDB9fSc7IH1tZC1yYWRpby1ncm91cC5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKSAubWQtcHJpbWFyeSAubWQtb24sIG1kLXJhZGlvLWdyb3VwLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXByaW1hcnkgLm1kLW9uLCBtZC1yYWRpby1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkgLm1kLXByaW1hcnkgLm1kLW9uLCBtZC1yYWRpby1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkubWQtcHJpbWFyeSAubWQtb24geyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7cHJpbWFyeS1jb2xvci0wLjg3fX0nOyB9bWQtcmFkaW8tZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkgLm1kLXByaW1hcnkgLm1kLWNoZWNrZWQgLm1kLW9mZiwgbWQtcmFkaW8tZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkgLm1kLXByaW1hcnkubWQtY2hlY2tlZCAubWQtb2ZmLCBtZC1yYWRpby1ncm91cC5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKS5tZC1wcmltYXJ5IC5tZC1jaGVja2VkIC5tZC1vZmYsIG1kLXJhZGlvLWdyb3VwLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXByaW1hcnkubWQtY2hlY2tlZCAubWQtb2ZmLCBtZC1yYWRpby1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkgLm1kLXByaW1hcnkgLm1kLWNoZWNrZWQgLm1kLW9mZiwgbWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pIC5tZC1wcmltYXJ5Lm1kLWNoZWNrZWQgLm1kLW9mZiwgbWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXByaW1hcnkgLm1kLWNoZWNrZWQgLm1kLW9mZiwgbWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXByaW1hcnkubWQtY2hlY2tlZCAubWQtb2ZmIHsgIGJvcmRlci1jb2xvcjogJ3t7cHJpbWFyeS1jb2xvci0wLjg3fX0nOyB9bWQtcmFkaW8tZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkgLm1kLXByaW1hcnkgLm1kLWNoZWNrZWQgLm1kLWluay1yaXBwbGUsIG1kLXJhZGlvLWdyb3VwLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pIC5tZC1wcmltYXJ5Lm1kLWNoZWNrZWQgLm1kLWluay1yaXBwbGUsIG1kLXJhZGlvLWdyb3VwLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXByaW1hcnkgLm1kLWNoZWNrZWQgLm1kLWluay1yaXBwbGUsIG1kLXJhZGlvLWdyb3VwLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXByaW1hcnkubWQtY2hlY2tlZCAubWQtaW5rLXJpcHBsZSwgbWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pIC5tZC1wcmltYXJ5IC5tZC1jaGVja2VkIC5tZC1pbmstcmlwcGxlLCBtZC1yYWRpby1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkgLm1kLXByaW1hcnkubWQtY2hlY2tlZCAubWQtaW5rLXJpcHBsZSwgbWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXByaW1hcnkgLm1kLWNoZWNrZWQgLm1kLWluay1yaXBwbGUsIG1kLXJhZGlvLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKS5tZC1wcmltYXJ5Lm1kLWNoZWNrZWQgLm1kLWluay1yaXBwbGUgeyAgY29sb3I6ICd7e3ByaW1hcnktY29sb3ItMC44N319JzsgfW1kLXJhZGlvLWdyb3VwLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pIC5tZC1wcmltYXJ5IC5tZC1jb250YWluZXIgLm1kLXJpcHBsZSwgbWQtcmFkaW8tZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkubWQtcHJpbWFyeSAubWQtY29udGFpbmVyIC5tZC1yaXBwbGUsIG1kLXJhZGlvLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKSAubWQtcHJpbWFyeSAubWQtY29udGFpbmVyIC5tZC1yaXBwbGUsIG1kLXJhZGlvLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKS5tZC1wcmltYXJ5IC5tZC1jb250YWluZXIgLm1kLXJpcHBsZSB7ICBjb2xvcjogJ3t7cHJpbWFyeS02MDB9fSc7IH1tZC1yYWRpby1ncm91cC5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKSAubWQtd2FybiAubWQtb24sIG1kLXJhZGlvLWdyb3VwLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXdhcm4gLm1kLW9uLCBtZC1yYWRpby1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkgLm1kLXdhcm4gLm1kLW9uLCBtZC1yYWRpby1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkubWQtd2FybiAubWQtb24geyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7d2Fybi1jb2xvci0wLjg3fX0nOyB9bWQtcmFkaW8tZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkgLm1kLXdhcm4gLm1kLWNoZWNrZWQgLm1kLW9mZiwgbWQtcmFkaW8tZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkgLm1kLXdhcm4ubWQtY2hlY2tlZCAubWQtb2ZmLCBtZC1yYWRpby1ncm91cC5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKS5tZC13YXJuIC5tZC1jaGVja2VkIC5tZC1vZmYsIG1kLXJhZGlvLWdyb3VwLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXdhcm4ubWQtY2hlY2tlZCAubWQtb2ZmLCBtZC1yYWRpby1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkgLm1kLXdhcm4gLm1kLWNoZWNrZWQgLm1kLW9mZiwgbWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pIC5tZC13YXJuLm1kLWNoZWNrZWQgLm1kLW9mZiwgbWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXdhcm4gLm1kLWNoZWNrZWQgLm1kLW9mZiwgbWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXdhcm4ubWQtY2hlY2tlZCAubWQtb2ZmIHsgIGJvcmRlci1jb2xvcjogJ3t7d2Fybi1jb2xvci0wLjg3fX0nOyB9bWQtcmFkaW8tZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkgLm1kLXdhcm4gLm1kLWNoZWNrZWQgLm1kLWluay1yaXBwbGUsIG1kLXJhZGlvLWdyb3VwLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pIC5tZC13YXJuLm1kLWNoZWNrZWQgLm1kLWluay1yaXBwbGUsIG1kLXJhZGlvLWdyb3VwLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXdhcm4gLm1kLWNoZWNrZWQgLm1kLWluay1yaXBwbGUsIG1kLXJhZGlvLWdyb3VwLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXdhcm4ubWQtY2hlY2tlZCAubWQtaW5rLXJpcHBsZSwgbWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pIC5tZC13YXJuIC5tZC1jaGVja2VkIC5tZC1pbmstcmlwcGxlLCBtZC1yYWRpby1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkgLm1kLXdhcm4ubWQtY2hlY2tlZCAubWQtaW5rLXJpcHBsZSwgbWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXdhcm4gLm1kLWNoZWNrZWQgLm1kLWluay1yaXBwbGUsIG1kLXJhZGlvLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKS5tZC13YXJuLm1kLWNoZWNrZWQgLm1kLWluay1yaXBwbGUgeyAgY29sb3I6ICd7e3dhcm4tY29sb3ItMC44N319JzsgfW1kLXJhZGlvLWdyb3VwLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pIC5tZC13YXJuIC5tZC1jb250YWluZXIgLm1kLXJpcHBsZSwgbWQtcmFkaW8tZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkubWQtd2FybiAubWQtY29udGFpbmVyIC5tZC1yaXBwbGUsIG1kLXJhZGlvLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKSAubWQtd2FybiAubWQtY29udGFpbmVyIC5tZC1yaXBwbGUsIG1kLXJhZGlvLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKS5tZC13YXJuIC5tZC1jb250YWluZXIgLm1kLXJpcHBsZSB7ICBjb2xvcjogJ3t7d2Fybi02MDB9fSc7IH1tZC1yYWRpby1ncm91cC5tZC1USEVNRV9OQU1FLXRoZW1lW2Rpc2FibGVkXSwgbWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWVbZGlzYWJsZWRdIHsgIGNvbG9yOiAne3tmb3JlZ3JvdW5kLTN9fSc7IH0gIG1kLXJhZGlvLWdyb3VwLm1kLVRIRU1FX05BTUUtdGhlbWVbZGlzYWJsZWRdIC5tZC1jb250YWluZXIgLm1kLW9mZiwgbWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWVbZGlzYWJsZWRdIC5tZC1jb250YWluZXIgLm1kLW9mZiB7ICAgIGJvcmRlci1jb2xvcjogJ3t7Zm9yZWdyb3VuZC0zfX0nOyB9ICBtZC1yYWRpby1ncm91cC5tZC1USEVNRV9OQU1FLXRoZW1lW2Rpc2FibGVkXSAubWQtY29udGFpbmVyIC5tZC1vbiwgbWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWVbZGlzYWJsZWRdIC5tZC1jb250YWluZXIgLm1kLW9uIHsgICAgYm9yZGVyLWNvbG9yOiAne3tmb3JlZ3JvdW5kLTN9fSc7IH1tZC1yYWRpby1ncm91cC5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWZvY3VzZWQ6bm90KDplbXB0eSkgLm1kLWNoZWNrZWQgLm1kLWNvbnRhaW5lcjpiZWZvcmUgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YWNjZW50LWNvbG9yLTAuMjZ9fSc7IH1tZC1yYWRpby1ncm91cC5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWZvY3VzZWQ6bm90KDplbXB0eSkgLm1kLWNoZWNrZWQ6bm90KFtkaXNhYmxlZF0pLm1kLXByaW1hcnkgLm1kLWNvbnRhaW5lcjpiZWZvcmUgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7cHJpbWFyeS1jb2xvci0wLjI2fX0nOyB9bWQtcmFkaW8tZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1mb2N1c2VkOm5vdCg6ZW1wdHkpIC5tZC1jaGVja2VkLm1kLXByaW1hcnkgLm1kLWNvbnRhaW5lcjpiZWZvcmUgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7d2Fybi1jb2xvci0wLjI2fX0nOyB9bWQtc2VsZWN0Lm1kLVRIRU1FX05BTUUtdGhlbWUubmctaW52YWxpZC5uZy1kaXJ0eSAubWQtc2VsZWN0LWxhYmVsIHsgIGNvbG9yOiAne3t3YXJuLTUwMH19JyAhaW1wb3J0YW50OyAgYm9yZGVyLWJvdHRvbS1jb2xvcjogJ3t7d2Fybi01MDB9fScgIWltcG9ydGFudDsgfW1kLXNlbGVjdC5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKTpmb2N1cyAubWQtc2VsZWN0LWxhYmVsIHsgIGJvcmRlci1ib3R0b20tY29sb3I6ICd7e3ByaW1hcnktY29sb3J9fSc7ICBjb2xvcjogJ3t7IGZvcmVncm91bmQtMSB9fSc7IH0gIG1kLXNlbGVjdC5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKTpmb2N1cyAubWQtc2VsZWN0LWxhYmVsLm1kLXBsYWNlaG9sZGVyIHsgICAgY29sb3I6ICd7eyBmb3JlZ3JvdW5kLTEgfX0nOyB9bWQtc2VsZWN0Lm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pOmZvY3VzLm1kLWFjY2VudCAubWQtc2VsZWN0LWxhYmVsIHsgIGJvcmRlci1ib3R0b20tY29sb3I6ICd7e2FjY2VudC1jb2xvcn19JzsgfW1kLXNlbGVjdC5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKTpmb2N1cy5tZC13YXJuIC5tZC1zZWxlY3QtbGFiZWwgeyAgYm9yZGVyLWJvdHRvbS1jb2xvcjogJ3t7d2Fybi1jb2xvcn19JzsgfW1kLXNlbGVjdC5tZC1USEVNRV9OQU1FLXRoZW1lW2Rpc2FibGVkXSAubWQtc2VsZWN0LWxhYmVsIHsgIGNvbG9yOiAne3tmb3JlZ3JvdW5kLTN9fSc7IH0gIG1kLXNlbGVjdC5tZC1USEVNRV9OQU1FLXRoZW1lW2Rpc2FibGVkXSAubWQtc2VsZWN0LWxhYmVsLm1kLXBsYWNlaG9sZGVyIHsgICAgY29sb3I6ICd7e2ZvcmVncm91bmQtM319JzsgfW1kLXNlbGVjdC5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1zZWxlY3QtbGFiZWwgeyAgYm9yZGVyLWJvdHRvbS1jb2xvcjogJ3t7Zm9yZWdyb3VuZC00fX0nOyB9ICBtZC1zZWxlY3QubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtc2VsZWN0LWxhYmVsLm1kLXBsYWNlaG9sZGVyIHsgICAgY29sb3I6ICd7e2ZvcmVncm91bmQtMn19JzsgfW1kLXNlbGVjdC1tZW51Lm1kLVRIRU1FX05BTUUtdGhlbWUgbWQtb3B0Z3JvdXAgeyAgY29sb3I6ICd7e2ZvcmVncm91bmQtMn19JzsgfSAgbWQtc2VsZWN0LW1lbnUubWQtVEhFTUVfTkFNRS10aGVtZSBtZC1vcHRncm91cCBtZC1vcHRpb24geyAgICBjb2xvcjogJ3t7Zm9yZWdyb3VuZC0xfX0nOyB9bWQtc2VsZWN0LW1lbnUubWQtVEhFTUVfTkFNRS10aGVtZSBtZC1vcHRpb25bc2VsZWN0ZWRdIHsgIGNvbG9yOiAne3twcmltYXJ5LTUwMH19JzsgfSAgbWQtc2VsZWN0LW1lbnUubWQtVEhFTUVfTkFNRS10aGVtZSBtZC1vcHRpb25bc2VsZWN0ZWRdOmZvY3VzIHsgICAgY29sb3I6ICd7e3ByaW1hcnktNjAwfX0nOyB9ICBtZC1zZWxlY3QtbWVudS5tZC1USEVNRV9OQU1FLXRoZW1lIG1kLW9wdGlvbltzZWxlY3RlZF0ubWQtYWNjZW50IHsgICAgY29sb3I6ICd7e2FjY2VudC01MDB9fSc7IH0gICAgbWQtc2VsZWN0LW1lbnUubWQtVEhFTUVfTkFNRS10aGVtZSBtZC1vcHRpb25bc2VsZWN0ZWRdLm1kLWFjY2VudDpmb2N1cyB7ICAgICAgY29sb3I6ICd7e2FjY2VudC02MDB9fSc7IH1tZC1zZWxlY3QtbWVudS5tZC1USEVNRV9OQU1FLXRoZW1lIG1kLW9wdGlvbjpmb2N1czpub3QoW3NlbGVjdGVkXSkgeyAgYmFja2dyb3VuZDogJ3t7YmFja2dyb3VuZC0yMDB9fSc7IH1tZC1zaWRlbmF2Lm1kLVRIRU1FX05BTUUtdGhlbWUgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YmFja2dyb3VuZC1jb2xvcn19JzsgfW1kLXNsaWRlci5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC10cmFjayB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3tmb3JlZ3JvdW5kLTN9fSc7IH1tZC1zbGlkZXIubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtdHJhY2stdGlja3MgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7Zm9yZWdyb3VuZC00fX0nOyB9bWQtc2xpZGVyLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWZvY3VzLXRodW1iIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2ZvcmVncm91bmQtMn19JzsgfW1kLXNsaWRlci5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1mb2N1cy1yaW5nIHsgIGJvcmRlci1jb2xvcjogJ3t7Zm9yZWdyb3VuZC00fX0nOyB9bWQtc2xpZGVyLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWRpc2FibGVkLXRodW1iIHsgIGJvcmRlci1jb2xvcjogJ3t7YmFja2dyb3VuZC1jb2xvcn19JzsgfW1kLXNsaWRlci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLW1pbiAubWQtdGh1bWI6YWZ0ZXIgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YmFja2dyb3VuZC1jb2xvcn19JzsgfW1kLXNsaWRlci5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC10cmFjay5tZC10cmFjay1maWxsIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2FjY2VudC1jb2xvcn19JzsgfW1kLXNsaWRlci5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC10aHVtYjphZnRlciB7ICBib3JkZXItY29sb3I6ICd7e2FjY2VudC1jb2xvcn19JzsgIGJhY2tncm91bmQtY29sb3I6ICd7e2FjY2VudC1jb2xvcn19JzsgfW1kLXNsaWRlci5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1zaWduIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2FjY2VudC1jb2xvcn19JzsgfSAgbWQtc2xpZGVyLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLXNpZ246YWZ0ZXIgeyAgICBib3JkZXItdG9wLWNvbG9yOiAne3thY2NlbnQtY29sb3J9fSc7IH1tZC1zbGlkZXIubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtdGh1bWItdGV4dCB7ICBjb2xvcjogJ3t7YWNjZW50LWNvbnRyYXN0fX0nOyB9bWQtc2xpZGVyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2FybiAubWQtdHJhY2subWQtdHJhY2stZmlsbCB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3t3YXJuLWNvbG9yfX0nOyB9bWQtc2xpZGVyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2FybiAubWQtdGh1bWI6YWZ0ZXIgeyAgYm9yZGVyLWNvbG9yOiAne3t3YXJuLWNvbG9yfX0nOyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7d2Fybi1jb2xvcn19JzsgfW1kLXNsaWRlci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXdhcm4gLm1kLXNpZ24geyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7d2Fybi1jb2xvcn19JzsgfSAgbWQtc2xpZGVyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2FybiAubWQtc2lnbjphZnRlciB7ICAgIGJvcmRlci10b3AtY29sb3I6ICd7e3dhcm4tY29sb3J9fSc7IH1tZC1zbGlkZXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuIC5tZC10aHVtYi10ZXh0IHsgIGNvbG9yOiAne3t3YXJuLWNvbnRyYXN0fX0nOyB9bWQtc2xpZGVyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcHJpbWFyeSAubWQtdHJhY2subWQtdHJhY2stZmlsbCB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3twcmltYXJ5LWNvbG9yfX0nOyB9bWQtc2xpZGVyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcHJpbWFyeSAubWQtdGh1bWI6YWZ0ZXIgeyAgYm9yZGVyLWNvbG9yOiAne3twcmltYXJ5LWNvbG9yfX0nOyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7cHJpbWFyeS1jb2xvcn19JzsgfW1kLXNsaWRlci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXByaW1hcnkgLm1kLXNpZ24geyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7cHJpbWFyeS1jb2xvcn19JzsgfSAgbWQtc2xpZGVyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcHJpbWFyeSAubWQtc2lnbjphZnRlciB7ICAgIGJvcmRlci10b3AtY29sb3I6ICd7e3ByaW1hcnktY29sb3J9fSc7IH1tZC1zbGlkZXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5IC5tZC10aHVtYi10ZXh0IHsgIGNvbG9yOiAne3twcmltYXJ5LWNvbnRyYXN0fX0nOyB9bWQtc2xpZGVyLm1kLVRIRU1FX05BTUUtdGhlbWVbZGlzYWJsZWRdIC5tZC10aHVtYjphZnRlciB7ICBib3JkZXItY29sb3I6ICd7e2ZvcmVncm91bmQtM319JzsgfW1kLXNsaWRlci5tZC1USEVNRV9OQU1FLXRoZW1lW2Rpc2FibGVkXTpub3QoLm1kLW1pbikgLm1kLXRodW1iOmFmdGVyIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2ZvcmVncm91bmQtM319JzsgfS5tZC1zdWJoZWFkZXIubWQtVEhFTUVfTkFNRS10aGVtZSB7ICBjb2xvcjogJ3t7IGZvcmVncm91bmQtMi0wLjIzIH19JzsgIGJhY2tncm91bmQtY29sb3I6ICd7e2JhY2tncm91bmQtY29sb3J9fSc7IH0gIC5tZC1zdWJoZWFkZXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5IHsgICAgY29sb3I6ICd7e3ByaW1hcnktY29sb3J9fSc7IH0gIC5tZC1zdWJoZWFkZXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQgeyAgICBjb2xvcjogJ3t7YWNjZW50LWNvbG9yfX0nOyB9ICAubWQtc3ViaGVhZGVyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2FybiB7ICAgIGNvbG9yOiAne3t3YXJuLWNvbG9yfX0nOyB9bWQtc3dpdGNoLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLXRodW1iIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2JhY2tncm91bmQtNTB9fSc7IH1tZC1zd2l0Y2gubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtYmFyIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2JhY2tncm91bmQtNTAwfX0nOyB9bWQtc3dpdGNoLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtY2hlY2tlZCAubWQtdGh1bWIgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YWNjZW50LWNvbG9yfX0nOyB9bWQtc3dpdGNoLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtY2hlY2tlZCAubWQtYmFyIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2FjY2VudC1jb2xvci0wLjV9fSc7IH1tZC1zd2l0Y2gubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1jaGVja2VkLm1kLWZvY3VzZWQgLm1kLXRodW1iOmJlZm9yZSB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3thY2NlbnQtY29sb3ItMC4yNn19JzsgfW1kLXN3aXRjaC5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWNoZWNrZWQubWQtcHJpbWFyeSAubWQtdGh1bWIgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7cHJpbWFyeS1jb2xvcn19JzsgfW1kLXN3aXRjaC5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWNoZWNrZWQubWQtcHJpbWFyeSAubWQtYmFyIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e3ByaW1hcnktY29sb3ItMC41fX0nOyB9bWQtc3dpdGNoLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtY2hlY2tlZC5tZC1wcmltYXJ5Lm1kLWZvY3VzZWQgLm1kLXRodW1iOmJlZm9yZSB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3twcmltYXJ5LWNvbG9yLTAuMjZ9fSc7IH1tZC1zd2l0Y2gubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1jaGVja2VkLm1kLXdhcm4gLm1kLXRodW1iIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e3dhcm4tY29sb3J9fSc7IH1tZC1zd2l0Y2gubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1jaGVja2VkLm1kLXdhcm4gLm1kLWJhciB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3t3YXJuLWNvbG9yLTAuNX19JzsgfW1kLXN3aXRjaC5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWNoZWNrZWQubWQtd2Fybi5tZC1mb2N1c2VkIC5tZC10aHVtYjpiZWZvcmUgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7d2Fybi1jb2xvci0wLjI2fX0nOyB9bWQtc3dpdGNoLm1kLVRIRU1FX05BTUUtdGhlbWVbZGlzYWJsZWRdIC5tZC10aHVtYiB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3tiYWNrZ3JvdW5kLTQwMH19JzsgfW1kLXN3aXRjaC5tZC1USEVNRV9OQU1FLXRoZW1lW2Rpc2FibGVkXSAubWQtYmFyIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2ZvcmVncm91bmQtNH19JzsgfW1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZSBtZC10YWJzLXdyYXBwZXIgeyAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7ICBib3JkZXItY29sb3I6ICd7e2ZvcmVncm91bmQtNH19JzsgfW1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtcGFnaW5hdG9yIG1kLWljb24geyAgY29sb3I6ICd7e3ByaW1hcnktY29sb3J9fSc7IH1tZC10YWJzLm1kLVRIRU1FX05BTUUtdGhlbWUgbWQtaW5rLWJhciB7ICBjb2xvcjogJ3t7YWNjZW50LWNvbG9yfX0nOyAgYmFja2dyb3VuZDogJ3t7YWNjZW50LWNvbG9yfX0nOyB9bWQtdGFicy5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC10YWIgeyAgY29sb3I6ICd7e2ZvcmVncm91bmQtMn19JzsgfSAgbWQtdGFicy5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC10YWJbZGlzYWJsZWRdIHsgICAgY29sb3I6ICd7e2ZvcmVncm91bmQtM319JzsgfSAgbWQtdGFicy5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC10YWIubWQtYWN0aXZlLCBtZC10YWJzLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLXRhYi5tZC1mb2N1c2VkIHsgICAgY29sb3I6ICd7e3ByaW1hcnktY29sb3J9fSc7IH0gIG1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtdGFiLm1kLWZvY3VzZWQgeyAgICBiYWNrZ3JvdW5kOiAne3twcmltYXJ5LWNvbG9yLTAuMX19JzsgfSAgbWQtdGFicy5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC10YWIgLm1kLXJpcHBsZS1jb250YWluZXIgeyAgICBjb2xvcjogJ3t7YWNjZW50LTEwMH19JzsgfW1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQgbWQtdGFicy13cmFwcGVyIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2FjY2VudC1jb2xvcn19JzsgfW1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQgbWQtdGFiLWl0ZW06bm90KFtkaXNhYmxlZF0pIHsgIGNvbG9yOiAne3thY2NlbnQtMTAwfX0nOyB9ICBtZC10YWJzLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtYWNjZW50IG1kLXRhYi1pdGVtOm5vdChbZGlzYWJsZWRdKS5tZC1hY3RpdmUsIG1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQgbWQtdGFiLWl0ZW06bm90KFtkaXNhYmxlZF0pLm1kLWZvY3VzZWQgeyAgICBjb2xvcjogJ3t7YWNjZW50LWNvbnRyYXN0fX0nOyB9ICBtZC10YWJzLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtYWNjZW50IG1kLXRhYi1pdGVtOm5vdChbZGlzYWJsZWRdKS5tZC1mb2N1c2VkIHsgICAgYmFja2dyb3VuZDogJ3t7YWNjZW50LWNvbnRyYXN0LTAuMX19JzsgfW1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQgbWQtaW5rLWJhciB7ICBjb2xvcjogJ3t7cHJpbWFyeS02MDAtMX19JzsgIGJhY2tncm91bmQ6ICd7e3ByaW1hcnktNjAwLTF9fSc7IH1tZC10YWJzLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcHJpbWFyeSBtZC10YWJzLXdyYXBwZXIgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7cHJpbWFyeS1jb2xvcn19JzsgfW1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5IG1kLXRhYi1pdGVtOm5vdChbZGlzYWJsZWRdKSB7ICBjb2xvcjogJ3t7cHJpbWFyeS0xMDB9fSc7IH0gIG1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5IG1kLXRhYi1pdGVtOm5vdChbZGlzYWJsZWRdKS5tZC1hY3RpdmUsIG1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5IG1kLXRhYi1pdGVtOm5vdChbZGlzYWJsZWRdKS5tZC1mb2N1c2VkIHsgICAgY29sb3I6ICd7e3ByaW1hcnktY29udHJhc3R9fSc7IH0gIG1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5IG1kLXRhYi1pdGVtOm5vdChbZGlzYWJsZWRdKS5tZC1mb2N1c2VkIHsgICAgYmFja2dyb3VuZDogJ3t7cHJpbWFyeS1jb250cmFzdC0wLjF9fSc7IH1tZC10YWJzLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2FybiBtZC10YWJzLXdyYXBwZXIgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7d2Fybi1jb2xvcn19JzsgfW1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuIG1kLXRhYi1pdGVtOm5vdChbZGlzYWJsZWRdKSB7ICBjb2xvcjogJ3t7d2Fybi0xMDB9fSc7IH0gIG1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuIG1kLXRhYi1pdGVtOm5vdChbZGlzYWJsZWRdKS5tZC1hY3RpdmUsIG1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuIG1kLXRhYi1pdGVtOm5vdChbZGlzYWJsZWRdKS5tZC1mb2N1c2VkIHsgICAgY29sb3I6ICd7e3dhcm4tY29udHJhc3R9fSc7IH0gIG1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuIG1kLXRhYi1pdGVtOm5vdChbZGlzYWJsZWRdKS5tZC1mb2N1c2VkIHsgICAgYmFja2dyb3VuZDogJ3t7d2Fybi1jb250cmFzdC0wLjF9fSc7IH1tZC10b29sYmFyID4gbWQtdGFicy5tZC1USEVNRV9OQU1FLXRoZW1lIG1kLXRhYnMtd3JhcHBlciB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3twcmltYXJ5LWNvbG9yfX0nOyB9bWQtdG9vbGJhciA+IG1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZSBtZC10YWItaXRlbTpub3QoW2Rpc2FibGVkXSkgeyAgY29sb3I6ICd7e3ByaW1hcnktMTAwfX0nOyB9ICBtZC10b29sYmFyID4gbWQtdGFicy5tZC1USEVNRV9OQU1FLXRoZW1lIG1kLXRhYi1pdGVtOm5vdChbZGlzYWJsZWRdKS5tZC1hY3RpdmUsIG1kLXRvb2xiYXIgPiBtZC10YWJzLm1kLVRIRU1FX05BTUUtdGhlbWUgbWQtdGFiLWl0ZW06bm90KFtkaXNhYmxlZF0pLm1kLWZvY3VzZWQgeyAgICBjb2xvcjogJ3t7cHJpbWFyeS1jb250cmFzdH19JzsgfSAgbWQtdG9vbGJhciA+IG1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZSBtZC10YWItaXRlbTpub3QoW2Rpc2FibGVkXSkubWQtZm9jdXNlZCB7ICAgIGJhY2tncm91bmQ6ICd7e3ByaW1hcnktY29udHJhc3QtMC4xfX0nOyB9bWQtdG9vbGJhci5tZC1hY2NlbnQgPiBtZC10YWJzLm1kLVRIRU1FX05BTUUtdGhlbWUgbWQtdGFicy13cmFwcGVyIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2FjY2VudC1jb2xvcn19JzsgfW1kLXRvb2xiYXIubWQtYWNjZW50ID4gbWQtdGFicy5tZC1USEVNRV9OQU1FLXRoZW1lIG1kLXRhYi1pdGVtOm5vdChbZGlzYWJsZWRdKSB7ICBjb2xvcjogJ3t7YWNjZW50LTEwMH19JzsgfSAgbWQtdG9vbGJhci5tZC1hY2NlbnQgPiBtZC10YWJzLm1kLVRIRU1FX05BTUUtdGhlbWUgbWQtdGFiLWl0ZW06bm90KFtkaXNhYmxlZF0pLm1kLWFjdGl2ZSwgbWQtdG9vbGJhci5tZC1hY2NlbnQgPiBtZC10YWJzLm1kLVRIRU1FX05BTUUtdGhlbWUgbWQtdGFiLWl0ZW06bm90KFtkaXNhYmxlZF0pLm1kLWZvY3VzZWQgeyAgICBjb2xvcjogJ3t7YWNjZW50LWNvbnRyYXN0fX0nOyB9ICBtZC10b29sYmFyLm1kLWFjY2VudCA+IG1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZSBtZC10YWItaXRlbTpub3QoW2Rpc2FibGVkXSkubWQtZm9jdXNlZCB7ICAgIGJhY2tncm91bmQ6ICd7e2FjY2VudC1jb250cmFzdC0wLjF9fSc7IH1tZC10b29sYmFyLm1kLWFjY2VudCA+IG1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZSBtZC1pbmstYmFyIHsgIGNvbG9yOiAne3twcmltYXJ5LTYwMC0xfX0nOyAgYmFja2dyb3VuZDogJ3t7cHJpbWFyeS02MDAtMX19JzsgfW1kLXRvb2xiYXIubWQtd2FybiA+IG1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZSBtZC10YWJzLXdyYXBwZXIgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7d2Fybi1jb2xvcn19JzsgfW1kLXRvb2xiYXIubWQtd2FybiA+IG1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZSBtZC10YWItaXRlbTpub3QoW2Rpc2FibGVkXSkgeyAgY29sb3I6ICd7e3dhcm4tMTAwfX0nOyB9ICBtZC10b29sYmFyLm1kLXdhcm4gPiBtZC10YWJzLm1kLVRIRU1FX05BTUUtdGhlbWUgbWQtdGFiLWl0ZW06bm90KFtkaXNhYmxlZF0pLm1kLWFjdGl2ZSwgbWQtdG9vbGJhci5tZC13YXJuID4gbWQtdGFicy5tZC1USEVNRV9OQU1FLXRoZW1lIG1kLXRhYi1pdGVtOm5vdChbZGlzYWJsZWRdKS5tZC1mb2N1c2VkIHsgICAgY29sb3I6ICd7e3dhcm4tY29udHJhc3R9fSc7IH0gIG1kLXRvb2xiYXIubWQtd2FybiA+IG1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZSBtZC10YWItaXRlbTpub3QoW2Rpc2FibGVkXSkubWQtZm9jdXNlZCB7ICAgIGJhY2tncm91bmQ6ICd7e3dhcm4tY29udHJhc3QtMC4xfX0nOyB9bWQtdG9hc3QubWQtVEhFTUVfTkFNRS10aGVtZSB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzIzMjMyOyAgY29sb3I6ICd7e2JhY2tncm91bmQtNTB9fSc7IH0gIG1kLXRvYXN0Lm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWJ1dHRvbiB7ICAgIGNvbG9yOiAne3tiYWNrZ3JvdW5kLTUwfX0nOyB9ICAgIG1kLXRvYXN0Lm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWJ1dHRvbi5tZC1oaWdobGlnaHQgeyAgICAgIGNvbG9yOiAne3twcmltYXJ5LUEyMDB9fSc7IH0gICAgICBtZC10b2FzdC5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1idXR0b24ubWQtaGlnaGxpZ2h0Lm1kLWFjY2VudCB7ICAgICAgICBjb2xvcjogJ3t7YWNjZW50LUEyMDB9fSc7IH0gICAgICBtZC10b2FzdC5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1idXR0b24ubWQtaGlnaGxpZ2h0Lm1kLXdhcm4geyAgICAgICAgY29sb3I6ICd7e3dhcm4tQTIwMH19JzsgfW1kLXRvb2xiYXIubWQtVEhFTUVfTkFNRS10aGVtZSB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3twcmltYXJ5LWNvbG9yfX0nOyAgY29sb3I6ICd7e3ByaW1hcnktY29udHJhc3R9fSc7IH0gIG1kLXRvb2xiYXIubWQtVEhFTUVfTkFNRS10aGVtZSBtZC1pY29uIHsgICAgY29sb3I6ICd7e3ByaW1hcnktY29udHJhc3R9fSc7IH0gIG1kLXRvb2xiYXIubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtYnV0dG9uIHsgICAgY29sb3I6ICd7e3ByaW1hcnktY29udHJhc3R9fSc7IH0gIG1kLXRvb2xiYXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQgeyAgICBiYWNrZ3JvdW5kLWNvbG9yOiAne3thY2NlbnQtY29sb3J9fSc7ICAgIGNvbG9yOiAne3thY2NlbnQtY29udHJhc3R9fSc7IH0gIG1kLXRvb2xiYXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuIHsgICAgYmFja2dyb3VuZC1jb2xvcjogJ3t7d2Fybi1jb2xvcn19JzsgICAgY29sb3I6ICd7e3dhcm4tY29udHJhc3R9fSc7IH1tZC10b29sdGlwLm1kLVRIRU1FX05BTUUtdGhlbWUgeyAgY29sb3I6ICd7e2JhY2tncm91bmQtQTEwMH19JzsgfSAgbWQtdG9vbHRpcC5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1iYWNrZ3JvdW5kIHsgICAgYmFja2dyb3VuZC1jb2xvcjogJ3t7Zm9yZWdyb3VuZC0yfX0nOyB9XCIpOyBcbn0pKCk7XG5cblxufSkod2luZG93LCB3aW5kb3cuYW5ndWxhcik7IiwiLy8gU2hvdWxkIGFscmVhZHkgYmUgcmVxdWlyZWQsIGhlcmUgZm9yIGNsYXJpdHlcbnJlcXVpcmUoJ2FuZ3VsYXInKTtcblxuLy8gTG9hZCBBbmd1bGFyIGFuZCBkZXBlbmRlbnQgbGlic1xucmVxdWlyZSgnYW5ndWxhci1hbmltYXRlJyk7XG5yZXF1aXJlKCdhbmd1bGFyLWFyaWEnKTtcblxuLy8gTm93IGxvYWQgQW5ndWxhciBNYXRlcmlhbFxucmVxdWlyZSgnLi9hbmd1bGFyLW1hdGVyaWFsJyk7XG5cbi8vIEV4cG9ydCBuYW1lc3BhY2Vcbm1vZHVsZS5leHBvcnRzID0gJ25nTWF0ZXJpYWwnO1xuIiwiLyoqXG4gKiBAbGljZW5zZSBBbmd1bGFySlMgdjEuNC4zXG4gKiAoYykgMjAxMC0yMDE1IEdvb2dsZSwgSW5jLiBodHRwOi8vYW5ndWxhcmpzLm9yZ1xuICogTGljZW5zZTogTUlUXG4gKi9cbihmdW5jdGlvbih3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHsndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhpcyBvYmplY3QgcHJvdmlkZXMgYSB1dGlsaXR5IGZvciBwcm9kdWNpbmcgcmljaCBFcnJvciBtZXNzYWdlcyB3aXRoaW5cbiAqIEFuZ3VsYXIuIEl0IGNhbiBiZSBjYWxsZWQgYXMgZm9sbG93czpcbiAqXG4gKiB2YXIgZXhhbXBsZU1pbkVyciA9IG1pbkVycignZXhhbXBsZScpO1xuICogdGhyb3cgZXhhbXBsZU1pbkVycignb25lJywgJ1RoaXMgezB9IGlzIHsxfScsIGZvbywgYmFyKTtcbiAqXG4gKiBUaGUgYWJvdmUgY3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBtaW5FcnIgaW4gdGhlIGV4YW1wbGUgbmFtZXNwYWNlLiBUaGVcbiAqIHJlc3VsdGluZyBlcnJvciB3aWxsIGhhdmUgYSBuYW1lc3BhY2VkIGVycm9yIGNvZGUgb2YgZXhhbXBsZS5vbmUuICBUaGVcbiAqIHJlc3VsdGluZyBlcnJvciB3aWxsIHJlcGxhY2UgezB9IHdpdGggdGhlIHZhbHVlIG9mIGZvbywgYW5kIHsxfSB3aXRoIHRoZVxuICogdmFsdWUgb2YgYmFyLiBUaGUgb2JqZWN0IGlzIG5vdCByZXN0cmljdGVkIGluIHRoZSBudW1iZXIgb2YgYXJndW1lbnRzIGl0IGNhblxuICogdGFrZS5cbiAqXG4gKiBJZiBmZXdlciBhcmd1bWVudHMgYXJlIHNwZWNpZmllZCB0aGFuIG5lY2Vzc2FyeSBmb3IgaW50ZXJwb2xhdGlvbiwgdGhlIGV4dHJhXG4gKiBpbnRlcnBvbGF0aW9uIG1hcmtlcnMgd2lsbCBiZSBwcmVzZXJ2ZWQgaW4gdGhlIGZpbmFsIHN0cmluZy5cbiAqXG4gKiBTaW5jZSBkYXRhIHdpbGwgYmUgcGFyc2VkIHN0YXRpY2FsbHkgZHVyaW5nIGEgYnVpbGQgc3RlcCwgc29tZSByZXN0cmljdGlvbnNcbiAqIGFyZSBhcHBsaWVkIHdpdGggcmVzcGVjdCB0byBob3cgbWluRXJyIGluc3RhbmNlcyBhcmUgY3JlYXRlZCBhbmQgY2FsbGVkLlxuICogSW5zdGFuY2VzIHNob3VsZCBoYXZlIG5hbWVzIG9mIHRoZSBmb3JtIG5hbWVzcGFjZU1pbkVyciBmb3IgYSBtaW5FcnIgY3JlYXRlZFxuICogdXNpbmcgbWluRXJyKCduYW1lc3BhY2UnKSAuIEVycm9yIGNvZGVzLCBuYW1lc3BhY2VzIGFuZCB0ZW1wbGF0ZSBzdHJpbmdzXG4gKiBzaG91bGQgYWxsIGJlIHN0YXRpYyBzdHJpbmdzLCBub3QgdmFyaWFibGVzIG9yIGdlbmVyYWwgZXhwcmVzc2lvbnMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZSBUaGUgbmFtZXNwYWNlIHRvIHVzZSBmb3IgdGhlIG5ldyBtaW5FcnIgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBFcnJvckNvbnN0cnVjdG9yIEN1c3RvbSBlcnJvciBjb25zdHJ1Y3RvciB0byBiZSBpbnN0YW50aWF0ZWQgd2hlbiByZXR1cm5pbmdcbiAqICAgZXJyb3IgZnJvbSByZXR1cm5lZCBmdW5jdGlvbiwgZm9yIGNhc2VzIHdoZW4gYSBwYXJ0aWN1bGFyIHR5cGUgb2YgZXJyb3IgaXMgdXNlZnVsLlxuICogQHJldHVybnMge2Z1bmN0aW9uKGNvZGU6c3RyaW5nLCB0ZW1wbGF0ZTpzdHJpbmcsIC4uLnRlbXBsYXRlQXJncyk6IEVycm9yfSBtaW5FcnIgaW5zdGFuY2VcbiAqL1xuXG5mdW5jdGlvbiBtaW5FcnIobW9kdWxlLCBFcnJvckNvbnN0cnVjdG9yKSB7XG4gIEVycm9yQ29uc3RydWN0b3IgPSBFcnJvckNvbnN0cnVjdG9yIHx8IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIFNLSVBfSU5ERVhFUyA9IDI7XG5cbiAgICB2YXIgdGVtcGxhdGVBcmdzID0gYXJndW1lbnRzLFxuICAgICAgY29kZSA9IHRlbXBsYXRlQXJnc1swXSxcbiAgICAgIG1lc3NhZ2UgPSAnWycgKyAobW9kdWxlID8gbW9kdWxlICsgJzonIDogJycpICsgY29kZSArICddICcsXG4gICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlQXJnc1sxXSxcbiAgICAgIHBhcmFtUHJlZml4LCBpO1xuXG4gICAgbWVzc2FnZSArPSB0ZW1wbGF0ZS5yZXBsYWNlKC9cXHtcXGQrXFx9L2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICB2YXIgaW5kZXggPSArbWF0Y2guc2xpY2UoMSwgLTEpLFxuICAgICAgICBzaGlmdGVkSW5kZXggPSBpbmRleCArIFNLSVBfSU5ERVhFUztcblxuICAgICAgaWYgKHNoaWZ0ZWRJbmRleCA8IHRlbXBsYXRlQXJncy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRvRGVidWdTdHJpbmcodGVtcGxhdGVBcmdzW3NoaWZ0ZWRJbmRleF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICBtZXNzYWdlICs9ICdcXG5odHRwOi8vZXJyb3JzLmFuZ3VsYXJqcy5vcmcvMS40LjMvJyArXG4gICAgICAobW9kdWxlID8gbW9kdWxlICsgJy8nIDogJycpICsgY29kZTtcblxuICAgIGZvciAoaSA9IFNLSVBfSU5ERVhFUywgcGFyYW1QcmVmaXggPSAnPyc7IGkgPCB0ZW1wbGF0ZUFyZ3MubGVuZ3RoOyBpKyssIHBhcmFtUHJlZml4ID0gJyYnKSB7XG4gICAgICBtZXNzYWdlICs9IHBhcmFtUHJlZml4ICsgJ3AnICsgKGkgLSBTS0lQX0lOREVYRVMpICsgJz0nICtcbiAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHRvRGVidWdTdHJpbmcodGVtcGxhdGVBcmdzW2ldKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBFcnJvckNvbnN0cnVjdG9yKG1lc3NhZ2UpO1xuICB9O1xufVxuXG4vKiBXZSBuZWVkIHRvIHRlbGwganNoaW50IHdoYXQgdmFyaWFibGVzIGFyZSBiZWluZyBleHBvcnRlZCAqL1xuLyogZ2xvYmFsIGFuZ3VsYXI6IHRydWUsXG4gIG1zaWU6IHRydWUsXG4gIGpxTGl0ZTogdHJ1ZSxcbiAgalF1ZXJ5OiB0cnVlLFxuICBzbGljZTogdHJ1ZSxcbiAgc3BsaWNlOiB0cnVlLFxuICBwdXNoOiB0cnVlLFxuICB0b1N0cmluZzogdHJ1ZSxcbiAgbmdNaW5FcnI6IHRydWUsXG4gIGFuZ3VsYXJNb2R1bGU6IHRydWUsXG4gIHVpZDogdHJ1ZSxcbiAgUkVHRVhfU1RSSU5HX1JFR0VYUDogdHJ1ZSxcbiAgVkFMSURJVFlfU1RBVEVfUFJPUEVSVFk6IHRydWUsXG5cbiAgbG93ZXJjYXNlOiB0cnVlLFxuICB1cHBlcmNhc2U6IHRydWUsXG4gIG1hbnVhbExvd2VyY2FzZTogdHJ1ZSxcbiAgbWFudWFsVXBwZXJjYXNlOiB0cnVlLFxuICBub2RlTmFtZV86IHRydWUsXG4gIGlzQXJyYXlMaWtlOiB0cnVlLFxuICBmb3JFYWNoOiB0cnVlLFxuICBmb3JFYWNoU29ydGVkOiB0cnVlLFxuICByZXZlcnNlUGFyYW1zOiB0cnVlLFxuICBuZXh0VWlkOiB0cnVlLFxuICBzZXRIYXNoS2V5OiB0cnVlLFxuICBleHRlbmQ6IHRydWUsXG4gIHRvSW50OiB0cnVlLFxuICBpbmhlcml0OiB0cnVlLFxuICBtZXJnZTogdHJ1ZSxcbiAgbm9vcDogdHJ1ZSxcbiAgaWRlbnRpdHk6IHRydWUsXG4gIHZhbHVlRm46IHRydWUsXG4gIGlzVW5kZWZpbmVkOiB0cnVlLFxuICBpc0RlZmluZWQ6IHRydWUsXG4gIGlzT2JqZWN0OiB0cnVlLFxuICBpc0JsYW5rT2JqZWN0OiB0cnVlLFxuICBpc1N0cmluZzogdHJ1ZSxcbiAgaXNOdW1iZXI6IHRydWUsXG4gIGlzRGF0ZTogdHJ1ZSxcbiAgaXNBcnJheTogdHJ1ZSxcbiAgaXNGdW5jdGlvbjogdHJ1ZSxcbiAgaXNSZWdFeHA6IHRydWUsXG4gIGlzV2luZG93OiB0cnVlLFxuICBpc1Njb3BlOiB0cnVlLFxuICBpc0ZpbGU6IHRydWUsXG4gIGlzRm9ybURhdGE6IHRydWUsXG4gIGlzQmxvYjogdHJ1ZSxcbiAgaXNCb29sZWFuOiB0cnVlLFxuICBpc1Byb21pc2VMaWtlOiB0cnVlLFxuICB0cmltOiB0cnVlLFxuICBlc2NhcGVGb3JSZWdleHA6IHRydWUsXG4gIGlzRWxlbWVudDogdHJ1ZSxcbiAgbWFrZU1hcDogdHJ1ZSxcbiAgaW5jbHVkZXM6IHRydWUsXG4gIGFycmF5UmVtb3ZlOiB0cnVlLFxuICBjb3B5OiB0cnVlLFxuICBzaGFsbG93Q29weTogdHJ1ZSxcbiAgZXF1YWxzOiB0cnVlLFxuICBjc3A6IHRydWUsXG4gIGpxOiB0cnVlLFxuICBjb25jYXQ6IHRydWUsXG4gIHNsaWNlQXJnczogdHJ1ZSxcbiAgYmluZDogdHJ1ZSxcbiAgdG9Kc29uUmVwbGFjZXI6IHRydWUsXG4gIHRvSnNvbjogdHJ1ZSxcbiAgZnJvbUpzb246IHRydWUsXG4gIGNvbnZlcnRUaW1lem9uZVRvTG9jYWw6IHRydWUsXG4gIHRpbWV6b25lVG9PZmZzZXQ6IHRydWUsXG4gIHN0YXJ0aW5nVGFnOiB0cnVlLFxuICB0cnlEZWNvZGVVUklDb21wb25lbnQ6IHRydWUsXG4gIHBhcnNlS2V5VmFsdWU6IHRydWUsXG4gIHRvS2V5VmFsdWU6IHRydWUsXG4gIGVuY29kZVVyaVNlZ21lbnQ6IHRydWUsXG4gIGVuY29kZVVyaVF1ZXJ5OiB0cnVlLFxuICBhbmd1bGFySW5pdDogdHJ1ZSxcbiAgYm9vdHN0cmFwOiB0cnVlLFxuICBnZXRUZXN0YWJpbGl0eTogdHJ1ZSxcbiAgc25ha2VfY2FzZTogdHJ1ZSxcbiAgYmluZEpRdWVyeTogdHJ1ZSxcbiAgYXNzZXJ0QXJnOiB0cnVlLFxuICBhc3NlcnRBcmdGbjogdHJ1ZSxcbiAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHk6IHRydWUsXG4gIGdldHRlcjogdHJ1ZSxcbiAgZ2V0QmxvY2tOb2RlczogdHJ1ZSxcbiAgaGFzT3duUHJvcGVydHk6IHRydWUsXG4gIGNyZWF0ZU1hcDogdHJ1ZSxcblxuICBOT0RFX1RZUEVfRUxFTUVOVDogdHJ1ZSxcbiAgTk9ERV9UWVBFX0FUVFJJQlVURTogdHJ1ZSxcbiAgTk9ERV9UWVBFX1RFWFQ6IHRydWUsXG4gIE5PREVfVFlQRV9DT01NRU5UOiB0cnVlLFxuICBOT0RFX1RZUEVfRE9DVU1FTlQ6IHRydWUsXG4gIE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVDogdHJ1ZSxcbiovXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG5nXG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiAjIG5nIChjb3JlIG1vZHVsZSlcbiAqIFRoZSBuZyBtb2R1bGUgaXMgbG9hZGVkIGJ5IGRlZmF1bHQgd2hlbiBhbiBBbmd1bGFySlMgYXBwbGljYXRpb24gaXMgc3RhcnRlZC4gVGhlIG1vZHVsZSBpdHNlbGZcbiAqIGNvbnRhaW5zIHRoZSBlc3NlbnRpYWwgY29tcG9uZW50cyBmb3IgYW4gQW5ndWxhckpTIGFwcGxpY2F0aW9uIHRvIGZ1bmN0aW9uLiBUaGUgdGFibGUgYmVsb3dcbiAqIGxpc3RzIGEgaGlnaCBsZXZlbCBicmVha2Rvd24gb2YgZWFjaCBvZiB0aGUgc2VydmljZXMvZmFjdG9yaWVzLCBmaWx0ZXJzLCBkaXJlY3RpdmVzIGFuZCB0ZXN0aW5nXG4gKiBjb21wb25lbnRzIGF2YWlsYWJsZSB3aXRoaW4gdGhpcyBjb3JlIG1vZHVsZS5cbiAqXG4gKiA8ZGl2IGRvYy1tb2R1bGUtY29tcG9uZW50cz1cIm5nXCI+PC9kaXY+XG4gKi9cblxudmFyIFJFR0VYX1NUUklOR19SRUdFWFAgPSAvXlxcLyguKylcXC8oW2Etel0qKSQvO1xuXG4vLyBUaGUgbmFtZSBvZiBhIGZvcm0gY29udHJvbCdzIFZhbGlkaXR5U3RhdGUgcHJvcGVydHkuXG4vLyBUaGlzIGlzIHVzZWQgc28gdGhhdCBpdCdzIHBvc3NpYmxlIGZvciBpbnRlcm5hbCB0ZXN0cyB0byBjcmVhdGUgbW9jayBWYWxpZGl0eVN0YXRlcy5cbnZhciBWQUxJRElUWV9TVEFURV9QUk9QRVJUWSA9ICd2YWxpZGl0eSc7XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmxvd2VyY2FzZVxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb24gQ29udmVydHMgdGhlIHNwZWNpZmllZCBzdHJpbmcgdG8gbG93ZXJjYXNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTdHJpbmcgdG8gYmUgY29udmVydGVkIHRvIGxvd2VyY2FzZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IExvd2VyY2FzZWQgc3RyaW5nLlxuICovXG52YXIgbG93ZXJjYXNlID0gZnVuY3Rpb24oc3RyaW5nKSB7cmV0dXJuIGlzU3RyaW5nKHN0cmluZykgPyBzdHJpbmcudG9Mb3dlckNhc2UoKSA6IHN0cmluZzt9O1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIudXBwZXJjYXNlXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0cyB0aGUgc3BlY2lmaWVkIHN0cmluZyB0byB1cHBlcmNhc2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFN0cmluZyB0byBiZSBjb252ZXJ0ZWQgdG8gdXBwZXJjYXNlLlxuICogQHJldHVybnMge3N0cmluZ30gVXBwZXJjYXNlZCBzdHJpbmcuXG4gKi9cbnZhciB1cHBlcmNhc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtyZXR1cm4gaXNTdHJpbmcoc3RyaW5nKSA/IHN0cmluZy50b1VwcGVyQ2FzZSgpIDogc3RyaW5nO307XG5cblxudmFyIG1hbnVhbExvd2VyY2FzZSA9IGZ1bmN0aW9uKHMpIHtcbiAgLyoganNoaW50IGJpdHdpc2U6IGZhbHNlICovXG4gIHJldHVybiBpc1N0cmluZyhzKVxuICAgICAgPyBzLnJlcGxhY2UoL1tBLVpdL2csIGZ1bmN0aW9uKGNoKSB7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY2guY2hhckNvZGVBdCgwKSB8IDMyKTt9KVxuICAgICAgOiBzO1xufTtcbnZhciBtYW51YWxVcHBlcmNhc2UgPSBmdW5jdGlvbihzKSB7XG4gIC8qIGpzaGludCBiaXR3aXNlOiBmYWxzZSAqL1xuICByZXR1cm4gaXNTdHJpbmcocylcbiAgICAgID8gcy5yZXBsYWNlKC9bYS16XS9nLCBmdW5jdGlvbihjaCkge3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoLmNoYXJDb2RlQXQoMCkgJiB+MzIpO30pXG4gICAgICA6IHM7XG59O1xuXG5cbi8vIFN0cmluZyN0b0xvd2VyQ2FzZSBhbmQgU3RyaW5nI3RvVXBwZXJDYXNlIGRvbid0IHByb2R1Y2UgY29ycmVjdCByZXN1bHRzIGluIGJyb3dzZXJzIHdpdGggVHVya2lzaFxuLy8gbG9jYWxlLCBmb3IgdGhpcyByZWFzb24gd2UgbmVlZCB0byBkZXRlY3QgdGhpcyBjYXNlIGFuZCByZWRlZmluZSBsb3dlcmNhc2UvdXBwZXJjYXNlIG1ldGhvZHNcbi8vIHdpdGggY29ycmVjdCBidXQgc2xvd2VyIGFsdGVybmF0aXZlcy5cbmlmICgnaScgIT09ICdJJy50b0xvd2VyQ2FzZSgpKSB7XG4gIGxvd2VyY2FzZSA9IG1hbnVhbExvd2VyY2FzZTtcbiAgdXBwZXJjYXNlID0gbWFudWFsVXBwZXJjYXNlO1xufVxuXG5cbnZhclxuICAgIG1zaWUsICAgICAgICAgICAgIC8vIGhvbGRzIG1ham9yIHZlcnNpb24gbnVtYmVyIGZvciBJRSwgb3IgTmFOIGlmIFVBIGlzIG5vdCBJRS5cbiAgICBqcUxpdGUsICAgICAgICAgICAvLyBkZWxheSBiaW5kaW5nIHNpbmNlIGpRdWVyeSBjb3VsZCBiZSBsb2FkZWQgYWZ0ZXIgdXMuXG4gICAgalF1ZXJ5LCAgICAgICAgICAgLy8gZGVsYXkgYmluZGluZ1xuICAgIHNsaWNlICAgICAgICAgICAgID0gW10uc2xpY2UsXG4gICAgc3BsaWNlICAgICAgICAgICAgPSBbXS5zcGxpY2UsXG4gICAgcHVzaCAgICAgICAgICAgICAgPSBbXS5wdXNoLFxuICAgIHRvU3RyaW5nICAgICAgICAgID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcbiAgICBnZXRQcm90b3R5cGVPZiAgICA9IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgICBuZ01pbkVyciAgICAgICAgICA9IG1pbkVycignbmcnKSxcblxuICAgIC8qKiBAbmFtZSBhbmd1bGFyICovXG4gICAgYW5ndWxhciAgICAgICAgICAgPSB3aW5kb3cuYW5ndWxhciB8fCAod2luZG93LmFuZ3VsYXIgPSB7fSksXG4gICAgYW5ndWxhck1vZHVsZSxcbiAgICB1aWQgICAgICAgICAgICAgICA9IDA7XG5cbi8qKlxuICogZG9jdW1lbnRNb2RlIGlzIGFuIElFLW9ubHkgcHJvcGVydHlcbiAqIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9jYzE5Njk4OCh2PXZzLjg1KS5hc3B4XG4gKi9cbm1zaWUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XG5cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBgb2JqYCBpcyBhbiBhcnJheSBvciBhcnJheS1saWtlIG9iamVjdCAoTm9kZUxpc3QsIEFyZ3VtZW50cyxcbiAqICAgICAgICAgICAgICAgICAgIFN0cmluZyAuLi4pXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKG9iaikge1xuICBpZiAob2JqID09IG51bGwgfHwgaXNXaW5kb3cob2JqKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFN1cHBvcnQ6IGlPUyA4LjIgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuICAvLyBcImxlbmd0aFwiIGluIG9iaiB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0xMTUwOClcbiAgdmFyIGxlbmd0aCA9IFwibGVuZ3RoXCIgaW4gT2JqZWN0KG9iaikgJiYgb2JqLmxlbmd0aDtcblxuICBpZiAob2JqLm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRUxFTUVOVCAmJiBsZW5ndGgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBpc1N0cmluZyhvYmopIHx8IGlzQXJyYXkob2JqKSB8fCBsZW5ndGggPT09IDAgfHxcbiAgICAgICAgIHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInICYmIGxlbmd0aCA+IDAgJiYgKGxlbmd0aCAtIDEpIGluIG9iajtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuZm9yRWFjaFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEludm9rZXMgdGhlIGBpdGVyYXRvcmAgZnVuY3Rpb24gb25jZSBmb3IgZWFjaCBpdGVtIGluIGBvYmpgIGNvbGxlY3Rpb24sIHdoaWNoIGNhbiBiZSBlaXRoZXIgYW5cbiAqIG9iamVjdCBvciBhbiBhcnJheS4gVGhlIGBpdGVyYXRvcmAgZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIGBpdGVyYXRvcih2YWx1ZSwga2V5LCBvYmopYCwgd2hlcmUgYHZhbHVlYFxuICogaXMgdGhlIHZhbHVlIG9mIGFuIG9iamVjdCBwcm9wZXJ0eSBvciBhbiBhcnJheSBlbGVtZW50LCBga2V5YCBpcyB0aGUgb2JqZWN0IHByb3BlcnR5IGtleSBvclxuICogYXJyYXkgZWxlbWVudCBpbmRleCBhbmQgb2JqIGlzIHRoZSBgb2JqYCBpdHNlbGYuIFNwZWNpZnlpbmcgYSBgY29udGV4dGAgZm9yIHRoZSBmdW5jdGlvbiBpcyBvcHRpb25hbC5cbiAqXG4gKiBJdCBpcyB3b3J0aCBub3RpbmcgdGhhdCBgLmZvckVhY2hgIGRvZXMgbm90IGl0ZXJhdGUgb3ZlciBpbmhlcml0ZWQgcHJvcGVydGllcyBiZWNhdXNlIGl0IGZpbHRlcnNcbiAqIHVzaW5nIHRoZSBgaGFzT3duUHJvcGVydHlgIG1ldGhvZC5cbiAqXG4gKiBVbmxpa2UgRVMyNjInc1xuICogW0FycmF5LnByb3RvdHlwZS5mb3JFYWNoXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtMTUuNC40LjE4KSxcbiAqIFByb3ZpZGluZyAndW5kZWZpbmVkJyBvciAnbnVsbCcgdmFsdWVzIGZvciBgb2JqYCB3aWxsIG5vdCB0aHJvdyBhIFR5cGVFcnJvciwgYnV0IHJhdGhlciBqdXN0XG4gKiByZXR1cm4gdGhlIHZhbHVlIHByb3ZpZGVkLlxuICpcbiAgIGBgYGpzXG4gICAgIHZhciB2YWx1ZXMgPSB7bmFtZTogJ21pc2tvJywgZ2VuZGVyOiAnbWFsZSd9O1xuICAgICB2YXIgbG9nID0gW107XG4gICAgIGFuZ3VsYXIuZm9yRWFjaCh2YWx1ZXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICB0aGlzLnB1c2goa2V5ICsgJzogJyArIHZhbHVlKTtcbiAgICAgfSwgbG9nKTtcbiAgICAgZXhwZWN0KGxvZykudG9FcXVhbChbJ25hbWU6IG1pc2tvJywgJ2dlbmRlcjogbWFsZSddKTtcbiAgIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogT2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdG9yIEl0ZXJhdG9yIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb250ZXh0IE9iamVjdCB0byBiZWNvbWUgY29udGV4dCAoYHRoaXNgKSBmb3IgdGhlIGl0ZXJhdG9yIGZ1bmN0aW9uLlxuICogQHJldHVybnMge09iamVjdHxBcnJheX0gUmVmZXJlbmNlIHRvIGBvYmpgLlxuICovXG5cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICB2YXIga2V5LCBsZW5ndGg7XG4gIGlmIChvYmopIHtcbiAgICBpZiAoaXNGdW5jdGlvbihvYmopKSB7XG4gICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgLy8gTmVlZCB0byBjaGVjayBpZiBoYXNPd25Qcm9wZXJ0eSBleGlzdHMsXG4gICAgICAgIC8vIGFzIG9uIElFOCB0aGUgcmVzdWx0IG9mIHF1ZXJ5U2VsZWN0b3JBbGwgaXMgYW4gb2JqZWN0IHdpdGhvdXQgYSBoYXNPd25Qcm9wZXJ0eSBmdW5jdGlvblxuICAgICAgICBpZiAoa2V5ICE9ICdwcm90b3R5cGUnICYmIGtleSAhPSAnbGVuZ3RoJyAmJiBrZXkgIT0gJ25hbWUnICYmICghb2JqLmhhc093blByb3BlcnR5IHx8IG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSkge1xuICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmopIHx8IGlzQXJyYXlMaWtlKG9iaikpIHtcbiAgICAgIHZhciBpc1ByaW1pdGl2ZSA9IHR5cGVvZiBvYmogIT09ICdvYmplY3QnO1xuICAgICAgZm9yIChrZXkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBrZXkgPCBsZW5ndGg7IGtleSsrKSB7XG4gICAgICAgIGlmIChpc1ByaW1pdGl2ZSB8fCBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvYmouZm9yRWFjaCAmJiBvYmouZm9yRWFjaCAhPT0gZm9yRWFjaCkge1xuICAgICAgICBvYmouZm9yRWFjaChpdGVyYXRvciwgY29udGV4dCwgb2JqKTtcbiAgICB9IGVsc2UgaWYgKGlzQmxhbmtPYmplY3Qob2JqKSkge1xuICAgICAgLy8gY3JlYXRlTWFwKCkgZmFzdCBwYXRoIC0tLSBTYWZlIHRvIGF2b2lkIGhhc093blByb3BlcnR5IGNoZWNrIGJlY2F1c2UgcHJvdG90eXBlIGNoYWluIGlzIGVtcHR5XG4gICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iai5oYXNPd25Qcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gU2xvdyBwYXRoIGZvciBvYmplY3RzIGluaGVyaXRpbmcgT2JqZWN0LnByb3RvdHlwZSwgaGFzT3duUHJvcGVydHkgY2hlY2sgbmVlZGVkXG4gICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNsb3cgcGF0aCBmb3Igb2JqZWN0cyB3aGljaCBkbyBub3QgaGF2ZSBhIG1ldGhvZCBgaGFzT3duUHJvcGVydHlgXG4gICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hTb3J0ZWQob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaikuc29ydCgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXlzW2ldXSwga2V5c1tpXSk7XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59XG5cblxuLyoqXG4gKiB3aGVuIHVzaW5nIGZvckVhY2ggdGhlIHBhcmFtcyBhcmUgdmFsdWUsIGtleSwgYnV0IGl0IGlzIG9mdGVuIHVzZWZ1bCB0byBoYXZlIGtleSwgdmFsdWUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZywgKil9IGl0ZXJhdG9yRm5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbigqLCBzdHJpbmcpfVxuICovXG5mdW5jdGlvbiByZXZlcnNlUGFyYW1zKGl0ZXJhdG9yRm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsgaXRlcmF0b3JGbihrZXksIHZhbHVlKTsgfTtcbn1cblxuLyoqXG4gKiBBIGNvbnNpc3RlbnQgd2F5IG9mIGNyZWF0aW5nIHVuaXF1ZSBJRHMgaW4gYW5ndWxhci5cbiAqXG4gKiBVc2luZyBzaW1wbGUgbnVtYmVycyBhbGxvd3MgdXMgdG8gZ2VuZXJhdGUgMjguNiBtaWxsaW9uIHVuaXF1ZSBpZHMgcGVyIHNlY29uZCBmb3IgMTAgeWVhcnMgYmVmb3JlXG4gKiB3ZSBoaXQgbnVtYmVyIHByZWNpc2lvbiBpc3N1ZXMgaW4gSmF2YVNjcmlwdC5cbiAqXG4gKiBNYXRoLnBvdygyLDUzKSAvIDYwIC8gNjAgLyAyNCAvIDM2NSAvIDEwID0gMjguNk1cbiAqXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhbiB1bmlxdWUgYWxwaGEtbnVtZXJpYyBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gbmV4dFVpZCgpIHtcbiAgcmV0dXJuICsrdWlkO1xufVxuXG5cbi8qKlxuICogU2V0IG9yIGNsZWFyIHRoZSBoYXNoa2V5IGZvciBhbiBvYmplY3QuXG4gKiBAcGFyYW0gb2JqIG9iamVjdFxuICogQHBhcmFtIGggdGhlIGhhc2hrZXkgKCF0cnV0aHkgdG8gZGVsZXRlIHRoZSBoYXNoa2V5KVxuICovXG5mdW5jdGlvbiBzZXRIYXNoS2V5KG9iaiwgaCkge1xuICBpZiAoaCkge1xuICAgIG9iai4kJGhhc2hLZXkgPSBoO1xuICB9IGVsc2Uge1xuICAgIGRlbGV0ZSBvYmouJCRoYXNoS2V5O1xuICB9XG59XG5cblxuZnVuY3Rpb24gYmFzZUV4dGVuZChkc3QsIG9ianMsIGRlZXApIHtcbiAgdmFyIGggPSBkc3QuJCRoYXNoS2V5O1xuXG4gIGZvciAodmFyIGkgPSAwLCBpaSA9IG9ianMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgIHZhciBvYmogPSBvYmpzW2ldO1xuICAgIGlmICghaXNPYmplY3Qob2JqKSAmJiAhaXNGdW5jdGlvbihvYmopKSBjb250aW51ZTtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgZm9yICh2YXIgaiA9IDAsIGpqID0ga2V5cy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tqXTtcbiAgICAgIHZhciBzcmMgPSBvYmpba2V5XTtcblxuICAgICAgaWYgKGRlZXAgJiYgaXNPYmplY3Qoc3JjKSkge1xuICAgICAgICBpZiAoaXNEYXRlKHNyYykpIHtcbiAgICAgICAgICBkc3Rba2V5XSA9IG5ldyBEYXRlKHNyYy52YWx1ZU9mKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghaXNPYmplY3QoZHN0W2tleV0pKSBkc3Rba2V5XSA9IGlzQXJyYXkoc3JjKSA/IFtdIDoge307XG4gICAgICAgICAgYmFzZUV4dGVuZChkc3Rba2V5XSwgW3NyY10sIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkc3Rba2V5XSA9IHNyYztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzZXRIYXNoS2V5KGRzdCwgaCk7XG4gIHJldHVybiBkc3Q7XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmV4dGVuZFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEV4dGVuZHMgdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBgZHN0YCBieSBjb3B5aW5nIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgZnJvbSB0aGUgYHNyY2Agb2JqZWN0KHMpXG4gKiB0byBgZHN0YC4gWW91IGNhbiBzcGVjaWZ5IG11bHRpcGxlIGBzcmNgIG9iamVjdHMuIElmIHlvdSB3YW50IHRvIHByZXNlcnZlIG9yaWdpbmFsIG9iamVjdHMsIHlvdSBjYW4gZG8gc29cbiAqIGJ5IHBhc3NpbmcgYW4gZW1wdHkgb2JqZWN0IGFzIHRoZSB0YXJnZXQ6IGB2YXIgb2JqZWN0ID0gYW5ndWxhci5leHRlbmQoe30sIG9iamVjdDEsIG9iamVjdDIpYC5cbiAqXG4gKiAqKk5vdGU6KiogS2VlcCBpbiBtaW5kIHRoYXQgYGFuZ3VsYXIuZXh0ZW5kYCBkb2VzIG5vdCBzdXBwb3J0IHJlY3Vyc2l2ZSBtZXJnZSAoZGVlcCBjb3B5KS4gVXNlXG4gKiB7QGxpbmsgYW5ndWxhci5tZXJnZX0gZm9yIHRoaXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRzdCBEZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0gey4uLk9iamVjdH0gc3JjIFNvdXJjZSBvYmplY3QocykuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZWZlcmVuY2UgdG8gYGRzdGAuXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChkc3QpIHtcbiAgcmV0dXJuIGJhc2VFeHRlbmQoZHN0LCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZhbHNlKTtcbn1cblxuXG4vKipcbiogQG5nZG9jIGZ1bmN0aW9uXG4qIEBuYW1lIGFuZ3VsYXIubWVyZ2VcbiogQG1vZHVsZSBuZ1xuKiBAa2luZCBmdW5jdGlvblxuKlxuKiBAZGVzY3JpcHRpb25cbiogRGVlcGx5IGV4dGVuZHMgdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBgZHN0YCBieSBjb3B5aW5nIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgZnJvbSB0aGUgYHNyY2Agb2JqZWN0KHMpXG4qIHRvIGBkc3RgLiBZb3UgY2FuIHNwZWNpZnkgbXVsdGlwbGUgYHNyY2Agb2JqZWN0cy4gSWYgeW91IHdhbnQgdG8gcHJlc2VydmUgb3JpZ2luYWwgb2JqZWN0cywgeW91IGNhbiBkbyBzb1xuKiBieSBwYXNzaW5nIGFuIGVtcHR5IG9iamVjdCBhcyB0aGUgdGFyZ2V0OiBgdmFyIG9iamVjdCA9IGFuZ3VsYXIubWVyZ2Uoe30sIG9iamVjdDEsIG9iamVjdDIpYC5cbipcbiogVW5saWtlIHtAbGluayBhbmd1bGFyLmV4dGVuZCBleHRlbmQoKX0sIGBtZXJnZSgpYCByZWN1cnNpdmVseSBkZXNjZW5kcyBpbnRvIG9iamVjdCBwcm9wZXJ0aWVzIG9mIHNvdXJjZVxuKiBvYmplY3RzLCBwZXJmb3JtaW5nIGEgZGVlcCBjb3B5LlxuKlxuKiBAcGFyYW0ge09iamVjdH0gZHN0IERlc3RpbmF0aW9uIG9iamVjdC5cbiogQHBhcmFtIHsuLi5PYmplY3R9IHNyYyBTb3VyY2Ugb2JqZWN0KHMpLlxuKiBAcmV0dXJucyB7T2JqZWN0fSBSZWZlcmVuY2UgdG8gYGRzdGAuXG4qL1xuZnVuY3Rpb24gbWVyZ2UoZHN0KSB7XG4gIHJldHVybiBiYXNlRXh0ZW5kKGRzdCwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLCB0cnVlKTtcbn1cblxuXG5cbmZ1bmN0aW9uIHRvSW50KHN0cikge1xuICByZXR1cm4gcGFyc2VJbnQoc3RyLCAxMCk7XG59XG5cblxuZnVuY3Rpb24gaW5oZXJpdChwYXJlbnQsIGV4dHJhKSB7XG4gIHJldHVybiBleHRlbmQoT2JqZWN0LmNyZWF0ZShwYXJlbnQpLCBleHRyYSk7XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLm5vb3BcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgbm8gb3BlcmF0aW9ucy4gVGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZnVsIHdoZW4gd3JpdGluZyBjb2RlIGluIHRoZVxuICogZnVuY3Rpb25hbCBzdHlsZS5cbiAgIGBgYGpzXG4gICAgIGZ1bmN0aW9uIGZvbyhjYWxsYmFjaykge1xuICAgICAgIHZhciByZXN1bHQgPSBjYWxjdWxhdGVSZXN1bHQoKTtcbiAgICAgICAoY2FsbGJhY2sgfHwgYW5ndWxhci5ub29wKShyZXN1bHQpO1xuICAgICB9XG4gICBgYGBcbiAqL1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5ub29wLiRpbmplY3QgPSBbXTtcblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pZGVudGl0eVxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGl0cyBmaXJzdCBhcmd1bWVudC4gVGhpcyBmdW5jdGlvbiBpcyB1c2VmdWwgd2hlbiB3cml0aW5nIGNvZGUgaW4gdGhlXG4gKiBmdW5jdGlvbmFsIHN0eWxlLlxuICpcbiAgIGBgYGpzXG4gICAgIGZ1bmN0aW9uIHRyYW5zZm9ybWVyKHRyYW5zZm9ybWF0aW9uRm4sIHZhbHVlKSB7XG4gICAgICAgcmV0dXJuICh0cmFuc2Zvcm1hdGlvbkZuIHx8IGFuZ3VsYXIuaWRlbnRpdHkpKHZhbHVlKTtcbiAgICAgfTtcbiAgIGBgYFxuICAqIEBwYXJhbSB7Kn0gdmFsdWUgdG8gYmUgcmV0dXJuZWQuXG4gICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSBwYXNzZWQgaW4uXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KCQpIHtyZXR1cm4gJDt9XG5pZGVudGl0eS4kaW5qZWN0ID0gW107XG5cblxuZnVuY3Rpb24gdmFsdWVGbih2YWx1ZSkge3JldHVybiBmdW5jdGlvbigpIHtyZXR1cm4gdmFsdWU7fTt9XG5cbmZ1bmN0aW9uIGhhc0N1c3RvbVRvU3RyaW5nKG9iaikge1xuICByZXR1cm4gaXNGdW5jdGlvbihvYmoudG9TdHJpbmcpICYmIG9iai50b1N0cmluZyAhPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc1VuZGVmaW5lZFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgdW5kZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyB1bmRlZmluZWQuXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7fVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzRGVmaW5lZFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgZGVmaW5lZC5cbiAqL1xuZnVuY3Rpb24gaXNEZWZpbmVkKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCc7fVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzT2JqZWN0XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhbiBgT2JqZWN0YC4gVW5saWtlIGB0eXBlb2ZgIGluIEphdmFTY3JpcHQsIGBudWxsYHMgYXJlIG5vdFxuICogY29uc2lkZXJlZCB0byBiZSBvYmplY3RzLiBOb3RlIHRoYXQgSmF2YVNjcmlwdCBhcnJheXMgYXJlIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGBPYmplY3RgIGJ1dCBub3QgYG51bGxgLlxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAvLyBodHRwOi8vanNwZXJmLmNvbS9pc29iamVjdDRcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG59XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhIG51bGwgcHJvdG90eXBlXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhbiBgT2JqZWN0YCB3aXRoIGEgbnVsbCBwcm90b3R5cGVcbiAqL1xuZnVuY3Rpb24gaXNCbGFua09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzU3RyaW5nXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIGBTdHJpbmdgLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBTdHJpbmdgLlxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge3JldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO31cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc051bWJlclxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBgTnVtYmVyYC5cbiAqXG4gKiBUaGlzIGluY2x1ZGVzIHRoZSBcInNwZWNpYWxcIiBudW1iZXJzIGBOYU5gLCBgK0luZmluaXR5YCBhbmQgYC1JbmZpbml0eWAuXG4gKlxuICogSWYgeW91IHdpc2ggdG8gZXhjbHVkZSB0aGVzZSB0aGVuIHlvdSBjYW4gdXNlIHRoZSBuYXRpdmVcbiAqIFtgaXNGaW5pdGUnXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9pc0Zpbml0ZSlcbiAqIG1ldGhvZC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgTnVtYmVyYC5cbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJzt9XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNEYXRlXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHZhbHVlIGlzIGEgZGF0ZS5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgRGF0ZWAuXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc0FycmF5XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhbiBgQXJyYXlgLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhbiBgQXJyYXlgLlxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzRnVuY3Rpb25cbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYEZ1bmN0aW9uYC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgRnVuY3Rpb25gLlxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJzt9XG5cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgUmVnRXhwYC5cbiAqL1xuZnVuY3Rpb24gaXNSZWdFeHAodmFsdWUpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cblxuXG4vKipcbiAqIENoZWNrcyBpZiBgb2JqYCBpcyBhIHdpbmRvdyBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gb2JqIE9iamVjdCB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYG9iamAgaXMgYSB3aW5kb3cgb2JqLlxuICovXG5mdW5jdGlvbiBpc1dpbmRvdyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmoud2luZG93ID09PSBvYmo7XG59XG5cblxuZnVuY3Rpb24gaXNTY29wZShvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouJGV2YWxBc3luYyAmJiBvYmouJHdhdGNoO1xufVxuXG5cbmZ1bmN0aW9uIGlzRmlsZShvYmopIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG5cbmZ1bmN0aW9uIGlzRm9ybURhdGEob2JqKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEZvcm1EYXRhXSc7XG59XG5cblxuZnVuY3Rpb24gaXNCbG9iKG9iaikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cblxuZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbn1cblxuXG5mdW5jdGlvbiBpc1Byb21pc2VMaWtlKG9iaikge1xuICByZXR1cm4gb2JqICYmIGlzRnVuY3Rpb24ob2JqLnRoZW4pO1xufVxuXG5cbnZhciBUWVBFRF9BUlJBWV9SRUdFWFAgPSAvXlxcW29iamVjdCAoVWludDgoQ2xhbXBlZCk/KXwoVWludDE2KXwoVWludDMyKXwoSW50OCl8KEludDE2KXwoSW50MzIpfChGbG9hdCgzMil8KDY0KSlBcnJheVxcXSQvO1xuZnVuY3Rpb24gaXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBUWVBFRF9BUlJBWV9SRUdFWFAudGVzdCh0b1N0cmluZy5jYWxsKHZhbHVlKSk7XG59XG5cblxudmFyIHRyaW0gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gdmFsdWUudHJpbSgpIDogdmFsdWU7XG59O1xuXG4vLyBDb3BpZWQgZnJvbTpcbi8vIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvbG9jYWxfY2xvc3VyZV9nb29nX3N0cmluZ19zdHJpbmcuanMuc291cmNlLmh0bWwjbGluZTEwMjFcbi8vIFByZXJlcTogcyBpcyBhIHN0cmluZy5cbnZhciBlc2NhcGVGb3JSZWdleHAgPSBmdW5jdGlvbihzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UoLyhbLSgpXFxbXFxde30rPyouJFxcXnwsOiM8IVxcXFxdKS9nLCAnXFxcXCQxJykuXG4gICAgICAgICAgIHJlcGxhY2UoL1xceDA4L2csICdcXFxceDA4Jyk7XG59O1xuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzRWxlbWVudFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBET00gZWxlbWVudCAob3Igd3JhcHBlZCBqUXVlcnkgZWxlbWVudCkuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQgKG9yIHdyYXBwZWQgalF1ZXJ5IGVsZW1lbnQpLlxuICovXG5mdW5jdGlvbiBpc0VsZW1lbnQobm9kZSkge1xuICByZXR1cm4gISEobm9kZSAmJlxuICAgIChub2RlLm5vZGVOYW1lICAvLyB3ZSBhcmUgYSBkaXJlY3QgZWxlbWVudFxuICAgIHx8IChub2RlLnByb3AgJiYgbm9kZS5hdHRyICYmIG5vZGUuZmluZCkpKTsgIC8vIHdlIGhhdmUgYW4gb24gYW5kIGZpbmQgbWV0aG9kIHBhcnQgb2YgalF1ZXJ5IEFQSVxufVxuXG4vKipcbiAqIEBwYXJhbSBzdHIgJ2tleTEsa2V5MiwuLi4nXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBpbiB0aGUgZm9ybSBvZiB7a2V5MTp0cnVlLCBrZXkyOnRydWUsIC4uLn1cbiAqL1xuZnVuY3Rpb24gbWFrZU1hcChzdHIpIHtcbiAgdmFyIG9iaiA9IHt9LCBpdGVtcyA9IHN0ci5zcGxpdChcIixcIiksIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgIG9ialtpdGVtc1tpXV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cblxuZnVuY3Rpb24gbm9kZU5hbWVfKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGxvd2VyY2FzZShlbGVtZW50Lm5vZGVOYW1lIHx8IChlbGVtZW50WzBdICYmIGVsZW1lbnRbMF0ubm9kZU5hbWUpKTtcbn1cblxuZnVuY3Rpb24gaW5jbHVkZXMoYXJyYXksIG9iaikge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChhcnJheSwgb2JqKSAhPSAtMTtcbn1cblxuZnVuY3Rpb24gYXJyYXlSZW1vdmUoYXJyYXksIHZhbHVlKSB7XG4gIHZhciBpbmRleCA9IGFycmF5LmluZGV4T2YodmFsdWUpO1xuICBpZiAoaW5kZXggPj0gMCkge1xuICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gIH1cbiAgcmV0dXJuIGluZGV4O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5jb3B5XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ3JlYXRlcyBhIGRlZXAgY29weSBvZiBgc291cmNlYCwgd2hpY2ggc2hvdWxkIGJlIGFuIG9iamVjdCBvciBhbiBhcnJheS5cbiAqXG4gKiAqIElmIG5vIGRlc3RpbmF0aW9uIGlzIHN1cHBsaWVkLCBhIGNvcHkgb2YgdGhlIG9iamVjdCBvciBhcnJheSBpcyBjcmVhdGVkLlxuICogKiBJZiBhIGRlc3RpbmF0aW9uIGlzIHByb3ZpZGVkLCBhbGwgb2YgaXRzIGVsZW1lbnRzIChmb3IgYXJyYXlzKSBvciBwcm9wZXJ0aWVzIChmb3Igb2JqZWN0cylcbiAqICAgYXJlIGRlbGV0ZWQgYW5kIHRoZW4gYWxsIGVsZW1lbnRzL3Byb3BlcnRpZXMgZnJvbSB0aGUgc291cmNlIGFyZSBjb3BpZWQgdG8gaXQuXG4gKiAqIElmIGBzb3VyY2VgIGlzIG5vdCBhbiBvYmplY3Qgb3IgYXJyYXkgKGluYy4gYG51bGxgIGFuZCBgdW5kZWZpbmVkYCksIGBzb3VyY2VgIGlzIHJldHVybmVkLlxuICogKiBJZiBgc291cmNlYCBpcyBpZGVudGljYWwgdG8gJ2Rlc3RpbmF0aW9uJyBhbiBleGNlcHRpb24gd2lsbCBiZSB0aHJvd24uXG4gKlxuICogQHBhcmFtIHsqfSBzb3VyY2UgVGhlIHNvdXJjZSB0aGF0IHdpbGwgYmUgdXNlZCB0byBtYWtlIGEgY29weS5cbiAqICAgICAgICAgICAgICAgICAgIENhbiBiZSBhbnkgdHlwZSwgaW5jbHVkaW5nIHByaW1pdGl2ZXMsIGBudWxsYCwgYW5kIGB1bmRlZmluZWRgLlxuICogQHBhcmFtIHsoT2JqZWN0fEFycmF5KT19IGRlc3RpbmF0aW9uIERlc3RpbmF0aW9uIGludG8gd2hpY2ggdGhlIHNvdXJjZSBpcyBjb3BpZWQuIElmXG4gKiAgICAgcHJvdmlkZWQsIG11c3QgYmUgb2YgdGhlIHNhbWUgdHlwZSBhcyBgc291cmNlYC5cbiAqIEByZXR1cm5zIHsqfSBUaGUgY29weSBvciB1cGRhdGVkIGBkZXN0aW5hdGlvbmAsIGlmIGBkZXN0aW5hdGlvbmAgd2FzIHNwZWNpZmllZC5cbiAqXG4gKiBAZXhhbXBsZVxuIDxleGFtcGxlIG1vZHVsZT1cImNvcHlFeGFtcGxlXCI+XG4gPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuIDxmb3JtIG5vdmFsaWRhdGUgY2xhc3M9XCJzaW1wbGUtZm9ybVwiPlxuIE5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXNlci5uYW1lXCIgLz48YnIgLz5cbiBFLW1haWw6IDxpbnB1dCB0eXBlPVwiZW1haWxcIiBuZy1tb2RlbD1cInVzZXIuZW1haWxcIiAvPjxiciAvPlxuIEdlbmRlcjogPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwidXNlci5nZW5kZXJcIiB2YWx1ZT1cIm1hbGVcIiAvPm1hbGVcbiA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmctbW9kZWw9XCJ1c2VyLmdlbmRlclwiIHZhbHVlPVwiZmVtYWxlXCIgLz5mZW1hbGU8YnIgLz5cbiA8YnV0dG9uIG5nLWNsaWNrPVwicmVzZXQoKVwiPlJFU0VUPC9idXR0b24+XG4gPGJ1dHRvbiBuZy1jbGljaz1cInVwZGF0ZSh1c2VyKVwiPlNBVkU8L2J1dHRvbj5cbiA8L2Zvcm0+XG4gPHByZT5mb3JtID0ge3t1c2VyIHwganNvbn19PC9wcmU+XG4gPHByZT5tYXN0ZXIgPSB7e21hc3RlciB8IGpzb259fTwvcHJlPlxuIDwvZGl2PlxuXG4gPHNjcmlwdD5cbiAgYW5ndWxhci5tb2R1bGUoJ2NvcHlFeGFtcGxlJywgW10pXG4gICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICRzY29wZS5tYXN0ZXI9IHt9O1xuXG4gICAgICAkc2NvcGUudXBkYXRlID0gZnVuY3Rpb24odXNlcikge1xuICAgICAgICAvLyBFeGFtcGxlIHdpdGggMSBhcmd1bWVudFxuICAgICAgICAkc2NvcGUubWFzdGVyPSBhbmd1bGFyLmNvcHkodXNlcik7XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gRXhhbXBsZSB3aXRoIDIgYXJndW1lbnRzXG4gICAgICAgIGFuZ3VsYXIuY29weSgkc2NvcGUubWFzdGVyLCAkc2NvcGUudXNlcik7XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUucmVzZXQoKTtcbiAgICB9XSk7XG4gPC9zY3JpcHQ+XG4gPC9maWxlPlxuIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gY29weShzb3VyY2UsIGRlc3RpbmF0aW9uLCBzdGFja1NvdXJjZSwgc3RhY2tEZXN0KSB7XG4gIGlmIChpc1dpbmRvdyhzb3VyY2UpIHx8IGlzU2NvcGUoc291cmNlKSkge1xuICAgIHRocm93IG5nTWluRXJyKCdjcHdzJyxcbiAgICAgIFwiQ2FuJ3QgY29weSEgTWFraW5nIGNvcGllcyBvZiBXaW5kb3cgb3IgU2NvcGUgaW5zdGFuY2VzIGlzIG5vdCBzdXBwb3J0ZWQuXCIpO1xuICB9XG4gIGlmIChpc1R5cGVkQXJyYXkoZGVzdGluYXRpb24pKSB7XG4gICAgdGhyb3cgbmdNaW5FcnIoJ2NwdGEnLFxuICAgICAgXCJDYW4ndCBjb3B5ISBUeXBlZEFycmF5IGRlc3RpbmF0aW9uIGNhbm5vdCBiZSBtdXRhdGVkLlwiKTtcbiAgfVxuXG4gIGlmICghZGVzdGluYXRpb24pIHtcbiAgICBkZXN0aW5hdGlvbiA9IHNvdXJjZTtcbiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgdmFyIGluZGV4O1xuICAgICAgaWYgKHN0YWNrU291cmNlICYmIChpbmRleCA9IHN0YWNrU291cmNlLmluZGV4T2Yoc291cmNlKSkgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiBzdGFja0Rlc3RbaW5kZXhdO1xuICAgICAgfVxuXG4gICAgICAvLyBUeXBlZEFycmF5LCBEYXRlIGFuZCBSZWdFeHAgaGF2ZSBzcGVjaWZpYyBjb3B5IGZ1bmN0aW9uYWxpdHkgYW5kIG11c3QgYmVcbiAgICAgIC8vIHB1c2hlZCBvbnRvIHRoZSBzdGFjayBiZWZvcmUgcmV0dXJuaW5nLlxuICAgICAgLy8gQXJyYXkgYW5kIG90aGVyIG9iamVjdHMgY3JlYXRlIHRoZSBiYXNlIG9iamVjdCBhbmQgcmVjdXJzZSB0byBjb3B5IGNoaWxkXG4gICAgICAvLyBvYmplY3RzLiBUaGUgYXJyYXkvb2JqZWN0IHdpbGwgYmUgcHVzaGVkIG9udG8gdGhlIHN0YWNrIHdoZW4gcmVjdXJzZWQuXG4gICAgICBpZiAoaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIHJldHVybiBjb3B5KHNvdXJjZSwgW10sIHN0YWNrU291cmNlLCBzdGFja0Rlc3QpO1xuICAgICAgfSBlbHNlIGlmIChpc1R5cGVkQXJyYXkoc291cmNlKSkge1xuICAgICAgICBkZXN0aW5hdGlvbiA9IG5ldyBzb3VyY2UuY29uc3RydWN0b3Ioc291cmNlKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKHNvdXJjZSkpIHtcbiAgICAgICAgZGVzdGluYXRpb24gPSBuZXcgRGF0ZShzb3VyY2UuZ2V0VGltZSgpKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNSZWdFeHAoc291cmNlKSkge1xuICAgICAgICBkZXN0aW5hdGlvbiA9IG5ldyBSZWdFeHAoc291cmNlLnNvdXJjZSwgc291cmNlLnRvU3RyaW5nKCkubWF0Y2goL1teXFwvXSokLylbMF0pO1xuICAgICAgICBkZXN0aW5hdGlvbi5sYXN0SW5kZXggPSBzb3VyY2UubGFzdEluZGV4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmNyZWF0ZShnZXRQcm90b3R5cGVPZihzb3VyY2UpKTtcbiAgICAgICAgcmV0dXJuIGNvcHkoc291cmNlLCBlbXB0eU9iamVjdCwgc3RhY2tTb3VyY2UsIHN0YWNrRGVzdCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGFja0Rlc3QpIHtcbiAgICAgICAgc3RhY2tTb3VyY2UucHVzaChzb3VyY2UpO1xuICAgICAgICBzdGFja0Rlc3QucHVzaChkZXN0aW5hdGlvbik7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChzb3VyY2UgPT09IGRlc3RpbmF0aW9uKSB0aHJvdyBuZ01pbkVycignY3BpJyxcbiAgICAgIFwiQ2FuJ3QgY29weSEgU291cmNlIGFuZCBkZXN0aW5hdGlvbiBhcmUgaWRlbnRpY2FsLlwiKTtcblxuICAgIHN0YWNrU291cmNlID0gc3RhY2tTb3VyY2UgfHwgW107XG4gICAgc3RhY2tEZXN0ID0gc3RhY2tEZXN0IHx8IFtdO1xuXG4gICAgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHN0YWNrU291cmNlLnB1c2goc291cmNlKTtcbiAgICAgIHN0YWNrRGVzdC5wdXNoKGRlc3RpbmF0aW9uKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0LCBrZXk7XG4gICAgaWYgKGlzQXJyYXkoc291cmNlKSkge1xuICAgICAgZGVzdGluYXRpb24ubGVuZ3RoID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGRlc3RpbmF0aW9uLnB1c2goY29weShzb3VyY2VbaV0sIG51bGwsIHN0YWNrU291cmNlLCBzdGFja0Rlc3QpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGggPSBkZXN0aW5hdGlvbi4kJGhhc2hLZXk7XG4gICAgICBpZiAoaXNBcnJheShkZXN0aW5hdGlvbikpIHtcbiAgICAgICAgZGVzdGluYXRpb24ubGVuZ3RoID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvckVhY2goZGVzdGluYXRpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICBkZWxldGUgZGVzdGluYXRpb25ba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNCbGFua09iamVjdChzb3VyY2UpKSB7XG4gICAgICAgIC8vIGNyZWF0ZU1hcCgpIGZhc3QgcGF0aCAtLS0gU2FmZSB0byBhdm9pZCBoYXNPd25Qcm9wZXJ0eSBjaGVjayBiZWNhdXNlIHByb3RvdHlwZSBjaGFpbiBpcyBlbXB0eVxuICAgICAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY29weShzb3VyY2Vba2V5XSwgbnVsbCwgc3RhY2tTb3VyY2UsIHN0YWNrRGVzdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc291cmNlICYmIHR5cGVvZiBzb3VyY2UuaGFzT3duUHJvcGVydHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gU2xvdyBwYXRoLCB3aGljaCBtdXN0IHJlbHkgb24gaGFzT3duUHJvcGVydHlcbiAgICAgICAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY29weShzb3VyY2Vba2V5XSwgbnVsbCwgc3RhY2tTb3VyY2UsIHN0YWNrRGVzdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTbG93ZXN0IHBhdGggLS0tIGhhc093blByb3BlcnR5IGNhbid0IGJlIGNhbGxlZCBhcyBhIG1ldGhvZFxuICAgICAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBjb3B5KHNvdXJjZVtrZXldLCBudWxsLCBzdGFja1NvdXJjZSwgc3RhY2tEZXN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNldEhhc2hLZXkoZGVzdGluYXRpb24saCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkZXN0aW5hdGlvbjtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc2hhbGxvdyBjb3B5IG9mIGFuIG9iamVjdCwgYW4gYXJyYXkgb3IgYSBwcmltaXRpdmUuXG4gKlxuICogQXNzdW1lcyB0aGF0IHRoZXJlIGFyZSBubyBwcm90byBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLlxuICovXG5mdW5jdGlvbiBzaGFsbG93Q29weShzcmMsIGRzdCkge1xuICBpZiAoaXNBcnJheShzcmMpKSB7XG4gICAgZHN0ID0gZHN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gc3JjLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGRzdFtpXSA9IHNyY1tpXTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3Qoc3JjKSkge1xuICAgIGRzdCA9IGRzdCB8fCB7fTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICAgIGlmICghKGtleS5jaGFyQXQoMCkgPT09ICckJyAmJiBrZXkuY2hhckF0KDEpID09PSAnJCcpKSB7XG4gICAgICAgIGRzdFtrZXldID0gc3JjW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRzdCB8fCBzcmM7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuZXF1YWxzXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiB0d28gb2JqZWN0cyBvciB0d28gdmFsdWVzIGFyZSBlcXVpdmFsZW50LiBTdXBwb3J0cyB2YWx1ZSB0eXBlcywgcmVndWxhclxuICogZXhwcmVzc2lvbnMsIGFycmF5cyBhbmQgb2JqZWN0cy5cbiAqXG4gKiBUd28gb2JqZWN0cyBvciB2YWx1ZXMgYXJlIGNvbnNpZGVyZWQgZXF1aXZhbGVudCBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyB0cnVlOlxuICpcbiAqICogQm90aCBvYmplY3RzIG9yIHZhbHVlcyBwYXNzIGA9PT1gIGNvbXBhcmlzb24uXG4gKiAqIEJvdGggb2JqZWN0cyBvciB2YWx1ZXMgYXJlIG9mIHRoZSBzYW1lIHR5cGUgYW5kIGFsbCBvZiB0aGVpciBwcm9wZXJ0aWVzIGFyZSBlcXVhbCBieVxuICogICBjb21wYXJpbmcgdGhlbSB3aXRoIGBhbmd1bGFyLmVxdWFsc2AuXG4gKiAqIEJvdGggdmFsdWVzIGFyZSBOYU4uIChJbiBKYXZhU2NyaXB0LCBOYU4gPT0gTmFOID0+IGZhbHNlLiBCdXQgd2UgY29uc2lkZXIgdHdvIE5hTiBhcyBlcXVhbClcbiAqICogQm90aCB2YWx1ZXMgcmVwcmVzZW50IHRoZSBzYW1lIHJlZ3VsYXIgZXhwcmVzc2lvbiAoSW4gSmF2YVNjcmlwdCxcbiAqICAgL2FiYy8gPT0gL2FiYy8gPT4gZmFsc2UuIEJ1dCB3ZSBjb25zaWRlciB0d28gcmVndWxhciBleHByZXNzaW9ucyBhcyBlcXVhbCB3aGVuIHRoZWlyIHRleHR1YWxcbiAqICAgcmVwcmVzZW50YXRpb24gbWF0Y2hlcykuXG4gKlxuICogRHVyaW5nIGEgcHJvcGVydHkgY29tcGFyaXNvbiwgcHJvcGVydGllcyBvZiBgZnVuY3Rpb25gIHR5cGUgYW5kIHByb3BlcnRpZXMgd2l0aCBuYW1lc1xuICogdGhhdCBiZWdpbiB3aXRoIGAkYCBhcmUgaWdub3JlZC5cbiAqXG4gKiBTY29wZSBhbmQgRE9NV2luZG93IG9iamVjdHMgYXJlIGJlaW5nIGNvbXBhcmVkIG9ubHkgYnkgaWRlbnRpZnkgKGA9PT1gKS5cbiAqXG4gKiBAcGFyYW0geyp9IG8xIE9iamVjdCBvciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvMiBPYmplY3Qgb3IgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGFyZ3VtZW50cyBhcmUgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIGVxdWFscyhvMSwgbzIpIHtcbiAgaWYgKG8xID09PSBvMikgcmV0dXJuIHRydWU7XG4gIGlmIChvMSA9PT0gbnVsbCB8fCBvMiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICBpZiAobzEgIT09IG8xICYmIG8yICE9PSBvMikgcmV0dXJuIHRydWU7IC8vIE5hTiA9PT0gTmFOXG4gIHZhciB0MSA9IHR5cGVvZiBvMSwgdDIgPSB0eXBlb2YgbzIsIGxlbmd0aCwga2V5LCBrZXlTZXQ7XG4gIGlmICh0MSA9PSB0Mikge1xuICAgIGlmICh0MSA9PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKGlzQXJyYXkobzEpKSB7XG4gICAgICAgIGlmICghaXNBcnJheShvMikpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKChsZW5ndGggPSBvMS5sZW5ndGgpID09IG8yLmxlbmd0aCkge1xuICAgICAgICAgIGZvciAoa2V5ID0gMDsga2V5IDwgbGVuZ3RoOyBrZXkrKykge1xuICAgICAgICAgICAgaWYgKCFlcXVhbHMobzFba2V5XSwgbzJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKG8xKSkge1xuICAgICAgICBpZiAoIWlzRGF0ZShvMikpIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGVxdWFscyhvMS5nZXRUaW1lKCksIG8yLmdldFRpbWUoKSk7XG4gICAgICB9IGVsc2UgaWYgKGlzUmVnRXhwKG8xKSkge1xuICAgICAgICByZXR1cm4gaXNSZWdFeHAobzIpID8gbzEudG9TdHJpbmcoKSA9PSBvMi50b1N0cmluZygpIDogZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNTY29wZShvMSkgfHwgaXNTY29wZShvMikgfHwgaXNXaW5kb3cobzEpIHx8IGlzV2luZG93KG8yKSB8fFxuICAgICAgICAgIGlzQXJyYXkobzIpIHx8IGlzRGF0ZShvMikgfHwgaXNSZWdFeHAobzIpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGtleVNldCA9IGNyZWF0ZU1hcCgpO1xuICAgICAgICBmb3IgKGtleSBpbiBvMSkge1xuICAgICAgICAgIGlmIChrZXkuY2hhckF0KDApID09PSAnJCcgfHwgaXNGdW5jdGlvbihvMVtrZXldKSkgY29udGludWU7XG4gICAgICAgICAgaWYgKCFlcXVhbHMobzFba2V5XSwgbzJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBrZXlTZXRba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChrZXkgaW4gbzIpIHtcbiAgICAgICAgICBpZiAoIShrZXkgaW4ga2V5U2V0KSAmJlxuICAgICAgICAgICAgICBrZXkuY2hhckF0KDApICE9PSAnJCcgJiZcbiAgICAgICAgICAgICAgbzJba2V5XSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICFpc0Z1bmN0aW9uKG8yW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxudmFyIGNzcCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoaXNEZWZpbmVkKGNzcC5pc0FjdGl2ZV8pKSByZXR1cm4gY3NwLmlzQWN0aXZlXztcblxuICB2YXIgYWN0aXZlID0gISEoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW25nLWNzcF0nKSB8fFxuICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtbmctY3NwXScpKTtcblxuICBpZiAoIWFjdGl2ZSkge1xuICAgIHRyeSB7XG4gICAgICAvKiBqc2hpbnQgLVcwMzEsIC1XMDU0ICovXG4gICAgICBuZXcgRnVuY3Rpb24oJycpO1xuICAgICAgLyoganNoaW50ICtXMDMxLCArVzA1NCAqL1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGFjdGl2ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChjc3AuaXNBY3RpdmVfID0gYWN0aXZlKTtcbn07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG1vZHVsZSBuZ1xuICogQG5hbWUgbmdKcVxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0pxIHRoZSBuYW1lIG9mIHRoZSBsaWJyYXJ5IGF2YWlsYWJsZSB1bmRlciBgd2luZG93YFxuICogdG8gYmUgdXNlZCBmb3IgYW5ndWxhci5lbGVtZW50XG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSB0aGlzIGRpcmVjdGl2ZSB0byBmb3JjZSB0aGUgYW5ndWxhci5lbGVtZW50IGxpYnJhcnkuICBUaGlzIHNob3VsZCBiZVxuICogdXNlZCB0byBmb3JjZSBlaXRoZXIganFMaXRlIGJ5IGxlYXZpbmcgbmctanEgYmxhbmsgb3Igc2V0dGluZyB0aGUgbmFtZSBvZlxuICogdGhlIGpxdWVyeSB2YXJpYWJsZSB1bmRlciB3aW5kb3cgKGVnLiBqUXVlcnkpLlxuICpcbiAqIFNpbmNlIGFuZ3VsYXIgbG9va3MgZm9yIHRoaXMgZGlyZWN0aXZlIHdoZW4gaXQgaXMgbG9hZGVkIChkb2Vzbid0IHdhaXQgZm9yIHRoZVxuICogRE9NQ29udGVudExvYWRlZCBldmVudCksIGl0IG11c3QgYmUgcGxhY2VkIG9uIGFuIGVsZW1lbnQgdGhhdCBjb21lcyBiZWZvcmUgdGhlIHNjcmlwdFxuICogd2hpY2ggbG9hZHMgYW5ndWxhci4gQWxzbywgb25seSB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgYG5nLWpxYCB3aWxsIGJlIHVzZWQgYW5kIGFsbFxuICogb3RoZXJzIGlnbm9yZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgdG8gZm9yY2UganFMaXRlIHVzaW5nIHRoZSBgbmdKcWAgZGlyZWN0aXZlIHRvIHRoZSBgaHRtbGAgdGFnLlxuIGBgYGh0bWxcbiA8IWRvY3R5cGUgaHRtbD5cbiA8aHRtbCBuZy1hcHAgbmctanE+XG4gLi4uXG4gLi4uXG4gPC9odG1sPlxuIGBgYFxuICogQGV4YW1wbGVcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgdG8gdXNlIGEgalF1ZXJ5IGJhc2VkIGxpYnJhcnkgb2YgYSBkaWZmZXJlbnQgbmFtZS5cbiAqIFRoZSBsaWJyYXJ5IG5hbWUgbXVzdCBiZSBhdmFpbGFibGUgYXQgdGhlIHRvcCBtb3N0ICd3aW5kb3cnLlxuIGBgYGh0bWxcbiA8IWRvY3R5cGUgaHRtbD5cbiA8aHRtbCBuZy1hcHAgbmctanE9XCJqUXVlcnlMaWJcIj5cbiAuLi5cbiAuLi5cbiA8L2h0bWw+XG4gYGBgXG4gKi9cbnZhciBqcSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoaXNEZWZpbmVkKGpxLm5hbWVfKSkgcmV0dXJuIGpxLm5hbWVfO1xuICB2YXIgZWw7XG4gIHZhciBpLCBpaSA9IG5nQXR0clByZWZpeGVzLmxlbmd0aCwgcHJlZml4LCBuYW1lO1xuICBmb3IgKGkgPSAwOyBpIDwgaWk7ICsraSkge1xuICAgIHByZWZpeCA9IG5nQXR0clByZWZpeGVzW2ldO1xuICAgIGlmIChlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1snICsgcHJlZml4LnJlcGxhY2UoJzonLCAnXFxcXDonKSArICdqcV0nKSkge1xuICAgICAgbmFtZSA9IGVsLmdldEF0dHJpYnV0ZShwcmVmaXggKyAnanEnKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoanEubmFtZV8gPSBuYW1lKTtcbn07XG5cbmZ1bmN0aW9uIGNvbmNhdChhcnJheTEsIGFycmF5MiwgaW5kZXgpIHtcbiAgcmV0dXJuIGFycmF5MS5jb25jYXQoc2xpY2UuY2FsbChhcnJheTIsIGluZGV4KSk7XG59XG5cbmZ1bmN0aW9uIHNsaWNlQXJncyhhcmdzLCBzdGFydEluZGV4KSB7XG4gIHJldHVybiBzbGljZS5jYWxsKGFyZ3MsIHN0YXJ0SW5kZXggfHwgMCk7XG59XG5cblxuLyoganNoaW50IC1XMTAxICovXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5iaW5kXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGNhbGxzIGZ1bmN0aW9uIGBmbmAgYm91bmQgdG8gYHNlbGZgIChgc2VsZmAgYmVjb21lcyB0aGUgYHRoaXNgIGZvclxuICogYGZuYCkuIFlvdSBjYW4gc3VwcGx5IG9wdGlvbmFsIGBhcmdzYCB0aGF0IGFyZSBwcmVib3VuZCB0byB0aGUgZnVuY3Rpb24uIFRoaXMgZmVhdHVyZSBpcyBhbHNvXG4gKiBrbm93biBhcyBbcGFydGlhbCBhcHBsaWNhdGlvbl0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QYXJ0aWFsX2FwcGxpY2F0aW9uKSwgYXNcbiAqIGRpc3Rpbmd1aXNoZWQgZnJvbSBbZnVuY3Rpb24gY3VycnlpbmddKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3VycnlpbmcjQ29udHJhc3Rfd2l0aF9wYXJ0aWFsX2Z1bmN0aW9uX2FwcGxpY2F0aW9uKS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc2VsZiBDb250ZXh0IHdoaWNoIGBmbmAgc2hvdWxkIGJlIGV2YWx1YXRlZCBpbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gRnVuY3Rpb24gdG8gYmUgYm91bmQuXG4gKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgYXJndW1lbnRzIHRvIGJlIHByZWJvdW5kIHRvIHRoZSBgZm5gIGZ1bmN0aW9uIGNhbGwuXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gRnVuY3Rpb24gdGhhdCB3cmFwcyB0aGUgYGZuYCB3aXRoIGFsbCB0aGUgc3BlY2lmaWVkIGJpbmRpbmdzLlxuICovXG4vKiBqc2hpbnQgK1cxMDEgKi9cbmZ1bmN0aW9uIGJpbmQoc2VsZiwgZm4pIHtcbiAgdmFyIGN1cnJ5QXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gc2xpY2VBcmdzKGFyZ3VtZW50cywgMikgOiBbXTtcbiAgaWYgKGlzRnVuY3Rpb24oZm4pICYmICEoZm4gaW5zdGFuY2VvZiBSZWdFeHApKSB7XG4gICAgcmV0dXJuIGN1cnJ5QXJncy5sZW5ndGhcbiAgICAgID8gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgICAgID8gZm4uYXBwbHkoc2VsZiwgY29uY2F0KGN1cnJ5QXJncywgYXJndW1lbnRzLCAwKSlcbiAgICAgICAgICAgIDogZm4uYXBwbHkoc2VsZiwgY3VycnlBcmdzKTtcbiAgICAgICAgfVxuICAgICAgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICAgICAgPyBmbi5hcHBseShzZWxmLCBhcmd1bWVudHMpXG4gICAgICAgICAgICA6IGZuLmNhbGwoc2VsZik7XG4gICAgICAgIH07XG4gIH0gZWxzZSB7XG4gICAgLy8gaW4gSUUsIG5hdGl2ZSBtZXRob2RzIGFyZSBub3QgZnVuY3Rpb25zIHNvIHRoZXkgY2Fubm90IGJlIGJvdW5kIChub3RlOiB0aGV5IGRvbid0IG5lZWQgdG8gYmUpXG4gICAgcmV0dXJuIGZuO1xuICB9XG59XG5cblxuZnVuY3Rpb24gdG9Kc29uUmVwbGFjZXIoa2V5LCB2YWx1ZSkge1xuICB2YXIgdmFsID0gdmFsdWU7XG5cbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleS5jaGFyQXQoMCkgPT09ICckJyAmJiBrZXkuY2hhckF0KDEpID09PSAnJCcpIHtcbiAgICB2YWwgPSB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAoaXNXaW5kb3codmFsdWUpKSB7XG4gICAgdmFsID0gJyRXSU5ET1cnO1xuICB9IGVsc2UgaWYgKHZhbHVlICYmICBkb2N1bWVudCA9PT0gdmFsdWUpIHtcbiAgICB2YWwgPSAnJERPQ1VNRU5UJztcbiAgfSBlbHNlIGlmIChpc1Njb3BlKHZhbHVlKSkge1xuICAgIHZhbCA9ICckU0NPUEUnO1xuICB9XG5cbiAgcmV0dXJuIHZhbDtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci50b0pzb25cbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTZXJpYWxpemVzIGlucHV0IGludG8gYSBKU09OLWZvcm1hdHRlZCBzdHJpbmcuIFByb3BlcnRpZXMgd2l0aCBsZWFkaW5nICQkIGNoYXJhY3RlcnMgd2lsbCBiZVxuICogc3RyaXBwZWQgc2luY2UgYW5ndWxhciB1c2VzIHRoaXMgbm90YXRpb24gaW50ZXJuYWxseS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheXxEYXRlfHN0cmluZ3xudW1iZXJ9IG9iaiBJbnB1dCB0byBiZSBzZXJpYWxpemVkIGludG8gSlNPTi5cbiAqIEBwYXJhbSB7Ym9vbGVhbnxudW1iZXJ9IFtwcmV0dHk9Ml0gSWYgc2V0IHRvIHRydWUsIHRoZSBKU09OIG91dHB1dCB3aWxsIGNvbnRhaW4gbmV3bGluZXMgYW5kIHdoaXRlc3BhY2UuXG4gKiAgICBJZiBzZXQgdG8gYW4gaW50ZWdlciwgdGhlIEpTT04gb3V0cHV0IHdpbGwgY29udGFpbiB0aGF0IG1hbnkgc3BhY2VzIHBlciBpbmRlbnRhdGlvbi5cbiAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBKU09OLWlmaWVkIHN0cmluZyByZXByZXNlbnRpbmcgYG9iamAuXG4gKi9cbmZ1bmN0aW9uIHRvSnNvbihvYmosIHByZXR0eSkge1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiB1bmRlZmluZWQ7XG4gIGlmICghaXNOdW1iZXIocHJldHR5KSkge1xuICAgIHByZXR0eSA9IHByZXR0eSA/IDIgOiBudWxsO1xuICB9XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIHRvSnNvblJlcGxhY2VyLCBwcmV0dHkpO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmZyb21Kc29uXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGVzZXJpYWxpemVzIGEgSlNPTiBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGpzb24gSlNPTiBzdHJpbmcgdG8gZGVzZXJpYWxpemUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fEFycmF5fHN0cmluZ3xudW1iZXJ9IERlc2VyaWFsaXplZCBKU09OIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZnJvbUpzb24oanNvbikge1xuICByZXR1cm4gaXNTdHJpbmcoanNvbilcbiAgICAgID8gSlNPTi5wYXJzZShqc29uKVxuICAgICAgOiBqc29uO1xufVxuXG5cbmZ1bmN0aW9uIHRpbWV6b25lVG9PZmZzZXQodGltZXpvbmUsIGZhbGxiYWNrKSB7XG4gIHZhciByZXF1ZXN0ZWRUaW1lem9uZU9mZnNldCA9IERhdGUucGFyc2UoJ0phbiAwMSwgMTk3MCAwMDowMDowMCAnICsgdGltZXpvbmUpIC8gNjAwMDA7XG4gIHJldHVybiBpc05hTihyZXF1ZXN0ZWRUaW1lem9uZU9mZnNldCkgPyBmYWxsYmFjayA6IHJlcXVlc3RlZFRpbWV6b25lT2Zmc2V0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZERhdGVNaW51dGVzKGRhdGUsIG1pbnV0ZXMpIHtcbiAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTtcbiAgZGF0ZS5zZXRNaW51dGVzKGRhdGUuZ2V0TWludXRlcygpICsgbWludXRlcyk7XG4gIHJldHVybiBkYXRlO1xufVxuXG5cbmZ1bmN0aW9uIGNvbnZlcnRUaW1lem9uZVRvTG9jYWwoZGF0ZSwgdGltZXpvbmUsIHJldmVyc2UpIHtcbiAgcmV2ZXJzZSA9IHJldmVyc2UgPyAtMSA6IDE7XG4gIHZhciB0aW1lem9uZU9mZnNldCA9IHRpbWV6b25lVG9PZmZzZXQodGltZXpvbmUsIGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gIHJldHVybiBhZGREYXRlTWludXRlcyhkYXRlLCByZXZlcnNlICogKHRpbWV6b25lT2Zmc2V0IC0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKSk7XG59XG5cblxuLyoqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0aW5nVGFnKGVsZW1lbnQpIHtcbiAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KS5jbG9uZSgpO1xuICB0cnkge1xuICAgIC8vIHR1cm5zIG91dCBJRSBkb2VzIG5vdCBsZXQgeW91IHNldCAuaHRtbCgpIG9uIGVsZW1lbnRzIHdoaWNoXG4gICAgLy8gYXJlIG5vdCBhbGxvd2VkIHRvIGhhdmUgY2hpbGRyZW4uIFNvIHdlIGp1c3QgaWdub3JlIGl0LlxuICAgIGVsZW1lbnQuZW1wdHkoKTtcbiAgfSBjYXRjaCAoZSkge31cbiAgdmFyIGVsZW1IdG1sID0ganFMaXRlKCc8ZGl2PicpLmFwcGVuZChlbGVtZW50KS5odG1sKCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVsZW1lbnRbMF0ubm9kZVR5cGUgPT09IE5PREVfVFlQRV9URVhUID8gbG93ZXJjYXNlKGVsZW1IdG1sKSA6XG4gICAgICAgIGVsZW1IdG1sLlxuICAgICAgICAgIG1hdGNoKC9eKDxbXj5dKz4pLylbMV0uXG4gICAgICAgICAgcmVwbGFjZSgvXjwoW1xcd1xcLV0rKS8sIGZ1bmN0aW9uKG1hdGNoLCBub2RlTmFtZSkgeyByZXR1cm4gJzwnICsgbG93ZXJjYXNlKG5vZGVOYW1lKTsgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbG93ZXJjYXNlKGVsZW1IdG1sKTtcbiAgfVxuXG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIFRyaWVzIHRvIGRlY29kZSB0aGUgVVJJIGNvbXBvbmVudCB3aXRob3V0IHRocm93aW5nIGFuIGV4Y2VwdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHN0ciB2YWx1ZSBwb3RlbnRpYWwgVVJJIGNvbXBvbmVudCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgY2FuIGJlIGRlY29kZWRcbiAqIHdpdGggdGhlIGRlY29kZVVSSUNvbXBvbmVudCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdHJ5RGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJZ25vcmUgYW55IGludmFsaWQgdXJpIGNvbXBvbmVudFxuICB9XG59XG5cblxuLyoqXG4gKiBQYXJzZXMgYW4gZXNjYXBlZCB1cmwgcXVlcnkgc3RyaW5nIGludG8ga2V5LXZhbHVlIHBhaXJzLlxuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLGJvb2xlYW58QXJyYXk+fVxuICovXG5mdW5jdGlvbiBwYXJzZUtleVZhbHVlKC8qKnN0cmluZyova2V5VmFsdWUpIHtcbiAgdmFyIG9iaiA9IHt9LCBrZXlfdmFsdWUsIGtleTtcbiAgZm9yRWFjaCgoa2V5VmFsdWUgfHwgXCJcIikuc3BsaXQoJyYnKSwgZnVuY3Rpb24oa2V5VmFsdWUpIHtcbiAgICBpZiAoa2V5VmFsdWUpIHtcbiAgICAgIGtleV92YWx1ZSA9IGtleVZhbHVlLnJlcGxhY2UoL1xcKy9nLCclMjAnKS5zcGxpdCgnPScpO1xuICAgICAga2V5ID0gdHJ5RGVjb2RlVVJJQ29tcG9uZW50KGtleV92YWx1ZVswXSk7XG4gICAgICBpZiAoaXNEZWZpbmVkKGtleSkpIHtcbiAgICAgICAgdmFyIHZhbCA9IGlzRGVmaW5lZChrZXlfdmFsdWVbMV0pID8gdHJ5RGVjb2RlVVJJQ29tcG9uZW50KGtleV92YWx1ZVsxXSkgOiB0cnVlO1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgb2JqW2tleV0gPSB2YWw7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmpba2V5XSkpIHtcbiAgICAgICAgICBvYmpba2V5XS5wdXNoKHZhbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2JqW2tleV0gPSBbb2JqW2tleV0sdmFsXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIHRvS2V5VmFsdWUob2JqKSB7XG4gIHZhciBwYXJ0cyA9IFtdO1xuICBmb3JFYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24oYXJyYXlWYWx1ZSkge1xuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSwgdHJ1ZSkgK1xuICAgICAgICAgICAgICAgICAgIChhcnJheVZhbHVlID09PSB0cnVlID8gJycgOiAnPScgKyBlbmNvZGVVcmlRdWVyeShhcnJheVZhbHVlLCB0cnVlKSkpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSwgdHJ1ZSkgK1xuICAgICAgICAgICAgICAgKHZhbHVlID09PSB0cnVlID8gJycgOiAnPScgKyBlbmNvZGVVcmlRdWVyeSh2YWx1ZSwgdHJ1ZSkpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcGFydHMubGVuZ3RoID8gcGFydHMuam9pbignJicpIDogJyc7XG59XG5cblxuLyoqXG4gKiBXZSBuZWVkIG91ciBjdXN0b20gbWV0aG9kIGJlY2F1c2UgZW5jb2RlVVJJQ29tcG9uZW50IGlzIHRvbyBhZ2dyZXNzaXZlIGFuZCBkb2Vzbid0IGZvbGxvd1xuICogaHR0cDovL3d3dy5pZXRmLm9yZy9yZmMvcmZjMzk4Ni50eHQgd2l0aCByZWdhcmRzIHRvIHRoZSBjaGFyYWN0ZXIgc2V0IChwY2hhcikgYWxsb3dlZCBpbiBwYXRoXG4gKiBzZWdtZW50czpcbiAqICAgIHNlZ21lbnQgICAgICAgPSAqcGNoYXJcbiAqICAgIHBjaGFyICAgICAgICAgPSB1bnJlc2VydmVkIC8gcGN0LWVuY29kZWQgLyBzdWItZGVsaW1zIC8gXCI6XCIgLyBcIkBcIlxuICogICAgcGN0LWVuY29kZWQgICA9IFwiJVwiIEhFWERJRyBIRVhESUdcbiAqICAgIHVucmVzZXJ2ZWQgICAgPSBBTFBIQSAvIERJR0lUIC8gXCItXCIgLyBcIi5cIiAvIFwiX1wiIC8gXCJ+XCJcbiAqICAgIHN1Yi1kZWxpbXMgICAgPSBcIiFcIiAvIFwiJFwiIC8gXCImXCIgLyBcIidcIiAvIFwiKFwiIC8gXCIpXCJcbiAqICAgICAgICAgICAgICAgICAgICAgLyBcIipcIiAvIFwiK1wiIC8gXCIsXCIgLyBcIjtcIiAvIFwiPVwiXG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVyaVNlZ21lbnQodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVcmlRdWVyeSh2YWwsIHRydWUpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyNi9naSwgJyYnKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lM0QvZ2ksICc9JykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTJCL2dpLCAnKycpO1xufVxuXG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgaW50ZW5kZWQgZm9yIGVuY29kaW5nICprZXkqIG9yICp2YWx1ZSogcGFydHMgb2YgcXVlcnkgY29tcG9uZW50LiBXZSBuZWVkIGEgY3VzdG9tXG4gKiBtZXRob2QgYmVjYXVzZSBlbmNvZGVVUklDb21wb25lbnQgaXMgdG9vIGFnZ3Jlc3NpdmUgYW5kIGVuY29kZXMgc3R1ZmYgdGhhdCBkb2Vzbid0IGhhdmUgdG8gYmVcbiAqIGVuY29kZWQgcGVyIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODY6XG4gKiAgICBxdWVyeSAgICAgICA9ICooIHBjaGFyIC8gXCIvXCIgLyBcIj9cIiApXG4gKiAgICBwY2hhciAgICAgICAgID0gdW5yZXNlcnZlZCAvIHBjdC1lbmNvZGVkIC8gc3ViLWRlbGltcyAvIFwiOlwiIC8gXCJAXCJcbiAqICAgIHVucmVzZXJ2ZWQgICAgPSBBTFBIQSAvIERJR0lUIC8gXCItXCIgLyBcIi5cIiAvIFwiX1wiIC8gXCJ+XCJcbiAqICAgIHBjdC1lbmNvZGVkICAgPSBcIiVcIiBIRVhESUcgSEVYRElHXG4gKiAgICBzdWItZGVsaW1zICAgID0gXCIhXCIgLyBcIiRcIiAvIFwiJlwiIC8gXCInXCIgLyBcIihcIiAvIFwiKVwiXG4gKiAgICAgICAgICAgICAgICAgICAgIC8gXCIqXCIgLyBcIitcIiAvIFwiLFwiIC8gXCI7XCIgLyBcIj1cIlxuICovXG5mdW5jdGlvbiBlbmNvZGVVcmlRdWVyeSh2YWwsIHBjdEVuY29kZVNwYWNlcykge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTNCL2dpLCAnOycpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyMC9nLCAocGN0RW5jb2RlU3BhY2VzID8gJyUyMCcgOiAnKycpKTtcbn1cblxudmFyIG5nQXR0clByZWZpeGVzID0gWyduZy0nLCAnZGF0YS1uZy0nLCAnbmc6JywgJ3gtbmctJ107XG5cbmZ1bmN0aW9uIGdldE5nQXR0cmlidXRlKGVsZW1lbnQsIG5nQXR0cikge1xuICB2YXIgYXR0ciwgaSwgaWkgPSBuZ0F0dHJQcmVmaXhlcy5sZW5ndGg7XG4gIGZvciAoaSA9IDA7IGkgPCBpaTsgKytpKSB7XG4gICAgYXR0ciA9IG5nQXR0clByZWZpeGVzW2ldICsgbmdBdHRyO1xuICAgIGlmIChpc1N0cmluZyhhdHRyID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cikpKSB7XG4gICAgICByZXR1cm4gYXR0cjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdBcHBcbiAqIEBtb2R1bGUgbmdcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7YW5ndWxhci5Nb2R1bGV9IG5nQXBwIGFuIG9wdGlvbmFsIGFwcGxpY2F0aW9uXG4gKiAgIHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGV9IG5hbWUgdG8gbG9hZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG5nU3RyaWN0RGkgaWYgdGhpcyBhdHRyaWJ1dGUgaXMgcHJlc2VudCBvbiB0aGUgYXBwIGVsZW1lbnQsIHRoZSBpbmplY3RvciB3aWxsIGJlXG4gKiAgIGNyZWF0ZWQgaW4gXCJzdHJpY3QtZGlcIiBtb2RlLiBUaGlzIG1lYW5zIHRoYXQgdGhlIGFwcGxpY2F0aW9uIHdpbGwgZmFpbCB0byBpbnZva2UgZnVuY3Rpb25zIHdoaWNoXG4gKiAgIGRvIG5vdCB1c2UgZXhwbGljaXQgZnVuY3Rpb24gYW5ub3RhdGlvbiAoYW5kIGFyZSB0aHVzIHVuc3VpdGFibGUgZm9yIG1pbmlmaWNhdGlvbiksIGFzIGRlc2NyaWJlZFxuICogICBpbiB7QGxpbmsgZ3VpZGUvZGkgdGhlIERlcGVuZGVuY3kgSW5qZWN0aW9uIGd1aWRlfSwgYW5kIHVzZWZ1bCBkZWJ1Z2dpbmcgaW5mbyB3aWxsIGFzc2lzdCBpblxuICogICB0cmFja2luZyBkb3duIHRoZSByb290IG9mIHRoZXNlIGJ1Z3MuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVXNlIHRoaXMgZGlyZWN0aXZlIHRvICoqYXV0by1ib290c3RyYXAqKiBhbiBBbmd1bGFySlMgYXBwbGljYXRpb24uIFRoZSBgbmdBcHBgIGRpcmVjdGl2ZVxuICogZGVzaWduYXRlcyB0aGUgKipyb290IGVsZW1lbnQqKiBvZiB0aGUgYXBwbGljYXRpb24gYW5kIGlzIHR5cGljYWxseSBwbGFjZWQgbmVhciB0aGUgcm9vdCBlbGVtZW50XG4gKiBvZiB0aGUgcGFnZSAtIGUuZy4gb24gdGhlIGA8Ym9keT5gIG9yIGA8aHRtbD5gIHRhZ3MuXG4gKlxuICogT25seSBvbmUgQW5ndWxhckpTIGFwcGxpY2F0aW9uIGNhbiBiZSBhdXRvLWJvb3RzdHJhcHBlZCBwZXIgSFRNTCBkb2N1bWVudC4gVGhlIGZpcnN0IGBuZ0FwcGBcbiAqIGZvdW5kIGluIHRoZSBkb2N1bWVudCB3aWxsIGJlIHVzZWQgdG8gZGVmaW5lIHRoZSByb290IGVsZW1lbnQgdG8gYXV0by1ib290c3RyYXAgYXMgYW5cbiAqIGFwcGxpY2F0aW9uLiBUbyBydW4gbXVsdGlwbGUgYXBwbGljYXRpb25zIGluIGFuIEhUTUwgZG9jdW1lbnQgeW91IG11c3QgbWFudWFsbHkgYm9vdHN0cmFwIHRoZW0gdXNpbmdcbiAqIHtAbGluayBhbmd1bGFyLmJvb3RzdHJhcH0gaW5zdGVhZC4gQW5ndWxhckpTIGFwcGxpY2F0aW9ucyBjYW5ub3QgYmUgbmVzdGVkIHdpdGhpbiBlYWNoIG90aGVyLlxuICpcbiAqIFlvdSBjYW4gc3BlY2lmeSBhbiAqKkFuZ3VsYXJKUyBtb2R1bGUqKiB0byBiZSB1c2VkIGFzIHRoZSByb290IG1vZHVsZSBmb3IgdGhlIGFwcGxpY2F0aW9uLiAgVGhpc1xuICogbW9kdWxlIHdpbGwgYmUgbG9hZGVkIGludG8gdGhlIHtAbGluayBhdXRvLiRpbmplY3Rvcn0gd2hlbiB0aGUgYXBwbGljYXRpb24gaXMgYm9vdHN0cmFwcGVkLiBJdFxuICogc2hvdWxkIGNvbnRhaW4gdGhlIGFwcGxpY2F0aW9uIGNvZGUgbmVlZGVkIG9yIGhhdmUgZGVwZW5kZW5jaWVzIG9uIG90aGVyIG1vZHVsZXMgdGhhdCB3aWxsXG4gKiBjb250YWluIHRoZSBjb2RlLiBTZWUge0BsaW5rIGFuZ3VsYXIubW9kdWxlfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBJbiB0aGUgZXhhbXBsZSBiZWxvdyBpZiB0aGUgYG5nQXBwYCBkaXJlY3RpdmUgd2VyZSBub3QgcGxhY2VkIG9uIHRoZSBgaHRtbGAgZWxlbWVudCB0aGVuIHRoZVxuICogZG9jdW1lbnQgd291bGQgbm90IGJlIGNvbXBpbGVkLCB0aGUgYEFwcENvbnRyb2xsZXJgIHdvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgYW5kIHRoZSBge3sgYStiIH19YFxuICogd291bGQgbm90IGJlIHJlc29sdmVkIHRvIGAzYC5cbiAqXG4gKiBgbmdBcHBgIGlzIHRoZSBlYXNpZXN0LCBhbmQgbW9zdCBjb21tb24gd2F5IHRvIGJvb3RzdHJhcCBhbiBhcHBsaWNhdGlvbi5cbiAqXG4gPGV4YW1wbGUgbW9kdWxlPVwibmdBcHBEZW1vXCI+XG4gICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgPGRpdiBuZy1jb250cm9sbGVyPVwibmdBcHBEZW1vQ29udHJvbGxlclwiPlxuICAgICBJIGNhbiBhZGQ6IHt7YX19ICsge3tifX0gPSAge3sgYStiIH19XG4gICA8L2Rpdj5cbiAgIDwvZmlsZT5cbiAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgIGFuZ3VsYXIubW9kdWxlKCduZ0FwcERlbW8nLCBbXSkuY29udHJvbGxlcignbmdBcHBEZW1vQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAkc2NvcGUuYSA9IDE7XG4gICAgICRzY29wZS5iID0gMjtcbiAgIH0pO1xuICAgPC9maWxlPlxuIDwvZXhhbXBsZT5cbiAqXG4gKiBVc2luZyBgbmdTdHJpY3REaWAsIHlvdSB3b3VsZCBzZWUgc29tZXRoaW5nIGxpa2UgdGhpczpcbiAqXG4gPGV4YW1wbGUgbmctYXBwLWluY2x1ZGVkPVwidHJ1ZVwiPlxuICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgIDxkaXYgbmctYXBwPVwibmdBcHBTdHJpY3REZW1vXCIgbmctc3RyaWN0LWRpPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkdvb2RDb250cm9sbGVyMVwiPlxuICAgICAgICAgICBJIGNhbiBhZGQ6IHt7YX19ICsge3tifX0gPSAge3sgYStiIH19XG5cbiAgICAgICAgICAgPHA+VGhpcyByZW5kZXJzIGJlY2F1c2UgdGhlIGNvbnRyb2xsZXIgZG9lcyBub3QgZmFpbCB0b1xuICAgICAgICAgICAgICBpbnN0YW50aWF0ZSwgYnkgdXNpbmcgZXhwbGljaXQgYW5ub3RhdGlvbiBzdHlsZSAoc2VlXG4gICAgICAgICAgICAgIHNjcmlwdC5qcyBmb3IgZGV0YWlscylcbiAgICAgICAgICAgPC9wPlxuICAgICAgIDwvZGl2PlxuXG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiR29vZENvbnRyb2xsZXIyXCI+XG4gICAgICAgICAgIE5hbWU6IDxpbnB1dCBuZy1tb2RlbD1cIm5hbWVcIj48YnIgLz5cbiAgICAgICAgICAgSGVsbG8sIHt7bmFtZX19IVxuXG4gICAgICAgICAgIDxwPlRoaXMgcmVuZGVycyBiZWNhdXNlIHRoZSBjb250cm9sbGVyIGRvZXMgbm90IGZhaWwgdG9cbiAgICAgICAgICAgICAgaW5zdGFudGlhdGUsIGJ5IHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb24gc3R5bGVcbiAgICAgICAgICAgICAgKHNlZSBzY3JpcHQuanMgZm9yIGRldGFpbHMpXG4gICAgICAgICAgIDwvcD5cbiAgICAgICA8L2Rpdj5cblxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkJhZENvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgSSBjYW4gYWRkOiB7e2F9fSArIHt7Yn19ID0gIHt7IGErYiB9fVxuXG4gICAgICAgICAgIDxwPlRoZSBjb250cm9sbGVyIGNvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQsIGR1ZSB0byByZWx5aW5nXG4gICAgICAgICAgICAgIG9uIGF1dG9tYXRpYyBmdW5jdGlvbiBhbm5vdGF0aW9ucyAod2hpY2ggYXJlIGRpc2FibGVkIGluXG4gICAgICAgICAgICAgIHN0cmljdCBtb2RlKS4gQXMgc3VjaCwgdGhlIGNvbnRlbnQgb2YgdGhpcyBzZWN0aW9uIGlzIG5vdFxuICAgICAgICAgICAgICBpbnRlcnBvbGF0ZWQsIGFuZCB0aGVyZSBzaG91bGQgYmUgYW4gZXJyb3IgaW4geW91ciB3ZWIgY29uc29sZS5cbiAgICAgICAgICAgPC9wPlxuICAgICAgIDwvZGl2PlxuICAgPC9kaXY+XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICBhbmd1bGFyLm1vZHVsZSgnbmdBcHBTdHJpY3REZW1vJywgW10pXG4gICAgIC8vIEJhZENvbnRyb2xsZXIgd2lsbCBmYWlsIHRvIGluc3RhbnRpYXRlLCBkdWUgdG8gcmVseWluZyBvbiBhdXRvbWF0aWMgZnVuY3Rpb24gYW5ub3RhdGlvbixcbiAgICAgLy8gcmF0aGVyIHRoYW4gYW4gZXhwbGljaXQgYW5ub3RhdGlvblxuICAgICAuY29udHJvbGxlcignQmFkQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICRzY29wZS5hID0gMTtcbiAgICAgICAkc2NvcGUuYiA9IDI7XG4gICAgIH0pXG4gICAgIC8vIFVubGlrZSBCYWRDb250cm9sbGVyLCBHb29kQ29udHJvbGxlcjEgYW5kIEdvb2RDb250cm9sbGVyMiB3aWxsIG5vdCBmYWlsIHRvIGJlIGluc3RhbnRpYXRlZCxcbiAgICAgLy8gZHVlIHRvIHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb25zIHVzaW5nIHRoZSBhcnJheSBzdHlsZSBhbmQgJGluamVjdCBwcm9wZXJ0eSwgcmVzcGVjdGl2ZWx5LlxuICAgICAuY29udHJvbGxlcignR29vZENvbnRyb2xsZXIxJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAkc2NvcGUuYSA9IDE7XG4gICAgICAgJHNjb3BlLmIgPSAyO1xuICAgICB9XSlcbiAgICAgLmNvbnRyb2xsZXIoJ0dvb2RDb250cm9sbGVyMicsIEdvb2RDb250cm9sbGVyMik7XG4gICAgIGZ1bmN0aW9uIEdvb2RDb250cm9sbGVyMigkc2NvcGUpIHtcbiAgICAgICAkc2NvcGUubmFtZSA9IFwiV29ybGRcIjtcbiAgICAgfVxuICAgICBHb29kQ29udHJvbGxlcjIuJGluamVjdCA9IFsnJHNjb3BlJ107XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICBkaXZbbmctY29udHJvbGxlcl0ge1xuICAgICAgIG1hcmdpbi1ib3R0b206IDFlbTtcbiAgICAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgYm9yZGVyOiAxcHggc29saWQ7XG4gICAgICAgcGFkZGluZzogLjVlbTtcbiAgIH1cbiAgIGRpdltuZy1jb250cm9sbGVyXj1Hb29kXSB7XG4gICAgICAgYm9yZGVyLWNvbG9yOiAjZDZlOWM2O1xuICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkZmYwZDg7XG4gICAgICAgY29sb3I6ICMzYzc2M2Q7XG4gICB9XG4gICBkaXZbbmctY29udHJvbGxlcl49QmFkXSB7XG4gICAgICAgYm9yZGVyLWNvbG9yOiAjZWJjY2QxO1xuICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmMmRlZGU7XG4gICAgICAgY29sb3I6ICNhOTQ0NDI7XG4gICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgIH1cbiAgIDwvZmlsZT5cbiA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uIGFuZ3VsYXJJbml0KGVsZW1lbnQsIGJvb3RzdHJhcCkge1xuICB2YXIgYXBwRWxlbWVudCxcbiAgICAgIG1vZHVsZSxcbiAgICAgIGNvbmZpZyA9IHt9O1xuXG4gIC8vIFRoZSBlbGVtZW50IGBlbGVtZW50YCBoYXMgcHJpb3JpdHkgb3ZlciBhbnkgb3RoZXIgZWxlbWVudFxuICBmb3JFYWNoKG5nQXR0clByZWZpeGVzLCBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICB2YXIgbmFtZSA9IHByZWZpeCArICdhcHAnO1xuXG4gICAgaWYgKCFhcHBFbGVtZW50ICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlKG5hbWUpKSB7XG4gICAgICBhcHBFbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIG1vZHVsZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIH1cbiAgfSk7XG4gIGZvckVhY2gobmdBdHRyUHJlZml4ZXMsIGZ1bmN0aW9uKHByZWZpeCkge1xuICAgIHZhciBuYW1lID0gcHJlZml4ICsgJ2FwcCc7XG4gICAgdmFyIGNhbmRpZGF0ZTtcblxuICAgIGlmICghYXBwRWxlbWVudCAmJiAoY2FuZGlkYXRlID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbJyArIG5hbWUucmVwbGFjZSgnOicsICdcXFxcOicpICsgJ10nKSkpIHtcbiAgICAgIGFwcEVsZW1lbnQgPSBjYW5kaWRhdGU7XG4gICAgICBtb2R1bGUgPSBjYW5kaWRhdGUuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIH1cbiAgfSk7XG4gIGlmIChhcHBFbGVtZW50KSB7XG4gICAgY29uZmlnLnN0cmljdERpID0gZ2V0TmdBdHRyaWJ1dGUoYXBwRWxlbWVudCwgXCJzdHJpY3QtZGlcIikgIT09IG51bGw7XG4gICAgYm9vdHN0cmFwKGFwcEVsZW1lbnQsIG1vZHVsZSA/IFttb2R1bGVdIDogW10sIGNvbmZpZyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuYm9vdHN0cmFwXG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIG1hbnVhbGx5IHN0YXJ0IHVwIGFuZ3VsYXIgYXBwbGljYXRpb24uXG4gKlxuICogU2VlOiB7QGxpbmsgZ3VpZGUvYm9vdHN0cmFwIEJvb3RzdHJhcH1cbiAqXG4gKiBOb3RlIHRoYXQgUHJvdHJhY3RvciBiYXNlZCBlbmQtdG8tZW5kIHRlc3RzIGNhbm5vdCB1c2UgdGhpcyBmdW5jdGlvbiB0byBib290c3RyYXAgbWFudWFsbHkuXG4gKiBUaGV5IG11c3QgdXNlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdBcHAgbmdBcHB9LlxuICpcbiAqIEFuZ3VsYXIgd2lsbCBkZXRlY3QgaWYgaXQgaGFzIGJlZW4gbG9hZGVkIGludG8gdGhlIGJyb3dzZXIgbW9yZSB0aGFuIG9uY2UgYW5kIG9ubHkgYWxsb3cgdGhlXG4gKiBmaXJzdCBsb2FkZWQgc2NyaXB0IHRvIGJlIGJvb3RzdHJhcHBlZCBhbmQgd2lsbCByZXBvcnQgYSB3YXJuaW5nIHRvIHRoZSBicm93c2VyIGNvbnNvbGUgZm9yXG4gKiBlYWNoIG9mIHRoZSBzdWJzZXF1ZW50IHNjcmlwdHMuIFRoaXMgcHJldmVudHMgc3RyYW5nZSByZXN1bHRzIGluIGFwcGxpY2F0aW9ucywgd2hlcmUgb3RoZXJ3aXNlXG4gKiBtdWx0aXBsZSBpbnN0YW5jZXMgb2YgQW5ndWxhciB0cnkgdG8gd29yayBvbiB0aGUgRE9NLlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhZG9jdHlwZSBodG1sPlxuICogPGh0bWw+XG4gKiA8Ym9keT5cbiAqIDxkaXYgbmctY29udHJvbGxlcj1cIldlbGNvbWVDb250cm9sbGVyXCI+XG4gKiAgIHt7Z3JlZXRpbmd9fVxuICogPC9kaXY+XG4gKlxuICogPHNjcmlwdCBzcmM9XCJhbmd1bGFyLmpzXCI+PC9zY3JpcHQ+XG4gKiA8c2NyaXB0PlxuICogICB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2RlbW8nLCBbXSlcbiAqICAgLmNvbnRyb2xsZXIoJ1dlbGNvbWVDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAkc2NvcGUuZ3JlZXRpbmcgPSAnV2VsY29tZSEnO1xuICogICB9KTtcbiAqICAgYW5ndWxhci5ib290c3RyYXAoZG9jdW1lbnQsIFsnZGVtbyddKTtcbiAqIDwvc2NyaXB0PlxuICogPC9ib2R5PlxuICogPC9odG1sPlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IERPTSBlbGVtZW50IHdoaWNoIGlzIHRoZSByb290IG9mIGFuZ3VsYXIgYXBwbGljYXRpb24uXG4gKiBAcGFyYW0ge0FycmF5PFN0cmluZ3xGdW5jdGlvbnxBcnJheT49fSBtb2R1bGVzIGFuIGFycmF5IG9mIG1vZHVsZXMgdG8gbG9hZCBpbnRvIHRoZSBhcHBsaWNhdGlvbi5cbiAqICAgICBFYWNoIGl0ZW0gaW4gdGhlIGFycmF5IHNob3VsZCBiZSB0aGUgbmFtZSBvZiBhIHByZWRlZmluZWQgbW9kdWxlIG9yIGEgKERJIGFubm90YXRlZClcbiAqICAgICBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCBieSB0aGUgaW5qZWN0b3IgYXMgYSBgY29uZmlnYCBibG9jay5cbiAqICAgICBTZWU6IHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGVzfVxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgYW4gb2JqZWN0IGZvciBkZWZpbmluZyBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBhcHBsaWNhdGlvbi4gVGhlXG4gKiAgICAgZm9sbG93aW5nIGtleXMgYXJlIHN1cHBvcnRlZDpcbiAqXG4gKiAqIGBzdHJpY3REaWAgLSBkaXNhYmxlIGF1dG9tYXRpYyBmdW5jdGlvbiBhbm5vdGF0aW9uIGZvciB0aGUgYXBwbGljYXRpb24uIFRoaXMgaXMgbWVhbnQgdG9cbiAqICAgYXNzaXN0IGluIGZpbmRpbmcgYnVncyB3aGljaCBicmVhayBtaW5pZmllZCBjb2RlLiBEZWZhdWx0cyB0byBgZmFsc2VgLlxuICpcbiAqIEByZXR1cm5zIHthdXRvLiRpbmplY3Rvcn0gUmV0dXJucyB0aGUgbmV3bHkgY3JlYXRlZCBpbmplY3RvciBmb3IgdGhpcyBhcHAuXG4gKi9cbmZ1bmN0aW9uIGJvb3RzdHJhcChlbGVtZW50LCBtb2R1bGVzLCBjb25maWcpIHtcbiAgaWYgKCFpc09iamVjdChjb25maWcpKSBjb25maWcgPSB7fTtcbiAgdmFyIGRlZmF1bHRDb25maWcgPSB7XG4gICAgc3RyaWN0RGk6IGZhbHNlXG4gIH07XG4gIGNvbmZpZyA9IGV4dGVuZChkZWZhdWx0Q29uZmlnLCBjb25maWcpO1xuICB2YXIgZG9Cb290c3RyYXAgPSBmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50ID0ganFMaXRlKGVsZW1lbnQpO1xuXG4gICAgaWYgKGVsZW1lbnQuaW5qZWN0b3IoKSkge1xuICAgICAgdmFyIHRhZyA9IChlbGVtZW50WzBdID09PSBkb2N1bWVudCkgPyAnZG9jdW1lbnQnIDogc3RhcnRpbmdUYWcoZWxlbWVudCk7XG4gICAgICAvL0VuY29kZSBhbmdsZSBicmFja2V0cyB0byBwcmV2ZW50IGlucHV0IGZyb20gYmVpbmcgc2FuaXRpemVkIHRvIGVtcHR5IHN0cmluZyAjODY4M1xuICAgICAgdGhyb3cgbmdNaW5FcnIoXG4gICAgICAgICAgJ2J0c3RycGQnLFxuICAgICAgICAgIFwiQXBwIEFscmVhZHkgQm9vdHN0cmFwcGVkIHdpdGggdGhpcyBFbGVtZW50ICd7MH0nXCIsXG4gICAgICAgICAgdGFnLnJlcGxhY2UoLzwvLCcmbHQ7JykucmVwbGFjZSgvPi8sJyZndDsnKSk7XG4gICAgfVxuXG4gICAgbW9kdWxlcyA9IG1vZHVsZXMgfHwgW107XG4gICAgbW9kdWxlcy51bnNoaWZ0KFsnJHByb3ZpZGUnLCBmdW5jdGlvbigkcHJvdmlkZSkge1xuICAgICAgJHByb3ZpZGUudmFsdWUoJyRyb290RWxlbWVudCcsIGVsZW1lbnQpO1xuICAgIH1dKTtcblxuICAgIGlmIChjb25maWcuZGVidWdJbmZvRW5hYmxlZCkge1xuICAgICAgLy8gUHVzaGluZyBzbyB0aGF0IHRoaXMgb3ZlcnJpZGVzIGBkZWJ1Z0luZm9FbmFibGVkYCBzZXR0aW5nIGRlZmluZWQgaW4gdXNlcidzIGBtb2R1bGVzYC5cbiAgICAgIG1vZHVsZXMucHVzaChbJyRjb21waWxlUHJvdmlkZXInLCBmdW5jdGlvbigkY29tcGlsZVByb3ZpZGVyKSB7XG4gICAgICAgICRjb21waWxlUHJvdmlkZXIuZGVidWdJbmZvRW5hYmxlZCh0cnVlKTtcbiAgICAgIH1dKTtcbiAgICB9XG5cbiAgICBtb2R1bGVzLnVuc2hpZnQoJ25nJyk7XG4gICAgdmFyIGluamVjdG9yID0gY3JlYXRlSW5qZWN0b3IobW9kdWxlcywgY29uZmlnLnN0cmljdERpKTtcbiAgICBpbmplY3Rvci5pbnZva2UoWyckcm9vdFNjb3BlJywgJyRyb290RWxlbWVudCcsICckY29tcGlsZScsICckaW5qZWN0b3InLFxuICAgICAgIGZ1bmN0aW9uIGJvb3RzdHJhcEFwcGx5KHNjb3BlLCBlbGVtZW50LCBjb21waWxlLCBpbmplY3Rvcikge1xuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudC5kYXRhKCckaW5qZWN0b3InLCBpbmplY3Rvcik7XG4gICAgICAgICAgY29tcGlsZShlbGVtZW50KShzY29wZSk7XG4gICAgICAgIH0pO1xuICAgICAgfV1cbiAgICApO1xuICAgIHJldHVybiBpbmplY3RvcjtcbiAgfTtcblxuICB2YXIgTkdfRU5BQkxFX0RFQlVHX0lORk8gPSAvXk5HX0VOQUJMRV9ERUJVR19JTkZPIS87XG4gIHZhciBOR19ERUZFUl9CT09UU1RSQVAgPSAvXk5HX0RFRkVSX0JPT1RTVFJBUCEvO1xuXG4gIGlmICh3aW5kb3cgJiYgTkdfRU5BQkxFX0RFQlVHX0lORk8udGVzdCh3aW5kb3cubmFtZSkpIHtcbiAgICBjb25maWcuZGVidWdJbmZvRW5hYmxlZCA9IHRydWU7XG4gICAgd2luZG93Lm5hbWUgPSB3aW5kb3cubmFtZS5yZXBsYWNlKE5HX0VOQUJMRV9ERUJVR19JTkZPLCAnJyk7XG4gIH1cblxuICBpZiAod2luZG93ICYmICFOR19ERUZFUl9CT09UU1RSQVAudGVzdCh3aW5kb3cubmFtZSkpIHtcbiAgICByZXR1cm4gZG9Cb290c3RyYXAoKTtcbiAgfVxuXG4gIHdpbmRvdy5uYW1lID0gd2luZG93Lm5hbWUucmVwbGFjZShOR19ERUZFUl9CT09UU1RSQVAsICcnKTtcbiAgYW5ndWxhci5yZXN1bWVCb290c3RyYXAgPSBmdW5jdGlvbihleHRyYU1vZHVsZXMpIHtcbiAgICBmb3JFYWNoKGV4dHJhTW9kdWxlcywgZnVuY3Rpb24obW9kdWxlKSB7XG4gICAgICBtb2R1bGVzLnB1c2gobW9kdWxlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZG9Cb290c3RyYXAoKTtcbiAgfTtcblxuICBpZiAoaXNGdW5jdGlvbihhbmd1bGFyLnJlc3VtZURlZmVycmVkQm9vdHN0cmFwKSkge1xuICAgIGFuZ3VsYXIucmVzdW1lRGVmZXJyZWRCb290c3RyYXAoKTtcbiAgfVxufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5yZWxvYWRXaXRoRGVidWdJbmZvXG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIHJlbG9hZCB0aGUgY3VycmVudCBhcHBsaWNhdGlvbiB3aXRoIGRlYnVnIGluZm9ybWF0aW9uIHR1cm5lZCBvbi5cbiAqIFRoaXMgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGEgY2FsbCB0byBgJGNvbXBpbGVQcm92aWRlci5kZWJ1Z0luZm9FbmFibGVkKGZhbHNlKWAuXG4gKlxuICogU2VlIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RlYnVnSW5mb0VuYWJsZWR9IGZvciBtb3JlLlxuICovXG5mdW5jdGlvbiByZWxvYWRXaXRoRGVidWdJbmZvKCkge1xuICB3aW5kb3cubmFtZSA9ICdOR19FTkFCTEVfREVCVUdfSU5GTyEnICsgd2luZG93Lm5hbWU7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbn1cblxuLyoqXG4gKiBAbmFtZSBhbmd1bGFyLmdldFRlc3RhYmlsaXR5XG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgdGVzdGFiaWxpdHkgc2VydmljZSBmb3IgdGhlIGluc3RhbmNlIG9mIEFuZ3VsYXIgb24gdGhlIGdpdmVuXG4gKiBlbGVtZW50LlxuICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IERPTSBlbGVtZW50IHdoaWNoIGlzIHRoZSByb290IG9mIGFuZ3VsYXIgYXBwbGljYXRpb24uXG4gKi9cbmZ1bmN0aW9uIGdldFRlc3RhYmlsaXR5KHJvb3RFbGVtZW50KSB7XG4gIHZhciBpbmplY3RvciA9IGFuZ3VsYXIuZWxlbWVudChyb290RWxlbWVudCkuaW5qZWN0b3IoKTtcbiAgaWYgKCFpbmplY3Rvcikge1xuICAgIHRocm93IG5nTWluRXJyKCd0ZXN0JyxcbiAgICAgICdubyBpbmplY3RvciBmb3VuZCBmb3IgZWxlbWVudCBhcmd1bWVudCB0byBnZXRUZXN0YWJpbGl0eScpO1xuICB9XG4gIHJldHVybiBpbmplY3Rvci5nZXQoJyQkdGVzdGFiaWxpdHknKTtcbn1cblxudmFyIFNOQUtFX0NBU0VfUkVHRVhQID0gL1tBLVpdL2c7XG5mdW5jdGlvbiBzbmFrZV9jYXNlKG5hbWUsIHNlcGFyYXRvcikge1xuICBzZXBhcmF0b3IgPSBzZXBhcmF0b3IgfHwgJ18nO1xuICByZXR1cm4gbmFtZS5yZXBsYWNlKFNOQUtFX0NBU0VfUkVHRVhQLCBmdW5jdGlvbihsZXR0ZXIsIHBvcykge1xuICAgIHJldHVybiAocG9zID8gc2VwYXJhdG9yIDogJycpICsgbGV0dGVyLnRvTG93ZXJDYXNlKCk7XG4gIH0pO1xufVxuXG52YXIgYmluZEpRdWVyeUZpcmVkID0gZmFsc2U7XG52YXIgc2tpcERlc3Ryb3lPbk5leHRKUXVlcnlDbGVhbkRhdGE7XG5mdW5jdGlvbiBiaW5kSlF1ZXJ5KCkge1xuICB2YXIgb3JpZ2luYWxDbGVhbkRhdGE7XG5cbiAgaWYgKGJpbmRKUXVlcnlGaXJlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGJpbmQgdG8galF1ZXJ5IGlmIHByZXNlbnQ7XG4gIHZhciBqcU5hbWUgPSBqcSgpO1xuICBqUXVlcnkgPSB3aW5kb3cualF1ZXJ5OyAvLyB1c2UgZGVmYXVsdCBqUXVlcnkuXG4gIGlmIChpc0RlZmluZWQoanFOYW1lKSkgeyAvLyBgbmdKcWAgcHJlc2VudFxuICAgIGpRdWVyeSA9IGpxTmFtZSA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IHdpbmRvd1tqcU5hbWVdOyAvLyBpZiBlbXB0eTsgdXNlIGpxTGl0ZS4gaWYgbm90IGVtcHR5LCB1c2UgalF1ZXJ5IHNwZWNpZmllZCBieSBgbmdKcWAuXG4gIH1cblxuICAvLyBVc2UgalF1ZXJ5IGlmIGl0IGV4aXN0cyB3aXRoIHByb3BlciBmdW5jdGlvbmFsaXR5LCBvdGhlcndpc2UgZGVmYXVsdCB0byB1cy5cbiAgLy8gQW5ndWxhciAxLjIrIHJlcXVpcmVzIGpRdWVyeSAxLjcrIGZvciBvbigpL29mZigpIHN1cHBvcnQuXG4gIC8vIEFuZ3VsYXIgMS4zKyB0ZWNobmljYWxseSByZXF1aXJlcyBhdCBsZWFzdCBqUXVlcnkgMi4xKyBidXQgaXQgbWF5IHdvcmsgd2l0aCBvbGRlclxuICAvLyB2ZXJzaW9ucy4gSXQgd2lsbCBub3Qgd29yayBmb3Igc3VyZSB3aXRoIGpRdWVyeSA8MS43LCB0aG91Z2guXG4gIGlmIChqUXVlcnkgJiYgalF1ZXJ5LmZuLm9uKSB7XG4gICAganFMaXRlID0galF1ZXJ5O1xuICAgIGV4dGVuZChqUXVlcnkuZm4sIHtcbiAgICAgIHNjb3BlOiBKUUxpdGVQcm90b3R5cGUuc2NvcGUsXG4gICAgICBpc29sYXRlU2NvcGU6IEpRTGl0ZVByb3RvdHlwZS5pc29sYXRlU2NvcGUsXG4gICAgICBjb250cm9sbGVyOiBKUUxpdGVQcm90b3R5cGUuY29udHJvbGxlcixcbiAgICAgIGluamVjdG9yOiBKUUxpdGVQcm90b3R5cGUuaW5qZWN0b3IsXG4gICAgICBpbmhlcml0ZWREYXRhOiBKUUxpdGVQcm90b3R5cGUuaW5oZXJpdGVkRGF0YVxuICAgIH0pO1xuXG4gICAgLy8gQWxsIG5vZGVzIHJlbW92ZWQgZnJvbSB0aGUgRE9NIHZpYSB2YXJpb3VzIGpRdWVyeSBBUElzIGxpa2UgLnJlbW92ZSgpXG4gICAgLy8gYXJlIHBhc3NlZCB0aHJvdWdoIGpRdWVyeS5jbGVhbkRhdGEuIE1vbmtleS1wYXRjaCB0aGlzIG1ldGhvZCB0byBmaXJlXG4gICAgLy8gdGhlICRkZXN0cm95IGV2ZW50IG9uIGFsbCByZW1vdmVkIG5vZGVzLlxuICAgIG9yaWdpbmFsQ2xlYW5EYXRhID0galF1ZXJ5LmNsZWFuRGF0YTtcbiAgICBqUXVlcnkuY2xlYW5EYXRhID0gZnVuY3Rpb24oZWxlbXMpIHtcbiAgICAgIHZhciBldmVudHM7XG4gICAgICBpZiAoIXNraXBEZXN0cm95T25OZXh0SlF1ZXJ5Q2xlYW5EYXRhKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBlbGVtOyAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKyspIHtcbiAgICAgICAgICBldmVudHMgPSBqUXVlcnkuX2RhdGEoZWxlbSwgXCJldmVudHNcIik7XG4gICAgICAgICAgaWYgKGV2ZW50cyAmJiBldmVudHMuJGRlc3Ryb3kpIHtcbiAgICAgICAgICAgIGpRdWVyeShlbGVtKS50cmlnZ2VySGFuZGxlcignJGRlc3Ryb3knKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNraXBEZXN0cm95T25OZXh0SlF1ZXJ5Q2xlYW5EYXRhID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBvcmlnaW5hbENsZWFuRGF0YShlbGVtcyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBqcUxpdGUgPSBKUUxpdGU7XG4gIH1cblxuICBhbmd1bGFyLmVsZW1lbnQgPSBqcUxpdGU7XG5cbiAgLy8gUHJldmVudCBkb3VibGUtcHJveHlpbmcuXG4gIGJpbmRKUXVlcnlGaXJlZCA9IHRydWU7XG59XG5cbi8qKlxuICogdGhyb3cgZXJyb3IgaWYgdGhlIGFyZ3VtZW50IGlzIGZhbHN5LlxuICovXG5mdW5jdGlvbiBhc3NlcnRBcmcoYXJnLCBuYW1lLCByZWFzb24pIHtcbiAgaWYgKCFhcmcpIHtcbiAgICB0aHJvdyBuZ01pbkVycignYXJlcScsIFwiQXJndW1lbnQgJ3swfScgaXMgezF9XCIsIChuYW1lIHx8ICc/JyksIChyZWFzb24gfHwgXCJyZXF1aXJlZFwiKSk7XG4gIH1cbiAgcmV0dXJuIGFyZztcbn1cblxuZnVuY3Rpb24gYXNzZXJ0QXJnRm4oYXJnLCBuYW1lLCBhY2NlcHRBcnJheUFubm90YXRpb24pIHtcbiAgaWYgKGFjY2VwdEFycmF5QW5ub3RhdGlvbiAmJiBpc0FycmF5KGFyZykpIHtcbiAgICAgIGFyZyA9IGFyZ1thcmcubGVuZ3RoIC0gMV07XG4gIH1cblxuICBhc3NlcnRBcmcoaXNGdW5jdGlvbihhcmcpLCBuYW1lLCAnbm90IGEgZnVuY3Rpb24sIGdvdCAnICtcbiAgICAgIChhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgPyBhcmcuY29uc3RydWN0b3IubmFtZSB8fCAnT2JqZWN0JyA6IHR5cGVvZiBhcmcpKTtcbiAgcmV0dXJuIGFyZztcbn1cblxuLyoqXG4gKiB0aHJvdyBlcnJvciBpZiB0aGUgbmFtZSBnaXZlbiBpcyBoYXNPd25Qcm9wZXJ0eVxuICogQHBhcmFtICB7U3RyaW5nfSBuYW1lICAgIHRoZSBuYW1lIHRvIHRlc3RcbiAqIEBwYXJhbSAge1N0cmluZ30gY29udGV4dCB0aGUgY29udGV4dCBpbiB3aGljaCB0aGUgbmFtZSBpcyB1c2VkLCBzdWNoIGFzIG1vZHVsZSBvciBkaXJlY3RpdmVcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgY29udGV4dCkge1xuICBpZiAobmFtZSA9PT0gJ2hhc093blByb3BlcnR5Jykge1xuICAgIHRocm93IG5nTWluRXJyKCdiYWRuYW1lJywgXCJoYXNPd25Qcm9wZXJ0eSBpcyBub3QgYSB2YWxpZCB7MH0gbmFtZVwiLCBjb250ZXh0KTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgdmFsdWUgYWNjZXNzaWJsZSBmcm9tIHRoZSBvYmplY3QgYnkgcGF0aC4gQW55IHVuZGVmaW5lZCB0cmF2ZXJzYWxzIGFyZSBpZ25vcmVkXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIHN0YXJ0aW5nIG9iamVjdFxuICogQHBhcmFtIHtTdHJpbmd9IHBhdGggcGF0aCB0byB0cmF2ZXJzZVxuICogQHBhcmFtIHtib29sZWFufSBbYmluZEZuVG9TY29wZT10cnVlXVxuICogQHJldHVybnMge09iamVjdH0gdmFsdWUgYXMgYWNjZXNzaWJsZSBieSBwYXRoXG4gKi9cbi8vVE9ETyhtaXNrbyk6IHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmVtb3ZlZFxuZnVuY3Rpb24gZ2V0dGVyKG9iaiwgcGF0aCwgYmluZEZuVG9TY29wZSkge1xuICBpZiAoIXBhdGgpIHJldHVybiBvYmo7XG4gIHZhciBrZXlzID0gcGF0aC5zcGxpdCgnLicpO1xuICB2YXIga2V5O1xuICB2YXIgbGFzdEluc3RhbmNlID0gb2JqO1xuICB2YXIgbGVuID0ga2V5cy5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgaWYgKG9iaikge1xuICAgICAgb2JqID0gKGxhc3RJbnN0YW5jZSA9IG9iailba2V5XTtcbiAgICB9XG4gIH1cbiAgaWYgKCFiaW5kRm5Ub1Njb3BlICYmIGlzRnVuY3Rpb24ob2JqKSkge1xuICAgIHJldHVybiBiaW5kKGxhc3RJbnN0YW5jZSwgb2JqKTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgRE9NIHNpYmxpbmdzIGJldHdlZW4gdGhlIGZpcnN0IGFuZCBsYXN0IG5vZGUgaW4gdGhlIGdpdmVuIGFycmF5LlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgbGlrZSBvYmplY3RcbiAqIEByZXR1cm5zIHtqcUxpdGV9IGpxTGl0ZSBjb2xsZWN0aW9uIGNvbnRhaW5pbmcgdGhlIG5vZGVzXG4gKi9cbmZ1bmN0aW9uIGdldEJsb2NrTm9kZXMobm9kZXMpIHtcbiAgLy8gVE9ETyhwZXJmKToganVzdCBjaGVjayBpZiBhbGwgaXRlbXMgaW4gYG5vZGVzYCBhcmUgc2libGluZ3MgYW5kIGlmIHRoZXkgYXJlIHJldHVybiB0aGUgb3JpZ2luYWxcbiAgLy8gICAgICAgICAgICAgY29sbGVjdGlvbiwgb3RoZXJ3aXNlIHVwZGF0ZSB0aGUgb3JpZ2luYWwgY29sbGVjdGlvbi5cbiAgdmFyIG5vZGUgPSBub2Rlc1swXTtcbiAgdmFyIGVuZE5vZGUgPSBub2Rlc1tub2Rlcy5sZW5ndGggLSAxXTtcbiAgdmFyIGJsb2NrTm9kZXMgPSBbbm9kZV07XG5cbiAgZG8ge1xuICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgIGlmICghbm9kZSkgYnJlYWs7XG4gICAgYmxvY2tOb2Rlcy5wdXNoKG5vZGUpO1xuICB9IHdoaWxlIChub2RlICE9PSBlbmROb2RlKTtcblxuICByZXR1cm4ganFMaXRlKGJsb2NrTm9kZXMpO1xufVxuXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBvYmplY3Qgd2l0aG91dCBhIHByb3RvdHlwZS4gVGhpcyBvYmplY3QgaXMgdXNlZnVsIGZvciBsb29rdXAgd2l0aG91dCBoYXZpbmcgdG9cbiAqIGd1YXJkIGFnYWluc3QgcHJvdG90eXBpY2FsbHkgaW5oZXJpdGVkIHByb3BlcnRpZXMgdmlhIGhhc093blByb3BlcnR5LlxuICpcbiAqIFJlbGF0ZWQgbWljcm8tYmVuY2htYXJrczpcbiAqIC0gaHR0cDovL2pzcGVyZi5jb20vb2JqZWN0LWNyZWF0ZTJcbiAqIC0gaHR0cDovL2pzcGVyZi5jb20vcHJvdG8tbWFwLWxvb2t1cC8yXG4gKiAtIGh0dHA6Ly9qc3BlcmYuY29tL2Zvci1pbi12cy1vYmplY3Qta2V5czJcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBjcmVhdGVNYXAoKSB7XG4gIHJldHVybiBPYmplY3QuY3JlYXRlKG51bGwpO1xufVxuXG52YXIgTk9ERV9UWVBFX0VMRU1FTlQgPSAxO1xudmFyIE5PREVfVFlQRV9BVFRSSUJVVEUgPSAyO1xudmFyIE5PREVfVFlQRV9URVhUID0gMztcbnZhciBOT0RFX1RZUEVfQ09NTUVOVCA9IDg7XG52YXIgTk9ERV9UWVBFX0RPQ1VNRU5UID0gOTtcbnZhciBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQgPSAxMTtcblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgYW5ndWxhci5Nb2R1bGVcbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEludGVyZmFjZSBmb3IgY29uZmlndXJpbmcgYW5ndWxhciB7QGxpbmsgYW5ndWxhci5tb2R1bGUgbW9kdWxlc30uXG4gKi9cblxuZnVuY3Rpb24gc2V0dXBNb2R1bGVMb2FkZXIod2luZG93KSB7XG5cbiAgdmFyICRpbmplY3Rvck1pbkVyciA9IG1pbkVycignJGluamVjdG9yJyk7XG4gIHZhciBuZ01pbkVyciA9IG1pbkVycignbmcnKTtcblxuICBmdW5jdGlvbiBlbnN1cmUob2JqLCBuYW1lLCBmYWN0b3J5KSB7XG4gICAgcmV0dXJuIG9ialtuYW1lXSB8fCAob2JqW25hbWVdID0gZmFjdG9yeSgpKTtcbiAgfVxuXG4gIHZhciBhbmd1bGFyID0gZW5zdXJlKHdpbmRvdywgJ2FuZ3VsYXInLCBPYmplY3QpO1xuXG4gIC8vIFdlIG5lZWQgdG8gZXhwb3NlIGBhbmd1bGFyLiQkbWluRXJyYCB0byBtb2R1bGVzIHN1Y2ggYXMgYG5nUmVzb3VyY2VgIHRoYXQgcmVmZXJlbmNlIGl0IGR1cmluZyBib290c3RyYXBcbiAgYW5ndWxhci4kJG1pbkVyciA9IGFuZ3VsYXIuJCRtaW5FcnIgfHwgbWluRXJyO1xuXG4gIHJldHVybiBlbnN1cmUoYW5ndWxhciwgJ21vZHVsZScsIGZ1bmN0aW9uKCkge1xuICAgIC8qKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsIGFuZ3VsYXIuTW9kdWxlPn0gKi9cbiAgICB2YXIgbW9kdWxlcyA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgYW5ndWxhci5tb2R1bGVcbiAgICAgKiBAbW9kdWxlIG5nXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBUaGUgYGFuZ3VsYXIubW9kdWxlYCBpcyBhIGdsb2JhbCBwbGFjZSBmb3IgY3JlYXRpbmcsIHJlZ2lzdGVyaW5nIGFuZCByZXRyaWV2aW5nIEFuZ3VsYXJcbiAgICAgKiBtb2R1bGVzLlxuICAgICAqIEFsbCBtb2R1bGVzIChhbmd1bGFyIGNvcmUgb3IgM3JkIHBhcnR5KSB0aGF0IHNob3VsZCBiZSBhdmFpbGFibGUgdG8gYW4gYXBwbGljYXRpb24gbXVzdCBiZVxuICAgICAqIHJlZ2lzdGVyZWQgdXNpbmcgdGhpcyBtZWNoYW5pc20uXG4gICAgICpcbiAgICAgKiBXaGVuIHBhc3NlZCB0d28gb3IgbW9yZSBhcmd1bWVudHMsIGEgbmV3IG1vZHVsZSBpcyBjcmVhdGVkLiAgSWYgcGFzc2VkIG9ubHkgb25lIGFyZ3VtZW50LCBhblxuICAgICAqIGV4aXN0aW5nIG1vZHVsZSAodGhlIG5hbWUgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byBgbW9kdWxlYCkgaXMgcmV0cmlldmVkLlxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIE1vZHVsZVxuICAgICAqXG4gICAgICogQSBtb2R1bGUgaXMgYSBjb2xsZWN0aW9uIG9mIHNlcnZpY2VzLCBkaXJlY3RpdmVzLCBjb250cm9sbGVycywgZmlsdGVycywgYW5kIGNvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb24uXG4gICAgICogYGFuZ3VsYXIubW9kdWxlYCBpcyB1c2VkIHRvIGNvbmZpZ3VyZSB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIC8vIENyZWF0ZSBhIG5ldyBtb2R1bGVcbiAgICAgKiB2YXIgbXlNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnbXlNb2R1bGUnLCBbXSk7XG4gICAgICpcbiAgICAgKiAvLyByZWdpc3RlciBhIG5ldyBzZXJ2aWNlXG4gICAgICogbXlNb2R1bGUudmFsdWUoJ2FwcE5hbWUnLCAnTXlDb29sQXBwJyk7XG4gICAgICpcbiAgICAgKiAvLyBjb25maWd1cmUgZXhpc3Rpbmcgc2VydmljZXMgaW5zaWRlIGluaXRpYWxpemF0aW9uIGJsb2Nrcy5cbiAgICAgKiBteU1vZHVsZS5jb25maWcoWyckbG9jYXRpb25Qcm92aWRlcicsIGZ1bmN0aW9uKCRsb2NhdGlvblByb3ZpZGVyKSB7XG4gICAgICogICAvLyBDb25maWd1cmUgZXhpc3RpbmcgcHJvdmlkZXJzXG4gICAgICogICAkbG9jYXRpb25Qcm92aWRlci5oYXNoUHJlZml4KCchJyk7XG4gICAgICogfV0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhlbiB5b3UgY2FuIGNyZWF0ZSBhbiBpbmplY3RvciBhbmQgbG9hZCB5b3VyIG1vZHVsZXMgbGlrZSB0aGlzOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiB2YXIgaW5qZWN0b3IgPSBhbmd1bGFyLmluamVjdG9yKFsnbmcnLCAnbXlNb2R1bGUnXSlcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEhvd2V2ZXIgaXQncyBtb3JlIGxpa2VseSB0aGF0IHlvdSdsbCBqdXN0IHVzZVxuICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdBcHAgbmdBcHB9IG9yXG4gICAgICoge0BsaW5rIGFuZ3VsYXIuYm9vdHN0cmFwfSB0byBzaW1wbGlmeSB0aGlzIHByb2Nlc3MgZm9yIHlvdS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgbW9kdWxlIHRvIGNyZWF0ZSBvciByZXRyaWV2ZS5cbiAgICAgKiBAcGFyYW0geyFBcnJheS48c3RyaW5nPj19IHJlcXVpcmVzIElmIHNwZWNpZmllZCB0aGVuIG5ldyBtb2R1bGUgaXMgYmVpbmcgY3JlYXRlZC4gSWZcbiAgICAgKiAgICAgICAgdW5zcGVjaWZpZWQgdGhlbiB0aGUgbW9kdWxlIGlzIGJlaW5nIHJldHJpZXZlZCBmb3IgZnVydGhlciBjb25maWd1cmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBjb25maWdGbiBPcHRpb25hbCBjb25maWd1cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGUgbW9kdWxlLiBTYW1lIGFzXG4gICAgICogICAgICAgIHtAbGluayBhbmd1bGFyLk1vZHVsZSNjb25maWcgTW9kdWxlI2NvbmZpZygpfS5cbiAgICAgKiBAcmV0dXJucyB7bW9kdWxlfSBuZXcgbW9kdWxlIHdpdGggdGhlIHtAbGluayBhbmd1bGFyLk1vZHVsZX0gYXBpLlxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBtb2R1bGUobmFtZSwgcmVxdWlyZXMsIGNvbmZpZ0ZuKSB7XG4gICAgICB2YXIgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkgPSBmdW5jdGlvbihuYW1lLCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChuYW1lID09PSAnaGFzT3duUHJvcGVydHknKSB7XG4gICAgICAgICAgdGhyb3cgbmdNaW5FcnIoJ2JhZG5hbWUnLCAnaGFzT3duUHJvcGVydHkgaXMgbm90IGEgdmFsaWQgezB9IG5hbWUnLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ21vZHVsZScpO1xuICAgICAgaWYgKHJlcXVpcmVzICYmIG1vZHVsZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgbW9kdWxlc1tuYW1lXSA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW5zdXJlKG1vZHVsZXMsIG5hbWUsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXJlcXVpcmVzKSB7XG4gICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdub21vZCcsIFwiTW9kdWxlICd7MH0nIGlzIG5vdCBhdmFpbGFibGUhIFlvdSBlaXRoZXIgbWlzc3BlbGxlZCBcIiArXG4gICAgICAgICAgICAgXCJ0aGUgbW9kdWxlIG5hbWUgb3IgZm9yZ290IHRvIGxvYWQgaXQuIElmIHJlZ2lzdGVyaW5nIGEgbW9kdWxlIGVuc3VyZSB0aGF0IHlvdSBcIiArXG4gICAgICAgICAgICAgXCJzcGVjaWZ5IHRoZSBkZXBlbmRlbmNpZXMgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cIiwgbmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiogQHR5cGUgeyFBcnJheS48QXJyYXkuPCo+Pn0gKi9cbiAgICAgICAgdmFyIGludm9rZVF1ZXVlID0gW107XG5cbiAgICAgICAgLyoqIEB0eXBlIHshQXJyYXkuPEZ1bmN0aW9uPn0gKi9cbiAgICAgICAgdmFyIGNvbmZpZ0Jsb2NrcyA9IFtdO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7IUFycmF5LjxGdW5jdGlvbj59ICovXG4gICAgICAgIHZhciBydW5CbG9ja3MgPSBbXTtcblxuICAgICAgICB2YXIgY29uZmlnID0gaW52b2tlTGF0ZXIoJyRpbmplY3RvcicsICdpbnZva2UnLCAncHVzaCcsIGNvbmZpZ0Jsb2Nrcyk7XG5cbiAgICAgICAgLyoqIEB0eXBlIHthbmd1bGFyLk1vZHVsZX0gKi9cbiAgICAgICAgdmFyIG1vZHVsZUluc3RhbmNlID0ge1xuICAgICAgICAgIC8vIFByaXZhdGUgc3RhdGVcbiAgICAgICAgICBfaW52b2tlUXVldWU6IGludm9rZVF1ZXVlLFxuICAgICAgICAgIF9jb25maWdCbG9ja3M6IGNvbmZpZ0Jsb2NrcyxcbiAgICAgICAgICBfcnVuQmxvY2tzOiBydW5CbG9ja3MsXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNyZXF1aXJlc1xuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIEhvbGRzIHRoZSBsaXN0IG9mIG1vZHVsZXMgd2hpY2ggdGhlIGluamVjdG9yIHdpbGwgbG9hZCBiZWZvcmUgdGhlIGN1cnJlbnQgbW9kdWxlIGlzXG4gICAgICAgICAgICogbG9hZGVkLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHJlcXVpcmVzOiByZXF1aXJlcyxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI25hbWVcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBOYW1lIG9mIHRoZSBtb2R1bGUuXG4gICAgICAgICAgICovXG4gICAgICAgICAgbmFtZTogbmFtZSxcblxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3Byb3ZpZGVyXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3ZpZGVyVHlwZSBDb25zdHJ1Y3Rpb24gZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiB0aGVcbiAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZS5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjcHJvdmlkZXIgJHByb3ZpZGUucHJvdmlkZXIoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgcHJvdmlkZXI6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJHByb3ZpZGUnLCAncHJvdmlkZXInKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNmYWN0b3J5XG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3ZpZGVyRnVuY3Rpb24gRnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiB0aGUgc2VydmljZS5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjZmFjdG9yeSAkcHJvdmlkZS5mYWN0b3J5KCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGZhY3Rvcnk6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJHByb3ZpZGUnLCAnZmFjdG9yeScpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3NlcnZpY2VcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW5zdGFudGlhdGVkLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNzZXJ2aWNlICRwcm92aWRlLnNlcnZpY2UoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgc2VydmljZTogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckcHJvdmlkZScsICdzZXJ2aWNlJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjdmFsdWVcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHsqfSBvYmplY3QgU2VydmljZSBpbnN0YW5jZSBvYmplY3QuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI3ZhbHVlICRwcm92aWRlLnZhbHVlKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHZhbHVlOiBpbnZva2VMYXRlcignJHByb3ZpZGUnLCAndmFsdWUnKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb25zdGFudFxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBjb25zdGFudCBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHsqfSBvYmplY3QgQ29uc3RhbnQgdmFsdWUuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogQmVjYXVzZSB0aGUgY29uc3RhbnQgYXJlIGZpeGVkLCB0aGV5IGdldCBhcHBsaWVkIGJlZm9yZSBvdGhlciBwcm92aWRlIG1ldGhvZHMuXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI2NvbnN0YW50ICRwcm92aWRlLmNvbnN0YW50KCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbnN0YW50OiBpbnZva2VMYXRlcignJHByb3ZpZGUnLCAnY29uc3RhbnQnLCAndW5zaGlmdCcpLFxuXG4gICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNkZWNvcmF0b3JcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlIHRvIGRlY29yYXRlLlxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIHNlcnZpY2UgbmVlZHMgdG8gYmVcbiAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbnRpYXRlZCBhbmQgc2hvdWxkIHJldHVybiB0aGUgZGVjb3JhdGVkIHNlcnZpY2UgaW5zdGFuY2UuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI2RlY29yYXRvciAkcHJvdmlkZS5kZWNvcmF0b3IoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgZGVjb3JhdG9yOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRwcm92aWRlJywgJ2RlY29yYXRvcicpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2FuaW1hdGlvblxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBhbmltYXRpb24gbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFuaW1hdGlvbkZhY3RvcnkgRmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIGFuXG4gICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiAqKk5PVEUqKjogYW5pbWF0aW9ucyB0YWtlIGVmZmVjdCBvbmx5IGlmIHRoZSAqKm5nQW5pbWF0ZSoqIG1vZHVsZSBpcyBsb2FkZWQuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIERlZmluZXMgYW4gYW5pbWF0aW9uIGhvb2sgdGhhdCBjYW4gYmUgbGF0ZXIgdXNlZCB3aXRoXG4gICAgICAgICAgICoge0BsaW5rICRhbmltYXRlICRhbmltYXRlfSBzZXJ2aWNlIGFuZCBkaXJlY3RpdmVzIHRoYXQgdXNlIHRoaXMgc2VydmljZS5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIGBgYGpzXG4gICAgICAgICAgICogbW9kdWxlLmFuaW1hdGlvbignLmFuaW1hdGlvbi1uYW1lJywgZnVuY3Rpb24oJGluamVjdDEsICRpbmplY3QyKSB7XG4gICAgICAgICAgICogICByZXR1cm4ge1xuICAgICAgICAgICAqICAgICBldmVudE5hbWUgOiBmdW5jdGlvbihlbGVtZW50LCBkb25lKSB7XG4gICAgICAgICAgICogICAgICAgLy9jb2RlIHRvIHJ1biB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICogICAgICAgLy9vbmNlIGNvbXBsZXRlLCB0aGVuIHJ1biBkb25lKClcbiAgICAgICAgICAgKiAgICAgICByZXR1cm4gZnVuY3Rpb24gY2FuY2VsbGF0aW9uRnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAqICAgICAgICAgLy9jb2RlIHRvIGNhbmNlbCB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICogICAgICAgfVxuICAgICAgICAgICAqICAgICB9XG4gICAgICAgICAgICogICB9XG4gICAgICAgICAgICogfSlcbiAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGFuaW1hdGVQcm92aWRlciNyZWdpc3RlciAkYW5pbWF0ZVByb3ZpZGVyLnJlZ2lzdGVyKCl9IGFuZFxuICAgICAgICAgICAqIHtAbGluayBuZ0FuaW1hdGUgbmdBbmltYXRlIG1vZHVsZX0gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICAgICAgICovXG4gICAgICAgICAgYW5pbWF0aW9uOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRhbmltYXRlUHJvdmlkZXInLCAncmVnaXN0ZXInKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNmaWx0ZXJcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRmlsdGVyIG5hbWUgLSB0aGlzIG11c3QgYmUgYSB2YWxpZCBhbmd1bGFyIGV4cHJlc3Npb24gaWRlbnRpZmllclxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbHRlckZhY3RvcnkgRmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIGZpbHRlci5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRmaWx0ZXJQcm92aWRlciNyZWdpc3RlciAkZmlsdGVyUHJvdmlkZXIucmVnaXN0ZXIoKX0uXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgICAgICAgICAqICoqTm90ZToqKiBGaWx0ZXIgbmFtZXMgbXVzdCBiZSB2YWxpZCBhbmd1bGFyIHtAbGluayBleHByZXNzaW9ufSBpZGVudGlmaWVycywgc3VjaCBhcyBgdXBwZXJjYXNlYCBvciBgb3JkZXJCeWAuXG4gICAgICAgICAgICogTmFtZXMgd2l0aCBzcGVjaWFsIGNoYXJhY3RlcnMsIHN1Y2ggYXMgaHlwaGVucyBhbmQgZG90cywgYXJlIG5vdCBhbGxvd2VkLiBJZiB5b3Ugd2lzaCB0byBuYW1lc3BhY2VcbiAgICAgICAgICAgKiB5b3VyIGZpbHRlcnMsIHRoZW4geW91IGNhbiB1c2UgY2FwaXRhbGl6YXRpb24gKGBteWFwcFN1YnNlY3Rpb25GaWx0ZXJ4YCkgb3IgdW5kZXJzY29yZXNcbiAgICAgICAgICAgKiAoYG15YXBwX3N1YnNlY3Rpb25fZmlsdGVyeGApLlxuICAgICAgICAgICAqIDwvZGl2PlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGZpbHRlcjogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckZmlsdGVyUHJvdmlkZXInLCAncmVnaXN0ZXInKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb250cm9sbGVyXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBDb250cm9sbGVyIG5hbWUsIG9yIGFuIG9iamVjdCBtYXAgb2YgY29udHJvbGxlcnMgd2hlcmUgdGhlXG4gICAgICAgICAgICogICAga2V5cyBhcmUgdGhlIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgY29uc3RydWN0b3JzLlxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyI3JlZ2lzdGVyICRjb250cm9sbGVyUHJvdmlkZXIucmVnaXN0ZXIoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgY29udHJvbGxlcjogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckY29udHJvbGxlclByb3ZpZGVyJywgJ3JlZ2lzdGVyJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjZGlyZWN0aXZlXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBEaXJlY3RpdmUgbmFtZSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBkaXJlY3RpdmVzIHdoZXJlIHRoZVxuICAgICAgICAgICAqICAgIGtleXMgYXJlIHRoZSBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGZhY3Rvcmllcy5cbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXJlY3RpdmVGYWN0b3J5IEZhY3RvcnkgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZlxuICAgICAgICAgICAqIGRpcmVjdGl2ZXMuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSAkY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSgpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBkaXJlY3RpdmU6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJGNvbXBpbGVQcm92aWRlcicsICdkaXJlY3RpdmUnKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb25maWdcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uZmlnRm4gRXhlY3V0ZSB0aGlzIGZ1bmN0aW9uIG9uIG1vZHVsZSBsb2FkLiBVc2VmdWwgZm9yIHNlcnZpY2VcbiAgICAgICAgICAgKiAgICBjb25maWd1cmF0aW9uLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFVzZSB0aGlzIG1ldGhvZCB0byByZWdpc3RlciB3b3JrIHdoaWNoIG5lZWRzIHRvIGJlIHBlcmZvcm1lZCBvbiBtb2R1bGUgbG9hZGluZy5cbiAgICAgICAgICAgKiBGb3IgbW9yZSBhYm91dCBob3cgdG8gY29uZmlndXJlIHNlcnZpY2VzLCBzZWVcbiAgICAgICAgICAgKiB7QGxpbmsgcHJvdmlkZXJzI3Byb3ZpZGVyLXJlY2lwZSBQcm92aWRlciBSZWNpcGV9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbmZpZzogY29uZmlnLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3J1blxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbml0aWFsaXphdGlvbkZuIEV4ZWN1dGUgdGhpcyBmdW5jdGlvbiBhZnRlciBpbmplY3RvciBjcmVhdGlvbi5cbiAgICAgICAgICAgKiAgICBVc2VmdWwgZm9yIGFwcGxpY2F0aW9uIGluaXRpYWxpemF0aW9uLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFVzZSB0aGlzIG1ldGhvZCB0byByZWdpc3RlciB3b3JrIHdoaWNoIHNob3VsZCBiZSBwZXJmb3JtZWQgd2hlbiB0aGUgaW5qZWN0b3IgaXMgZG9uZVxuICAgICAgICAgICAqIGxvYWRpbmcgYWxsIG1vZHVsZXMuXG4gICAgICAgICAgICovXG4gICAgICAgICAgcnVuOiBmdW5jdGlvbihibG9jaykge1xuICAgICAgICAgICAgcnVuQmxvY2tzLnB1c2goYmxvY2spO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChjb25maWdGbikge1xuICAgICAgICAgIGNvbmZpZyhjb25maWdGbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbW9kdWxlSW5zdGFuY2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm92aWRlclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nPX0gaW5zZXJ0TWV0aG9kXG4gICAgICAgICAqIEByZXR1cm5zIHthbmd1bGFyLk1vZHVsZX1cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGludm9rZUxhdGVyKHByb3ZpZGVyLCBtZXRob2QsIGluc2VydE1ldGhvZCwgcXVldWUpIHtcbiAgICAgICAgICBpZiAoIXF1ZXVlKSBxdWV1ZSA9IGludm9rZVF1ZXVlO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHF1ZXVlW2luc2VydE1ldGhvZCB8fCAncHVzaCddKFtwcm92aWRlciwgbWV0aG9kLCBhcmd1bWVudHNdKTtcbiAgICAgICAgICAgIHJldHVybiBtb2R1bGVJbnN0YW5jZTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm92aWRlclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kXG4gICAgICAgICAqIEByZXR1cm5zIHthbmd1bGFyLk1vZHVsZX1cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZShwcm92aWRlciwgbWV0aG9kKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlY2lwZU5hbWUsIGZhY3RvcnlGdW5jdGlvbikge1xuICAgICAgICAgICAgaWYgKGZhY3RvcnlGdW5jdGlvbiAmJiBpc0Z1bmN0aW9uKGZhY3RvcnlGdW5jdGlvbikpIGZhY3RvcnlGdW5jdGlvbi4kJG1vZHVsZU5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgaW52b2tlUXVldWUucHVzaChbcHJvdmlkZXIsIG1ldGhvZCwgYXJndW1lbnRzXSk7XG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlSW5zdGFuY2U7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgfSk7XG5cbn1cblxuLyogZ2xvYmFsOiB0b0RlYnVnU3RyaW5nOiB0cnVlICovXG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZU9iamVjdChvYmopIHtcbiAgdmFyIHNlZW4gPSBbXTtcblxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCBmdW5jdGlvbihrZXksIHZhbCkge1xuICAgIHZhbCA9IHRvSnNvblJlcGxhY2VyKGtleSwgdmFsKTtcbiAgICBpZiAoaXNPYmplY3QodmFsKSkge1xuXG4gICAgICBpZiAoc2Vlbi5pbmRleE9mKHZhbCkgPj0gMCkgcmV0dXJuICc8PGFscmVhZHkgc2Vlbj4+JztcblxuICAgICAgc2Vlbi5wdXNoKHZhbCk7XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0b0RlYnVnU3RyaW5nKG9iaikge1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBvYmoudG9TdHJpbmcoKS5yZXBsYWNlKC8gXFx7W1xcc1xcU10qJC8sICcnKTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzZXJpYWxpemVPYmplY3Qob2JqKTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKiBnbG9iYWwgYW5ndWxhck1vZHVsZTogdHJ1ZSxcbiAgdmVyc2lvbjogdHJ1ZSxcblxuICAkTG9jYWxlUHJvdmlkZXIsXG4gICRDb21waWxlUHJvdmlkZXIsXG5cbiAgaHRtbEFuY2hvckRpcmVjdGl2ZSxcbiAgaW5wdXREaXJlY3RpdmUsXG4gIGlucHV0RGlyZWN0aXZlLFxuICBmb3JtRGlyZWN0aXZlLFxuICBzY3JpcHREaXJlY3RpdmUsXG4gIHNlbGVjdERpcmVjdGl2ZSxcbiAgc3R5bGVEaXJlY3RpdmUsXG4gIG9wdGlvbkRpcmVjdGl2ZSxcbiAgbmdCaW5kRGlyZWN0aXZlLFxuICBuZ0JpbmRIdG1sRGlyZWN0aXZlLFxuICBuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgbmdDbGFzc0RpcmVjdGl2ZSxcbiAgbmdDbGFzc0V2ZW5EaXJlY3RpdmUsXG4gIG5nQ2xhc3NPZGREaXJlY3RpdmUsXG4gIG5nQ3NwRGlyZWN0aXZlLFxuICBuZ0Nsb2FrRGlyZWN0aXZlLFxuICBuZ0NvbnRyb2xsZXJEaXJlY3RpdmUsXG4gIG5nRm9ybURpcmVjdGl2ZSxcbiAgbmdIaWRlRGlyZWN0aXZlLFxuICBuZ0lmRGlyZWN0aXZlLFxuICBuZ0luY2x1ZGVEaXJlY3RpdmUsXG4gIG5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlLFxuICBuZ0luaXREaXJlY3RpdmUsXG4gIG5nTm9uQmluZGFibGVEaXJlY3RpdmUsXG4gIG5nUGx1cmFsaXplRGlyZWN0aXZlLFxuICBuZ1JlcGVhdERpcmVjdGl2ZSxcbiAgbmdTaG93RGlyZWN0aXZlLFxuICBuZ1N0eWxlRGlyZWN0aXZlLFxuICBuZ1N3aXRjaERpcmVjdGl2ZSxcbiAgbmdTd2l0Y2hXaGVuRGlyZWN0aXZlLFxuICBuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUsXG4gIG5nT3B0aW9uc0RpcmVjdGl2ZSxcbiAgbmdUcmFuc2NsdWRlRGlyZWN0aXZlLFxuICBuZ01vZGVsRGlyZWN0aXZlLFxuICBuZ0xpc3REaXJlY3RpdmUsXG4gIG5nQ2hhbmdlRGlyZWN0aXZlLFxuICBwYXR0ZXJuRGlyZWN0aXZlLFxuICBwYXR0ZXJuRGlyZWN0aXZlLFxuICByZXF1aXJlZERpcmVjdGl2ZSxcbiAgcmVxdWlyZWREaXJlY3RpdmUsXG4gIG1pbmxlbmd0aERpcmVjdGl2ZSxcbiAgbWlubGVuZ3RoRGlyZWN0aXZlLFxuICBtYXhsZW5ndGhEaXJlY3RpdmUsXG4gIG1heGxlbmd0aERpcmVjdGl2ZSxcbiAgbmdWYWx1ZURpcmVjdGl2ZSxcbiAgbmdNb2RlbE9wdGlvbnNEaXJlY3RpdmUsXG4gIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzLFxuICBuZ0V2ZW50RGlyZWN0aXZlcyxcblxuICAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIsXG4gICRBbmltYXRlUHJvdmlkZXIsXG4gICQkQ29yZUFuaW1hdGVRdWV1ZVByb3ZpZGVyLFxuICAkJENvcmVBbmltYXRlUnVubmVyUHJvdmlkZXIsXG4gICRCcm93c2VyUHJvdmlkZXIsXG4gICRDYWNoZUZhY3RvcnlQcm92aWRlcixcbiAgJENvbnRyb2xsZXJQcm92aWRlcixcbiAgJERvY3VtZW50UHJvdmlkZXIsXG4gICRFeGNlcHRpb25IYW5kbGVyUHJvdmlkZXIsXG4gICRGaWx0ZXJQcm92aWRlcixcbiAgJEludGVycG9sYXRlUHJvdmlkZXIsXG4gICRJbnRlcnZhbFByb3ZpZGVyLFxuICAkJEhhc2hNYXBQcm92aWRlcixcbiAgJEh0dHBQcm92aWRlcixcbiAgJEh0dHBQYXJhbVNlcmlhbGl6ZXJQcm92aWRlcixcbiAgJEh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2VQcm92aWRlcixcbiAgJEh0dHBCYWNrZW5kUHJvdmlkZXIsXG4gICRMb2NhdGlvblByb3ZpZGVyLFxuICAkTG9nUHJvdmlkZXIsXG4gICRQYXJzZVByb3ZpZGVyLFxuICAkUm9vdFNjb3BlUHJvdmlkZXIsXG4gICRRUHJvdmlkZXIsXG4gICQkUVByb3ZpZGVyLFxuICAkJFNhbml0aXplVXJpUHJvdmlkZXIsXG4gICRTY2VQcm92aWRlcixcbiAgJFNjZURlbGVnYXRlUHJvdmlkZXIsXG4gICRTbmlmZmVyUHJvdmlkZXIsXG4gICRUZW1wbGF0ZUNhY2hlUHJvdmlkZXIsXG4gICRUZW1wbGF0ZVJlcXVlc3RQcm92aWRlcixcbiAgJCRUZXN0YWJpbGl0eVByb3ZpZGVyLFxuICAkVGltZW91dFByb3ZpZGVyLFxuICAkJFJBRlByb3ZpZGVyLFxuICAkV2luZG93UHJvdmlkZXIsXG4gICQkanFMaXRlUHJvdmlkZXIsXG4gICQkQ29va2llUmVhZGVyUHJvdmlkZXJcbiovXG5cblxuLyoqXG4gKiBAbmdkb2Mgb2JqZWN0XG4gKiBAbmFtZSBhbmd1bGFyLnZlcnNpb25cbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICogQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgQW5ndWxhckpTIHZlcnNpb24uIFRoaXMgb2JqZWN0IGhhcyB0aGVcbiAqIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqIC0gYGZ1bGxgIOKAkyBge3N0cmluZ31gIOKAkyBGdWxsIHZlcnNpb24gc3RyaW5nLCBzdWNoIGFzIFwiMC45LjE4XCIuXG4gKiAtIGBtYWpvcmAg4oCTIGB7bnVtYmVyfWAg4oCTIE1ham9yIHZlcnNpb24gbnVtYmVyLCBzdWNoIGFzIFwiMFwiLlxuICogLSBgbWlub3JgIOKAkyBge251bWJlcn1gIOKAkyBNaW5vciB2ZXJzaW9uIG51bWJlciwgc3VjaCBhcyBcIjlcIi5cbiAqIC0gYGRvdGAg4oCTIGB7bnVtYmVyfWAg4oCTIERvdCB2ZXJzaW9uIG51bWJlciwgc3VjaCBhcyBcIjE4XCIuXG4gKiAtIGBjb2RlTmFtZWAg4oCTIGB7c3RyaW5nfWAg4oCTIENvZGUgbmFtZSBvZiB0aGUgcmVsZWFzZSwgc3VjaCBhcyBcImppZ2dsaW5nLWFybWZhdFwiLlxuICovXG52YXIgdmVyc2lvbiA9IHtcbiAgZnVsbDogJzEuNC4zJywgICAgLy8gYWxsIG9mIHRoZXNlIHBsYWNlaG9sZGVyIHN0cmluZ3Mgd2lsbCBiZSByZXBsYWNlZCBieSBncnVudCdzXG4gIG1ham9yOiAxLCAgICAvLyBwYWNrYWdlIHRhc2tcbiAgbWlub3I6IDQsXG4gIGRvdDogMyxcbiAgY29kZU5hbWU6ICdmb2FtLWFjY2VsZXJhdGlvbidcbn07XG5cblxuZnVuY3Rpb24gcHVibGlzaEV4dGVybmFsQVBJKGFuZ3VsYXIpIHtcbiAgZXh0ZW5kKGFuZ3VsYXIsIHtcbiAgICAnYm9vdHN0cmFwJzogYm9vdHN0cmFwLFxuICAgICdjb3B5JzogY29weSxcbiAgICAnZXh0ZW5kJzogZXh0ZW5kLFxuICAgICdtZXJnZSc6IG1lcmdlLFxuICAgICdlcXVhbHMnOiBlcXVhbHMsXG4gICAgJ2VsZW1lbnQnOiBqcUxpdGUsXG4gICAgJ2ZvckVhY2gnOiBmb3JFYWNoLFxuICAgICdpbmplY3Rvcic6IGNyZWF0ZUluamVjdG9yLFxuICAgICdub29wJzogbm9vcCxcbiAgICAnYmluZCc6IGJpbmQsXG4gICAgJ3RvSnNvbic6IHRvSnNvbixcbiAgICAnZnJvbUpzb24nOiBmcm9tSnNvbixcbiAgICAnaWRlbnRpdHknOiBpZGVudGl0eSxcbiAgICAnaXNVbmRlZmluZWQnOiBpc1VuZGVmaW5lZCxcbiAgICAnaXNEZWZpbmVkJzogaXNEZWZpbmVkLFxuICAgICdpc1N0cmluZyc6IGlzU3RyaW5nLFxuICAgICdpc0Z1bmN0aW9uJzogaXNGdW5jdGlvbixcbiAgICAnaXNPYmplY3QnOiBpc09iamVjdCxcbiAgICAnaXNOdW1iZXInOiBpc051bWJlcixcbiAgICAnaXNFbGVtZW50JzogaXNFbGVtZW50LFxuICAgICdpc0FycmF5JzogaXNBcnJheSxcbiAgICAndmVyc2lvbic6IHZlcnNpb24sXG4gICAgJ2lzRGF0ZSc6IGlzRGF0ZSxcbiAgICAnbG93ZXJjYXNlJzogbG93ZXJjYXNlLFxuICAgICd1cHBlcmNhc2UnOiB1cHBlcmNhc2UsXG4gICAgJ2NhbGxiYWNrcyc6IHtjb3VudGVyOiAwfSxcbiAgICAnZ2V0VGVzdGFiaWxpdHknOiBnZXRUZXN0YWJpbGl0eSxcbiAgICAnJCRtaW5FcnInOiBtaW5FcnIsXG4gICAgJyQkY3NwJzogY3NwLFxuICAgICdyZWxvYWRXaXRoRGVidWdJbmZvJzogcmVsb2FkV2l0aERlYnVnSW5mb1xuICB9KTtcblxuICBhbmd1bGFyTW9kdWxlID0gc2V0dXBNb2R1bGVMb2FkZXIod2luZG93KTtcbiAgdHJ5IHtcbiAgICBhbmd1bGFyTW9kdWxlKCduZ0xvY2FsZScpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgYW5ndWxhck1vZHVsZSgnbmdMb2NhbGUnLCBbXSkucHJvdmlkZXIoJyRsb2NhbGUnLCAkTG9jYWxlUHJvdmlkZXIpO1xuICB9XG5cbiAgYW5ndWxhck1vZHVsZSgnbmcnLCBbJ25nTG9jYWxlJ10sIFsnJHByb3ZpZGUnLFxuICAgIGZ1bmN0aW9uIG5nTW9kdWxlKCRwcm92aWRlKSB7XG4gICAgICAvLyAkJHNhbml0aXplVXJpUHJvdmlkZXIgbmVlZHMgdG8gYmUgYmVmb3JlICRjb21waWxlUHJvdmlkZXIgYXMgaXQgaXMgdXNlZCBieSBpdC5cbiAgICAgICRwcm92aWRlLnByb3ZpZGVyKHtcbiAgICAgICAgJCRzYW5pdGl6ZVVyaTogJCRTYW5pdGl6ZVVyaVByb3ZpZGVyXG4gICAgICB9KTtcbiAgICAgICRwcm92aWRlLnByb3ZpZGVyKCckY29tcGlsZScsICRDb21waWxlUHJvdmlkZXIpLlxuICAgICAgICBkaXJlY3RpdmUoe1xuICAgICAgICAgICAgYTogaHRtbEFuY2hvckRpcmVjdGl2ZSxcbiAgICAgICAgICAgIGlucHV0OiBpbnB1dERpcmVjdGl2ZSxcbiAgICAgICAgICAgIHRleHRhcmVhOiBpbnB1dERpcmVjdGl2ZSxcbiAgICAgICAgICAgIGZvcm06IGZvcm1EaXJlY3RpdmUsXG4gICAgICAgICAgICBzY3JpcHQ6IHNjcmlwdERpcmVjdGl2ZSxcbiAgICAgICAgICAgIHNlbGVjdDogc2VsZWN0RGlyZWN0aXZlLFxuICAgICAgICAgICAgc3R5bGU6IHN0eWxlRGlyZWN0aXZlLFxuICAgICAgICAgICAgb3B0aW9uOiBvcHRpb25EaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0JpbmQ6IG5nQmluZERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQmluZEh0bWw6IG5nQmluZEh0bWxEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0JpbmRUZW1wbGF0ZTogbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0NsYXNzOiBuZ0NsYXNzRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDbGFzc0V2ZW46IG5nQ2xhc3NFdmVuRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDbGFzc09kZDogbmdDbGFzc09kZERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ2xvYWs6IG5nQ2xvYWtEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0NvbnRyb2xsZXI6IG5nQ29udHJvbGxlckRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nRm9ybTogbmdGb3JtRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdIaWRlOiBuZ0hpZGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0lmOiBuZ0lmRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdJbmNsdWRlOiBuZ0luY2x1ZGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0luaXQ6IG5nSW5pdERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTm9uQmluZGFibGU6IG5nTm9uQmluZGFibGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1BsdXJhbGl6ZTogbmdQbHVyYWxpemVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1JlcGVhdDogbmdSZXBlYXREaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1Nob3c6IG5nU2hvd0RpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU3R5bGU6IG5nU3R5bGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1N3aXRjaDogbmdTd2l0Y2hEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1N3aXRjaFdoZW46IG5nU3dpdGNoV2hlbkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU3dpdGNoRGVmYXVsdDogbmdTd2l0Y2hEZWZhdWx0RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdPcHRpb25zOiBuZ09wdGlvbnNEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1RyYW5zY2x1ZGU6IG5nVHJhbnNjbHVkZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTW9kZWw6IG5nTW9kZWxEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0xpc3Q6IG5nTGlzdERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ2hhbmdlOiBuZ0NoYW5nZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIHBhdHRlcm46IHBhdHRlcm5EaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1BhdHRlcm46IHBhdHRlcm5EaXJlY3RpdmUsXG4gICAgICAgICAgICByZXF1aXJlZDogcmVxdWlyZWREaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1JlcXVpcmVkOiByZXF1aXJlZERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG1pbmxlbmd0aDogbWlubGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdNaW5sZW5ndGg6IG1pbmxlbmd0aERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG1heGxlbmd0aDogbWF4bGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdNYXhsZW5ndGg6IG1heGxlbmd0aERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nVmFsdWU6IG5nVmFsdWVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ01vZGVsT3B0aW9uczogbmdNb2RlbE9wdGlvbnNEaXJlY3RpdmVcbiAgICAgICAgfSkuXG4gICAgICAgIGRpcmVjdGl2ZSh7XG4gICAgICAgICAgbmdJbmNsdWRlOiBuZ0luY2x1ZGVGaWxsQ29udGVudERpcmVjdGl2ZVxuICAgICAgICB9KS5cbiAgICAgICAgZGlyZWN0aXZlKG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzKS5cbiAgICAgICAgZGlyZWN0aXZlKG5nRXZlbnREaXJlY3RpdmVzKTtcbiAgICAgICRwcm92aWRlLnByb3ZpZGVyKHtcbiAgICAgICAgJGFuY2hvclNjcm9sbDogJEFuY2hvclNjcm9sbFByb3ZpZGVyLFxuICAgICAgICAkYW5pbWF0ZTogJEFuaW1hdGVQcm92aWRlcixcbiAgICAgICAgJCRhbmltYXRlUXVldWU6ICQkQ29yZUFuaW1hdGVRdWV1ZVByb3ZpZGVyLFxuICAgICAgICAkJEFuaW1hdGVSdW5uZXI6ICQkQ29yZUFuaW1hdGVSdW5uZXJQcm92aWRlcixcbiAgICAgICAgJGJyb3dzZXI6ICRCcm93c2VyUHJvdmlkZXIsXG4gICAgICAgICRjYWNoZUZhY3Rvcnk6ICRDYWNoZUZhY3RvcnlQcm92aWRlcixcbiAgICAgICAgJGNvbnRyb2xsZXI6ICRDb250cm9sbGVyUHJvdmlkZXIsXG4gICAgICAgICRkb2N1bWVudDogJERvY3VtZW50UHJvdmlkZXIsXG4gICAgICAgICRleGNlcHRpb25IYW5kbGVyOiAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyLFxuICAgICAgICAkZmlsdGVyOiAkRmlsdGVyUHJvdmlkZXIsXG4gICAgICAgICRpbnRlcnBvbGF0ZTogJEludGVycG9sYXRlUHJvdmlkZXIsXG4gICAgICAgICRpbnRlcnZhbDogJEludGVydmFsUHJvdmlkZXIsXG4gICAgICAgICRodHRwOiAkSHR0cFByb3ZpZGVyLFxuICAgICAgICAkaHR0cFBhcmFtU2VyaWFsaXplcjogJEh0dHBQYXJhbVNlcmlhbGl6ZXJQcm92aWRlcixcbiAgICAgICAgJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2U6ICRIdHRwUGFyYW1TZXJpYWxpemVySlFMaWtlUHJvdmlkZXIsXG4gICAgICAgICRodHRwQmFja2VuZDogJEh0dHBCYWNrZW5kUHJvdmlkZXIsXG4gICAgICAgICRsb2NhdGlvbjogJExvY2F0aW9uUHJvdmlkZXIsXG4gICAgICAgICRsb2c6ICRMb2dQcm92aWRlcixcbiAgICAgICAgJHBhcnNlOiAkUGFyc2VQcm92aWRlcixcbiAgICAgICAgJHJvb3RTY29wZTogJFJvb3RTY29wZVByb3ZpZGVyLFxuICAgICAgICAkcTogJFFQcm92aWRlcixcbiAgICAgICAgJCRxOiAkJFFQcm92aWRlcixcbiAgICAgICAgJHNjZTogJFNjZVByb3ZpZGVyLFxuICAgICAgICAkc2NlRGVsZWdhdGU6ICRTY2VEZWxlZ2F0ZVByb3ZpZGVyLFxuICAgICAgICAkc25pZmZlcjogJFNuaWZmZXJQcm92aWRlcixcbiAgICAgICAgJHRlbXBsYXRlQ2FjaGU6ICRUZW1wbGF0ZUNhY2hlUHJvdmlkZXIsXG4gICAgICAgICR0ZW1wbGF0ZVJlcXVlc3Q6ICRUZW1wbGF0ZVJlcXVlc3RQcm92aWRlcixcbiAgICAgICAgJCR0ZXN0YWJpbGl0eTogJCRUZXN0YWJpbGl0eVByb3ZpZGVyLFxuICAgICAgICAkdGltZW91dDogJFRpbWVvdXRQcm92aWRlcixcbiAgICAgICAgJHdpbmRvdzogJFdpbmRvd1Byb3ZpZGVyLFxuICAgICAgICAkJHJBRjogJCRSQUZQcm92aWRlcixcbiAgICAgICAgJCRqcUxpdGU6ICQkanFMaXRlUHJvdmlkZXIsXG4gICAgICAgICQkSGFzaE1hcDogJCRIYXNoTWFwUHJvdmlkZXIsXG4gICAgICAgICQkY29va2llUmVhZGVyOiAkJENvb2tpZVJlYWRlclByb3ZpZGVyXG4gICAgICB9KTtcbiAgICB9XG4gIF0pO1xufVxuXG4vKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4gKiAgICAgQW55IGNvbW1pdHMgdG8gdGhpcyBmaWxlIHNob3VsZCBiZSByZXZpZXdlZCB3aXRoIHNlY3VyaXR5IGluIG1pbmQuICAqXG4gKiAgIENoYW5nZXMgdG8gdGhpcyBmaWxlIGNhbiBwb3RlbnRpYWxseSBjcmVhdGUgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLiAqXG4gKiAgICAgICAgICBBbiBhcHByb3ZhbCBmcm9tIDIgQ29yZSBtZW1iZXJzIHdpdGggaGlzdG9yeSBvZiBtb2RpZnlpbmcgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIGZpbGUgaXMgcmVxdWlyZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgRG9lcyB0aGUgY2hhbmdlIHNvbWVob3cgYWxsb3cgZm9yIGFyYml0cmFyeSBqYXZhc2NyaXB0IHRvIGJlIGV4ZWN1dGVkPyAqXG4gKiAgICBPciBhbGxvd3MgZm9yIHNvbWVvbmUgdG8gY2hhbmdlIHRoZSBwcm90b3R5cGUgb2YgYnVpbHQtaW4gb2JqZWN0cz8gICAqXG4gKiAgICAgT3IgZ2l2ZXMgdW5kZXNpcmVkIGFjY2VzcyB0byB2YXJpYWJsZXMgbGlrZXMgZG9jdW1lbnQgb3Igd2luZG93PyAgICAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG4vKiBnbG9iYWwgSlFMaXRlUHJvdG90eXBlOiB0cnVlLFxuICBhZGRFdmVudExpc3RlbmVyRm46IHRydWUsXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXJGbjogdHJ1ZSxcbiAgQk9PTEVBTl9BVFRSOiB0cnVlLFxuICBBTElBU0VEX0FUVFI6IHRydWUsXG4qL1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL0pRTGl0ZVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5lbGVtZW50XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogV3JhcHMgYSByYXcgRE9NIGVsZW1lbnQgb3IgSFRNTCBzdHJpbmcgYXMgYSBbalF1ZXJ5XShodHRwOi8vanF1ZXJ5LmNvbSkgZWxlbWVudC5cbiAqXG4gKiBJZiBqUXVlcnkgaXMgYXZhaWxhYmxlLCBgYW5ndWxhci5lbGVtZW50YCBpcyBhbiBhbGlhcyBmb3IgdGhlXG4gKiBbalF1ZXJ5XShodHRwOi8vYXBpLmpxdWVyeS5jb20valF1ZXJ5LykgZnVuY3Rpb24uIElmIGpRdWVyeSBpcyBub3QgYXZhaWxhYmxlLCBgYW5ndWxhci5lbGVtZW50YFxuICogZGVsZWdhdGVzIHRvIEFuZ3VsYXIncyBidWlsdC1pbiBzdWJzZXQgb2YgalF1ZXJ5LCBjYWxsZWQgXCJqUXVlcnkgbGl0ZVwiIG9yIFwianFMaXRlLlwiXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3NcIj5qcUxpdGUgaXMgYSB0aW55LCBBUEktY29tcGF0aWJsZSBzdWJzZXQgb2YgalF1ZXJ5IHRoYXQgYWxsb3dzXG4gKiBBbmd1bGFyIHRvIG1hbmlwdWxhdGUgdGhlIERPTSBpbiBhIGNyb3NzLWJyb3dzZXIgY29tcGF0aWJsZSB3YXkuICoqanFMaXRlKiogaW1wbGVtZW50cyBvbmx5IHRoZSBtb3N0XG4gKiBjb21tb25seSBuZWVkZWQgZnVuY3Rpb25hbGl0eSB3aXRoIHRoZSBnb2FsIG9mIGhhdmluZyBhIHZlcnkgc21hbGwgZm9vdHByaW50LjwvZGl2PlxuICpcbiAqIFRvIHVzZSBgalF1ZXJ5YCwgc2ltcGx5IGVuc3VyZSBpdCBpcyBsb2FkZWQgYmVmb3JlIHRoZSBgYW5ndWxhci5qc2AgZmlsZS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnRcIj4qKk5vdGU6KiogYWxsIGVsZW1lbnQgcmVmZXJlbmNlcyBpbiBBbmd1bGFyIGFyZSBhbHdheXMgd3JhcHBlZCB3aXRoIGpRdWVyeSBvclxuICoganFMaXRlOyB0aGV5IGFyZSBuZXZlciByYXcgRE9NIHJlZmVyZW5jZXMuPC9kaXY+XG4gKlxuICogIyMgQW5ndWxhcidzIGpxTGl0ZVxuICoganFMaXRlIHByb3ZpZGVzIG9ubHkgdGhlIGZvbGxvd2luZyBqUXVlcnkgbWV0aG9kczpcbiAqXG4gKiAtIFtgYWRkQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hZGRDbGFzcy8pXG4gKiAtIFtgYWZ0ZXIoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hZnRlci8pXG4gKiAtIFtgYXBwZW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYXBwZW5kLylcbiAqIC0gW2BhdHRyKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYXR0ci8pIC0gRG9lcyBub3Qgc3VwcG9ydCBmdW5jdGlvbnMgYXMgcGFyYW1ldGVyc1xuICogLSBbYGJpbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9iaW5kLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMsIHNlbGVjdG9ycyBvciBldmVudERhdGFcbiAqIC0gW2BjaGlsZHJlbigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2NoaWxkcmVuLykgLSBEb2VzIG5vdCBzdXBwb3J0IHNlbGVjdG9yc1xuICogLSBbYGNsb25lKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY2xvbmUvKVxuICogLSBbYGNvbnRlbnRzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY29udGVudHMvKVxuICogLSBbYGNzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2Nzcy8pIC0gT25seSByZXRyaWV2ZXMgaW5saW5lLXN0eWxlcywgZG9lcyBub3QgY2FsbCBgZ2V0Q29tcHV0ZWRTdHlsZSgpYC4gQXMgYSBzZXR0ZXIsIGRvZXMgbm90IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdzIG9yIGFwcGVuZCAncHgnLlxuICogLSBbYGRhdGEoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9kYXRhLylcbiAqIC0gW2BkZXRhY2goKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9kZXRhY2gvKVxuICogLSBbYGVtcHR5KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZW1wdHkvKVxuICogLSBbYGVxKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZXEvKVxuICogLSBbYGZpbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9maW5kLykgLSBMaW1pdGVkIHRvIGxvb2t1cHMgYnkgdGFnIG5hbWVcbiAqIC0gW2BoYXNDbGFzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2hhc0NsYXNzLylcbiAqIC0gW2BodG1sKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vaHRtbC8pXG4gKiAtIFtgbmV4dCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL25leHQvKSAtIERvZXMgbm90IHN1cHBvcnQgc2VsZWN0b3JzXG4gKiAtIFtgb24oKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vbi8pIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzLCBzZWxlY3RvcnMgb3IgZXZlbnREYXRhXG4gKiAtIFtgb2ZmKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vb2ZmLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMgb3Igc2VsZWN0b3JzXG4gKiAtIFtgb25lKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vb25lLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMgb3Igc2VsZWN0b3JzXG4gKiAtIFtgcGFyZW50KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcGFyZW50LykgLSBEb2VzIG5vdCBzdXBwb3J0IHNlbGVjdG9yc1xuICogLSBbYHByZXBlbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9wcmVwZW5kLylcbiAqIC0gW2Bwcm9wKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcHJvcC8pXG4gKiAtIFtgcmVhZHkoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZWFkeS8pXG4gKiAtIFtgcmVtb3ZlKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlLylcbiAqIC0gW2ByZW1vdmVBdHRyKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlQXR0ci8pXG4gKiAtIFtgcmVtb3ZlQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmVDbGFzcy8pXG4gKiAtIFtgcmVtb3ZlRGF0YSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZURhdGEvKVxuICogLSBbYHJlcGxhY2VXaXRoKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVwbGFjZVdpdGgvKVxuICogLSBbYHRleHQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90ZXh0LylcbiAqIC0gW2B0b2dnbGVDbGFzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3RvZ2dsZUNsYXNzLylcbiAqIC0gW2B0cmlnZ2VySGFuZGxlcigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3RyaWdnZXJIYW5kbGVyLykgLSBQYXNzZXMgYSBkdW1teSBldmVudCBvYmplY3QgdG8gaGFuZGxlcnMuXG4gKiAtIFtgdW5iaW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdW5iaW5kLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXNcbiAqIC0gW2B2YWwoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS92YWwvKVxuICogLSBbYHdyYXAoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS93cmFwLylcbiAqXG4gKiAjIyBqUXVlcnkvanFMaXRlIEV4dHJhc1xuICogQW5ndWxhciBhbHNvIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgYWRkaXRpb25hbCBtZXRob2RzIGFuZCBldmVudHMgdG8gYm90aCBqUXVlcnkgYW5kIGpxTGl0ZTpcbiAqXG4gKiAjIyMgRXZlbnRzXG4gKiAtIGAkZGVzdHJveWAgLSBBbmd1bGFySlMgaW50ZXJjZXB0cyBhbGwganFMaXRlL2pRdWVyeSdzIERPTSBkZXN0cnVjdGlvbiBhcGlzIGFuZCBmaXJlcyB0aGlzIGV2ZW50XG4gKiAgICBvbiBhbGwgRE9NIG5vZGVzIGJlaW5nIHJlbW92ZWQuICBUaGlzIGNhbiBiZSB1c2VkIHRvIGNsZWFuIHVwIGFueSAzcmQgcGFydHkgYmluZGluZ3MgdG8gdGhlIERPTVxuICogICAgZWxlbWVudCBiZWZvcmUgaXQgaXMgcmVtb3ZlZC5cbiAqXG4gKiAjIyMgTWV0aG9kc1xuICogLSBgY29udHJvbGxlcihuYW1lKWAgLSByZXRyaWV2ZXMgdGhlIGNvbnRyb2xsZXIgb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBvciBpdHMgcGFyZW50LiBCeSBkZWZhdWx0XG4gKiAgIHJldHJpZXZlcyBjb250cm9sbGVyIGFzc29jaWF0ZWQgd2l0aCB0aGUgYG5nQ29udHJvbGxlcmAgZGlyZWN0aXZlLiBJZiBgbmFtZWAgaXMgcHJvdmlkZWQgYXNcbiAqICAgY2FtZWxDYXNlIGRpcmVjdGl2ZSBuYW1lLCB0aGVuIHRoZSBjb250cm9sbGVyIGZvciB0aGlzIGRpcmVjdGl2ZSB3aWxsIGJlIHJldHJpZXZlZCAoZS5nLlxuICogICBgJ25nTW9kZWwnYCkuXG4gKiAtIGBpbmplY3RvcigpYCAtIHJldHJpZXZlcyB0aGUgaW5qZWN0b3Igb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBvciBpdHMgcGFyZW50LlxuICogLSBgc2NvcGUoKWAgLSByZXRyaWV2ZXMgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfSBvZiB0aGUgY3VycmVudFxuICogICBlbGVtZW50IG9yIGl0cyBwYXJlbnQuIFJlcXVpcmVzIHtAbGluayBndWlkZS9wcm9kdWN0aW9uI2Rpc2FibGluZy1kZWJ1Zy1kYXRhIERlYnVnIERhdGF9IHRvXG4gKiAgIGJlIGVuYWJsZWQuXG4gKiAtIGBpc29sYXRlU2NvcGUoKWAgLSByZXRyaWV2ZXMgYW4gaXNvbGF0ZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0gaWYgb25lIGlzIGF0dGFjaGVkIGRpcmVjdGx5IHRvIHRoZVxuICogICBjdXJyZW50IGVsZW1lbnQuIFRoaXMgZ2V0dGVyIHNob3VsZCBiZSB1c2VkIG9ubHkgb24gZWxlbWVudHMgdGhhdCBjb250YWluIGEgZGlyZWN0aXZlIHdoaWNoIHN0YXJ0cyBhIG5ldyBpc29sYXRlXG4gKiAgIHNjb3BlLiBDYWxsaW5nIGBzY29wZSgpYCBvbiB0aGlzIGVsZW1lbnQgYWx3YXlzIHJldHVybnMgdGhlIG9yaWdpbmFsIG5vbi1pc29sYXRlIHNjb3BlLlxuICogICBSZXF1aXJlcyB7QGxpbmsgZ3VpZGUvcHJvZHVjdGlvbiNkaXNhYmxpbmctZGVidWctZGF0YSBEZWJ1ZyBEYXRhfSB0byBiZSBlbmFibGVkLlxuICogLSBgaW5oZXJpdGVkRGF0YSgpYCAtIHNhbWUgYXMgYGRhdGEoKWAsIGJ1dCB3YWxrcyB1cCB0aGUgRE9NIHVudGlsIGEgdmFsdWUgaXMgZm91bmQgb3IgdGhlIHRvcFxuICogICBwYXJlbnQgZWxlbWVudCBpcyByZWFjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfERPTUVsZW1lbnR9IGVsZW1lbnQgSFRNTCBzdHJpbmcgb3IgRE9NRWxlbWVudCB0byBiZSB3cmFwcGVkIGludG8galF1ZXJ5LlxuICogQHJldHVybnMge09iamVjdH0galF1ZXJ5IG9iamVjdC5cbiAqL1xuXG5KUUxpdGUuZXhwYW5kbyA9ICduZzMzOSc7XG5cbnZhciBqcUNhY2hlID0gSlFMaXRlLmNhY2hlID0ge30sXG4gICAganFJZCA9IDEsXG4gICAgYWRkRXZlbnRMaXN0ZW5lckZuID0gZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHtcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgZmFsc2UpO1xuICAgIH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuID0gZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgZmFsc2UpO1xuICAgIH07XG5cbi8qXG4gKiAhISEgVGhpcyBpcyBhbiB1bmRvY3VtZW50ZWQgXCJwcml2YXRlXCIgZnVuY3Rpb24gISEhXG4gKi9cbkpRTGl0ZS5fZGF0YSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgLy9qUXVlcnkgYWx3YXlzIHJldHVybnMgYW4gb2JqZWN0IG9uIGNhY2hlIG1pc3NcbiAgcmV0dXJuIHRoaXMuY2FjaGVbbm9kZVt0aGlzLmV4cGFuZG9dXSB8fCB7fTtcbn07XG5cbmZ1bmN0aW9uIGpxTmV4dElkKCkgeyByZXR1cm4gKytqcUlkOyB9XG5cblxudmFyIFNQRUNJQUxfQ0hBUlNfUkVHRVhQID0gLyhbXFw6XFwtXFxfXSsoLikpL2c7XG52YXIgTU9aX0hBQ0tfUkVHRVhQID0gL15tb3ooW0EtWl0pLztcbnZhciBNT1VTRV9FVkVOVF9NQVA9IHsgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLCBtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwifTtcbnZhciBqcUxpdGVNaW5FcnIgPSBtaW5FcnIoJ2pxTGl0ZScpO1xuXG4vKipcbiAqIENvbnZlcnRzIHNuYWtlX2Nhc2UgdG8gY2FtZWxDYXNlLlxuICogQWxzbyB0aGVyZSBpcyBzcGVjaWFsIGNhc2UgZm9yIE1veiBwcmVmaXggc3RhcnRpbmcgd2l0aCB1cHBlciBjYXNlIGxldHRlci5cbiAqIEBwYXJhbSBuYW1lIE5hbWUgdG8gbm9ybWFsaXplXG4gKi9cbmZ1bmN0aW9uIGNhbWVsQ2FzZShuYW1lKSB7XG4gIHJldHVybiBuYW1lLlxuICAgIHJlcGxhY2UoU1BFQ0lBTF9DSEFSU19SRUdFWFAsIGZ1bmN0aW9uKF8sIHNlcGFyYXRvciwgbGV0dGVyLCBvZmZzZXQpIHtcbiAgICAgIHJldHVybiBvZmZzZXQgPyBsZXR0ZXIudG9VcHBlckNhc2UoKSA6IGxldHRlcjtcbiAgICB9KS5cbiAgICByZXBsYWNlKE1PWl9IQUNLX1JFR0VYUCwgJ01veiQxJyk7XG59XG5cbnZhciBTSU5HTEVfVEFHX1JFR0VYUCA9IC9ePChcXHcrKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLztcbnZhciBIVE1MX1JFR0VYUCA9IC88fCYjP1xcdys7LztcbnZhciBUQUdfTkFNRV9SRUdFWFAgPSAvPChbXFx3Ol0rKS87XG52YXIgWEhUTUxfVEFHX1JFR0VYUCA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcXHc6XSspW14+XSopXFwvPi9naTtcblxudmFyIHdyYXBNYXAgPSB7XG4gICdvcHRpb24nOiBbMSwgJzxzZWxlY3QgbXVsdGlwbGU9XCJtdWx0aXBsZVwiPicsICc8L3NlbGVjdD4nXSxcblxuICAndGhlYWQnOiBbMSwgJzx0YWJsZT4nLCAnPC90YWJsZT4nXSxcbiAgJ2NvbCc6IFsyLCAnPHRhYmxlPjxjb2xncm91cD4nLCAnPC9jb2xncm91cD48L3RhYmxlPiddLFxuICAndHInOiBbMiwgJzx0YWJsZT48dGJvZHk+JywgJzwvdGJvZHk+PC90YWJsZT4nXSxcbiAgJ3RkJzogWzMsICc8dGFibGU+PHRib2R5Pjx0cj4nLCAnPC90cj48L3Rib2R5PjwvdGFibGU+J10sXG4gICdfZGVmYXVsdCc6IFswLCBcIlwiLCBcIlwiXVxufTtcblxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGpxTGl0ZUlzVGV4dE5vZGUoaHRtbCkge1xuICByZXR1cm4gIUhUTUxfUkVHRVhQLnRlc3QoaHRtbCk7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUFjY2VwdHNEYXRhKG5vZGUpIHtcbiAgLy8gVGhlIHdpbmRvdyBvYmplY3QgY2FuIGFjY2VwdCBkYXRhIGJ1dCBoYXMgbm8gbm9kZVR5cGVcbiAgLy8gT3RoZXJ3aXNlIHdlIGFyZSBvbmx5IGludGVyZXN0ZWQgaW4gZWxlbWVudHMgKDEpIGFuZCBkb2N1bWVudHMgKDkpXG4gIHZhciBub2RlVHlwZSA9IG5vZGUubm9kZVR5cGU7XG4gIHJldHVybiBub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0VMRU1FTlQgfHwgIW5vZGVUeXBlIHx8IG5vZGVUeXBlID09PSBOT0RFX1RZUEVfRE9DVU1FTlQ7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUhhc0RhdGEobm9kZSkge1xuICBmb3IgKHZhciBrZXkgaW4ganFDYWNoZVtub2RlLm5nMzM5XSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24ganFMaXRlQnVpbGRGcmFnbWVudChodG1sLCBjb250ZXh0KSB7XG4gIHZhciB0bXAsIHRhZywgd3JhcCxcbiAgICAgIGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG4gICAgICBub2RlcyA9IFtdLCBpO1xuXG4gIGlmIChqcUxpdGVJc1RleHROb2RlKGh0bWwpKSB7XG4gICAgLy8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG4gICAgbm9kZXMucHVzaChjb250ZXh0LmNyZWF0ZVRleHROb2RlKGh0bWwpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcbiAgICB0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoY29udGV4dC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKTtcbiAgICB0YWcgPSAoVEFHX05BTUVfUkVHRVhQLmV4ZWMoaHRtbCkgfHwgW1wiXCIsIFwiXCJdKVsxXS50b0xvd2VyQ2FzZSgpO1xuICAgIHdyYXAgPSB3cmFwTWFwW3RhZ10gfHwgd3JhcE1hcC5fZGVmYXVsdDtcbiAgICB0bXAuaW5uZXJIVE1MID0gd3JhcFsxXSArIGh0bWwucmVwbGFjZShYSFRNTF9UQUdfUkVHRVhQLCBcIjwkMT48LyQyPlwiKSArIHdyYXBbMl07XG5cbiAgICAvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcbiAgICBpID0gd3JhcFswXTtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0bXAgPSB0bXAubGFzdENoaWxkO1xuICAgIH1cblxuICAgIG5vZGVzID0gY29uY2F0KG5vZGVzLCB0bXAuY2hpbGROb2Rlcyk7XG5cbiAgICB0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuICAgIHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG4gIH1cblxuICAvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG4gIGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcbiAgZnJhZ21lbnQuaW5uZXJIVE1MID0gXCJcIjsgLy8gQ2xlYXIgaW5uZXIgSFRNTFxuICBmb3JFYWNoKG5vZGVzLCBmdW5jdGlvbihub2RlKSB7XG4gICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQobm9kZSk7XG4gIH0pO1xuXG4gIHJldHVybiBmcmFnbWVudDtcbn1cblxuZnVuY3Rpb24ganFMaXRlUGFyc2VIVE1MKGh0bWwsIGNvbnRleHQpIHtcbiAgY29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG4gIHZhciBwYXJzZWQ7XG5cbiAgaWYgKChwYXJzZWQgPSBTSU5HTEVfVEFHX1JFR0VYUC5leGVjKGh0bWwpKSkge1xuICAgIHJldHVybiBbY29udGV4dC5jcmVhdGVFbGVtZW50KHBhcnNlZFsxXSldO1xuICB9XG5cbiAgaWYgKChwYXJzZWQgPSBqcUxpdGVCdWlsZEZyYWdtZW50KGh0bWwsIGNvbnRleHQpKSkge1xuICAgIHJldHVybiBwYXJzZWQuY2hpbGROb2RlcztcbiAgfVxuXG4gIHJldHVybiBbXTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5mdW5jdGlvbiBKUUxpdGUoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEpRTGl0ZSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgdmFyIGFyZ0lzU3RyaW5nO1xuXG4gIGlmIChpc1N0cmluZyhlbGVtZW50KSkge1xuICAgIGVsZW1lbnQgPSB0cmltKGVsZW1lbnQpO1xuICAgIGFyZ0lzU3RyaW5nID0gdHJ1ZTtcbiAgfVxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSlFMaXRlKSkge1xuICAgIGlmIChhcmdJc1N0cmluZyAmJiBlbGVtZW50LmNoYXJBdCgwKSAhPSAnPCcpIHtcbiAgICAgIHRocm93IGpxTGl0ZU1pbkVycignbm9zZWwnLCAnTG9va2luZyB1cCBlbGVtZW50cyB2aWEgc2VsZWN0b3JzIGlzIG5vdCBzdXBwb3J0ZWQgYnkganFMaXRlISBTZWU6IGh0dHA6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL2FuZ3VsYXIuZWxlbWVudCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEpRTGl0ZShlbGVtZW50KTtcbiAgfVxuXG4gIGlmIChhcmdJc1N0cmluZykge1xuICAgIGpxTGl0ZUFkZE5vZGVzKHRoaXMsIGpxTGl0ZVBhcnNlSFRNTChlbGVtZW50KSk7XG4gIH0gZWxzZSB7XG4gICAganFMaXRlQWRkTm9kZXModGhpcywgZWxlbWVudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlQ2xvbmUoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZURlYWxvYyhlbGVtZW50LCBvbmx5RGVzY2VuZGFudHMpIHtcbiAgaWYgKCFvbmx5RGVzY2VuZGFudHMpIGpxTGl0ZVJlbW92ZURhdGEoZWxlbWVudCk7XG5cbiAgaWYgKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCkge1xuICAgIHZhciBkZXNjZW5kYW50cyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnKicpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gZGVzY2VuZGFudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBqcUxpdGVSZW1vdmVEYXRhKGRlc2NlbmRhbnRzW2ldKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlT2ZmKGVsZW1lbnQsIHR5cGUsIGZuLCB1bnN1cHBvcnRlZCkge1xuICBpZiAoaXNEZWZpbmVkKHVuc3VwcG9ydGVkKSkgdGhyb3cganFMaXRlTWluRXJyKCdvZmZhcmdzJywgJ2pxTGl0ZSNvZmYoKSBkb2VzIG5vdCBzdXBwb3J0IHRoZSBgc2VsZWN0b3JgIGFyZ3VtZW50Jyk7XG5cbiAgdmFyIGV4cGFuZG9TdG9yZSA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50KTtcbiAgdmFyIGV2ZW50cyA9IGV4cGFuZG9TdG9yZSAmJiBleHBhbmRvU3RvcmUuZXZlbnRzO1xuICB2YXIgaGFuZGxlID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5oYW5kbGU7XG5cbiAgaWYgKCFoYW5kbGUpIHJldHVybjsgLy9ubyBsaXN0ZW5lcnMgcmVnaXN0ZXJlZFxuXG4gIGlmICghdHlwZSkge1xuICAgIGZvciAodHlwZSBpbiBldmVudHMpIHtcbiAgICAgIGlmICh0eXBlICE9PSAnJGRlc3Ryb3knKSB7XG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbihlbGVtZW50LCB0eXBlLCBoYW5kbGUpO1xuICAgICAgfVxuICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yRWFjaCh0eXBlLnNwbGl0KCcgJyksIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgIGlmIChpc0RlZmluZWQoZm4pKSB7XG4gICAgICAgIHZhciBsaXN0ZW5lckZucyA9IGV2ZW50c1t0eXBlXTtcbiAgICAgICAgYXJyYXlSZW1vdmUobGlzdGVuZXJGbnMgfHwgW10sIGZuKTtcbiAgICAgICAgaWYgKGxpc3RlbmVyRm5zICYmIGxpc3RlbmVyRm5zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuKGVsZW1lbnQsIHR5cGUsIGhhbmRsZSk7XG4gICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZVJlbW92ZURhdGEoZWxlbWVudCwgbmFtZSkge1xuICB2YXIgZXhwYW5kb0lkID0gZWxlbWVudC5uZzMzOTtcbiAgdmFyIGV4cGFuZG9TdG9yZSA9IGV4cGFuZG9JZCAmJiBqcUNhY2hlW2V4cGFuZG9JZF07XG5cbiAgaWYgKGV4cGFuZG9TdG9yZSkge1xuICAgIGlmIChuYW1lKSB7XG4gICAgICBkZWxldGUgZXhwYW5kb1N0b3JlLmRhdGFbbmFtZV07XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV4cGFuZG9TdG9yZS5oYW5kbGUpIHtcbiAgICAgIGlmIChleHBhbmRvU3RvcmUuZXZlbnRzLiRkZXN0cm95KSB7XG4gICAgICAgIGV4cGFuZG9TdG9yZS5oYW5kbGUoe30sICckZGVzdHJveScpO1xuICAgICAgfVxuICAgICAganFMaXRlT2ZmKGVsZW1lbnQpO1xuICAgIH1cbiAgICBkZWxldGUganFDYWNoZVtleHBhbmRvSWRdO1xuICAgIGVsZW1lbnQubmczMzkgPSB1bmRlZmluZWQ7IC8vIGRvbid0IGRlbGV0ZSBET00gZXhwYW5kb3MuIElFIGFuZCBDaHJvbWUgZG9uJ3QgbGlrZSBpdFxuICB9XG59XG5cblxuZnVuY3Rpb24ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQsIGNyZWF0ZUlmTmVjZXNzYXJ5KSB7XG4gIHZhciBleHBhbmRvSWQgPSBlbGVtZW50Lm5nMzM5LFxuICAgICAgZXhwYW5kb1N0b3JlID0gZXhwYW5kb0lkICYmIGpxQ2FjaGVbZXhwYW5kb0lkXTtcblxuICBpZiAoY3JlYXRlSWZOZWNlc3NhcnkgJiYgIWV4cGFuZG9TdG9yZSkge1xuICAgIGVsZW1lbnQubmczMzkgPSBleHBhbmRvSWQgPSBqcU5leHRJZCgpO1xuICAgIGV4cGFuZG9TdG9yZSA9IGpxQ2FjaGVbZXhwYW5kb0lkXSA9IHtldmVudHM6IHt9LCBkYXRhOiB7fSwgaGFuZGxlOiB1bmRlZmluZWR9O1xuICB9XG5cbiAgcmV0dXJuIGV4cGFuZG9TdG9yZTtcbn1cblxuXG5mdW5jdGlvbiBqcUxpdGVEYXRhKGVsZW1lbnQsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGpxTGl0ZUFjY2VwdHNEYXRhKGVsZW1lbnQpKSB7XG5cbiAgICB2YXIgaXNTaW1wbGVTZXR0ZXIgPSBpc0RlZmluZWQodmFsdWUpO1xuICAgIHZhciBpc1NpbXBsZUdldHRlciA9ICFpc1NpbXBsZVNldHRlciAmJiBrZXkgJiYgIWlzT2JqZWN0KGtleSk7XG4gICAgdmFyIG1hc3NHZXR0ZXIgPSAha2V5O1xuICAgIHZhciBleHBhbmRvU3RvcmUgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgIWlzU2ltcGxlR2V0dGVyKTtcbiAgICB2YXIgZGF0YSA9IGV4cGFuZG9TdG9yZSAmJiBleHBhbmRvU3RvcmUuZGF0YTtcblxuICAgIGlmIChpc1NpbXBsZVNldHRlcikgeyAvLyBkYXRhKCdrZXknLCB2YWx1ZSlcbiAgICAgIGRhdGFba2V5XSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobWFzc0dldHRlcikgeyAgLy8gZGF0YSgpXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzU2ltcGxlR2V0dGVyKSB7IC8vIGRhdGEoJ2tleScpXG4gICAgICAgICAgLy8gZG9uJ3QgZm9yY2UgY3JlYXRpb24gb2YgZXhwYW5kb1N0b3JlIGlmIGl0IGRvZXNuJ3QgZXhpc3QgeWV0XG4gICAgICAgICAgcmV0dXJuIGRhdGEgJiYgZGF0YVtrZXldO1xuICAgICAgICB9IGVsc2UgeyAvLyBtYXNzLXNldHRlcjogZGF0YSh7a2V5MTogdmFsMSwga2V5MjogdmFsMn0pXG4gICAgICAgICAgZXh0ZW5kKGRhdGEsIGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlSGFzQ2xhc3MoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgaWYgKCFlbGVtZW50LmdldEF0dHJpYnV0ZSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gKChcIiBcIiArIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIikucmVwbGFjZSgvW1xcblxcdF0vZywgXCIgXCIpLlxuICAgICAgaW5kZXhPZihcIiBcIiArIHNlbGVjdG9yICsgXCIgXCIpID4gLTEpO1xufVxuXG5mdW5jdGlvbiBqcUxpdGVSZW1vdmVDbGFzcyhlbGVtZW50LCBjc3NDbGFzc2VzKSB7XG4gIGlmIChjc3NDbGFzc2VzICYmIGVsZW1lbnQuc2V0QXR0cmlidXRlKSB7XG4gICAgZm9yRWFjaChjc3NDbGFzc2VzLnNwbGl0KCcgJyksIGZ1bmN0aW9uKGNzc0NsYXNzKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB0cmltKFxuICAgICAgICAgIChcIiBcIiArIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIilcbiAgICAgICAgICAucmVwbGFjZSgvW1xcblxcdF0vZywgXCIgXCIpXG4gICAgICAgICAgLnJlcGxhY2UoXCIgXCIgKyB0cmltKGNzc0NsYXNzKSArIFwiIFwiLCBcIiBcIikpXG4gICAgICApO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUFkZENsYXNzKGVsZW1lbnQsIGNzc0NsYXNzZXMpIHtcbiAgaWYgKGNzc0NsYXNzZXMgJiYgZWxlbWVudC5zZXRBdHRyaWJ1dGUpIHtcbiAgICB2YXIgZXhpc3RpbmdDbGFzc2VzID0gKCcgJyArIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyAnICcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1tcXG5cXHRdL2csIFwiIFwiKTtcblxuICAgIGZvckVhY2goY3NzQ2xhc3Nlcy5zcGxpdCgnICcpLCBmdW5jdGlvbihjc3NDbGFzcykge1xuICAgICAgY3NzQ2xhc3MgPSB0cmltKGNzc0NsYXNzKTtcbiAgICAgIGlmIChleGlzdGluZ0NsYXNzZXMuaW5kZXhPZignICcgKyBjc3NDbGFzcyArICcgJykgPT09IC0xKSB7XG4gICAgICAgIGV4aXN0aW5nQ2xhc3NlcyArPSBjc3NDbGFzcyArICcgJztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHRyaW0oZXhpc3RpbmdDbGFzc2VzKSk7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBqcUxpdGVBZGROb2Rlcyhyb290LCBlbGVtZW50cykge1xuICAvLyBUSElTIENPREUgSVMgVkVSWSBIT1QuIERvbid0IG1ha2UgY2hhbmdlcyB3aXRob3V0IGJlbmNobWFya2luZy5cblxuICBpZiAoZWxlbWVudHMpIHtcblxuICAgIC8vIGlmIGEgTm9kZSAodGhlIG1vc3QgY29tbW9uIGNhc2UpXG4gICAgaWYgKGVsZW1lbnRzLm5vZGVUeXBlKSB7XG4gICAgICByb290W3Jvb3QubGVuZ3RoKytdID0gZWxlbWVudHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgIC8vIGlmIGFuIEFycmF5IG9yIE5vZGVMaXN0IGFuZCBub3QgYSBXaW5kb3dcbiAgICAgIGlmICh0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJyAmJiBlbGVtZW50cy53aW5kb3cgIT09IGVsZW1lbnRzKSB7XG4gICAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByb290W3Jvb3QubGVuZ3RoKytdID0gZWxlbWVudHNbaV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290W3Jvb3QubGVuZ3RoKytdID0gZWxlbWVudHM7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuZnVuY3Rpb24ganFMaXRlQ29udHJvbGxlcihlbGVtZW50LCBuYW1lKSB7XG4gIHJldHVybiBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsICckJyArIChuYW1lIHx8ICduZ0NvbnRyb2xsZXInKSArICdDb250cm9sbGVyJyk7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUluaGVyaXRlZERhdGEoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgLy8gaWYgZWxlbWVudCBpcyB0aGUgZG9jdW1lbnQgb2JqZWN0IHdvcmsgd2l0aCB0aGUgaHRtbCBlbGVtZW50IGluc3RlYWRcbiAgLy8gdGhpcyBtYWtlcyAkKGRvY3VtZW50KS5zY29wZSgpIHBvc3NpYmxlXG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlID09IE5PREVfVFlQRV9ET0NVTUVOVCkge1xuICAgIGVsZW1lbnQgPSBlbGVtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuICB2YXIgbmFtZXMgPSBpc0FycmF5KG5hbWUpID8gbmFtZSA6IFtuYW1lXTtcblxuICB3aGlsZSAoZWxlbWVudCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5hbWVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGlmICgodmFsdWUgPSBqcUxpdGUuZGF0YShlbGVtZW50LCBuYW1lc1tpXSkpICE9PSB1bmRlZmluZWQpIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvLyBJZiBkZWFsaW5nIHdpdGggYSBkb2N1bWVudCBmcmFnbWVudCBub2RlIHdpdGggYSBob3N0IGVsZW1lbnQsIGFuZCBubyBwYXJlbnQsIHVzZSB0aGUgaG9zdFxuICAgIC8vIGVsZW1lbnQgYXMgdGhlIHBhcmVudC4gVGhpcyBlbmFibGVzIGRpcmVjdGl2ZXMgd2l0aGluIGEgU2hhZG93IERPTSBvciBwb2x5ZmlsbGVkIFNoYWRvdyBET01cbiAgICAvLyB0byBsb29rdXAgcGFyZW50IGNvbnRyb2xsZXJzLlxuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGUgfHwgKGVsZW1lbnQubm9kZVR5cGUgPT09IE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCAmJiBlbGVtZW50Lmhvc3QpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUVtcHR5KGVsZW1lbnQpIHtcbiAganFMaXRlRGVhbG9jKGVsZW1lbnQsIHRydWUpO1xuICB3aGlsZSAoZWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgZWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmZpcnN0Q2hpbGQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZVJlbW92ZShlbGVtZW50LCBrZWVwRGF0YSkge1xuICBpZiAoIWtlZXBEYXRhKSBqcUxpdGVEZWFsb2MoZWxlbWVudCk7XG4gIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZChlbGVtZW50KTtcbn1cblxuXG5mdW5jdGlvbiBqcUxpdGVEb2N1bWVudExvYWRlZChhY3Rpb24sIHdpbikge1xuICB3aW4gPSB3aW4gfHwgd2luZG93O1xuICBpZiAod2luLmRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAvLyBGb3JjZSB0aGUgYWN0aW9uIHRvIGJlIHJ1biBhc3luYyBmb3IgY29uc2lzdGVudCBiZWhhdmlvdXJcbiAgICAvLyBmcm9tIHRoZSBhY3Rpb24ncyBwb2ludCBvZiB2aWV3XG4gICAgLy8gaS5lLiBpdCB3aWxsIGRlZmluaXRlbHkgbm90IGJlIGluIGEgJGFwcGx5XG4gICAgd2luLnNldFRpbWVvdXQoYWN0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBObyBuZWVkIHRvIHVuYmluZCB0aGlzIGhhbmRsZXIgYXMgbG9hZCBpcyBvbmx5IGV2ZXIgY2FsbGVkIG9uY2VcbiAgICBqcUxpdGUod2luKS5vbignbG9hZCcsIGFjdGlvbik7XG4gIH1cbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGdW5jdGlvbnMgd2hpY2ggYXJlIGRlY2xhcmVkIGRpcmVjdGx5LlxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG52YXIgSlFMaXRlUHJvdG90eXBlID0gSlFMaXRlLnByb3RvdHlwZSA9IHtcbiAgcmVhZHk6IGZ1bmN0aW9uKGZuKSB7XG4gICAgdmFyIGZpcmVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiB0cmlnZ2VyKCkge1xuICAgICAgaWYgKGZpcmVkKSByZXR1cm47XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBmbigpO1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIGRvY3VtZW50IGlzIGFscmVhZHkgbG9hZGVkXG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgIHNldFRpbWVvdXQodHJpZ2dlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub24oJ0RPTUNvbnRlbnRMb2FkZWQnLCB0cmlnZ2VyKTsgLy8gd29ya3MgZm9yIG1vZGVybiBicm93c2VycyBhbmQgSUU5XG4gICAgICAvLyB3ZSBjYW4gbm90IHVzZSBqcUxpdGUgc2luY2Ugd2UgYXJlIG5vdCBkb25lIGxvYWRpbmcgYW5kIGpRdWVyeSBjb3VsZCBiZSBsb2FkZWQgbGF0ZXIuXG4gICAgICAvLyBqc2hpbnQgLVcwNjRcbiAgICAgIEpRTGl0ZSh3aW5kb3cpLm9uKCdsb2FkJywgdHJpZ2dlcik7IC8vIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQgZm9yIG90aGVyc1xuICAgICAgLy8ganNoaW50ICtXMDY0XG4gICAgfVxuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gW107XG4gICAgZm9yRWFjaCh0aGlzLCBmdW5jdGlvbihlKSB7IHZhbHVlLnB1c2goJycgKyBlKTt9KTtcbiAgICByZXR1cm4gJ1snICsgdmFsdWUuam9pbignLCAnKSArICddJztcbiAgfSxcblxuICBlcTogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHJldHVybiAoaW5kZXggPj0gMCkgPyBqcUxpdGUodGhpc1tpbmRleF0pIDoganFMaXRlKHRoaXNbdGhpcy5sZW5ndGggKyBpbmRleF0pO1xuICB9LFxuXG4gIGxlbmd0aDogMCxcbiAgcHVzaDogcHVzaCxcbiAgc29ydDogW10uc29ydCxcbiAgc3BsaWNlOiBbXS5zcGxpY2Vcbn07XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRnVuY3Rpb25zIGl0ZXJhdGluZyBnZXR0ZXIvc2V0dGVycy5cbi8vIHRoZXNlIGZ1bmN0aW9ucyByZXR1cm4gc2VsZiBvbiBzZXR0ZXIgYW5kXG4vLyB2YWx1ZSBvbiBnZXQuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbnZhciBCT09MRUFOX0FUVFIgPSB7fTtcbmZvckVhY2goJ211bHRpcGxlLHNlbGVjdGVkLGNoZWNrZWQsZGlzYWJsZWQscmVhZE9ubHkscmVxdWlyZWQsb3Blbicuc3BsaXQoJywnKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgQk9PTEVBTl9BVFRSW2xvd2VyY2FzZSh2YWx1ZSldID0gdmFsdWU7XG59KTtcbnZhciBCT09MRUFOX0VMRU1FTlRTID0ge307XG5mb3JFYWNoKCdpbnB1dCxzZWxlY3Qsb3B0aW9uLHRleHRhcmVhLGJ1dHRvbixmb3JtLGRldGFpbHMnLnNwbGl0KCcsJyksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gIEJPT0xFQU5fRUxFTUVOVFNbdmFsdWVdID0gdHJ1ZTtcbn0pO1xudmFyIEFMSUFTRURfQVRUUiA9IHtcbiAgJ25nTWlubGVuZ3RoJzogJ21pbmxlbmd0aCcsXG4gICduZ01heGxlbmd0aCc6ICdtYXhsZW5ndGgnLFxuICAnbmdNaW4nOiAnbWluJyxcbiAgJ25nTWF4JzogJ21heCcsXG4gICduZ1BhdHRlcm4nOiAncGF0dGVybidcbn07XG5cbmZ1bmN0aW9uIGdldEJvb2xlYW5BdHRyTmFtZShlbGVtZW50LCBuYW1lKSB7XG4gIC8vIGNoZWNrIGRvbSBsYXN0IHNpbmNlIHdlIHdpbGwgbW9zdCBsaWtlbHkgZmFpbCBvbiBuYW1lXG4gIHZhciBib29sZWFuQXR0ciA9IEJPT0xFQU5fQVRUUltuYW1lLnRvTG93ZXJDYXNlKCldO1xuXG4gIC8vIGJvb2xlYW5BdHRyIGlzIGhlcmUgdHdpY2UgdG8gbWluaW1pemUgRE9NIGFjY2Vzc1xuICByZXR1cm4gYm9vbGVhbkF0dHIgJiYgQk9PTEVBTl9FTEVNRU5UU1tub2RlTmFtZV8oZWxlbWVudCldICYmIGJvb2xlYW5BdHRyO1xufVxuXG5mdW5jdGlvbiBnZXRBbGlhc2VkQXR0ck5hbWUoZWxlbWVudCwgbmFtZSkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuICByZXR1cm4gKG5vZGVOYW1lID09PSAnSU5QVVQnIHx8IG5vZGVOYW1lID09PSAnVEVYVEFSRUEnKSAmJiBBTElBU0VEX0FUVFJbbmFtZV07XG59XG5cbmZvckVhY2goe1xuICBkYXRhOiBqcUxpdGVEYXRhLFxuICByZW1vdmVEYXRhOiBqcUxpdGVSZW1vdmVEYXRhLFxuICBoYXNEYXRhOiBqcUxpdGVIYXNEYXRhXG59LCBmdW5jdGlvbihmbiwgbmFtZSkge1xuICBKUUxpdGVbbmFtZV0gPSBmbjtcbn0pO1xuXG5mb3JFYWNoKHtcbiAgZGF0YToganFMaXRlRGF0YSxcbiAgaW5oZXJpdGVkRGF0YToganFMaXRlSW5oZXJpdGVkRGF0YSxcblxuICBzY29wZTogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIC8vIENhbid0IHVzZSBqcUxpdGVEYXRhIGhlcmUgZGlyZWN0bHkgc28gd2Ugc3RheSBjb21wYXRpYmxlIHdpdGggalF1ZXJ5IVxuICAgIHJldHVybiBqcUxpdGUuZGF0YShlbGVtZW50LCAnJHNjb3BlJykgfHwganFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudCwgWyckaXNvbGF0ZVNjb3BlJywgJyRzY29wZSddKTtcbiAgfSxcblxuICBpc29sYXRlU2NvcGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAvLyBDYW4ndCB1c2UganFMaXRlRGF0YSBoZXJlIGRpcmVjdGx5IHNvIHdlIHN0YXkgY29tcGF0aWJsZSB3aXRoIGpRdWVyeSFcbiAgICByZXR1cm4ganFMaXRlLmRhdGEoZWxlbWVudCwgJyRpc29sYXRlU2NvcGUnKSB8fCBqcUxpdGUuZGF0YShlbGVtZW50LCAnJGlzb2xhdGVTY29wZU5vVGVtcGxhdGUnKTtcbiAgfSxcblxuICBjb250cm9sbGVyOiBqcUxpdGVDb250cm9sbGVyLFxuXG4gIGluamVjdG9yOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgcmV0dXJuIGpxTGl0ZUluaGVyaXRlZERhdGEoZWxlbWVudCwgJyRpbmplY3RvcicpO1xuICB9LFxuXG4gIHJlbW92ZUF0dHI6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUpIHtcbiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfSxcblxuICBoYXNDbGFzczoganFMaXRlSGFzQ2xhc3MsXG5cbiAgY3NzOiBmdW5jdGlvbihlbGVtZW50LCBuYW1lLCB2YWx1ZSkge1xuICAgIG5hbWUgPSBjYW1lbENhc2UobmFtZSk7XG5cbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgZWxlbWVudC5zdHlsZVtuYW1lXSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5zdHlsZVtuYW1lXTtcbiAgICB9XG4gIH0sXG5cbiAgYXR0cjogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgbm9kZVR5cGUgPSBlbGVtZW50Lm5vZGVUeXBlO1xuICAgIGlmIChub2RlVHlwZSA9PT0gTk9ERV9UWVBFX1RFWFQgfHwgbm9kZVR5cGUgPT09IE5PREVfVFlQRV9BVFRSSUJVVEUgfHwgbm9kZVR5cGUgPT09IE5PREVfVFlQRV9DT01NRU5UKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBsb3dlcmNhc2VkTmFtZSA9IGxvd2VyY2FzZShuYW1lKTtcbiAgICBpZiAoQk9PTEVBTl9BVFRSW2xvd2VyY2FzZWROYW1lXSkge1xuICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCEhdmFsdWUpIHtcbiAgICAgICAgICBlbGVtZW50W25hbWVdID0gdHJ1ZTtcbiAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCBsb3dlcmNhc2VkTmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWxlbWVudFtuYW1lXSA9IGZhbHNlO1xuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGxvd2VyY2FzZWROYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIChlbGVtZW50W25hbWVdIHx8XG4gICAgICAgICAgICAgICAgIChlbGVtZW50LmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKG5hbWUpIHx8IG5vb3ApLnNwZWNpZmllZClcbiAgICAgICAgICAgICAgID8gbG93ZXJjYXNlZE5hbWVcbiAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUpIHtcbiAgICAgIC8vIHRoZSBleHRyYSBhcmd1bWVudCBcIjJcIiBpcyB0byBnZXQgdGhlIHJpZ2h0IHRoaW5nIGZvciBhLmhyZWYgaW4gSUUsIHNlZSBqUXVlcnkgY29kZVxuICAgICAgLy8gc29tZSBlbGVtZW50cyAoZS5nLiBEb2N1bWVudCkgZG9uJ3QgaGF2ZSBnZXQgYXR0cmlidXRlLCBzbyByZXR1cm4gdW5kZWZpbmVkXG4gICAgICB2YXIgcmV0ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUobmFtZSwgMik7XG4gICAgICAvLyBub3JtYWxpemUgbm9uLWV4aXN0aW5nIGF0dHJpYnV0ZXMgdG8gdW5kZWZpbmVkIChhcyBqUXVlcnkpXG4gICAgICByZXR1cm4gcmV0ID09PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuICAgIH1cbiAgfSxcblxuICBwcm9wOiBmdW5jdGlvbihlbGVtZW50LCBuYW1lLCB2YWx1ZSkge1xuICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICBlbGVtZW50W25hbWVdID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlbGVtZW50W25hbWVdO1xuICAgIH1cbiAgfSxcblxuICB0ZXh0OiAoZnVuY3Rpb24oKSB7XG4gICAgZ2V0VGV4dC4kZHYgPSAnJztcbiAgICByZXR1cm4gZ2V0VGV4dDtcblxuICAgIGZ1bmN0aW9uIGdldFRleHQoZWxlbWVudCwgdmFsdWUpIHtcbiAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIG5vZGVUeXBlID0gZWxlbWVudC5ub2RlVHlwZTtcbiAgICAgICAgcmV0dXJuIChub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0VMRU1FTlQgfHwgbm9kZVR5cGUgPT09IE5PREVfVFlQRV9URVhUKSA/IGVsZW1lbnQudGV4dENvbnRlbnQgOiAnJztcbiAgICAgIH1cbiAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgICB9XG4gIH0pKCksXG5cbiAgdmFsOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZSkge1xuICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIGlmIChlbGVtZW50Lm11bHRpcGxlICYmIG5vZGVOYW1lXyhlbGVtZW50KSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3JFYWNoKGVsZW1lbnQub3B0aW9ucywgZnVuY3Rpb24ob3B0aW9uKSB7XG4gICAgICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gob3B0aW9uLnZhbHVlIHx8IG9wdGlvbi50ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMCA/IG51bGwgOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZWxlbWVudC52YWx1ZTtcbiAgICB9XG4gICAgZWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICB9LFxuXG4gIGh0bWw6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuaW5uZXJIVE1MO1xuICAgIH1cbiAgICBqcUxpdGVEZWFsb2MoZWxlbWVudCwgdHJ1ZSk7XG4gICAgZWxlbWVudC5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgfSxcblxuICBlbXB0eToganFMaXRlRW1wdHlcbn0sIGZ1bmN0aW9uKGZuLCBuYW1lKSB7XG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzOiB3cml0ZXMgcmV0dXJuIHNlbGVjdGlvbiwgcmVhZHMgcmV0dXJuIGZpcnN0IHZhbHVlXG4gICAqL1xuICBKUUxpdGUucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oYXJnMSwgYXJnMikge1xuICAgIHZhciBpLCBrZXk7XG4gICAgdmFyIG5vZGVDb3VudCA9IHRoaXMubGVuZ3RoO1xuXG4gICAgLy8ganFMaXRlSGFzQ2xhc3MgaGFzIG9ubHkgdHdvIGFyZ3VtZW50cywgYnV0IGlzIGEgZ2V0dGVyLW9ubHkgZm4sIHNvIHdlIG5lZWQgdG8gc3BlY2lhbC1jYXNlIGl0XG4gICAgLy8gaW4gYSB3YXkgdGhhdCBzdXJ2aXZlcyBtaW5pZmljYXRpb24uXG4gICAgLy8ganFMaXRlRW1wdHkgdGFrZXMgbm8gYXJndW1lbnRzIGJ1dCBpcyBhIHNldHRlci5cbiAgICBpZiAoZm4gIT09IGpxTGl0ZUVtcHR5ICYmXG4gICAgICAgICgoKGZuLmxlbmd0aCA9PSAyICYmIChmbiAhPT0ganFMaXRlSGFzQ2xhc3MgJiYgZm4gIT09IGpxTGl0ZUNvbnRyb2xsZXIpKSA/IGFyZzEgOiBhcmcyKSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGFyZzEpKSB7XG5cbiAgICAgICAgLy8gd2UgYXJlIGEgd3JpdGUsIGJ1dCB0aGUgb2JqZWN0IHByb3BlcnRpZXMgYXJlIHRoZSBrZXkvdmFsdWVzXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBub2RlQ291bnQ7IGkrKykge1xuICAgICAgICAgIGlmIChmbiA9PT0ganFMaXRlRGF0YSkge1xuICAgICAgICAgICAgLy8gZGF0YSgpIHRha2VzIHRoZSB3aG9sZSBvYmplY3QgaW4galF1ZXJ5XG4gICAgICAgICAgICBmbih0aGlzW2ldLCBhcmcxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gYXJnMSkge1xuICAgICAgICAgICAgICBmbih0aGlzW2ldLCBrZXksIGFyZzFba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHJldHVybiBzZWxmIGZvciBjaGFpbmluZ1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHdlIGFyZSBhIHJlYWQsIHNvIHJlYWQgdGhlIGZpcnN0IGNoaWxkLlxuICAgICAgICAvLyBUT0RPOiBkbyB3ZSBzdGlsbCBuZWVkIHRoaXM/XG4gICAgICAgIHZhciB2YWx1ZSA9IGZuLiRkdjtcbiAgICAgICAgLy8gT25seSBpZiB3ZSBoYXZlICRkdiBkbyB3ZSBpdGVyYXRlIG92ZXIgYWxsLCBvdGhlcndpc2UgaXQgaXMganVzdCB0aGUgZmlyc3QgZWxlbWVudC5cbiAgICAgICAgdmFyIGpqID0gKHZhbHVlID09PSB1bmRlZmluZWQpID8gTWF0aC5taW4obm9kZUNvdW50LCAxKSA6IG5vZGVDb3VudDtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBqajsgaisrKSB7XG4gICAgICAgICAgdmFyIG5vZGVWYWx1ZSA9IGZuKHRoaXNbal0sIGFyZzEsIGFyZzIpO1xuICAgICAgICAgIHZhbHVlID0gdmFsdWUgPyB2YWx1ZSArIG5vZGVWYWx1ZSA6IG5vZGVWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHdlIGFyZSBhIHdyaXRlLCBzbyBhcHBseSB0byBhbGwgY2hpbGRyZW5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBub2RlQ291bnQ7IGkrKykge1xuICAgICAgICBmbih0aGlzW2ldLCBhcmcxLCBhcmcyKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzZWxmIGZvciBjaGFpbmluZ1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50SGFuZGxlcihlbGVtZW50LCBldmVudHMpIHtcbiAgdmFyIGV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50LCB0eXBlKSB7XG4gICAgLy8galF1ZXJ5IHNwZWNpZmljIGFwaVxuICAgIGV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQ7XG4gICAgfTtcblxuICAgIHZhciBldmVudEZucyA9IGV2ZW50c1t0eXBlIHx8IGV2ZW50LnR5cGVdO1xuICAgIHZhciBldmVudEZuc0xlbmd0aCA9IGV2ZW50Rm5zID8gZXZlbnRGbnMubGVuZ3RoIDogMDtcblxuICAgIGlmICghZXZlbnRGbnNMZW5ndGgpIHJldHVybjtcblxuICAgIGlmIChpc1VuZGVmaW5lZChldmVudC5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQpKSB7XG4gICAgICB2YXIgb3JpZ2luYWxTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gPSBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb247XG4gICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZXZlbnQuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3JpZ2luYWxTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICBvcmlnaW5hbFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbi5jYWxsKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV2ZW50LmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9PT0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgLy8gQ29weSBldmVudCBoYW5kbGVycyBpbiBjYXNlIGV2ZW50IGhhbmRsZXJzIGFycmF5IGlzIG1vZGlmaWVkIGR1cmluZyBleGVjdXRpb24uXG4gICAgaWYgKChldmVudEZuc0xlbmd0aCA+IDEpKSB7XG4gICAgICBldmVudEZucyA9IHNoYWxsb3dDb3B5KGV2ZW50Rm5zKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50Rm5zTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICBldmVudEZuc1tpXS5jYWxsKGVsZW1lbnQsIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2sgZm9yIGFuZ3VsYXJNb2Nrcy9jbGVhckRhdGFDYWNoZSB0aGF0IG1ha2VzIGl0IHBvc3NpYmxlIHRvIGRlcmVnaXN0ZXIgYWxsXG4gIC8vICAgICAgIGV2ZW50cyBvbiBgZWxlbWVudGBcbiAgZXZlbnRIYW5kbGVyLmVsZW0gPSBlbGVtZW50O1xuICByZXR1cm4gZXZlbnRIYW5kbGVyO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEZ1bmN0aW9ucyBpdGVyYXRpbmcgdHJhdmVyc2FsLlxuLy8gVGhlc2UgZnVuY3Rpb25zIGNoYWluIHJlc3VsdHMgaW50byBhIHNpbmdsZVxuLy8gc2VsZWN0b3IuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmZvckVhY2goe1xuICByZW1vdmVEYXRhOiBqcUxpdGVSZW1vdmVEYXRhLFxuXG4gIG9uOiBmdW5jdGlvbiBqcUxpdGVPbihlbGVtZW50LCB0eXBlLCBmbiwgdW5zdXBwb3J0ZWQpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHVuc3VwcG9ydGVkKSkgdGhyb3cganFMaXRlTWluRXJyKCdvbmFyZ3MnLCAnanFMaXRlI29uKCkgZG9lcyBub3Qgc3VwcG9ydCB0aGUgYHNlbGVjdG9yYCBvciBgZXZlbnREYXRhYCBwYXJhbWV0ZXJzJyk7XG5cbiAgICAvLyBEbyBub3QgYWRkIGV2ZW50IGhhbmRsZXJzIHRvIG5vbi1lbGVtZW50cyBiZWNhdXNlIHRoZXkgd2lsbCBub3QgYmUgY2xlYW5lZCB1cC5cbiAgICBpZiAoIWpxTGl0ZUFjY2VwdHNEYXRhKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGV4cGFuZG9TdG9yZSA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCB0cnVlKTtcbiAgICB2YXIgZXZlbnRzID0gZXhwYW5kb1N0b3JlLmV2ZW50cztcbiAgICB2YXIgaGFuZGxlID0gZXhwYW5kb1N0b3JlLmhhbmRsZTtcblxuICAgIGlmICghaGFuZGxlKSB7XG4gICAgICBoYW5kbGUgPSBleHBhbmRvU3RvcmUuaGFuZGxlID0gY3JlYXRlRXZlbnRIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cyk7XG4gICAgfVxuXG4gICAgLy8gaHR0cDovL2pzcGVyZi5jb20vc3RyaW5nLWluZGV4b2YtdnMtc3BsaXRcbiAgICB2YXIgdHlwZXMgPSB0eXBlLmluZGV4T2YoJyAnKSA+PSAwID8gdHlwZS5zcGxpdCgnICcpIDogW3R5cGVdO1xuICAgIHZhciBpID0gdHlwZXMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdHlwZSA9IHR5cGVzW2ldO1xuICAgICAgdmFyIGV2ZW50Rm5zID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAoIWV2ZW50Rm5zKSB7XG4gICAgICAgIGV2ZW50c1t0eXBlXSA9IFtdO1xuXG4gICAgICAgIGlmICh0eXBlID09PSAnbW91c2VlbnRlcicgfHwgdHlwZSA9PT0gJ21vdXNlbGVhdmUnKSB7XG4gICAgICAgICAgLy8gUmVmZXIgdG8galF1ZXJ5J3MgaW1wbGVtZW50YXRpb24gb2YgbW91c2VlbnRlciAmIG1vdXNlbGVhdmVcbiAgICAgICAgICAvLyBSZWFkIGFib3V0IG1vdXNlZW50ZXIgYW5kIG1vdXNlbGVhdmU6XG4gICAgICAgICAgLy8gaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfbW91c2UuaHRtbCNsaW5rOFxuXG4gICAgICAgICAganFMaXRlT24oZWxlbWVudCwgTU9VU0VfRVZFTlRfTUFQW3R5cGVdLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMsIHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgICAgICAgICAgLy8gRm9yIG1vdXNlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuICAgICAgICAgICAgLy8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcbiAgICAgICAgICAgIGlmICghcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGFyZ2V0ICYmICF0YXJnZXQuY29udGFpbnMocmVsYXRlZCkpKSB7XG4gICAgICAgICAgICAgIGhhbmRsZShldmVudCwgdHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodHlwZSAhPT0gJyRkZXN0cm95Jykge1xuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lckZuKGVsZW1lbnQsIHR5cGUsIGhhbmRsZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGV2ZW50Rm5zID0gZXZlbnRzW3R5cGVdO1xuICAgICAgfVxuICAgICAgZXZlbnRGbnMucHVzaChmbik7XG4gICAgfVxuICB9LFxuXG4gIG9mZjoganFMaXRlT2ZmLFxuXG4gIG9uZTogZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHtcbiAgICBlbGVtZW50ID0ganFMaXRlKGVsZW1lbnQpO1xuXG4gICAgLy9hZGQgdGhlIGxpc3RlbmVyIHR3aWNlIHNvIHRoYXQgd2hlbiBpdCBpcyBjYWxsZWRcbiAgICAvL3lvdSBjYW4gcmVtb3ZlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBhbmQgc3RpbGwgYmVcbiAgICAvL2FibGUgdG8gY2FsbCBlbGVtZW50Lm9mZihldiwgZm4pIG5vcm1hbGx5XG4gICAgZWxlbWVudC5vbih0eXBlLCBmdW5jdGlvbiBvbkZuKCkge1xuICAgICAgZWxlbWVudC5vZmYodHlwZSwgZm4pO1xuICAgICAgZWxlbWVudC5vZmYodHlwZSwgb25Gbik7XG4gICAgfSk7XG4gICAgZWxlbWVudC5vbih0eXBlLCBmbik7XG4gIH0sXG5cbiAgcmVwbGFjZVdpdGg6IGZ1bmN0aW9uKGVsZW1lbnQsIHJlcGxhY2VOb2RlKSB7XG4gICAgdmFyIGluZGV4LCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAganFMaXRlRGVhbG9jKGVsZW1lbnQpO1xuICAgIGZvckVhY2gobmV3IEpRTGl0ZShyZXBsYWNlTm9kZSksIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIGlmIChpbmRleCkge1xuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIGluZGV4Lm5leHRTaWJsaW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQobm9kZSwgZWxlbWVudCk7XG4gICAgICB9XG4gICAgICBpbmRleCA9IG5vZGU7XG4gICAgfSk7XG4gIH0sXG5cbiAgY2hpbGRyZW46IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBbXTtcbiAgICBmb3JFYWNoKGVsZW1lbnQuY2hpbGROb2RlcywgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UKSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9LFxuXG4gIGNvbnRlbnRzOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuY29udGVudERvY3VtZW50IHx8IGVsZW1lbnQuY2hpbGROb2RlcyB8fCBbXTtcbiAgfSxcblxuICBhcHBlbmQ6IGZ1bmN0aW9uKGVsZW1lbnQsIG5vZGUpIHtcbiAgICB2YXIgbm9kZVR5cGUgPSBlbGVtZW50Lm5vZGVUeXBlO1xuICAgIGlmIChub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0VMRU1FTlQgJiYgbm9kZVR5cGUgIT09IE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCkgcmV0dXJuO1xuXG4gICAgbm9kZSA9IG5ldyBKUUxpdGUobm9kZSk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBub2RlLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IG5vZGVbaV07XG4gICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJlcGVuZDogZnVuY3Rpb24oZWxlbWVudCwgbm9kZSkge1xuICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRUxFTUVOVCkge1xuICAgICAgdmFyIGluZGV4ID0gZWxlbWVudC5maXJzdENoaWxkO1xuICAgICAgZm9yRWFjaChuZXcgSlFMaXRlKG5vZGUpLCBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICBlbGVtZW50Lmluc2VydEJlZm9yZShjaGlsZCwgaW5kZXgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIHdyYXA6IGZ1bmN0aW9uKGVsZW1lbnQsIHdyYXBOb2RlKSB7XG4gICAgd3JhcE5vZGUgPSBqcUxpdGUod3JhcE5vZGUpLmVxKDApLmNsb25lKClbMF07XG4gICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKHdyYXBOb2RlLCBlbGVtZW50KTtcbiAgICB9XG4gICAgd3JhcE5vZGUuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gIH0sXG5cbiAgcmVtb3ZlOiBqcUxpdGVSZW1vdmUsXG5cbiAgZGV0YWNoOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAganFMaXRlUmVtb3ZlKGVsZW1lbnQsIHRydWUpO1xuICB9LFxuXG4gIGFmdGVyOiBmdW5jdGlvbihlbGVtZW50LCBuZXdFbGVtZW50KSB7XG4gICAgdmFyIGluZGV4ID0gZWxlbWVudCwgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIG5ld0VsZW1lbnQgPSBuZXcgSlFMaXRlKG5ld0VsZW1lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gbmV3RWxlbWVudC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICB2YXIgbm9kZSA9IG5ld0VsZW1lbnRbaV07XG4gICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIGluZGV4Lm5leHRTaWJsaW5nKTtcbiAgICAgIGluZGV4ID0gbm9kZTtcbiAgICB9XG4gIH0sXG5cbiAgYWRkQ2xhc3M6IGpxTGl0ZUFkZENsYXNzLFxuICByZW1vdmVDbGFzczoganFMaXRlUmVtb3ZlQ2xhc3MsXG5cbiAgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIHNlbGVjdG9yLCBjb25kaXRpb24pIHtcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGZvckVhY2goc2VsZWN0b3Iuc3BsaXQoJyAnKSwgZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgIHZhciBjbGFzc0NvbmRpdGlvbiA9IGNvbmRpdGlvbjtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGNsYXNzQ29uZGl0aW9uKSkge1xuICAgICAgICAgIGNsYXNzQ29uZGl0aW9uID0gIWpxTGl0ZUhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgKGNsYXNzQ29uZGl0aW9uID8ganFMaXRlQWRkQ2xhc3MgOiBqcUxpdGVSZW1vdmVDbGFzcykoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICBwYXJlbnQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQgPyBwYXJlbnQgOiBudWxsO1xuICB9LFxuXG4gIG5leHQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gIH0sXG5cbiAgZmluZDogZnVuY3Rpb24oZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICBpZiAoZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoc2VsZWN0b3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9LFxuXG4gIGNsb25lOiBqcUxpdGVDbG9uZSxcblxuICB0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIGV4dHJhUGFyYW1ldGVycykge1xuXG4gICAgdmFyIGR1bW15RXZlbnQsIGV2ZW50Rm5zQ29weSwgaGFuZGxlckFyZ3M7XG4gICAgdmFyIGV2ZW50TmFtZSA9IGV2ZW50LnR5cGUgfHwgZXZlbnQ7XG4gICAgdmFyIGV4cGFuZG9TdG9yZSA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50KTtcbiAgICB2YXIgZXZlbnRzID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5ldmVudHM7XG4gICAgdmFyIGV2ZW50Rm5zID0gZXZlbnRzICYmIGV2ZW50c1tldmVudE5hbWVdO1xuXG4gICAgaWYgKGV2ZW50Rm5zKSB7XG4gICAgICAvLyBDcmVhdGUgYSBkdW1teSBldmVudCB0byBwYXNzIHRvIHRoZSBoYW5kbGVyc1xuICAgICAgZHVtbXlFdmVudCA9IHtcbiAgICAgICAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkgeyB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlOyB9LFxuICAgICAgICBpc0RlZmF1bHRQcmV2ZW50ZWQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5kZWZhdWx0UHJldmVudGVkID09PSB0cnVlOyB9LFxuICAgICAgICBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkgeyB0aGlzLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHRydWU7IH0sXG4gICAgICAgIGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID09PSB0cnVlOyB9LFxuICAgICAgICBzdG9wUHJvcGFnYXRpb246IG5vb3AsXG4gICAgICAgIHR5cGU6IGV2ZW50TmFtZSxcbiAgICAgICAgdGFyZ2V0OiBlbGVtZW50XG4gICAgICB9O1xuXG4gICAgICAvLyBJZiBhIGN1c3RvbSBldmVudCB3YXMgcHJvdmlkZWQgdGhlbiBleHRlbmQgb3VyIGR1bW15IGV2ZW50IHdpdGggaXRcbiAgICAgIGlmIChldmVudC50eXBlKSB7XG4gICAgICAgIGR1bW15RXZlbnQgPSBleHRlbmQoZHVtbXlFdmVudCwgZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBDb3B5IGV2ZW50IGhhbmRsZXJzIGluIGNhc2UgZXZlbnQgaGFuZGxlcnMgYXJyYXkgaXMgbW9kaWZpZWQgZHVyaW5nIGV4ZWN1dGlvbi5cbiAgICAgIGV2ZW50Rm5zQ29weSA9IHNoYWxsb3dDb3B5KGV2ZW50Rm5zKTtcbiAgICAgIGhhbmRsZXJBcmdzID0gZXh0cmFQYXJhbWV0ZXJzID8gW2R1bW15RXZlbnRdLmNvbmNhdChleHRyYVBhcmFtZXRlcnMpIDogW2R1bW15RXZlbnRdO1xuXG4gICAgICBmb3JFYWNoKGV2ZW50Rm5zQ29weSwgZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgaWYgKCFkdW1teUV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgICBmbi5hcHBseShlbGVtZW50LCBoYW5kbGVyQXJncyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSwgZnVuY3Rpb24oZm4sIG5hbWUpIHtcbiAgLyoqXG4gICAqIGNoYWluaW5nIGZ1bmN0aW9uc1xuICAgKi9cbiAgSlFMaXRlLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICB2YXIgdmFsdWU7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSB0aGlzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSBmbih0aGlzW2ldLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAvLyBhbnkgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIHZhbHVlIG5lZWRzIHRvIGJlIHdyYXBwZWRcbiAgICAgICAgICB2YWx1ZSA9IGpxTGl0ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGpxTGl0ZUFkZE5vZGVzKHZhbHVlLCBmbih0aGlzW2ldLCBhcmcxLCBhcmcyLCBhcmczKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpc0RlZmluZWQodmFsdWUpID8gdmFsdWUgOiB0aGlzO1xuICB9O1xuXG4gIC8vIGJpbmQgbGVnYWN5IGJpbmQvdW5iaW5kIHRvIG9uL29mZlxuICBKUUxpdGUucHJvdG90eXBlLmJpbmQgPSBKUUxpdGUucHJvdG90eXBlLm9uO1xuICBKUUxpdGUucHJvdG90eXBlLnVuYmluZCA9IEpRTGl0ZS5wcm90b3R5cGUub2ZmO1xufSk7XG5cblxuLy8gUHJvdmlkZXIgZm9yIHByaXZhdGUgJCRqcUxpdGUgc2VydmljZVxuZnVuY3Rpb24gJCRqcUxpdGVQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24gJCRqcUxpdGUoKSB7XG4gICAgcmV0dXJuIGV4dGVuZChKUUxpdGUsIHtcbiAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbihub2RlLCBjbGFzc2VzKSB7XG4gICAgICAgIGlmIChub2RlLmF0dHIpIG5vZGUgPSBub2RlWzBdO1xuICAgICAgICByZXR1cm4ganFMaXRlSGFzQ2xhc3Mobm9kZSwgY2xhc3Nlcyk7XG4gICAgICB9LFxuICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uKG5vZGUsIGNsYXNzZXMpIHtcbiAgICAgICAgaWYgKG5vZGUuYXR0cikgbm9kZSA9IG5vZGVbMF07XG4gICAgICAgIHJldHVybiBqcUxpdGVBZGRDbGFzcyhub2RlLCBjbGFzc2VzKTtcbiAgICAgIH0sXG4gICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24obm9kZSwgY2xhc3Nlcykge1xuICAgICAgICBpZiAobm9kZS5hdHRyKSBub2RlID0gbm9kZVswXTtcbiAgICAgICAgcmV0dXJuIGpxTGl0ZVJlbW92ZUNsYXNzKG5vZGUsIGNsYXNzZXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xufVxuXG4vKipcbiAqIENvbXB1dGVzIGEgaGFzaCBvZiBhbiAnb2JqJy5cbiAqIEhhc2ggb2YgYTpcbiAqICBzdHJpbmcgaXMgc3RyaW5nXG4gKiAgbnVtYmVyIGlzIG51bWJlciBhcyBzdHJpbmdcbiAqICBvYmplY3QgaXMgZWl0aGVyIHJlc3VsdCBvZiBjYWxsaW5nICQkaGFzaEtleSBmdW5jdGlvbiBvbiB0aGUgb2JqZWN0IG9yIHVuaXF1ZWx5IGdlbmVyYXRlZCBpZCxcbiAqICAgICAgICAgdGhhdCBpcyBhbHNvIGFzc2lnbmVkIHRvIHRoZSAkJGhhc2hLZXkgcHJvcGVydHkgb2YgdGhlIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gb2JqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBoYXNoIHN0cmluZyBzdWNoIHRoYXQgdGhlIHNhbWUgaW5wdXQgd2lsbCBoYXZlIHRoZSBzYW1lIGhhc2ggc3RyaW5nLlxuICogICAgICAgICBUaGUgcmVzdWx0aW5nIHN0cmluZyBrZXkgaXMgaW4gJ3R5cGU6aGFzaEtleScgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBoYXNoS2V5KG9iaiwgbmV4dFVpZEZuKSB7XG4gIHZhciBrZXkgPSBvYmogJiYgb2JqLiQkaGFzaEtleTtcblxuICBpZiAoa2V5KSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGtleSA9IG9iai4kJGhhc2hLZXkoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfVxuXG4gIHZhciBvYmpUeXBlID0gdHlwZW9mIG9iajtcbiAgaWYgKG9ialR5cGUgPT0gJ2Z1bmN0aW9uJyB8fCAob2JqVHlwZSA9PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGwpKSB7XG4gICAga2V5ID0gb2JqLiQkaGFzaEtleSA9IG9ialR5cGUgKyAnOicgKyAobmV4dFVpZEZuIHx8IG5leHRVaWQpKCk7XG4gIH0gZWxzZSB7XG4gICAga2V5ID0gb2JqVHlwZSArICc6JyArIG9iajtcbiAgfVxuXG4gIHJldHVybiBrZXk7XG59XG5cbi8qKlxuICogSGFzaE1hcCB3aGljaCBjYW4gdXNlIG9iamVjdHMgYXMga2V5c1xuICovXG5mdW5jdGlvbiBIYXNoTWFwKGFycmF5LCBpc29sYXRlZFVpZCkge1xuICBpZiAoaXNvbGF0ZWRVaWQpIHtcbiAgICB2YXIgdWlkID0gMDtcbiAgICB0aGlzLm5leHRVaWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiArK3VpZDtcbiAgICB9O1xuICB9XG4gIGZvckVhY2goYXJyYXksIHRoaXMucHV0LCB0aGlzKTtcbn1cbkhhc2hNYXAucHJvdG90eXBlID0ge1xuICAvKipcbiAgICogU3RvcmUga2V5IHZhbHVlIHBhaXJcbiAgICogQHBhcmFtIGtleSBrZXkgdG8gc3RvcmUgY2FuIGJlIGFueSB0eXBlXG4gICAqIEBwYXJhbSB2YWx1ZSB2YWx1ZSB0byBzdG9yZSBjYW4gYmUgYW55IHR5cGVcbiAgICovXG4gIHB1dDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIHRoaXNbaGFzaEtleShrZXksIHRoaXMubmV4dFVpZCldID0gdmFsdWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSBrZXlcbiAgICogQHJldHVybnMge09iamVjdH0gdGhlIHZhbHVlIGZvciB0aGUga2V5XG4gICAqL1xuICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiB0aGlzW2hhc2hLZXkoa2V5LCB0aGlzLm5leHRVaWQpXTtcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBrZXkvdmFsdWUgcGFpclxuICAgKiBAcGFyYW0ga2V5XG4gICAqL1xuICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXNba2V5ID0gaGFzaEtleShrZXksIHRoaXMubmV4dFVpZCldO1xuICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59O1xuXG52YXIgJCRIYXNoTWFwUHJvdmlkZXIgPSBbZnVuY3Rpb24oKSB7XG4gIHRoaXMuJGdldCA9IFtmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gSGFzaE1hcDtcbiAgfV07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBtb2R1bGUgbmdcbiAqIEBuYW1lIGFuZ3VsYXIuaW5qZWN0b3JcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGVzIGFuIGluamVjdG9yIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGZvciByZXRyaWV2aW5nIHNlcnZpY2VzIGFzIHdlbGwgYXMgZm9yXG4gKiBkZXBlbmRlbmN5IGluamVjdGlvbiAoc2VlIHtAbGluayBndWlkZS9kaSBkZXBlbmRlbmN5IGluamVjdGlvbn0pLlxuICpcbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZ3xGdW5jdGlvbj59IG1vZHVsZXMgQSBsaXN0IG9mIG1vZHVsZSBmdW5jdGlvbnMgb3IgdGhlaXIgYWxpYXNlcy4gU2VlXG4gKiAgICAge0BsaW5rIGFuZ3VsYXIubW9kdWxlfS4gVGhlIGBuZ2AgbW9kdWxlIG11c3QgYmUgZXhwbGljaXRseSBhZGRlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IFtzdHJpY3REaT1mYWxzZV0gV2hldGhlciB0aGUgaW5qZWN0b3Igc2hvdWxkIGJlIGluIHN0cmljdCBtb2RlLCB3aGljaFxuICogICAgIGRpc2FsbG93cyBhcmd1bWVudCBuYW1lIGFubm90YXRpb24gaW5mZXJlbmNlLlxuICogQHJldHVybnMge2luamVjdG9yfSBJbmplY3RvciBvYmplY3QuIFNlZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS5cbiAqXG4gKiBAZXhhbXBsZVxuICogVHlwaWNhbCB1c2FnZVxuICogYGBganNcbiAqICAgLy8gY3JlYXRlIGFuIGluamVjdG9yXG4gKiAgIHZhciAkaW5qZWN0b3IgPSBhbmd1bGFyLmluamVjdG9yKFsnbmcnXSk7XG4gKlxuICogICAvLyB1c2UgdGhlIGluamVjdG9yIHRvIGtpY2sgb2ZmIHlvdXIgYXBwbGljYXRpb25cbiAqICAgLy8gdXNlIHRoZSB0eXBlIGluZmVyZW5jZSB0byBhdXRvIGluamVjdCBhcmd1bWVudHMsIG9yIHVzZSBpbXBsaWNpdCBpbmplY3Rpb25cbiAqICAgJGluamVjdG9yLmludm9rZShmdW5jdGlvbigkcm9vdFNjb3BlLCAkY29tcGlsZSwgJGRvY3VtZW50KSB7XG4gKiAgICAgJGNvbXBpbGUoJGRvY3VtZW50KSgkcm9vdFNjb3BlKTtcbiAqICAgICAkcm9vdFNjb3BlLiRkaWdlc3QoKTtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiBTb21ldGltZXMgeW91IHdhbnQgdG8gZ2V0IGFjY2VzcyB0byB0aGUgaW5qZWN0b3Igb2YgYSBjdXJyZW50bHkgcnVubmluZyBBbmd1bGFyIGFwcFxuICogZnJvbSBvdXRzaWRlIEFuZ3VsYXIuIFBlcmhhcHMsIHlvdSB3YW50IHRvIGluamVjdCBhbmQgY29tcGlsZSBzb21lIG1hcmt1cCBhZnRlciB0aGVcbiAqIGFwcGxpY2F0aW9uIGhhcyBiZWVuIGJvb3RzdHJhcHBlZC4gWW91IGNhbiBkbyB0aGlzIHVzaW5nIHRoZSBleHRyYSBgaW5qZWN0b3IoKWAgYWRkZWRcbiAqIHRvIEpRdWVyeS9qcUxpdGUgZWxlbWVudHMuIFNlZSB7QGxpbmsgYW5ndWxhci5lbGVtZW50fS5cbiAqXG4gKiAqVGhpcyBpcyBmYWlybHkgcmFyZSBidXQgY291bGQgYmUgdGhlIGNhc2UgaWYgYSB0aGlyZCBwYXJ0eSBsaWJyYXJ5IGlzIGluamVjdGluZyB0aGVcbiAqIG1hcmt1cC4qXG4gKlxuICogSW4gdGhlIGZvbGxvd2luZyBleGFtcGxlIGEgbmV3IGJsb2NrIG9mIEhUTUwgY29udGFpbmluZyBhIGBuZy1jb250cm9sbGVyYFxuICogZGlyZWN0aXZlIGlzIGFkZGVkIHRvIHRoZSBlbmQgb2YgdGhlIGRvY3VtZW50IGJvZHkgYnkgSlF1ZXJ5LiBXZSB0aGVuIGNvbXBpbGUgYW5kIGxpbmtcbiAqIGl0IGludG8gdGhlIGN1cnJlbnQgQW5ndWxhckpTIHNjb3BlLlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgJGRpdiA9ICQoJzxkaXYgbmctY29udHJvbGxlcj1cIk15Q3RybFwiPnt7Y29udGVudC5sYWJlbH19PC9kaXY+Jyk7XG4gKiAkKGRvY3VtZW50LmJvZHkpLmFwcGVuZCgkZGl2KTtcbiAqXG4gKiBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmluamVjdG9yKCkuaW52b2tlKGZ1bmN0aW9uKCRjb21waWxlKSB7XG4gKiAgIHZhciBzY29wZSA9IGFuZ3VsYXIuZWxlbWVudCgkZGl2KS5zY29wZSgpO1xuICogICAkY29tcGlsZSgkZGl2KShzY29wZSk7XG4gKiB9KTtcbiAqIGBgYFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBhdXRvXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBJbXBsaWNpdCBtb2R1bGUgd2hpY2ggZ2V0cyBhdXRvbWF0aWNhbGx5IGFkZGVkIHRvIGVhY2gge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uXG4gKi9cblxudmFyIEZOX0FSR1MgPSAvXmZ1bmN0aW9uXFxzKlteXFwoXSpcXChcXHMqKFteXFwpXSopXFwpL207XG52YXIgRk5fQVJHX1NQTElUID0gLywvO1xudmFyIEZOX0FSRyA9IC9eXFxzKihfPykoXFxTKz8pXFwxXFxzKiQvO1xudmFyIFNUUklQX0NPTU1FTlRTID0gLygoXFwvXFwvLiokKXwoXFwvXFwqW1xcc1xcU10qP1xcKlxcLykpL21nO1xudmFyICRpbmplY3Rvck1pbkVyciA9IG1pbkVycignJGluamVjdG9yJyk7XG5cbmZ1bmN0aW9uIGFub25Gbihmbikge1xuICAvLyBGb3IgYW5vbnltb3VzIGZ1bmN0aW9ucywgc2hvd2luZyBhdCB0aGUgdmVyeSBsZWFzdCB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlIGNhbiBoZWxwIGluXG4gIC8vIGRlYnVnZ2luZy5cbiAgdmFyIGZuVGV4dCA9IGZuLnRvU3RyaW5nKCkucmVwbGFjZShTVFJJUF9DT01NRU5UUywgJycpLFxuICAgICAgYXJncyA9IGZuVGV4dC5tYXRjaChGTl9BUkdTKTtcbiAgaWYgKGFyZ3MpIHtcbiAgICByZXR1cm4gJ2Z1bmN0aW9uKCcgKyAoYXJnc1sxXSB8fCAnJykucmVwbGFjZSgvW1xcc1xcclxcbl0rLywgJyAnKSArICcpJztcbiAgfVxuICByZXR1cm4gJ2ZuJztcbn1cblxuZnVuY3Rpb24gYW5ub3RhdGUoZm4sIHN0cmljdERpLCBuYW1lKSB7XG4gIHZhciAkaW5qZWN0LFxuICAgICAgZm5UZXh0LFxuICAgICAgYXJnRGVjbCxcbiAgICAgIGxhc3Q7XG5cbiAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICghKCRpbmplY3QgPSBmbi4kaW5qZWN0KSkge1xuICAgICAgJGluamVjdCA9IFtdO1xuICAgICAgaWYgKGZuLmxlbmd0aCkge1xuICAgICAgICBpZiAoc3RyaWN0RGkpIHtcbiAgICAgICAgICBpZiAoIWlzU3RyaW5nKG5hbWUpIHx8ICFuYW1lKSB7XG4gICAgICAgICAgICBuYW1lID0gZm4ubmFtZSB8fCBhbm9uRm4oZm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3N0cmljdGRpJyxcbiAgICAgICAgICAgICd7MH0gaXMgbm90IHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb24gYW5kIGNhbm5vdCBiZSBpbnZva2VkIGluIHN0cmljdCBtb2RlJywgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm5UZXh0ID0gZm4udG9TdHJpbmcoKS5yZXBsYWNlKFNUUklQX0NPTU1FTlRTLCAnJyk7XG4gICAgICAgIGFyZ0RlY2wgPSBmblRleHQubWF0Y2goRk5fQVJHUyk7XG4gICAgICAgIGZvckVhY2goYXJnRGVjbFsxXS5zcGxpdChGTl9BUkdfU1BMSVQpLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgICBhcmcucmVwbGFjZShGTl9BUkcsIGZ1bmN0aW9uKGFsbCwgdW5kZXJzY29yZSwgbmFtZSkge1xuICAgICAgICAgICAgJGluamVjdC5wdXNoKG5hbWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGZuLiRpbmplY3QgPSAkaW5qZWN0O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0FycmF5KGZuKSkge1xuICAgIGxhc3QgPSBmbi5sZW5ndGggLSAxO1xuICAgIGFzc2VydEFyZ0ZuKGZuW2xhc3RdLCAnZm4nKTtcbiAgICAkaW5qZWN0ID0gZm4uc2xpY2UoMCwgbGFzdCk7XG4gIH0gZWxzZSB7XG4gICAgYXNzZXJ0QXJnRm4oZm4sICdmbicsIHRydWUpO1xuICB9XG4gIHJldHVybiAkaW5qZWN0O1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGluamVjdG9yXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogYCRpbmplY3RvcmAgaXMgdXNlZCB0byByZXRyaWV2ZSBvYmplY3QgaW5zdGFuY2VzIGFzIGRlZmluZWQgYnlcbiAqIHtAbGluayBhdXRvLiRwcm92aWRlIHByb3ZpZGVyfSwgaW5zdGFudGlhdGUgdHlwZXMsIGludm9rZSBtZXRob2RzLFxuICogYW5kIGxvYWQgbW9kdWxlcy5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGFsd2F5cyBob2xkcyB0cnVlOlxuICpcbiAqIGBgYGpzXG4gKiAgIHZhciAkaW5qZWN0b3IgPSBhbmd1bGFyLmluamVjdG9yKCk7XG4gKiAgIGV4cGVjdCgkaW5qZWN0b3IuZ2V0KCckaW5qZWN0b3InKSkudG9CZSgkaW5qZWN0b3IpO1xuICogICBleHBlY3QoJGluamVjdG9yLmludm9rZShmdW5jdGlvbigkaW5qZWN0b3IpIHtcbiAqICAgICByZXR1cm4gJGluamVjdG9yO1xuICogICB9KSkudG9CZSgkaW5qZWN0b3IpO1xuICogYGBgXG4gKlxuICogIyBJbmplY3Rpb24gRnVuY3Rpb24gQW5ub3RhdGlvblxuICpcbiAqIEphdmFTY3JpcHQgZG9lcyBub3QgaGF2ZSBhbm5vdGF0aW9ucywgYW5kIGFubm90YXRpb25zIGFyZSBuZWVkZWQgZm9yIGRlcGVuZGVuY3kgaW5qZWN0aW9uLiBUaGVcbiAqIGZvbGxvd2luZyBhcmUgYWxsIHZhbGlkIHdheXMgb2YgYW5ub3RhdGluZyBmdW5jdGlvbiB3aXRoIGluamVjdGlvbiBhcmd1bWVudHMgYW5kIGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIGBgYGpzXG4gKiAgIC8vIGluZmVycmVkIChvbmx5IHdvcmtzIGlmIGNvZGUgbm90IG1pbmlmaWVkL29iZnVzY2F0ZWQpXG4gKiAgICRpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oc2VydmljZUEpe30pO1xuICpcbiAqICAgLy8gYW5ub3RhdGVkXG4gKiAgIGZ1bmN0aW9uIGV4cGxpY2l0KHNlcnZpY2VBKSB7fTtcbiAqICAgZXhwbGljaXQuJGluamVjdCA9IFsnc2VydmljZUEnXTtcbiAqICAgJGluamVjdG9yLmludm9rZShleHBsaWNpdCk7XG4gKlxuICogICAvLyBpbmxpbmVcbiAqICAgJGluamVjdG9yLmludm9rZShbJ3NlcnZpY2VBJywgZnVuY3Rpb24oc2VydmljZUEpe31dKTtcbiAqIGBgYFxuICpcbiAqICMjIEluZmVyZW5jZVxuICpcbiAqIEluIEphdmFTY3JpcHQgY2FsbGluZyBgdG9TdHJpbmcoKWAgb24gYSBmdW5jdGlvbiByZXR1cm5zIHRoZSBmdW5jdGlvbiBkZWZpbml0aW9uLiBUaGUgZGVmaW5pdGlvblxuICogY2FuIHRoZW4gYmUgcGFyc2VkIGFuZCB0aGUgZnVuY3Rpb24gYXJndW1lbnRzIGNhbiBiZSBleHRyYWN0ZWQuIFRoaXMgbWV0aG9kIG9mIGRpc2NvdmVyaW5nXG4gKiBhbm5vdGF0aW9ucyBpcyBkaXNhbGxvd2VkIHdoZW4gdGhlIGluamVjdG9yIGlzIGluIHN0cmljdCBtb2RlLlxuICogKk5PVEU6KiBUaGlzIGRvZXMgbm90IHdvcmsgd2l0aCBtaW5pZmljYXRpb24sIGFuZCBvYmZ1c2NhdGlvbiB0b29scyBzaW5jZSB0aGVzZSB0b29scyBjaGFuZ2UgdGhlXG4gKiBhcmd1bWVudCBuYW1lcy5cbiAqXG4gKiAjIyBgJGluamVjdGAgQW5ub3RhdGlvblxuICogQnkgYWRkaW5nIGFuIGAkaW5qZWN0YCBwcm9wZXJ0eSBvbnRvIGEgZnVuY3Rpb24gdGhlIGluamVjdGlvbiBwYXJhbWV0ZXJzIGNhbiBiZSBzcGVjaWZpZWQuXG4gKlxuICogIyMgSW5saW5lXG4gKiBBcyBhbiBhcnJheSBvZiBpbmplY3Rpb24gbmFtZXMsIHdoZXJlIHRoZSBsYXN0IGl0ZW0gaW4gdGhlIGFycmF5IGlzIHRoZSBmdW5jdGlvbiB0byBjYWxsLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2dldFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIGFuIGluc3RhbmNlIG9mIHRoZSBzZXJ2aWNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZSB0byByZXRyaWV2ZS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gY2FsbGVyIEFuIG9wdGlvbmFsIHN0cmluZyB0byBwcm92aWRlIHRoZSBvcmlnaW4gb2YgdGhlIGZ1bmN0aW9uIGNhbGwgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICogQHJldHVybiB7Kn0gVGhlIGluc3RhbmNlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2ludm9rZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSW52b2tlIHRoZSBtZXRob2QgYW5kIHN1cHBseSB0aGUgbWV0aG9kIGFyZ3VtZW50cyBmcm9tIHRoZSBgJGluamVjdG9yYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBmbiBUaGUgaW5qZWN0YWJsZSBmdW5jdGlvbiB0byBpbnZva2UuIEZ1bmN0aW9uIHBhcmFtZXRlcnMgYXJlXG4gKiAgIGluamVjdGVkIGFjY29yZGluZyB0byB0aGUge0BsaW5rIGd1aWRlL2RpICRpbmplY3QgQW5ub3RhdGlvbn0gcnVsZXMuXG4gKiBAcGFyYW0ge09iamVjdD19IHNlbGYgVGhlIGB0aGlzYCBmb3IgdGhlIGludm9rZWQgbWV0aG9kLlxuICogQHBhcmFtIHtPYmplY3Q9fSBsb2NhbHMgT3B0aW9uYWwgb2JqZWN0LiBJZiBwcmVzZXQgdGhlbiBhbnkgYXJndW1lbnQgbmFtZXMgYXJlIHJlYWQgZnJvbSB0aGlzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QgZmlyc3QsIGJlZm9yZSB0aGUgYCRpbmplY3RvcmAgaXMgY29uc3VsdGVkLlxuICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSByZXR1cm5lZCBieSB0aGUgaW52b2tlZCBgZm5gIGZ1bmN0aW9uLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2hhc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWxsb3dzIHRoZSB1c2VyIHRvIHF1ZXJ5IGlmIHRoZSBwYXJ0aWN1bGFyIHNlcnZpY2UgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIHNlcnZpY2UgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIGluamVjdG9yIGhhcyBnaXZlbiBzZXJ2aWNlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2luc3RhbnRpYXRlXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBKUyB0eXBlLiBUaGUgbWV0aG9kIHRha2VzIGEgY29uc3RydWN0b3IgZnVuY3Rpb24sIGludm9rZXMgdGhlIG5ld1xuICogb3BlcmF0b3IsIGFuZCBzdXBwbGllcyBhbGwgb2YgdGhlIGFyZ3VtZW50cyB0byB0aGUgY29uc3RydWN0b3IgZnVuY3Rpb24gYXMgc3BlY2lmaWVkIGJ5IHRoZVxuICogY29uc3RydWN0b3IgYW5ub3RhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBUeXBlIEFubm90YXRlZCBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gbG9jYWxzIE9wdGlvbmFsIG9iamVjdC4gSWYgcHJlc2V0IHRoZW4gYW55IGFyZ3VtZW50IG5hbWVzIGFyZSByZWFkIGZyb20gdGhpc1xuICogb2JqZWN0IGZpcnN0LCBiZWZvcmUgdGhlIGAkaW5qZWN0b3JgIGlzIGNvbnN1bHRlZC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IG5ldyBpbnN0YW5jZSBvZiBgVHlwZWAuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkaW5qZWN0b3IjYW5ub3RhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgYW4gYXJyYXkgb2Ygc2VydmljZSBuYW1lcyB3aGljaCB0aGUgZnVuY3Rpb24gaXMgcmVxdWVzdGluZyBmb3IgaW5qZWN0aW9uLiBUaGlzIEFQSSBpc1xuICogdXNlZCBieSB0aGUgaW5qZWN0b3IgdG8gZGV0ZXJtaW5lIHdoaWNoIHNlcnZpY2VzIG5lZWQgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgZnVuY3Rpb24gd2hlbiB0aGVcbiAqIGZ1bmN0aW9uIGlzIGludm9rZWQuIFRoZXJlIGFyZSB0aHJlZSB3YXlzIGluIHdoaWNoIHRoZSBmdW5jdGlvbiBjYW4gYmUgYW5ub3RhdGVkIHdpdGggdGhlIG5lZWRlZFxuICogZGVwZW5kZW5jaWVzLlxuICpcbiAqICMgQXJndW1lbnQgbmFtZXNcbiAqXG4gKiBUaGUgc2ltcGxlc3QgZm9ybSBpcyB0byBleHRyYWN0IHRoZSBkZXBlbmRlbmNpZXMgZnJvbSB0aGUgYXJndW1lbnRzIG9mIHRoZSBmdW5jdGlvbi4gVGhpcyBpcyBkb25lXG4gKiBieSBjb252ZXJ0aW5nIHRoZSBmdW5jdGlvbiBpbnRvIGEgc3RyaW5nIHVzaW5nIGB0b1N0cmluZygpYCBtZXRob2QgYW5kIGV4dHJhY3RpbmcgdGhlIGFyZ3VtZW50XG4gKiBuYW1lcy5cbiAqIGBgYGpzXG4gKiAgIC8vIEdpdmVuXG4gKiAgIGZ1bmN0aW9uIE15Q29udHJvbGxlcigkc2NvcGUsICRyb3V0ZSkge1xuICogICAgIC8vIC4uLlxuICogICB9XG4gKlxuICogICAvLyBUaGVuXG4gKiAgIGV4cGVjdChpbmplY3Rvci5hbm5vdGF0ZShNeUNvbnRyb2xsZXIpKS50b0VxdWFsKFsnJHNjb3BlJywgJyRyb3V0ZSddKTtcbiAqIGBgYFxuICpcbiAqIFlvdSBjYW4gZGlzYWxsb3cgdGhpcyBtZXRob2QgYnkgdXNpbmcgc3RyaWN0IGluamVjdGlvbiBtb2RlLlxuICpcbiAqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHdvcmsgd2l0aCBjb2RlIG1pbmlmaWNhdGlvbiAvIG9iZnVzY2F0aW9uLiBGb3IgdGhpcyByZWFzb24gdGhlIGZvbGxvd2luZ1xuICogYW5ub3RhdGlvbiBzdHJhdGVnaWVzIGFyZSBzdXBwb3J0ZWQuXG4gKlxuICogIyBUaGUgYCRpbmplY3RgIHByb3BlcnR5XG4gKlxuICogSWYgYSBmdW5jdGlvbiBoYXMgYW4gYCRpbmplY3RgIHByb3BlcnR5IGFuZCBpdHMgdmFsdWUgaXMgYW4gYXJyYXkgb2Ygc3RyaW5ncywgdGhlbiB0aGUgc3RyaW5nc1xuICogcmVwcmVzZW50IG5hbWVzIG9mIHNlcnZpY2VzIHRvIGJlIGluamVjdGVkIGludG8gdGhlIGZ1bmN0aW9uLlxuICogYGBganNcbiAqICAgLy8gR2l2ZW5cbiAqICAgdmFyIE15Q29udHJvbGxlciA9IGZ1bmN0aW9uKG9iZnVzY2F0ZWRTY29wZSwgb2JmdXNjYXRlZFJvdXRlKSB7XG4gKiAgICAgLy8gLi4uXG4gKiAgIH1cbiAqICAgLy8gRGVmaW5lIGZ1bmN0aW9uIGRlcGVuZGVuY2llc1xuICogICBNeUNvbnRyb2xsZXJbJyRpbmplY3QnXSA9IFsnJHNjb3BlJywgJyRyb3V0ZSddO1xuICpcbiAqICAgLy8gVGhlblxuICogICBleHBlY3QoaW5qZWN0b3IuYW5ub3RhdGUoTXlDb250cm9sbGVyKSkudG9FcXVhbChbJyRzY29wZScsICckcm91dGUnXSk7XG4gKiBgYGBcbiAqXG4gKiAjIFRoZSBhcnJheSBub3RhdGlvblxuICpcbiAqIEl0IGlzIG9mdGVuIGRlc2lyYWJsZSB0byBpbmxpbmUgSW5qZWN0ZWQgZnVuY3Rpb25zIGFuZCB0aGF0J3Mgd2hlbiBzZXR0aW5nIHRoZSBgJGluamVjdGAgcHJvcGVydHlcbiAqIGlzIHZlcnkgaW5jb252ZW5pZW50LiBJbiB0aGVzZSBzaXR1YXRpb25zIHVzaW5nIHRoZSBhcnJheSBub3RhdGlvbiB0byBzcGVjaWZ5IHRoZSBkZXBlbmRlbmNpZXMgaW5cbiAqIGEgd2F5IHRoYXQgc3Vydml2ZXMgbWluaWZpY2F0aW9uIGlzIGEgYmV0dGVyIGNob2ljZTpcbiAqXG4gKiBgYGBqc1xuICogICAvLyBXZSB3aXNoIHRvIHdyaXRlIHRoaXMgKG5vdCBtaW5pZmljYXRpb24gLyBvYmZ1c2NhdGlvbiBzYWZlKVxuICogICBpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJGNvbXBpbGUsICRyb290U2NvcGUpIHtcbiAqICAgICAvLyAuLi5cbiAqICAgfSk7XG4gKlxuICogICAvLyBXZSBhcmUgZm9yY2VkIHRvIHdyaXRlIGJyZWFrIGlubGluaW5nXG4gKiAgIHZhciB0bXBGbiA9IGZ1bmN0aW9uKG9iZnVzY2F0ZWRDb21waWxlLCBvYmZ1c2NhdGVkUm9vdFNjb3BlKSB7XG4gKiAgICAgLy8gLi4uXG4gKiAgIH07XG4gKiAgIHRtcEZuLiRpbmplY3QgPSBbJyRjb21waWxlJywgJyRyb290U2NvcGUnXTtcbiAqICAgaW5qZWN0b3IuaW52b2tlKHRtcEZuKTtcbiAqXG4gKiAgIC8vIFRvIGJldHRlciBzdXBwb3J0IGlubGluZSBmdW5jdGlvbiB0aGUgaW5saW5lIGFubm90YXRpb24gaXMgc3VwcG9ydGVkXG4gKiAgIGluamVjdG9yLmludm9rZShbJyRjb21waWxlJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbihvYmZDb21waWxlLCBvYmZSb290U2NvcGUpIHtcbiAqICAgICAvLyAuLi5cbiAqICAgfV0pO1xuICpcbiAqICAgLy8gVGhlcmVmb3JlXG4gKiAgIGV4cGVjdChpbmplY3Rvci5hbm5vdGF0ZShcbiAqICAgICAgWyckY29tcGlsZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24ob2JmdXNfJGNvbXBpbGUsIG9iZnVzXyRyb290U2NvcGUpIHt9XSlcbiAqICAgICkudG9FcXVhbChbJyRjb21waWxlJywgJyRyb290U2NvcGUnXSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBmbiBGdW5jdGlvbiBmb3Igd2hpY2ggZGVwZW5kZW50IHNlcnZpY2UgbmFtZXMgbmVlZCB0b1xuICogYmUgcmV0cmlldmVkIGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBbc3RyaWN0RGk9ZmFsc2VdIERpc2FsbG93IGFyZ3VtZW50IG5hbWUgYW5ub3RhdGlvbiBpbmZlcmVuY2UuXG4gKlxuICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fSBUaGUgbmFtZXMgb2YgdGhlIHNlcnZpY2VzIHdoaWNoIHRoZSBmdW5jdGlvbiByZXF1aXJlcy5cbiAqL1xuXG5cblxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkcHJvdmlkZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoZSB7QGxpbmsgYXV0by4kcHJvdmlkZSAkcHJvdmlkZX0gc2VydmljZSBoYXMgYSBudW1iZXIgb2YgbWV0aG9kcyBmb3IgcmVnaXN0ZXJpbmcgY29tcG9uZW50c1xuICogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIE1hbnkgb2YgdGhlc2UgZnVuY3Rpb25zIGFyZSBhbHNvIGV4cG9zZWQgb25cbiAqIHtAbGluayBhbmd1bGFyLk1vZHVsZX0uXG4gKlxuICogQW4gQW5ndWxhciAqKnNlcnZpY2UqKiBpcyBhIHNpbmdsZXRvbiBvYmplY3QgY3JlYXRlZCBieSBhICoqc2VydmljZSBmYWN0b3J5KiouICBUaGVzZSAqKnNlcnZpY2VcbiAqIGZhY3RvcmllcyoqIGFyZSBmdW5jdGlvbnMgd2hpY2gsIGluIHR1cm4sIGFyZSBjcmVhdGVkIGJ5IGEgKipzZXJ2aWNlIHByb3ZpZGVyKiouXG4gKiBUaGUgKipzZXJ2aWNlIHByb3ZpZGVycyoqIGFyZSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMuIFdoZW4gaW5zdGFudGlhdGVkIHRoZXkgbXVzdCBjb250YWluIGFcbiAqIHByb3BlcnR5IGNhbGxlZCBgJGdldGAsIHdoaWNoIGhvbGRzIHRoZSAqKnNlcnZpY2UgZmFjdG9yeSoqIGZ1bmN0aW9uLlxuICpcbiAqIFdoZW4geW91IHJlcXVlc3QgYSBzZXJ2aWNlLCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0gaXMgcmVzcG9uc2libGUgZm9yIGZpbmRpbmcgdGhlXG4gKiBjb3JyZWN0ICoqc2VydmljZSBwcm92aWRlcioqLCBpbnN0YW50aWF0aW5nIGl0IGFuZCB0aGVuIGNhbGxpbmcgaXRzIGAkZ2V0YCAqKnNlcnZpY2UgZmFjdG9yeSoqXG4gKiBmdW5jdGlvbiB0byBnZXQgdGhlIGluc3RhbmNlIG9mIHRoZSAqKnNlcnZpY2UqKi5cbiAqXG4gKiBPZnRlbiBzZXJ2aWNlcyBoYXZlIG5vIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBhbmQgdGhlcmUgaXMgbm8gbmVlZCB0byBhZGQgbWV0aG9kcyB0byB0aGUgc2VydmljZVxuICogcHJvdmlkZXIuICBUaGUgcHJvdmlkZXIgd2lsbCBiZSBubyBtb3JlIHRoYW4gYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB3aXRoIGEgYCRnZXRgIHByb3BlcnR5LiBGb3JcbiAqIHRoZXNlIGNhc2VzIHRoZSB7QGxpbmsgYXV0by4kcHJvdmlkZSAkcHJvdmlkZX0gc2VydmljZSBoYXMgYWRkaXRpb25hbCBoZWxwZXIgbWV0aG9kcyB0byByZWdpc3RlclxuICogc2VydmljZXMgd2l0aG91dCBzcGVjaWZ5aW5nIGEgcHJvdmlkZXIuXG4gKlxuICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNwcm92aWRlciBwcm92aWRlcihwcm92aWRlcil9IC0gcmVnaXN0ZXJzIGEgKipzZXJ2aWNlIHByb3ZpZGVyKiogd2l0aCB0aGVcbiAqICAgICB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfVxuICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNjb25zdGFudCBjb25zdGFudChvYmopfSAtIHJlZ2lzdGVycyBhIHZhbHVlL29iamVjdCB0aGF0IGNhbiBiZSBhY2Nlc3NlZCBieVxuICogICAgIHByb3ZpZGVycyBhbmQgc2VydmljZXMuXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3ZhbHVlIHZhbHVlKG9iail9IC0gcmVnaXN0ZXJzIGEgdmFsdWUvb2JqZWN0IHRoYXQgY2FuIG9ubHkgYmUgYWNjZXNzZWQgYnlcbiAqICAgICBzZXJ2aWNlcywgbm90IHByb3ZpZGVycy5cbiAqICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjZmFjdG9yeSBmYWN0b3J5KGZuKX0gLSByZWdpc3RlcnMgYSBzZXJ2aWNlICoqZmFjdG9yeSBmdW5jdGlvbioqLCBgZm5gLFxuICogICAgIHRoYXQgd2lsbCBiZSB3cmFwcGVkIGluIGEgKipzZXJ2aWNlIHByb3ZpZGVyKiogb2JqZWN0LCB3aG9zZSBgJGdldGAgcHJvcGVydHkgd2lsbCBjb250YWluIHRoZVxuICogICAgIGdpdmVuIGZhY3RvcnkgZnVuY3Rpb24uXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2Ugc2VydmljZShjbGFzcyl9IC0gcmVnaXN0ZXJzIGEgKipjb25zdHJ1Y3RvciBmdW5jdGlvbioqLCBgY2xhc3NgXG4gKiAgICAgdGhhdCB3aWxsIGJlIHdyYXBwZWQgaW4gYSAqKnNlcnZpY2UgcHJvdmlkZXIqKiBvYmplY3QsIHdob3NlIGAkZ2V0YCBwcm9wZXJ0eSB3aWxsIGluc3RhbnRpYXRlXG4gKiAgICAgIGEgbmV3IG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKlxuICogU2VlIHRoZSBpbmRpdmlkdWFsIG1ldGhvZHMgZm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIGV4YW1wbGVzLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjcHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipwcm92aWRlciBmdW5jdGlvbioqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBQcm92aWRlciBmdW5jdGlvbnNcbiAqIGFyZSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMsIHdob3NlIGluc3RhbmNlcyBhcmUgcmVzcG9uc2libGUgZm9yIFwicHJvdmlkaW5nXCIgYSBmYWN0b3J5IGZvciBhXG4gKiBzZXJ2aWNlLlxuICpcbiAqIFNlcnZpY2UgcHJvdmlkZXIgbmFtZXMgc3RhcnQgd2l0aCB0aGUgbmFtZSBvZiB0aGUgc2VydmljZSB0aGV5IHByb3ZpZGUgZm9sbG93ZWQgYnkgYFByb3ZpZGVyYC5cbiAqIEZvciBleGFtcGxlLCB0aGUge0BsaW5rIG5nLiRsb2cgJGxvZ30gc2VydmljZSBoYXMgYSBwcm92aWRlciBjYWxsZWRcbiAqIHtAbGluayBuZy4kbG9nUHJvdmlkZXIgJGxvZ1Byb3ZpZGVyfS5cbiAqXG4gKiBTZXJ2aWNlIHByb3ZpZGVyIG9iamVjdHMgY2FuIGhhdmUgYWRkaXRpb25hbCBtZXRob2RzIHdoaWNoIGFsbG93IGNvbmZpZ3VyYXRpb24gb2YgdGhlIHByb3ZpZGVyXG4gKiBhbmQgaXRzIHNlcnZpY2UuIEltcG9ydGFudGx5LCB5b3UgY2FuIGNvbmZpZ3VyZSB3aGF0IGtpbmQgb2Ygc2VydmljZSBpcyBjcmVhdGVkIGJ5IHRoZSBgJGdldGBcbiAqIG1ldGhvZCwgb3IgaG93IHRoYXQgc2VydmljZSB3aWxsIGFjdC4gRm9yIGV4YW1wbGUsIHRoZSB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyICRsb2dQcm92aWRlcn0gaGFzIGFcbiAqIG1ldGhvZCB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyI2RlYnVnRW5hYmxlZCBkZWJ1Z0VuYWJsZWR9XG4gKiB3aGljaCBsZXRzIHlvdSBzcGVjaWZ5IHdoZXRoZXIgdGhlIHtAbGluayBuZy4kbG9nICRsb2d9IHNlcnZpY2Ugd2lsbCBsb2cgZGVidWcgbWVzc2FnZXMgdG8gdGhlXG4gKiBjb25zb2xlIG9yIG5vdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuIE5PVEU6IHRoZSBwcm92aWRlciB3aWxsIGJlIGF2YWlsYWJsZSB1bmRlciBgbmFtZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnUHJvdmlkZXInYCBrZXkuXG4gKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24oKSl9IHByb3ZpZGVyIElmIHRoZSBwcm92aWRlciBpczpcbiAqXG4gKiAgIC0gYE9iamVjdGA6IHRoZW4gaXQgc2hvdWxkIGhhdmUgYSBgJGdldGAgbWV0aG9kLiBUaGUgYCRnZXRgIG1ldGhvZCB3aWxsIGJlIGludm9rZWQgdXNpbmdcbiAqICAgICB7QGxpbmsgYXV0by4kaW5qZWN0b3IjaW52b2tlICRpbmplY3Rvci5pbnZva2UoKX0gd2hlbiBhbiBpbnN0YW5jZSBuZWVkcyB0byBiZSBjcmVhdGVkLlxuICogICAtIGBDb25zdHJ1Y3RvcmA6IGEgbmV3IGluc3RhbmNlIG9mIHRoZSBwcm92aWRlciB3aWxsIGJlIGNyZWF0ZWQgdXNpbmdcbiAqICAgICB7QGxpbmsgYXV0by4kaW5qZWN0b3IjaW5zdGFudGlhdGUgJGluamVjdG9yLmluc3RhbnRpYXRlKCl9LCB0aGVuIHRyZWF0ZWQgYXMgYG9iamVjdGAuXG4gKlxuICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZVxuXG4gKiBAZXhhbXBsZVxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gY3JlYXRlIGEgc2ltcGxlIGV2ZW50IHRyYWNraW5nIHNlcnZpY2UgYW5kIHJlZ2lzdGVyIGl0IHVzaW5nXG4gKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNwcm92aWRlciAkcHJvdmlkZS5wcm92aWRlcigpfS5cbiAqXG4gKiBgYGBqc1xuICogIC8vIERlZmluZSB0aGUgZXZlbnRUcmFja2VyIHByb3ZpZGVyXG4gKiAgZnVuY3Rpb24gRXZlbnRUcmFja2VyUHJvdmlkZXIoKSB7XG4gKiAgICB2YXIgdHJhY2tpbmdVcmwgPSAnL3RyYWNrJztcbiAqXG4gKiAgICAvLyBBIHByb3ZpZGVyIG1ldGhvZCBmb3IgY29uZmlndXJpbmcgd2hlcmUgdGhlIHRyYWNrZWQgZXZlbnRzIHNob3VsZCBiZWVuIHNhdmVkXG4gKiAgICB0aGlzLnNldFRyYWNraW5nVXJsID0gZnVuY3Rpb24odXJsKSB7XG4gKiAgICAgIHRyYWNraW5nVXJsID0gdXJsO1xuICogICAgfTtcbiAqXG4gKiAgICAvLyBUaGUgc2VydmljZSBmYWN0b3J5IGZ1bmN0aW9uXG4gKiAgICB0aGlzLiRnZXQgPSBbJyRodHRwJywgZnVuY3Rpb24oJGh0dHApIHtcbiAqICAgICAgdmFyIHRyYWNrZWRFdmVudHMgPSB7fTtcbiAqICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAvLyBDYWxsIHRoaXMgdG8gdHJhY2sgYW4gZXZlbnRcbiAqICAgICAgICBldmVudDogZnVuY3Rpb24oZXZlbnQpIHtcbiAqICAgICAgICAgIHZhciBjb3VudCA9IHRyYWNrZWRFdmVudHNbZXZlbnRdIHx8IDA7XG4gKiAgICAgICAgICBjb3VudCArPSAxO1xuICogICAgICAgICAgdHJhY2tlZEV2ZW50c1tldmVudF0gPSBjb3VudDtcbiAqICAgICAgICAgIHJldHVybiBjb3VudDtcbiAqICAgICAgICB9LFxuICogICAgICAgIC8vIENhbGwgdGhpcyB0byBzYXZlIHRoZSB0cmFja2VkIGV2ZW50cyB0byB0aGUgdHJhY2tpbmdVcmxcbiAqICAgICAgICBzYXZlOiBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICRodHRwLnBvc3QodHJhY2tpbmdVcmwsIHRyYWNrZWRFdmVudHMpO1xuICogICAgICAgIH1cbiAqICAgICAgfTtcbiAqICAgIH1dO1xuICogIH1cbiAqXG4gKiAgZGVzY3JpYmUoJ2V2ZW50VHJhY2tlcicsIGZ1bmN0aW9uKCkge1xuICogICAgdmFyIHBvc3RTcHk7XG4gKlxuICogICAgYmVmb3JlRWFjaChtb2R1bGUoZnVuY3Rpb24oJHByb3ZpZGUpIHtcbiAqICAgICAgLy8gUmVnaXN0ZXIgdGhlIGV2ZW50VHJhY2tlciBwcm92aWRlclxuICogICAgICAkcHJvdmlkZS5wcm92aWRlcignZXZlbnRUcmFja2VyJywgRXZlbnRUcmFja2VyUHJvdmlkZXIpO1xuICogICAgfSkpO1xuICpcbiAqICAgIGJlZm9yZUVhY2gobW9kdWxlKGZ1bmN0aW9uKGV2ZW50VHJhY2tlclByb3ZpZGVyKSB7XG4gKiAgICAgIC8vIENvbmZpZ3VyZSBldmVudFRyYWNrZXIgcHJvdmlkZXJcbiAqICAgICAgZXZlbnRUcmFja2VyUHJvdmlkZXIuc2V0VHJhY2tpbmdVcmwoJy9jdXN0b20tdHJhY2snKTtcbiAqICAgIH0pKTtcbiAqXG4gKiAgICBpdCgndHJhY2tzIGV2ZW50cycsIGluamVjdChmdW5jdGlvbihldmVudFRyYWNrZXIpIHtcbiAqICAgICAgZXhwZWN0KGV2ZW50VHJhY2tlci5ldmVudCgnbG9naW4nKSkudG9FcXVhbCgxKTtcbiAqICAgICAgZXhwZWN0KGV2ZW50VHJhY2tlci5ldmVudCgnbG9naW4nKSkudG9FcXVhbCgyKTtcbiAqICAgIH0pKTtcbiAqXG4gKiAgICBpdCgnc2F2ZXMgdG8gdGhlIHRyYWNraW5nIHVybCcsIGluamVjdChmdW5jdGlvbihldmVudFRyYWNrZXIsICRodHRwKSB7XG4gKiAgICAgIHBvc3RTcHkgPSBzcHlPbigkaHR0cCwgJ3Bvc3QnKTtcbiAqICAgICAgZXZlbnRUcmFja2VyLmV2ZW50KCdsb2dpbicpO1xuICogICAgICBldmVudFRyYWNrZXIuc2F2ZSgpO1xuICogICAgICBleHBlY3QocG9zdFNweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICogICAgICBleHBlY3QocG9zdFNweS5tb3N0UmVjZW50Q2FsbC5hcmdzWzBdKS5ub3QudG9FcXVhbCgnL3RyYWNrJyk7XG4gKiAgICAgIGV4cGVjdChwb3N0U3B5Lm1vc3RSZWNlbnRDYWxsLmFyZ3NbMF0pLnRvRXF1YWwoJy9jdXN0b20tdHJhY2snKTtcbiAqICAgICAgZXhwZWN0KHBvc3RTcHkubW9zdFJlY2VudENhbGwuYXJnc1sxXSkudG9FcXVhbCh7ICdsb2dpbic6IDEgfSk7XG4gKiAgICB9KSk7XG4gKiAgfSk7XG4gKiBgYGBcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRwcm92aWRlI2ZhY3RvcnlcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipzZXJ2aWNlIGZhY3RvcnkqKiwgd2hpY2ggd2lsbCBiZSBjYWxsZWQgdG8gcmV0dXJuIHRoZSBzZXJ2aWNlIGluc3RhbmNlLlxuICogVGhpcyBpcyBzaG9ydCBmb3IgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHdoZXJlIGl0cyBwcm92aWRlciBjb25zaXN0cyBvZiBvbmx5IGEgYCRnZXRgIHByb3BlcnR5LFxuICogd2hpY2ggaXMgdGhlIGdpdmVuIHNlcnZpY2UgZmFjdG9yeSBmdW5jdGlvbi5cbiAqIFlvdSBzaG91bGQgdXNlIHtAbGluayBhdXRvLiRwcm92aWRlI2ZhY3RvcnkgJHByb3ZpZGUuZmFjdG9yeShnZXRGbil9IGlmIHlvdSBkbyBub3QgbmVlZCB0b1xuICogY29uZmlndXJlIHlvdXIgc2VydmljZSBpbiBhIHByb3ZpZGVyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXkuPHN0cmluZ3xGdW5jdGlvbj59ICRnZXRGbiBUaGUgaW5qZWN0YWJsZSAkZ2V0Rm4gZm9yIHRoZSBpbnN0YW5jZSBjcmVhdGlvbi5cbiAqICAgICAgICAgICAgICAgICAgICAgIEludGVybmFsbHkgdGhpcyBpcyBhIHNob3J0IGhhbmQgZm9yIGAkcHJvdmlkZS5wcm92aWRlcihuYW1lLCB7JGdldDogJGdldEZufSlgLlxuICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZVxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlXG4gKiBgYGBqc1xuICogICAkcHJvdmlkZS5mYWN0b3J5KCdwaW5nJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XG4gKiAgICAgcmV0dXJuIGZ1bmN0aW9uIHBpbmcoKSB7XG4gKiAgICAgICByZXR1cm4gJGh0dHAuc2VuZCgnL3BpbmcnKTtcbiAqICAgICB9O1xuICogICB9XSk7XG4gKiBgYGBcbiAqIFlvdSB3b3VsZCB0aGVuIGluamVjdCBhbmQgdXNlIHRoaXMgc2VydmljZSBsaWtlIHRoaXM6XG4gKiBgYGBqc1xuICogICBzb21lTW9kdWxlLmNvbnRyb2xsZXIoJ0N0cmwnLCBbJ3BpbmcnLCBmdW5jdGlvbihwaW5nKSB7XG4gKiAgICAgcGluZygpO1xuICogICB9XSk7XG4gKiBgYGBcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjc2VydmljZVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVnaXN0ZXIgYSAqKnNlcnZpY2UgY29uc3RydWN0b3IqKiwgd2hpY2ggd2lsbCBiZSBpbnZva2VkIHdpdGggYG5ld2AgdG8gY3JlYXRlIHRoZSBzZXJ2aWNlXG4gKiBpbnN0YW5jZS5cbiAqIFRoaXMgaXMgc2hvcnQgZm9yIHJlZ2lzdGVyaW5nIGEgc2VydmljZSB3aGVyZSBpdHMgcHJvdmlkZXIncyBgJGdldGAgcHJvcGVydHkgaXMgdGhlIHNlcnZpY2VcbiAqIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGluc3RhbnRpYXRlIHRoZSBzZXJ2aWNlIGluc3RhbmNlLlxuICpcbiAqIFlvdSBzaG91bGQgdXNlIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2UgJHByb3ZpZGUuc2VydmljZShjbGFzcyl9IGlmIHlvdSBkZWZpbmUgeW91ciBzZXJ2aWNlXG4gKiBhcyBhIHR5cGUvY2xhc3MuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLlxuICogQHBhcmFtIHtGdW5jdGlvbnxBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gY29uc3RydWN0b3IgQW4gaW5qZWN0YWJsZSBjbGFzcyAoY29uc3RydWN0b3IgZnVuY3Rpb24pXG4gKiAgICAgdGhhdCB3aWxsIGJlIGluc3RhbnRpYXRlZC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2VcbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSBpcyBhbiBleGFtcGxlIG9mIHJlZ2lzdGVyaW5nIGEgc2VydmljZSB1c2luZ1xuICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSAkcHJvdmlkZS5zZXJ2aWNlKGNsYXNzKX0uXG4gKiBgYGBqc1xuICogICB2YXIgUGluZyA9IGZ1bmN0aW9uKCRodHRwKSB7XG4gKiAgICAgdGhpcy4kaHR0cCA9ICRodHRwO1xuICogICB9O1xuICpcbiAqICAgUGluZy4kaW5qZWN0ID0gWyckaHR0cCddO1xuICpcbiAqICAgUGluZy5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKCkge1xuICogICAgIHJldHVybiB0aGlzLiRodHRwLmdldCgnL3BpbmcnKTtcbiAqICAgfTtcbiAqICAgJHByb3ZpZGUuc2VydmljZSgncGluZycsIFBpbmcpO1xuICogYGBgXG4gKiBZb3Ugd291bGQgdGhlbiBpbmplY3QgYW5kIHVzZSB0aGlzIHNlcnZpY2UgbGlrZSB0aGlzOlxuICogYGBganNcbiAqICAgc29tZU1vZHVsZS5jb250cm9sbGVyKCdDdHJsJywgWydwaW5nJywgZnVuY3Rpb24ocGluZykge1xuICogICAgIHBpbmcuc2VuZCgpO1xuICogICB9XSk7XG4gKiBgYGBcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjdmFsdWVcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKip2YWx1ZSBzZXJ2aWNlKiogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0sIHN1Y2ggYXMgYSBzdHJpbmcsIGFcbiAqIG51bWJlciwgYW4gYXJyYXksIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLiAgVGhpcyBpcyBzaG9ydCBmb3IgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHdoZXJlIGl0c1xuICogcHJvdmlkZXIncyBgJGdldGAgcHJvcGVydHkgaXMgYSBmYWN0b3J5IGZ1bmN0aW9uIHRoYXQgdGFrZXMgbm8gYXJndW1lbnRzIGFuZCByZXR1cm5zIHRoZSAqKnZhbHVlXG4gKiBzZXJ2aWNlKiouXG4gKlxuICogVmFsdWUgc2VydmljZXMgYXJlIHNpbWlsYXIgdG8gY29uc3RhbnQgc2VydmljZXMsIGV4Y2VwdCB0aGF0IHRoZXkgY2Fubm90IGJlIGluamVjdGVkIGludG8gYVxuICogbW9kdWxlIGNvbmZpZ3VyYXRpb24gZnVuY3Rpb24gKHNlZSB7QGxpbmsgYW5ndWxhci5Nb2R1bGUjY29uZmlnfSkgYnV0IHRoZXkgY2FuIGJlIG92ZXJyaWRkZW4gYnlcbiAqIGFuIEFuZ3VsYXJcbiAqIHtAbGluayBhdXRvLiRwcm92aWRlI2RlY29yYXRvciBkZWNvcmF0b3J9LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlLlxuICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZVxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlIGFyZSBzb21lIGV4YW1wbGVzIG9mIGNyZWF0aW5nIHZhbHVlIHNlcnZpY2VzLlxuICogYGBganNcbiAqICAgJHByb3ZpZGUudmFsdWUoJ0FETUlOX1VTRVInLCAnYWRtaW4nKTtcbiAqXG4gKiAgICRwcm92aWRlLnZhbHVlKCdSb2xlTG9va3VwJywgeyBhZG1pbjogMCwgd3JpdGVyOiAxLCByZWFkZXI6IDIgfSk7XG4gKlxuICogICAkcHJvdmlkZS52YWx1ZSgnaGFsZk9mJywgZnVuY3Rpb24odmFsdWUpIHtcbiAqICAgICByZXR1cm4gdmFsdWUgLyAyO1xuICogICB9KTtcbiAqIGBgYFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSNjb25zdGFudFxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVnaXN0ZXIgYSAqKmNvbnN0YW50IHNlcnZpY2UqKiwgc3VjaCBhcyBhIHN0cmluZywgYSBudW1iZXIsIGFuIGFycmF5LCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbixcbiAqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBVbmxpa2Uge0BsaW5rIGF1dG8uJHByb3ZpZGUjdmFsdWUgdmFsdWV9IGl0IGNhbiBiZVxuICogaW5qZWN0ZWQgaW50byBhIG1vZHVsZSBjb25maWd1cmF0aW9uIGZ1bmN0aW9uIChzZWUge0BsaW5rIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZ30pIGFuZCBpdCBjYW5ub3RcbiAqIGJlIG92ZXJyaWRkZW4gYnkgYW4gQW5ndWxhciB7QGxpbmsgYXV0by4kcHJvdmlkZSNkZWNvcmF0b3IgZGVjb3JhdG9yfS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgY29uc3RhbnQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBjb25zdGFudCB2YWx1ZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgaW5zdGFuY2VcbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSBhIHNvbWUgZXhhbXBsZXMgb2YgY3JlYXRpbmcgY29uc3RhbnRzOlxuICogYGBganNcbiAqICAgJHByb3ZpZGUuY29uc3RhbnQoJ1NIQVJEX0hFSUdIVCcsIDMwNik7XG4gKlxuICogICAkcHJvdmlkZS5jb25zdGFudCgnTVlfQ09MT1VSUycsIFsncmVkJywgJ2JsdWUnLCAnZ3JleSddKTtcbiAqXG4gKiAgICRwcm92aWRlLmNvbnN0YW50KCdkb3VibGUnLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICAgIHJldHVybiB2YWx1ZSAqIDI7XG4gKiAgIH0pO1xuICogYGBgXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRwcm92aWRlI2RlY29yYXRvclxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVnaXN0ZXIgYSAqKnNlcnZpY2UgZGVjb3JhdG9yKiogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIEEgc2VydmljZSBkZWNvcmF0b3JcbiAqIGludGVyY2VwdHMgdGhlIGNyZWF0aW9uIG9mIGEgc2VydmljZSwgYWxsb3dpbmcgaXQgdG8gb3ZlcnJpZGUgb3IgbW9kaWZ5IHRoZSBiZWhhdmlvdXIgb2YgdGhlXG4gKiBzZXJ2aWNlLiBUaGUgb2JqZWN0IHJldHVybmVkIGJ5IHRoZSBkZWNvcmF0b3IgbWF5IGJlIHRoZSBvcmlnaW5hbCBzZXJ2aWNlLCBvciBhIG5ldyBzZXJ2aWNlXG4gKiBvYmplY3Qgd2hpY2ggcmVwbGFjZXMgb3Igd3JhcHMgYW5kIGRlbGVnYXRlcyB0byB0aGUgb3JpZ2luYWwgc2VydmljZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgc2VydmljZSB0byBkZWNvcmF0ZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXkuPHN0cmluZ3xGdW5jdGlvbj59IGRlY29yYXRvciBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBzZXJ2aWNlIG5lZWRzIHRvIGJlXG4gKiAgICBpbnN0YW50aWF0ZWQgYW5kIHNob3VsZCByZXR1cm4gdGhlIGRlY29yYXRlZCBzZXJ2aWNlIGluc3RhbmNlLiBUaGUgZnVuY3Rpb24gaXMgY2FsbGVkIHVzaW5nXG4gKiAgICB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yI2ludm9rZSBpbmplY3Rvci5pbnZva2V9IG1ldGhvZCBhbmQgaXMgdGhlcmVmb3JlIGZ1bGx5IGluamVjdGFibGUuXG4gKiAgICBMb2NhbCBpbmplY3Rpb24gYXJndW1lbnRzOlxuICpcbiAqICAgICogYCRkZWxlZ2F0ZWAgLSBUaGUgb3JpZ2luYWwgc2VydmljZSBpbnN0YW5jZSwgd2hpY2ggY2FuIGJlIG1vbmtleSBwYXRjaGVkLCBjb25maWd1cmVkLFxuICogICAgICBkZWNvcmF0ZWQgb3IgZGVsZWdhdGVkIHRvLlxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlIHdlIGRlY29yYXRlIHRoZSB7QGxpbmsgbmcuJGxvZyAkbG9nfSBzZXJ2aWNlIHRvIGNvbnZlcnQgd2FybmluZ3MgdG8gZXJyb3JzIGJ5IGludGVyY2VwdGluZ1xuICogY2FsbHMgdG8ge0BsaW5rIG5nLiRsb2cjZXJyb3IgJGxvZy53YXJuKCl9LlxuICogYGBganNcbiAqICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckbG9nJywgWyckZGVsZWdhdGUnLCBmdW5jdGlvbigkZGVsZWdhdGUpIHtcbiAqICAgICAkZGVsZWdhdGUud2FybiA9ICRkZWxlZ2F0ZS5lcnJvcjtcbiAqICAgICByZXR1cm4gJGRlbGVnYXRlO1xuICogICB9XSk7XG4gKiBgYGBcbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUluamVjdG9yKG1vZHVsZXNUb0xvYWQsIHN0cmljdERpKSB7XG4gIHN0cmljdERpID0gKHN0cmljdERpID09PSB0cnVlKTtcbiAgdmFyIElOU1RBTlRJQVRJTkcgPSB7fSxcbiAgICAgIHByb3ZpZGVyU3VmZml4ID0gJ1Byb3ZpZGVyJyxcbiAgICAgIHBhdGggPSBbXSxcbiAgICAgIGxvYWRlZE1vZHVsZXMgPSBuZXcgSGFzaE1hcChbXSwgdHJ1ZSksXG4gICAgICBwcm92aWRlckNhY2hlID0ge1xuICAgICAgICAkcHJvdmlkZToge1xuICAgICAgICAgICAgcHJvdmlkZXI6IHN1cHBvcnRPYmplY3QocHJvdmlkZXIpLFxuICAgICAgICAgICAgZmFjdG9yeTogc3VwcG9ydE9iamVjdChmYWN0b3J5KSxcbiAgICAgICAgICAgIHNlcnZpY2U6IHN1cHBvcnRPYmplY3Qoc2VydmljZSksXG4gICAgICAgICAgICB2YWx1ZTogc3VwcG9ydE9iamVjdCh2YWx1ZSksXG4gICAgICAgICAgICBjb25zdGFudDogc3VwcG9ydE9iamVjdChjb25zdGFudCksXG4gICAgICAgICAgICBkZWNvcmF0b3I6IGRlY29yYXRvclxuICAgICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwcm92aWRlckluamVjdG9yID0gKHByb3ZpZGVyQ2FjaGUuJGluamVjdG9yID1cbiAgICAgICAgICBjcmVhdGVJbnRlcm5hbEluamVjdG9yKHByb3ZpZGVyQ2FjaGUsIGZ1bmN0aW9uKHNlcnZpY2VOYW1lLCBjYWxsZXIpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKGNhbGxlcikpIHtcbiAgICAgICAgICAgICAgcGF0aC5wdXNoKGNhbGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3VucHInLCBcIlVua25vd24gcHJvdmlkZXI6IHswfVwiLCBwYXRoLmpvaW4oJyA8LSAnKSk7XG4gICAgICAgICAgfSkpLFxuICAgICAgaW5zdGFuY2VDYWNoZSA9IHt9LFxuICAgICAgaW5zdGFuY2VJbmplY3RvciA9IChpbnN0YW5jZUNhY2hlLiRpbmplY3RvciA9XG4gICAgICAgICAgY3JlYXRlSW50ZXJuYWxJbmplY3RvcihpbnN0YW5jZUNhY2hlLCBmdW5jdGlvbihzZXJ2aWNlTmFtZSwgY2FsbGVyKSB7XG4gICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSBwcm92aWRlckluamVjdG9yLmdldChzZXJ2aWNlTmFtZSArIHByb3ZpZGVyU3VmZml4LCBjYWxsZXIpO1xuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKHByb3ZpZGVyLiRnZXQsIHByb3ZpZGVyLCB1bmRlZmluZWQsIHNlcnZpY2VOYW1lKTtcbiAgICAgICAgICB9KSk7XG5cblxuICBmb3JFYWNoKGxvYWRNb2R1bGVzKG1vZHVsZXNUb0xvYWQpLCBmdW5jdGlvbihmbikgeyBpZiAoZm4pIGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKGZuKTsgfSk7XG5cbiAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3I7XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vICRwcm92aWRlclxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICBmdW5jdGlvbiBzdXBwb3J0T2JqZWN0KGRlbGVnYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICAgIGZvckVhY2goa2V5LCByZXZlcnNlUGFyYW1zKGRlbGVnYXRlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVsZWdhdGUoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3ZpZGVyKG5hbWUsIHByb3ZpZGVyXykge1xuICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdzZXJ2aWNlJyk7XG4gICAgaWYgKGlzRnVuY3Rpb24ocHJvdmlkZXJfKSB8fCBpc0FycmF5KHByb3ZpZGVyXykpIHtcbiAgICAgIHByb3ZpZGVyXyA9IHByb3ZpZGVySW5qZWN0b3IuaW5zdGFudGlhdGUocHJvdmlkZXJfKTtcbiAgICB9XG4gICAgaWYgKCFwcm92aWRlcl8uJGdldCkge1xuICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdwZ2V0JywgXCJQcm92aWRlciAnezB9JyBtdXN0IGRlZmluZSAkZ2V0IGZhY3RvcnkgbWV0aG9kLlwiLCBuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3ZpZGVyQ2FjaGVbbmFtZSArIHByb3ZpZGVyU3VmZml4XSA9IHByb3ZpZGVyXztcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZm9yY2VSZXR1cm5WYWx1ZShuYW1lLCBmYWN0b3J5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGVuZm9yY2VkUmV0dXJuVmFsdWUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gaW5zdGFuY2VJbmplY3Rvci5pbnZva2UoZmFjdG9yeSwgdGhpcyk7XG4gICAgICBpZiAoaXNVbmRlZmluZWQocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3VuZGVmJywgXCJQcm92aWRlciAnezB9JyBtdXN0IHJldHVybiBhIHZhbHVlIGZyb20gJGdldCBmYWN0b3J5IG1ldGhvZC5cIiwgbmFtZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBmYWN0b3J5KG5hbWUsIGZhY3RvcnlGbiwgZW5mb3JjZSkge1xuICAgIHJldHVybiBwcm92aWRlcihuYW1lLCB7XG4gICAgICAkZ2V0OiBlbmZvcmNlICE9PSBmYWxzZSA/IGVuZm9yY2VSZXR1cm5WYWx1ZShuYW1lLCBmYWN0b3J5Rm4pIDogZmFjdG9yeUZuXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXJ2aWNlKG5hbWUsIGNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkobmFtZSwgWyckaW5qZWN0b3InLCBmdW5jdGlvbigkaW5qZWN0b3IpIHtcbiAgICAgIHJldHVybiAkaW5qZWN0b3IuaW5zdGFudGlhdGUoY29uc3RydWN0b3IpO1xuICAgIH1dKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbHVlKG5hbWUsIHZhbCkgeyByZXR1cm4gZmFjdG9yeShuYW1lLCB2YWx1ZUZuKHZhbCksIGZhbHNlKTsgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ2NvbnN0YW50Jyk7XG4gICAgcHJvdmlkZXJDYWNoZVtuYW1lXSA9IHZhbHVlO1xuICAgIGluc3RhbmNlQ2FjaGVbbmFtZV0gPSB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29yYXRvcihzZXJ2aWNlTmFtZSwgZGVjb3JGbikge1xuICAgIHZhciBvcmlnUHJvdmlkZXIgPSBwcm92aWRlckluamVjdG9yLmdldChzZXJ2aWNlTmFtZSArIHByb3ZpZGVyU3VmZml4KSxcbiAgICAgICAgb3JpZyRnZXQgPSBvcmlnUHJvdmlkZXIuJGdldDtcblxuICAgIG9yaWdQcm92aWRlci4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb3JpZ0luc3RhbmNlID0gaW5zdGFuY2VJbmplY3Rvci5pbnZva2Uob3JpZyRnZXQsIG9yaWdQcm92aWRlcik7XG4gICAgICByZXR1cm4gaW5zdGFuY2VJbmplY3Rvci5pbnZva2UoZGVjb3JGbiwgbnVsbCwgeyRkZWxlZ2F0ZTogb3JpZ0luc3RhbmNlfSk7XG4gICAgfTtcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBNb2R1bGUgTG9hZGluZ1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgZnVuY3Rpb24gbG9hZE1vZHVsZXMobW9kdWxlc1RvTG9hZCkge1xuICAgIHZhciBydW5CbG9ja3MgPSBbXSwgbW9kdWxlRm47XG4gICAgZm9yRWFjaChtb2R1bGVzVG9Mb2FkLCBmdW5jdGlvbihtb2R1bGUpIHtcbiAgICAgIGlmIChsb2FkZWRNb2R1bGVzLmdldChtb2R1bGUpKSByZXR1cm47XG4gICAgICBsb2FkZWRNb2R1bGVzLnB1dChtb2R1bGUsIHRydWUpO1xuXG4gICAgICBmdW5jdGlvbiBydW5JbnZva2VRdWV1ZShxdWV1ZSkge1xuICAgICAgICB2YXIgaSwgaWk7XG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gcXVldWUubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIHZhciBpbnZva2VBcmdzID0gcXVldWVbaV0sXG4gICAgICAgICAgICAgIHByb3ZpZGVyID0gcHJvdmlkZXJJbmplY3Rvci5nZXQoaW52b2tlQXJnc1swXSk7XG5cbiAgICAgICAgICBwcm92aWRlcltpbnZva2VBcmdzWzFdXS5hcHBseShwcm92aWRlciwgaW52b2tlQXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGlzU3RyaW5nKG1vZHVsZSkpIHtcbiAgICAgICAgICBtb2R1bGVGbiA9IGFuZ3VsYXJNb2R1bGUobW9kdWxlKTtcbiAgICAgICAgICBydW5CbG9ja3MgPSBydW5CbG9ja3MuY29uY2F0KGxvYWRNb2R1bGVzKG1vZHVsZUZuLnJlcXVpcmVzKSkuY29uY2F0KG1vZHVsZUZuLl9ydW5CbG9ja3MpO1xuICAgICAgICAgIHJ1bkludm9rZVF1ZXVlKG1vZHVsZUZuLl9pbnZva2VRdWV1ZSk7XG4gICAgICAgICAgcnVuSW52b2tlUXVldWUobW9kdWxlRm4uX2NvbmZpZ0Jsb2Nrcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihtb2R1bGUpKSB7XG4gICAgICAgICAgICBydW5CbG9ja3MucHVzaChwcm92aWRlckluamVjdG9yLmludm9rZShtb2R1bGUpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKHByb3ZpZGVySW5qZWN0b3IuaW52b2tlKG1vZHVsZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFzc2VydEFyZ0ZuKG1vZHVsZSwgJ21vZHVsZScpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChpc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgICAgICBtb2R1bGUgPSBtb2R1bGVbbW9kdWxlLmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlLm1lc3NhZ2UgJiYgZS5zdGFjayAmJiBlLnN0YWNrLmluZGV4T2YoZS5tZXNzYWdlKSA9PSAtMSkge1xuICAgICAgICAgIC8vIFNhZmFyaSAmIEZGJ3Mgc3RhY2sgdHJhY2VzIGRvbid0IGNvbnRhaW4gZXJyb3IubWVzc2FnZSBjb250ZW50XG4gICAgICAgICAgLy8gdW5saWtlIHRob3NlIG9mIENocm9tZSBhbmQgSUVcbiAgICAgICAgICAvLyBTbyBpZiBzdGFjayBkb2Vzbid0IGNvbnRhaW4gbWVzc2FnZSwgd2UgY3JlYXRlIGEgbmV3IHN0cmluZyB0aGF0IGNvbnRhaW5zIGJvdGguXG4gICAgICAgICAgLy8gU2luY2UgZXJyb3Iuc3RhY2sgaXMgcmVhZC1vbmx5IGluIFNhZmFyaSwgSSdtIG92ZXJyaWRpbmcgZSBhbmQgbm90IGUuc3RhY2sgaGVyZS5cbiAgICAgICAgICAvKiBqc2hpbnQgLVcwMjIgKi9cbiAgICAgICAgICBlID0gZS5tZXNzYWdlICsgJ1xcbicgKyBlLnN0YWNrO1xuICAgICAgICB9XG4gICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignbW9kdWxlcnInLCBcIkZhaWxlZCB0byBpbnN0YW50aWF0ZSBtb2R1bGUgezB9IGR1ZSB0bzpcXG57MX1cIixcbiAgICAgICAgICAgICAgICAgIG1vZHVsZSwgZS5zdGFjayB8fCBlLm1lc3NhZ2UgfHwgZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJ1bkJsb2NrcztcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBpbnRlcm5hbCBJbmplY3RvclxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICBmdW5jdGlvbiBjcmVhdGVJbnRlcm5hbEluamVjdG9yKGNhY2hlLCBmYWN0b3J5KSB7XG5cbiAgICBmdW5jdGlvbiBnZXRTZXJ2aWNlKHNlcnZpY2VOYW1lLCBjYWxsZXIpIHtcbiAgICAgIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShzZXJ2aWNlTmFtZSkpIHtcbiAgICAgICAgaWYgKGNhY2hlW3NlcnZpY2VOYW1lXSA9PT0gSU5TVEFOVElBVElORykge1xuICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignY2RlcCcsICdDaXJjdWxhciBkZXBlbmRlbmN5IGZvdW5kOiB7MH0nLFxuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZSArICcgPC0gJyArIHBhdGguam9pbignIDwtICcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGVbc2VydmljZU5hbWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBwYXRoLnVuc2hpZnQoc2VydmljZU5hbWUpO1xuICAgICAgICAgIGNhY2hlW3NlcnZpY2VOYW1lXSA9IElOU1RBTlRJQVRJTkc7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlW3NlcnZpY2VOYW1lXSA9IGZhY3Rvcnkoc2VydmljZU5hbWUsIGNhbGxlcik7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGlmIChjYWNoZVtzZXJ2aWNlTmFtZV0gPT09IElOU1RBTlRJQVRJTkcpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjYWNoZVtzZXJ2aWNlTmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBwYXRoLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZva2UoZm4sIHNlbGYsIGxvY2Fscywgc2VydmljZU5hbWUpIHtcbiAgICAgIGlmICh0eXBlb2YgbG9jYWxzID09PSAnc3RyaW5nJykge1xuICAgICAgICBzZXJ2aWNlTmFtZSA9IGxvY2FscztcbiAgICAgICAgbG9jYWxzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGFyZ3MgPSBbXSxcbiAgICAgICAgICAkaW5qZWN0ID0gY3JlYXRlSW5qZWN0b3IuJCRhbm5vdGF0ZShmbiwgc3RyaWN0RGksIHNlcnZpY2VOYW1lKSxcbiAgICAgICAgICBsZW5ndGgsIGksXG4gICAgICAgICAga2V5O1xuXG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSAkaW5qZWN0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtleSA9ICRpbmplY3RbaV07XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignaXRrbicsXG4gICAgICAgICAgICAgICAgICAnSW5jb3JyZWN0IGluamVjdGlvbiB0b2tlbiEgRXhwZWN0ZWQgc2VydmljZSBuYW1lIGFzIHN0cmluZywgZ290IHswfScsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgYXJncy5wdXNoKFxuICAgICAgICAgIGxvY2FscyAmJiBsb2NhbHMuaGFzT3duUHJvcGVydHkoa2V5KVxuICAgICAgICAgID8gbG9jYWxzW2tleV1cbiAgICAgICAgICA6IGdldFNlcnZpY2Uoa2V5LCBzZXJ2aWNlTmFtZSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5KGZuKSkge1xuICAgICAgICBmbiA9IGZuW2xlbmd0aF07XG4gICAgICB9XG5cbiAgICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2FuZ3VsYXJqcy1pbnZva2UtYXBwbHktdnMtc3dpdGNoXG4gICAgICAvLyAjNTM4OFxuICAgICAgcmV0dXJuIGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbnRpYXRlKFR5cGUsIGxvY2Fscywgc2VydmljZU5hbWUpIHtcbiAgICAgIC8vIENoZWNrIGlmIFR5cGUgaXMgYW5ub3RhdGVkIGFuZCB1c2UganVzdCB0aGUgZ2l2ZW4gZnVuY3Rpb24gYXQgbi0xIGFzIHBhcmFtZXRlclxuICAgICAgLy8gZS5nLiBzb21lTW9kdWxlLmZhY3RvcnkoJ2dyZWV0ZXInLCBbJyR3aW5kb3cnLCBmdW5jdGlvbihyZW5hbWVkJHdpbmRvdykge31dKTtcbiAgICAgIC8vIE9iamVjdCBjcmVhdGlvbjogaHR0cDovL2pzcGVyZi5jb20vY3JlYXRlLWNvbnN0cnVjdG9yLzJcbiAgICAgIHZhciBpbnN0YW5jZSA9IE9iamVjdC5jcmVhdGUoKGlzQXJyYXkoVHlwZSkgPyBUeXBlW1R5cGUubGVuZ3RoIC0gMV0gOiBUeXBlKS5wcm90b3R5cGUgfHwgbnVsbCk7XG4gICAgICB2YXIgcmV0dXJuZWRWYWx1ZSA9IGludm9rZShUeXBlLCBpbnN0YW5jZSwgbG9jYWxzLCBzZXJ2aWNlTmFtZSk7XG5cbiAgICAgIHJldHVybiBpc09iamVjdChyZXR1cm5lZFZhbHVlKSB8fCBpc0Z1bmN0aW9uKHJldHVybmVkVmFsdWUpID8gcmV0dXJuZWRWYWx1ZSA6IGluc3RhbmNlO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBpbnZva2U6IGludm9rZSxcbiAgICAgIGluc3RhbnRpYXRlOiBpbnN0YW50aWF0ZSxcbiAgICAgIGdldDogZ2V0U2VydmljZSxcbiAgICAgIGFubm90YXRlOiBjcmVhdGVJbmplY3Rvci4kJGFubm90YXRlLFxuICAgICAgaGFzOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHJldHVybiBwcm92aWRlckNhY2hlLmhhc093blByb3BlcnR5KG5hbWUgKyBwcm92aWRlclN1ZmZpeCkgfHwgY2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5jcmVhdGVJbmplY3Rvci4kJGFubm90YXRlID0gYW5ub3RhdGU7XG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkYW5jaG9yU2Nyb2xsUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSBgJGFuY2hvclNjcm9sbFByb3ZpZGVyYCB0byBkaXNhYmxlIGF1dG9tYXRpYyBzY3JvbGxpbmcgd2hlbmV2ZXJcbiAqIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIoKSB7XG5cbiAgdmFyIGF1dG9TY3JvbGxpbmdFbmFibGVkID0gdHJ1ZTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkYW5jaG9yU2Nyb2xsUHJvdmlkZXIjZGlzYWJsZUF1dG9TY3JvbGxpbmdcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEJ5IGRlZmF1bHQsIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsICRhbmNob3JTY3JvbGwoKX0gd2lsbCBhdXRvbWF0aWNhbGx5IGRldGVjdCBjaGFuZ2VzIHRvXG4gICAqIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSBhbmQgc2Nyb2xsIHRvIHRoZSBlbGVtZW50IG1hdGNoaW5nIHRoZSBuZXcgaGFzaC48YnIgLz5cbiAgICogVXNlIHRoaXMgbWV0aG9kIHRvIGRpc2FibGUgYXV0b21hdGljIHNjcm9sbGluZy5cbiAgICpcbiAgICogSWYgYXV0b21hdGljIHNjcm9sbGluZyBpcyBkaXNhYmxlZCwgb25lIG11c3QgZXhwbGljaXRseSBjYWxsXG4gICAqIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsICRhbmNob3JTY3JvbGwoKX0gaW4gb3JkZXIgdG8gc2Nyb2xsIHRvIHRoZSBlbGVtZW50IHJlbGF0ZWQgdG8gdGhlXG4gICAqIGN1cnJlbnQgaGFzaC5cbiAgICovXG4gIHRoaXMuZGlzYWJsZUF1dG9TY3JvbGxpbmcgPSBmdW5jdGlvbigpIHtcbiAgICBhdXRvU2Nyb2xsaW5nRW5hYmxlZCA9IGZhbHNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2Mgc2VydmljZVxuICAgKiBAbmFtZSAkYW5jaG9yU2Nyb2xsXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqIEByZXF1aXJlcyAkd2luZG93XG4gICAqIEByZXF1aXJlcyAkbG9jYXRpb25cbiAgICogQHJlcXVpcmVzICRyb290U2NvcGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFdoZW4gY2FsbGVkLCBpdCBzY3JvbGxzIHRvIHRoZSBlbGVtZW50IHJlbGF0ZWQgdG8gdGhlIHNwZWNpZmllZCBgaGFzaGAgb3IgKGlmIG9taXR0ZWQpIHRvIHRoZVxuICAgKiBjdXJyZW50IHZhbHVlIG9mIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSwgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBzcGVjaWZpZWRcbiAgICogaW4gdGhlXG4gICAqIFtIVE1MNSBzcGVjXShodHRwOi8vZGV2LnczLm9yZy9odG1sNS9zcGVjL092ZXJ2aWV3Lmh0bWwjdGhlLWluZGljYXRlZC1wYXJ0LW9mLXRoZS1kb2N1bWVudCkuXG4gICAqXG4gICAqIEl0IGFsc28gd2F0Y2hlcyB0aGUge0BsaW5rIG5nLiRsb2NhdGlvbiNoYXNoICRsb2NhdGlvbi5oYXNoKCl9IGFuZCBhdXRvbWF0aWNhbGx5IHNjcm9sbHMgdG9cbiAgICogbWF0Y2ggYW55IGFuY2hvciB3aGVuZXZlciBpdCBjaGFuZ2VzLiBUaGlzIGNhbiBiZSBkaXNhYmxlZCBieSBjYWxsaW5nXG4gICAqIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsUHJvdmlkZXIjZGlzYWJsZUF1dG9TY3JvbGxpbmcgJGFuY2hvclNjcm9sbFByb3ZpZGVyLmRpc2FibGVBdXRvU2Nyb2xsaW5nKCl9LlxuICAgKlxuICAgKiBBZGRpdGlvbmFsbHksIHlvdSBjYW4gdXNlIGl0cyB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbCN5T2Zmc2V0IHlPZmZzZXR9IHByb3BlcnR5IHRvIHNwZWNpZnkgYVxuICAgKiB2ZXJ0aWNhbCBzY3JvbGwtb2Zmc2V0IChlaXRoZXIgZml4ZWQgb3IgZHluYW1pYykuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gaGFzaCBUaGUgaGFzaCBzcGVjaWZ5aW5nIHRoZSBlbGVtZW50IHRvIHNjcm9sbCB0by4gSWYgb21pdHRlZCwgdGhlIHZhbHVlIG9mXG4gICAqICAgICAgICAgICAgICAgICAgICAgICB7QGxpbmsgbmcuJGxvY2F0aW9uI2hhc2ggJGxvY2F0aW9uLmhhc2goKX0gd2lsbCBiZSB1c2VkLlxuICAgKlxuICAgKiBAcHJvcGVydHkgeyhudW1iZXJ8ZnVuY3Rpb258anFMaXRlKX0geU9mZnNldFxuICAgKiBJZiBzZXQsIHNwZWNpZmllcyBhIHZlcnRpY2FsIHNjcm9sbC1vZmZzZXQuIFRoaXMgaXMgb2Z0ZW4gdXNlZnVsIHdoZW4gdGhlcmUgYXJlIGZpeGVkXG4gICAqIHBvc2l0aW9uZWQgZWxlbWVudHMgYXQgdGhlIHRvcCBvZiB0aGUgcGFnZSwgc3VjaCBhcyBuYXZiYXJzLCBoZWFkZXJzIGV0Yy5cbiAgICpcbiAgICogYHlPZmZzZXRgIGNhbiBiZSBzcGVjaWZpZWQgaW4gdmFyaW91cyB3YXlzOlxuICAgKiAtICoqbnVtYmVyKio6IEEgZml4ZWQgbnVtYmVyIG9mIHBpeGVscyB0byBiZSB1c2VkIGFzIG9mZnNldC48YnIgLz48YnIgLz5cbiAgICogLSAqKmZ1bmN0aW9uKio6IEEgZ2V0dGVyIGZ1bmN0aW9uIGNhbGxlZCBldmVyeXRpbWUgYCRhbmNob3JTY3JvbGwoKWAgaXMgZXhlY3V0ZWQuIE11c3QgcmV0dXJuXG4gICAqICAgYSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBvZmZzZXQgKGluIHBpeGVscykuPGJyIC8+PGJyIC8+XG4gICAqIC0gKipqcUxpdGUqKjogQSBqcUxpdGUvalF1ZXJ5IGVsZW1lbnQgdG8gYmUgdXNlZCBmb3Igc3BlY2lmeWluZyB0aGUgb2Zmc2V0LiBUaGUgZGlzdGFuY2UgZnJvbVxuICAgKiAgIHRoZSB0b3Agb2YgdGhlIHBhZ2UgdG8gdGhlIGVsZW1lbnQncyBib3R0b20gd2lsbCBiZSB1c2VkIGFzIG9mZnNldC48YnIgLz5cbiAgICogICAqKk5vdGUqKjogVGhlIGVsZW1lbnQgd2lsbCBiZSB0YWtlbiBpbnRvIGFjY291bnQgb25seSBhcyBsb25nIGFzIGl0cyBgcG9zaXRpb25gIGlzIHNldCB0b1xuICAgKiAgIGBmaXhlZGAuIFRoaXMgb3B0aW9uIGlzIHVzZWZ1bCwgd2hlbiBkZWFsaW5nIHdpdGggcmVzcG9uc2l2ZSBuYXZiYXJzL2hlYWRlcnMgdGhhdCBhZGp1c3RcbiAgICogICB0aGVpciBoZWlnaHQgYW5kL29yIHBvc2l0aW9uaW5nIGFjY29yZGluZyB0byB0aGUgdmlld3BvcnQncyBzaXplLlxuICAgKlxuICAgKiA8YnIgLz5cbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogSW4gb3JkZXIgZm9yIGB5T2Zmc2V0YCB0byB3b3JrIHByb3Blcmx5LCBzY3JvbGxpbmcgc2hvdWxkIHRha2UgcGxhY2Ugb24gdGhlIGRvY3VtZW50J3Mgcm9vdCBhbmRcbiAgICogbm90IHNvbWUgY2hpbGQgZWxlbWVudC5cbiAgICogPC9kaXY+XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG1vZHVsZT1cImFuY2hvclNjcm9sbEV4YW1wbGVcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPGRpdiBpZD1cInNjcm9sbEFyZWFcIiBuZy1jb250cm9sbGVyPVwiU2Nyb2xsQ29udHJvbGxlclwiPlxuICAgICAgICAgICA8YSBuZy1jbGljaz1cImdvdG9Cb3R0b20oKVwiPkdvIHRvIGJvdHRvbTwvYT5cbiAgICAgICAgICAgPGEgaWQ9XCJib3R0b21cIj48L2E+IFlvdSdyZSBhdCB0aGUgYm90dG9tIVxuICAgICAgICAgPC9kaXY+XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdhbmNob3JTY3JvbGxFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdTY3JvbGxDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGxvY2F0aW9uJywgJyRhbmNob3JTY3JvbGwnLFxuICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJGFuY2hvclNjcm9sbCkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmdvdG9Cb3R0b20gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBsb2NhdGlvbi5oYXNoIHRvIHRoZSBpZCBvZlxuICAgICAgICAgICAgICAgICAvLyB0aGUgZWxlbWVudCB5b3Ugd2lzaCB0byBzY3JvbGwgdG8uXG4gICAgICAgICAgICAgICAgICRsb2NhdGlvbi5oYXNoKCdib3R0b20nKTtcblxuICAgICAgICAgICAgICAgICAvLyBjYWxsICRhbmNob3JTY3JvbGwoKVxuICAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCk7XG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgICAgI3Njcm9sbEFyZWEge1xuICAgICAgICAgICBoZWlnaHQ6IDI4MHB4O1xuICAgICAgICAgICBvdmVyZmxvdzogYXV0bztcbiAgICAgICAgIH1cblxuICAgICAgICAgI2JvdHRvbSB7XG4gICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICBtYXJnaW4tdG9wOiAyMDAwcHg7XG4gICAgICAgICB9XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqXG4gICAqIDxociAvPlxuICAgKiBUaGUgZXhhbXBsZSBiZWxvdyBpbGx1c3RyYXRlcyB0aGUgdXNlIG9mIGEgdmVydGljYWwgc2Nyb2xsLW9mZnNldCAoc3BlY2lmaWVkIGFzIGEgZml4ZWQgdmFsdWUpLlxuICAgKiBTZWUge0BsaW5rIG5nLiRhbmNob3JTY3JvbGwjeU9mZnNldCAkYW5jaG9yU2Nyb2xsLnlPZmZzZXR9IGZvciBtb3JlIGRldGFpbHMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG1vZHVsZT1cImFuY2hvclNjcm9sbE9mZnNldEV4YW1wbGVcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPGRpdiBjbGFzcz1cImZpeGVkLWhlYWRlclwiIG5nLWNvbnRyb2xsZXI9XCJoZWFkZXJDdHJsXCI+XG4gICAgICAgICAgIDxhIGhyZWY9XCJcIiBuZy1jbGljaz1cImdvdG9BbmNob3IoeClcIiBuZy1yZXBlYXQ9XCJ4IGluIFsxLDIsMyw0LDVdXCI+XG4gICAgICAgICAgICAgR28gdG8gYW5jaG9yIHt7eH19XG4gICAgICAgICAgIDwvYT5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgICAgPGRpdiBpZD1cImFuY2hvcnt7eH19XCIgY2xhc3M9XCJhbmNob3JcIiBuZy1yZXBlYXQ9XCJ4IGluIFsxLDIsMyw0LDVdXCI+XG4gICAgICAgICAgIEFuY2hvciB7e3h9fSBvZiA1XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2FuY2hvclNjcm9sbE9mZnNldEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLnJ1bihbJyRhbmNob3JTY3JvbGwnLCBmdW5jdGlvbigkYW5jaG9yU2Nyb2xsKSB7XG4gICAgICAgICAgICAgJGFuY2hvclNjcm9sbC55T2Zmc2V0ID0gNTA7ICAgLy8gYWx3YXlzIHNjcm9sbCBieSA1MCBleHRyYSBwaXhlbHNcbiAgICAgICAgICAgfV0pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdoZWFkZXJDdHJsJywgWyckYW5jaG9yU2Nyb2xsJywgJyRsb2NhdGlvbicsICckc2NvcGUnLFxuICAgICAgICAgICAgIGZ1bmN0aW9uICgkYW5jaG9yU2Nyb2xsLCAkbG9jYXRpb24sICRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmdvdG9BbmNob3IgPSBmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICAgICAgIHZhciBuZXdIYXNoID0gJ2FuY2hvcicgKyB4O1xuICAgICAgICAgICAgICAgICBpZiAoJGxvY2F0aW9uLmhhc2goKSAhPT0gbmV3SGFzaCkge1xuICAgICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgJGxvY2F0aW9uLmhhc2ggdG8gYG5ld0hhc2hgIGFuZFxuICAgICAgICAgICAgICAgICAgIC8vICRhbmNob3JTY3JvbGwgd2lsbCBhdXRvbWF0aWNhbGx5IHNjcm9sbCB0byBpdFxuICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5oYXNoKCdhbmNob3InICsgeCk7XG4gICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgLy8gY2FsbCAkYW5jaG9yU2Nyb2xsKCkgZXhwbGljaXRseSxcbiAgICAgICAgICAgICAgICAgICAvLyBzaW5jZSAkbG9jYXRpb24uaGFzaCBoYXNuJ3QgY2hhbmdlZFxuICAgICAgICAgICAgICAgICAgICRhbmNob3JTY3JvbGwoKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgIF0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgICBib2R5IHtcbiAgICAgICAgICAgcGFkZGluZy10b3A6IDUwcHg7XG4gICAgICAgICB9XG5cbiAgICAgICAgIC5hbmNob3Ige1xuICAgICAgICAgICBib3JkZXI6IDJweCBkYXNoZWQgRGFya09yY2hpZDtcbiAgICAgICAgICAgcGFkZGluZzogMTBweCAxMHB4IDIwMHB4IDEwcHg7XG4gICAgICAgICB9XG5cbiAgICAgICAgIC5maXhlZC1oZWFkZXIge1xuICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMik7XG4gICAgICAgICAgIGhlaWdodDogNTBweDtcbiAgICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICAgICB0b3A6IDA7IGxlZnQ6IDA7IHJpZ2h0OiAwO1xuICAgICAgICAgfVxuXG4gICAgICAgICAuZml4ZWQtaGVhZGVyID4gYSB7XG4gICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgbWFyZ2luOiA1cHggMTVweDtcbiAgICAgICAgIH1cbiAgICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICovXG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckbG9jYXRpb24nLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCR3aW5kb3csICRsb2NhdGlvbiwgJHJvb3RTY29wZSkge1xuICAgIHZhciBkb2N1bWVudCA9ICR3aW5kb3cuZG9jdW1lbnQ7XG5cbiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGZpcnN0IGFuY2hvciBmcm9tIGEgTm9kZUxpc3RcbiAgICAvLyAodXNpbmcgYEFycmF5I3NvbWUoKWAgaW5zdGVhZCBvZiBgYW5ndWxhciNmb3JFYWNoKClgIHNpbmNlIGl0J3MgbW9yZSBwZXJmb3JtYW50XG4gICAgLy8gIGFuZCB3b3JraW5nIGluIGFsbCBzdXBwb3J0ZWQgYnJvd3NlcnMuKVxuICAgIGZ1bmN0aW9uIGdldEZpcnN0QW5jaG9yKGxpc3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBudWxsO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnNvbWUuY2FsbChsaXN0LCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIGlmIChub2RlTmFtZV8oZWxlbWVudCkgPT09ICdhJykge1xuICAgICAgICAgIHJlc3VsdCA9IGVsZW1lbnQ7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRZT2Zmc2V0KCkge1xuXG4gICAgICB2YXIgb2Zmc2V0ID0gc2Nyb2xsLnlPZmZzZXQ7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9mZnNldCkpIHtcbiAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0KCk7XG4gICAgICB9IGVsc2UgaWYgKGlzRWxlbWVudChvZmZzZXQpKSB7XG4gICAgICAgIHZhciBlbGVtID0gb2Zmc2V0WzBdO1xuICAgICAgICB2YXIgc3R5bGUgPSAkd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbSk7XG4gICAgICAgIGlmIChzdHlsZS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgICAgICAgIG9mZnNldCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIWlzTnVtYmVyKG9mZnNldCkpIHtcbiAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY3JvbGxUbyhlbGVtKSB7XG4gICAgICBpZiAoZWxlbSkge1xuICAgICAgICBlbGVtLnNjcm9sbEludG9WaWV3KCk7XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IGdldFlPZmZzZXQoKTtcblxuICAgICAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAgICAgLy8gYG9mZnNldGAgaXMgdGhlIG51bWJlciBvZiBwaXhlbHMgd2Ugc2hvdWxkIHNjcm9sbCBVUCBpbiBvcmRlciB0byBhbGlnbiBgZWxlbWAgcHJvcGVybHkuXG4gICAgICAgICAgLy8gVGhpcyBpcyB0cnVlIE9OTFkgaWYgdGhlIGNhbGwgdG8gYGVsZW0uc2Nyb2xsSW50b1ZpZXcoKWAgaW5pdGlhbGx5IGFsaWducyBgZWxlbWAgYXQgdGhlXG4gICAgICAgICAgLy8gdG9wIG9mIHRoZSB2aWV3cG9ydC5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIElGIHRoZSBudW1iZXIgb2YgcGl4ZWxzIGZyb20gdGhlIHRvcCBvZiBgZWxlbWAgdG8gdGhlIGVuZCBvZiB0aGUgcGFnZSdzIGNvbnRlbnQgaXMgbGVzc1xuICAgICAgICAgIC8vIHRoYW4gdGhlIGhlaWdodCBvZiB0aGUgdmlld3BvcnQsIHRoZW4gYGVsZW0uc2Nyb2xsSW50b1ZpZXcoKWAgd2lsbCBhbGlnbiB0aGUgYGVsZW1gIHNvbWVcbiAgICAgICAgICAvLyB3YXkgZG93biB0aGUgcGFnZS5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIFRoaXMgaXMgb2Z0ZW4gdGhlIGNhc2UgZm9yIGVsZW1lbnRzIG5lYXIgdGhlIGJvdHRvbSBvZiB0aGUgcGFnZS5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIEluIHN1Y2ggY2FzZXMgd2UgZG8gbm90IG5lZWQgdG8gc2Nyb2xsIHRoZSB3aG9sZSBgb2Zmc2V0YCB1cCwganVzdCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuXG4gICAgICAgICAgLy8gdGhlIHRvcCBvZiB0aGUgZWxlbWVudCBhbmQgdGhlIG9mZnNldCwgd2hpY2ggaXMgZW5vdWdoIHRvIGFsaWduIHRoZSB0b3Agb2YgYGVsZW1gIGF0IHRoZVxuICAgICAgICAgIC8vIGRlc2lyZWQgcG9zaXRpb24uXG4gICAgICAgICAgdmFyIGVsZW1Ub3AgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICAgICAgICAkd2luZG93LnNjcm9sbEJ5KDAsIGVsZW1Ub3AgLSBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjcm9sbChoYXNoKSB7XG4gICAgICBoYXNoID0gaXNTdHJpbmcoaGFzaCkgPyBoYXNoIDogJGxvY2F0aW9uLmhhc2goKTtcbiAgICAgIHZhciBlbG07XG5cbiAgICAgIC8vIGVtcHR5IGhhc2gsIHNjcm9sbCB0byB0aGUgdG9wIG9mIHRoZSBwYWdlXG4gICAgICBpZiAoIWhhc2gpIHNjcm9sbFRvKG51bGwpO1xuXG4gICAgICAvLyBlbGVtZW50IHdpdGggZ2l2ZW4gaWRcbiAgICAgIGVsc2UgaWYgKChlbG0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChoYXNoKSkpIHNjcm9sbFRvKGVsbSk7XG5cbiAgICAgIC8vIGZpcnN0IGFuY2hvciB3aXRoIGdpdmVuIG5hbWUgOi1EXG4gICAgICBlbHNlIGlmICgoZWxtID0gZ2V0Rmlyc3RBbmNob3IoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoaGFzaCkpKSkgc2Nyb2xsVG8oZWxtKTtcblxuICAgICAgLy8gbm8gZWxlbWVudCBhbmQgaGFzaCA9PSAndG9wJywgc2Nyb2xsIHRvIHRoZSB0b3Agb2YgdGhlIHBhZ2VcbiAgICAgIGVsc2UgaWYgKGhhc2ggPT09ICd0b3AnKSBzY3JvbGxUbyhudWxsKTtcbiAgICB9XG5cbiAgICAvLyBkb2VzIG5vdCBzY3JvbGwgd2hlbiB1c2VyIGNsaWNrcyBvbiBhbmNob3IgbGluayB0aGF0IGlzIGN1cnJlbnRseSBvblxuICAgIC8vIChubyB1cmwgY2hhbmdlLCBubyAkbG9jYXRpb24uaGFzaCgpIGNoYW5nZSksIGJyb3dzZXIgbmF0aXZlIGRvZXMgc2Nyb2xsXG4gICAgaWYgKGF1dG9TY3JvbGxpbmdFbmFibGVkKSB7XG4gICAgICAkcm9vdFNjb3BlLiR3YXRjaChmdW5jdGlvbiBhdXRvU2Nyb2xsV2F0Y2goKSB7cmV0dXJuICRsb2NhdGlvbi5oYXNoKCk7fSxcbiAgICAgICAgZnVuY3Rpb24gYXV0b1Njcm9sbFdhdGNoQWN0aW9uKG5ld1ZhbCwgb2xkVmFsKSB7XG4gICAgICAgICAgLy8gc2tpcCB0aGUgaW5pdGlhbCBzY3JvbGwgaWYgJGxvY2F0aW9uLmhhc2ggaXMgZW1wdHlcbiAgICAgICAgICBpZiAobmV3VmFsID09PSBvbGRWYWwgJiYgbmV3VmFsID09PSAnJykgcmV0dXJuO1xuXG4gICAgICAgICAganFMaXRlRG9jdW1lbnRMb2FkZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoc2Nyb2xsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjcm9sbDtcbiAgfV07XG59XG5cbnZhciAkYW5pbWF0ZU1pbkVyciA9IG1pbkVycignJGFuaW1hdGUnKTtcbnZhciBFTEVNRU5UX05PREUgPSAxO1xudmFyIE5HX0FOSU1BVEVfQ0xBU1NOQU1FID0gJ25nLWFuaW1hdGUnO1xuXG5mdW5jdGlvbiBtZXJnZUNsYXNzZXMoYSxiKSB7XG4gIGlmICghYSAmJiAhYikgcmV0dXJuICcnO1xuICBpZiAoIWEpIHJldHVybiBiO1xuICBpZiAoIWIpIHJldHVybiBhO1xuICBpZiAoaXNBcnJheShhKSkgYSA9IGEuam9pbignICcpO1xuICBpZiAoaXNBcnJheShiKSkgYiA9IGIuam9pbignICcpO1xuICByZXR1cm4gYSArICcgJyArIGI7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RFbGVtZW50Tm9kZShlbGVtZW50KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBlbG0gPSBlbGVtZW50W2ldO1xuICAgIGlmIChlbG0ubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgcmV0dXJuIGVsbTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc3BsaXRDbGFzc2VzKGNsYXNzZXMpIHtcbiAgaWYgKGlzU3RyaW5nKGNsYXNzZXMpKSB7XG4gICAgY2xhc3NlcyA9IGNsYXNzZXMuc3BsaXQoJyAnKTtcbiAgfVxuXG4gIC8vIFVzZSBjcmVhdGVNYXAoKSB0byBwcmV2ZW50IGNsYXNzIGFzc3VtcHRpb25zIGludm9sdmluZyBwcm9wZXJ0eSBuYW1lcyBpblxuICAvLyBPYmplY3QucHJvdG90eXBlXG4gIHZhciBvYmogPSBjcmVhdGVNYXAoKTtcbiAgZm9yRWFjaChjbGFzc2VzLCBmdW5jdGlvbihrbGFzcykge1xuICAgIC8vIHNvbWV0aW1lcyB0aGUgc3BsaXQgbGVhdmVzIGVtcHR5IHN0cmluZyB2YWx1ZXNcbiAgICAvLyBpbmNhc2UgZXh0cmEgc3BhY2VzIHdlcmUgYXBwbGllZCB0byB0aGUgb3B0aW9uc1xuICAgIGlmIChrbGFzcy5sZW5ndGgpIHtcbiAgICAgIG9ialtrbGFzc10gPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvYmo7XG59XG5cbi8vIGlmIGFueSBvdGhlciB0eXBlIG9mIG9wdGlvbnMgdmFsdWUgYmVzaWRlcyBhbiBPYmplY3QgdmFsdWUgaXNcbi8vIHBhc3NlZCBpbnRvIHRoZSAkYW5pbWF0ZS5tZXRob2QoKSBhbmltYXRpb24gdGhlbiB0aGlzIGhlbHBlciBjb2RlXG4vLyB3aWxsIGJlIHJ1biB3aGljaCB3aWxsIGlnbm9yZSBpdC4gV2hpbGUgdGhpcyBwYXRjaCBpcyBub3QgdGhlXG4vLyBncmVhdGVzdCBzb2x1dGlvbiB0byB0aGlzLCBhIGxvdCBvZiBleGlzdGluZyBwbHVnaW5zIGRlcGVuZCBvblxuLy8gJGFuaW1hdGUgdG8gZWl0aGVyIGNhbGwgdGhlIGNhbGxiYWNrICg8IDEuMikgb3IgcmV0dXJuIGEgcHJvbWlzZVxuLy8gdGhhdCBjYW4gYmUgY2hhbmdlZC4gVGhpcyBoZWxwZXIgZnVuY3Rpb24gZW5zdXJlcyB0aGF0IHRoZSBvcHRpb25zXG4vLyBhcmUgd2lwZWQgY2xlYW4gaW5jYXNlIGEgY2FsbGJhY2sgZnVuY3Rpb24gaXMgcHJvdmlkZWQuXG5mdW5jdGlvbiBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucykge1xuICByZXR1cm4gaXNPYmplY3Qob3B0aW9ucylcbiAgICAgID8gb3B0aW9uc1xuICAgICAgOiB7fTtcbn1cblxudmFyICQkQ29yZUFuaW1hdGVSdW5uZXJQcm92aWRlciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLiRnZXQgPSBbJyRxJywgJyQkckFGJywgZnVuY3Rpb24oJHEsICQkckFGKSB7XG4gICAgZnVuY3Rpb24gQW5pbWF0ZVJ1bm5lcigpIHt9XG4gICAgQW5pbWF0ZVJ1bm5lci5hbGwgPSBub29wO1xuICAgIEFuaW1hdGVSdW5uZXIuY2hhaW4gPSBub29wO1xuICAgIEFuaW1hdGVSdW5uZXIucHJvdG90eXBlID0ge1xuICAgICAgZW5kOiBub29wLFxuICAgICAgY2FuY2VsOiBub29wLFxuICAgICAgcmVzdW1lOiBub29wLFxuICAgICAgcGF1c2U6IG5vb3AsXG4gICAgICBjb21wbGV0ZTogbm9vcCxcbiAgICAgIHRoZW46IGZ1bmN0aW9uKHBhc3MsIGZhaWwpIHtcbiAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgICAgICAkJHJBRihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSkudGhlbihwYXNzLCBmYWlsKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBbmltYXRlUnVubmVyO1xuICB9XTtcbn07XG5cbi8vIHRoaXMgaXMgcHJlZml4ZWQgd2l0aCBDb3JlIHNpbmNlIGl0IGNvbmZsaWN0cyB3aXRoXG4vLyB0aGUgYW5pbWF0ZVF1ZXVlUHJvdmlkZXIgZGVmaW5lZCBpbiBuZ0FuaW1hdGUvYW5pbWF0ZVF1ZXVlLmpzXG52YXIgJCRDb3JlQW5pbWF0ZVF1ZXVlUHJvdmlkZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBvc3REaWdlc3RRdWV1ZSA9IG5ldyBIYXNoTWFwKCk7XG4gIHZhciBwb3N0RGlnZXN0RWxlbWVudHMgPSBbXTtcblxuICB0aGlzLiRnZXQgPSBbJyQkQW5pbWF0ZVJ1bm5lcicsICckcm9vdFNjb3BlJyxcbiAgICAgICBmdW5jdGlvbigkJEFuaW1hdGVSdW5uZXIsICAgJHJvb3RTY29wZSkge1xuICAgIHJldHVybiB7XG4gICAgICBlbmFibGVkOiBub29wLFxuICAgICAgb246IG5vb3AsXG4gICAgICBvZmY6IG5vb3AsXG4gICAgICBwaW46IG5vb3AsXG5cbiAgICAgIHB1c2g6IGZ1bmN0aW9uKGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zLCBkb21PcGVyYXRpb24pIHtcbiAgICAgICAgZG9tT3BlcmF0aW9uICAgICAgICAmJiBkb21PcGVyYXRpb24oKTtcblxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgb3B0aW9ucy5mcm9tICAgICAgICAmJiBlbGVtZW50LmNzcyhvcHRpb25zLmZyb20pO1xuICAgICAgICBvcHRpb25zLnRvICAgICAgICAgICYmIGVsZW1lbnQuY3NzKG9wdGlvbnMudG8pO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmFkZENsYXNzIHx8IG9wdGlvbnMucmVtb3ZlQ2xhc3MpIHtcbiAgICAgICAgICBhZGRSZW1vdmVDbGFzc2VzUG9zdERpZ2VzdChlbGVtZW50LCBvcHRpb25zLmFkZENsYXNzLCBvcHRpb25zLnJlbW92ZUNsYXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgJCRBbmltYXRlUnVubmVyKCk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBhZGRSZW1vdmVDbGFzc2VzUG9zdERpZ2VzdChlbGVtZW50LCBhZGQsIHJlbW92ZSkge1xuICAgICAgdmFyIGRhdGEgPSBwb3N0RGlnZXN0UXVldWUuZ2V0KGVsZW1lbnQpO1xuICAgICAgdmFyIGNsYXNzVmFsO1xuXG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgcG9zdERpZ2VzdFF1ZXVlLnB1dChlbGVtZW50LCBkYXRhID0ge30pO1xuICAgICAgICBwb3N0RGlnZXN0RWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFkZCkge1xuICAgICAgICBmb3JFYWNoKGFkZC5zcGxpdCgnICcpLCBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBkYXRhW2NsYXNzTmFtZV0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW1vdmUpIHtcbiAgICAgICAgZm9yRWFjaChyZW1vdmUuc3BsaXQoJyAnKSwgZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgZGF0YVtjbGFzc05hbWVdID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBvc3REaWdlc3RFbGVtZW50cy5sZW5ndGggPiAxKSByZXR1cm47XG5cbiAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3JFYWNoKHBvc3REaWdlc3RFbGVtZW50cywgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgIHZhciBkYXRhID0gcG9zdERpZ2VzdFF1ZXVlLmdldChlbGVtZW50KTtcbiAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgdmFyIGV4aXN0aW5nID0gc3BsaXRDbGFzc2VzKGVsZW1lbnQuYXR0cignY2xhc3MnKSk7XG4gICAgICAgICAgICB2YXIgdG9BZGQgPSAnJztcbiAgICAgICAgICAgIHZhciB0b1JlbW92ZSA9ICcnO1xuICAgICAgICAgICAgZm9yRWFjaChkYXRhLCBmdW5jdGlvbihzdGF0dXMsIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICB2YXIgaGFzQ2xhc3MgPSAhIWV4aXN0aW5nW2NsYXNzTmFtZV07XG4gICAgICAgICAgICAgIGlmIChzdGF0dXMgIT09IGhhc0NsYXNzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgdG9BZGQgKz0gKHRvQWRkLmxlbmd0aCA/ICcgJyA6ICcnKSArIGNsYXNzTmFtZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdG9SZW1vdmUgKz0gKHRvUmVtb3ZlLmxlbmd0aCA/ICcgJyA6ICcnKSArIGNsYXNzTmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmb3JFYWNoKGVsZW1lbnQsIGZ1bmN0aW9uKGVsbSkge1xuICAgICAgICAgICAgICB0b0FkZCAgICAmJiBqcUxpdGVBZGRDbGFzcyhlbG0sIHRvQWRkKTtcbiAgICAgICAgICAgICAgdG9SZW1vdmUgJiYganFMaXRlUmVtb3ZlQ2xhc3MoZWxtLCB0b1JlbW92ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHBvc3REaWdlc3RRdWV1ZS5yZW1vdmUoZWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBwb3N0RGlnZXN0RWxlbWVudHMubGVuZ3RoID0gMDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV07XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGFuaW1hdGVQcm92aWRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiAkYW5pbWF0ZSB0aGF0IGRvZXNuJ3QgcGVyZm9ybSBhbnkgYW5pbWF0aW9ucywgaW5zdGVhZCBqdXN0XG4gKiBzeW5jaHJvbm91c2x5IHBlcmZvcm1zIERPTSB1cGRhdGVzIGFuZCByZXNvbHZlcyB0aGUgcmV0dXJuZWQgcnVubmVyIHByb21pc2UuXG4gKlxuICogSW4gb3JkZXIgdG8gZW5hYmxlIGFuaW1hdGlvbnMgdGhlIGBuZ0FuaW1hdGVgIG1vZHVsZSBoYXMgdG8gYmUgbG9hZGVkLlxuICpcbiAqIFRvIHNlZSB0aGUgZnVuY3Rpb25hbCBpbXBsZW1lbnRhdGlvbiBjaGVjayBvdXQgYHNyYy9uZ0FuaW1hdGUvYW5pbWF0ZS5qc2AuXG4gKi9cbnZhciAkQW5pbWF0ZVByb3ZpZGVyID0gWyckcHJvdmlkZScsIGZ1bmN0aW9uKCRwcm92aWRlKSB7XG4gIHZhciBwcm92aWRlciA9IHRoaXM7XG5cbiAgdGhpcy4kJHJlZ2lzdGVyZWRBbmltYXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGFuaW1hdGVQcm92aWRlciNyZWdpc3RlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXJzIGEgbmV3IGluamVjdGFibGUgYW5pbWF0aW9uIGZhY3RvcnkgZnVuY3Rpb24uIFRoZSBmYWN0b3J5IGZ1bmN0aW9uIHByb2R1Y2VzIHRoZVxuICAgKiBhbmltYXRpb24gb2JqZWN0IHdoaWNoIGNvbnRhaW5zIGNhbGxiYWNrIGZ1bmN0aW9ucyBmb3IgZWFjaCBldmVudCB0aGF0IGlzIGV4cGVjdGVkIHRvIGJlXG4gICAqIGFuaW1hdGVkLlxuICAgKlxuICAgKiAgICogYGV2ZW50Rm5gOiBgZnVuY3Rpb24oZWxlbWVudCwgLi4uICwgZG9uZUZ1bmN0aW9uLCBvcHRpb25zKWBcbiAgICogICBUaGUgZWxlbWVudCB0byBhbmltYXRlLCB0aGUgYGRvbmVGdW5jdGlvbmAgYW5kIHRoZSBvcHRpb25zIGZlZCBpbnRvIHRoZSBhbmltYXRpb24uIERlcGVuZGluZ1xuICAgKiAgIG9uIHRoZSB0eXBlIG9mIGFuaW1hdGlvbiBhZGRpdGlvbmFsIGFyZ3VtZW50cyB3aWxsIGJlIGluamVjdGVkIGludG8gdGhlIGFuaW1hdGlvbiBmdW5jdGlvbi4gVGhlXG4gICAqICAgbGlzdCBiZWxvdyBleHBsYWlucyB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlcyBmb3IgdGhlIGRpZmZlcmVudCBhbmltYXRpb24gbWV0aG9kczpcbiAgICpcbiAgICogICAtIHNldENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBhZGRlZENsYXNzZXMsIHJlbW92ZWRDbGFzc2VzLCBkb25lRnVuY3Rpb24sIG9wdGlvbnMpXG4gICAqICAgLSBhZGRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgYWRkZWRDbGFzc2VzLCBkb25lRnVuY3Rpb24sIG9wdGlvbnMpXG4gICAqICAgLSByZW1vdmVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgcmVtb3ZlZENsYXNzZXMsIGRvbmVGdW5jdGlvbiwgb3B0aW9ucylcbiAgICogICAtIGVudGVyLCBsZWF2ZSwgbW92ZTogZnVuY3Rpb24oZWxlbWVudCwgZG9uZUZ1bmN0aW9uLCBvcHRpb25zKVxuICAgKiAgIC0gYW5pbWF0ZTogZnVuY3Rpb24oZWxlbWVudCwgZnJvbVN0eWxlcywgdG9TdHlsZXMsIGRvbmVGdW5jdGlvbiwgb3B0aW9ucylcbiAgICpcbiAgICogICBNYWtlIHN1cmUgdG8gdHJpZ2dlciB0aGUgYGRvbmVGdW5jdGlvbmAgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGZ1bGx5IGNvbXBsZXRlLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgIHJldHVybiB7XG4gICAqICAgICAvL2VudGVyLCBsZWF2ZSwgbW92ZSBzaWduYXR1cmVcbiAgICogICAgIGV2ZW50Rm4gOiBmdW5jdGlvbihlbGVtZW50LCBkb25lLCBvcHRpb25zKSB7XG4gICAqICAgICAgIC8vY29kZSB0byBydW4gdGhlIGFuaW1hdGlvblxuICAgKiAgICAgICAvL29uY2UgY29tcGxldGUsIHRoZW4gcnVuIGRvbmUoKVxuICAgKiAgICAgICByZXR1cm4gZnVuY3Rpb24gZW5kRnVuY3Rpb24od2FzQ2FuY2VsbGVkKSB7XG4gICAqICAgICAgICAgLy9jb2RlIHRvIGNhbmNlbCB0aGUgYW5pbWF0aW9uXG4gICAqICAgICAgIH1cbiAgICogICAgIH1cbiAgICogICB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgYW5pbWF0aW9uICh0aGlzIGlzIHdoYXQgdGhlIGNsYXNzLWJhc2VkIENTUyB2YWx1ZSB3aWxsIGJlIGNvbXBhcmVkIHRvKS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmFjdG9yeSBUaGUgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgdG8gcmV0dXJuIHRoZSBhbmltYXRpb25cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuXG4gICAqL1xuICB0aGlzLnJlZ2lzdGVyID0gZnVuY3Rpb24obmFtZSwgZmFjdG9yeSkge1xuICAgIGlmIChuYW1lICYmIG5hbWUuY2hhckF0KDApICE9PSAnLicpIHtcbiAgICAgIHRocm93ICRhbmltYXRlTWluRXJyKCdub3Rjc2VsJywgXCJFeHBlY3RpbmcgY2xhc3Mgc2VsZWN0b3Igc3RhcnRpbmcgd2l0aCAnLicgZ290ICd7MH0nLlwiLCBuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIga2V5ID0gbmFtZSArICctYW5pbWF0aW9uJztcbiAgICBwcm92aWRlci4kJHJlZ2lzdGVyZWRBbmltYXRpb25zW25hbWUuc3Vic3RyKDEpXSA9IGtleTtcbiAgICAkcHJvdmlkZS5mYWN0b3J5KGtleSwgZmFjdG9yeSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGFuaW1hdGVQcm92aWRlciNjbGFzc05hbWVGaWx0ZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgYW5kL29yIHJldHVybnMgdGhlIENTUyBjbGFzcyByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyBjaGVja2VkIHdoZW4gcGVyZm9ybWluZ1xuICAgKiBhbiBhbmltYXRpb24uIFVwb24gYm9vdHN0cmFwIHRoZSBjbGFzc05hbWVGaWx0ZXIgdmFsdWUgaXMgbm90IHNldCBhdCBhbGwgYW5kIHdpbGxcbiAgICogdGhlcmVmb3JlIGVuYWJsZSAkYW5pbWF0ZSB0byBhdHRlbXB0IHRvIHBlcmZvcm0gYW4gYW5pbWF0aW9uIG9uIGFueSBlbGVtZW50IHRoYXQgaXMgdHJpZ2dlcmVkLlxuICAgKiBXaGVuIHNldHRpbmcgdGhlIGBjbGFzc05hbWVGaWx0ZXJgIHZhbHVlLCBhbmltYXRpb25zIHdpbGwgb25seSBiZSBwZXJmb3JtZWQgb24gZWxlbWVudHNcbiAgICogdGhhdCBzdWNjZXNzZnVsbHkgbWF0Y2ggdGhlIGZpbHRlciBleHByZXNzaW9uLiBUaGlzIGluIHR1cm4gY2FuIGJvb3N0IHBlcmZvcm1hbmNlXG4gICAqIGZvciBsb3ctcG93ZXJlZCBkZXZpY2VzIGFzIHdlbGwgYXMgYXBwbGljYXRpb25zIGNvbnRhaW5pbmcgYSBsb3Qgb2Ygc3RydWN0dXJhbCBvcGVyYXRpb25zLlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IGV4cHJlc3Npb24gVGhlIGNsYXNzTmFtZSBleHByZXNzaW9uIHdoaWNoIHdpbGwgYmUgY2hlY2tlZCBhZ2FpbnN0IGFsbCBhbmltYXRpb25zXG4gICAqIEByZXR1cm4ge1JlZ0V4cH0gVGhlIGN1cnJlbnQgQ1NTIGNsYXNzTmFtZSBleHByZXNzaW9uIHZhbHVlLiBJZiBudWxsIHRoZW4gdGhlcmUgaXMgbm8gZXhwcmVzc2lvbiB2YWx1ZVxuICAgKi9cbiAgdGhpcy5jbGFzc05hbWVGaWx0ZXIgPSBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHRoaXMuJCRjbGFzc05hbWVGaWx0ZXIgPSAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIFJlZ0V4cCkgPyBleHByZXNzaW9uIDogbnVsbDtcbiAgICAgIGlmICh0aGlzLiQkY2xhc3NOYW1lRmlsdGVyKSB7XG4gICAgICAgIHZhciByZXNlcnZlZFJlZ2V4ID0gbmV3IFJlZ0V4cChcIihcXFxccyt8XFxcXC8pXCIgKyBOR19BTklNQVRFX0NMQVNTTkFNRSArIFwiKFxcXFxzK3xcXFxcLylcIik7XG4gICAgICAgIGlmIChyZXNlcnZlZFJlZ2V4LnRlc3QodGhpcy4kJGNsYXNzTmFtZUZpbHRlci50b1N0cmluZygpKSkge1xuICAgICAgICAgIHRocm93ICRhbmltYXRlTWluRXJyKCdub25nY2xzJywnJGFuaW1hdGVQcm92aWRlci5jbGFzc05hbWVGaWx0ZXIocmVnZXgpIHByb2hpYml0cyBhY2NlcHRpbmcgYSByZWdleCB2YWx1ZSB3aGljaCBtYXRjaGVzL2NvbnRhaW5zIHRoZSBcInswfVwiIENTUyBjbGFzcy4nLCBOR19BTklNQVRFX0NMQVNTTkFNRSk7XG5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kJGNsYXNzTmFtZUZpbHRlcjtcbiAgfTtcblxuICB0aGlzLiRnZXQgPSBbJyQkYW5pbWF0ZVF1ZXVlJywgZnVuY3Rpb24oJCRhbmltYXRlUXVldWUpIHtcbiAgICBmdW5jdGlvbiBkb21JbnNlcnQoZWxlbWVudCwgcGFyZW50RWxlbWVudCwgYWZ0ZXJFbGVtZW50KSB7XG4gICAgICAvLyBpZiBmb3Igc29tZSByZWFzb24gdGhlIHByZXZpb3VzIGVsZW1lbnQgd2FzIHJlbW92ZWRcbiAgICAgIC8vIGZyb20gdGhlIGRvbSBzb21ldGltZSBiZWZvcmUgdGhpcyBjb2RlIHJ1bnMgdGhlbiBsZXQnc1xuICAgICAgLy8ganVzdCBzdGljayB0byB1c2luZyB0aGUgcGFyZW50IGVsZW1lbnQgYXMgdGhlIGFuY2hvclxuICAgICAgaWYgKGFmdGVyRWxlbWVudCkge1xuICAgICAgICB2YXIgYWZ0ZXJOb2RlID0gZXh0cmFjdEVsZW1lbnROb2RlKGFmdGVyRWxlbWVudCk7XG4gICAgICAgIGlmIChhZnRlck5vZGUgJiYgIWFmdGVyTm9kZS5wYXJlbnROb2RlICYmICFhZnRlck5vZGUucHJldmlvdXNFbGVtZW50U2libGluZykge1xuICAgICAgICAgIGFmdGVyRWxlbWVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFmdGVyRWxlbWVudCA/IGFmdGVyRWxlbWVudC5hZnRlcihlbGVtZW50KSA6IHBhcmVudEVsZW1lbnQucHJlcGVuZChlbGVtZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBuYW1lICRhbmltYXRlXG4gICAgICogQGRlc2NyaXB0aW9uIFRoZSAkYW5pbWF0ZSBzZXJ2aWNlIGV4cG9zZXMgYSBzZXJpZXMgb2YgRE9NIHV0aWxpdHkgbWV0aG9kcyB0aGF0IHByb3ZpZGUgc3VwcG9ydFxuICAgICAqIGZvciBhbmltYXRpb24gaG9va3MuIFRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIHRoZSBhcHBsaWNhdGlvbiBvZiBET00gb3BlcmF0aW9ucywgaG93ZXZlcixcbiAgICAgKiB3aGVuIGFuIGFuaW1hdGlvbiBpcyBkZXRlY3RlZCAoYW5kIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQpLCAkYW5pbWF0ZSB3aWxsIGRvIHRoZSBoZWF2eSBsaWZ0aW5nXG4gICAgICogdG8gZW5zdXJlIHRoYXQgYW5pbWF0aW9uIHJ1bnMgd2l0aCB0aGUgdHJpZ2dlcmVkIERPTSBvcGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0ICRhbmltYXRlIGRvZXNuJ3QgdHJpZ2dlciBhbiBhbmltYXRpb25zLiBUaGlzIGlzIGJlY2F1c2UgdGhlIGBuZ0FuaW1hdGVgIG1vZHVsZSBpc24ndFxuICAgICAqIGluY2x1ZGVkIGFuZCBvbmx5IHdoZW4gaXQgaXMgYWN0aXZlIHRoZW4gdGhlIGFuaW1hdGlvbiBob29rcyB0aGF0IGAkYW5pbWF0ZWAgdHJpZ2dlcnMgd2lsbCBiZVxuICAgICAqIGZ1bmN0aW9uYWwuIE9uY2UgYWN0aXZlIHRoZW4gYWxsIHN0cnVjdHVyYWwgYG5nLWAgZGlyZWN0aXZlcyB3aWxsIHRyaWdnZXIgYW5pbWF0aW9ucyBhcyB0aGV5IHBlcmZvcm1cbiAgICAgKiB0aGVpciBET00tcmVsYXRlZCBvcGVyYXRpb25zIChlbnRlciwgbGVhdmUgYW5kIG1vdmUpLiBPdGhlciBkaXJlY3RpdmVzIHN1Y2ggYXMgYG5nQ2xhc3NgLFxuICAgICAqIGBuZ1Nob3dgLCBgbmdIaWRlYCBhbmQgYG5nTWVzc2FnZXNgIGFsc28gcHJvdmlkZSBzdXBwb3J0IGZvciBhbmltYXRpb25zLlxuICAgICAqXG4gICAgICogSXQgaXMgcmVjb21tZW5kZWQgdGhhdCB0aGVgJGFuaW1hdGVgIHNlcnZpY2UgaXMgYWx3YXlzIHVzZWQgd2hlbiBleGVjdXRpbmcgRE9NLXJlbGF0ZWQgcHJvY2VkdXJlcyB3aXRoaW4gZGlyZWN0aXZlcy5cbiAgICAgKlxuICAgICAqIFRvIGxlYXJuIG1vcmUgYWJvdXQgZW5hYmxpbmcgYW5pbWF0aW9uIHN1cHBvcnQsIGNsaWNrIGhlcmUgdG8gdmlzaXQgdGhlXG4gICAgICoge0BsaW5rIG5nQW5pbWF0ZSBuZ0FuaW1hdGUgbW9kdWxlIHBhZ2V9LlxuICAgICAqL1xuICAgIHJldHVybiB7XG4gICAgICAvLyB3ZSBkb24ndCBjYWxsIGl0IGRpcmVjdGx5IHNpbmNlIG5vbi1leGlzdGFudCBhcmd1bWVudHMgbWF5XG4gICAgICAvLyBiZSBpbnRlcnByZXRlZCBhcyBudWxsIHdpdGhpbiB0aGUgc3ViIGVuYWJsZWQgZnVuY3Rpb25cblxuICAgICAgLyoqXG4gICAgICAgKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjb25cbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gU2V0cyB1cCBhbiBldmVudCBsaXN0ZW5lciB0byBmaXJlIHdoZW5ldmVyIHRoZSBhbmltYXRpb24gZXZlbnQgKGVudGVyLCBsZWF2ZSwgbW92ZSwgZXRjLi4uKVxuICAgICAgICogICAgaGFzIGZpcmVkIG9uIHRoZSBnaXZlbiBlbGVtZW50IG9yIGFtb25nIGFueSBvZiBpdHMgY2hpbGRyZW4uIE9uY2UgdGhlIGxpc3RlbmVyIGlzIGZpcmVkLCB0aGUgcHJvdmlkZWQgY2FsbGJhY2tcbiAgICAgICAqICAgIGlzIGZpcmVkIHdpdGggdGhlIGZvbGxvd2luZyBwYXJhbXM6XG4gICAgICAgKlxuICAgICAgICogYGBganNcbiAgICAgICAqICRhbmltYXRlLm9uKCdlbnRlcicsIGNvbnRhaW5lcixcbiAgICAgICAqICAgIGZ1bmN0aW9uIGNhbGxiYWNrKGVsZW1lbnQsIHBoYXNlKSB7XG4gICAgICAgKiAgICAgIC8vIGNvb2wgd2UgZGV0ZWN0ZWQgYW4gZW50ZXIgYW5pbWF0aW9uIHdpdGhpbiB0aGUgY29udGFpbmVyXG4gICAgICAgKiAgICB9XG4gICAgICAgKiApO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IHRoZSBhbmltYXRpb24gZXZlbnQgdGhhdCB3aWxsIGJlIGNhcHR1cmVkIChlLmcuIGVudGVyLCBsZWF2ZSwgbW92ZSwgYWRkQ2xhc3MsIHJlbW92ZUNsYXNzLCBldGMuLi4pXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGNvbnRhaW5lciB0aGUgY29udGFpbmVyIGVsZW1lbnQgdGhhdCB3aWxsIGNhcHR1cmUgZWFjaCBvZiB0aGUgYW5pbWF0aW9uIGV2ZW50cyB0aGF0IGFyZSBmaXJlZCBvbiBpdHNlbGZcbiAgICAgICAqICAgICBhcyB3ZWxsIGFzIGFtb25nIGl0cyBjaGlsZHJlblxuICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBmaXJlZCB3aGVuIHRoZSBsaXN0ZW5lciBpcyB0cmlnZ2VyZWRcbiAgICAgICAqXG4gICAgICAgKiBUaGUgYXJndW1lbnRzIHByZXNlbnQgaW4gdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGFyZTpcbiAgICAgICAqICogYGVsZW1lbnRgIC0gVGhlIGNhcHR1cmVkIERPTSBlbGVtZW50IHRoYXQgdGhlIGFuaW1hdGlvbiB3YXMgZmlyZWQgb24uXG4gICAgICAgKiAqIGBwaGFzZWAgLSBUaGUgcGhhc2Ugb2YgdGhlIGFuaW1hdGlvbi4gVGhlIHR3byBwb3NzaWJsZSBwaGFzZXMgYXJlICoqc3RhcnQqKiAod2hlbiB0aGUgYW5pbWF0aW9uIHN0YXJ0cykgYW5kICoqY2xvc2UqKiAod2hlbiBpdCBlbmRzKS5cbiAgICAgICAqL1xuICAgICAgb246ICQkYW5pbWF0ZVF1ZXVlLm9uLFxuXG4gICAgICAvKipcbiAgICAgICAqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNvZmZcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gRGVyZWdpc3RlcnMgYW4gZXZlbnQgbGlzdGVuZXIgYmFzZWQgb24gdGhlIGV2ZW50IHdoaWNoIGhhcyBiZWVuIGFzc29jaWF0ZWQgd2l0aCB0aGUgcHJvdmlkZWQgZWxlbWVudC4gVGhpcyBtZXRob2RcbiAgICAgICAqIGNhbiBiZSB1c2VkIGluIHRocmVlIGRpZmZlcmVudCB3YXlzIGRlcGVuZGluZyBvbiB0aGUgYXJndW1lbnRzOlxuICAgICAgICpcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiAvLyByZW1vdmUgYWxsIHRoZSBhbmltYXRpb24gZXZlbnQgbGlzdGVuZXJzIGxpc3RlbmluZyBmb3IgYGVudGVyYFxuICAgICAgICogJGFuaW1hdGUub2ZmKCdlbnRlcicpO1xuICAgICAgICpcbiAgICAgICAqIC8vIHJlbW92ZSBhbGwgdGhlIGFuaW1hdGlvbiBldmVudCBsaXN0ZW5lcnMgbGlzdGVuaW5nIGZvciBgZW50ZXJgIG9uIHRoZSBnaXZlbiBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW5cbiAgICAgICAqICRhbmltYXRlLm9mZignZW50ZXInLCBjb250YWluZXIpO1xuICAgICAgICpcbiAgICAgICAqIC8vIHJlbW92ZSB0aGUgZXZlbnQgbGlzdGVuZXIgZnVuY3Rpb24gcHJvdmlkZWQgYnkgYGxpc3RlbmVyRm5gIHRoYXQgaXMgc2V0XG4gICAgICAgKiAvLyB0byBsaXN0ZW4gZm9yIGBlbnRlcmAgb24gdGhlIGdpdmVuIGBlbGVtZW50YCBhcyB3ZWxsIGFzIGl0cyBjaGlsZHJlblxuICAgICAgICogJGFuaW1hdGUub2ZmKCdlbnRlcicsIGNvbnRhaW5lciwgY2FsbGJhY2spO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IHRoZSBhbmltYXRpb24gZXZlbnQgKGUuZy4gZW50ZXIsIGxlYXZlLCBtb3ZlLCBhZGRDbGFzcywgcmVtb3ZlQ2xhc3MsIGV0Yy4uLilcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19IGNvbnRhaW5lciB0aGUgY29udGFpbmVyIGVsZW1lbnQgdGhlIGV2ZW50IGxpc3RlbmVyIHdhcyBwbGFjZWQgb25cbiAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBjYWxsYmFjayB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3YXMgcmVnaXN0ZXJlZCBhcyB0aGUgbGlzdGVuZXJcbiAgICAgICAqL1xuICAgICAgb2ZmOiAkJGFuaW1hdGVRdWV1ZS5vZmYsXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjcGluXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIEFzc29jaWF0ZXMgdGhlIHByb3ZpZGVkIGVsZW1lbnQgd2l0aCBhIGhvc3QgcGFyZW50IGVsZW1lbnQgdG8gYWxsb3cgdGhlIGVsZW1lbnQgdG8gYmUgYW5pbWF0ZWQgZXZlbiBpZiBpdCBleGlzdHNcbiAgICAgICAqICAgIG91dHNpZGUgb2YgdGhlIERPTSBzdHJ1Y3R1cmUgb2YgdGhlIEFuZ3VsYXIgYXBwbGljYXRpb24uIEJ5IGRvaW5nIHNvLCBhbnkgYW5pbWF0aW9uIHRyaWdnZXJlZCB2aWEgYCRhbmltYXRlYCBjYW4gYmUgaXNzdWVkIG9uIHRoZVxuICAgICAgICogICAgZWxlbWVudCBkZXNwaXRlIGJlaW5nIG91dHNpZGUgdGhlIHJlYWxtIG9mIHRoZSBhcHBsaWNhdGlvbiBvciB3aXRoaW4gYW5vdGhlciBhcHBsaWNhdGlvbi4gU2F5IGZvciBleGFtcGxlIGlmIHRoZSBhcHBsaWNhdGlvblxuICAgICAgICogICAgd2FzIGJvb3RzdHJhcHBlZCBvbiBhbiBlbGVtZW50IHRoYXQgaXMgc29tZXdoZXJlIGluc2lkZSBvZiB0aGUgYDxib2R5PmAgdGFnLCBidXQgd2Ugd2FudGVkIHRvIGFsbG93IGZvciBhbiBlbGVtZW50IHRvIGJlIHNpdHVhdGVkXG4gICAgICAgKiAgICBhcyBhIGRpcmVjdCBjaGlsZCBvZiBgZG9jdW1lbnQuYm9keWAsIHRoZW4gdGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkgcGlubmluZyB0aGUgZWxlbWVudCB2aWEgYCRhbmltYXRlLnBpbihlbGVtZW50KWAuIEtlZXAgaW4gbWluZFxuICAgICAgICogICAgdGhhdCBjYWxsaW5nIGAkYW5pbWF0ZS5waW4oZWxlbWVudCwgcGFyZW50RWxlbWVudClgIHdpbGwgbm90IGFjdHVhbGx5IGluc2VydCBpbnRvIHRoZSBET00gYW55d2hlcmU7IGl0IHdpbGwganVzdCBjcmVhdGUgdGhlIGFzc29jaWF0aW9uLlxuICAgICAgICpcbiAgICAgICAqICAgIE5vdGUgdGhhdCB0aGlzIGZlYXR1cmUgaXMgb25seSBhY3RpdmUgd2hlbiB0aGUgYG5nQW5pbWF0ZWAgbW9kdWxlIGlzIHVzZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBleHRlcm5hbCBlbGVtZW50IHRoYXQgd2lsbCBiZSBwaW5uZWRcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcGFyZW50RWxlbWVudCB0aGUgaG9zdCBwYXJlbnQgZWxlbWVudCB0aGF0IHdpbGwgYmUgYXNzb2NpYXRlZCB3aXRoIHRoZSBleHRlcm5hbCBlbGVtZW50XG4gICAgICAgKi9cbiAgICAgIHBpbjogJCRhbmltYXRlUXVldWUucGluLFxuXG4gICAgICAvKipcbiAgICAgICAqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNlbmFibGVkXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIFVzZWQgdG8gZ2V0IGFuZCBzZXQgd2hldGhlciBhbmltYXRpb25zIGFyZSBlbmFibGVkIG9yIG5vdCBvbiB0aGUgZW50aXJlIGFwcGxpY2F0aW9uIG9yIG9uIGFuIGVsZW1lbnQgYW5kIGl0cyBjaGlsZHJlbi4gVGhpc1xuICAgICAgICogZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCBpbiBmb3VyIHdheXM6XG4gICAgICAgKlxuICAgICAgICogYGBganNcbiAgICAgICAqIC8vIHJldHVybnMgdHJ1ZSBvciBmYWxzZVxuICAgICAgICogJGFuaW1hdGUuZW5hYmxlZCgpO1xuICAgICAgICpcbiAgICAgICAqIC8vIGNoYW5nZXMgdGhlIGVuYWJsZWQgc3RhdGUgZm9yIGFsbCBhbmltYXRpb25zXG4gICAgICAgKiAkYW5pbWF0ZS5lbmFibGVkKGZhbHNlKTtcbiAgICAgICAqICRhbmltYXRlLmVuYWJsZWQodHJ1ZSk7XG4gICAgICAgKlxuICAgICAgICogLy8gcmV0dXJucyB0cnVlIG9yIGZhbHNlIGlmIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQgZm9yIGFuIGVsZW1lbnRcbiAgICAgICAqICRhbmltYXRlLmVuYWJsZWQoZWxlbWVudCk7XG4gICAgICAgKlxuICAgICAgICogLy8gY2hhbmdlcyB0aGUgZW5hYmxlZCBzdGF0ZSBmb3IgYW4gZWxlbWVudCBhbmQgaXRzIGNoaWxkcmVuXG4gICAgICAgKiAkYW5pbWF0ZS5lbmFibGVkKGVsZW1lbnQsIHRydWUpO1xuICAgICAgICogJGFuaW1hdGUuZW5hYmxlZChlbGVtZW50LCBmYWxzZSk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnQ9fSBlbGVtZW50IHRoZSBlbGVtZW50IHRoYXQgd2lsbCBiZSBjb25zaWRlcmVkIGZvciBjaGVja2luZy9zZXR0aW5nIHRoZSBlbmFibGVkIHN0YXRlXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBlbmFibGVkIHdoZXRoZXIgb3Igbm90IHRoZSBhbmltYXRpb25zIHdpbGwgYmUgZW5hYmxlZCBmb3IgdGhlIGVsZW1lbnRcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIG9yIG5vdCBhbmltYXRpb25zIGFyZSBlbmFibGVkXG4gICAgICAgKi9cbiAgICAgIGVuYWJsZWQ6ICQkYW5pbWF0ZVF1ZXVlLmVuYWJsZWQsXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjY2FuY2VsXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIENhbmNlbHMgdGhlIHByb3ZpZGVkIGFuaW1hdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1Byb21pc2V9IGFuaW1hdGlvblByb21pc2UgVGhlIGFuaW1hdGlvbiBwcm9taXNlIHRoYXQgaXMgcmV0dXJuZWQgd2hlbiBhbiBhbmltYXRpb24gaXMgc3RhcnRlZC5cbiAgICAgICAqL1xuICAgICAgY2FuY2VsOiBmdW5jdGlvbihydW5uZXIpIHtcbiAgICAgICAgcnVubmVyLmVuZCAmJiBydW5uZXIuZW5kKCk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNlbnRlclxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqIEBkZXNjcmlwdGlvbiBJbnNlcnRzIHRoZSBlbGVtZW50IGludG8gdGhlIERPTSBlaXRoZXIgYWZ0ZXIgdGhlIGBhZnRlcmAgZWxlbWVudCAoaWYgcHJvdmlkZWQpIG9yXG4gICAgICAgKiAgIGFzIHRoZSBmaXJzdCBjaGlsZCB3aXRoaW4gdGhlIGBwYXJlbnRgIGVsZW1lbnQgYW5kIHRoZW4gdHJpZ2dlcnMgYW4gYW5pbWF0aW9uLlxuICAgICAgICogICBBIHByb21pc2UgaXMgcmV0dXJuZWQgdGhhdCB3aWxsIGJlIHJlc29sdmVkIGR1cmluZyB0aGUgbmV4dCBkaWdlc3Qgb25jZSB0aGUgYW5pbWF0aW9uXG4gICAgICAgKiAgIGhhcyBjb21wbGV0ZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgYmUgaW5zZXJ0ZWQgaW50byB0aGUgRE9NXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudCB0aGUgcGFyZW50IGVsZW1lbnQgd2hpY2ggd2lsbCBhcHBlbmQgdGhlIGVsZW1lbnQgYXNcbiAgICAgICAqICAgYSBjaGlsZCAoc28gbG9uZyBhcyB0aGUgYWZ0ZXIgZWxlbWVudCBpcyBub3QgcHJlc2VudClcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19IGFmdGVyIHRoZSBzaWJsaW5nIGVsZW1lbnQgYWZ0ZXIgd2hpY2ggdGhlIGVsZW1lbnQgd2lsbCBiZSBhcHBlbmRlZFxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucy9zdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAqL1xuICAgICAgZW50ZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIHBhcmVudCwgYWZ0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50ICYmIGpxTGl0ZShwYXJlbnQpO1xuICAgICAgICBhZnRlciA9IGFmdGVyICYmIGpxTGl0ZShhZnRlcik7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudCB8fCBhZnRlci5wYXJlbnQoKTtcbiAgICAgICAgZG9tSW5zZXJ0KGVsZW1lbnQsIHBhcmVudCwgYWZ0ZXIpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnZW50ZXInLCBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucykpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjbW92ZVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqIEBkZXNjcmlwdGlvbiBJbnNlcnRzIChtb3ZlcykgdGhlIGVsZW1lbnQgaW50byBpdHMgbmV3IHBvc2l0aW9uIGluIHRoZSBET00gZWl0aGVyIGFmdGVyXG4gICAgICAgKiAgIHRoZSBgYWZ0ZXJgIGVsZW1lbnQgKGlmIHByb3ZpZGVkKSBvciBhcyB0aGUgZmlyc3QgY2hpbGQgd2l0aGluIHRoZSBgcGFyZW50YCBlbGVtZW50XG4gICAgICAgKiAgIGFuZCB0aGVuIHRyaWdnZXJzIGFuIGFuaW1hdGlvbi4gQSBwcm9taXNlIGlzIHJldHVybmVkIHRoYXQgd2lsbCBiZSByZXNvbHZlZFxuICAgICAgICogICBkdXJpbmcgdGhlIG5leHQgZGlnZXN0IG9uY2UgdGhlIGFuaW1hdGlvbiBoYXMgY29tcGxldGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB3aWxsIGJlIG1vdmVkIGludG8gdGhlIG5ldyBET00gcG9zaXRpb25cbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcGFyZW50IHRoZSBwYXJlbnQgZWxlbWVudCB3aGljaCB3aWxsIGFwcGVuZCB0aGUgZWxlbWVudCBhc1xuICAgICAgICogICBhIGNoaWxkIChzbyBsb25nIGFzIHRoZSBhZnRlciBlbGVtZW50IGlzIG5vdCBwcmVzZW50KVxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50PX0gYWZ0ZXIgdGhlIHNpYmxpbmcgZWxlbWVudCBhZnRlciB3aGljaCB0aGUgZWxlbWVudCB3aWxsIGJlIGFwcGVuZGVkXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICBtb3ZlOiBmdW5jdGlvbihlbGVtZW50LCBwYXJlbnQsIGFmdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudCAmJiBqcUxpdGUocGFyZW50KTtcbiAgICAgICAgYWZ0ZXIgPSBhZnRlciAmJiBqcUxpdGUoYWZ0ZXIpO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQgfHwgYWZ0ZXIucGFyZW50KCk7XG4gICAgICAgIGRvbUluc2VydChlbGVtZW50LCBwYXJlbnQsIGFmdGVyKTtcbiAgICAgICAgcmV0dXJuICQkYW5pbWF0ZVF1ZXVlLnB1c2goZWxlbWVudCwgJ21vdmUnLCBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucykpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNsZWF2ZVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqIEBkZXNjcmlwdGlvbiBUcmlnZ2VycyBhbiBhbmltYXRpb24gYW5kIHRoZW4gcmVtb3ZlcyB0aGUgZWxlbWVudCBmcm9tIHRoZSBET00uXG4gICAgICAgKiBXaGVuIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgYSBwcm9taXNlIGlzIHJldHVybmVkIHRoYXQgd2lsbCBiZSByZXNvbHZlZCBkdXJpbmcgdGhlIG5leHRcbiAgICAgICAqIGRpZ2VzdCBvbmNlIHRoZSBhbmltYXRpb24gaGFzIGNvbXBsZXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIERPTVxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucy9zdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAqL1xuICAgICAgbGVhdmU6IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuICQkYW5pbWF0ZVF1ZXVlLnB1c2goZWxlbWVudCwgJ2xlYXZlJywgcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjYWRkQ2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uIFRyaWdnZXJzIGFuIGFkZENsYXNzIGFuaW1hdGlvbiBzdXJyb3VuZGluZyB0aGUgYWRkaXRpb24gb2YgdGhlIHByb3ZpZGVkIENTUyBjbGFzcyhlcykuIFVwb25cbiAgICAgICAqICAgZXhlY3V0aW9uLCB0aGUgYWRkQ2xhc3Mgb3BlcmF0aW9uIHdpbGwgb25seSBiZSBoYW5kbGVkIGFmdGVyIHRoZSBuZXh0IGRpZ2VzdCBhbmQgaXQgd2lsbCBub3QgdHJpZ2dlciBhblxuICAgICAgICogICBhbmltYXRpb24gaWYgZWxlbWVudCBhbHJlYWR5IGNvbnRhaW5zIHRoZSBDU1MgY2xhc3Mgb3IgaWYgdGhlIGNsYXNzIGlzIHJlbW92ZWQgYXQgYSBsYXRlciBzdGVwLlxuICAgICAgICogICBOb3RlIHRoYXQgY2xhc3MtYmFzZWQgYW5pbWF0aW9ucyBhcmUgdHJlYXRlZCBkaWZmZXJlbnRseSBjb21wYXJlZCB0byBzdHJ1Y3R1cmFsIGFuaW1hdGlvbnNcbiAgICAgICAqICAgKGxpa2UgZW50ZXIsIG1vdmUgYW5kIGxlYXZlKSBzaW5jZSB0aGUgQ1NTIGNsYXNzZXMgbWF5IGJlIGFkZGVkL3JlbW92ZWQgYXQgZGlmZmVyZW50IHBvaW50c1xuICAgICAgICogICBkZXBlbmRpbmcgaWYgQ1NTIG9yIEphdmFTY3JpcHQgYW5pbWF0aW9ucyBhcmUgdXNlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggdGhlIENTUyBjbGFzc2VzIHdpbGwgYmUgYXBwbGllZCB0b1xuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSB0aGUgQ1NTIGNsYXNzKGVzKSB0aGF0IHdpbGwgYmUgYWRkZWQgKG11bHRpcGxlIGNsYXNzZXMgYXJlIHNlcGFyYXRlZCB2aWEgc3BhY2VzKVxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucy9zdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAqL1xuICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBvcHRpb25zLmFkZENsYXNzID0gbWVyZ2VDbGFzc2VzKG9wdGlvbnMuYWRkY2xhc3MsIGNsYXNzTmFtZSk7XG4gICAgICAgIHJldHVybiAkJGFuaW1hdGVRdWV1ZS5wdXNoKGVsZW1lbnQsICdhZGRDbGFzcycsIG9wdGlvbnMpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNyZW1vdmVDbGFzc1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb24gVHJpZ2dlcnMgYSByZW1vdmVDbGFzcyBhbmltYXRpb24gc3Vycm91bmRpbmcgdGhlIHJlbW92YWwgb2YgdGhlIHByb3ZpZGVkIENTUyBjbGFzcyhlcykuIFVwb25cbiAgICAgICAqICAgZXhlY3V0aW9uLCB0aGUgcmVtb3ZlQ2xhc3Mgb3BlcmF0aW9uIHdpbGwgb25seSBiZSBoYW5kbGVkIGFmdGVyIHRoZSBuZXh0IGRpZ2VzdCBhbmQgaXQgd2lsbCBub3QgdHJpZ2dlciBhblxuICAgICAgICogICBhbmltYXRpb24gaWYgZWxlbWVudCBkb2VzIG5vdCBjb250YWluIHRoZSBDU1MgY2xhc3Mgb3IgaWYgdGhlIGNsYXNzIGlzIGFkZGVkIGF0IGEgbGF0ZXIgc3RlcC5cbiAgICAgICAqICAgTm90ZSB0aGF0IGNsYXNzLWJhc2VkIGFuaW1hdGlvbnMgYXJlIHRyZWF0ZWQgZGlmZmVyZW50bHkgY29tcGFyZWQgdG8gc3RydWN0dXJhbCBhbmltYXRpb25zXG4gICAgICAgKiAgIChsaWtlIGVudGVyLCBtb3ZlIGFuZCBsZWF2ZSkgc2luY2UgdGhlIENTUyBjbGFzc2VzIG1heSBiZSBhZGRlZC9yZW1vdmVkIGF0IGRpZmZlcmVudCBwb2ludHNcbiAgICAgICAqICAgZGVwZW5kaW5nIGlmIENTUyBvciBKYXZhU2NyaXB0IGFuaW1hdGlvbnMgYXJlIHVzZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHRoZSBDU1MgY2xhc3NlcyB3aWxsIGJlIGFwcGxpZWQgdG9cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgdGhlIENTUyBjbGFzcyhlcykgdGhhdCB3aWxsIGJlIHJlbW92ZWQgKG11bHRpcGxlIGNsYXNzZXMgYXJlIHNlcGFyYXRlZCB2aWEgc3BhY2VzKVxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucy9zdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAqL1xuICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBvcHRpb25zLnJlbW92ZUNsYXNzID0gbWVyZ2VDbGFzc2VzKG9wdGlvbnMucmVtb3ZlQ2xhc3MsIGNsYXNzTmFtZSk7XG4gICAgICAgIHJldHVybiAkJGFuaW1hdGVRdWV1ZS5wdXNoKGVsZW1lbnQsICdyZW1vdmVDbGFzcycsIG9wdGlvbnMpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNzZXRDbGFzc1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb24gUGVyZm9ybXMgYm90aCB0aGUgYWRkaXRpb24gYW5kIHJlbW92YWwgb2YgYSBDU1MgY2xhc3NlcyBvbiBhbiBlbGVtZW50IGFuZCAoZHVyaW5nIHRoZSBwcm9jZXNzKVxuICAgICAgICogICAgdHJpZ2dlcnMgYW4gYW5pbWF0aW9uIHN1cnJvdW5kaW5nIHRoZSBjbGFzcyBhZGRpdGlvbi9yZW1vdmFsLiBNdWNoIGxpa2UgYCRhbmltYXRlLmFkZENsYXNzYCBhbmRcbiAgICAgICAqICAgIGAkYW5pbWF0ZS5yZW1vdmVDbGFzc2AsIGBzZXRDbGFzc2Agd2lsbCBvbmx5IGV2YWx1YXRlIHRoZSBjbGFzc2VzIGJlaW5nIGFkZGVkL3JlbW92ZWQgb25jZSBhIGRpZ2VzdCBoYXNcbiAgICAgICAqICAgIHBhc3NlZC4gTm90ZSB0aGF0IGNsYXNzLWJhc2VkIGFuaW1hdGlvbnMgYXJlIHRyZWF0ZWQgZGlmZmVyZW50bHkgY29tcGFyZWQgdG8gc3RydWN0dXJhbCBhbmltYXRpb25zXG4gICAgICAgKiAgICAobGlrZSBlbnRlciwgbW92ZSBhbmQgbGVhdmUpIHNpbmNlIHRoZSBDU1MgY2xhc3NlcyBtYXkgYmUgYWRkZWQvcmVtb3ZlZCBhdCBkaWZmZXJlbnQgcG9pbnRzXG4gICAgICAgKiAgICBkZXBlbmRpbmcgaWYgQ1NTIG9yIEphdmFTY3JpcHQgYW5pbWF0aW9ucyBhcmUgdXNlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggdGhlIENTUyBjbGFzc2VzIHdpbGwgYmUgYXBwbGllZCB0b1xuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGFkZCB0aGUgQ1NTIGNsYXNzKGVzKSB0aGF0IHdpbGwgYmUgYWRkZWQgKG11bHRpcGxlIGNsYXNzZXMgYXJlIHNlcGFyYXRlZCB2aWEgc3BhY2VzKVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHJlbW92ZSB0aGUgQ1NTIGNsYXNzKGVzKSB0aGF0IHdpbGwgYmUgcmVtb3ZlZCAobXVsdGlwbGUgY2xhc3NlcyBhcmUgc2VwYXJhdGVkIHZpYSBzcGFjZXMpXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICBzZXRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgYWRkLCByZW1vdmUsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgb3B0aW9ucy5hZGRDbGFzcyA9IG1lcmdlQ2xhc3NlcyhvcHRpb25zLmFkZENsYXNzLCBhZGQpO1xuICAgICAgICBvcHRpb25zLnJlbW92ZUNsYXNzID0gbWVyZ2VDbGFzc2VzKG9wdGlvbnMucmVtb3ZlQ2xhc3MsIHJlbW92ZSk7XG4gICAgICAgIHJldHVybiAkJGFuaW1hdGVRdWV1ZS5wdXNoKGVsZW1lbnQsICdzZXRDbGFzcycsIG9wdGlvbnMpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNhbmltYXRlXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBQZXJmb3JtcyBhbiBpbmxpbmUgYW5pbWF0aW9uIG9uIHRoZSBlbGVtZW50IHdoaWNoIGFwcGxpZXMgdGhlIHByb3ZpZGVkIHRvIGFuZCBmcm9tIENTUyBzdHlsZXMgdG8gdGhlIGVsZW1lbnQuXG4gICAgICAgKiBJZiBhbnkgZGV0ZWN0ZWQgQ1NTIHRyYW5zaXRpb24sIGtleWZyYW1lIG9yIEphdmFTY3JpcHQgbWF0Y2hlcyB0aGUgcHJvdmlkZWQgY2xhc3NOYW1lIHZhbHVlIHRoZW4gdGhlIGFuaW1hdGlvbiB3aWxsIHRha2VcbiAgICAgICAqIG9uIHRoZSBwcm92aWRlZCBzdHlsZXMuIEZvciBleGFtcGxlLCBpZiBhIHRyYW5zaXRpb24gYW5pbWF0aW9uIGlzIHNldCBmb3IgdGhlIGdpdmVuIGNsYXNzTmFtZSB0aGVuIHRoZSBwcm92aWRlZCBmcm9tIGFuZFxuICAgICAgICogdG8gc3R5bGVzIHdpbGwgYmUgYXBwbGllZCBhbG9uZ3NpZGUgdGhlIGdpdmVuIHRyYW5zaXRpb24uIElmIGEgSmF2YVNjcmlwdCBhbmltYXRpb24gaXMgZGV0ZWN0ZWQgdGhlbiB0aGUgcHJvdmlkZWQgc3R5bGVzXG4gICAgICAgKiB3aWxsIGJlIGdpdmVuIGluIGFzIGZ1bmN0aW9uIHBhcmFtdGVycyBpbnRvIHRoZSBgYW5pbWF0ZWAgbWV0aG9kIChvciBhcyBhcGFydCBvZiB0aGUgYG9wdGlvbnNgIHBhcmFtZXRlcikuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHRoZSBDU1Mgc3R5bGVzIHdpbGwgYmUgYXBwbGllZCB0b1xuICAgICAgICogQHBhcmFtIHtvYmplY3R9IGZyb20gdGhlIGZyb20gKHN0YXJ0aW5nKSBDU1Mgc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50IGFuZCBhY3Jvc3MgdGhlIGFuaW1hdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0byB0aGUgdG8gKGRlc3RpbmF0aW9uKSBDU1Mgc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50IGFuZCBhY3Jvc3MgdGhlIGFuaW1hdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gY2xhc3NOYW1lIGFuIG9wdGlvbmFsIENTUyBjbGFzcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBhbmltYXRpb24uIElmXG4gICAgICAgKiAgICB0aGlzIHZhbHVlIGlzIGxlZnQgYXMgZW1wdHkgdGhlbiBhIENTUyBjbGFzcyBvZiBgbmctaW5saW5lLWFuaW1hdGVgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cbiAgICAgICAqICAgIChOb3RlIHRoYXQgaWYgbm8gYW5pbWF0aW9uIGlzIGRldGVjdGVkIHRoZW4gdGhpcyB2YWx1ZSB3aWxsIG5vdCBiZSBhcHBwbGllZCB0byB0aGUgZWxlbWVudC4pXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICBhbmltYXRlOiBmdW5jdGlvbihlbGVtZW50LCBmcm9tLCB0bywgY2xhc3NOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMuZnJvbSA9IG9wdGlvbnMuZnJvbSA/IGV4dGVuZChvcHRpb25zLmZyb20sIGZyb20pIDogZnJvbTtcbiAgICAgICAgb3B0aW9ucy50byAgID0gb3B0aW9ucy50byAgID8gZXh0ZW5kKG9wdGlvbnMudG8sIHRvKSAgICAgOiB0bztcblxuICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUgfHwgJ25nLWlubGluZS1hbmltYXRlJztcbiAgICAgICAgb3B0aW9ucy50ZW1wQ2xhc3NlcyA9IG1lcmdlQ2xhc3NlcyhvcHRpb25zLnRlbXBDbGFzc2VzLCBjbGFzc05hbWUpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnYW5pbWF0ZScsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH07XG4gIH1dO1xufV07XG5cbmZ1bmN0aW9uICQkQXN5bmNDYWxsYmFja1Byb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyQkckFGJywgJyR0aW1lb3V0JywgZnVuY3Rpb24oJCRyQUYsICR0aW1lb3V0KSB7XG4gICAgcmV0dXJuICQkckFGLnN1cHBvcnRlZFxuICAgICAgPyBmdW5jdGlvbihmbikgeyByZXR1cm4gJCRyQUYoZm4pOyB9XG4gICAgICA6IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgIHJldHVybiAkdGltZW91dChmbiwgMCwgZmFsc2UpO1xuICAgICAgfTtcbiAgfV07XG59XG5cbi8qIGdsb2JhbCBzdHJpcEhhc2g6IHRydWUgKi9cblxuLyoqXG4gKiAhIFRoaXMgaXMgYSBwcml2YXRlIHVuZG9jdW1lbnRlZCBzZXJ2aWNlICFcbiAqXG4gKiBAbmFtZSAkYnJvd3NlclxuICogQHJlcXVpcmVzICRsb2dcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBvYmplY3QgaGFzIHR3byBnb2FsczpcbiAqXG4gKiAtIGhpZGUgYWxsIHRoZSBnbG9iYWwgc3RhdGUgaW4gdGhlIGJyb3dzZXIgY2F1c2VkIGJ5IHRoZSB3aW5kb3cgb2JqZWN0XG4gKiAtIGFic3RyYWN0IGF3YXkgYWxsIHRoZSBicm93c2VyIHNwZWNpZmljIGZlYXR1cmVzIGFuZCBpbmNvbnNpc3RlbmNpZXNcbiAqXG4gKiBGb3IgdGVzdHMgd2UgcHJvdmlkZSB7QGxpbmsgbmdNb2NrLiRicm93c2VyIG1vY2sgaW1wbGVtZW50YXRpb259IG9mIHRoZSBgJGJyb3dzZXJgXG4gKiBzZXJ2aWNlLCB3aGljaCBjYW4gYmUgdXNlZCBmb3IgY29udmVuaWVudCB0ZXN0aW5nIG9mIHRoZSBhcHBsaWNhdGlvbiB3aXRob3V0IHRoZSBpbnRlcmFjdGlvbiB3aXRoXG4gKiB0aGUgcmVhbCBicm93c2VyIGFwaXMuXG4gKi9cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHdpbmRvdyBUaGUgZ2xvYmFsIHdpbmRvdyBvYmplY3QuXG4gKiBAcGFyYW0ge29iamVjdH0gZG9jdW1lbnQgalF1ZXJ5IHdyYXBwZWQgZG9jdW1lbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gJGxvZyB3aW5kb3cuY29uc29sZSBvciBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBpbnRlcmZhY2UuXG4gKiBAcGFyYW0ge29iamVjdH0gJHNuaWZmZXIgJHNuaWZmZXIgc2VydmljZVxuICovXG5mdW5jdGlvbiBCcm93c2VyKHdpbmRvdywgZG9jdW1lbnQsICRsb2csICRzbmlmZmVyKSB7XG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIHJhd0RvY3VtZW50ID0gZG9jdW1lbnRbMF0sXG4gICAgICBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeSxcbiAgICAgIHNldFRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCxcbiAgICAgIGNsZWFyVGltZW91dCA9IHdpbmRvdy5jbGVhclRpbWVvdXQsXG4gICAgICBwZW5kaW5nRGVmZXJJZHMgPSB7fTtcblxuICBzZWxmLmlzTW9jayA9IGZhbHNlO1xuXG4gIHZhciBvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9IDA7XG4gIHZhciBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MgPSBbXTtcblxuICAvLyBUT0RPKHZvanRhKTogcmVtb3ZlIHRoaXMgdGVtcG9yYXJ5IGFwaVxuICBzZWxmLiQkY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QgPSBjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdDtcbiAgc2VsZi4kJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50ID0gZnVuY3Rpb24oKSB7IG91dHN0YW5kaW5nUmVxdWVzdENvdW50Kys7IH07XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIHRoZSBgZm5gIGZ1bmN0aW9uKHN1cHBvcnRzIGN1cnJ5aW5nKSBhbmQgZGVjcmVtZW50cyB0aGUgYG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrc2BcbiAgICogY291bnRlci4gSWYgdGhlIGNvdW50ZXIgcmVhY2hlcyAwLCBhbGwgdGhlIGBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3NgIGFyZSBleGVjdXRlZC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuLmFwcGx5KG51bGwsIHNsaWNlQXJncyhhcmd1bWVudHMsIDEpKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQtLTtcbiAgICAgIGlmIChvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9PT0gMCkge1xuICAgICAgICB3aGlsZSAob3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MucG9wKCkoKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAkbG9nLmVycm9yKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEhhc2godXJsKSB7XG4gICAgdmFyIGluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICByZXR1cm4gaW5kZXggPT09IC0xID8gJycgOiB1cmwuc3Vic3RyKGluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBOb3RlOiB0aGlzIG1ldGhvZCBpcyB1c2VkIG9ubHkgYnkgc2NlbmFyaW8gcnVubmVyXG4gICAqIFRPRE8odm9qdGEpOiBwcmVmaXggdGhpcyBtZXRob2Qgd2l0aCAkJCA/XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gY2FsbGJhY2sgRnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIG5vIG91dHN0YW5kaW5nIHJlcXVlc3RcbiAgICovXG4gIHNlbGYubm90aWZ5V2hlbk5vT3V0c3RhbmRpbmdSZXF1ZXN0cyA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgaWYgKG91dHN0YW5kaW5nUmVxdWVzdENvdW50ID09PSAwKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgfVxuICB9O1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFVSTCBBUElcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICB2YXIgY2FjaGVkU3RhdGUsIGxhc3RIaXN0b3J5U3RhdGUsXG4gICAgICBsYXN0QnJvd3NlclVybCA9IGxvY2F0aW9uLmhyZWYsXG4gICAgICBiYXNlRWxlbWVudCA9IGRvY3VtZW50LmZpbmQoJ2Jhc2UnKSxcbiAgICAgIHJlbG9hZExvY2F0aW9uID0gbnVsbDtcblxuICBjYWNoZVN0YXRlKCk7XG4gIGxhc3RIaXN0b3J5U3RhdGUgPSBjYWNoZWRTdGF0ZTtcblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjdXJsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBHRVRURVI6XG4gICAqIFdpdGhvdXQgYW55IGFyZ3VtZW50LCB0aGlzIG1ldGhvZCBqdXN0IHJldHVybnMgY3VycmVudCB2YWx1ZSBvZiBsb2NhdGlvbi5ocmVmLlxuICAgKlxuICAgKiBTRVRURVI6XG4gICAqIFdpdGggYXQgbGVhc3Qgb25lIGFyZ3VtZW50LCB0aGlzIG1ldGhvZCBzZXRzIHVybCB0byBuZXcgdmFsdWUuXG4gICAqIElmIGh0bWw1IGhpc3RvcnkgYXBpIHN1cHBvcnRlZCwgcHVzaFN0YXRlL3JlcGxhY2VTdGF0ZSBpcyB1c2VkLCBvdGhlcndpc2VcbiAgICogbG9jYXRpb24uaHJlZi9sb2NhdGlvbi5yZXBsYWNlIGlzIHVzZWQuXG4gICAqIFJldHVybnMgaXRzIG93biBpbnN0YW5jZSB0byBhbGxvdyBjaGFpbmluZ1xuICAgKlxuICAgKiBOT1RFOiB0aGlzIGFwaSBpcyBpbnRlbmRlZCBmb3IgdXNlIG9ubHkgYnkgdGhlICRsb2NhdGlvbiBzZXJ2aWNlLiBQbGVhc2UgdXNlIHRoZVxuICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uICRsb2NhdGlvbiBzZXJ2aWNlfSB0byBjaGFuZ2UgdXJsLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIE5ldyB1cmwgKHdoZW4gdXNlZCBhcyBzZXR0ZXIpXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHJlcGxhY2UgU2hvdWxkIG5ldyB1cmwgcmVwbGFjZSBjdXJyZW50IGhpc3RvcnkgcmVjb3JkP1xuICAgKiBAcGFyYW0ge29iamVjdD19IHN0YXRlIG9iamVjdCB0byB1c2Ugd2l0aCBwdXNoU3RhdGUvcmVwbGFjZVN0YXRlXG4gICAqL1xuICBzZWxmLnVybCA9IGZ1bmN0aW9uKHVybCwgcmVwbGFjZSwgc3RhdGUpIHtcbiAgICAvLyBJbiBtb2Rlcm4gYnJvd3NlcnMgYGhpc3Rvcnkuc3RhdGVgIGlzIGBudWxsYCBieSBkZWZhdWx0OyB0cmVhdGluZyBpdCBzZXBhcmF0ZWx5XG4gICAgLy8gZnJvbSBgdW5kZWZpbmVkYCB3b3VsZCBjYXVzZSBgJGJyb3dzZXIudXJsKCcvZm9vJylgIHRvIGNoYW5nZSBgaGlzdG9yeS5zdGF0ZWBcbiAgICAvLyB0byB1bmRlZmluZWQgdmlhIGBwdXNoU3RhdGVgLiBJbnN0ZWFkLCBsZXQncyBjaGFuZ2UgYHVuZGVmaW5lZGAgdG8gYG51bGxgIGhlcmUuXG4gICAgaWYgKGlzVW5kZWZpbmVkKHN0YXRlKSkge1xuICAgICAgc3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIEFuZHJvaWQgQnJvd3NlciBCRkNhY2hlIGNhdXNlcyBsb2NhdGlvbiwgaGlzdG9yeSByZWZlcmVuY2UgdG8gYmVjb21lIHN0YWxlLlxuICAgIGlmIChsb2NhdGlvbiAhPT0gd2luZG93LmxvY2F0aW9uKSBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICBpZiAoaGlzdG9yeSAhPT0gd2luZG93Lmhpc3RvcnkpIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcblxuICAgIC8vIHNldHRlclxuICAgIGlmICh1cmwpIHtcbiAgICAgIHZhciBzYW1lU3RhdGUgPSBsYXN0SGlzdG9yeVN0YXRlID09PSBzdGF0ZTtcblxuICAgICAgLy8gRG9uJ3QgY2hhbmdlIGFueXRoaW5nIGlmIHByZXZpb3VzIGFuZCBjdXJyZW50IFVSTHMgYW5kIHN0YXRlcyBtYXRjaC4gVGhpcyBhbHNvIHByZXZlbnRzXG4gICAgICAvLyBJRTwxMCBmcm9tIGdldHRpbmcgaW50byByZWRpcmVjdCBsb29wIHdoZW4gaW4gTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwgbW9kZS5cbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2NvbW1pdC9mZmIyNzAxXG4gICAgICBpZiAobGFzdEJyb3dzZXJVcmwgPT09IHVybCAmJiAoISRzbmlmZmVyLmhpc3RvcnkgfHwgc2FtZVN0YXRlKSkge1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH1cbiAgICAgIHZhciBzYW1lQmFzZSA9IGxhc3RCcm93c2VyVXJsICYmIHN0cmlwSGFzaChsYXN0QnJvd3NlclVybCkgPT09IHN0cmlwSGFzaCh1cmwpO1xuICAgICAgbGFzdEJyb3dzZXJVcmwgPSB1cmw7XG4gICAgICBsYXN0SGlzdG9yeVN0YXRlID0gc3RhdGU7XG4gICAgICAvLyBEb24ndCB1c2UgaGlzdG9yeSBBUEkgaWYgb25seSB0aGUgaGFzaCBjaGFuZ2VkXG4gICAgICAvLyBkdWUgdG8gYSBidWcgaW4gSUUxMC9JRTExIHdoaWNoIGxlYWRzXG4gICAgICAvLyB0byBub3QgZmlyaW5nIGEgYGhhc2hjaGFuZ2VgIG5vciBgcG9wc3RhdGVgIGV2ZW50XG4gICAgICAvLyBpbiBzb21lIGNhc2VzIChzZWUgIzkxNDMpLlxuICAgICAgaWYgKCRzbmlmZmVyLmhpc3RvcnkgJiYgKCFzYW1lQmFzZSB8fCAhc2FtZVN0YXRlKSkge1xuICAgICAgICBoaXN0b3J5W3JlcGxhY2UgPyAncmVwbGFjZVN0YXRlJyA6ICdwdXNoU3RhdGUnXShzdGF0ZSwgJycsIHVybCk7XG4gICAgICAgIGNhY2hlU3RhdGUoKTtcbiAgICAgICAgLy8gRG8gdGhlIGFzc2lnbm1lbnQgYWdhaW4gc28gdGhhdCB0aG9zZSB0d28gdmFyaWFibGVzIGFyZSByZWZlcmVudGlhbGx5IGlkZW50aWNhbC5cbiAgICAgICAgbGFzdEhpc3RvcnlTdGF0ZSA9IGNhY2hlZFN0YXRlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFzYW1lQmFzZSB8fCByZWxvYWRMb2NhdGlvbikge1xuICAgICAgICAgIHJlbG9hZExvY2F0aW9uID0gdXJsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgbG9jYXRpb24ucmVwbGFjZSh1cmwpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzYW1lQmFzZSkge1xuICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9jYXRpb24uaGFzaCA9IGdldEhhc2godXJsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgLy8gZ2V0dGVyXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIC0gcmVsb2FkTG9jYXRpb24gaXMgbmVlZGVkIGFzIGJyb3dzZXJzIGRvbid0IGFsbG93IHRvIHJlYWQgb3V0XG4gICAgICAvLyAgIHRoZSBuZXcgbG9jYXRpb24uaHJlZiBpZiBhIHJlbG9hZCBoYXBwZW5lZC5cbiAgICAgIC8vIC0gdGhlIHJlcGxhY2VtZW50IGlzIGEgd29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDA3MTcyXG4gICAgICByZXR1cm4gcmVsb2FkTG9jYXRpb24gfHwgbG9jYXRpb24uaHJlZi5yZXBsYWNlKC8lMjcvZyxcIidcIik7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmFtZSAkYnJvd3NlciNzdGF0ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgYSBnZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybiBoaXN0b3J5LnN0YXRlIG9yIG51bGwgaWYgaGlzdG9yeS5zdGF0ZSBpcyB1bmRlZmluZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IHN0YXRlXG4gICAqL1xuICBzZWxmLnN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNhY2hlZFN0YXRlO1xuICB9O1xuXG4gIHZhciB1cmxDaGFuZ2VMaXN0ZW5lcnMgPSBbXSxcbiAgICAgIHVybENoYW5nZUluaXQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBjYWNoZVN0YXRlQW5kRmlyZVVybENoYW5nZSgpIHtcbiAgICBjYWNoZVN0YXRlKCk7XG4gICAgZmlyZVVybENoYW5nZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q3VycmVudFN0YXRlKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gaGlzdG9yeS5zdGF0ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBNU0lFIGNhbiByZXBvcnRlZGx5IHRocm93IHdoZW4gdGhlcmUgaXMgbm8gc3RhdGUgKFVOQ09ORklSTUVEKS5cbiAgICB9XG4gIH1cblxuICAvLyBUaGlzIHZhcmlhYmxlIHNob3VsZCBiZSB1c2VkICpvbmx5KiBpbnNpZGUgdGhlIGNhY2hlU3RhdGUgZnVuY3Rpb24uXG4gIHZhciBsYXN0Q2FjaGVkU3RhdGUgPSBudWxsO1xuICBmdW5jdGlvbiBjYWNoZVN0YXRlKCkge1xuICAgIC8vIFRoaXMgc2hvdWxkIGJlIHRoZSBvbmx5IHBsYWNlIGluICRicm93c2VyIHdoZXJlIGBoaXN0b3J5LnN0YXRlYCBpcyByZWFkLlxuICAgIGNhY2hlZFN0YXRlID0gZ2V0Q3VycmVudFN0YXRlKCk7XG4gICAgY2FjaGVkU3RhdGUgPSBpc1VuZGVmaW5lZChjYWNoZWRTdGF0ZSkgPyBudWxsIDogY2FjaGVkU3RhdGU7XG5cbiAgICAvLyBQcmV2ZW50IGNhbGxiYWNrcyBmbyBmaXJlIHR3aWNlIGlmIGJvdGggaGFzaGNoYW5nZSAmIHBvcHN0YXRlIHdlcmUgZmlyZWQuXG4gICAgaWYgKGVxdWFscyhjYWNoZWRTdGF0ZSwgbGFzdENhY2hlZFN0YXRlKSkge1xuICAgICAgY2FjaGVkU3RhdGUgPSBsYXN0Q2FjaGVkU3RhdGU7XG4gICAgfVxuICAgIGxhc3RDYWNoZWRTdGF0ZSA9IGNhY2hlZFN0YXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gZmlyZVVybENoYW5nZSgpIHtcbiAgICBpZiAobGFzdEJyb3dzZXJVcmwgPT09IHNlbGYudXJsKCkgJiYgbGFzdEhpc3RvcnlTdGF0ZSA9PT0gY2FjaGVkU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsYXN0QnJvd3NlclVybCA9IHNlbGYudXJsKCk7XG4gICAgbGFzdEhpc3RvcnlTdGF0ZSA9IGNhY2hlZFN0YXRlO1xuICAgIGZvckVhY2godXJsQ2hhbmdlTGlzdGVuZXJzLCBmdW5jdGlvbihsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoc2VsZi51cmwoKSwgY2FjaGVkU3RhdGUpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI29uVXJsQ2hhbmdlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZWdpc3RlciBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkLCB3aGVuIHVybCBjaGFuZ2VzLlxuICAgKlxuICAgKiBJdCdzIG9ubHkgY2FsbGVkIHdoZW4gdGhlIHVybCBpcyBjaGFuZ2VkIGZyb20gb3V0c2lkZSBvZiBhbmd1bGFyOlxuICAgKiAtIHVzZXIgdHlwZXMgZGlmZmVyZW50IHVybCBpbnRvIGFkZHJlc3MgYmFyXG4gICAqIC0gdXNlciBjbGlja3Mgb24gaGlzdG9yeSAoZm9yd2FyZC9iYWNrKSBidXR0b25cbiAgICogLSB1c2VyIGNsaWNrcyBvbiBhIGxpbmtcbiAgICpcbiAgICogSXQncyBub3QgY2FsbGVkIHdoZW4gdXJsIGlzIGNoYW5nZWQgYnkgJGJyb3dzZXIudXJsKCkgbWV0aG9kXG4gICAqXG4gICAqIFRoZSBsaXN0ZW5lciBnZXRzIGNhbGxlZCB3aXRoIG5ldyB1cmwgYXMgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBOT1RFOiB0aGlzIGFwaSBpcyBpbnRlbmRlZCBmb3IgdXNlIG9ubHkgYnkgdGhlICRsb2NhdGlvbiBzZXJ2aWNlLiBQbGVhc2UgdXNlIHRoZVxuICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uICRsb2NhdGlvbiBzZXJ2aWNlfSB0byBtb25pdG9yIHVybCBjaGFuZ2VzIGluIGFuZ3VsYXIgYXBwcy5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcpfSBsaXN0ZW5lciBMaXN0ZW5lciBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB1cmwgY2hhbmdlcy5cbiAgICogQHJldHVybiB7ZnVuY3Rpb24oc3RyaW5nKX0gUmV0dXJucyB0aGUgcmVnaXN0ZXJlZCBsaXN0ZW5lciBmbiAtIGhhbmR5IGlmIHRoZSBmbiBpcyBhbm9ueW1vdXMuXG4gICAqL1xuICBzZWxmLm9uVXJsQ2hhbmdlID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPKHZvanRhKTogcmVmYWN0b3IgdG8gdXNlIG5vZGUncyBzeW50YXggZm9yIGV2ZW50c1xuICAgIGlmICghdXJsQ2hhbmdlSW5pdCkge1xuICAgICAgLy8gV2UgbGlzdGVuIG9uIGJvdGggKGhhc2hjaGFuZ2UvcG9wc3RhdGUpIHdoZW4gYXZhaWxhYmxlLCBhcyBzb21lIGJyb3dzZXJzIChlLmcuIE9wZXJhKVxuICAgICAgLy8gZG9uJ3QgZmlyZSBwb3BzdGF0ZSB3aGVuIHVzZXIgY2hhbmdlIHRoZSBhZGRyZXNzIGJhciBhbmQgZG9uJ3QgZmlyZSBoYXNoY2hhbmdlIHdoZW4gdXJsXG4gICAgICAvLyBjaGFuZ2VkIGJ5IHB1c2gvcmVwbGFjZVN0YXRlXG5cbiAgICAgIC8vIGh0bWw1IGhpc3RvcnkgYXBpIC0gcG9wc3RhdGUgZXZlbnRcbiAgICAgIGlmICgkc25pZmZlci5oaXN0b3J5KSBqcUxpdGUod2luZG93KS5vbigncG9wc3RhdGUnLCBjYWNoZVN0YXRlQW5kRmlyZVVybENoYW5nZSk7XG4gICAgICAvLyBoYXNoY2hhbmdlIGV2ZW50XG4gICAgICBqcUxpdGUod2luZG93KS5vbignaGFzaGNoYW5nZScsIGNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlKTtcblxuICAgICAgdXJsQ2hhbmdlSW5pdCA9IHRydWU7XG4gICAgfVxuXG4gICAgdXJsQ2hhbmdlTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICAgIHJldHVybiBjYWxsYmFjaztcbiAgfTtcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogUmVtb3ZlIHBvcHN0YXRlIGFuZCBoYXNoY2hhbmdlIGhhbmRsZXIgZnJvbSB3aW5kb3cuXG4gICAqXG4gICAqIE5PVEU6IHRoaXMgYXBpIGlzIGludGVuZGVkIGZvciB1c2Ugb25seSBieSAkcm9vdFNjb3BlLlxuICAgKi9cbiAgc2VsZi4kJGFwcGxpY2F0aW9uRGVzdHJveWVkID0gZnVuY3Rpb24oKSB7XG4gICAganFMaXRlKHdpbmRvdykub2ZmKCdoYXNoY2hhbmdlIHBvcHN0YXRlJywgY2FjaGVTdGF0ZUFuZEZpcmVVcmxDaGFuZ2UpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciB0aGUgdXJsIGhhcyBjaGFuZ2VkIG91dHNpZGUgb2YgQW5ndWxhci5cbiAgICogTmVlZHMgdG8gYmUgZXhwb3J0ZWQgdG8gYmUgYWJsZSB0byBjaGVjayBmb3IgY2hhbmdlcyB0aGF0IGhhdmUgYmVlbiBkb25lIGluIHN5bmMsXG4gICAqIGFzIGhhc2hjaGFuZ2UvcG9wc3RhdGUgZXZlbnRzIGZpcmUgaW4gYXN5bmMuXG4gICAqL1xuICBzZWxmLiQkY2hlY2tVcmxDaGFuZ2UgPSBmaXJlVXJsQ2hhbmdlO1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIE1pc2MgQVBJXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI2Jhc2VIcmVmXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXR1cm5zIGN1cnJlbnQgPGJhc2UgaHJlZj5cbiAgICogKGFsd2F5cyByZWxhdGl2ZSAtIHdpdGhvdXQgZG9tYWluKVxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY3VycmVudCBiYXNlIGhyZWZcbiAgICovXG4gIHNlbGYuYmFzZUhyZWYgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaHJlZiA9IGJhc2VFbGVtZW50LmF0dHIoJ2hyZWYnKTtcbiAgICByZXR1cm4gaHJlZiA/IGhyZWYucmVwbGFjZSgvXihodHRwcz9cXDopP1xcL1xcL1teXFwvXSovLCAnJykgOiAnJztcbiAgfTtcblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjZGVmZXJcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBmbiBBIGZ1bmN0aW9uLCB3aG8ncyBleGVjdXRpb24gc2hvdWxkIGJlIGRlZmVycmVkLlxuICAgKiBAcGFyYW0ge251bWJlcj19IFtkZWxheT0wXSBvZiBtaWxsaXNlY29uZHMgdG8gZGVmZXIgdGhlIGZ1bmN0aW9uIGV4ZWN1dGlvbi5cbiAgICogQHJldHVybnMgeyp9IERlZmVySWQgdGhhdCBjYW4gYmUgdXNlZCB0byBjYW5jZWwgdGhlIHRhc2sgdmlhIGAkYnJvd3Nlci5kZWZlci5jYW5jZWwoKWAuXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBFeGVjdXRlcyBhIGZuIGFzeW5jaHJvbm91c2x5IHZpYSBgc2V0VGltZW91dChmbiwgZGVsYXkpYC5cbiAgICpcbiAgICogVW5saWtlIHdoZW4gY2FsbGluZyBgc2V0VGltZW91dGAgZGlyZWN0bHksIGluIHRlc3QgdGhpcyBmdW5jdGlvbiBpcyBtb2NrZWQgYW5kIGluc3RlYWQgb2YgdXNpbmdcbiAgICogYHNldFRpbWVvdXRgIGluIHRlc3RzLCB0aGUgZm5zIGFyZSBxdWV1ZWQgaW4gYW4gYXJyYXksIHdoaWNoIGNhbiBiZSBwcm9ncmFtbWF0aWNhbGx5IGZsdXNoZWRcbiAgICogdmlhIGAkYnJvd3Nlci5kZWZlci5mbHVzaCgpYC5cbiAgICpcbiAgICovXG4gIHNlbGYuZGVmZXIgPSBmdW5jdGlvbihmbiwgZGVsYXkpIHtcbiAgICB2YXIgdGltZW91dElkO1xuICAgIG91dHN0YW5kaW5nUmVxdWVzdENvdW50Kys7XG4gICAgdGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGRlbGV0ZSBwZW5kaW5nRGVmZXJJZHNbdGltZW91dElkXTtcbiAgICAgIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KGZuKTtcbiAgICB9LCBkZWxheSB8fCAwKTtcbiAgICBwZW5kaW5nRGVmZXJJZHNbdGltZW91dElkXSA9IHRydWU7XG4gICAgcmV0dXJuIHRpbWVvdXRJZDtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmFtZSAkYnJvd3NlciNkZWZlci5jYW5jZWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENhbmNlbHMgYSBkZWZlcnJlZCB0YXNrIGlkZW50aWZpZWQgd2l0aCBgZGVmZXJJZGAuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZGVmZXJJZCBUb2tlbiByZXR1cm5lZCBieSB0aGUgYCRicm93c2VyLmRlZmVyYCBmdW5jdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIGhhc24ndCBleGVjdXRlZCB5ZXQgYW5kIHdhcyBzdWNjZXNzZnVsbHlcbiAgICogICAgICAgICAgICAgICAgICAgIGNhbmNlbGVkLlxuICAgKi9cbiAgc2VsZi5kZWZlci5jYW5jZWwgPSBmdW5jdGlvbihkZWZlcklkKSB7XG4gICAgaWYgKHBlbmRpbmdEZWZlcklkc1tkZWZlcklkXSkge1xuICAgICAgZGVsZXRlIHBlbmRpbmdEZWZlcklkc1tkZWZlcklkXTtcbiAgICAgIGNsZWFyVGltZW91dChkZWZlcklkKTtcbiAgICAgIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KG5vb3ApO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxufVxuXG5mdW5jdGlvbiAkQnJvd3NlclByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJGxvZycsICckc25pZmZlcicsICckZG9jdW1lbnQnLFxuICAgICAgZnVuY3Rpb24oJHdpbmRvdywgJGxvZywgJHNuaWZmZXIsICRkb2N1bWVudCkge1xuICAgICAgICByZXR1cm4gbmV3IEJyb3dzZXIoJHdpbmRvdywgJGRvY3VtZW50LCAkbG9nLCAkc25pZmZlcik7XG4gICAgICB9XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGNhY2hlRmFjdG9yeVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRmFjdG9yeSB0aGF0IGNvbnN0cnVjdHMge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdHMgYW5kIGdpdmVzIGFjY2VzcyB0b1xuICogdGhlbS5cbiAqXG4gKiBgYGBqc1xuICpcbiAqICB2YXIgY2FjaGUgPSAkY2FjaGVGYWN0b3J5KCdjYWNoZUlkJyk7XG4gKiAgZXhwZWN0KCRjYWNoZUZhY3RvcnkuZ2V0KCdjYWNoZUlkJykpLnRvQmUoY2FjaGUpO1xuICogIGV4cGVjdCgkY2FjaGVGYWN0b3J5LmdldCgnbm9TdWNoQ2FjaGVJZCcpKS5ub3QudG9CZURlZmluZWQoKTtcbiAqXG4gKiAgY2FjaGUucHV0KFwia2V5XCIsIFwidmFsdWVcIik7XG4gKiAgY2FjaGUucHV0KFwiYW5vdGhlciBrZXlcIiwgXCJhbm90aGVyIHZhbHVlXCIpO1xuICpcbiAqICAvLyBXZSd2ZSBzcGVjaWZpZWQgbm8gb3B0aW9ucyBvbiBjcmVhdGlvblxuICogIGV4cGVjdChjYWNoZS5pbmZvKCkpLnRvRXF1YWwoe2lkOiAnY2FjaGVJZCcsIHNpemU6IDJ9KTtcbiAqXG4gKiBgYGBcbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNhY2hlSWQgTmFtZSBvciBpZCBvZiB0aGUgbmV3bHkgY3JlYXRlZCBjYWNoZS5cbiAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBPcHRpb25zIG9iamVjdCB0aGF0IHNwZWNpZmllcyB0aGUgY2FjaGUgYmVoYXZpb3IuIFByb3BlcnRpZXM6XG4gKlxuICogICAtIGB7bnVtYmVyPX1gIGBjYXBhY2l0eWAg4oCUIHR1cm5zIHRoZSBjYWNoZSBpbnRvIExSVSBjYWNoZS5cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBOZXdseSBjcmVhdGVkIGNhY2hlIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgc2V0IG9mIG1ldGhvZHM6XG4gKlxuICogLSBge29iamVjdH1gIGBpbmZvKClgIOKAlCBSZXR1cm5zIGlkLCBzaXplLCBhbmQgb3B0aW9ucyBvZiBjYWNoZS5cbiAqIC0gYHt7Kn19YCBgcHV0KHtzdHJpbmd9IGtleSwgeyp9IHZhbHVlKWAg4oCUIFB1dHMgYSBuZXcga2V5LXZhbHVlIHBhaXIgaW50byB0aGUgY2FjaGUgYW5kIHJldHVybnNcbiAqICAgaXQuXG4gKiAtIGB7eyp9fWAgYGdldCh7c3RyaW5nfSBrZXkpYCDigJQgUmV0dXJucyBjYWNoZWQgdmFsdWUgZm9yIGBrZXlgIG9yIHVuZGVmaW5lZCBmb3IgY2FjaGUgbWlzcy5cbiAqIC0gYHt2b2lkfWAgYHJlbW92ZSh7c3RyaW5nfSBrZXkpYCDigJQgUmVtb3ZlcyBhIGtleS12YWx1ZSBwYWlyIGZyb20gdGhlIGNhY2hlLlxuICogLSBge3ZvaWR9YCBgcmVtb3ZlQWxsKClgIOKAlCBSZW1vdmVzIGFsbCBjYWNoZWQgdmFsdWVzLlxuICogLSBge3ZvaWR9YCBgZGVzdHJveSgpYCDigJQgUmVtb3ZlcyByZWZlcmVuY2VzIHRvIHRoaXMgY2FjaGUgZnJvbSAkY2FjaGVGYWN0b3J5LlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJjYWNoZUV4YW1wbGVBcHBcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJDYWNoZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cIm5ld0NhY2hlS2V5XCIgcGxhY2Vob2xkZXI9XCJLZXlcIj5cbiAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cIm5ld0NhY2hlVmFsdWVcIiBwbGFjZWhvbGRlcj1cIlZhbHVlXCI+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwicHV0KG5ld0NhY2hlS2V5LCBuZXdDYWNoZVZhbHVlKVwiPkNhY2hlPC9idXR0b24+XG5cbiAgICAgICAgIDxwIG5nLWlmPVwia2V5cy5sZW5ndGhcIj5DYWNoZWQgVmFsdWVzPC9wPlxuICAgICAgICAgPGRpdiBuZy1yZXBlYXQ9XCJrZXkgaW4ga2V5c1wiPlxuICAgICAgICAgICA8c3BhbiBuZy1iaW5kPVwia2V5XCI+PC9zcGFuPlxuICAgICAgICAgICA8c3Bhbj46IDwvc3Bhbj5cbiAgICAgICAgICAgPGIgbmctYmluZD1cImNhY2hlLmdldChrZXkpXCI+PC9iPlxuICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgIDxwPkNhY2hlIEluZm88L3A+XG4gICAgICAgICA8ZGl2IG5nLXJlcGVhdD1cIihrZXksIHZhbHVlKSBpbiBjYWNoZS5pbmZvKClcIj5cbiAgICAgICAgICAgPHNwYW4gbmctYmluZD1cImtleVwiPjwvc3Bhbj5cbiAgICAgICAgICAgPHNwYW4+OiA8L3NwYW4+XG4gICAgICAgICAgIDxiIG5nLWJpbmQ9XCJ2YWx1ZVwiPjwvYj5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICBhbmd1bGFyLm1vZHVsZSgnY2FjaGVFeGFtcGxlQXBwJywgW10pLlxuICAgICAgICAgY29udHJvbGxlcignQ2FjaGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGNhY2hlRmFjdG9yeScsIGZ1bmN0aW9uKCRzY29wZSwgJGNhY2hlRmFjdG9yeSkge1xuICAgICAgICAgICAkc2NvcGUua2V5cyA9IFtdO1xuICAgICAgICAgICAkc2NvcGUuY2FjaGUgPSAkY2FjaGVGYWN0b3J5KCdjYWNoZUlkJyk7XG4gICAgICAgICAgICRzY29wZS5wdXQgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgaWYgKCRzY29wZS5jYWNoZS5nZXQoa2V5KSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUua2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgICRzY29wZS5jYWNoZS5wdXQoa2V5LCB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHZhbHVlKTtcbiAgICAgICAgICAgfTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgcCB7XG4gICAgICAgICBtYXJnaW46IDEwcHggMCAzcHg7XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uICRDYWNoZUZhY3RvcnlQcm92aWRlcigpIHtcblxuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2FjaGVzID0ge307XG5cbiAgICBmdW5jdGlvbiBjYWNoZUZhY3RvcnkoY2FjaGVJZCwgb3B0aW9ucykge1xuICAgICAgaWYgKGNhY2hlSWQgaW4gY2FjaGVzKSB7XG4gICAgICAgIHRocm93IG1pbkVycignJGNhY2hlRmFjdG9yeScpKCdpaWQnLCBcIkNhY2hlSWQgJ3swfScgaXMgYWxyZWFkeSB0YWtlbiFcIiwgY2FjaGVJZCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzaXplID0gMCxcbiAgICAgICAgICBzdGF0cyA9IGV4dGVuZCh7fSwgb3B0aW9ucywge2lkOiBjYWNoZUlkfSksXG4gICAgICAgICAgZGF0YSA9IHt9LFxuICAgICAgICAgIGNhcGFjaXR5ID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5jYXBhY2l0eSkgfHwgTnVtYmVyLk1BWF9WQUxVRSxcbiAgICAgICAgICBscnVIYXNoID0ge30sXG4gICAgICAgICAgZnJlc2hFbmQgPSBudWxsLFxuICAgICAgICAgIHN0YWxlRW5kID0gbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgdHlwZVxuICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZVxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQSBjYWNoZSBvYmplY3QgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgZGF0YSwgcHJpbWFyaWx5IHVzZWQgYnlcbiAgICAgICAqIHtAbGluayAkaHR0cCAkaHR0cH0gYW5kIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOnNjcmlwdCBzY3JpcHR9IGRpcmVjdGl2ZSB0byBjYWNoZVxuICAgICAgICogdGVtcGxhdGVzIGFuZCBvdGhlciBkYXRhLlxuICAgICAgICpcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiAgYW5ndWxhci5tb2R1bGUoJ3N1cGVyQ2FjaGUnKVxuICAgICAgICogICAgLmZhY3RvcnkoJ3N1cGVyQ2FjaGUnLCBbJyRjYWNoZUZhY3RvcnknLCBmdW5jdGlvbigkY2FjaGVGYWN0b3J5KSB7XG4gICAgICAgKiAgICAgIHJldHVybiAkY2FjaGVGYWN0b3J5KCdzdXBlci1jYWNoZScpO1xuICAgICAgICogICAgfV0pO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICogRXhhbXBsZSB0ZXN0OlxuICAgICAgICpcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiAgaXQoJ3Nob3VsZCBiZWhhdmUgbGlrZSBhIGNhY2hlJywgaW5qZWN0KGZ1bmN0aW9uKHN1cGVyQ2FjaGUpIHtcbiAgICAgICAqICAgIHN1cGVyQ2FjaGUucHV0KCdrZXknLCAndmFsdWUnKTtcbiAgICAgICAqICAgIHN1cGVyQ2FjaGUucHV0KCdhbm90aGVyIGtleScsICdhbm90aGVyIHZhbHVlJyk7XG4gICAgICAgKlxuICAgICAgICogICAgZXhwZWN0KHN1cGVyQ2FjaGUuaW5mbygpKS50b0VxdWFsKHtcbiAgICAgICAqICAgICAgaWQ6ICdzdXBlci1jYWNoZScsXG4gICAgICAgKiAgICAgIHNpemU6IDJcbiAgICAgICAqICAgIH0pO1xuICAgICAgICpcbiAgICAgICAqICAgIHN1cGVyQ2FjaGUucmVtb3ZlKCdhbm90aGVyIGtleScpO1xuICAgICAgICogICAgZXhwZWN0KHN1cGVyQ2FjaGUuZ2V0KCdhbm90aGVyIGtleScpKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgICAgKlxuICAgICAgICogICAgc3VwZXJDYWNoZS5yZW1vdmVBbGwoKTtcbiAgICAgICAqICAgIGV4cGVjdChzdXBlckNhY2hlLmluZm8oKSkudG9FcXVhbCh7XG4gICAgICAgKiAgICAgIGlkOiAnc3VwZXItY2FjaGUnLFxuICAgICAgICogICAgICBzaXplOiAwXG4gICAgICAgKiAgICB9KTtcbiAgICAgICAqICB9KSk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqL1xuICAgICAgcmV0dXJuIGNhY2hlc1tjYWNoZUlkXSA9IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI3B1dFxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogSW5zZXJ0cyBhIG5hbWVkIGVudHJ5IGludG8gdGhlIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfSBvYmplY3QgdG8gYmVcbiAgICAgICAgICogcmV0cmlldmVkIGxhdGVyLCBhbmQgaW5jcmVtZW50aW5nIHRoZSBzaXplIG9mIHRoZSBjYWNoZSBpZiB0aGUga2V5IHdhcyBub3QgYWxyZWFkeVxuICAgICAgICAgKiBwcmVzZW50IGluIHRoZSBjYWNoZS4gSWYgYmVoYXZpbmcgbGlrZSBhbiBMUlUgY2FjaGUsIGl0IHdpbGwgYWxzbyByZW1vdmUgc3RhbGVcbiAgICAgICAgICogZW50cmllcyBmcm9tIHRoZSBzZXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEl0IHdpbGwgbm90IGluc2VydCB1bmRlZmluZWQgdmFsdWVzIGludG8gdGhlIGNhY2hlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBrZXkgdW5kZXIgd2hpY2ggdGhlIGNhY2hlZCBkYXRhIGlzIHN0b3JlZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSB0aGUgdmFsdWUgdG8gc3RvcmUgYWxvbmdzaWRlIHRoZSBrZXkuIElmIGl0IGlzIHVuZGVmaW5lZCwgdGhlIGtleVxuICAgICAgICAgKiAgICB3aWxsIG5vdCBiZSBzdG9yZWQuXG4gICAgICAgICAqIEByZXR1cm5zIHsqfSB0aGUgdmFsdWUgc3RvcmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcHV0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuICAgICAgICAgIGlmIChjYXBhY2l0eSA8IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XSB8fCAobHJ1SGFzaFtrZXldID0ge2tleToga2V5fSk7XG5cbiAgICAgICAgICAgIHJlZnJlc2gobHJ1RW50cnkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghKGtleSBpbiBkYXRhKSkgc2l6ZSsrO1xuICAgICAgICAgIGRhdGFba2V5XSA9IHZhbHVlO1xuXG4gICAgICAgICAgaWYgKHNpemUgPiBjYXBhY2l0eSkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoc3RhbGVFbmQua2V5KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNnZXRcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJldHJpZXZlcyBuYW1lZCBkYXRhIHN0b3JlZCBpbiB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSB0aGUga2V5IG9mIHRoZSBkYXRhIHRvIGJlIHJldHJpZXZlZFxuICAgICAgICAgKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIHN0b3JlZC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgaWYgKGNhcGFjaXR5IDwgTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICAgICAgdmFyIGxydUVudHJ5ID0gbHJ1SGFzaFtrZXldO1xuXG4gICAgICAgICAgICBpZiAoIWxydUVudHJ5KSByZXR1cm47XG5cbiAgICAgICAgICAgIHJlZnJlc2gobHJ1RW50cnkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBkYXRhW2tleV07XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI3JlbW92ZVxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogUmVtb3ZlcyBhbiBlbnRyeSBmcm9tIHRoZSB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGJlIHJlbW92ZWRcbiAgICAgICAgICovXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgaWYgKGNhcGFjaXR5IDwgTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICAgICAgdmFyIGxydUVudHJ5ID0gbHJ1SGFzaFtrZXldO1xuXG4gICAgICAgICAgICBpZiAoIWxydUVudHJ5KSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmIChscnVFbnRyeSA9PSBmcmVzaEVuZCkgZnJlc2hFbmQgPSBscnVFbnRyeS5wO1xuICAgICAgICAgICAgaWYgKGxydUVudHJ5ID09IHN0YWxlRW5kKSBzdGFsZUVuZCA9IGxydUVudHJ5Lm47XG4gICAgICAgICAgICBsaW5rKGxydUVudHJ5Lm4sbHJ1RW50cnkucCk7XG5cbiAgICAgICAgICAgIGRlbGV0ZSBscnVIYXNoW2tleV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVsZXRlIGRhdGFba2V5XTtcbiAgICAgICAgICBzaXplLS07XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI3JlbW92ZUFsbFxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogQ2xlYXJzIHRoZSBjYWNoZSBvYmplY3Qgb2YgYW55IGVudHJpZXMuXG4gICAgICAgICAqL1xuICAgICAgICByZW1vdmVBbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGRhdGEgPSB7fTtcbiAgICAgICAgICBzaXplID0gMDtcbiAgICAgICAgICBscnVIYXNoID0ge307XG4gICAgICAgICAgZnJlc2hFbmQgPSBzdGFsZUVuZCA9IG51bGw7XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI2Rlc3Ryb3lcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIERlc3Ryb3lzIHRoZSB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0IGVudGlyZWx5LFxuICAgICAgICAgKiByZW1vdmluZyBpdCBmcm9tIHRoZSB7QGxpbmsgJGNhY2hlRmFjdG9yeSAkY2FjaGVGYWN0b3J5fSBzZXQuXG4gICAgICAgICAqL1xuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkYXRhID0gbnVsbDtcbiAgICAgICAgICBzdGF0cyA9IG51bGw7XG4gICAgICAgICAgbHJ1SGFzaCA9IG51bGw7XG4gICAgICAgICAgZGVsZXRlIGNhY2hlc1tjYWNoZUlkXTtcbiAgICAgICAgfSxcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUjaW5mb1xuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogUmV0cmlldmUgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGEgcGFydGljdWxhciB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0uXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtvYmplY3R9IGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAgICogICA8dWw+XG4gICAgICAgICAqICAgICA8bGk+KippZCoqOiB0aGUgaWQgb2YgdGhlIGNhY2hlIGluc3RhbmNlPC9saT5cbiAgICAgICAgICogICAgIDxsaT4qKnNpemUqKjogdGhlIG51bWJlciBvZiBlbnRyaWVzIGtlcHQgaW4gdGhlIGNhY2hlIGluc3RhbmNlPC9saT5cbiAgICAgICAgICogICAgIDxsaT4qKi4uLioqOiBhbnkgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIGZyb20gdGhlIG9wdGlvbnMgb2JqZWN0IHdoZW4gY3JlYXRpbmcgdGhlXG4gICAgICAgICAqICAgICAgIGNhY2hlLjwvbGk+XG4gICAgICAgICAqICAgPC91bD5cbiAgICAgICAgICovXG4gICAgICAgIGluZm86IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBleHRlbmQoe30sIHN0YXRzLCB7c2l6ZTogc2l6ZX0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG5cbiAgICAgIC8qKlxuICAgICAgICogbWFrZXMgdGhlIGBlbnRyeWAgdGhlIGZyZXNoRW5kIG9mIHRoZSBMUlUgbGlua2VkIGxpc3RcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVmcmVzaChlbnRyeSkge1xuICAgICAgICBpZiAoZW50cnkgIT0gZnJlc2hFbmQpIHtcbiAgICAgICAgICBpZiAoIXN0YWxlRW5kKSB7XG4gICAgICAgICAgICBzdGFsZUVuZCA9IGVudHJ5O1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhbGVFbmQgPT0gZW50cnkpIHtcbiAgICAgICAgICAgIHN0YWxlRW5kID0gZW50cnkubjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsaW5rKGVudHJ5Lm4sIGVudHJ5LnApO1xuICAgICAgICAgIGxpbmsoZW50cnksIGZyZXNoRW5kKTtcbiAgICAgICAgICBmcmVzaEVuZCA9IGVudHJ5O1xuICAgICAgICAgIGZyZXNoRW5kLm4gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBiaWRpcmVjdGlvbmFsbHkgbGlua3MgdHdvIGVudHJpZXMgb2YgdGhlIExSVSBsaW5rZWQgbGlzdFxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBsaW5rKG5leHRFbnRyeSwgcHJldkVudHJ5KSB7XG4gICAgICAgIGlmIChuZXh0RW50cnkgIT0gcHJldkVudHJ5KSB7XG4gICAgICAgICAgaWYgKG5leHRFbnRyeSkgbmV4dEVudHJ5LnAgPSBwcmV2RW50cnk7IC8vcCBzdGFuZHMgZm9yIHByZXZpb3VzLCAncHJldicgZGlkbid0IG1pbmlmeVxuICAgICAgICAgIGlmIChwcmV2RW50cnkpIHByZXZFbnRyeS5uID0gbmV4dEVudHJ5OyAvL24gc3RhbmRzIGZvciBuZXh0LCAnbmV4dCcgZGlkbid0IG1pbmlmeVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNhY2hlRmFjdG9yeSNpbmZvXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBHZXQgaW5mb3JtYXRpb24gYWJvdXQgYWxsIHRoZSBjYWNoZXMgdGhhdCBoYXZlIGJlZW4gY3JlYXRlZFxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSAtIGtleS12YWx1ZSBtYXAgb2YgYGNhY2hlSWRgIHRvIHRoZSByZXN1bHQgb2YgY2FsbGluZyBgY2FjaGUjaW5mb2BcbiAgICovXG4gICAgY2FjaGVGYWN0b3J5LmluZm8gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpbmZvID0ge307XG4gICAgICBmb3JFYWNoKGNhY2hlcywgZnVuY3Rpb24oY2FjaGUsIGNhY2hlSWQpIHtcbiAgICAgICAgaW5mb1tjYWNoZUlkXSA9IGNhY2hlLmluZm8oKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGluZm87XG4gICAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjYWNoZUZhY3RvcnkjZ2V0XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBHZXQgYWNjZXNzIHRvIGEgY2FjaGUgb2JqZWN0IGJ5IHRoZSBgY2FjaGVJZGAgdXNlZCB3aGVuIGl0IHdhcyBjcmVhdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2FjaGVJZCBOYW1lIG9yIGlkIG9mIGEgY2FjaGUgdG8gYWNjZXNzLlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBDYWNoZSBvYmplY3QgaWRlbnRpZmllZCBieSB0aGUgY2FjaGVJZCBvciB1bmRlZmluZWQgaWYgbm8gc3VjaCBjYWNoZS5cbiAgICovXG4gICAgY2FjaGVGYWN0b3J5LmdldCA9IGZ1bmN0aW9uKGNhY2hlSWQpIHtcbiAgICAgIHJldHVybiBjYWNoZXNbY2FjaGVJZF07XG4gICAgfTtcblxuXG4gICAgcmV0dXJuIGNhY2hlRmFjdG9yeTtcbiAgfTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHRlbXBsYXRlQ2FjaGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBmaXJzdCB0aW1lIGEgdGVtcGxhdGUgaXMgdXNlZCwgaXQgaXMgbG9hZGVkIGluIHRoZSB0ZW1wbGF0ZSBjYWNoZSBmb3IgcXVpY2sgcmV0cmlldmFsLiBZb3VcbiAqIGNhbiBsb2FkIHRlbXBsYXRlcyBkaXJlY3RseSBpbnRvIHRoZSBjYWNoZSBpbiBhIGBzY3JpcHRgIHRhZywgb3IgYnkgY29uc3VtaW5nIHRoZVxuICogYCR0ZW1wbGF0ZUNhY2hlYCBzZXJ2aWNlIGRpcmVjdGx5LlxuICpcbiAqIEFkZGluZyB2aWEgdGhlIGBzY3JpcHRgIHRhZzpcbiAqXG4gKiBgYGBodG1sXG4gKiAgIDxzY3JpcHQgdHlwZT1cInRleHQvbmctdGVtcGxhdGVcIiBpZD1cInRlbXBsYXRlSWQuaHRtbFwiPlxuICogICAgIDxwPlRoaXMgaXMgdGhlIGNvbnRlbnQgb2YgdGhlIHRlbXBsYXRlPC9wPlxuICogICA8L3NjcmlwdD5cbiAqIGBgYFxuICpcbiAqICoqTm90ZToqKiB0aGUgYHNjcmlwdGAgdGFnIGNvbnRhaW5pbmcgdGhlIHRlbXBsYXRlIGRvZXMgbm90IG5lZWQgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIGBoZWFkYCBvZlxuICogdGhlIGRvY3VtZW50LCBidXQgaXQgbXVzdCBiZSBhIGRlc2NlbmRlbnQgb2YgdGhlIHtAbGluayBuZy4kcm9vdEVsZW1lbnQgJHJvb3RFbGVtZW50fSAoSUUsXG4gKiBlbGVtZW50IHdpdGggbmctYXBwIGF0dHJpYnV0ZSksIG90aGVyd2lzZSB0aGUgdGVtcGxhdGUgd2lsbCBiZSBpZ25vcmVkLlxuICpcbiAqIEFkZGluZyB2aWEgdGhlIGAkdGVtcGxhdGVDYWNoZWAgc2VydmljZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIG15QXBwID0gYW5ndWxhci5tb2R1bGUoJ215QXBwJywgW10pO1xuICogbXlBcHAucnVuKGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gKiAgICR0ZW1wbGF0ZUNhY2hlLnB1dCgndGVtcGxhdGVJZC5odG1sJywgJ1RoaXMgaXMgdGhlIGNvbnRlbnQgb2YgdGhlIHRlbXBsYXRlJyk7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIFRvIHJldHJpZXZlIHRoZSB0ZW1wbGF0ZSBsYXRlciwgc2ltcGx5IHVzZSBpdCBpbiB5b3VyIEhUTUw6XG4gKiBgYGBodG1sXG4gKiA8ZGl2IG5nLWluY2x1ZGU9XCIgJ3RlbXBsYXRlSWQuaHRtbCcgXCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBvciBnZXQgaXQgdmlhIEphdmFzY3JpcHQ6XG4gKiBgYGBqc1xuICogJHRlbXBsYXRlQ2FjaGUuZ2V0KCd0ZW1wbGF0ZUlkLmh0bWwnKVxuICogYGBgXG4gKlxuICogU2VlIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5ICRjYWNoZUZhY3Rvcnl9LlxuICpcbiAqL1xuZnVuY3Rpb24gJFRlbXBsYXRlQ2FjaGVQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckY2FjaGVGYWN0b3J5JywgZnVuY3Rpb24oJGNhY2hlRmFjdG9yeSkge1xuICAgIHJldHVybiAkY2FjaGVGYWN0b3J5KCd0ZW1wbGF0ZXMnKTtcbiAgfV07XG59XG5cbi8qICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbiAqICAgICBBbnkgY29tbWl0cyB0byB0aGlzIGZpbGUgc2hvdWxkIGJlIHJldmlld2VkIHdpdGggc2VjdXJpdHkgaW4gbWluZC4gICpcbiAqICAgQ2hhbmdlcyB0byB0aGlzIGZpbGUgY2FuIHBvdGVudGlhbGx5IGNyZWF0ZSBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMuICpcbiAqICAgICAgICAgIEFuIGFwcHJvdmFsIGZyb20gMiBDb3JlIG1lbWJlcnMgd2l0aCBoaXN0b3J5IG9mIG1vZGlmeWluZyAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgZmlsZSBpcyByZXF1aXJlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICBEb2VzIHRoZSBjaGFuZ2Ugc29tZWhvdyBhbGxvdyBmb3IgYXJiaXRyYXJ5IGphdmFzY3JpcHQgdG8gYmUgZXhlY3V0ZWQ/ICpcbiAqICAgIE9yIGFsbG93cyBmb3Igc29tZW9uZSB0byBjaGFuZ2UgdGhlIHByb3RvdHlwZSBvZiBidWlsdC1pbiBvYmplY3RzPyAgICpcbiAqICAgICBPciBnaXZlcyB1bmRlc2lyZWQgYWNjZXNzIHRvIHZhcmlhYmxlcyBsaWtlcyBkb2N1bWVudCBvciB3aW5kb3c/ICAgICpcbiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICovXG5cbi8qICEgVkFSSUFCTEUvRlVOQ1RJT04gTkFNSU5HIENPTlZFTlRJT05TIFRIQVQgQVBQTFkgVE8gVEhJUyBGSUxFIVxuICpcbiAqIERPTS1yZWxhdGVkIHZhcmlhYmxlczpcbiAqXG4gKiAtIFwibm9kZVwiIC0gRE9NIE5vZGVcbiAqIC0gXCJlbGVtZW50XCIgLSBET00gRWxlbWVudCBvciBOb2RlXG4gKiAtIFwiJG5vZGVcIiBvciBcIiRlbGVtZW50XCIgLSBqcUxpdGUtd3JhcHBlZCBub2RlIG9yIGVsZW1lbnRcbiAqXG4gKlxuICogQ29tcGlsZXIgcmVsYXRlZCBzdHVmZjpcbiAqXG4gKiAtIFwibGlua0ZuXCIgLSBsaW5raW5nIGZuIG9mIGEgc2luZ2xlIGRpcmVjdGl2ZVxuICogLSBcIm5vZGVMaW5rRm5cIiAtIGZ1bmN0aW9uIHRoYXQgYWdncmVnYXRlcyBhbGwgbGlua2luZyBmbnMgZm9yIGEgcGFydGljdWxhciBub2RlXG4gKiAtIFwiY2hpbGRMaW5rRm5cIiAtICBmdW5jdGlvbiB0aGF0IGFnZ3JlZ2F0ZXMgYWxsIGxpbmtpbmcgZm5zIGZvciBjaGlsZCBub2RlcyBvZiBhIHBhcnRpY3VsYXIgbm9kZVxuICogLSBcImNvbXBvc2l0ZUxpbmtGblwiIC0gZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgYSBjb21waWxhdGlvbiByb290IChub2RlTGlzdClcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRjb21waWxlXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29tcGlsZXMgYW4gSFRNTCBzdHJpbmcgb3IgRE9NIGludG8gYSB0ZW1wbGF0ZSBhbmQgcHJvZHVjZXMgYSB0ZW1wbGF0ZSBmdW5jdGlvbiwgd2hpY2hcbiAqIGNhbiB0aGVuIGJlIHVzZWQgdG8gbGluayB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBgc2NvcGVgfSBhbmQgdGhlIHRlbXBsYXRlIHRvZ2V0aGVyLlxuICpcbiAqIFRoZSBjb21waWxhdGlvbiBpcyBhIHByb2Nlc3Mgb2Ygd2Fsa2luZyB0aGUgRE9NIHRyZWUgYW5kIG1hdGNoaW5nIERPTSBlbGVtZW50cyB0b1xuICoge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogVGhpcyBkb2N1bWVudCBpcyBhbiBpbi1kZXB0aCByZWZlcmVuY2Ugb2YgYWxsIGRpcmVjdGl2ZSBvcHRpb25zLlxuICogRm9yIGEgZ2VudGxlIGludHJvZHVjdGlvbiB0byBkaXJlY3RpdmVzIHdpdGggZXhhbXBsZXMgb2YgY29tbW9uIHVzZSBjYXNlcyxcbiAqIHNlZSB0aGUge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSBkaXJlY3RpdmUgZ3VpZGV9LlxuICogPC9kaXY+XG4gKlxuICogIyMgQ29tcHJlaGVuc2l2ZSBEaXJlY3RpdmUgQVBJXG4gKlxuICogVGhlcmUgYXJlIG1hbnkgZGlmZmVyZW50IG9wdGlvbnMgZm9yIGEgZGlyZWN0aXZlLlxuICpcbiAqIFRoZSBkaWZmZXJlbmNlIHJlc2lkZXMgaW4gdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZmFjdG9yeSBmdW5jdGlvbi5cbiAqIFlvdSBjYW4gZWl0aGVyIHJldHVybiBhIFwiRGlyZWN0aXZlIERlZmluaXRpb24gT2JqZWN0XCIgKHNlZSBiZWxvdykgdGhhdCBkZWZpbmVzIHRoZSBkaXJlY3RpdmUgcHJvcGVydGllcyxcbiAqIG9yIGp1c3QgdGhlIGBwb3N0TGlua2AgZnVuY3Rpb24gKGFsbCBvdGhlciBwcm9wZXJ0aWVzIHdpbGwgaGF2ZSB0aGUgZGVmYXVsdCB2YWx1ZXMpLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1zdWNjZXNzXCI+XG4gKiAqKkJlc3QgUHJhY3RpY2U6KiogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIFwiZGlyZWN0aXZlIGRlZmluaXRpb24gb2JqZWN0XCIgZm9ybS5cbiAqIDwvZGl2PlxuICpcbiAqIEhlcmUncyBhbiBleGFtcGxlIGRpcmVjdGl2ZSBkZWNsYXJlZCB3aXRoIGEgRGlyZWN0aXZlIERlZmluaXRpb24gT2JqZWN0OlxuICpcbiAqIGBgYGpzXG4gKiAgIHZhciBteU1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKC4uLik7XG4gKlxuICogICBteU1vZHVsZS5kaXJlY3RpdmUoJ2RpcmVjdGl2ZU5hbWUnLCBmdW5jdGlvbiBmYWN0b3J5KGluamVjdGFibGVzKSB7XG4gKiAgICAgdmFyIGRpcmVjdGl2ZURlZmluaXRpb25PYmplY3QgPSB7XG4gKiAgICAgICBwcmlvcml0eTogMCxcbiAqICAgICAgIHRlbXBsYXRlOiAnPGRpdj48L2Rpdj4nLCAvLyBvciAvLyBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7IC4uLiB9LFxuICogICAgICAgLy8gb3JcbiAqICAgICAgIC8vIHRlbXBsYXRlVXJsOiAnZGlyZWN0aXZlLmh0bWwnLCAvLyBvciAvLyBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7IC4uLiB9LFxuICogICAgICAgdHJhbnNjbHVkZTogZmFsc2UsXG4gKiAgICAgICByZXN0cmljdDogJ0EnLFxuICogICAgICAgdGVtcGxhdGVOYW1lc3BhY2U6ICdodG1sJyxcbiAqICAgICAgIHNjb3BlOiBmYWxzZSxcbiAqICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJHRyYW5zY2x1ZGUsIG90aGVySW5qZWN0YWJsZXMpIHsgLi4uIH0sXG4gKiAgICAgICBjb250cm9sbGVyQXM6ICdzdHJpbmdJZGVudGlmaWVyJyxcbiAqICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IGZhbHNlLFxuICogICAgICAgcmVxdWlyZTogJ3NpYmxpbmdEaXJlY3RpdmVOYW1lJywgLy8gb3IgLy8gWydecGFyZW50RGlyZWN0aXZlTmFtZScsICc/b3B0aW9uYWxEaXJlY3RpdmVOYW1lJywgJz9eb3B0aW9uYWxQYXJlbnQnXSxcbiAqICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIGNvbXBpbGUodEVsZW1lbnQsIHRBdHRycywgdHJhbnNjbHVkZSkge1xuICogICAgICAgICByZXR1cm4ge1xuICogICAgICAgICAgIHByZTogZnVuY3Rpb24gcHJlTGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfSxcbiAqICAgICAgICAgICBwb3N0OiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfVxuICogICAgICAgICB9XG4gKiAgICAgICAgIC8vIG9yXG4gKiAgICAgICAgIC8vIHJldHVybiBmdW5jdGlvbiBwb3N0TGluayggLi4uICkgeyAuLi4gfVxuICogICAgICAgfSxcbiAqICAgICAgIC8vIG9yXG4gKiAgICAgICAvLyBsaW5rOiB7XG4gKiAgICAgICAvLyAgcHJlOiBmdW5jdGlvbiBwcmVMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyKSB7IC4uLiB9LFxuICogICAgICAgLy8gIHBvc3Q6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyKSB7IC4uLiB9XG4gKiAgICAgICAvLyB9XG4gKiAgICAgICAvLyBvclxuICogICAgICAgLy8gbGluazogZnVuY3Rpb24gcG9zdExpbmsoIC4uLiApIHsgLi4uIH1cbiAqICAgICB9O1xuICogICAgIHJldHVybiBkaXJlY3RpdmVEZWZpbml0aW9uT2JqZWN0O1xuICogICB9KTtcbiAqIGBgYFxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogQW55IHVuc3BlY2lmaWVkIG9wdGlvbnMgd2lsbCB1c2UgdGhlIGRlZmF1bHQgdmFsdWUuIFlvdSBjYW4gc2VlIHRoZSBkZWZhdWx0IHZhbHVlcyBiZWxvdy5cbiAqIDwvZGl2PlxuICpcbiAqIFRoZXJlZm9yZSB0aGUgYWJvdmUgY2FuIGJlIHNpbXBsaWZpZWQgYXM6XG4gKlxuICogYGBganNcbiAqICAgdmFyIG15TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoLi4uKTtcbiAqXG4gKiAgIG15TW9kdWxlLmRpcmVjdGl2ZSgnZGlyZWN0aXZlTmFtZScsIGZ1bmN0aW9uIGZhY3RvcnkoaW5qZWN0YWJsZXMpIHtcbiAqICAgICB2YXIgZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdCA9IHtcbiAqICAgICAgIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzKSB7IC4uLiB9XG4gKiAgICAgfTtcbiAqICAgICByZXR1cm4gZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdDtcbiAqICAgICAvLyBvclxuICogICAgIC8vIHJldHVybiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycykgeyAuLi4gfVxuICogICB9KTtcbiAqIGBgYFxuICpcbiAqXG4gKlxuICogIyMjIERpcmVjdGl2ZSBEZWZpbml0aW9uIE9iamVjdFxuICpcbiAqIFRoZSBkaXJlY3RpdmUgZGVmaW5pdGlvbiBvYmplY3QgcHJvdmlkZXMgaW5zdHJ1Y3Rpb25zIHRvIHRoZSB7QGxpbmsgbmcuJGNvbXBpbGVcbiAqIGNvbXBpbGVyfS4gVGhlIGF0dHJpYnV0ZXMgYXJlOlxuICpcbiAqICMjIyMgYG11bHRpRWxlbWVudGBcbiAqIFdoZW4gdGhpcyBwcm9wZXJ0eSBpcyBzZXQgdG8gdHJ1ZSwgdGhlIEhUTUwgY29tcGlsZXIgd2lsbCBjb2xsZWN0IERPTSBub2RlcyBiZXR3ZWVuXG4gKiBub2RlcyB3aXRoIHRoZSBhdHRyaWJ1dGVzIGBkaXJlY3RpdmUtbmFtZS1zdGFydGAgYW5kIGBkaXJlY3RpdmUtbmFtZS1lbmRgLCBhbmQgZ3JvdXAgdGhlbVxuICogdG9nZXRoZXIgYXMgdGhlIGRpcmVjdGl2ZSBlbGVtZW50cy4gSXQgaXMgcmVjb21tZW5kZWQgdGhhdCB0aGlzIGZlYXR1cmUgYmUgdXNlZCBvbiBkaXJlY3RpdmVzXG4gKiB3aGljaCBhcmUgbm90IHN0cmljdGx5IGJlaGF2aW91cmFsIChzdWNoIGFzIHtAbGluayBuZ0NsaWNrfSksIGFuZCB3aGljaFxuICogZG8gbm90IG1hbmlwdWxhdGUgb3IgcmVwbGFjZSBjaGlsZCBub2RlcyAoc3VjaCBhcyB7QGxpbmsgbmdJbmNsdWRlfSkuXG4gKlxuICogIyMjIyBgcHJpb3JpdHlgXG4gKiBXaGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBkaXJlY3RpdmVzIGRlZmluZWQgb24gYSBzaW5nbGUgRE9NIGVsZW1lbnQsIHNvbWV0aW1lcyBpdFxuICogaXMgbmVjZXNzYXJ5IHRvIHNwZWNpZnkgdGhlIG9yZGVyIGluIHdoaWNoIHRoZSBkaXJlY3RpdmVzIGFyZSBhcHBsaWVkLiBUaGUgYHByaW9yaXR5YCBpcyB1c2VkXG4gKiB0byBzb3J0IHRoZSBkaXJlY3RpdmVzIGJlZm9yZSB0aGVpciBgY29tcGlsZWAgZnVuY3Rpb25zIGdldCBjYWxsZWQuIFByaW9yaXR5IGlzIGRlZmluZWQgYXMgYVxuICogbnVtYmVyLiBEaXJlY3RpdmVzIHdpdGggZ3JlYXRlciBudW1lcmljYWwgYHByaW9yaXR5YCBhcmUgY29tcGlsZWQgZmlyc3QuIFByZS1saW5rIGZ1bmN0aW9uc1xuICogYXJlIGFsc28gcnVuIGluIHByaW9yaXR5IG9yZGVyLCBidXQgcG9zdC1saW5rIGZ1bmN0aW9ucyBhcmUgcnVuIGluIHJldmVyc2Ugb3JkZXIuIFRoZSBvcmRlclxuICogb2YgZGlyZWN0aXZlcyB3aXRoIHRoZSBzYW1lIHByaW9yaXR5IGlzIHVuZGVmaW5lZC4gVGhlIGRlZmF1bHQgcHJpb3JpdHkgaXMgYDBgLlxuICpcbiAqICMjIyMgYHRlcm1pbmFsYFxuICogSWYgc2V0IHRvIHRydWUgdGhlbiB0aGUgY3VycmVudCBgcHJpb3JpdHlgIHdpbGwgYmUgdGhlIGxhc3Qgc2V0IG9mIGRpcmVjdGl2ZXNcbiAqIHdoaWNoIHdpbGwgZXhlY3V0ZSAoYW55IGRpcmVjdGl2ZXMgYXQgdGhlIGN1cnJlbnQgcHJpb3JpdHkgd2lsbCBzdGlsbCBleGVjdXRlXG4gKiBhcyB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uIG9uIHNhbWUgYHByaW9yaXR5YCBpcyB1bmRlZmluZWQpLiBOb3RlIHRoYXQgZXhwcmVzc2lvbnNcbiAqIGFuZCBvdGhlciBkaXJlY3RpdmVzIHVzZWQgaW4gdGhlIGRpcmVjdGl2ZSdzIHRlbXBsYXRlIHdpbGwgYWxzbyBiZSBleGNsdWRlZCBmcm9tIGV4ZWN1dGlvbi5cbiAqXG4gKiAjIyMjIGBzY29wZWBcbiAqICoqSWYgc2V0IHRvIGB0cnVlYCwqKiB0aGVuIGEgbmV3IHNjb3BlIHdpbGwgYmUgY3JlYXRlZCBmb3IgdGhpcyBkaXJlY3RpdmUuIElmIG11bHRpcGxlIGRpcmVjdGl2ZXMgb24gdGhlXG4gKiBzYW1lIGVsZW1lbnQgcmVxdWVzdCBhIG5ldyBzY29wZSwgb25seSBvbmUgbmV3IHNjb3BlIGlzIGNyZWF0ZWQuIFRoZSBuZXcgc2NvcGUgcnVsZSBkb2VzIG5vdFxuICogYXBwbHkgZm9yIHRoZSByb290IG9mIHRoZSB0ZW1wbGF0ZSBzaW5jZSB0aGUgcm9vdCBvZiB0aGUgdGVtcGxhdGUgYWx3YXlzIGdldHMgYSBuZXcgc2NvcGUuXG4gKlxuICogKipJZiBzZXQgdG8gYHt9YCAob2JqZWN0IGhhc2gpLCoqIHRoZW4gYSBuZXcgXCJpc29sYXRlXCIgc2NvcGUgaXMgY3JlYXRlZC4gVGhlICdpc29sYXRlJyBzY29wZSBkaWZmZXJzIGZyb21cbiAqIG5vcm1hbCBzY29wZSBpbiB0aGF0IGl0IGRvZXMgbm90IHByb3RvdHlwaWNhbGx5IGluaGVyaXQgZnJvbSB0aGUgcGFyZW50IHNjb3BlLiBUaGlzIGlzIHVzZWZ1bFxuICogd2hlbiBjcmVhdGluZyByZXVzYWJsZSBjb21wb25lbnRzLCB3aGljaCBzaG91bGQgbm90IGFjY2lkZW50YWxseSByZWFkIG9yIG1vZGlmeSBkYXRhIGluIHRoZVxuICogcGFyZW50IHNjb3BlLlxuICpcbiAqIFRoZSAnaXNvbGF0ZScgc2NvcGUgdGFrZXMgYW4gb2JqZWN0IGhhc2ggd2hpY2ggZGVmaW5lcyBhIHNldCBvZiBsb2NhbCBzY29wZSBwcm9wZXJ0aWVzXG4gKiBkZXJpdmVkIGZyb20gdGhlIHBhcmVudCBzY29wZS4gVGhlc2UgbG9jYWwgcHJvcGVydGllcyBhcmUgdXNlZnVsIGZvciBhbGlhc2luZyB2YWx1ZXMgZm9yXG4gKiB0ZW1wbGF0ZXMuIExvY2FscyBkZWZpbml0aW9uIGlzIGEgaGFzaCBvZiBsb2NhbCBzY29wZSBwcm9wZXJ0eSB0byBpdHMgc291cmNlOlxuICpcbiAqICogYEBgIG9yIGBAYXR0cmAgLSBiaW5kIGEgbG9jYWwgc2NvcGUgcHJvcGVydHkgdG8gdGhlIHZhbHVlIG9mIERPTSBhdHRyaWJ1dGUuIFRoZSByZXN1bHQgaXNcbiAqICAgYWx3YXlzIGEgc3RyaW5nIHNpbmNlIERPTSBhdHRyaWJ1dGVzIGFyZSBzdHJpbmdzLiBJZiBubyBgYXR0cmAgbmFtZSBpcyBzcGVjaWZpZWQgIHRoZW4gdGhlXG4gKiAgIGF0dHJpYnV0ZSBuYW1lIGlzIGFzc3VtZWQgdG8gYmUgdGhlIHNhbWUgYXMgdGhlIGxvY2FsIG5hbWUuXG4gKiAgIEdpdmVuIGA8d2lkZ2V0IG15LWF0dHI9XCJoZWxsbyB7e25hbWV9fVwiPmAgYW5kIHdpZGdldCBkZWZpbml0aW9uXG4gKiAgIG9mIGBzY29wZTogeyBsb2NhbE5hbWU6J0BteUF0dHInIH1gLCB0aGVuIHdpZGdldCBzY29wZSBwcm9wZXJ0eSBgbG9jYWxOYW1lYCB3aWxsIHJlZmxlY3RcbiAqICAgdGhlIGludGVycG9sYXRlZCB2YWx1ZSBvZiBgaGVsbG8ge3tuYW1lfX1gLiBBcyB0aGUgYG5hbWVgIGF0dHJpYnV0ZSBjaGFuZ2VzIHNvIHdpbGwgdGhlXG4gKiAgIGBsb2NhbE5hbWVgIHByb3BlcnR5IG9uIHRoZSB3aWRnZXQgc2NvcGUuIFRoZSBgbmFtZWAgaXMgcmVhZCBmcm9tIHRoZSBwYXJlbnQgc2NvcGUgKG5vdFxuICogICBjb21wb25lbnQgc2NvcGUpLlxuICpcbiAqICogYD1gIG9yIGA9YXR0cmAgLSBzZXQgdXAgYmktZGlyZWN0aW9uYWwgYmluZGluZyBiZXR3ZWVuIGEgbG9jYWwgc2NvcGUgcHJvcGVydHkgYW5kIHRoZVxuICogICBwYXJlbnQgc2NvcGUgcHJvcGVydHkgb2YgbmFtZSBkZWZpbmVkIHZpYSB0aGUgdmFsdWUgb2YgdGhlIGBhdHRyYCBhdHRyaWJ1dGUuIElmIG5vIGBhdHRyYFxuICogICBuYW1lIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBsb2NhbCBuYW1lLlxuICogICBHaXZlbiBgPHdpZGdldCBteS1hdHRyPVwicGFyZW50TW9kZWxcIj5gIGFuZCB3aWRnZXQgZGVmaW5pdGlvbiBvZlxuICogICBgc2NvcGU6IHsgbG9jYWxNb2RlbDonPW15QXR0cicgfWAsIHRoZW4gd2lkZ2V0IHNjb3BlIHByb3BlcnR5IGBsb2NhbE1vZGVsYCB3aWxsIHJlZmxlY3QgdGhlXG4gKiAgIHZhbHVlIG9mIGBwYXJlbnRNb2RlbGAgb24gdGhlIHBhcmVudCBzY29wZS4gQW55IGNoYW5nZXMgdG8gYHBhcmVudE1vZGVsYCB3aWxsIGJlIHJlZmxlY3RlZFxuICogICBpbiBgbG9jYWxNb2RlbGAgYW5kIGFueSBjaGFuZ2VzIGluIGBsb2NhbE1vZGVsYCB3aWxsIHJlZmxlY3QgaW4gYHBhcmVudE1vZGVsYC4gSWYgdGhlIHBhcmVudFxuICogICBzY29wZSBwcm9wZXJ0eSBkb2Vzbid0IGV4aXN0LCBpdCB3aWxsIHRocm93IGEgTk9OX0FTU0lHTkFCTEVfTU9ERUxfRVhQUkVTU0lPTiBleGNlcHRpb24uIFlvdVxuICogICBjYW4gYXZvaWQgdGhpcyBiZWhhdmlvciB1c2luZyBgPT9gIG9yIGA9P2F0dHJgIGluIG9yZGVyIHRvIGZsYWcgdGhlIHByb3BlcnR5IGFzIG9wdGlvbmFsLiBJZlxuICogICB5b3Ugd2FudCB0byBzaGFsbG93IHdhdGNoIGZvciBjaGFuZ2VzIChpLmUuICR3YXRjaENvbGxlY3Rpb24gaW5zdGVhZCBvZiAkd2F0Y2gpIHlvdSBjYW4gdXNlXG4gKiAgIGA9KmAgb3IgYD0qYXR0cmAgKGA9Kj9gIG9yIGA9Kj9hdHRyYCBpZiB0aGUgcHJvcGVydHkgaXMgb3B0aW9uYWwpLlxuICpcbiAqICogYCZgIG9yIGAmYXR0cmAgLSBwcm92aWRlcyBhIHdheSB0byBleGVjdXRlIGFuIGV4cHJlc3Npb24gaW4gdGhlIGNvbnRleHQgb2YgdGhlIHBhcmVudCBzY29wZS5cbiAqICAgSWYgbm8gYGF0dHJgIG5hbWUgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGF0dHJpYnV0ZSBuYW1lIGlzIGFzc3VtZWQgdG8gYmUgdGhlIHNhbWUgYXMgdGhlXG4gKiAgIGxvY2FsIG5hbWUuIEdpdmVuIGA8d2lkZ2V0IG15LWF0dHI9XCJjb3VudCA9IGNvdW50ICsgdmFsdWVcIj5gIGFuZCB3aWRnZXQgZGVmaW5pdGlvbiBvZlxuICogICBgc2NvcGU6IHsgbG9jYWxGbjonJm15QXR0cicgfWAsIHRoZW4gaXNvbGF0ZSBzY29wZSBwcm9wZXJ0eSBgbG9jYWxGbmAgd2lsbCBwb2ludCB0b1xuICogICBhIGZ1bmN0aW9uIHdyYXBwZXIgZm9yIHRoZSBgY291bnQgPSBjb3VudCArIHZhbHVlYCBleHByZXNzaW9uLiBPZnRlbiBpdCdzIGRlc2lyYWJsZSB0b1xuICogICBwYXNzIGRhdGEgZnJvbSB0aGUgaXNvbGF0ZWQgc2NvcGUgdmlhIGFuIGV4cHJlc3Npb24gdG8gdGhlIHBhcmVudCBzY29wZSwgdGhpcyBjYW4gYmVcbiAqICAgZG9uZSBieSBwYXNzaW5nIGEgbWFwIG9mIGxvY2FsIHZhcmlhYmxlIG5hbWVzIGFuZCB2YWx1ZXMgaW50byB0aGUgZXhwcmVzc2lvbiB3cmFwcGVyIGZuLlxuICogICBGb3IgZXhhbXBsZSwgaWYgdGhlIGV4cHJlc3Npb24gaXMgYGluY3JlbWVudChhbW91bnQpYCB0aGVuIHdlIGNhbiBzcGVjaWZ5IHRoZSBhbW91bnQgdmFsdWVcbiAqICAgYnkgY2FsbGluZyB0aGUgYGxvY2FsRm5gIGFzIGBsb2NhbEZuKHthbW91bnQ6IDIyfSlgLlxuICpcbiAqXG4gKiAjIyMjIGBiaW5kVG9Db250cm9sbGVyYFxuICogV2hlbiBhbiBpc29sYXRlIHNjb3BlIGlzIHVzZWQgZm9yIGEgY29tcG9uZW50IChzZWUgYWJvdmUpLCBhbmQgYGNvbnRyb2xsZXJBc2AgaXMgdXNlZCwgYGJpbmRUb0NvbnRyb2xsZXI6IHRydWVgIHdpbGxcbiAqIGFsbG93IGEgY29tcG9uZW50IHRvIGhhdmUgaXRzIHByb3BlcnRpZXMgYm91bmQgdG8gdGhlIGNvbnRyb2xsZXIsIHJhdGhlciB0aGFuIHRvIHNjb3BlLiBXaGVuIHRoZSBjb250cm9sbGVyXG4gKiBpcyBpbnN0YW50aWF0ZWQsIHRoZSBpbml0aWFsIHZhbHVlcyBvZiB0aGUgaXNvbGF0ZSBzY29wZSBiaW5kaW5ncyBhcmUgYWxyZWFkeSBhdmFpbGFibGUuXG4gKlxuICogIyMjIyBgY29udHJvbGxlcmBcbiAqIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uIFRoZSBjb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZCBiZWZvcmUgdGhlXG4gKiBwcmUtbGlua2luZyBwaGFzZSBhbmQgaXQgaXMgc2hhcmVkIHdpdGggb3RoZXIgZGlyZWN0aXZlcyAoc2VlXG4gKiBgcmVxdWlyZWAgYXR0cmlidXRlKS4gVGhpcyBhbGxvd3MgdGhlIGRpcmVjdGl2ZXMgdG8gY29tbXVuaWNhdGUgd2l0aCBlYWNoIG90aGVyIGFuZCBhdWdtZW50XG4gKiBlYWNoIG90aGVyJ3MgYmVoYXZpb3IuIFRoZSBjb250cm9sbGVyIGlzIGluamVjdGFibGUgKGFuZCBzdXBwb3J0cyBicmFja2V0IG5vdGF0aW9uKSB3aXRoIHRoZSBmb2xsb3dpbmcgbG9jYWxzOlxuICpcbiAqICogYCRzY29wZWAgLSBDdXJyZW50IHNjb3BlIGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudFxuICogKiBgJGVsZW1lbnRgIC0gQ3VycmVudCBlbGVtZW50XG4gKiAqIGAkYXR0cnNgIC0gQ3VycmVudCBhdHRyaWJ1dGVzIG9iamVjdCBmb3IgdGhlIGVsZW1lbnRcbiAqICogYCR0cmFuc2NsdWRlYCAtIEEgdHJhbnNjbHVkZSBsaW5raW5nIGZ1bmN0aW9uIHByZS1ib3VuZCB0byB0aGUgY29ycmVjdCB0cmFuc2NsdXNpb24gc2NvcGU6XG4gKiAgIGBmdW5jdGlvbihbc2NvcGVdLCBjbG9uZUxpbmtpbmdGbiwgZnV0dXJlUGFyZW50RWxlbWVudClgLlxuICogICAgKiBgc2NvcGVgOiBvcHRpb25hbCBhcmd1bWVudCB0byBvdmVycmlkZSB0aGUgc2NvcGUuXG4gKiAgICAqIGBjbG9uZUxpbmtpbmdGbmA6IG9wdGlvbmFsIGFyZ3VtZW50IHRvIGNyZWF0ZSBjbG9uZXMgb2YgdGhlIG9yaWdpbmFsIHRyYW5zY2x1ZGVkIGNvbnRlbnQuXG4gKiAgICAqIGBmdXR1cmVQYXJlbnRFbGVtZW50YDpcbiAqICAgICAgICAqIGRlZmluZXMgdGhlIHBhcmVudCB0byB3aGljaCB0aGUgYGNsb25lTGlua2luZ0ZuYCB3aWxsIGFkZCB0aGUgY2xvbmVkIGVsZW1lbnRzLlxuICogICAgICAgICogZGVmYXVsdDogYCRlbGVtZW50LnBhcmVudCgpYCByZXNwLiBgJGVsZW1lbnRgIGZvciBgdHJhbnNjbHVkZTonZWxlbWVudCdgIHJlc3AuIGB0cmFuc2NsdWRlOnRydWVgLlxuICogICAgICAgICogb25seSBuZWVkZWQgZm9yIHRyYW5zY2x1ZGVzIHRoYXQgYXJlIGFsbG93ZWQgdG8gY29udGFpbiBub24gaHRtbCBlbGVtZW50cyAoZS5nLiBTVkcgZWxlbWVudHMpXG4gKiAgICAgICAgICBhbmQgd2hlbiB0aGUgYGNsb25lTGlua2luRm5gIGlzIHBhc3NlZCxcbiAqICAgICAgICAgIGFzIHRob3NlIGVsZW1lbnRzIG5lZWQgdG8gY3JlYXRlZCBhbmQgY2xvbmVkIGluIGEgc3BlY2lhbCB3YXkgd2hlbiB0aGV5IGFyZSBkZWZpbmVkIG91dHNpZGUgdGhlaXJcbiAqICAgICAgICAgIHVzdWFsIGNvbnRhaW5lcnMgKGUuZy4gbGlrZSBgPHN2Zz5gKS5cbiAqICAgICAgICAqIFNlZSBhbHNvIHRoZSBgZGlyZWN0aXZlLnRlbXBsYXRlTmFtZXNwYWNlYCBwcm9wZXJ0eS5cbiAqXG4gKlxuICogIyMjIyBgcmVxdWlyZWBcbiAqIFJlcXVpcmUgYW5vdGhlciBkaXJlY3RpdmUgYW5kIGluamVjdCBpdHMgY29udHJvbGxlciBhcyB0aGUgZm91cnRoIGFyZ3VtZW50IHRvIHRoZSBsaW5raW5nIGZ1bmN0aW9uLiBUaGVcbiAqIGByZXF1aXJlYCB0YWtlcyBhIHN0cmluZyBuYW1lIChvciBhcnJheSBvZiBzdHJpbmdzKSBvZiB0aGUgZGlyZWN0aXZlKHMpIHRvIHBhc3MgaW4uIElmIGFuIGFycmF5IGlzIHVzZWQsIHRoZVxuICogaW5qZWN0ZWQgYXJndW1lbnQgd2lsbCBiZSBhbiBhcnJheSBpbiBjb3JyZXNwb25kaW5nIG9yZGVyLiBJZiBubyBzdWNoIGRpcmVjdGl2ZSBjYW4gYmVcbiAqIGZvdW5kLCBvciBpZiB0aGUgZGlyZWN0aXZlIGRvZXMgbm90IGhhdmUgYSBjb250cm9sbGVyLCB0aGVuIGFuIGVycm9yIGlzIHJhaXNlZCAodW5sZXNzIG5vIGxpbmsgZnVuY3Rpb25cbiAqIGlzIHNwZWNpZmllZCwgaW4gd2hpY2ggY2FzZSBlcnJvciBjaGVja2luZyBpcyBza2lwcGVkKS4gVGhlIG5hbWUgY2FuIGJlIHByZWZpeGVkIHdpdGg6XG4gKlxuICogKiAobm8gcHJlZml4KSAtIExvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBvbiB0aGUgY3VycmVudCBlbGVtZW50LiBUaHJvdyBhbiBlcnJvciBpZiBub3QgZm91bmQuXG4gKiAqIGA/YCAtIEF0dGVtcHQgdG8gbG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIG9yIHBhc3MgYG51bGxgIHRvIHRoZSBgbGlua2AgZm4gaWYgbm90IGZvdW5kLlxuICogKiBgXmAgLSBMb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50IGFuZCBpdHMgcGFyZW50cy4gVGhyb3cgYW4gZXJyb3IgaWYgbm90IGZvdW5kLlxuICogKiBgXl5gIC0gTG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIGJ5IHNlYXJjaGluZyB0aGUgZWxlbWVudCdzIHBhcmVudHMuIFRocm93IGFuIGVycm9yIGlmIG5vdCBmb3VuZC5cbiAqICogYD9eYCAtIEF0dGVtcHQgdG8gbG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIGJ5IHNlYXJjaGluZyB0aGUgZWxlbWVudCBhbmQgaXRzIHBhcmVudHMgb3IgcGFzc1xuICogICBgbnVsbGAgdG8gdGhlIGBsaW5rYCBmbiBpZiBub3QgZm91bmQuXG4gKiAqIGA/Xl5gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50J3MgcGFyZW50cywgb3IgcGFzc1xuICogICBgbnVsbGAgdG8gdGhlIGBsaW5rYCBmbiBpZiBub3QgZm91bmQuXG4gKlxuICpcbiAqICMjIyMgYGNvbnRyb2xsZXJBc2BcbiAqIElkZW50aWZpZXIgbmFtZSBmb3IgYSByZWZlcmVuY2UgdG8gdGhlIGNvbnRyb2xsZXIgaW4gdGhlIGRpcmVjdGl2ZSdzIHNjb3BlLlxuICogVGhpcyBhbGxvd3MgdGhlIGNvbnRyb2xsZXIgdG8gYmUgcmVmZXJlbmNlZCBmcm9tIHRoZSBkaXJlY3RpdmUgdGVtcGxhdGUuIFRoZSBkaXJlY3RpdmVcbiAqIG5lZWRzIHRvIGRlZmluZSBhIHNjb3BlIGZvciB0aGlzIGNvbmZpZ3VyYXRpb24gdG8gYmUgdXNlZC4gVXNlZnVsIGluIHRoZSBjYXNlIHdoZW5cbiAqIGRpcmVjdGl2ZSBpcyB1c2VkIGFzIGNvbXBvbmVudC5cbiAqXG4gKlxuICogIyMjIyBgcmVzdHJpY3RgXG4gKiBTdHJpbmcgb2Ygc3Vic2V0IG9mIGBFQUNNYCB3aGljaCByZXN0cmljdHMgdGhlIGRpcmVjdGl2ZSB0byBhIHNwZWNpZmljIGRpcmVjdGl2ZVxuICogZGVjbGFyYXRpb24gc3R5bGUuIElmIG9taXR0ZWQsIHRoZSBkZWZhdWx0cyAoZWxlbWVudHMgYW5kIGF0dHJpYnV0ZXMpIGFyZSB1c2VkLlxuICpcbiAqICogYEVgIC0gRWxlbWVudCBuYW1lIChkZWZhdWx0KTogYDxteS1kaXJlY3RpdmU+PC9teS1kaXJlY3RpdmU+YFxuICogKiBgQWAgLSBBdHRyaWJ1dGUgKGRlZmF1bHQpOiBgPGRpdiBteS1kaXJlY3RpdmU9XCJleHBcIj48L2Rpdj5gXG4gKiAqIGBDYCAtIENsYXNzOiBgPGRpdiBjbGFzcz1cIm15LWRpcmVjdGl2ZTogZXhwO1wiPjwvZGl2PmBcbiAqICogYE1gIC0gQ29tbWVudDogYDwhLS0gZGlyZWN0aXZlOiBteS1kaXJlY3RpdmUgZXhwIC0tPmBcbiAqXG4gKlxuICogIyMjIyBgdGVtcGxhdGVOYW1lc3BhY2VgXG4gKiBTdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBkb2N1bWVudCB0eXBlIHVzZWQgYnkgdGhlIG1hcmt1cCBpbiB0aGUgdGVtcGxhdGUuXG4gKiBBbmd1bGFySlMgbmVlZHMgdGhpcyBpbmZvcm1hdGlvbiBhcyB0aG9zZSBlbGVtZW50cyBuZWVkIHRvIGJlIGNyZWF0ZWQgYW5kIGNsb25lZFxuICogaW4gYSBzcGVjaWFsIHdheSB3aGVuIHRoZXkgYXJlIGRlZmluZWQgb3V0c2lkZSB0aGVpciB1c3VhbCBjb250YWluZXJzIGxpa2UgYDxzdmc+YCBhbmQgYDxtYXRoPmAuXG4gKlxuICogKiBgaHRtbGAgLSBBbGwgcm9vdCBub2RlcyBpbiB0aGUgdGVtcGxhdGUgYXJlIEhUTUwuIFJvb3Qgbm9kZXMgbWF5IGFsc28gYmVcbiAqICAgdG9wLWxldmVsIGVsZW1lbnRzIHN1Y2ggYXMgYDxzdmc+YCBvciBgPG1hdGg+YC5cbiAqICogYHN2Z2AgLSBUaGUgcm9vdCBub2RlcyBpbiB0aGUgdGVtcGxhdGUgYXJlIFNWRyBlbGVtZW50cyAoZXhjbHVkaW5nIGA8bWF0aD5gKS5cbiAqICogYG1hdGhgIC0gVGhlIHJvb3Qgbm9kZXMgaW4gdGhlIHRlbXBsYXRlIGFyZSBNYXRoTUwgZWxlbWVudHMgKGV4Y2x1ZGluZyBgPHN2Zz5gKS5cbiAqXG4gKiBJZiBubyBgdGVtcGxhdGVOYW1lc3BhY2VgIGlzIHNwZWNpZmllZCwgdGhlbiB0aGUgbmFtZXNwYWNlIGlzIGNvbnNpZGVyZWQgdG8gYmUgYGh0bWxgLlxuICpcbiAqICMjIyMgYHRlbXBsYXRlYFxuICogSFRNTCBtYXJrdXAgdGhhdCBtYXk6XG4gKiAqIFJlcGxhY2UgdGhlIGNvbnRlbnRzIG9mIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50IChkZWZhdWx0KS5cbiAqICogUmVwbGFjZSB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudCBpdHNlbGYgKGlmIGByZXBsYWNlYCBpcyB0cnVlIC0gREVQUkVDQVRFRCkuXG4gKiAqIFdyYXAgdGhlIGNvbnRlbnRzIG9mIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50IChpZiBgdHJhbnNjbHVkZWAgaXMgdHJ1ZSkuXG4gKlxuICogVmFsdWUgbWF5IGJlOlxuICpcbiAqICogQSBzdHJpbmcuIEZvciBleGFtcGxlIGA8ZGl2IHJlZC1vbi1ob3Zlcj57e2RlbGV0ZV9zdHJ9fTwvZGl2PmAuXG4gKiAqIEEgZnVuY3Rpb24gd2hpY2ggdGFrZXMgdHdvIGFyZ3VtZW50cyBgdEVsZW1lbnRgIGFuZCBgdEF0dHJzYCAoZGVzY3JpYmVkIGluIHRoZSBgY29tcGlsZWBcbiAqICAgZnVuY3Rpb24gYXBpIGJlbG93KSBhbmQgcmV0dXJucyBhIHN0cmluZyB2YWx1ZS5cbiAqXG4gKlxuICogIyMjIyBgdGVtcGxhdGVVcmxgXG4gKiBUaGlzIGlzIHNpbWlsYXIgdG8gYHRlbXBsYXRlYCBidXQgdGhlIHRlbXBsYXRlIGlzIGxvYWRlZCBmcm9tIHRoZSBzcGVjaWZpZWQgVVJMLCBhc3luY2hyb25vdXNseS5cbiAqXG4gKiBCZWNhdXNlIHRlbXBsYXRlIGxvYWRpbmcgaXMgYXN5bmNocm9ub3VzIHRoZSBjb21waWxlciB3aWxsIHN1c3BlbmQgY29tcGlsYXRpb24gb2YgZGlyZWN0aXZlcyBvbiB0aGF0IGVsZW1lbnRcbiAqIGZvciBsYXRlciB3aGVuIHRoZSB0ZW1wbGF0ZSBoYXMgYmVlbiByZXNvbHZlZC4gIEluIHRoZSBtZWFudGltZSBpdCB3aWxsIGNvbnRpbnVlIHRvIGNvbXBpbGUgYW5kIGxpbmtcbiAqIHNpYmxpbmcgYW5kIHBhcmVudCBlbGVtZW50cyBhcyB0aG91Z2ggdGhpcyBlbGVtZW50IGhhZCBub3QgY29udGFpbmVkIGFueSBkaXJlY3RpdmVzLlxuICpcbiAqIFRoZSBjb21waWxlciBkb2VzIG5vdCBzdXNwZW5kIHRoZSBlbnRpcmUgY29tcGlsYXRpb24gdG8gd2FpdCBmb3IgdGVtcGxhdGVzIHRvIGJlIGxvYWRlZCBiZWNhdXNlIHRoaXNcbiAqIHdvdWxkIHJlc3VsdCBpbiB0aGUgd2hvbGUgYXBwIFwic3RhbGxpbmdcIiB1bnRpbCBhbGwgdGVtcGxhdGVzIGFyZSBsb2FkZWQgYXN5bmNocm9ub3VzbHkgLSBldmVuIGluIHRoZVxuICogY2FzZSB3aGVuIG9ubHkgb25lIGRlZXBseSBuZXN0ZWQgZGlyZWN0aXZlIGhhcyBgdGVtcGxhdGVVcmxgLlxuICpcbiAqIFRlbXBsYXRlIGxvYWRpbmcgaXMgYXN5bmNocm9ub3VzIGV2ZW4gaWYgdGhlIHRlbXBsYXRlIGhhcyBiZWVuIHByZWxvYWRlZCBpbnRvIHRoZSB7QGxpbmsgJHRlbXBsYXRlQ2FjaGV9XG4gKlxuICogWW91IGNhbiBzcGVjaWZ5IGB0ZW1wbGF0ZVVybGAgYXMgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBVUkwgb3IgYXMgYSBmdW5jdGlvbiB3aGljaCB0YWtlcyB0d29cbiAqIGFyZ3VtZW50cyBgdEVsZW1lbnRgIGFuZCBgdEF0dHJzYCAoZGVzY3JpYmVkIGluIHRoZSBgY29tcGlsZWAgZnVuY3Rpb24gYXBpIGJlbG93KSBhbmQgcmV0dXJuc1xuICogYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSB1cmwuICBJbiBlaXRoZXIgY2FzZSwgdGhlIHRlbXBsYXRlIFVSTCBpcyBwYXNzZWQgdGhyb3VnaCB7QGxpbmtcbiAqICRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsfS5cbiAqXG4gKlxuICogIyMjIyBgcmVwbGFjZWAgKFsqREVQUkVDQVRFRCohXSwgd2lsbCBiZSByZW1vdmVkIGluIG5leHQgbWFqb3IgcmVsZWFzZSAtIGkuZS4gdjIuMClcbiAqIHNwZWNpZnkgd2hhdCB0aGUgdGVtcGxhdGUgc2hvdWxkIHJlcGxhY2UuIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gKlxuICogKiBgdHJ1ZWAgLSB0aGUgdGVtcGxhdGUgd2lsbCByZXBsYWNlIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50LlxuICogKiBgZmFsc2VgIC0gdGhlIHRlbXBsYXRlIHdpbGwgcmVwbGFjZSB0aGUgY29udGVudHMgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQuXG4gKlxuICogVGhlIHJlcGxhY2VtZW50IHByb2Nlc3MgbWlncmF0ZXMgYWxsIG9mIHRoZSBhdHRyaWJ1dGVzIC8gY2xhc3NlcyBmcm9tIHRoZSBvbGQgZWxlbWVudCB0byB0aGUgbmV3XG4gKiBvbmUuIFNlZSB0aGUge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSN0ZW1wbGF0ZS1leHBhbmRpbmctZGlyZWN0aXZlXG4gKiBEaXJlY3RpdmVzIEd1aWRlfSBmb3IgYW4gZXhhbXBsZS5cbiAqXG4gKiBUaGVyZSBhcmUgdmVyeSBmZXcgc2NlbmFyaW9zIHdoZXJlIGVsZW1lbnQgcmVwbGFjZW1lbnQgaXMgcmVxdWlyZWQgZm9yIHRoZSBhcHBsaWNhdGlvbiBmdW5jdGlvbixcbiAqIHRoZSBtYWluIG9uZSBiZWluZyByZXVzYWJsZSBjdXN0b20gY29tcG9uZW50cyB0aGF0IGFyZSB1c2VkIHdpdGhpbiBTVkcgY29udGV4dHNcbiAqIChiZWNhdXNlIFNWRyBkb2Vzbid0IHdvcmsgd2l0aCBjdXN0b20gZWxlbWVudHMgaW4gdGhlIERPTSB0cmVlKS5cbiAqXG4gKiAjIyMjIGB0cmFuc2NsdWRlYFxuICogRXh0cmFjdCB0aGUgY29udGVudHMgb2YgdGhlIGVsZW1lbnQgd2hlcmUgdGhlIGRpcmVjdGl2ZSBhcHBlYXJzIGFuZCBtYWtlIGl0IGF2YWlsYWJsZSB0byB0aGUgZGlyZWN0aXZlLlxuICogVGhlIGNvbnRlbnRzIGFyZSBjb21waWxlZCBhbmQgcHJvdmlkZWQgdG8gdGhlIGRpcmVjdGl2ZSBhcyBhICoqdHJhbnNjbHVzaW9uIGZ1bmN0aW9uKiouIFNlZSB0aGVcbiAqIHtAbGluayAkY29tcGlsZSN0cmFuc2NsdXNpb24gVHJhbnNjbHVzaW9ufSBzZWN0aW9uIGJlbG93LlxuICpcbiAqIFRoZXJlIGFyZSB0d28ga2luZHMgb2YgdHJhbnNjbHVzaW9uIGRlcGVuZGluZyB1cG9uIHdoZXRoZXIgeW91IHdhbnQgdG8gdHJhbnNjbHVkZSBqdXN0IHRoZSBjb250ZW50cyBvZiB0aGVcbiAqIGRpcmVjdGl2ZSdzIGVsZW1lbnQgb3IgdGhlIGVudGlyZSBlbGVtZW50OlxuICpcbiAqICogYHRydWVgIC0gdHJhbnNjbHVkZSB0aGUgY29udGVudCAoaS5lLiB0aGUgY2hpbGQgbm9kZXMpIG9mIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50LlxuICogKiBgJ2VsZW1lbnQnYCAtIHRyYW5zY2x1ZGUgdGhlIHdob2xlIG9mIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50IGluY2x1ZGluZyBhbnkgZGlyZWN0aXZlcyBvbiB0aGlzXG4gKiAgIGVsZW1lbnQgdGhhdCBkZWZpbmVkIGF0IGEgbG93ZXIgcHJpb3JpdHkgdGhhbiB0aGlzIGRpcmVjdGl2ZS4gV2hlbiB1c2VkLCB0aGUgYHRlbXBsYXRlYFxuICogICBwcm9wZXJ0eSBpcyBpZ25vcmVkLlxuICpcbiAqXG4gKiAjIyMjIGBjb21waWxlYFxuICpcbiAqIGBgYGpzXG4gKiAgIGZ1bmN0aW9uIGNvbXBpbGUodEVsZW1lbnQsIHRBdHRycywgdHJhbnNjbHVkZSkgeyAuLi4gfVxuICogYGBgXG4gKlxuICogVGhlIGNvbXBpbGUgZnVuY3Rpb24gZGVhbHMgd2l0aCB0cmFuc2Zvcm1pbmcgdGhlIHRlbXBsYXRlIERPTS4gU2luY2UgbW9zdCBkaXJlY3RpdmVzIGRvIG5vdCBkb1xuICogdGVtcGxhdGUgdHJhbnNmb3JtYXRpb24sIGl0IGlzIG5vdCB1c2VkIG9mdGVuLiBUaGUgY29tcGlsZSBmdW5jdGlvbiB0YWtlcyB0aGUgZm9sbG93aW5nIGFyZ3VtZW50czpcbiAqXG4gKiAgICogYHRFbGVtZW50YCAtIHRlbXBsYXRlIGVsZW1lbnQgLSBUaGUgZWxlbWVudCB3aGVyZSB0aGUgZGlyZWN0aXZlIGhhcyBiZWVuIGRlY2xhcmVkLiBJdCBpc1xuICogICAgIHNhZmUgdG8gZG8gdGVtcGxhdGUgdHJhbnNmb3JtYXRpb24gb24gdGhlIGVsZW1lbnQgYW5kIGNoaWxkIGVsZW1lbnRzIG9ubHkuXG4gKlxuICogICAqIGB0QXR0cnNgIC0gdGVtcGxhdGUgYXR0cmlidXRlcyAtIE5vcm1hbGl6ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzIGRlY2xhcmVkIG9uIHRoaXMgZWxlbWVudCBzaGFyZWRcbiAqICAgICBiZXR3ZWVuIGFsbCBkaXJlY3RpdmUgY29tcGlsZSBmdW5jdGlvbnMuXG4gKlxuICogICAqIGB0cmFuc2NsdWRlYCAtICBbKkRFUFJFQ0FURUQqIV0gQSB0cmFuc2NsdWRlIGxpbmtpbmcgZnVuY3Rpb246IGBmdW5jdGlvbihzY29wZSwgY2xvbmVMaW5raW5nRm4pYFxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogVGhlIHRlbXBsYXRlIGluc3RhbmNlIGFuZCB0aGUgbGluayBpbnN0YW5jZSBtYXkgYmUgZGlmZmVyZW50IG9iamVjdHMgaWYgdGhlIHRlbXBsYXRlIGhhc1xuICogYmVlbiBjbG9uZWQuIEZvciB0aGlzIHJlYXNvbiBpdCBpcyAqKm5vdCoqIHNhZmUgdG8gZG8gYW55dGhpbmcgb3RoZXIgdGhhbiBET00gdHJhbnNmb3JtYXRpb25zIHRoYXRcbiAqIGFwcGx5IHRvIGFsbCBjbG9uZWQgRE9NIG5vZGVzIHdpdGhpbiB0aGUgY29tcGlsZSBmdW5jdGlvbi4gU3BlY2lmaWNhbGx5LCBET00gbGlzdGVuZXIgcmVnaXN0cmF0aW9uXG4gKiBzaG91bGQgYmUgZG9uZSBpbiBhIGxpbmtpbmcgZnVuY3Rpb24gcmF0aGVyIHRoYW4gaW4gYSBjb21waWxlIGZ1bmN0aW9uLlxuICogPC9kaXY+XG5cbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogVGhlIGNvbXBpbGUgZnVuY3Rpb24gY2Fubm90IGhhbmRsZSBkaXJlY3RpdmVzIHRoYXQgcmVjdXJzaXZlbHkgdXNlIHRoZW1zZWx2ZXMgaW4gdGhlaXJcbiAqIG93biB0ZW1wbGF0ZXMgb3IgY29tcGlsZSBmdW5jdGlvbnMuIENvbXBpbGluZyB0aGVzZSBkaXJlY3RpdmVzIHJlc3VsdHMgaW4gYW4gaW5maW5pdGUgbG9vcCBhbmQgYVxuICogc3RhY2sgb3ZlcmZsb3cgZXJyb3JzLlxuICpcbiAqIFRoaXMgY2FuIGJlIGF2b2lkZWQgYnkgbWFudWFsbHkgdXNpbmcgJGNvbXBpbGUgaW4gdGhlIHBvc3RMaW5rIGZ1bmN0aW9uIHRvIGltcGVyYXRpdmVseSBjb21waWxlXG4gKiBhIGRpcmVjdGl2ZSdzIHRlbXBsYXRlIGluc3RlYWQgb2YgcmVseWluZyBvbiBhdXRvbWF0aWMgdGVtcGxhdGUgY29tcGlsYXRpb24gdmlhIGB0ZW1wbGF0ZWAgb3JcbiAqIGB0ZW1wbGF0ZVVybGAgZGVjbGFyYXRpb24gb3IgbWFudWFsIGNvbXBpbGF0aW9uIGluc2lkZSB0aGUgY29tcGlsZSBmdW5jdGlvbi5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXJcIj5cbiAqICoqTm90ZToqKiBUaGUgYHRyYW5zY2x1ZGVgIGZ1bmN0aW9uIHRoYXQgaXMgcGFzc2VkIHRvIHRoZSBjb21waWxlIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQsIGFzIGl0XG4gKiAgIGUuZy4gZG9lcyBub3Qga25vdyBhYm91dCB0aGUgcmlnaHQgb3V0ZXIgc2NvcGUuIFBsZWFzZSB1c2UgdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gdGhhdCBpcyBwYXNzZWRcbiAqICAgdG8gdGhlIGxpbmsgZnVuY3Rpb24gaW5zdGVhZC5cbiAqIDwvZGl2PlxuXG4gKiBBIGNvbXBpbGUgZnVuY3Rpb24gY2FuIGhhdmUgYSByZXR1cm4gdmFsdWUgd2hpY2ggY2FuIGJlIGVpdGhlciBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdC5cbiAqXG4gKiAqIHJldHVybmluZyBhIChwb3N0LWxpbmspIGZ1bmN0aW9uIC0gaXMgZXF1aXZhbGVudCB0byByZWdpc3RlcmluZyB0aGUgbGlua2luZyBmdW5jdGlvbiB2aWEgdGhlXG4gKiAgIGBsaW5rYCBwcm9wZXJ0eSBvZiB0aGUgY29uZmlnIG9iamVjdCB3aGVuIHRoZSBjb21waWxlIGZ1bmN0aW9uIGlzIGVtcHR5LlxuICpcbiAqICogcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGZ1bmN0aW9uKHMpIHJlZ2lzdGVyZWQgdmlhIGBwcmVgIGFuZCBgcG9zdGAgcHJvcGVydGllcyAtIGFsbG93cyB5b3UgdG9cbiAqICAgY29udHJvbCB3aGVuIGEgbGlua2luZyBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGVkIGR1cmluZyB0aGUgbGlua2luZyBwaGFzZS4gU2VlIGluZm8gYWJvdXRcbiAqICAgcHJlLWxpbmtpbmcgYW5kIHBvc3QtbGlua2luZyBmdW5jdGlvbnMgYmVsb3cuXG4gKlxuICpcbiAqICMjIyMgYGxpbmtgXG4gKiBUaGlzIHByb3BlcnR5IGlzIHVzZWQgb25seSBpZiB0aGUgYGNvbXBpbGVgIHByb3BlcnR5IGlzIG5vdCBkZWZpbmVkLlxuICpcbiAqIGBgYGpzXG4gKiAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIsIHRyYW5zY2x1ZGVGbikgeyAuLi4gfVxuICogYGBgXG4gKlxuICogVGhlIGxpbmsgZnVuY3Rpb24gaXMgcmVzcG9uc2libGUgZm9yIHJlZ2lzdGVyaW5nIERPTSBsaXN0ZW5lcnMgYXMgd2VsbCBhcyB1cGRhdGluZyB0aGUgRE9NLiBJdCBpc1xuICogZXhlY3V0ZWQgYWZ0ZXIgdGhlIHRlbXBsYXRlIGhhcyBiZWVuIGNsb25lZC4gVGhpcyBpcyB3aGVyZSBtb3N0IG9mIHRoZSBkaXJlY3RpdmUgbG9naWMgd2lsbCBiZVxuICogcHV0LlxuICpcbiAqICAgKiBgc2NvcGVgIC0ge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgU2NvcGV9IC0gVGhlIHNjb3BlIHRvIGJlIHVzZWQgYnkgdGhlXG4gKiAgICAgZGlyZWN0aXZlIGZvciByZWdpc3RlcmluZyB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlc30uXG4gKlxuICogICAqIGBpRWxlbWVudGAgLSBpbnN0YW5jZSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgd2hlcmUgdGhlIGRpcmVjdGl2ZSBpcyB0byBiZSB1c2VkLiBJdCBpcyBzYWZlIHRvXG4gKiAgICAgbWFuaXB1bGF0ZSB0aGUgY2hpbGRyZW4gb2YgdGhlIGVsZW1lbnQgb25seSBpbiBgcG9zdExpbmtgIGZ1bmN0aW9uIHNpbmNlIHRoZSBjaGlsZHJlbiBoYXZlXG4gKiAgICAgYWxyZWFkeSBiZWVuIGxpbmtlZC5cbiAqXG4gKiAgICogYGlBdHRyc2AgLSBpbnN0YW5jZSBhdHRyaWJ1dGVzIC0gTm9ybWFsaXplZCBsaXN0IG9mIGF0dHJpYnV0ZXMgZGVjbGFyZWQgb24gdGhpcyBlbGVtZW50IHNoYXJlZFxuICogICAgIGJldHdlZW4gYWxsIGRpcmVjdGl2ZSBsaW5raW5nIGZ1bmN0aW9ucy5cbiAqXG4gKiAgICogYGNvbnRyb2xsZXJgIC0gdGhlIGRpcmVjdGl2ZSdzIHJlcXVpcmVkIGNvbnRyb2xsZXIgaW5zdGFuY2UocykgLSBJbnN0YW5jZXMgYXJlIHNoYXJlZFxuICogICAgIGFtb25nIGFsbCBkaXJlY3RpdmVzLCB3aGljaCBhbGxvd3MgdGhlIGRpcmVjdGl2ZXMgdG8gdXNlIHRoZSBjb250cm9sbGVycyBhcyBhIGNvbW11bmljYXRpb25cbiAqICAgICBjaGFubmVsLiBUaGUgZXhhY3QgdmFsdWUgZGVwZW5kcyBvbiB0aGUgZGlyZWN0aXZlJ3MgYHJlcXVpcmVgIHByb3BlcnR5OlxuICogICAgICAgKiBubyBjb250cm9sbGVyKHMpIHJlcXVpcmVkOiB0aGUgZGlyZWN0aXZlJ3Mgb3duIGNvbnRyb2xsZXIsIG9yIGB1bmRlZmluZWRgIGlmIGl0IGRvZXNuJ3QgaGF2ZSBvbmVcbiAqICAgICAgICogYHN0cmluZ2A6IHRoZSBjb250cm9sbGVyIGluc3RhbmNlXG4gKiAgICAgICAqIGBhcnJheWA6IGFycmF5IG9mIGNvbnRyb2xsZXIgaW5zdGFuY2VzXG4gKlxuICogICAgIElmIGEgcmVxdWlyZWQgY29udHJvbGxlciBjYW5ub3QgYmUgZm91bmQsIGFuZCBpdCBpcyBvcHRpb25hbCwgdGhlIGluc3RhbmNlIGlzIGBudWxsYCxcbiAqICAgICBvdGhlcndpc2UgdGhlIHtAbGluayBlcnJvcjokY29tcGlsZTpjdHJlcSBNaXNzaW5nIFJlcXVpcmVkIENvbnRyb2xsZXJ9IGVycm9yIGlzIHRocm93bi5cbiAqXG4gKiAgICAgTm90ZSB0aGF0IHlvdSBjYW4gYWxzbyByZXF1aXJlIHRoZSBkaXJlY3RpdmUncyBvd24gY29udHJvbGxlciAtIGl0IHdpbGwgYmUgbWFkZSBhdmFpbGFibGUgbGlrZVxuICogICAgIGxpa2UgYW55IG90aGVyIGNvbnRyb2xsZXIuXG4gKlxuICogICAqIGB0cmFuc2NsdWRlRm5gIC0gQSB0cmFuc2NsdWRlIGxpbmtpbmcgZnVuY3Rpb24gcHJlLWJvdW5kIHRvIHRoZSBjb3JyZWN0IHRyYW5zY2x1c2lvbiBzY29wZS5cbiAqICAgICBUaGlzIGlzIHRoZSBzYW1lIGFzIHRoZSBgJHRyYW5zY2x1ZGVgXG4gKiAgICAgcGFyYW1ldGVyIG9mIGRpcmVjdGl2ZSBjb250cm9sbGVycywgc2VlIHRoZXJlIGZvciBkZXRhaWxzLlxuICogICAgIGBmdW5jdGlvbihbc2NvcGVdLCBjbG9uZUxpbmtpbmdGbiwgZnV0dXJlUGFyZW50RWxlbWVudClgLlxuICpcbiAqICMjIyMgUHJlLWxpbmtpbmcgZnVuY3Rpb25cbiAqXG4gKiBFeGVjdXRlZCBiZWZvcmUgdGhlIGNoaWxkIGVsZW1lbnRzIGFyZSBsaW5rZWQuIE5vdCBzYWZlIHRvIGRvIERPTSB0cmFuc2Zvcm1hdGlvbiBzaW5jZSB0aGVcbiAqIGNvbXBpbGVyIGxpbmtpbmcgZnVuY3Rpb24gd2lsbCBmYWlsIHRvIGxvY2F0ZSB0aGUgY29ycmVjdCBlbGVtZW50cyBmb3IgbGlua2luZy5cbiAqXG4gKiAjIyMjIFBvc3QtbGlua2luZyBmdW5jdGlvblxuICpcbiAqIEV4ZWN1dGVkIGFmdGVyIHRoZSBjaGlsZCBlbGVtZW50cyBhcmUgbGlua2VkLlxuICpcbiAqIE5vdGUgdGhhdCBjaGlsZCBlbGVtZW50cyB0aGF0IGNvbnRhaW4gYHRlbXBsYXRlVXJsYCBkaXJlY3RpdmVzIHdpbGwgbm90IGhhdmUgYmVlbiBjb21waWxlZFxuICogYW5kIGxpbmtlZCBzaW5jZSB0aGV5IGFyZSB3YWl0aW5nIGZvciB0aGVpciB0ZW1wbGF0ZSB0byBsb2FkIGFzeW5jaHJvbm91c2x5IGFuZCB0aGVpciBvd25cbiAqIGNvbXBpbGF0aW9uIGFuZCBsaW5raW5nIGhhcyBiZWVuIHN1c3BlbmRlZCB1bnRpbCB0aGF0IG9jY3Vycy5cbiAqXG4gKiBJdCBpcyBzYWZlIHRvIGRvIERPTSB0cmFuc2Zvcm1hdGlvbiBpbiB0aGUgcG9zdC1saW5raW5nIGZ1bmN0aW9uIG9uIGVsZW1lbnRzIHRoYXQgYXJlIG5vdCB3YWl0aW5nXG4gKiBmb3IgdGhlaXIgYXN5bmMgdGVtcGxhdGVzIHRvIGJlIHJlc29sdmVkLlxuICpcbiAqXG4gKiAjIyMgVHJhbnNjbHVzaW9uXG4gKlxuICogVHJhbnNjbHVzaW9uIGlzIHRoZSBwcm9jZXNzIG9mIGV4dHJhY3RpbmcgYSBjb2xsZWN0aW9uIG9mIERPTSBlbGVtZW50IGZyb20gb25lIHBhcnQgb2YgdGhlIERPTSBhbmRcbiAqIGNvcHlpbmcgdGhlbSB0byBhbm90aGVyIHBhcnQgb2YgdGhlIERPTSwgd2hpbGUgbWFpbnRhaW5pbmcgdGhlaXIgY29ubmVjdGlvbiB0byB0aGUgb3JpZ2luYWwgQW5ndWxhckpTXG4gKiBzY29wZSBmcm9tIHdoZXJlIHRoZXkgd2VyZSB0YWtlbi5cbiAqXG4gKiBUcmFuc2NsdXNpb24gaXMgdXNlZCAob2Z0ZW4gd2l0aCB7QGxpbmsgbmdUcmFuc2NsdWRlfSkgdG8gaW5zZXJ0IHRoZVxuICogb3JpZ2luYWwgY29udGVudHMgb2YgYSBkaXJlY3RpdmUncyBlbGVtZW50IGludG8gYSBzcGVjaWZpZWQgcGxhY2UgaW4gdGhlIHRlbXBsYXRlIG9mIHRoZSBkaXJlY3RpdmUuXG4gKiBUaGUgYmVuZWZpdCBvZiB0cmFuc2NsdXNpb24sIG92ZXIgc2ltcGx5IG1vdmluZyB0aGUgRE9NIGVsZW1lbnRzIG1hbnVhbGx5LCBpcyB0aGF0IHRoZSB0cmFuc2NsdWRlZFxuICogY29udGVudCBoYXMgYWNjZXNzIHRvIHRoZSBwcm9wZXJ0aWVzIG9uIHRoZSBzY29wZSBmcm9tIHdoaWNoIGl0IHdhcyB0YWtlbiwgZXZlbiBpZiB0aGUgZGlyZWN0aXZlXG4gKiBoYXMgaXNvbGF0ZWQgc2NvcGUuXG4gKiBTZWUgdGhlIHtAbGluayBndWlkZS9kaXJlY3RpdmUjY3JlYXRpbmctYS1kaXJlY3RpdmUtdGhhdC13cmFwcy1vdGhlci1lbGVtZW50cyBEaXJlY3RpdmVzIEd1aWRlfS5cbiAqXG4gKiBUaGlzIG1ha2VzIGl0IHBvc3NpYmxlIGZvciB0aGUgd2lkZ2V0IHRvIGhhdmUgcHJpdmF0ZSBzdGF0ZSBmb3IgaXRzIHRlbXBsYXRlLCB3aGlsZSB0aGUgdHJhbnNjbHVkZWRcbiAqIGNvbnRlbnQgaGFzIGFjY2VzcyB0byBpdHMgb3JpZ2luYXRpbmcgc2NvcGUuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBXaGVuIHRlc3RpbmcgYW4gZWxlbWVudCB0cmFuc2NsdWRlIGRpcmVjdGl2ZSB5b3UgbXVzdCBub3QgcGxhY2UgdGhlIGRpcmVjdGl2ZSBhdCB0aGUgcm9vdCBvZiB0aGVcbiAqIERPTSBmcmFnbWVudCB0aGF0IGlzIGJlaW5nIGNvbXBpbGVkLiBTZWUge0BsaW5rIGd1aWRlL3VuaXQtdGVzdGluZyN0ZXN0aW5nLXRyYW5zY2x1c2lvbi1kaXJlY3RpdmVzXG4gKiBUZXN0aW5nIFRyYW5zY2x1c2lvbiBEaXJlY3RpdmVzfS5cbiAqIDwvZGl2PlxuICpcbiAqICMjIyMgVHJhbnNjbHVzaW9uIEZ1bmN0aW9uc1xuICpcbiAqIFdoZW4gYSBkaXJlY3RpdmUgcmVxdWVzdHMgdHJhbnNjbHVzaW9uLCB0aGUgY29tcGlsZXIgZXh0cmFjdHMgaXRzIGNvbnRlbnRzIGFuZCBwcm92aWRlcyBhICoqdHJhbnNjbHVzaW9uXG4gKiBmdW5jdGlvbioqIHRvIHRoZSBkaXJlY3RpdmUncyBgbGlua2AgZnVuY3Rpb24gYW5kIGBjb250cm9sbGVyYC4gVGhpcyB0cmFuc2NsdXNpb24gZnVuY3Rpb24gaXMgYSBzcGVjaWFsXG4gKiAqKmxpbmtpbmcgZnVuY3Rpb24qKiB0aGF0IHdpbGwgcmV0dXJuIHRoZSBjb21waWxlZCBjb250ZW50cyBsaW5rZWQgdG8gYSBuZXcgdHJhbnNjbHVzaW9uIHNjb3BlLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiBJZiB5b3UgYXJlIGp1c3QgdXNpbmcge0BsaW5rIG5nVHJhbnNjbHVkZX0gdGhlbiB5b3UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCB0aGlzIGZ1bmN0aW9uLCBzaW5jZVxuICogbmdUcmFuc2NsdWRlIHdpbGwgZGVhbCB3aXRoIGl0IGZvciB1cy5cbiAqIDwvZGl2PlxuICpcbiAqIElmIHlvdSB3YW50IHRvIG1hbnVhbGx5IGNvbnRyb2wgdGhlIGluc2VydGlvbiBhbmQgcmVtb3ZhbCBvZiB0aGUgdHJhbnNjbHVkZWQgY29udGVudCBpbiB5b3VyIGRpcmVjdGl2ZVxuICogdGhlbiB5b3UgbXVzdCB1c2UgdGhpcyB0cmFuc2NsdWRlIGZ1bmN0aW9uLiBXaGVuIHlvdSBjYWxsIGEgdHJhbnNjbHVkZSBmdW5jdGlvbiBpdCByZXR1cm5zIGEgYSBqcUxpdGUvSlF1ZXJ5XG4gKiBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgY29tcGlsZWQgRE9NLCB3aGljaCBpcyBsaW5rZWQgdG8gdGhlIGNvcnJlY3QgdHJhbnNjbHVzaW9uIHNjb3BlLlxuICpcbiAqIFdoZW4geW91IGNhbGwgYSB0cmFuc2NsdXNpb24gZnVuY3Rpb24geW91IGNhbiBwYXNzIGluIGEgKipjbG9uZSBhdHRhY2ggZnVuY3Rpb24qKi4gVGhpcyBmdW5jdGlvbiBhY2NlcHRzXG4gKiB0d28gcGFyYW1ldGVycywgYGZ1bmN0aW9uKGNsb25lLCBzY29wZSkgeyAuLi4gfWAsIHdoZXJlIHRoZSBgY2xvbmVgIGlzIGEgZnJlc2ggY29tcGlsZWQgY29weSBvZiB5b3VyIHRyYW5zY2x1ZGVkXG4gKiBjb250ZW50IGFuZCB0aGUgYHNjb3BlYCBpcyB0aGUgbmV3bHkgY3JlYXRlZCB0cmFuc2NsdXNpb24gc2NvcGUsIHRvIHdoaWNoIHRoZSBjbG9uZSBpcyBib3VuZC5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogKipCZXN0IFByYWN0aWNlKio6IEFsd2F5cyBwcm92aWRlIGEgYGNsb25lRm5gIChjbG9uZSBhdHRhY2ggZnVuY3Rpb24pIHdoZW4geW91IGNhbGwgYSB0cmFuc2x1ZGUgZnVuY3Rpb25cbiAqIHNpbmNlIHlvdSB0aGVuIGdldCBhIGZyZXNoIGNsb25lIG9mIHRoZSBvcmlnaW5hbCBET00gYW5kIGFsc28gaGF2ZSBhY2Nlc3MgdG8gdGhlIG5ldyB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKiA8L2Rpdj5cbiAqXG4gKiBJdCBpcyBub3JtYWwgcHJhY3RpY2UgdG8gYXR0YWNoIHlvdXIgdHJhbnNjbHVkZWQgY29udGVudCAoYGNsb25lYCkgdG8gdGhlIERPTSBpbnNpZGUgeW91ciAqKmNsb25lXG4gKiBhdHRhY2ggZnVuY3Rpb24qKjpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHRyYW5zY2x1ZGVkQ29udGVudCwgdHJhbnNjbHVzaW9uU2NvcGU7XG4gKlxuICogJHRyYW5zY2x1ZGUoZnVuY3Rpb24oY2xvbmUsIHNjb3BlKSB7XG4gKiAgIGVsZW1lbnQuYXBwZW5kKGNsb25lKTtcbiAqICAgdHJhbnNjbHVkZWRDb250ZW50ID0gY2xvbmU7XG4gKiAgIHRyYW5zY2x1c2lvblNjb3BlID0gc2NvcGU7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIExhdGVyLCBpZiB5b3Ugd2FudCB0byByZW1vdmUgdGhlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgZnJvbSB5b3VyIERPTSB0aGVuIHlvdSBzaG91bGQgYWxzbyBkZXN0cm95IHRoZVxuICogYXNzb2NpYXRlZCB0cmFuc2NsdXNpb24gc2NvcGU6XG4gKlxuICogYGBganNcbiAqIHRyYW5zY2x1ZGVkQ29udGVudC5yZW1vdmUoKTtcbiAqIHRyYW5zY2x1c2lvblNjb3BlLiRkZXN0cm95KCk7XG4gKiBgYGBcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogKipCZXN0IFByYWN0aWNlKio6IGlmIHlvdSBpbnRlbmQgdG8gYWRkIGFuZCByZW1vdmUgdHJhbnNjbHVkZWQgY29udGVudCBtYW51YWxseSBpbiB5b3VyIGRpcmVjdGl2ZVxuICogKGJ5IGNhbGxpbmcgdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBET00gYW5kIGNhbGxpbmcgYGVsZW1lbnQucmVtb3ZlKClgIHRvIHJlbW92ZSBpdCksXG4gKiB0aGVuIHlvdSBhcmUgYWxzbyByZXNwb25zaWJsZSBmb3IgY2FsbGluZyBgJGRlc3Ryb3lgIG9uIHRoZSB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKiA8L2Rpdj5cbiAqXG4gKiBUaGUgYnVpbHQtaW4gRE9NIG1hbmlwdWxhdGlvbiBkaXJlY3RpdmVzLCBzdWNoIGFzIHtAbGluayBuZ0lmfSwge0BsaW5rIG5nU3dpdGNofSBhbmQge0BsaW5rIG5nUmVwZWF0fVxuICogYXV0b21hdGljYWxseSBkZXN0cm95IHRoZWlyIHRyYW5zbHVkZWQgY2xvbmVzIGFzIG5lY2Vzc2FyeSBzbyB5b3UgZG8gbm90IG5lZWQgdG8gd29ycnkgYWJvdXQgdGhpcyBpZlxuICogeW91IGFyZSBzaW1wbHkgdXNpbmcge0BsaW5rIG5nVHJhbnNjbHVkZX0gdG8gaW5qZWN0IHRoZSB0cmFuc2NsdXNpb24gaW50byB5b3VyIGRpcmVjdGl2ZS5cbiAqXG4gKlxuICogIyMjIyBUcmFuc2NsdXNpb24gU2NvcGVzXG4gKlxuICogV2hlbiB5b3UgY2FsbCBhIHRyYW5zY2x1ZGUgZnVuY3Rpb24gaXQgcmV0dXJucyBhIERPTSBmcmFnbWVudCB0aGF0IGlzIHByZS1ib3VuZCB0byBhICoqdHJhbnNjbHVzaW9uXG4gKiBzY29wZSoqLiBUaGlzIHNjb3BlIGlzIHNwZWNpYWwsIGluIHRoYXQgaXQgaXMgYSBjaGlsZCBvZiB0aGUgZGlyZWN0aXZlJ3Mgc2NvcGUgKGFuZCBzbyBnZXRzIGRlc3Ryb3llZFxuICogd2hlbiB0aGUgZGlyZWN0aXZlJ3Mgc2NvcGUgZ2V0cyBkZXN0cm95ZWQpIGJ1dCBpdCBpbmhlcml0cyB0aGUgcHJvcGVydGllcyBvZiB0aGUgc2NvcGUgZnJvbSB3aGljaCBpdFxuICogd2FzIHRha2VuLlxuICpcbiAqIEZvciBleGFtcGxlIGNvbnNpZGVyIGEgZGlyZWN0aXZlIHRoYXQgdXNlcyB0cmFuc2NsdXNpb24gYW5kIGlzb2xhdGVkIHNjb3BlLiBUaGUgRE9NIGhpZXJhcmNoeSBtaWdodCBsb29rXG4gKiBsaWtlIHRoaXM6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBuZy1hcHA+XG4gKiAgIDxkaXYgaXNvbGF0ZT5cbiAqICAgICA8ZGl2IHRyYW5zY2x1c2lvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9kaXY+XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFRoZSBgJHBhcmVudGAgc2NvcGUgaGllcmFyY2h5IHdpbGwgbG9vayBsaWtlIHRoaXM6XG4gKlxuICogYGBgXG4gKiAtICRyb290U2NvcGVcbiAqICAgLSBpc29sYXRlXG4gKiAgICAgLSB0cmFuc2NsdXNpb25cbiAqIGBgYFxuICpcbiAqIGJ1dCB0aGUgc2NvcGVzIHdpbGwgaW5oZXJpdCBwcm90b3R5cGljYWxseSBmcm9tIGRpZmZlcmVudCBzY29wZXMgdG8gdGhlaXIgYCRwYXJlbnRgLlxuICpcbiAqIGBgYFxuICogLSAkcm9vdFNjb3BlXG4gKiAgIC0gdHJhbnNjbHVzaW9uXG4gKiAtIGlzb2xhdGVcbiAqIGBgYFxuICpcbiAqXG4gKiAjIyMgQXR0cmlidXRlc1xuICpcbiAqIFRoZSB7QGxpbmsgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMgQXR0cmlidXRlc30gb2JqZWN0IC0gcGFzc2VkIGFzIGEgcGFyYW1ldGVyIGluIHRoZVxuICogYGxpbmsoKWAgb3IgYGNvbXBpbGUoKWAgZnVuY3Rpb25zLiBJdCBoYXMgYSB2YXJpZXR5IG9mIHVzZXMuXG4gKlxuICogYWNjZXNzaW5nICpOb3JtYWxpemVkIGF0dHJpYnV0ZSBuYW1lczoqXG4gKiBEaXJlY3RpdmVzIGxpa2UgJ25nQmluZCcgY2FuIGJlIGV4cHJlc3NlZCBpbiBtYW55IHdheXM6ICduZzpiaW5kJywgYGRhdGEtbmctYmluZGAsIG9yICd4LW5nLWJpbmQnLlxuICogdGhlIGF0dHJpYnV0ZXMgb2JqZWN0IGFsbG93cyBmb3Igbm9ybWFsaXplZCBhY2Nlc3MgdG9cbiAqICAgdGhlIGF0dHJpYnV0ZXMuXG4gKlxuICogKiAqRGlyZWN0aXZlIGludGVyLWNvbW11bmljYXRpb246KiBBbGwgZGlyZWN0aXZlcyBzaGFyZSB0aGUgc2FtZSBpbnN0YW5jZSBvZiB0aGUgYXR0cmlidXRlc1xuICogICBvYmplY3Qgd2hpY2ggYWxsb3dzIHRoZSBkaXJlY3RpdmVzIHRvIHVzZSB0aGUgYXR0cmlidXRlcyBvYmplY3QgYXMgaW50ZXIgZGlyZWN0aXZlXG4gKiAgIGNvbW11bmljYXRpb24uXG4gKlxuICogKiAqU3VwcG9ydHMgaW50ZXJwb2xhdGlvbjoqIEludGVycG9sYXRpb24gYXR0cmlidXRlcyBhcmUgYXNzaWduZWQgdG8gdGhlIGF0dHJpYnV0ZSBvYmplY3RcbiAqICAgYWxsb3dpbmcgb3RoZXIgZGlyZWN0aXZlcyB0byByZWFkIHRoZSBpbnRlcnBvbGF0ZWQgdmFsdWUuXG4gKlxuICogKiAqT2JzZXJ2aW5nIGludGVycG9sYXRlZCBhdHRyaWJ1dGVzOiogVXNlIGAkb2JzZXJ2ZWAgdG8gb2JzZXJ2ZSB0aGUgdmFsdWUgY2hhbmdlcyBvZiBhdHRyaWJ1dGVzXG4gKiAgIHRoYXQgY29udGFpbiBpbnRlcnBvbGF0aW9uIChlLmcuIGBzcmM9XCJ7e2Jhcn19XCJgKS4gTm90IG9ubHkgaXMgdGhpcyB2ZXJ5IGVmZmljaWVudCBidXQgaXQncyBhbHNvXG4gKiAgIHRoZSBvbmx5IHdheSB0byBlYXNpbHkgZ2V0IHRoZSBhY3R1YWwgdmFsdWUgYmVjYXVzZSBkdXJpbmcgdGhlIGxpbmtpbmcgcGhhc2UgdGhlIGludGVycG9sYXRpb25cbiAqICAgaGFzbid0IGJlZW4gZXZhbHVhdGVkIHlldCBhbmQgc28gdGhlIHZhbHVlIGlzIGF0IHRoaXMgdGltZSBzZXQgdG8gYHVuZGVmaW5lZGAuXG4gKlxuICogYGBganNcbiAqIGZ1bmN0aW9uIGxpbmtpbmdGbihzY29wZSwgZWxtLCBhdHRycywgY3RybCkge1xuICogICAvLyBnZXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZVxuICogICBjb25zb2xlLmxvZyhhdHRycy5uZ01vZGVsKTtcbiAqXG4gKiAgIC8vIGNoYW5nZSB0aGUgYXR0cmlidXRlXG4gKiAgIGF0dHJzLiRzZXQoJ25nTW9kZWwnLCAnbmV3IHZhbHVlJyk7XG4gKlxuICogICAvLyBvYnNlcnZlIGNoYW5nZXMgdG8gaW50ZXJwb2xhdGVkIGF0dHJpYnV0ZVxuICogICBhdHRycy4kb2JzZXJ2ZSgnbmdNb2RlbCcsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgICAgY29uc29sZS5sb2coJ25nTW9kZWwgaGFzIGNoYW5nZWQgdmFsdWUgdG8gJyArIHZhbHVlKTtcbiAqICAgfSk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiAjIyBFeGFtcGxlXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZSoqOiBUeXBpY2FsbHkgZGlyZWN0aXZlcyBhcmUgcmVnaXN0ZXJlZCB3aXRoIGBtb2R1bGUuZGlyZWN0aXZlYC4gVGhlIGV4YW1wbGUgYmVsb3cgaXNcbiAqIHRvIGlsbHVzdHJhdGUgaG93IGAkY29tcGlsZWAgd29ya3MuXG4gKiA8L2Rpdj5cbiAqXG4gPGV4YW1wbGUgbW9kdWxlPVwiY29tcGlsZUV4YW1wbGVcIj5cbiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgPHNjcmlwdD5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdjb21waWxlRXhhbXBsZScsIFtdLCBmdW5jdGlvbigkY29tcGlsZVByb3ZpZGVyKSB7XG4gICAgICAgIC8vIGNvbmZpZ3VyZSBuZXcgJ2NvbXBpbGUnIGRpcmVjdGl2ZSBieSBwYXNzaW5nIGEgZGlyZWN0aXZlXG4gICAgICAgIC8vIGZhY3RvcnkgZnVuY3Rpb24uIFRoZSBmYWN0b3J5IGZ1bmN0aW9uIGluamVjdHMgdGhlICckY29tcGlsZSdcbiAgICAgICAgJGNvbXBpbGVQcm92aWRlci5kaXJlY3RpdmUoJ2NvbXBpbGUnLCBmdW5jdGlvbigkY29tcGlsZSkge1xuICAgICAgICAgIC8vIGRpcmVjdGl2ZSBmYWN0b3J5IGNyZWF0ZXMgYSBsaW5rIGZ1bmN0aW9uXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgICBmdW5jdGlvbihzY29wZSkge1xuICAgICAgICAgICAgICAgICAvLyB3YXRjaCB0aGUgJ2NvbXBpbGUnIGV4cHJlc3Npb24gZm9yIGNoYW5nZXNcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGUuJGV2YWwoYXR0cnMuY29tcGlsZSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgJ2NvbXBpbGUnIGV4cHJlc3Npb24gY2hhbmdlc1xuICAgICAgICAgICAgICAgIC8vIGFzc2lnbiBpdCBpbnRvIHRoZSBjdXJyZW50IERPTVxuICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbCh2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBjb21waWxlIHRoZSBuZXcgRE9NIGFuZCBsaW5rIGl0IHRvIHRoZSBjdXJyZW50XG4gICAgICAgICAgICAgICAgLy8gc2NvcGUuXG4gICAgICAgICAgICAgICAgLy8gTk9URTogd2Ugb25seSBjb21waWxlIC5jaGlsZE5vZGVzIHNvIHRoYXRcbiAgICAgICAgICAgICAgICAvLyB3ZSBkb24ndCBnZXQgaW50byBpbmZpbml0ZSBsb29wIGNvbXBpbGluZyBvdXJzZWx2ZXNcbiAgICAgICAgICAgICAgICAkY29tcGlsZShlbGVtZW50LmNvbnRlbnRzKCkpKHNjb3BlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAuY29udHJvbGxlcignR3JlZXRlckNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAkc2NvcGUubmFtZSA9ICdBbmd1bGFyJztcbiAgICAgICAgJHNjb3BlLmh0bWwgPSAnSGVsbG8ge3tuYW1lfX0nO1xuICAgICAgfV0pO1xuICAgIDwvc2NyaXB0PlxuICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkdyZWV0ZXJDb250cm9sbGVyXCI+XG4gICAgICA8aW5wdXQgbmctbW9kZWw9XCJuYW1lXCI+IDxici8+XG4gICAgICA8dGV4dGFyZWEgbmctbW9kZWw9XCJodG1sXCI+PC90ZXh0YXJlYT4gPGJyLz5cbiAgICAgIDxkaXYgY29tcGlsZT1cImh0bWxcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgIDwvZmlsZT5cbiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgaXQoJ3Nob3VsZCBhdXRvIGNvbXBpbGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICB2YXIgdGV4dGFyZWEgPSAkKCd0ZXh0YXJlYScpO1xuICAgICAgIHZhciBvdXRwdXQgPSAkKCdkaXZbY29tcGlsZV0nKTtcbiAgICAgICAvLyBUaGUgaW5pdGlhbCBzdGF0ZSByZWFkcyAnSGVsbG8gQW5ndWxhcicuXG4gICAgICAgZXhwZWN0KG91dHB1dC5nZXRUZXh0KCkpLnRvQmUoJ0hlbGxvIEFuZ3VsYXInKTtcbiAgICAgICB0ZXh0YXJlYS5jbGVhcigpO1xuICAgICAgIHRleHRhcmVhLnNlbmRLZXlzKCd7e25hbWV9fSEnKTtcbiAgICAgICBleHBlY3Qob3V0cHV0LmdldFRleHQoKSkudG9CZSgnQW5ndWxhciEnKTtcbiAgICAgfSk7XG4gICA8L2ZpbGU+XG4gPC9leGFtcGxlPlxuXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfERPTUVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCBvciBIVE1MIHN0cmluZyB0byBjb21waWxlIGludG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oYW5ndWxhci5TY29wZSwgY2xvbmVBdHRhY2hGbj0pfSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGF2YWlsYWJsZSB0byBkaXJlY3RpdmVzIC0gREVQUkVDQVRFRC5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gKiAqKk5vdGU6KiogUGFzc2luZyBhIGB0cmFuc2NsdWRlYCBmdW5jdGlvbiB0byB0aGUgJGNvbXBpbGUgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZCwgYXMgaXRcbiAqICAgZS5nLiB3aWxsIG5vdCB1c2UgdGhlIHJpZ2h0IG91dGVyIHNjb3BlLiBQbGVhc2UgcGFzcyB0aGUgdHJhbnNjbHVkZSBmdW5jdGlvbiBhcyBhXG4gKiAgIGBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbmAgdG8gdGhlIGxpbmsgZnVuY3Rpb24gaW5zdGVhZC5cbiAqIDwvZGl2PlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhQcmlvcml0eSBvbmx5IGFwcGx5IGRpcmVjdGl2ZXMgbG93ZXIgdGhhbiBnaXZlbiBwcmlvcml0eSAoT25seSBlZmZlY3RzIHRoZVxuICogICAgICAgICAgICAgICAgIHJvb3QgZWxlbWVudChzKSwgbm90IHRoZWlyIGNoaWxkcmVuKVxuICogQHJldHVybnMge2Z1bmN0aW9uKHNjb3BlLCBjbG9uZUF0dGFjaEZuPSwgb3B0aW9ucz0pfSBhIGxpbmsgZnVuY3Rpb24gd2hpY2ggaXMgdXNlZCB0byBiaW5kIHRlbXBsYXRlXG4gKiAoYSBET00gZWxlbWVudC90cmVlKSB0byBhIHNjb3BlLiBXaGVyZTpcbiAqXG4gKiAgKiBgc2NvcGVgIC0gQSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBTY29wZX0gdG8gYmluZCB0by5cbiAqICAqIGBjbG9uZUF0dGFjaEZuYCAtIElmIGBjbG9uZUF0dGFjaEZuYCBpcyBwcm92aWRlZCwgdGhlbiB0aGUgbGluayBmdW5jdGlvbiB3aWxsIGNsb25lIHRoZVxuICogIGB0ZW1wbGF0ZWAgYW5kIGNhbGwgdGhlIGBjbG9uZUF0dGFjaEZuYCBmdW5jdGlvbiBhbGxvd2luZyB0aGUgY2FsbGVyIHRvIGF0dGFjaCB0aGVcbiAqICBjbG9uZWQgZWxlbWVudHMgdG8gdGhlIERPTSBkb2N1bWVudCBhdCB0aGUgYXBwcm9wcmlhdGUgcGxhY2UuIFRoZSBgY2xvbmVBdHRhY2hGbmAgaXNcbiAqICBjYWxsZWQgYXM6IDxici8+IGBjbG9uZUF0dGFjaEZuKGNsb25lZEVsZW1lbnQsIHNjb3BlKWAgd2hlcmU6XG4gKlxuICogICAgICAqIGBjbG9uZWRFbGVtZW50YCAtIGlzIGEgY2xvbmUgb2YgdGhlIG9yaWdpbmFsIGBlbGVtZW50YCBwYXNzZWQgaW50byB0aGUgY29tcGlsZXIuXG4gKiAgICAgICogYHNjb3BlYCAtIGlzIHRoZSBjdXJyZW50IHNjb3BlIHdpdGggd2hpY2ggdGhlIGxpbmtpbmcgZnVuY3Rpb24gaXMgd29ya2luZyB3aXRoLlxuICpcbiAqICAqIGBvcHRpb25zYCAtIEFuIG9wdGlvbmFsIG9iamVjdCBoYXNoIHdpdGggbGlua2luZyBvcHRpb25zLiBJZiBgb3B0aW9uc2AgaXMgcHJvdmlkZWQsIHRoZW4gdGhlIGZvbGxvd2luZ1xuICogIGtleXMgbWF5IGJlIHVzZWQgdG8gY29udHJvbCBsaW5raW5nIGJlaGF2aW9yOlxuICpcbiAqICAgICAgKiBgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm5gIC0gdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gbWFkZSBhdmFpbGFibGUgdG9cbiAqICAgICAgICBkaXJlY3RpdmVzOyBpZiBnaXZlbiwgaXQgd2lsbCBiZSBwYXNzZWQgdGhyb3VnaCB0byB0aGUgbGluayBmdW5jdGlvbnMgb2ZcbiAqICAgICAgICBkaXJlY3RpdmVzIGZvdW5kIGluIGBlbGVtZW50YCBkdXJpbmcgY29tcGlsYXRpb24uXG4gKiAgICAgICogYHRyYW5zY2x1ZGVDb250cm9sbGVyc2AgLSBhbiBvYmplY3QgaGFzaCB3aXRoIGtleXMgdGhhdCBtYXAgY29udHJvbGxlciBuYW1lc1xuICogICAgICAgIHRvIGNvbnRyb2xsZXIgaW5zdGFuY2VzOyBpZiBnaXZlbiwgaXQgd2lsbCBtYWtlIHRoZSBjb250cm9sbGVyc1xuICogICAgICAgIGF2YWlsYWJsZSB0byBkaXJlY3RpdmVzLlxuICogICAgICAqIGBmdXR1cmVQYXJlbnRFbGVtZW50YCAtIGRlZmluZXMgdGhlIHBhcmVudCB0byB3aGljaCB0aGUgYGNsb25lQXR0YWNoRm5gIHdpbGwgYWRkXG4gKiAgICAgICAgdGhlIGNsb25lZCBlbGVtZW50czsgb25seSBuZWVkZWQgZm9yIHRyYW5zY2x1ZGVzIHRoYXQgYXJlIGFsbG93ZWQgdG8gY29udGFpbiBub24gaHRtbFxuICogICAgICAgIGVsZW1lbnRzIChlLmcuIFNWRyBlbGVtZW50cykuIFNlZSBhbHNvIHRoZSBkaXJlY3RpdmUuY29udHJvbGxlciBwcm9wZXJ0eS5cbiAqXG4gKiBDYWxsaW5nIHRoZSBsaW5raW5nIGZ1bmN0aW9uIHJldHVybnMgdGhlIGVsZW1lbnQgb2YgdGhlIHRlbXBsYXRlLiBJdCBpcyBlaXRoZXIgdGhlIG9yaWdpbmFsXG4gKiBlbGVtZW50IHBhc3NlZCBpbiwgb3IgdGhlIGNsb25lIG9mIHRoZSBlbGVtZW50IGlmIHRoZSBgY2xvbmVBdHRhY2hGbmAgaXMgcHJvdmlkZWQuXG4gKlxuICogQWZ0ZXIgbGlua2luZyB0aGUgdmlldyBpcyBub3QgdXBkYXRlZCB1bnRpbCBhZnRlciBhIGNhbGwgdG8gJGRpZ2VzdCB3aGljaCB0eXBpY2FsbHkgaXMgZG9uZSBieVxuICogQW5ndWxhciBhdXRvbWF0aWNhbGx5LlxuICpcbiAqIElmIHlvdSBuZWVkIGFjY2VzcyB0byB0aGUgYm91bmQgdmlldywgdGhlcmUgYXJlIHR3byB3YXlzIHRvIGRvIGl0OlxuICpcbiAqIC0gSWYgeW91IGFyZSBub3QgYXNraW5nIHRoZSBsaW5raW5nIGZ1bmN0aW9uIHRvIGNsb25lIHRoZSB0ZW1wbGF0ZSwgY3JlYXRlIHRoZSBET00gZWxlbWVudChzKVxuICogICBiZWZvcmUgeW91IHNlbmQgdGhlbSB0byB0aGUgY29tcGlsZXIgYW5kIGtlZXAgdGhpcyByZWZlcmVuY2UgYXJvdW5kLlxuICogICBgYGBqc1xuICogICAgIHZhciBlbGVtZW50ID0gJGNvbXBpbGUoJzxwPnt7dG90YWx9fTwvcD4nKShzY29wZSk7XG4gKiAgIGBgYFxuICpcbiAqIC0gaWYgb24gdGhlIG90aGVyIGhhbmQsIHlvdSBuZWVkIHRoZSBlbGVtZW50IHRvIGJlIGNsb25lZCwgdGhlIHZpZXcgcmVmZXJlbmNlIGZyb20gdGhlIG9yaWdpbmFsXG4gKiAgIGV4YW1wbGUgd291bGQgbm90IHBvaW50IHRvIHRoZSBjbG9uZSwgYnV0IHJhdGhlciB0byB0aGUgb3JpZ2luYWwgdGVtcGxhdGUgdGhhdCB3YXMgY2xvbmVkLiBJblxuICogICB0aGlzIGNhc2UsIHlvdSBjYW4gYWNjZXNzIHRoZSBjbG9uZSB2aWEgdGhlIGNsb25lQXR0YWNoRm46XG4gKiAgIGBgYGpzXG4gKiAgICAgdmFyIHRlbXBsYXRlRWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCgnPHA+e3t0b3RhbH19PC9wPicpLFxuICogICAgICAgICBzY29wZSA9IC4uLi47XG4gKlxuICogICAgIHZhciBjbG9uZWRFbGVtZW50ID0gJGNvbXBpbGUodGVtcGxhdGVFbGVtZW50KShzY29wZSwgZnVuY3Rpb24oY2xvbmVkRWxlbWVudCwgc2NvcGUpIHtcbiAqICAgICAgIC8vYXR0YWNoIHRoZSBjbG9uZSB0byBET00gZG9jdW1lbnQgYXQgdGhlIHJpZ2h0IHBsYWNlXG4gKiAgICAgfSk7XG4gKlxuICogICAgIC8vbm93IHdlIGhhdmUgcmVmZXJlbmNlIHRvIHRoZSBjbG9uZWQgRE9NIHZpYSBgY2xvbmVkRWxlbWVudGBcbiAqICAgYGBgXG4gKlxuICpcbiAqIEZvciBpbmZvcm1hdGlvbiBvbiBob3cgdGhlIGNvbXBpbGVyIHdvcmtzLCBzZWUgdGhlXG4gKiB7QGxpbmsgZ3VpZGUvY29tcGlsZXIgQW5ndWxhciBIVE1MIENvbXBpbGVyfSBzZWN0aW9uIG9mIHRoZSBEZXZlbG9wZXIgR3VpZGUuXG4gKi9cblxudmFyICRjb21waWxlTWluRXJyID0gbWluRXJyKCckY29tcGlsZScpO1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGNvbXBpbGVQcm92aWRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICovXG4kQ29tcGlsZVByb3ZpZGVyLiRpbmplY3QgPSBbJyRwcm92aWRlJywgJyQkc2FuaXRpemVVcmlQcm92aWRlciddO1xuZnVuY3Rpb24gJENvbXBpbGVQcm92aWRlcigkcHJvdmlkZSwgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyKSB7XG4gIHZhciBoYXNEaXJlY3RpdmVzID0ge30sXG4gICAgICBTdWZmaXggPSAnRGlyZWN0aXZlJyxcbiAgICAgIENPTU1FTlRfRElSRUNUSVZFX1JFR0VYUCA9IC9eXFxzKmRpcmVjdGl2ZVxcOlxccyooW1xcd1xcLV0rKVxccysoLiopJC8sXG4gICAgICBDTEFTU19ESVJFQ1RJVkVfUkVHRVhQID0gLygoW1xcd1xcLV0rKSg/OlxcOihbXjtdKykpPzs/KS8sXG4gICAgICBBTExfT1JfTk9USElOR19BVFRSUyA9IG1ha2VNYXAoJ25nU3JjLG5nU3Jjc2V0LHNyYyxzcmNzZXQnKSxcbiAgICAgIFJFUVVJUkVfUFJFRklYX1JFR0VYUCA9IC9eKD86KFxcXlxcXj8pPyhcXD8pPyhcXF5cXF4/KT8pPy87XG5cbiAgLy8gUmVmOiBodHRwOi8vZGV2ZWxvcGVycy53aGF0d2cub3JnL3dlYmFwcGFwaXMuaHRtbCNldmVudC1oYW5kbGVyLWlkbC1hdHRyaWJ1dGVzXG4gIC8vIFRoZSBhc3N1bXB0aW9uIGlzIHRoYXQgZnV0dXJlIERPTSBldmVudCBhdHRyaWJ1dGUgbmFtZXMgd2lsbCBiZWdpbiB3aXRoXG4gIC8vICdvbicgYW5kIGJlIGNvbXBvc2VkIG9mIG9ubHkgRW5nbGlzaCBsZXR0ZXJzLlxuICB2YXIgRVZFTlRfSEFORExFUl9BVFRSX1JFR0VYUCA9IC9eKG9uW2Etel0rfGZvcm1hY3Rpb24pJC87XG5cbiAgZnVuY3Rpb24gcGFyc2VJc29sYXRlQmluZGluZ3Moc2NvcGUsIGRpcmVjdGl2ZU5hbWUsIGlzQ29udHJvbGxlcikge1xuICAgIHZhciBMT0NBTF9SRUdFWFAgPSAvXlxccyooW0AmXXw9KFxcKj8pKShcXD8/KVxccyooXFx3KilcXHMqJC87XG5cbiAgICB2YXIgYmluZGluZ3MgPSB7fTtcblxuICAgIGZvckVhY2goc2NvcGUsIGZ1bmN0aW9uKGRlZmluaXRpb24sIHNjb3BlTmFtZSkge1xuICAgICAgdmFyIG1hdGNoID0gZGVmaW5pdGlvbi5tYXRjaChMT0NBTF9SRUdFWFApO1xuXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdpc2NwJyxcbiAgICAgICAgICAgIFwiSW52YWxpZCB7M30gZm9yIGRpcmVjdGl2ZSAnezB9Jy5cIiArXG4gICAgICAgICAgICBcIiBEZWZpbml0aW9uOiB7Li4uIHsxfTogJ3syfScgLi4ufVwiLFxuICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSwgc2NvcGVOYW1lLCBkZWZpbml0aW9uLFxuICAgICAgICAgICAgKGlzQ29udHJvbGxlciA/IFwiY29udHJvbGxlciBiaW5kaW5ncyBkZWZpbml0aW9uXCIgOlxuICAgICAgICAgICAgXCJpc29sYXRlIHNjb3BlIGRlZmluaXRpb25cIikpO1xuICAgICAgfVxuXG4gICAgICBiaW5kaW5nc1tzY29wZU5hbWVdID0ge1xuICAgICAgICBtb2RlOiBtYXRjaFsxXVswXSxcbiAgICAgICAgY29sbGVjdGlvbjogbWF0Y2hbMl0gPT09ICcqJyxcbiAgICAgICAgb3B0aW9uYWw6IG1hdGNoWzNdID09PSAnPycsXG4gICAgICAgIGF0dHJOYW1lOiBtYXRjaFs0XSB8fCBzY29wZU5hbWVcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYmluZGluZ3M7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZURpcmVjdGl2ZUJpbmRpbmdzKGRpcmVjdGl2ZSwgZGlyZWN0aXZlTmFtZSkge1xuICAgIHZhciBiaW5kaW5ncyA9IHtcbiAgICAgIGlzb2xhdGVTY29wZTogbnVsbCxcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IG51bGxcbiAgICB9O1xuICAgIGlmIChpc09iamVjdChkaXJlY3RpdmUuc2NvcGUpKSB7XG4gICAgICBpZiAoZGlyZWN0aXZlLmJpbmRUb0NvbnRyb2xsZXIgPT09IHRydWUpIHtcbiAgICAgICAgYmluZGluZ3MuYmluZFRvQ29udHJvbGxlciA9IHBhcnNlSXNvbGF0ZUJpbmRpbmdzKGRpcmVjdGl2ZS5zY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUsIHRydWUpO1xuICAgICAgICBiaW5kaW5ncy5pc29sYXRlU2NvcGUgPSB7fTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJpbmRpbmdzLmlzb2xhdGVTY29wZSA9IHBhcnNlSXNvbGF0ZUJpbmRpbmdzKGRpcmVjdGl2ZS5zY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNPYmplY3QoZGlyZWN0aXZlLmJpbmRUb0NvbnRyb2xsZXIpKSB7XG4gICAgICBiaW5kaW5ncy5iaW5kVG9Db250cm9sbGVyID1cbiAgICAgICAgICBwYXJzZUlzb2xhdGVCaW5kaW5ncyhkaXJlY3RpdmUuYmluZFRvQ29udHJvbGxlciwgZGlyZWN0aXZlTmFtZSwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChpc09iamVjdChiaW5kaW5ncy5iaW5kVG9Db250cm9sbGVyKSkge1xuICAgICAgdmFyIGNvbnRyb2xsZXIgPSBkaXJlY3RpdmUuY29udHJvbGxlcjtcbiAgICAgIHZhciBjb250cm9sbGVyQXMgPSBkaXJlY3RpdmUuY29udHJvbGxlckFzO1xuICAgICAgaWYgKCFjb250cm9sbGVyKSB7XG4gICAgICAgIC8vIFRoZXJlIGlzIG5vIGNvbnRyb2xsZXIsIHRoZXJlIG1heSBvciBtYXkgbm90IGJlIGEgY29udHJvbGxlckFzIHByb3BlcnR5XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdub2N0cmwnLFxuICAgICAgICAgICAgICBcIkNhbm5vdCBiaW5kIHRvIGNvbnRyb2xsZXIgd2l0aG91dCBkaXJlY3RpdmUgJ3swfSdzIGNvbnRyb2xsZXIuXCIsXG4gICAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUpO1xuICAgICAgfSBlbHNlIGlmICghaWRlbnRpZmllckZvckNvbnRyb2xsZXIoY29udHJvbGxlciwgY29udHJvbGxlckFzKSkge1xuICAgICAgICAvLyBUaGVyZSBpcyBhIGNvbnRyb2xsZXIsIGJ1dCBubyBpZGVudGlmaWVyIG9yIGNvbnRyb2xsZXJBcyBwcm9wZXJ0eVxuICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbm9pZGVudCcsXG4gICAgICAgICAgICAgIFwiQ2Fubm90IGJpbmQgdG8gY29udHJvbGxlciB3aXRob3V0IGlkZW50aWZpZXIgZm9yIGRpcmVjdGl2ZSAnezB9Jy5cIixcbiAgICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiaW5kaW5ncztcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydFZhbGlkRGlyZWN0aXZlTmFtZShuYW1lKSB7XG4gICAgdmFyIGxldHRlciA9IG5hbWUuY2hhckF0KDApO1xuICAgIGlmICghbGV0dGVyIHx8IGxldHRlciAhPT0gbG93ZXJjYXNlKGxldHRlcikpIHtcbiAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdiYWRkaXInLCBcIkRpcmVjdGl2ZSBuYW1lICd7MH0nIGlzIGludmFsaWQuIFRoZSBmaXJzdCBjaGFyYWN0ZXIgbXVzdCBiZSBhIGxvd2VyY2FzZSBsZXR0ZXJcIiwgbmFtZSk7XG4gICAgfVxuICAgIGlmIChuYW1lICE9PSBuYW1lLnRyaW0oKSkge1xuICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2JhZGRpcicsXG4gICAgICAgICAgICBcIkRpcmVjdGl2ZSBuYW1lICd7MH0nIGlzIGludmFsaWQuIFRoZSBuYW1lIHNob3VsZCBub3QgY29udGFpbiBsZWFkaW5nIG9yIHRyYWlsaW5nIHdoaXRlc3BhY2VzXCIsXG4gICAgICAgICAgICBuYW1lKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZVxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXIgYSBuZXcgZGlyZWN0aXZlIHdpdGggdGhlIGNvbXBpbGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgTmFtZSBvZiB0aGUgZGlyZWN0aXZlIGluIGNhbWVsLWNhc2UgKGkuZS4gPGNvZGU+bmdCaW5kPC9jb2RlPiB3aGljaFxuICAgKiAgICB3aWxsIG1hdGNoIGFzIDxjb2RlPm5nLWJpbmQ8L2NvZGU+KSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBkaXJlY3RpdmVzIHdoZXJlIHRoZSBrZXlzIGFyZSB0aGVcbiAgICogICAgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBmYWN0b3JpZXMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXl9IGRpcmVjdGl2ZUZhY3RvcnkgQW4gaW5qZWN0YWJsZSBkaXJlY3RpdmUgZmFjdG9yeSBmdW5jdGlvbi4gU2VlXG4gICAqICAgIHtAbGluayBndWlkZS9kaXJlY3RpdmV9IGZvciBtb3JlIGluZm8uXG4gICAqIEByZXR1cm5zIHtuZy4kY29tcGlsZVByb3ZpZGVyfSBTZWxmIGZvciBjaGFpbmluZy5cbiAgICovXG4gICB0aGlzLmRpcmVjdGl2ZSA9IGZ1bmN0aW9uIHJlZ2lzdGVyRGlyZWN0aXZlKG5hbWUsIGRpcmVjdGl2ZUZhY3RvcnkpIHtcbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnZGlyZWN0aXZlJyk7XG4gICAgaWYgKGlzU3RyaW5nKG5hbWUpKSB7XG4gICAgICBhc3NlcnRWYWxpZERpcmVjdGl2ZU5hbWUobmFtZSk7XG4gICAgICBhc3NlcnRBcmcoZGlyZWN0aXZlRmFjdG9yeSwgJ2RpcmVjdGl2ZUZhY3RvcnknKTtcbiAgICAgIGlmICghaGFzRGlyZWN0aXZlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBoYXNEaXJlY3RpdmVzW25hbWVdID0gW107XG4gICAgICAgICRwcm92aWRlLmZhY3RvcnkobmFtZSArIFN1ZmZpeCwgWyckaW5qZWN0b3InLCAnJGV4Y2VwdGlvbkhhbmRsZXInLFxuICAgICAgICAgIGZ1bmN0aW9uKCRpbmplY3RvciwgJGV4Y2VwdGlvbkhhbmRsZXIpIHtcbiAgICAgICAgICAgIHZhciBkaXJlY3RpdmVzID0gW107XG4gICAgICAgICAgICBmb3JFYWNoKGhhc0RpcmVjdGl2ZXNbbmFtZV0sIGZ1bmN0aW9uKGRpcmVjdGl2ZUZhY3RvcnksIGluZGV4KSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZSA9ICRpbmplY3Rvci5pbnZva2UoZGlyZWN0aXZlRmFjdG9yeSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZGlyZWN0aXZlKSkge1xuICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlID0geyBjb21waWxlOiB2YWx1ZUZuKGRpcmVjdGl2ZSkgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFkaXJlY3RpdmUuY29tcGlsZSAmJiBkaXJlY3RpdmUubGluaykge1xuICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLmNvbXBpbGUgPSB2YWx1ZUZuKGRpcmVjdGl2ZS5saW5rKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLnByaW9yaXR5ID0gZGlyZWN0aXZlLnByaW9yaXR5IHx8IDA7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLmluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLm5hbWUgPSBkaXJlY3RpdmUubmFtZSB8fCBuYW1lO1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5yZXF1aXJlID0gZGlyZWN0aXZlLnJlcXVpcmUgfHwgKGRpcmVjdGl2ZS5jb250cm9sbGVyICYmIGRpcmVjdGl2ZS5uYW1lKTtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUucmVzdHJpY3QgPSBkaXJlY3RpdmUucmVzdHJpY3QgfHwgJ0VBJztcbiAgICAgICAgICAgICAgICB2YXIgYmluZGluZ3MgPSBkaXJlY3RpdmUuJCRiaW5kaW5ncyA9XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlRGlyZWN0aXZlQmluZGluZ3MoZGlyZWN0aXZlLCBkaXJlY3RpdmUubmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGJpbmRpbmdzLmlzb2xhdGVTY29wZSkpIHtcbiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS4kJGlzb2xhdGVCaW5kaW5ncyA9IGJpbmRpbmdzLmlzb2xhdGVTY29wZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLiQkbW9kdWxlTmFtZSA9IGRpcmVjdGl2ZUZhY3RvcnkuJCRtb2R1bGVOYW1lO1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXMucHVzaChkaXJlY3RpdmUpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZXM7XG4gICAgICAgICAgfV0pO1xuICAgICAgfVxuICAgICAgaGFzRGlyZWN0aXZlc1tuYW1lXS5wdXNoKGRpcmVjdGl2ZUZhY3RvcnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JFYWNoKG5hbWUsIHJldmVyc2VQYXJhbXMocmVnaXN0ZXJEaXJlY3RpdmUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI2FIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlXG4gICAqIHVybHMgZHVyaW5nIGFbaHJlZl0gc2FuaXRpemF0aW9uLlxuICAgKlxuICAgKiBUaGUgc2FuaXRpemF0aW9uIGlzIGEgc2VjdXJpdHkgbWVhc3VyZSBhaW1lZCBhdCBwcmV2ZW50aW5nIFhTUyBhdHRhY2tzIHZpYSBodG1sIGxpbmtzLlxuICAgKlxuICAgKiBBbnkgdXJsIGFib3V0IHRvIGJlIGFzc2lnbmVkIHRvIGFbaHJlZl0gdmlhIGRhdGEtYmluZGluZyBpcyBmaXJzdCBub3JtYWxpemVkIGFuZCB0dXJuZWQgaW50b1xuICAgKiBhbiBhYnNvbHV0ZSB1cmwuIEFmdGVyd2FyZHMsIHRoZSB1cmwgaXMgbWF0Y2hlZCBhZ2FpbnN0IHRoZSBgYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3RgXG4gICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLFxuICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC5cbiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvclxuICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXG4gICAqL1xuICB0aGlzLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gZnVuY3Rpb24ocmVnZXhwKSB7XG4gICAgaWYgKGlzRGVmaW5lZChyZWdleHApKSB7XG4gICAgICAkJHNhbml0aXplVXJpUHJvdmlkZXIuYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QocmVnZXhwKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0KCk7XG4gICAgfVxuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3RcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHJpZXZlcyBvciBvdmVycmlkZXMgdGhlIGRlZmF1bHQgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCBmb3Igd2hpdGVsaXN0aW5nIG9mIHNhZmVcbiAgICogdXJscyBkdXJpbmcgaW1nW3NyY10gc2FuaXRpemF0aW9uLlxuICAgKlxuICAgKiBUaGUgc2FuaXRpemF0aW9uIGlzIGEgc2VjdXJpdHkgbWVhc3VyZSBhaW1lZCBhdCBwcmV2ZW50IFhTUyBhdHRhY2tzIHZpYSBodG1sIGxpbmtzLlxuICAgKlxuICAgKiBBbnkgdXJsIGFib3V0IHRvIGJlIGFzc2lnbmVkIHRvIGltZ1tzcmNdIHZpYSBkYXRhLWJpbmRpbmcgaXMgZmlyc3Qgbm9ybWFsaXplZCBhbmQgdHVybmVkIGludG9cbiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdGBcbiAgICogcmVndWxhciBleHByZXNzaW9uLiBJZiBhIG1hdGNoIGlzIGZvdW5kLCB0aGUgb3JpZ2luYWwgdXJsIGlzIHdyaXR0ZW4gaW50byB0aGUgZG9tLiBPdGhlcndpc2UsXG4gICAqIHRoZSBhYnNvbHV0ZSB1cmwgaXMgcHJlZml4ZWQgd2l0aCBgJ3Vuc2FmZTonYCBzdHJpbmcgYW5kIG9ubHkgdGhlbiBpcyBpdCB3cml0dGVuIGludG8gdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWdFeHA9fSByZWdleHAgTmV3IHJlZ2V4cCB0byB3aGl0ZWxpc3QgdXJscyB3aXRoLlxuICAgKiBAcmV0dXJucyB7UmVnRXhwfG5nLiRjb21waWxlUHJvdmlkZXJ9IEN1cnJlbnQgUmVnRXhwIGlmIGNhbGxlZCB3aXRob3V0IHZhbHVlIG9yIHNlbGYgZm9yXG4gICAqICAgIGNoYWluaW5nIG90aGVyd2lzZS5cbiAgICovXG4gIHRoaXMuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gZnVuY3Rpb24ocmVnZXhwKSB7XG4gICAgaWYgKGlzRGVmaW5lZChyZWdleHApKSB7XG4gICAgICAkJHNhbml0aXplVXJpUHJvdmlkZXIuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0KHJlZ2V4cCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICQkc2FuaXRpemVVcmlQcm92aWRlci5pbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgICRjb21waWxlUHJvdmlkZXIjZGVidWdJbmZvRW5hYmxlZFxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBlbmFibGVkIHVwZGF0ZSB0aGUgZGVidWdJbmZvRW5hYmxlZCBzdGF0ZSBpZiBwcm92aWRlZCwgb3RoZXJ3aXNlIGp1c3QgcmV0dXJuIHRoZVxuICAgKiBjdXJyZW50IGRlYnVnSW5mb0VuYWJsZWQgc3RhdGVcbiAgICogQHJldHVybnMgeyp9IGN1cnJlbnQgdmFsdWUgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXJcbiAgICpcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENhbGwgdGhpcyBtZXRob2QgdG8gZW5hYmxlL2Rpc2FibGUgdmFyaW91cyBkZWJ1ZyBydW50aW1lIGluZm9ybWF0aW9uIGluIHRoZSBjb21waWxlciBzdWNoIGFzIGFkZGluZ1xuICAgKiBiaW5kaW5nIGluZm9ybWF0aW9uIGFuZCBhIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBzY29wZSBvbiB0byBET00gZWxlbWVudHMuXG4gICAqIElmIGVuYWJsZWQsIHRoZSBjb21waWxlciB3aWxsIGFkZCB0aGUgZm9sbG93aW5nIHRvIERPTSBlbGVtZW50cyB0aGF0IGhhdmUgYmVlbiBib3VuZCB0byB0aGUgc2NvcGVcbiAgICogKiBgbmctYmluZGluZ2AgQ1NTIGNsYXNzXG4gICAqICogYCRiaW5kaW5nYCBkYXRhIHByb3BlcnR5IGNvbnRhaW5pbmcgYW4gYXJyYXkgb2YgdGhlIGJpbmRpbmcgZXhwcmVzc2lvbnNcbiAgICpcbiAgICogWW91IG1heSB3YW50IHRvIGRpc2FibGUgdGhpcyBpbiBwcm9kdWN0aW9uIGZvciBhIHNpZ25pZmljYW50IHBlcmZvcm1hbmNlIGJvb3N0LiBTZWVcbiAgICoge0BsaW5rIGd1aWRlL3Byb2R1Y3Rpb24jZGlzYWJsaW5nLWRlYnVnLWRhdGEgRGlzYWJsaW5nIERlYnVnIERhdGF9IGZvciBtb3JlLlxuICAgKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgKi9cbiAgdmFyIGRlYnVnSW5mb0VuYWJsZWQgPSB0cnVlO1xuICB0aGlzLmRlYnVnSW5mb0VuYWJsZWQgPSBmdW5jdGlvbihlbmFibGVkKSB7XG4gICAgaWYgKGlzRGVmaW5lZChlbmFibGVkKSkge1xuICAgICAgZGVidWdJbmZvRW5hYmxlZCA9IGVuYWJsZWQ7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGRlYnVnSW5mb0VuYWJsZWQ7XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gW1xuICAgICAgICAgICAgJyRpbmplY3RvcicsICckaW50ZXJwb2xhdGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHRlbXBsYXRlUmVxdWVzdCcsICckcGFyc2UnLFxuICAgICAgICAgICAgJyRjb250cm9sbGVyJywgJyRyb290U2NvcGUnLCAnJGRvY3VtZW50JywgJyRzY2UnLCAnJGFuaW1hdGUnLCAnJCRzYW5pdGl6ZVVyaScsXG4gICAgZnVuY3Rpb24oJGluamVjdG9yLCAgICRpbnRlcnBvbGF0ZSwgICAkZXhjZXB0aW9uSGFuZGxlciwgICAkdGVtcGxhdGVSZXF1ZXN0LCAgICRwYXJzZSxcbiAgICAgICAgICAgICAkY29udHJvbGxlciwgICAkcm9vdFNjb3BlLCAgICRkb2N1bWVudCwgICAkc2NlLCAgICRhbmltYXRlLCAgICQkc2FuaXRpemVVcmkpIHtcblxuICAgIHZhciBBdHRyaWJ1dGVzID0gZnVuY3Rpb24oZWxlbWVudCwgYXR0cmlidXRlc1RvQ29weSkge1xuICAgICAgaWYgKGF0dHJpYnV0ZXNUb0NvcHkpIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzVG9Db3B5KTtcbiAgICAgICAgdmFyIGksIGwsIGtleTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIHRoaXNba2V5XSA9IGF0dHJpYnV0ZXNUb0NvcHlba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kYXR0ciA9IHt9O1xuICAgICAgfVxuXG4gICAgICB0aGlzLiQkZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgfTtcblxuICAgIEF0dHJpYnV0ZXMucHJvdG90eXBlID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkbm9ybWFsaXplXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQ29udmVydHMgYW4gYXR0cmlidXRlIG5hbWUgKGUuZy4gZGFzaC9jb2xvbi91bmRlcnNjb3JlLWRlbGltaXRlZCBzdHJpbmcsIG9wdGlvbmFsbHkgcHJlZml4ZWQgd2l0aCBgeC1gIG9yXG4gICAgICAgKiBgZGF0YS1gKSB0byBpdHMgbm9ybWFsaXplZCwgY2FtZWxDYXNlIGZvcm0uXG4gICAgICAgKlxuICAgICAgICogQWxzbyB0aGVyZSBpcyBzcGVjaWFsIGNhc2UgZm9yIE1veiBwcmVmaXggc3RhcnRpbmcgd2l0aCB1cHBlciBjYXNlIGxldHRlci5cbiAgICAgICAqXG4gICAgICAgKiBGb3IgZnVydGhlciBpbmZvcm1hdGlvbiBjaGVjayBvdXQgdGhlIGd1aWRlIG9uIHtAbGluayBndWlkZS9kaXJlY3RpdmUjbWF0Y2hpbmctZGlyZWN0aXZlcyBNYXRjaGluZyBEaXJlY3RpdmVzfVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgdG8gbm9ybWFsaXplXG4gICAgICAgKi9cbiAgICAgICRub3JtYWxpemU6IGRpcmVjdGl2ZU5vcm1hbGl6ZSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRhZGRDbGFzc1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEFkZHMgdGhlIENTUyBjbGFzcyB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGNsYXNzVmFsIHBhcmFtZXRlciB0byB0aGUgZWxlbWVudC4gSWYgYW5pbWF0aW9uc1xuICAgICAgICogYXJlIGVuYWJsZWQgdGhlbiBhbiBhbmltYXRpb24gd2lsbCBiZSB0cmlnZ2VyZWQgZm9yIHRoZSBjbGFzcyBhZGRpdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NWYWwgVGhlIGNsYXNzTmFtZSB2YWx1ZSB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVsZW1lbnRcbiAgICAgICAqL1xuICAgICAgJGFkZENsYXNzOiBmdW5jdGlvbihjbGFzc1ZhbCkge1xuICAgICAgICBpZiAoY2xhc3NWYWwgJiYgY2xhc3NWYWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCBjbGFzc1ZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJHJlbW92ZUNsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmVtb3ZlcyB0aGUgQ1NTIGNsYXNzIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgY2xhc3NWYWwgcGFyYW1ldGVyIGZyb20gdGhlIGVsZW1lbnQuIElmXG4gICAgICAgKiBhbmltYXRpb25zIGFyZSBlbmFibGVkIHRoZW4gYW4gYW5pbWF0aW9uIHdpbGwgYmUgdHJpZ2dlcmVkIGZvciB0aGUgY2xhc3MgcmVtb3ZhbC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NWYWwgVGhlIGNsYXNzTmFtZSB2YWx1ZSB0aGF0IHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50XG4gICAgICAgKi9cbiAgICAgICRyZW1vdmVDbGFzczogZnVuY3Rpb24oY2xhc3NWYWwpIHtcbiAgICAgICAgaWYgKGNsYXNzVmFsICYmIGNsYXNzVmFsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyh0aGlzLiQkZWxlbWVudCwgY2xhc3NWYWwpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyR1cGRhdGVDbGFzc1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEFkZHMgYW5kIHJlbW92ZXMgdGhlIGFwcHJvcHJpYXRlIENTUyBjbGFzcyB2YWx1ZXMgdG8gdGhlIGVsZW1lbnQgYmFzZWQgb24gdGhlIGRpZmZlcmVuY2VcbiAgICAgICAqIGJldHdlZW4gdGhlIG5ldyBhbmQgb2xkIENTUyBjbGFzcyB2YWx1ZXMgKHNwZWNpZmllZCBhcyBuZXdDbGFzc2VzIGFuZCBvbGRDbGFzc2VzKS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3Q2xhc3NlcyBUaGUgY3VycmVudCBDU1MgY2xhc3NOYW1lIHZhbHVlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb2xkQ2xhc3NlcyBUaGUgZm9ybWVyIENTUyBjbGFzc05hbWUgdmFsdWVcbiAgICAgICAqL1xuICAgICAgJHVwZGF0ZUNsYXNzOiBmdW5jdGlvbihuZXdDbGFzc2VzLCBvbGRDbGFzc2VzKSB7XG4gICAgICAgIHZhciB0b0FkZCA9IHRva2VuRGlmZmVyZW5jZShuZXdDbGFzc2VzLCBvbGRDbGFzc2VzKTtcbiAgICAgICAgaWYgKHRvQWRkICYmIHRvQWRkLmxlbmd0aCkge1xuICAgICAgICAgICRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCB0b0FkZCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG9SZW1vdmUgPSB0b2tlbkRpZmZlcmVuY2Uob2xkQ2xhc3NlcywgbmV3Q2xhc3Nlcyk7XG4gICAgICAgIGlmICh0b1JlbW92ZSAmJiB0b1JlbW92ZS5sZW5ndGgpIHtcbiAgICAgICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyh0aGlzLiQkZWxlbWVudCwgdG9SZW1vdmUpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFNldCBhIG5vcm1hbGl6ZWQgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IGluIGEgd2F5IHN1Y2ggdGhhdCBhbGwgZGlyZWN0aXZlc1xuICAgICAgICogY2FuIHNoYXJlIHRoZSBhdHRyaWJ1dGUuIFRoaXMgZnVuY3Rpb24gcHJvcGVybHkgaGFuZGxlcyBib29sZWFuIGF0dHJpYnV0ZXMuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IE5vcm1hbGl6ZWQga2V5LiAoaWUgbmdBdHRyaWJ1dGUpXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xib29sZWFufSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LiBJZiBgbnVsbGAgYXR0cmlidXRlIHdpbGwgYmUgZGVsZXRlZC5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHdyaXRlQXR0ciBJZiBmYWxzZSwgZG9lcyBub3Qgd3JpdGUgdGhlIHZhbHVlIHRvIERPTSBlbGVtZW50IGF0dHJpYnV0ZS5cbiAgICAgICAqICAgICBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmc9fSBhdHRyTmFtZSBPcHRpb25hbCBub25lIG5vcm1hbGl6ZWQgbmFtZS4gRGVmYXVsdHMgdG8ga2V5LlxuICAgICAgICovXG4gICAgICAkc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlLCB3cml0ZUF0dHIsIGF0dHJOYW1lKSB7XG4gICAgICAgIC8vIFRPRE86IGRlY2lkZSB3aGV0aGVyIG9yIG5vdCB0byB0aHJvdyBhbiBlcnJvciBpZiBcImNsYXNzXCJcbiAgICAgICAgLy9pcyBzZXQgdGhyb3VnaCB0aGlzIGZ1bmN0aW9uIHNpbmNlIGl0IG1heSBjYXVzZSAkdXBkYXRlQ2xhc3MgdG9cbiAgICAgICAgLy9iZWNvbWUgdW5zdGFibGUuXG5cbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLiQkZWxlbWVudFswXSxcbiAgICAgICAgICAgIGJvb2xlYW5LZXkgPSBnZXRCb29sZWFuQXR0ck5hbWUobm9kZSwga2V5KSxcbiAgICAgICAgICAgIGFsaWFzZWRLZXkgPSBnZXRBbGlhc2VkQXR0ck5hbWUobm9kZSwga2V5KSxcbiAgICAgICAgICAgIG9ic2VydmVyID0ga2V5LFxuICAgICAgICAgICAgbm9kZU5hbWU7XG5cbiAgICAgICAgaWYgKGJvb2xlYW5LZXkpIHtcbiAgICAgICAgICB0aGlzLiQkZWxlbWVudC5wcm9wKGtleSwgdmFsdWUpO1xuICAgICAgICAgIGF0dHJOYW1lID0gYm9vbGVhbktleTtcbiAgICAgICAgfSBlbHNlIGlmIChhbGlhc2VkS2V5KSB7XG4gICAgICAgICAgdGhpc1thbGlhc2VkS2V5XSA9IHZhbHVlO1xuICAgICAgICAgIG9ic2VydmVyID0gYWxpYXNlZEtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXNba2V5XSA9IHZhbHVlO1xuXG4gICAgICAgIC8vIHRyYW5zbGF0ZSBub3JtYWxpemVkIGtleSB0byBhY3R1YWwga2V5XG4gICAgICAgIGlmIChhdHRyTmFtZSkge1xuICAgICAgICAgIHRoaXMuJGF0dHJba2V5XSA9IGF0dHJOYW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGF0dHJOYW1lID0gdGhpcy4kYXR0cltrZXldO1xuICAgICAgICAgIGlmICghYXR0ck5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuJGF0dHJba2V5XSA9IGF0dHJOYW1lID0gc25ha2VfY2FzZShrZXksICctJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbm9kZU5hbWUgPSBub2RlTmFtZV8odGhpcy4kJGVsZW1lbnQpO1xuXG4gICAgICAgIGlmICgobm9kZU5hbWUgPT09ICdhJyAmJiBrZXkgPT09ICdocmVmJykgfHxcbiAgICAgICAgICAgIChub2RlTmFtZSA9PT0gJ2ltZycgJiYga2V5ID09PSAnc3JjJykpIHtcbiAgICAgICAgICAvLyBzYW5pdGl6ZSBhW2hyZWZdIGFuZCBpbWdbc3JjXSB2YWx1ZXNcbiAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZSA9ICQkc2FuaXRpemVVcmkodmFsdWUsIGtleSA9PT0gJ3NyYycpO1xuICAgICAgICB9IGVsc2UgaWYgKG5vZGVOYW1lID09PSAnaW1nJyAmJiBrZXkgPT09ICdzcmNzZXQnKSB7XG4gICAgICAgICAgLy8gc2FuaXRpemUgaW1nW3NyY3NldF0gdmFsdWVzXG4gICAgICAgICAgdmFyIHJlc3VsdCA9IFwiXCI7XG5cbiAgICAgICAgICAvLyBmaXJzdCBjaGVjayBpZiB0aGVyZSBhcmUgc3BhY2VzIGJlY2F1c2UgaXQncyBub3QgdGhlIHNhbWUgcGF0dGVyblxuICAgICAgICAgIHZhciB0cmltbWVkU3Jjc2V0ID0gdHJpbSh2YWx1ZSk7XG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgKCAgIDk5OXggICAsfCAgIDk5OXcgICAsfCAgICx8LCAgIClcbiAgICAgICAgICB2YXIgc3JjUGF0dGVybiA9IC8oXFxzK1xcZCt4XFxzKix8XFxzK1xcZCt3XFxzKix8XFxzKyx8LFxccyspLztcbiAgICAgICAgICB2YXIgcGF0dGVybiA9IC9cXHMvLnRlc3QodHJpbW1lZFNyY3NldCkgPyBzcmNQYXR0ZXJuIDogLygsKS87XG5cbiAgICAgICAgICAvLyBzcGxpdCBzcmNzZXQgaW50byB0dXBsZSBvZiB1cmkgYW5kIGRlc2NyaXB0b3IgZXhjZXB0IGZvciB0aGUgbGFzdCBpdGVtXG4gICAgICAgICAgdmFyIHJhd1VyaXMgPSB0cmltbWVkU3Jjc2V0LnNwbGl0KHBhdHRlcm4pO1xuXG4gICAgICAgICAgLy8gZm9yIGVhY2ggdHVwbGVzXG4gICAgICAgICAgdmFyIG5iclVyaXNXaXRoMnBhcnRzID0gTWF0aC5mbG9vcihyYXdVcmlzLmxlbmd0aCAvIDIpO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmJyVXJpc1dpdGgycGFydHM7IGkrKykge1xuICAgICAgICAgICAgdmFyIGlubmVySWR4ID0gaSAqIDI7XG4gICAgICAgICAgICAvLyBzYW5pdGl6ZSB0aGUgdXJpXG4gICAgICAgICAgICByZXN1bHQgKz0gJCRzYW5pdGl6ZVVyaSh0cmltKHJhd1VyaXNbaW5uZXJJZHhdKSwgdHJ1ZSk7XG4gICAgICAgICAgICAvLyBhZGQgdGhlIGRlc2NyaXB0b3JcbiAgICAgICAgICAgIHJlc3VsdCArPSAoXCIgXCIgKyB0cmltKHJhd1VyaXNbaW5uZXJJZHggKyAxXSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHNwbGl0IHRoZSBsYXN0IGl0ZW0gaW50byB1cmkgYW5kIGRlc2NyaXB0b3JcbiAgICAgICAgICB2YXIgbGFzdFR1cGxlID0gdHJpbShyYXdVcmlzW2kgKiAyXSkuc3BsaXQoL1xccy8pO1xuXG4gICAgICAgICAgLy8gc2FuaXRpemUgdGhlIGxhc3QgdXJpXG4gICAgICAgICAgcmVzdWx0ICs9ICQkc2FuaXRpemVVcmkodHJpbShsYXN0VHVwbGVbMF0pLCB0cnVlKTtcblxuICAgICAgICAgIC8vIGFuZCBhZGQgdGhlIGxhc3QgZGVzY3JpcHRvciBpZiBhbnlcbiAgICAgICAgICBpZiAobGFzdFR1cGxlLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgcmVzdWx0ICs9IChcIiBcIiArIHRyaW0obGFzdFR1cGxlWzFdKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXNba2V5XSA9IHZhbHVlID0gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdyaXRlQXR0ciAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy4kJGVsZW1lbnQucmVtb3ZlQXR0cihhdHRyTmFtZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuJCRlbGVtZW50LmF0dHIoYXR0ck5hbWUsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaXJlIG9ic2VydmVyc1xuICAgICAgICB2YXIgJCRvYnNlcnZlcnMgPSB0aGlzLiQkb2JzZXJ2ZXJzO1xuICAgICAgICAkJG9ic2VydmVycyAmJiBmb3JFYWNoKCQkb2JzZXJ2ZXJzW29ic2VydmVyXSwgZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm4odmFsdWUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJG9ic2VydmVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBPYnNlcnZlcyBhbiBpbnRlcnBvbGF0ZWQgYXR0cmlidXRlLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBvYnNlcnZlciBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgb25jZSBkdXJpbmcgdGhlIG5leHQgYCRkaWdlc3RgIGZvbGxvd2luZ1xuICAgICAgICogY29tcGlsYXRpb24uIFRoZSBvYnNlcnZlciBpcyB0aGVuIGludm9rZWQgd2hlbmV2ZXIgdGhlIGludGVycG9sYXRlZCB2YWx1ZVxuICAgICAgICogY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IE5vcm1hbGl6ZWQga2V5LiAoaWUgbmdBdHRyaWJ1dGUpIC5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oaW50ZXJwb2xhdGVkVmFsdWUpfSBmbiBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyXG4gICAgICAgICAgICAgICAgdGhlIGludGVycG9sYXRlZCB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlIGNoYW5nZXMuXG4gICAgICAgKiAgICAgICAgU2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI3RleHQtYW5kLWF0dHJpYnV0ZS1iaW5kaW5ncyBEaXJlY3RpdmVzfSBndWlkZSBmb3IgbW9yZSBpbmZvLlxuICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IFJldHVybnMgYSBkZXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBvYnNlcnZlci5cbiAgICAgICAqL1xuICAgICAgJG9ic2VydmU6IGZ1bmN0aW9uKGtleSwgZm4pIHtcbiAgICAgICAgdmFyIGF0dHJzID0gdGhpcyxcbiAgICAgICAgICAgICQkb2JzZXJ2ZXJzID0gKGF0dHJzLiQkb2JzZXJ2ZXJzIHx8IChhdHRycy4kJG9ic2VydmVycyA9IGNyZWF0ZU1hcCgpKSksXG4gICAgICAgICAgICBsaXN0ZW5lcnMgPSAoJCRvYnNlcnZlcnNba2V5XSB8fCAoJCRvYnNlcnZlcnNba2V5XSA9IFtdKSk7XG5cbiAgICAgICAgbGlzdGVuZXJzLnB1c2goZm4pO1xuICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKCFsaXN0ZW5lcnMuJCRpbnRlciAmJiBhdHRycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAvLyBubyBvbmUgcmVnaXN0ZXJlZCBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiwgc28gbGV0cyBjYWxsIGl0IG1hbnVhbGx5XG4gICAgICAgICAgICBmbihhdHRyc1trZXldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBhcnJheVJlbW92ZShsaXN0ZW5lcnMsIGZuKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG5cbiAgICBmdW5jdGlvbiBzYWZlQWRkQ2xhc3MoJGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgJGVsZW1lbnQuYWRkQ2xhc3MoY2xhc3NOYW1lKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaWdub3JlLCBzaW5jZSBpdCBtZWFucyB0aGF0IHdlIGFyZSB0cnlpbmcgdG8gc2V0IGNsYXNzIG9uXG4gICAgICAgIC8vIFNWRyBlbGVtZW50LCB3aGVyZSBjbGFzcyBuYW1lIGlzIHJlYWQtb25seS5cbiAgICAgIH1cbiAgICB9XG5cblxuICAgIHZhciBzdGFydFN5bWJvbCA9ICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpLFxuICAgICAgICBlbmRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCksXG4gICAgICAgIGRlbm9ybWFsaXplVGVtcGxhdGUgPSAoc3RhcnRTeW1ib2wgPT0gJ3t7JyB8fCBlbmRTeW1ib2wgID09ICd9fScpXG4gICAgICAgICAgICA/IGlkZW50aXR5XG4gICAgICAgICAgICA6IGZ1bmN0aW9uIGRlbm9ybWFsaXplVGVtcGxhdGUodGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlLnJlcGxhY2UoL1xce1xcey9nLCBzdGFydFN5bWJvbCkucmVwbGFjZSgvfX0vZywgZW5kU3ltYm9sKTtcbiAgICAgICAgfSxcbiAgICAgICAgTkdfQVRUUl9CSU5ESU5HID0gL15uZ0F0dHJbQS1aXS87XG5cbiAgICBjb21waWxlLiQkYWRkQmluZGluZ0luZm8gPSBkZWJ1Z0luZm9FbmFibGVkID8gZnVuY3Rpb24gJCRhZGRCaW5kaW5nSW5mbygkZWxlbWVudCwgYmluZGluZykge1xuICAgICAgdmFyIGJpbmRpbmdzID0gJGVsZW1lbnQuZGF0YSgnJGJpbmRpbmcnKSB8fCBbXTtcblxuICAgICAgaWYgKGlzQXJyYXkoYmluZGluZykpIHtcbiAgICAgICAgYmluZGluZ3MgPSBiaW5kaW5ncy5jb25jYXQoYmluZGluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiaW5kaW5ncy5wdXNoKGJpbmRpbmcpO1xuICAgICAgfVxuXG4gICAgICAkZWxlbWVudC5kYXRhKCckYmluZGluZycsIGJpbmRpbmdzKTtcbiAgICB9IDogbm9vcDtcblxuICAgIGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3MgPSBkZWJ1Z0luZm9FbmFibGVkID8gZnVuY3Rpb24gJCRhZGRCaW5kaW5nQ2xhc3MoJGVsZW1lbnQpIHtcbiAgICAgIHNhZmVBZGRDbGFzcygkZWxlbWVudCwgJ25nLWJpbmRpbmcnKTtcbiAgICB9IDogbm9vcDtcblxuICAgIGNvbXBpbGUuJCRhZGRTY29wZUluZm8gPSBkZWJ1Z0luZm9FbmFibGVkID8gZnVuY3Rpb24gJCRhZGRTY29wZUluZm8oJGVsZW1lbnQsIHNjb3BlLCBpc29sYXRlZCwgbm9UZW1wbGF0ZSkge1xuICAgICAgdmFyIGRhdGFOYW1lID0gaXNvbGF0ZWQgPyAobm9UZW1wbGF0ZSA/ICckaXNvbGF0ZVNjb3BlTm9UZW1wbGF0ZScgOiAnJGlzb2xhdGVTY29wZScpIDogJyRzY29wZSc7XG4gICAgICAkZWxlbWVudC5kYXRhKGRhdGFOYW1lLCBzY29wZSk7XG4gICAgfSA6IG5vb3A7XG5cbiAgICBjb21waWxlLiQkYWRkU2NvcGVDbGFzcyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZFNjb3BlQ2xhc3MoJGVsZW1lbnQsIGlzb2xhdGVkKSB7XG4gICAgICBzYWZlQWRkQ2xhc3MoJGVsZW1lbnQsIGlzb2xhdGVkID8gJ25nLWlzb2xhdGUtc2NvcGUnIDogJ25nLXNjb3BlJyk7XG4gICAgfSA6IG5vb3A7XG5cbiAgICByZXR1cm4gY29tcGlsZTtcblxuICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgIGZ1bmN0aW9uIGNvbXBpbGUoJGNvbXBpbGVOb2RlcywgdHJhbnNjbHVkZUZuLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCkge1xuICAgICAgaWYgKCEoJGNvbXBpbGVOb2RlcyBpbnN0YW5jZW9mIGpxTGl0ZSkpIHtcbiAgICAgICAgLy8ganF1ZXJ5IGFsd2F5cyByZXdyYXBzLCB3aGVyZWFzIHdlIG5lZWQgdG8gcHJlc2VydmUgdGhlIG9yaWdpbmFsIHNlbGVjdG9yIHNvIHRoYXQgd2UgY2FuXG4gICAgICAgIC8vIG1vZGlmeSBpdC5cbiAgICAgICAgJGNvbXBpbGVOb2RlcyA9IGpxTGl0ZSgkY29tcGlsZU5vZGVzKTtcbiAgICAgIH1cbiAgICAgIC8vIFdlIGNhbiBub3QgY29tcGlsZSB0b3AgbGV2ZWwgdGV4dCBlbGVtZW50cyBzaW5jZSB0ZXh0IG5vZGVzIGNhbiBiZSBtZXJnZWQgYW5kIHdlIHdpbGxcbiAgICAgIC8vIG5vdCBiZSBhYmxlIHRvIGF0dGFjaCBzY29wZSBkYXRhIHRvIHRoZW0sIHNvIHdlIHdpbGwgd3JhcCB0aGVtIGluIDxzcGFuPlxuICAgICAgZm9yRWFjaCgkY29tcGlsZU5vZGVzLCBmdW5jdGlvbihub2RlLCBpbmRleCkge1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSBOT0RFX1RZUEVfVEVYVCAmJiBub2RlLm5vZGVWYWx1ZS5tYXRjaCgvXFxTKy8pIC8qIG5vbi1lbXB0eSAqLyApIHtcbiAgICAgICAgICAkY29tcGlsZU5vZGVzW2luZGV4XSA9IGpxTGl0ZShub2RlKS53cmFwKCc8c3Bhbj48L3NwYW4+JykucGFyZW50KClbMF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdmFyIGNvbXBvc2l0ZUxpbmtGbiA9XG4gICAgICAgICAgICAgIGNvbXBpbGVOb2RlcygkY29tcGlsZU5vZGVzLCB0cmFuc2NsdWRlRm4sICRjb21waWxlTm9kZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLCBwcmV2aW91c0NvbXBpbGVDb250ZXh0KTtcbiAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUNsYXNzKCRjb21waWxlTm9kZXMpO1xuICAgICAgdmFyIG5hbWVzcGFjZSA9IG51bGw7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gcHVibGljTGlua0ZuKHNjb3BlLCBjbG9uZUNvbm5lY3RGbiwgb3B0aW9ucykge1xuICAgICAgICBhc3NlcnRBcmcoc2NvcGUsICdzY29wZScpO1xuXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB2YXIgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4gPSBvcHRpb25zLnBhcmVudEJvdW5kVHJhbnNjbHVkZUZuLFxuICAgICAgICAgIHRyYW5zY2x1ZGVDb250cm9sbGVycyA9IG9wdGlvbnMudHJhbnNjbHVkZUNvbnRyb2xsZXJzLFxuICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQgPSBvcHRpb25zLmZ1dHVyZVBhcmVudEVsZW1lbnQ7XG5cbiAgICAgICAgLy8gV2hlbiBgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm5gIGlzIHBhc3NlZCwgaXQgaXMgYVxuICAgICAgICAvLyBgY29udHJvbGxlcnNCb3VuZFRyYW5zY2x1ZGVgIGZ1bmN0aW9uIChpdCB3YXMgcHJldmlvdXNseSBwYXNzZWRcbiAgICAgICAgLy8gYXMgYHRyYW5zY2x1ZGVgIHRvIGRpcmVjdGl2ZS5saW5rKSBzbyB3ZSBtdXN0IHVud3JhcCBpdCB0byBnZXRcbiAgICAgICAgLy8gaXRzIGBib3VuZFRyYW5zY2x1ZGVGbmBcbiAgICAgICAgaWYgKHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuICYmIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuLiQkYm91bmRUcmFuc2NsdWRlKSB7XG4gICAgICAgICAgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4gPSBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbi4kJGJvdW5kVHJhbnNjbHVkZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbmFtZXNwYWNlKSB7XG4gICAgICAgICAgbmFtZXNwYWNlID0gZGV0ZWN0TmFtZXNwYWNlRm9yQ2hpbGRFbGVtZW50cyhmdXR1cmVQYXJlbnRFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgJGxpbmtOb2RlO1xuICAgICAgICBpZiAobmFtZXNwYWNlICE9PSAnaHRtbCcpIHtcbiAgICAgICAgICAvLyBXaGVuIHVzaW5nIGEgZGlyZWN0aXZlIHdpdGggcmVwbGFjZTp0cnVlIGFuZCB0ZW1wbGF0ZVVybCB0aGUgJGNvbXBpbGVOb2Rlc1xuICAgICAgICAgIC8vIChvciBhIGNoaWxkIGVsZW1lbnQgaW5zaWRlIG9mIHRoZW0pXG4gICAgICAgICAgLy8gbWlnaHQgY2hhbmdlLCBzbyB3ZSBuZWVkIHRvIHJlY3JlYXRlIHRoZSBuYW1lc3BhY2UgYWRhcHRlZCBjb21waWxlTm9kZXNcbiAgICAgICAgICAvLyBmb3IgY2FsbCB0byB0aGUgbGluayBmdW5jdGlvbi5cbiAgICAgICAgICAvLyBOb3RlOiBUaGlzIHdpbGwgYWxyZWFkeSBjbG9uZSB0aGUgbm9kZXMuLi5cbiAgICAgICAgICAkbGlua05vZGUgPSBqcUxpdGUoXG4gICAgICAgICAgICB3cmFwVGVtcGxhdGUobmFtZXNwYWNlLCBqcUxpdGUoJzxkaXY+JykuYXBwZW5kKCRjb21waWxlTm9kZXMpLmh0bWwoKSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKGNsb25lQ29ubmVjdEZuKSB7XG4gICAgICAgICAgLy8gaW1wb3J0YW50ISE6IHdlIG11c3QgY2FsbCBvdXIganFMaXRlLmNsb25lKCkgc2luY2UgdGhlIGpRdWVyeSBvbmUgaXMgdHJ5aW5nIHRvIGJlIHNtYXJ0XG4gICAgICAgICAgLy8gYW5kIHNvbWV0aW1lcyBjaGFuZ2VzIHRoZSBzdHJ1Y3R1cmUgb2YgdGhlIERPTS5cbiAgICAgICAgICAkbGlua05vZGUgPSBKUUxpdGVQcm90b3R5cGUuY2xvbmUuY2FsbCgkY29tcGlsZU5vZGVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkbGlua05vZGUgPSAkY29tcGlsZU5vZGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyYW5zY2x1ZGVDb250cm9sbGVycykge1xuICAgICAgICAgIGZvciAodmFyIGNvbnRyb2xsZXJOYW1lIGluIHRyYW5zY2x1ZGVDb250cm9sbGVycykge1xuICAgICAgICAgICAgJGxpbmtOb2RlLmRhdGEoJyQnICsgY29udHJvbGxlck5hbWUgKyAnQ29udHJvbGxlcicsIHRyYW5zY2x1ZGVDb250cm9sbGVyc1tjb250cm9sbGVyTmFtZV0uaW5zdGFuY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUluZm8oJGxpbmtOb2RlLCBzY29wZSk7XG5cbiAgICAgICAgaWYgKGNsb25lQ29ubmVjdEZuKSBjbG9uZUNvbm5lY3RGbigkbGlua05vZGUsIHNjb3BlKTtcbiAgICAgICAgaWYgKGNvbXBvc2l0ZUxpbmtGbikgY29tcG9zaXRlTGlua0ZuKHNjb3BlLCAkbGlua05vZGUsICRsaW5rTm9kZSwgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICByZXR1cm4gJGxpbmtOb2RlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZXRlY3ROYW1lc3BhY2VGb3JDaGlsZEVsZW1lbnRzKHBhcmVudEVsZW1lbnQpIHtcbiAgICAgIC8vIFRPRE86IE1ha2UgdGhpcyBkZXRlY3QgTWF0aE1MIGFzIHdlbGwuLi5cbiAgICAgIHZhciBub2RlID0gcGFyZW50RWxlbWVudCAmJiBwYXJlbnRFbGVtZW50WzBdO1xuICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgIHJldHVybiAnaHRtbCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbm9kZU5hbWVfKG5vZGUpICE9PSAnZm9yZWlnbm9iamVjdCcgJiYgbm9kZS50b1N0cmluZygpLm1hdGNoKC9TVkcvKSA/ICdzdmcnIDogJ2h0bWwnO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBpbGUgZnVuY3Rpb24gbWF0Y2hlcyBlYWNoIG5vZGUgaW4gbm9kZUxpc3QgYWdhaW5zdCB0aGUgZGlyZWN0aXZlcy4gT25jZSBhbGwgZGlyZWN0aXZlc1xuICAgICAqIGZvciBhIHBhcnRpY3VsYXIgbm9kZSBhcmUgY29sbGVjdGVkIHRoZWlyIGNvbXBpbGUgZnVuY3Rpb25zIGFyZSBleGVjdXRlZC4gVGhlIGNvbXBpbGVcbiAgICAgKiBmdW5jdGlvbnMgcmV0dXJuIHZhbHVlcyAtIHRoZSBsaW5raW5nIGZ1bmN0aW9ucyAtIGFyZSBjb21iaW5lZCBpbnRvIGEgY29tcG9zaXRlIGxpbmtpbmdcbiAgICAgKiBmdW5jdGlvbiwgd2hpY2ggaXMgdGhlIGEgbGlua2luZyBmdW5jdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge05vZGVMaXN0fSBub2RlTGlzdCBhbiBhcnJheSBvZiBub2RlcyBvciBOb2RlTGlzdCB0byBjb21waWxlXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihhbmd1bGFyLlNjb3BlLCBjbG9uZUF0dGFjaEZuPSl9IHRyYW5zY2x1ZGVGbiBBIGxpbmtpbmcgZnVuY3Rpb24sIHdoZXJlIHRoZVxuICAgICAqICAgICAgICBzY29wZSBhcmd1bWVudCBpcyBhdXRvLWdlbmVyYXRlZCB0byB0aGUgbmV3IGNoaWxkIG9mIHRoZSB0cmFuc2NsdWRlZCBwYXJlbnQgc2NvcGUuXG4gICAgICogQHBhcmFtIHtET01FbGVtZW50PX0gJHJvb3RFbGVtZW50IElmIHRoZSBub2RlTGlzdCBpcyB0aGUgcm9vdCBvZiB0aGUgY29tcGlsYXRpb24gdHJlZSB0aGVuXG4gICAgICogICAgICAgIHRoZSByb290RWxlbWVudCBtdXN0IGJlIHNldCB0aGUganFMaXRlIGNvbGxlY3Rpb24gb2YgdGhlIGNvbXBpbGUgcm9vdC4gVGhpcyBpc1xuICAgICAqICAgICAgICBuZWVkZWQgc28gdGhhdCB0aGUganFMaXRlIGNvbGxlY3Rpb24gaXRlbXMgY2FuIGJlIHJlcGxhY2VkIHdpdGggd2lkZ2V0cy5cbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG1heFByaW9yaXR5IE1heCBkaXJlY3RpdmUgcHJpb3JpdHkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGNvbXBvc2l0ZSBsaW5raW5nIGZ1bmN0aW9uIG9mIGFsbCBvZiB0aGUgbWF0Y2hlZCBkaXJlY3RpdmVzIG9yIG51bGwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGlsZU5vZGVzKG5vZGVMaXN0LCB0cmFuc2NsdWRlRm4sICRyb290RWxlbWVudCwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0KSB7XG4gICAgICB2YXIgbGlua0ZucyA9IFtdLFxuICAgICAgICAgIGF0dHJzLCBkaXJlY3RpdmVzLCBub2RlTGlua0ZuLCBjaGlsZE5vZGVzLCBjaGlsZExpbmtGbiwgbGlua0ZuRm91bmQsIG5vZGVMaW5rRm5Gb3VuZDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBhdHRycyA9IG5ldyBBdHRyaWJ1dGVzKCk7XG5cbiAgICAgICAgLy8gd2UgbXVzdCBhbHdheXMgcmVmZXIgdG8gbm9kZUxpc3RbaV0gc2luY2UgdGhlIG5vZGVzIGNhbiBiZSByZXBsYWNlZCB1bmRlcm5lYXRoIHVzLlxuICAgICAgICBkaXJlY3RpdmVzID0gY29sbGVjdERpcmVjdGl2ZXMobm9kZUxpc3RbaV0sIFtdLCBhdHRycywgaSA9PT0gMCA/IG1heFByaW9yaXR5IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZURpcmVjdGl2ZSk7XG5cbiAgICAgICAgbm9kZUxpbmtGbiA9IChkaXJlY3RpdmVzLmxlbmd0aClcbiAgICAgICAgICAgID8gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIG5vZGVMaXN0W2ldLCBhdHRycywgdHJhbnNjbHVkZUZuLCAkcm9vdEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsIFtdLCBbXSwgcHJldmlvdXNDb21waWxlQ29udGV4dClcbiAgICAgICAgICAgIDogbnVsbDtcblxuICAgICAgICBpZiAobm9kZUxpbmtGbiAmJiBub2RlTGlua0ZuLnNjb3BlKSB7XG4gICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlQ2xhc3MoYXR0cnMuJCRlbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkTGlua0ZuID0gKG5vZGVMaW5rRm4gJiYgbm9kZUxpbmtGbi50ZXJtaW5hbCB8fFxuICAgICAgICAgICAgICAgICAgICAgICEoY2hpbGROb2RlcyA9IG5vZGVMaXN0W2ldLmNoaWxkTm9kZXMpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgIWNoaWxkTm9kZXMubGVuZ3RoKVxuICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICA6IGNvbXBpbGVOb2RlcyhjaGlsZE5vZGVzLFxuICAgICAgICAgICAgICAgICBub2RlTGlua0ZuID8gKFxuICAgICAgICAgICAgICAgICAgKG5vZGVMaW5rRm4udHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQgfHwgIW5vZGVMaW5rRm4udGVtcGxhdGVPblRoaXNFbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAgJiYgbm9kZUxpbmtGbi50cmFuc2NsdWRlKSA6IHRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgaWYgKG5vZGVMaW5rRm4gfHwgY2hpbGRMaW5rRm4pIHtcbiAgICAgICAgICBsaW5rRm5zLnB1c2goaSwgbm9kZUxpbmtGbiwgY2hpbGRMaW5rRm4pO1xuICAgICAgICAgIGxpbmtGbkZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBub2RlTGlua0ZuRm91bmQgPSBub2RlTGlua0ZuRm91bmQgfHwgbm9kZUxpbmtGbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vdXNlIHRoZSBwcmV2aW91cyBjb250ZXh0IG9ubHkgZm9yIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSB2aXJ0dWFsIGdyb3VwXG4gICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyByZXR1cm4gYSBsaW5raW5nIGZ1bmN0aW9uIGlmIHdlIGhhdmUgZm91bmQgYW55dGhpbmcsIG51bGwgb3RoZXJ3aXNlXG4gICAgICByZXR1cm4gbGlua0ZuRm91bmQgPyBjb21wb3NpdGVMaW5rRm4gOiBudWxsO1xuXG4gICAgICBmdW5jdGlvbiBjb21wb3NpdGVMaW5rRm4oc2NvcGUsIG5vZGVMaXN0LCAkcm9vdEVsZW1lbnQsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKSB7XG4gICAgICAgIHZhciBub2RlTGlua0ZuLCBjaGlsZExpbmtGbiwgbm9kZSwgY2hpbGRTY29wZSwgaSwgaWksIGlkeCwgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbjtcbiAgICAgICAgdmFyIHN0YWJsZU5vZGVMaXN0O1xuXG5cbiAgICAgICAgaWYgKG5vZGVMaW5rRm5Gb3VuZCkge1xuICAgICAgICAgIC8vIGNvcHkgbm9kZUxpc3Qgc28gdGhhdCBpZiBhIG5vZGVMaW5rRm4gcmVtb3ZlcyBvciBhZGRzIGFuIGVsZW1lbnQgYXQgdGhpcyBET00gbGV2ZWwgb3VyXG4gICAgICAgICAgLy8gb2Zmc2V0cyBkb24ndCBnZXQgc2NyZXdlZCB1cFxuICAgICAgICAgIHZhciBub2RlTGlzdExlbmd0aCA9IG5vZGVMaXN0Lmxlbmd0aDtcbiAgICAgICAgICBzdGFibGVOb2RlTGlzdCA9IG5ldyBBcnJheShub2RlTGlzdExlbmd0aCk7XG5cbiAgICAgICAgICAvLyBjcmVhdGUgYSBzcGFyc2UgYXJyYXkgYnkgb25seSBjb3B5aW5nIHRoZSBlbGVtZW50cyB3aGljaCBoYXZlIGEgbGlua0ZuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpbmtGbnMubGVuZ3RoOyBpKz0zKSB7XG4gICAgICAgICAgICBpZHggPSBsaW5rRm5zW2ldO1xuICAgICAgICAgICAgc3RhYmxlTm9kZUxpc3RbaWR4XSA9IG5vZGVMaXN0W2lkeF07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YWJsZU5vZGVMaXN0ID0gbm9kZUxpc3Q7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGxpbmtGbnMubGVuZ3RoOyBpIDwgaWk7KSB7XG4gICAgICAgICAgbm9kZSA9IHN0YWJsZU5vZGVMaXN0W2xpbmtGbnNbaSsrXV07XG4gICAgICAgICAgbm9kZUxpbmtGbiA9IGxpbmtGbnNbaSsrXTtcbiAgICAgICAgICBjaGlsZExpbmtGbiA9IGxpbmtGbnNbaSsrXTtcblxuICAgICAgICAgIGlmIChub2RlTGlua0ZuKSB7XG4gICAgICAgICAgICBpZiAobm9kZUxpbmtGbi5zY29wZSkge1xuICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gc2NvcGUuJG5ldygpO1xuICAgICAgICAgICAgICBjb21waWxlLiQkYWRkU2NvcGVJbmZvKGpxTGl0ZShub2RlKSwgY2hpbGRTY29wZSk7XG4gICAgICAgICAgICAgIHZhciBkZXN0cm95QmluZGluZ3MgPSBub2RlTGlua0ZuLiQkZGVzdHJveUJpbmRpbmdzO1xuICAgICAgICAgICAgICBpZiAoZGVzdHJveUJpbmRpbmdzKSB7XG4gICAgICAgICAgICAgICAgbm9kZUxpbmtGbi4kJGRlc3Ryb3lCaW5kaW5ncyA9IG51bGw7XG4gICAgICAgICAgICAgICAgY2hpbGRTY29wZS4kb24oJyRkZXN0cm95ZWQnLCBkZXN0cm95QmluZGluZ3MpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gc2NvcGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChub2RlTGlua0ZuLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50KSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihcbiAgICAgICAgICAgICAgICAgIHNjb3BlLCBub2RlTGlua0ZuLnRyYW5zY2x1ZGUsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICghbm9kZUxpbmtGbi50ZW1wbGF0ZU9uVGhpc0VsZW1lbnQgJiYgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbiAmJiB0cmFuc2NsdWRlRm4pIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCB0cmFuc2NsdWRlRm4pO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbm9kZUxpbmtGbihjaGlsZExpbmtGbiwgY2hpbGRTY29wZSwgbm9kZSwgJHJvb3RFbGVtZW50LCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuLFxuICAgICAgICAgICAgICAgICAgICAgICBub2RlTGlua0ZuKTtcblxuICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRMaW5rRm4pIHtcbiAgICAgICAgICAgIGNoaWxkTGlua0ZuKHNjb3BlLCBub2RlLmNoaWxkTm9kZXMsIHVuZGVmaW5lZCwgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCB0cmFuc2NsdWRlRm4sIHByZXZpb3VzQm91bmRUcmFuc2NsdWRlRm4pIHtcblxuICAgICAgdmFyIGJvdW5kVHJhbnNjbHVkZUZuID0gZnVuY3Rpb24odHJhbnNjbHVkZWRTY29wZSwgY2xvbmVGbiwgY29udHJvbGxlcnMsIGZ1dHVyZVBhcmVudEVsZW1lbnQsIGNvbnRhaW5pbmdTY29wZSkge1xuXG4gICAgICAgIGlmICghdHJhbnNjbHVkZWRTY29wZSkge1xuICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUgPSBzY29wZS4kbmV3KGZhbHNlLCBjb250YWluaW5nU2NvcGUpO1xuICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUuJCR0cmFuc2NsdWRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhbnNjbHVkZUZuKHRyYW5zY2x1ZGVkU2NvcGUsIGNsb25lRm4sIHtcbiAgICAgICAgICBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbjogcHJldmlvdXNCb3VuZFRyYW5zY2x1ZGVGbixcbiAgICAgICAgICB0cmFuc2NsdWRlQ29udHJvbGxlcnM6IGNvbnRyb2xsZXJzLFxuICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQ6IGZ1dHVyZVBhcmVudEVsZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gYm91bmRUcmFuc2NsdWRlRm47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9va3MgZm9yIGRpcmVjdGl2ZXMgb24gdGhlIGdpdmVuIG5vZGUgYW5kIGFkZHMgdGhlbSB0byB0aGUgZGlyZWN0aXZlIGNvbGxlY3Rpb24gd2hpY2ggaXNcbiAgICAgKiBzb3J0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbm9kZSBOb2RlIHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0gZGlyZWN0aXZlcyBBbiBhcnJheSB0byB3aGljaCB0aGUgZGlyZWN0aXZlcyBhcmUgYWRkZWQgdG8uIFRoaXMgYXJyYXkgaXMgc29ydGVkIGJlZm9yZVxuICAgICAqICAgICAgICB0aGUgZnVuY3Rpb24gcmV0dXJucy5cbiAgICAgKiBAcGFyYW0gYXR0cnMgVGhlIHNoYXJlZCBhdHRycyBvYmplY3Qgd2hpY2ggaXMgdXNlZCB0byBwb3B1bGF0ZSB0aGUgbm9ybWFsaXplZCBhdHRyaWJ1dGVzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gbWF4UHJpb3JpdHkgTWF4IGRpcmVjdGl2ZSBwcmlvcml0eS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb2xsZWN0RGlyZWN0aXZlcyhub2RlLCBkaXJlY3RpdmVzLCBhdHRycywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkge1xuICAgICAgdmFyIG5vZGVUeXBlID0gbm9kZS5ub2RlVHlwZSxcbiAgICAgICAgICBhdHRyc01hcCA9IGF0dHJzLiRhdHRyLFxuICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgIGNsYXNzTmFtZTtcblxuICAgICAgc3dpdGNoIChub2RlVHlwZSkge1xuICAgICAgICBjYXNlIE5PREVfVFlQRV9FTEVNRU5UOiAvKiBFbGVtZW50ICovXG4gICAgICAgICAgLy8gdXNlIHRoZSBub2RlIG5hbWU6IDxkaXJlY3RpdmU+XG4gICAgICAgICAgYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsXG4gICAgICAgICAgICAgIGRpcmVjdGl2ZU5vcm1hbGl6ZShub2RlTmFtZV8obm9kZSkpLCAnRScsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpO1xuXG4gICAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBhdHRyaWJ1dGVzXG4gICAgICAgICAgZm9yICh2YXIgYXR0ciwgbmFtZSwgbk5hbWUsIG5nQXR0ck5hbWUsIHZhbHVlLCBpc05nQXR0ciwgbkF0dHJzID0gbm9kZS5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgICAgIGogPSAwLCBqaiA9IG5BdHRycyAmJiBuQXR0cnMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICAgICAgdmFyIGF0dHJTdGFydE5hbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBhdHRyRW5kTmFtZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICBhdHRyID0gbkF0dHJzW2pdO1xuICAgICAgICAgICAgbmFtZSA9IGF0dHIubmFtZTtcbiAgICAgICAgICAgIHZhbHVlID0gdHJpbShhdHRyLnZhbHVlKTtcblxuICAgICAgICAgICAgLy8gc3VwcG9ydCBuZ0F0dHIgYXR0cmlidXRlIGJpbmRpbmdcbiAgICAgICAgICAgIG5nQXR0ck5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobmFtZSk7XG4gICAgICAgICAgICBpZiAoaXNOZ0F0dHIgPSBOR19BVFRSX0JJTkRJTkcudGVzdChuZ0F0dHJOYW1lKSkge1xuICAgICAgICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKFBSRUZJWF9SRUdFWFAsICcnKVxuICAgICAgICAgICAgICAgIC5zdWJzdHIoOCkucmVwbGFjZSgvXyguKS9nLCBmdW5jdGlvbihtYXRjaCwgbGV0dGVyKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkaXJlY3RpdmVOTmFtZSA9IG5nQXR0ck5hbWUucmVwbGFjZSgvKFN0YXJ0fEVuZCkkLywgJycpO1xuICAgICAgICAgICAgaWYgKGRpcmVjdGl2ZUlzTXVsdGlFbGVtZW50KGRpcmVjdGl2ZU5OYW1lKSkge1xuICAgICAgICAgICAgICBpZiAobmdBdHRyTmFtZSA9PT0gZGlyZWN0aXZlTk5hbWUgKyAnU3RhcnQnKSB7XG4gICAgICAgICAgICAgICAgYXR0clN0YXJ0TmFtZSA9IG5hbWU7XG4gICAgICAgICAgICAgICAgYXR0ckVuZE5hbWUgPSBuYW1lLnN1YnN0cigwLCBuYW1lLmxlbmd0aCAtIDUpICsgJ2VuZCc7XG4gICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDAsIG5hbWUubGVuZ3RoIC0gNik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgIGF0dHJzTWFwW25OYW1lXSA9IG5hbWU7XG4gICAgICAgICAgICBpZiAoaXNOZ0F0dHIgfHwgIWF0dHJzLmhhc093blByb3BlcnR5KG5OYW1lKSkge1xuICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChnZXRCb29sZWFuQXR0ck5hbWUobm9kZSwgbk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICBhdHRyc1tuTmFtZV0gPSB0cnVlOyAvLyBwcmVzZW5jZSBtZWFucyB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkQXR0ckludGVycG9sYXRlRGlyZWN0aXZlKG5vZGUsIGRpcmVjdGl2ZXMsIHZhbHVlLCBuTmFtZSwgaXNOZ0F0dHIpO1xuICAgICAgICAgICAgYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5OYW1lLCAnQScsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsIGF0dHJTdGFydE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJFbmROYW1lKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB1c2UgY2xhc3MgYXMgZGlyZWN0aXZlXG4gICAgICAgICAgY2xhc3NOYW1lID0gbm9kZS5jbGFzc05hbWU7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KGNsYXNzTmFtZSkpIHtcbiAgICAgICAgICAgICAgLy8gTWF5YmUgU1ZHQW5pbWF0ZWRTdHJpbmdcbiAgICAgICAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLmFuaW1WYWw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1N0cmluZyhjbGFzc05hbWUpICYmIGNsYXNzTmFtZSAhPT0gJycpIHtcbiAgICAgICAgICAgIHdoaWxlIChtYXRjaCA9IENMQVNTX0RJUkVDVElWRV9SRUdFWFAuZXhlYyhjbGFzc05hbWUpKSB7XG4gICAgICAgICAgICAgIG5OYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG1hdGNoWzJdKTtcbiAgICAgICAgICAgICAgaWYgKGFkZERpcmVjdGl2ZShkaXJlY3RpdmVzLCBuTmFtZSwgJ0MnLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlKSkge1xuICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRyaW0obWF0Y2hbM10pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5zdWJzdHIobWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBOT0RFX1RZUEVfVEVYVDogLyogVGV4dCBOb2RlICovXG4gICAgICAgICAgaWYgKG1zaWUgPT09IDExKSB7XG4gICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciAjMTE3ODFcbiAgICAgICAgICAgIHdoaWxlIChub2RlLnBhcmVudE5vZGUgJiYgbm9kZS5uZXh0U2libGluZyAmJiBub2RlLm5leHRTaWJsaW5nLm5vZGVUeXBlID09PSBOT0RFX1RZUEVfVEVYVCkge1xuICAgICAgICAgICAgICBub2RlLm5vZGVWYWx1ZSA9IG5vZGUubm9kZVZhbHVlICsgbm9kZS5uZXh0U2libGluZy5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYWRkVGV4dEludGVycG9sYXRlRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5vZGUubm9kZVZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBOT0RFX1RZUEVfQ09NTUVOVDogLyogQ29tbWVudCAqL1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBtYXRjaCA9IENPTU1FTlRfRElSRUNUSVZFX1JFR0VYUC5leGVjKG5vZGUubm9kZVZhbHVlKTtcbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICBuTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZShtYXRjaFsxXSk7XG4gICAgICAgICAgICAgIGlmIChhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdNJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkpIHtcbiAgICAgICAgICAgICAgICBhdHRyc1tuTmFtZV0gPSB0cmltKG1hdGNoWzJdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIHR1cm5zIG91dCB0aGF0IHVuZGVyIHNvbWUgY2lyY3Vtc3RhbmNlcyBJRTkgdGhyb3dzIGVycm9ycyB3aGVuIG9uZSBhdHRlbXB0cyB0byByZWFkXG4gICAgICAgICAgICAvLyBjb21tZW50J3Mgbm9kZSB2YWx1ZS5cbiAgICAgICAgICAgIC8vIEp1c3QgaWdub3JlIGl0IGFuZCBjb250aW51ZS4gKENhbid0IHNlZW0gdG8gcmVwcm9kdWNlIGluIHRlc3QgY2FzZS4pXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBkaXJlY3RpdmVzLnNvcnQoYnlQcmlvcml0eSk7XG4gICAgICByZXR1cm4gZGlyZWN0aXZlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIG5vZGUgd2l0aCBhbiBkaXJlY3RpdmUtc3RhcnQgaXQgY29sbGVjdHMgYWxsIG9mIHRoZSBzaWJsaW5ncyB1bnRpbCBpdCBmaW5kc1xuICAgICAqIGRpcmVjdGl2ZS1lbmQuXG4gICAgICogQHBhcmFtIG5vZGVcbiAgICAgKiBAcGFyYW0gYXR0clN0YXJ0XG4gICAgICogQHBhcmFtIGF0dHJFbmRcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBncm91cFNjYW4obm9kZSwgYXR0clN0YXJ0LCBhdHRyRW5kKSB7XG4gICAgICB2YXIgbm9kZXMgPSBbXTtcbiAgICAgIHZhciBkZXB0aCA9IDA7XG4gICAgICBpZiAoYXR0clN0YXJ0ICYmIG5vZGUuaGFzQXR0cmlidXRlICYmIG5vZGUuaGFzQXR0cmlidXRlKGF0dHJTdGFydCkpIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3V0ZXJkaXInLFxuICAgICAgICAgICAgICAgICAgICAgIFwiVW50ZXJtaW5hdGVkIGF0dHJpYnV0ZSwgZm91bmQgJ3swfScgYnV0IG5vIG1hdGNoaW5nICd7MX0nIGZvdW5kLlwiLFxuICAgICAgICAgICAgICAgICAgICAgIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IE5PREVfVFlQRV9FTEVNRU5UKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoYXR0clN0YXJ0KSkgZGVwdGgrKztcbiAgICAgICAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZShhdHRyRW5kKSkgZGVwdGgtLTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfSB3aGlsZSAoZGVwdGggPiAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBqcUxpdGUobm9kZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdyYXBwZXIgZm9yIGxpbmtpbmcgZnVuY3Rpb24gd2hpY2ggY29udmVydHMgbm9ybWFsIGxpbmtpbmcgZnVuY3Rpb24gaW50byBhIGdyb3VwZWRcbiAgICAgKiBsaW5raW5nIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSBsaW5rRm5cbiAgICAgKiBAcGFyYW0gYXR0clN0YXJ0XG4gICAgICogQHBhcmFtIGF0dHJFbmRcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICovXG4gICAgZnVuY3Rpb24gZ3JvdXBFbGVtZW50c0xpbmtGbldyYXBwZXIobGlua0ZuLCBhdHRyU3RhcnQsIGF0dHJFbmQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXJzLCB0cmFuc2NsdWRlRm4pIHtcbiAgICAgICAgZWxlbWVudCA9IGdyb3VwU2NhbihlbGVtZW50WzBdLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICByZXR1cm4gbGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9uY2UgdGhlIGRpcmVjdGl2ZXMgaGF2ZSBiZWVuIGNvbGxlY3RlZCwgdGhlaXIgY29tcGlsZSBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkLiBUaGlzIG1ldGhvZFxuICAgICAqIGlzIHJlc3BvbnNpYmxlIGZvciBpbmxpbmluZyBkaXJlY3RpdmUgdGVtcGxhdGVzIGFzIHdlbGwgYXMgdGVybWluYXRpbmcgdGhlIGFwcGxpY2F0aW9uXG4gICAgICogb2YgdGhlIGRpcmVjdGl2ZXMgaWYgdGhlIHRlcm1pbmFsIGRpcmVjdGl2ZSBoYXMgYmVlbiByZWFjaGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGlyZWN0aXZlcyBBcnJheSBvZiBjb2xsZWN0ZWQgZGlyZWN0aXZlcyB0byBleGVjdXRlIHRoZWlyIGNvbXBpbGUgZnVuY3Rpb24uXG4gICAgICogICAgICAgIHRoaXMgbmVlZHMgdG8gYmUgcHJlLXNvcnRlZCBieSBwcmlvcml0eSBvcmRlci5cbiAgICAgKiBAcGFyYW0ge05vZGV9IGNvbXBpbGVOb2RlIFRoZSByYXcgRE9NIG5vZGUgdG8gYXBwbHkgdGhlIGNvbXBpbGUgZnVuY3Rpb25zIHRvXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRlbXBsYXRlQXR0cnMgVGhlIHNoYXJlZCBhdHRyaWJ1dGUgZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGFuZ3VsYXIuU2NvcGUsIGNsb25lQXR0YWNoRm49KX0gdHJhbnNjbHVkZUZuIEEgbGlua2luZyBmdW5jdGlvbiwgd2hlcmUgdGhlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlIGFyZ3VtZW50IGlzIGF1dG8tZ2VuZXJhdGVkIHRvIHRoZSBuZXdcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQgb2YgdGhlIHRyYW5zY2x1ZGVkIHBhcmVudCBzY29wZS5cbiAgICAgKiBAcGFyYW0ge0pRTGl0ZX0ganFDb2xsZWN0aW9uIElmIHdlIGFyZSB3b3JraW5nIG9uIHRoZSByb290IG9mIHRoZSBjb21waWxlIHRyZWUgdGhlbiB0aGlzXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudCBoYXMgdGhlIHJvb3QganFMaXRlIGFycmF5IHNvIHRoYXQgd2UgY2FuIHJlcGxhY2Ugbm9kZXNcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uIGl0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gb3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlIEFuIG9wdGlvbmFsIGRpcmVjdGl2ZSB0aGF0IHdpbGwgYmUgaWdub3JlZCB3aGVuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGlsaW5nIHRoZSB0cmFuc2NsdXNpb24uXG4gICAgICogQHBhcmFtIHtBcnJheS48RnVuY3Rpb24+fSBwcmVMaW5rRm5zXG4gICAgICogQHBhcmFtIHtBcnJheS48RnVuY3Rpb24+fSBwb3N0TGlua0Zuc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcmV2aW91c0NvbXBpbGVDb250ZXh0IENvbnRleHQgdXNlZCBmb3IgcHJldmlvdXMgY29tcGlsYXRpb24gb2YgdGhlIGN1cnJlbnRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBsaW5rRm5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcHBseURpcmVjdGl2ZXNUb05vZGUoZGlyZWN0aXZlcywgY29tcGlsZU5vZGUsIHRlbXBsYXRlQXR0cnMsIHRyYW5zY2x1ZGVGbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganFDb2xsZWN0aW9uLCBvcmlnaW5hbFJlcGxhY2VEaXJlY3RpdmUsIHByZUxpbmtGbnMsIHBvc3RMaW5rRm5zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0KSB7XG4gICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0ID0gcHJldmlvdXNDb21waWxlQ29udGV4dCB8fCB7fTtcblxuICAgICAgdmFyIHRlcm1pbmFsUHJpb3JpdHkgPSAtTnVtYmVyLk1BWF9WQUxVRSxcbiAgICAgICAgICBuZXdTY29wZURpcmVjdGl2ZSA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQubmV3U2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXMgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0LmNvbnRyb2xsZXJEaXJlY3RpdmVzLFxuICAgICAgICAgIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQubmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLFxuICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlID0gcHJldmlvdXNDb21waWxlQ29udGV4dC50ZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICAgICAgICBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5ub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlLFxuICAgICAgICAgIGhhc1RyYW5zY2x1ZGVEaXJlY3RpdmUgPSBmYWxzZSxcbiAgICAgICAgICBoYXNUZW1wbGF0ZSA9IGZhbHNlLFxuICAgICAgICAgIGhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5oYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSxcbiAgICAgICAgICAkY29tcGlsZU5vZGUgPSB0ZW1wbGF0ZUF0dHJzLiQkZWxlbWVudCA9IGpxTGl0ZShjb21waWxlTm9kZSksXG4gICAgICAgICAgZGlyZWN0aXZlLFxuICAgICAgICAgIGRpcmVjdGl2ZU5hbWUsXG4gICAgICAgICAgJHRlbXBsYXRlLFxuICAgICAgICAgIHJlcGxhY2VEaXJlY3RpdmUgPSBvcmlnaW5hbFJlcGxhY2VEaXJlY3RpdmUsXG4gICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSB0cmFuc2NsdWRlRm4sXG4gICAgICAgICAgbGlua0ZuLFxuICAgICAgICAgIGRpcmVjdGl2ZVZhbHVlO1xuXG4gICAgICAvLyBleGVjdXRlcyBhbGwgZGlyZWN0aXZlcyBvbiB0aGUgY3VycmVudCBlbGVtZW50XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgZGlyZWN0aXZlID0gZGlyZWN0aXZlc1tpXTtcbiAgICAgICAgdmFyIGF0dHJTdGFydCA9IGRpcmVjdGl2ZS4kJHN0YXJ0O1xuICAgICAgICB2YXIgYXR0ckVuZCA9IGRpcmVjdGl2ZS4kJGVuZDtcblxuICAgICAgICAvLyBjb2xsZWN0IG11bHRpYmxvY2sgc2VjdGlvbnNcbiAgICAgICAgaWYgKGF0dHJTdGFydCkge1xuICAgICAgICAgICRjb21waWxlTm9kZSA9IGdyb3VwU2Nhbihjb21waWxlTm9kZSwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgfVxuICAgICAgICAkdGVtcGxhdGUgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKHRlcm1pbmFsUHJpb3JpdHkgPiBkaXJlY3RpdmUucHJpb3JpdHkpIHtcbiAgICAgICAgICBicmVhazsgLy8gcHJldmVudCBmdXJ0aGVyIHByb2Nlc3Npbmcgb2YgZGlyZWN0aXZlc1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpcmVjdGl2ZVZhbHVlID0gZGlyZWN0aXZlLnNjb3BlKSB7XG5cbiAgICAgICAgICAvLyBza2lwIHRoZSBjaGVjayBmb3IgZGlyZWN0aXZlcyB3aXRoIGFzeW5jIHRlbXBsYXRlcywgd2UnbGwgY2hlY2sgdGhlIGRlcml2ZWQgc3luY1xuICAgICAgICAgIC8vIGRpcmVjdGl2ZSB3aGVuIHRoZSB0ZW1wbGF0ZSBhcnJpdmVzXG4gICAgICAgICAgaWYgKCFkaXJlY3RpdmUudGVtcGxhdGVVcmwpIHtcbiAgICAgICAgICAgIGlmIChpc09iamVjdChkaXJlY3RpdmVWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgLy8gVGhpcyBkaXJlY3RpdmUgaXMgdHJ5aW5nIHRvIGFkZCBhbiBpc29sYXRlZCBzY29wZS5cbiAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGVyZSBpcyBubyBzY29wZSBvZiBhbnkga2luZCBhbHJlYWR5XG4gICAgICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCduZXcvaXNvbGF0ZWQgc2NvcGUnLCBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgfHwgbmV3U2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gVGhpcyBkaXJlY3RpdmUgaXMgdHJ5aW5nIHRvIGFkZCBhIGNoaWxkIHNjb3BlLlxuICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IHRoZXJlIGlzIG5vIGlzb2xhdGVkIHNjb3BlIGFscmVhZHlcbiAgICAgICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ25ldy9pc29sYXRlZCBzY29wZScsIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSwgZGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5ld1Njb3BlRGlyZWN0aXZlID0gbmV3U2NvcGVEaXJlY3RpdmUgfHwgZGlyZWN0aXZlO1xuICAgICAgICB9XG5cbiAgICAgICAgZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZS5uYW1lO1xuXG4gICAgICAgIGlmICghZGlyZWN0aXZlLnRlbXBsYXRlVXJsICYmIGRpcmVjdGl2ZS5jb250cm9sbGVyKSB7XG4gICAgICAgICAgZGlyZWN0aXZlVmFsdWUgPSBkaXJlY3RpdmUuY29udHJvbGxlcjtcbiAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlcyA9IGNvbnRyb2xsZXJEaXJlY3RpdmVzIHx8IGNyZWF0ZU1hcCgpO1xuICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKFwiJ1wiICsgZGlyZWN0aXZlTmFtZSArIFwiJyBjb250cm9sbGVyXCIsXG4gICAgICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0gPSBkaXJlY3RpdmU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlyZWN0aXZlVmFsdWUgPSBkaXJlY3RpdmUudHJhbnNjbHVkZSkge1xuICAgICAgICAgIGhhc1RyYW5zY2x1ZGVEaXJlY3RpdmUgPSB0cnVlO1xuXG4gICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIG5nSWYgYW5kIG5nUmVwZWF0IHNvIHRoYXQgd2UgZG9uJ3QgY29tcGxhaW4gYWJvdXQgZHVwbGljYXRlIHRyYW5zY2x1c2lvbi5cbiAgICAgICAgICAvLyBUaGlzIG9wdGlvbiBzaG91bGQgb25seSBiZSB1c2VkIGJ5IGRpcmVjdGl2ZXMgdGhhdCBrbm93IGhvdyB0byBzYWZlbHkgaGFuZGxlIGVsZW1lbnQgdHJhbnNjbHVzaW9uLFxuICAgICAgICAgIC8vIHdoZXJlIHRoZSB0cmFuc2NsdWRlZCBub2RlcyBhcmUgYWRkZWQgb3IgcmVwbGFjZWQgYWZ0ZXIgbGlua2luZy5cbiAgICAgICAgICBpZiAoIWRpcmVjdGl2ZS4kJHRsYikge1xuICAgICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ3RyYW5zY2x1c2lvbicsIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUsIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZVZhbHVlID09ICdlbGVtZW50Jykge1xuICAgICAgICAgICAgaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgdGVybWluYWxQcmlvcml0eSA9IGRpcmVjdGl2ZS5wcmlvcml0eTtcbiAgICAgICAgICAgICR0ZW1wbGF0ZSA9ICRjb21waWxlTm9kZTtcbiAgICAgICAgICAgICRjb21waWxlTm9kZSA9IHRlbXBsYXRlQXR0cnMuJCRlbGVtZW50ID1cbiAgICAgICAgICAgICAgICBqcUxpdGUoZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnICcgKyBkaXJlY3RpdmVOYW1lICsgJzogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVBdHRyc1tkaXJlY3RpdmVOYW1lXSArICcgJykpO1xuICAgICAgICAgICAgY29tcGlsZU5vZGUgPSAkY29tcGlsZU5vZGVbMF07XG4gICAgICAgICAgICByZXBsYWNlV2l0aChqcUNvbGxlY3Rpb24sIHNsaWNlQXJncygkdGVtcGxhdGUpLCBjb21waWxlTm9kZSk7XG5cbiAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuID0gY29tcGlsZSgkdGVtcGxhdGUsIHRyYW5zY2x1ZGVGbiwgdGVybWluYWxQcmlvcml0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlICYmIHJlcGxhY2VEaXJlY3RpdmUubmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3QgcGFzcyBpbjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0gY29udHJvbGxlckRpcmVjdGl2ZXMgLSBvdGhlcndpc2Ugd2UnbGwgY3JlYXRlIGR1cGxpY2F0ZXMgY29udHJvbGxlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0gbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIG9yIHRlbXBsYXRlRGlyZWN0aXZlIC0gY29tYmluaW5nIHRlbXBsYXRlcyB3aXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGVsZW1lbnQgdHJhbnNjbHVzaW9uIGRvZXNuJ3QgbWFrZSBzZW5zZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIG9ubHkgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSBzbyB0aGF0IHdlIHByZXZlbnQgcHV0dGluZyB0cmFuc2NsdXNpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9uIHRoZSBzYW1lIGVsZW1lbnQgbW9yZSB0aGFuIG9uY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlOiBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICR0ZW1wbGF0ZSA9IGpxTGl0ZShqcUxpdGVDbG9uZShjb21waWxlTm9kZSkpLmNvbnRlbnRzKCk7XG4gICAgICAgICAgICAkY29tcGlsZU5vZGUuZW1wdHkoKTsgLy8gY2xlYXIgY29udGVudHNcbiAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuID0gY29tcGlsZSgkdGVtcGxhdGUsIHRyYW5zY2x1ZGVGbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpcmVjdGl2ZS50ZW1wbGF0ZSkge1xuICAgICAgICAgIGhhc1RlbXBsYXRlID0gdHJ1ZTtcbiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndGVtcGxhdGUnLCB0ZW1wbGF0ZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuXG4gICAgICAgICAgZGlyZWN0aXZlVmFsdWUgPSAoaXNGdW5jdGlvbihkaXJlY3RpdmUudGVtcGxhdGUpKVxuICAgICAgICAgICAgICA/IGRpcmVjdGl2ZS50ZW1wbGF0ZSgkY29tcGlsZU5vZGUsIHRlbXBsYXRlQXR0cnMpXG4gICAgICAgICAgICAgIDogZGlyZWN0aXZlLnRlbXBsYXRlO1xuXG4gICAgICAgICAgZGlyZWN0aXZlVmFsdWUgPSBkZW5vcm1hbGl6ZVRlbXBsYXRlKGRpcmVjdGl2ZVZhbHVlKTtcblxuICAgICAgICAgIGlmIChkaXJlY3RpdmUucmVwbGFjZSkge1xuICAgICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgICAgIGlmIChqcUxpdGVJc1RleHROb2RlKGRpcmVjdGl2ZVZhbHVlKSkge1xuICAgICAgICAgICAgICAkdGVtcGxhdGUgPSBbXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICR0ZW1wbGF0ZSA9IHJlbW92ZUNvbW1lbnRzKHdyYXBUZW1wbGF0ZShkaXJlY3RpdmUudGVtcGxhdGVOYW1lc3BhY2UsIHRyaW0oZGlyZWN0aXZlVmFsdWUpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21waWxlTm9kZSA9ICR0ZW1wbGF0ZVswXTtcblxuICAgICAgICAgICAgaWYgKCR0ZW1wbGF0ZS5sZW5ndGggIT0gMSB8fCBjb21waWxlTm9kZS5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3RwbHJ0JyxcbiAgICAgICAgICAgICAgICAgIFwiVGVtcGxhdGUgZm9yIGRpcmVjdGl2ZSAnezB9JyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiB7MX1cIixcbiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUsICcnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVwbGFjZVdpdGgoanFDb2xsZWN0aW9uLCAkY29tcGlsZU5vZGUsIGNvbXBpbGVOb2RlKTtcblxuICAgICAgICAgICAgdmFyIG5ld1RlbXBsYXRlQXR0cnMgPSB7JGF0dHI6IHt9fTtcblxuICAgICAgICAgICAgLy8gY29tYmluZSBkaXJlY3RpdmVzIGZyb20gdGhlIG9yaWdpbmFsIG5vZGUgYW5kIGZyb20gdGhlIHRlbXBsYXRlOlxuICAgICAgICAgICAgLy8gLSB0YWtlIHRoZSBhcnJheSBvZiBkaXJlY3RpdmVzIGZvciB0aGlzIGVsZW1lbnRcbiAgICAgICAgICAgIC8vIC0gc3BsaXQgaXQgaW50byB0d28gcGFydHMsIHRob3NlIHRoYXQgYWxyZWFkeSBhcHBsaWVkIChwcm9jZXNzZWQpIGFuZCB0aG9zZSB0aGF0IHdlcmVuJ3QgKHVucHJvY2Vzc2VkKVxuICAgICAgICAgICAgLy8gLSBjb2xsZWN0IGRpcmVjdGl2ZXMgZnJvbSB0aGUgdGVtcGxhdGUgYW5kIHNvcnQgdGhlbSBieSBwcmlvcml0eVxuICAgICAgICAgICAgLy8gLSBjb21iaW5lIGRpcmVjdGl2ZXMgYXM6IHByb2Nlc3NlZCArIHRlbXBsYXRlICsgdW5wcm9jZXNzZWRcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZURpcmVjdGl2ZXMgPSBjb2xsZWN0RGlyZWN0aXZlcyhjb21waWxlTm9kZSwgW10sIG5ld1RlbXBsYXRlQXR0cnMpO1xuICAgICAgICAgICAgdmFyIHVucHJvY2Vzc2VkRGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXMuc3BsaWNlKGkgKyAxLCBkaXJlY3RpdmVzLmxlbmd0aCAtIChpICsgMSkpO1xuXG4gICAgICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgICAgIG1hcmtEaXJlY3RpdmVzQXNJc29sYXRlKHRlbXBsYXRlRGlyZWN0aXZlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXJlY3RpdmVzID0gZGlyZWN0aXZlcy5jb25jYXQodGVtcGxhdGVEaXJlY3RpdmVzKS5jb25jYXQodW5wcm9jZXNzZWREaXJlY3RpdmVzKTtcbiAgICAgICAgICAgIG1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzKHRlbXBsYXRlQXR0cnMsIG5ld1RlbXBsYXRlQXR0cnMpO1xuXG4gICAgICAgICAgICBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkY29tcGlsZU5vZGUuaHRtbChkaXJlY3RpdmVWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpcmVjdGl2ZS50ZW1wbGF0ZVVybCkge1xuICAgICAgICAgIGhhc1RlbXBsYXRlID0gdHJ1ZTtcbiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndGVtcGxhdGUnLCB0ZW1wbGF0ZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuXG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZS5yZXBsYWNlKSB7XG4gICAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG5vZGVMaW5rRm4gPSBjb21waWxlVGVtcGxhdGVVcmwoZGlyZWN0aXZlcy5zcGxpY2UoaSwgZGlyZWN0aXZlcy5sZW5ndGggLSBpKSwgJGNvbXBpbGVOb2RlLFxuICAgICAgICAgICAgICB0ZW1wbGF0ZUF0dHJzLCBqcUNvbGxlY3Rpb24sIGhhc1RyYW5zY2x1ZGVEaXJlY3RpdmUgJiYgY2hpbGRUcmFuc2NsdWRlRm4sIHByZUxpbmtGbnMsIHBvc3RMaW5rRm5zLCB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXM6IGNvbnRyb2xsZXJEaXJlY3RpdmVzLFxuICAgICAgICAgICAgICAgIG5ld1Njb3BlRGlyZWN0aXZlOiAobmV3U2NvcGVEaXJlY3RpdmUgIT09IGRpcmVjdGl2ZSkgJiYgbmV3U2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlOiBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmU6IHRlbXBsYXRlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmU6IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3RpdmUuY29tcGlsZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsaW5rRm4gPSBkaXJlY3RpdmUuY29tcGlsZSgkY29tcGlsZU5vZGUsIHRlbXBsYXRlQXR0cnMsIGNoaWxkVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpbmtGbikpIHtcbiAgICAgICAgICAgICAgYWRkTGlua0ZucyhudWxsLCBsaW5rRm4sIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxpbmtGbikge1xuICAgICAgICAgICAgICBhZGRMaW5rRm5zKGxpbmtGbi5wcmUsIGxpbmtGbi5wb3N0LCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUsIHN0YXJ0aW5nVGFnKCRjb21waWxlTm9kZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXJlY3RpdmUudGVybWluYWwpIHtcbiAgICAgICAgICBub2RlTGlua0ZuLnRlcm1pbmFsID0gdHJ1ZTtcbiAgICAgICAgICB0ZXJtaW5hbFByaW9yaXR5ID0gTWF0aC5tYXgodGVybWluYWxQcmlvcml0eSwgZGlyZWN0aXZlLnByaW9yaXR5KTtcbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIG5vZGVMaW5rRm4uc2NvcGUgPSBuZXdTY29wZURpcmVjdGl2ZSAmJiBuZXdTY29wZURpcmVjdGl2ZS5zY29wZSA9PT0gdHJ1ZTtcbiAgICAgIG5vZGVMaW5rRm4udHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQgPSBoYXNUcmFuc2NsdWRlRGlyZWN0aXZlO1xuICAgICAgbm9kZUxpbmtGbi50ZW1wbGF0ZU9uVGhpc0VsZW1lbnQgPSBoYXNUZW1wbGF0ZTtcbiAgICAgIG5vZGVMaW5rRm4udHJhbnNjbHVkZSA9IGNoaWxkVHJhbnNjbHVkZUZuO1xuXG4gICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lmhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlID0gaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmU7XG5cbiAgICAgIC8vIG1pZ2h0IGJlIG5vcm1hbCBvciBkZWxheWVkIG5vZGVMaW5rRm4gZGVwZW5kaW5nIG9uIGlmIHRlbXBsYXRlVXJsIGlzIHByZXNlbnRcbiAgICAgIHJldHVybiBub2RlTGlua0ZuO1xuXG4gICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICBmdW5jdGlvbiBhZGRMaW5rRm5zKHByZSwgcG9zdCwgYXR0clN0YXJ0LCBhdHRyRW5kKSB7XG4gICAgICAgIGlmIChwcmUpIHtcbiAgICAgICAgICBpZiAoYXR0clN0YXJ0KSBwcmUgPSBncm91cEVsZW1lbnRzTGlua0ZuV3JhcHBlcihwcmUsIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgcHJlLnJlcXVpcmUgPSBkaXJlY3RpdmUucmVxdWlyZTtcbiAgICAgICAgICBwcmUuZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZU5hbWU7XG4gICAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSA9PT0gZGlyZWN0aXZlIHx8IGRpcmVjdGl2ZS4kJGlzb2xhdGVTY29wZSkge1xuICAgICAgICAgICAgcHJlID0gY2xvbmVBbmRBbm5vdGF0ZUZuKHByZSwge2lzb2xhdGVTY29wZTogdHJ1ZX0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcmVMaW5rRm5zLnB1c2gocHJlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zdCkge1xuICAgICAgICAgIGlmIChhdHRyU3RhcnQpIHBvc3QgPSBncm91cEVsZW1lbnRzTGlua0ZuV3JhcHBlcihwb3N0LCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICAgIHBvc3QucmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlO1xuICAgICAgICAgIHBvc3QuZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZU5hbWU7XG4gICAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSA9PT0gZGlyZWN0aXZlIHx8IGRpcmVjdGl2ZS4kJGlzb2xhdGVTY29wZSkge1xuICAgICAgICAgICAgcG9zdCA9IGNsb25lQW5kQW5ub3RhdGVGbihwb3N0LCB7aXNvbGF0ZVNjb3BlOiB0cnVlfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBvc3RMaW5rRm5zLnB1c2gocG9zdCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuXG4gICAgICBmdW5jdGlvbiBnZXRDb250cm9sbGVycyhkaXJlY3RpdmVOYW1lLCByZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSB7XG4gICAgICAgIHZhciB2YWx1ZTtcblxuICAgICAgICBpZiAoaXNTdHJpbmcocmVxdWlyZSkpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSByZXF1aXJlLm1hdGNoKFJFUVVJUkVfUFJFRklYX1JFR0VYUCk7XG4gICAgICAgICAgdmFyIG5hbWUgPSByZXF1aXJlLnN1YnN0cmluZyhtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgIHZhciBpbmhlcml0VHlwZSA9IG1hdGNoWzFdIHx8IG1hdGNoWzNdO1xuICAgICAgICAgIHZhciBvcHRpb25hbCA9IG1hdGNoWzJdID09PSAnPyc7XG5cbiAgICAgICAgICAvL0lmIG9ubHkgcGFyZW50cyB0aGVuIHN0YXJ0IGF0IHRoZSBwYXJlbnQgZWxlbWVudFxuICAgICAgICAgIGlmIChpbmhlcml0VHlwZSA9PT0gJ15eJykge1xuICAgICAgICAgICAgJGVsZW1lbnQgPSAkZWxlbWVudC5wYXJlbnQoKTtcbiAgICAgICAgICAvL090aGVyd2lzZSBhdHRlbXB0IGdldHRpbmcgdGhlIGNvbnRyb2xsZXIgZnJvbSBlbGVtZW50Q29udHJvbGxlcnMgaW4gY2FzZVxuICAgICAgICAgIC8vdGhlIGVsZW1lbnQgaXMgdHJhbnNjbHVkZWQgKGFuZCBoYXMgbm8gZGF0YSkgYW5kIHRvIGF2b2lkIC5kYXRhIGlmIHBvc3NpYmxlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gZWxlbWVudENvbnRyb2xsZXJzICYmIGVsZW1lbnRDb250cm9sbGVyc1tuYW1lXTtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgJiYgdmFsdWUuaW5zdGFuY2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGRhdGFOYW1lID0gJyQnICsgbmFtZSArICdDb250cm9sbGVyJztcbiAgICAgICAgICAgIHZhbHVlID0gaW5oZXJpdFR5cGUgPyAkZWxlbWVudC5pbmhlcml0ZWREYXRhKGRhdGFOYW1lKSA6ICRlbGVtZW50LmRhdGEoZGF0YU5hbWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghdmFsdWUgJiYgIW9wdGlvbmFsKSB7XG4gICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignY3RyZXEnLFxuICAgICAgICAgICAgICAgIFwiQ29udHJvbGxlciAnezB9JywgcmVxdWlyZWQgYnkgZGlyZWN0aXZlICd7MX0nLCBjYW4ndCBiZSBmb3VuZCFcIixcbiAgICAgICAgICAgICAgICBuYW1lLCBkaXJlY3RpdmVOYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShyZXF1aXJlKSkge1xuICAgICAgICAgIHZhbHVlID0gW107XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcmVxdWlyZS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICB2YWx1ZVtpXSA9IGdldENvbnRyb2xsZXJzKGRpcmVjdGl2ZU5hbWUsIHJlcXVpcmVbaV0sICRlbGVtZW50LCBlbGVtZW50Q29udHJvbGxlcnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZSB8fCBudWxsO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzZXR1cENvbnRyb2xsZXJzKCRlbGVtZW50LCBhdHRycywgdHJhbnNjbHVkZUZuLCBjb250cm9sbGVyRGlyZWN0aXZlcywgaXNvbGF0ZVNjb3BlLCBzY29wZSkge1xuICAgICAgICB2YXIgZWxlbWVudENvbnRyb2xsZXJzID0gY3JlYXRlTWFwKCk7XG4gICAgICAgIGZvciAodmFyIGNvbnRyb2xsZXJLZXkgaW4gY29udHJvbGxlckRpcmVjdGl2ZXMpIHtcbiAgICAgICAgICB2YXIgZGlyZWN0aXZlID0gY29udHJvbGxlckRpcmVjdGl2ZXNbY29udHJvbGxlcktleV07XG4gICAgICAgICAgdmFyIGxvY2FscyA9IHtcbiAgICAgICAgICAgICRzY29wZTogZGlyZWN0aXZlID09PSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgfHwgZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlID8gaXNvbGF0ZVNjb3BlIDogc2NvcGUsXG4gICAgICAgICAgICAkZWxlbWVudDogJGVsZW1lbnQsXG4gICAgICAgICAgICAkYXR0cnM6IGF0dHJzLFxuICAgICAgICAgICAgJHRyYW5zY2x1ZGU6IHRyYW5zY2x1ZGVGblxuICAgICAgICAgIH07XG5cbiAgICAgICAgICB2YXIgY29udHJvbGxlciA9IGRpcmVjdGl2ZS5jb250cm9sbGVyO1xuICAgICAgICAgIGlmIChjb250cm9sbGVyID09ICdAJykge1xuICAgICAgICAgICAgY29udHJvbGxlciA9IGF0dHJzW2RpcmVjdGl2ZS5uYW1lXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgY29udHJvbGxlckluc3RhbmNlID0gJGNvbnRyb2xsZXIoY29udHJvbGxlciwgbG9jYWxzLCB0cnVlLCBkaXJlY3RpdmUuY29udHJvbGxlckFzKTtcblxuICAgICAgICAgIC8vIEZvciBkaXJlY3RpdmVzIHdpdGggZWxlbWVudCB0cmFuc2NsdXNpb24gdGhlIGVsZW1lbnQgaXMgYSBjb21tZW50LFxuICAgICAgICAgIC8vIGJ1dCBqUXVlcnkgLmRhdGEgZG9lc24ndCBzdXBwb3J0IGF0dGFjaGluZyBkYXRhIHRvIGNvbW1lbnQgbm9kZXMgYXMgaXQncyBoYXJkIHRvXG4gICAgICAgICAgLy8gY2xlYW4gdXAgKGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzgzMzUpLlxuICAgICAgICAgIC8vIEluc3RlYWQsIHdlIHNhdmUgdGhlIGNvbnRyb2xsZXJzIGZvciB0aGUgZWxlbWVudCBpbiBhIGxvY2FsIGhhc2ggYW5kIGF0dGFjaCB0byAuZGF0YVxuICAgICAgICAgIC8vIGxhdGVyLCBvbmNlIHdlIGhhdmUgdGhlIGFjdHVhbCBlbGVtZW50LlxuICAgICAgICAgIGVsZW1lbnRDb250cm9sbGVyc1tkaXJlY3RpdmUubmFtZV0gPSBjb250cm9sbGVySW5zdGFuY2U7XG4gICAgICAgICAgaWYgKCFoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSkge1xuICAgICAgICAgICAgJGVsZW1lbnQuZGF0YSgnJCcgKyBkaXJlY3RpdmUubmFtZSArICdDb250cm9sbGVyJywgY29udHJvbGxlckluc3RhbmNlLmluc3RhbmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsZW1lbnRDb250cm9sbGVycztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbm9kZUxpbmtGbihjaGlsZExpbmtGbiwgc2NvcGUsIGxpbmtOb2RlLCAkcm9vdEVsZW1lbnQsIGJvdW5kVHJhbnNjbHVkZUZuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzTGlua0ZuKSB7XG4gICAgICAgIHZhciBpLCBpaSwgbGlua0ZuLCBjb250cm9sbGVyLCBpc29sYXRlU2NvcGUsIGVsZW1lbnRDb250cm9sbGVycywgdHJhbnNjbHVkZUZuLCAkZWxlbWVudCxcbiAgICAgICAgICAgIGF0dHJzO1xuXG4gICAgICAgIGlmIChjb21waWxlTm9kZSA9PT0gbGlua05vZGUpIHtcbiAgICAgICAgICBhdHRycyA9IHRlbXBsYXRlQXR0cnM7XG4gICAgICAgICAgJGVsZW1lbnQgPSB0ZW1wbGF0ZUF0dHJzLiQkZWxlbWVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkZWxlbWVudCA9IGpxTGl0ZShsaW5rTm9kZSk7XG4gICAgICAgICAgYXR0cnMgPSBuZXcgQXR0cmlidXRlcygkZWxlbWVudCwgdGVtcGxhdGVBdHRycyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgaXNvbGF0ZVNjb3BlID0gc2NvcGUuJG5ldyh0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib3VuZFRyYW5zY2x1ZGVGbikge1xuICAgICAgICAgIC8vIHRyYWNrIGBib3VuZFRyYW5zY2x1ZGVGbmAgc28gaXQgY2FuIGJlIHVud3JhcHBlZCBpZiBgdHJhbnNjbHVkZUZuYFxuICAgICAgICAgIC8vIGlzIGxhdGVyIHBhc3NlZCBhcyBgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm5gIHRvIGBwdWJsaWNMaW5rRm5gXG4gICAgICAgICAgdHJhbnNjbHVkZUZuID0gY29udHJvbGxlcnNCb3VuZFRyYW5zY2x1ZGU7XG4gICAgICAgICAgdHJhbnNjbHVkZUZuLiQkYm91bmRUcmFuc2NsdWRlID0gYm91bmRUcmFuc2NsdWRlRm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udHJvbGxlckRpcmVjdGl2ZXMpIHtcbiAgICAgICAgICBlbGVtZW50Q29udHJvbGxlcnMgPSBzZXR1cENvbnRyb2xsZXJzKCRlbGVtZW50LCBhdHRycywgdHJhbnNjbHVkZUZuLCBjb250cm9sbGVyRGlyZWN0aXZlcywgaXNvbGF0ZVNjb3BlLCBzY29wZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgLy8gSW5pdGlhbGl6ZSBpc29sYXRlIHNjb3BlIGJpbmRpbmdzIGZvciBuZXcgaXNvbGF0ZSBzY29wZSBkaXJlY3RpdmUuXG4gICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlSW5mbygkZWxlbWVudCwgaXNvbGF0ZVNjb3BlLCB0cnVlLCAhKHRlbXBsYXRlRGlyZWN0aXZlICYmICh0ZW1wbGF0ZURpcmVjdGl2ZSA9PT0gbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIHx8XG4gICAgICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlID09PSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUuJCRvcmlnaW5hbERpcmVjdGl2ZSkpKTtcbiAgICAgICAgICBjb21waWxlLiQkYWRkU2NvcGVDbGFzcygkZWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgICAgaXNvbGF0ZVNjb3BlLiQkaXNvbGF0ZUJpbmRpbmdzID1cbiAgICAgICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLiQkaXNvbGF0ZUJpbmRpbmdzO1xuICAgICAgICAgIGluaXRpYWxpemVEaXJlY3RpdmVCaW5kaW5ncyhzY29wZSwgYXR0cnMsIGlzb2xhdGVTY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNvbGF0ZVNjb3BlLiQkaXNvbGF0ZUJpbmRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsIGlzb2xhdGVTY29wZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnRDb250cm9sbGVycykge1xuICAgICAgICAgIC8vIEluaXRpYWxpemUgYmluZFRvQ29udHJvbGxlciBiaW5kaW5ncyBmb3IgbmV3L2lzb2xhdGUgc2NvcGVzXG4gICAgICAgICAgdmFyIHNjb3BlRGlyZWN0aXZlID0gbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIHx8IG5ld1Njb3BlRGlyZWN0aXZlO1xuICAgICAgICAgIHZhciBiaW5kaW5ncztcbiAgICAgICAgICB2YXIgY29udHJvbGxlckZvckJpbmRpbmdzO1xuICAgICAgICAgIGlmIChzY29wZURpcmVjdGl2ZSAmJiBlbGVtZW50Q29udHJvbGxlcnNbc2NvcGVEaXJlY3RpdmUubmFtZV0pIHtcbiAgICAgICAgICAgIGJpbmRpbmdzID0gc2NvcGVEaXJlY3RpdmUuJCRiaW5kaW5ncy5iaW5kVG9Db250cm9sbGVyO1xuICAgICAgICAgICAgY29udHJvbGxlciA9IGVsZW1lbnRDb250cm9sbGVyc1tzY29wZURpcmVjdGl2ZS5uYW1lXTtcblxuICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIgJiYgY29udHJvbGxlci5pZGVudGlmaWVyICYmIGJpbmRpbmdzKSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXJGb3JCaW5kaW5ncyA9IGNvbnRyb2xsZXI7XG4gICAgICAgICAgICAgIHRoaXNMaW5rRm4uJCRkZXN0cm95QmluZGluZ3MgPVxuICAgICAgICAgICAgICAgICAgaW5pdGlhbGl6ZURpcmVjdGl2ZUJpbmRpbmdzKHNjb3BlLCBhdHRycywgY29udHJvbGxlci5pbnN0YW5jZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kaW5ncywgc2NvcGVEaXJlY3RpdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKGkgaW4gZWxlbWVudENvbnRyb2xsZXJzKSB7XG4gICAgICAgICAgICBjb250cm9sbGVyID0gZWxlbWVudENvbnRyb2xsZXJzW2ldO1xuICAgICAgICAgICAgdmFyIGNvbnRyb2xsZXJSZXN1bHQgPSBjb250cm9sbGVyKCk7XG5cbiAgICAgICAgICAgIGlmIChjb250cm9sbGVyUmVzdWx0ICE9PSBjb250cm9sbGVyLmluc3RhbmNlKSB7XG4gICAgICAgICAgICAgIC8vIElmIHRoZSBjb250cm9sbGVyIGNvbnN0cnVjdG9yIGhhcyBhIHJldHVybiB2YWx1ZSwgb3ZlcndyaXRlIHRoZSBpbnN0YW5jZVxuICAgICAgICAgICAgICAvLyBmcm9tIHNldHVwQ29udHJvbGxlcnMgYW5kIHVwZGF0ZSB0aGUgZWxlbWVudCBkYXRhXG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuaW5zdGFuY2UgPSBjb250cm9sbGVyUmVzdWx0O1xuICAgICAgICAgICAgICAkZWxlbWVudC5kYXRhKCckJyArIGkgKyAnQ29udHJvbGxlcicsIGNvbnRyb2xsZXJSZXN1bHQpO1xuICAgICAgICAgICAgICBpZiAoY29udHJvbGxlciA9PT0gY29udHJvbGxlckZvckJpbmRpbmdzKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGFuZCByZS1pbnN0YWxsIGJpbmRUb0NvbnRyb2xsZXIgYmluZGluZ3NcbiAgICAgICAgICAgICAgICB0aGlzTGlua0ZuLiQkZGVzdHJveUJpbmRpbmdzKCk7XG4gICAgICAgICAgICAgICAgdGhpc0xpbmtGbi4kJGRlc3Ryb3lCaW5kaW5ncyA9XG4gICAgICAgICAgICAgICAgICBpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3Moc2NvcGUsIGF0dHJzLCBjb250cm9sbGVyUmVzdWx0LCBiaW5kaW5ncywgc2NvcGVEaXJlY3RpdmUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUFJFTElOS0lOR1xuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHByZUxpbmtGbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIGxpbmtGbiA9IHByZUxpbmtGbnNbaV07XG4gICAgICAgICAgaW52b2tlTGlua0ZuKGxpbmtGbixcbiAgICAgICAgICAgICAgbGlua0ZuLmlzb2xhdGVTY29wZSA/IGlzb2xhdGVTY29wZSA6IHNjb3BlLFxuICAgICAgICAgICAgICAkZWxlbWVudCxcbiAgICAgICAgICAgICAgYXR0cnMsXG4gICAgICAgICAgICAgIGxpbmtGbi5yZXF1aXJlICYmIGdldENvbnRyb2xsZXJzKGxpbmtGbi5kaXJlY3RpdmVOYW1lLCBsaW5rRm4ucmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycyksXG4gICAgICAgICAgICAgIHRyYW5zY2x1ZGVGblxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSRUNVUlNJT05cbiAgICAgICAgLy8gV2Ugb25seSBwYXNzIHRoZSBpc29sYXRlIHNjb3BlLCBpZiB0aGUgaXNvbGF0ZSBkaXJlY3RpdmUgaGFzIGEgdGVtcGxhdGUsXG4gICAgICAgIC8vIG90aGVyd2lzZSB0aGUgY2hpbGQgZWxlbWVudHMgZG8gbm90IGJlbG9uZyB0byB0aGUgaXNvbGF0ZSBkaXJlY3RpdmUuXG4gICAgICAgIHZhciBzY29wZVRvQ2hpbGQgPSBzY29wZTtcbiAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSAmJiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLnRlbXBsYXRlIHx8IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS50ZW1wbGF0ZVVybCA9PT0gbnVsbCkpIHtcbiAgICAgICAgICBzY29wZVRvQ2hpbGQgPSBpc29sYXRlU2NvcGU7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGRMaW5rRm4gJiYgY2hpbGRMaW5rRm4oc2NvcGVUb0NoaWxkLCBsaW5rTm9kZS5jaGlsZE5vZGVzLCB1bmRlZmluZWQsIGJvdW5kVHJhbnNjbHVkZUZuKTtcblxuICAgICAgICAvLyBQT1NUTElOS0lOR1xuICAgICAgICBmb3IgKGkgPSBwb3N0TGlua0Zucy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGxpbmtGbiA9IHBvc3RMaW5rRm5zW2ldO1xuICAgICAgICAgIGludm9rZUxpbmtGbihsaW5rRm4sXG4gICAgICAgICAgICAgIGxpbmtGbi5pc29sYXRlU2NvcGUgPyBpc29sYXRlU2NvcGUgOiBzY29wZSxcbiAgICAgICAgICAgICAgJGVsZW1lbnQsXG4gICAgICAgICAgICAgIGF0dHJzLFxuICAgICAgICAgICAgICBsaW5rRm4ucmVxdWlyZSAmJiBnZXRDb250cm9sbGVycyhsaW5rRm4uZGlyZWN0aXZlTmFtZSwgbGlua0ZuLnJlcXVpcmUsICRlbGVtZW50LCBlbGVtZW50Q29udHJvbGxlcnMpLFxuICAgICAgICAgICAgICB0cmFuc2NsdWRlRm5cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgZnVuY3Rpb24gdGhhdCBpcyBpbmplY3RlZCBhcyBgJHRyYW5zY2x1ZGVgLlxuICAgICAgICAvLyBOb3RlOiBhbGwgYXJndW1lbnRzIGFyZSBvcHRpb25hbCFcbiAgICAgICAgZnVuY3Rpb24gY29udHJvbGxlcnNCb3VuZFRyYW5zY2x1ZGUoc2NvcGUsIGNsb25lQXR0YWNoRm4sIGZ1dHVyZVBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgdHJhbnNjbHVkZUNvbnRyb2xsZXJzO1xuXG4gICAgICAgICAgLy8gTm8gc2NvcGUgcGFzc2VkIGluOlxuICAgICAgICAgIGlmICghaXNTY29wZShzY29wZSkpIHtcbiAgICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQgPSBjbG9uZUF0dGFjaEZuO1xuICAgICAgICAgICAgY2xvbmVBdHRhY2hGbiA9IHNjb3BlO1xuICAgICAgICAgICAgc2NvcGUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgICB0cmFuc2NsdWRlQ29udHJvbGxlcnMgPSBlbGVtZW50Q29udHJvbGxlcnM7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZnV0dXJlUGFyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgZnV0dXJlUGFyZW50RWxlbWVudCA9IGhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlID8gJGVsZW1lbnQucGFyZW50KCkgOiAkZWxlbWVudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCBjbG9uZUF0dGFjaEZuLCB0cmFuc2NsdWRlQ29udHJvbGxlcnMsIGZ1dHVyZVBhcmVudEVsZW1lbnQsIHNjb3BlVG9DaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXJrRGlyZWN0aXZlc0FzSXNvbGF0ZShkaXJlY3RpdmVzKSB7XG4gICAgICAvLyBtYXJrIGFsbCBkaXJlY3RpdmVzIGFzIG5lZWRpbmcgaXNvbGF0ZSBzY29wZS5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqaiA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICBkaXJlY3RpdmVzW2pdID0gaW5oZXJpdChkaXJlY3RpdmVzW2pdLCB7JCRpc29sYXRlU2NvcGU6IHRydWV9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBsb29rcyB1cCB0aGUgZGlyZWN0aXZlIGFuZCBkZWNvcmF0ZXMgaXQgd2l0aCBleGNlcHRpb24gaGFuZGxpbmcgYW5kIHByb3BlciBwYXJhbWV0ZXJzLiBXZVxuICAgICAqIGNhbGwgdGhpcyB0aGUgYm91bmREaXJlY3RpdmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBkaXJlY3RpdmUgdG8gbG9vayB1cC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gVGhlIGRpcmVjdGl2ZSBtdXN0IGJlIGZvdW5kIGluIHNwZWNpZmljIGZvcm1hdC5cbiAgICAgKiAgIFN0cmluZyBjb250YWluaW5nIGFueSBvZiB0aGVzZXMgY2hhcmFjdGVyczpcbiAgICAgKlxuICAgICAqICAgKiBgRWA6IGVsZW1lbnQgbmFtZVxuICAgICAqICAgKiBgQSc6IGF0dHJpYnV0ZVxuICAgICAqICAgKiBgQ2A6IGNsYXNzXG4gICAgICogICAqIGBNYDogY29tbWVudFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIGRpcmVjdGl2ZSB3YXMgYWRkZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkRGlyZWN0aXZlKHREaXJlY3RpdmVzLCBuYW1lLCBsb2NhdGlvbiwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgc3RhcnRBdHRyTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kQXR0ck5hbWUpIHtcbiAgICAgIGlmIChuYW1lID09PSBpZ25vcmVEaXJlY3RpdmUpIHJldHVybiBudWxsO1xuICAgICAgdmFyIG1hdGNoID0gbnVsbDtcbiAgICAgIGlmIChoYXNEaXJlY3RpdmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGZvciAodmFyIGRpcmVjdGl2ZSwgZGlyZWN0aXZlcyA9ICRpbmplY3Rvci5nZXQobmFtZSArIFN1ZmZpeCksXG4gICAgICAgICAgICBpID0gMCwgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGlyZWN0aXZlID0gZGlyZWN0aXZlc1tpXTtcbiAgICAgICAgICAgIGlmICgobWF4UHJpb3JpdHkgPT09IHVuZGVmaW5lZCB8fCBtYXhQcmlvcml0eSA+IGRpcmVjdGl2ZS5wcmlvcml0eSkgJiZcbiAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlc3RyaWN0LmluZGV4T2YobG9jYXRpb24pICE9IC0xKSB7XG4gICAgICAgICAgICAgIGlmIChzdGFydEF0dHJOYW1lKSB7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlID0gaW5oZXJpdChkaXJlY3RpdmUsIHskJHN0YXJ0OiBzdGFydEF0dHJOYW1lLCAkJGVuZDogZW5kQXR0ck5hbWV9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0RGlyZWN0aXZlcy5wdXNoKGRpcmVjdGl2ZSk7XG4gICAgICAgICAgICAgIG1hdGNoID0gZGlyZWN0aXZlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7IH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogbG9va3MgdXAgdGhlIGRpcmVjdGl2ZSBhbmQgcmV0dXJucyB0cnVlIGlmIGl0IGlzIGEgbXVsdGktZWxlbWVudCBkaXJlY3RpdmUsXG4gICAgICogYW5kIHRoZXJlZm9yZSByZXF1aXJlcyBET00gbm9kZXMgYmV0d2VlbiAtc3RhcnQgYW5kIC1lbmQgbWFya2VycyB0byBiZSBncm91cGVkXG4gICAgICogdG9nZXRoZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBkaXJlY3RpdmUgdG8gbG9vayB1cC5cbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIGRpcmVjdGl2ZSB3YXMgcmVnaXN0ZXJlZCBhcyBtdWx0aS1lbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRpcmVjdGl2ZUlzTXVsdGlFbGVtZW50KG5hbWUpIHtcbiAgICAgIGlmIChoYXNEaXJlY3RpdmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGZvciAodmFyIGRpcmVjdGl2ZSwgZGlyZWN0aXZlcyA9ICRpbmplY3Rvci5nZXQobmFtZSArIFN1ZmZpeCksXG4gICAgICAgICAgICBpID0gMCwgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICBkaXJlY3RpdmUgPSBkaXJlY3RpdmVzW2ldO1xuICAgICAgICAgIGlmIChkaXJlY3RpdmUubXVsdGlFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSBlbGVtZW50IGlzIHJlcGxhY2VkIHdpdGggSFRNTCB0ZW1wbGF0ZSB0aGVuIHRoZSBuZXcgYXR0cmlidXRlc1xuICAgICAqIG9uIHRoZSB0ZW1wbGF0ZSBuZWVkIHRvIGJlIG1lcmdlZCB3aXRoIHRoZSBleGlzdGluZyBhdHRyaWJ1dGVzIGluIHRoZSBET00uXG4gICAgICogVGhlIGRlc2lyZWQgZWZmZWN0IGlzIHRvIGhhdmUgYm90aCBvZiB0aGUgYXR0cmlidXRlcyBwcmVzZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRzdCBkZXN0aW5hdGlvbiBhdHRyaWJ1dGVzIChvcmlnaW5hbCBET00pXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHNyYyBzb3VyY2UgYXR0cmlidXRlcyAoZnJvbSB0aGUgZGlyZWN0aXZlIHRlbXBsYXRlKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzKGRzdCwgc3JjKSB7XG4gICAgICB2YXIgc3JjQXR0ciA9IHNyYy4kYXR0cixcbiAgICAgICAgICBkc3RBdHRyID0gZHN0LiRhdHRyLFxuICAgICAgICAgICRlbGVtZW50ID0gZHN0LiQkZWxlbWVudDtcblxuICAgICAgLy8gcmVhcHBseSB0aGUgb2xkIGF0dHJpYnV0ZXMgdG8gdGhlIG5ldyBlbGVtZW50XG4gICAgICBmb3JFYWNoKGRzdCwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoa2V5LmNoYXJBdCgwKSAhPSAnJCcpIHtcbiAgICAgICAgICBpZiAoc3JjW2tleV0gJiYgc3JjW2tleV0gIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB2YWx1ZSArPSAoa2V5ID09PSAnc3R5bGUnID8gJzsnIDogJyAnKSArIHNyY1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkc3QuJHNldChrZXksIHZhbHVlLCB0cnVlLCBzcmNBdHRyW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gY29weSB0aGUgbmV3IGF0dHJpYnV0ZXMgb24gdGhlIG9sZCBhdHRycyBvYmplY3RcbiAgICAgIGZvckVhY2goc3JjLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChrZXkgPT0gJ2NsYXNzJykge1xuICAgICAgICAgIHNhZmVBZGRDbGFzcygkZWxlbWVudCwgdmFsdWUpO1xuICAgICAgICAgIGRzdFsnY2xhc3MnXSA9IChkc3RbJ2NsYXNzJ10gPyBkc3RbJ2NsYXNzJ10gKyAnICcgOiAnJykgKyB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT0gJ3N0eWxlJykge1xuICAgICAgICAgICRlbGVtZW50LmF0dHIoJ3N0eWxlJywgJGVsZW1lbnQuYXR0cignc3R5bGUnKSArICc7JyArIHZhbHVlKTtcbiAgICAgICAgICBkc3RbJ3N0eWxlJ10gPSAoZHN0WydzdHlsZSddID8gZHN0WydzdHlsZSddICsgJzsnIDogJycpICsgdmFsdWU7XG4gICAgICAgICAgLy8gYGRzdGAgd2lsbCBuZXZlciBjb250YWluIGhhc093blByb3BlcnR5IGFzIERPTSBwYXJzZXIgd29uJ3QgbGV0IGl0LlxuICAgICAgICAgIC8vIFlvdSB3aWxsIGdldCBhbiBcIkludmFsaWRDaGFyYWN0ZXJFcnJvcjogRE9NIEV4Y2VwdGlvbiA1XCIgZXJyb3IgaWYgeW91XG4gICAgICAgICAgLy8gaGF2ZSBhbiBhdHRyaWJ1dGUgbGlrZSBcImhhcy1vd24tcHJvcGVydHlcIiBvciBcImRhdGEtaGFzLW93bi1wcm9wZXJ0eVwiLCBldGMuXG4gICAgICAgIH0gZWxzZSBpZiAoa2V5LmNoYXJBdCgwKSAhPSAnJCcgJiYgIWRzdC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgZHN0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICBkc3RBdHRyW2tleV0gPSBzcmNBdHRyW2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gY29tcGlsZVRlbXBsYXRlVXJsKGRpcmVjdGl2ZXMsICRjb21waWxlTm9kZSwgdEF0dHJzLFxuICAgICAgICAkcm9vdEVsZW1lbnQsIGNoaWxkVHJhbnNjbHVkZUZuLCBwcmVMaW5rRm5zLCBwb3N0TGlua0ZucywgcHJldmlvdXNDb21waWxlQ29udGV4dCkge1xuICAgICAgdmFyIGxpbmtRdWV1ZSA9IFtdLFxuICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLFxuICAgICAgICAgIGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbixcbiAgICAgICAgICBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlID0gJGNvbXBpbGVOb2RlWzBdLFxuICAgICAgICAgIG9yaWdBc3luY0RpcmVjdGl2ZSA9IGRpcmVjdGl2ZXMuc2hpZnQoKSxcbiAgICAgICAgICBkZXJpdmVkU3luY0RpcmVjdGl2ZSA9IGluaGVyaXQob3JpZ0FzeW5jRGlyZWN0aXZlLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogbnVsbCwgdHJhbnNjbHVkZTogbnVsbCwgcmVwbGFjZTogbnVsbCwgJCRvcmlnaW5hbERpcmVjdGl2ZTogb3JpZ0FzeW5jRGlyZWN0aXZlXG4gICAgICAgICAgfSksXG4gICAgICAgICAgdGVtcGxhdGVVcmwgPSAoaXNGdW5jdGlvbihvcmlnQXN5bmNEaXJlY3RpdmUudGVtcGxhdGVVcmwpKVxuICAgICAgICAgICAgICA/IG9yaWdBc3luY0RpcmVjdGl2ZS50ZW1wbGF0ZVVybCgkY29tcGlsZU5vZGUsIHRBdHRycylcbiAgICAgICAgICAgICAgOiBvcmlnQXN5bmNEaXJlY3RpdmUudGVtcGxhdGVVcmwsXG4gICAgICAgICAgdGVtcGxhdGVOYW1lc3BhY2UgPSBvcmlnQXN5bmNEaXJlY3RpdmUudGVtcGxhdGVOYW1lc3BhY2U7XG5cbiAgICAgICRjb21waWxlTm9kZS5lbXB0eSgpO1xuXG4gICAgICAkdGVtcGxhdGVSZXF1ZXN0KHRlbXBsYXRlVXJsKVxuICAgICAgICAudGhlbihmdW5jdGlvbihjb250ZW50KSB7XG4gICAgICAgICAgdmFyIGNvbXBpbGVOb2RlLCB0ZW1wVGVtcGxhdGVBdHRycywgJHRlbXBsYXRlLCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuO1xuXG4gICAgICAgICAgY29udGVudCA9IGRlbm9ybWFsaXplVGVtcGxhdGUoY29udGVudCk7XG5cbiAgICAgICAgICBpZiAob3JpZ0FzeW5jRGlyZWN0aXZlLnJlcGxhY2UpIHtcbiAgICAgICAgICAgIGlmIChqcUxpdGVJc1RleHROb2RlKGNvbnRlbnQpKSB7XG4gICAgICAgICAgICAgICR0ZW1wbGF0ZSA9IFtdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gcmVtb3ZlQ29tbWVudHMod3JhcFRlbXBsYXRlKHRlbXBsYXRlTmFtZXNwYWNlLCB0cmltKGNvbnRlbnQpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21waWxlTm9kZSA9ICR0ZW1wbGF0ZVswXTtcblxuICAgICAgICAgICAgaWYgKCR0ZW1wbGF0ZS5sZW5ndGggIT0gMSB8fCBjb21waWxlTm9kZS5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3RwbHJ0JyxcbiAgICAgICAgICAgICAgICAgIFwiVGVtcGxhdGUgZm9yIGRpcmVjdGl2ZSAnezB9JyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiB7MX1cIixcbiAgICAgICAgICAgICAgICAgIG9yaWdBc3luY0RpcmVjdGl2ZS5uYW1lLCB0ZW1wbGF0ZVVybCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRlbXBUZW1wbGF0ZUF0dHJzID0geyRhdHRyOiB7fX07XG4gICAgICAgICAgICByZXBsYWNlV2l0aCgkcm9vdEVsZW1lbnQsICRjb21waWxlTm9kZSwgY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgdmFyIHRlbXBsYXRlRGlyZWN0aXZlcyA9IGNvbGxlY3REaXJlY3RpdmVzKGNvbXBpbGVOb2RlLCBbXSwgdGVtcFRlbXBsYXRlQXR0cnMpO1xuXG4gICAgICAgICAgICBpZiAoaXNPYmplY3Qob3JpZ0FzeW5jRGlyZWN0aXZlLnNjb3BlKSkge1xuICAgICAgICAgICAgICBtYXJrRGlyZWN0aXZlc0FzSXNvbGF0ZSh0ZW1wbGF0ZURpcmVjdGl2ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGlyZWN0aXZlcyA9IHRlbXBsYXRlRGlyZWN0aXZlcy5jb25jYXQoZGlyZWN0aXZlcyk7XG4gICAgICAgICAgICBtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyh0QXR0cnMsIHRlbXBUZW1wbGF0ZUF0dHJzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29tcGlsZU5vZGUgPSBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlO1xuICAgICAgICAgICAgJGNvbXBpbGVOb2RlLmh0bWwoY29udGVudCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGlyZWN0aXZlcy51bnNoaWZ0KGRlcml2ZWRTeW5jRGlyZWN0aXZlKTtcblxuICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuID0gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIGNvbXBpbGVOb2RlLCB0QXR0cnMsXG4gICAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuLCAkY29tcGlsZU5vZGUsIG9yaWdBc3luY0RpcmVjdGl2ZSwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsXG4gICAgICAgICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpO1xuICAgICAgICAgIGZvckVhY2goJHJvb3RFbGVtZW50LCBmdW5jdGlvbihub2RlLCBpKSB7XG4gICAgICAgICAgICBpZiAobm9kZSA9PSBjb21waWxlTm9kZSkge1xuICAgICAgICAgICAgICAkcm9vdEVsZW1lbnRbaV0gPSAkY29tcGlsZU5vZGVbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuID0gY29tcGlsZU5vZGVzKCRjb21waWxlTm9kZVswXS5jaGlsZE5vZGVzLCBjaGlsZFRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgICB3aGlsZSAobGlua1F1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHNjb3BlID0gbGlua1F1ZXVlLnNoaWZ0KCksXG4gICAgICAgICAgICAgICAgYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSA9IGxpbmtRdWV1ZS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGxpbmtSb290RWxlbWVudCA9IGxpbmtRdWV1ZS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGJvdW5kVHJhbnNjbHVkZUZuID0gbGlua1F1ZXVlLnNoaWZ0KCksXG4gICAgICAgICAgICAgICAgbGlua05vZGUgPSAkY29tcGlsZU5vZGVbMF07XG5cbiAgICAgICAgICAgIGlmIChzY29wZS4kJGRlc3Ryb3llZCkgY29udGludWU7XG5cbiAgICAgICAgICAgIGlmIChiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlICE9PSBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlKSB7XG4gICAgICAgICAgICAgIHZhciBvbGRDbGFzc2VzID0gYmVmb3JlVGVtcGxhdGVMaW5rTm9kZS5jbGFzc05hbWU7XG5cbiAgICAgICAgICAgICAgaWYgKCEocHJldmlvdXNDb21waWxlQ29udGV4dC5oYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSAmJlxuICAgICAgICAgICAgICAgICAgb3JpZ0FzeW5jRGlyZWN0aXZlLnJlcGxhY2UpKSB7XG4gICAgICAgICAgICAgICAgLy8gaXQgd2FzIGNsb25lZCB0aGVyZWZvcmUgd2UgaGF2ZSB0byBjbG9uZSBhcyB3ZWxsLlxuICAgICAgICAgICAgICAgIGxpbmtOb2RlID0ganFMaXRlQ2xvbmUoY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlcGxhY2VXaXRoKGxpbmtSb290RWxlbWVudCwganFMaXRlKGJlZm9yZVRlbXBsYXRlTGlua05vZGUpLCBsaW5rTm9kZSk7XG5cbiAgICAgICAgICAgICAgLy8gQ29weSBpbiBDU1MgY2xhc3NlcyBmcm9tIG9yaWdpbmFsIG5vZGVcbiAgICAgICAgICAgICAgc2FmZUFkZENsYXNzKGpxTGl0ZShsaW5rTm9kZSksIG9sZENsYXNzZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50KSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZSwgYm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGJvdW5kVHJhbnNjbHVkZUZuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4oYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuLCBzY29wZSwgbGlua05vZGUsICRyb290RWxlbWVudCxcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiwgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsaW5rUXVldWUgPSBudWxsO1xuICAgICAgICB9KTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlbGF5ZWROb2RlTGlua0ZuKGlnbm9yZUNoaWxkTGlua0ZuLCBzY29wZSwgbm9kZSwgcm9vdEVsZW1lbnQsIGJvdW5kVHJhbnNjbHVkZUZuKSB7XG4gICAgICAgIHZhciBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gYm91bmRUcmFuc2NsdWRlRm47XG4gICAgICAgIGlmIChzY29wZS4kJGRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBpZiAobGlua1F1ZXVlKSB7XG4gICAgICAgICAgbGlua1F1ZXVlLnB1c2goc2NvcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICByb290RWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZSwgYm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbihhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4sIHNjb3BlLCBub2RlLCByb290RWxlbWVudCwgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBTb3J0aW5nIGZ1bmN0aW9uIGZvciBib3VuZCBkaXJlY3RpdmVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJ5UHJpb3JpdHkoYSwgYikge1xuICAgICAgdmFyIGRpZmYgPSBiLnByaW9yaXR5IC0gYS5wcmlvcml0eTtcbiAgICAgIGlmIChkaWZmICE9PSAwKSByZXR1cm4gZGlmZjtcbiAgICAgIGlmIChhLm5hbWUgIT09IGIubmFtZSkgcmV0dXJuIChhLm5hbWUgPCBiLm5hbWUpID8gLTEgOiAxO1xuICAgICAgcmV0dXJuIGEuaW5kZXggLSBiLmluZGV4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzc2VydE5vRHVwbGljYXRlKHdoYXQsIHByZXZpb3VzRGlyZWN0aXZlLCBkaXJlY3RpdmUsIGVsZW1lbnQpIHtcblxuICAgICAgZnVuY3Rpb24gd3JhcE1vZHVsZU5hbWVJZkRlZmluZWQobW9kdWxlTmFtZSkge1xuICAgICAgICByZXR1cm4gbW9kdWxlTmFtZSA/XG4gICAgICAgICAgKCcgKG1vZHVsZTogJyArIG1vZHVsZU5hbWUgKyAnKScpIDpcbiAgICAgICAgICAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKHByZXZpb3VzRGlyZWN0aXZlKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdtdWx0aWRpcicsICdNdWx0aXBsZSBkaXJlY3RpdmVzIFt7MH17MX0sIHsyfXszfV0gYXNraW5nIGZvciB7NH0gb246IHs1fScsXG4gICAgICAgICAgICBwcmV2aW91c0RpcmVjdGl2ZS5uYW1lLCB3cmFwTW9kdWxlTmFtZUlmRGVmaW5lZChwcmV2aW91c0RpcmVjdGl2ZS4kJG1vZHVsZU5hbWUpLFxuICAgICAgICAgICAgZGlyZWN0aXZlLm5hbWUsIHdyYXBNb2R1bGVOYW1lSWZEZWZpbmVkKGRpcmVjdGl2ZS4kJG1vZHVsZU5hbWUpLCB3aGF0LCBzdGFydGluZ1RhZyhlbGVtZW50KSk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUoZGlyZWN0aXZlcywgdGV4dCkge1xuICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUodGV4dCwgdHJ1ZSk7XG4gICAgICBpZiAoaW50ZXJwb2xhdGVGbikge1xuICAgICAgICBkaXJlY3RpdmVzLnB1c2goe1xuICAgICAgICAgIHByaW9yaXR5OiAwLFxuICAgICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZUNvbXBpbGVGbih0ZW1wbGF0ZU5vZGUpIHtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZU5vZGVQYXJlbnQgPSB0ZW1wbGF0ZU5vZGUucGFyZW50KCksXG4gICAgICAgICAgICAgICAgaGFzQ29tcGlsZVBhcmVudCA9ICEhdGVtcGxhdGVOb2RlUGFyZW50Lmxlbmd0aDtcblxuICAgICAgICAgICAgLy8gV2hlbiB0cmFuc2NsdWRpbmcgYSB0ZW1wbGF0ZSB0aGF0IGhhcyBiaW5kaW5ncyBpbiB0aGUgcm9vdFxuICAgICAgICAgICAgLy8gd2UgZG9uJ3QgaGF2ZSBhIHBhcmVudCBhbmQgdGh1cyBuZWVkIHRvIGFkZCB0aGUgY2xhc3MgZHVyaW5nIGxpbmtpbmcgZm4uXG4gICAgICAgICAgICBpZiAoaGFzQ29tcGlsZVBhcmVudCkgY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZU5vZGVQYXJlbnQpO1xuXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gdGV4dEludGVycG9sYXRlTGlua0ZuKHNjb3BlLCBub2RlKSB7XG4gICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudCgpO1xuICAgICAgICAgICAgICBpZiAoIWhhc0NvbXBpbGVQYXJlbnQpIGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3MocGFyZW50KTtcbiAgICAgICAgICAgICAgY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKHBhcmVudCwgaW50ZXJwb2xhdGVGbi5leHByZXNzaW9ucyk7XG4gICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBub2RlWzBdLm5vZGVWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHdyYXBUZW1wbGF0ZSh0eXBlLCB0ZW1wbGF0ZSkge1xuICAgICAgdHlwZSA9IGxvd2VyY2FzZSh0eXBlIHx8ICdodG1sJyk7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3N2Zyc6XG4gICAgICBjYXNlICdtYXRoJzpcbiAgICAgICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgd3JhcHBlci5pbm5lckhUTUwgPSAnPCcgKyB0eXBlICsgJz4nICsgdGVtcGxhdGUgKyAnPC8nICsgdHlwZSArICc+JztcbiAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gZ2V0VHJ1c3RlZENvbnRleHQobm9kZSwgYXR0ck5vcm1hbGl6ZWROYW1lKSB7XG4gICAgICBpZiAoYXR0ck5vcm1hbGl6ZWROYW1lID09IFwic3JjZG9jXCIpIHtcbiAgICAgICAgcmV0dXJuICRzY2UuSFRNTDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBub2RlTmFtZV8obm9kZSk7XG4gICAgICAvLyBtYWN0aW9uW3hsaW5rOmhyZWZdIGNhbiBzb3VyY2UgU1ZHLiAgSXQncyBub3QgbGltaXRlZCB0byA8bWFjdGlvbj4uXG4gICAgICBpZiAoYXR0ck5vcm1hbGl6ZWROYW1lID09IFwieGxpbmtIcmVmXCIgfHxcbiAgICAgICAgICAodGFnID09IFwiZm9ybVwiICYmIGF0dHJOb3JtYWxpemVkTmFtZSA9PSBcImFjdGlvblwiKSB8fFxuICAgICAgICAgICh0YWcgIT0gXCJpbWdcIiAmJiAoYXR0ck5vcm1hbGl6ZWROYW1lID09IFwic3JjXCIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyTm9ybWFsaXplZE5hbWUgPT0gXCJuZ1NyY1wiKSkpIHtcbiAgICAgICAgcmV0dXJuICRzY2UuUkVTT1VSQ0VfVVJMO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gYWRkQXR0ckludGVycG9sYXRlRGlyZWN0aXZlKG5vZGUsIGRpcmVjdGl2ZXMsIHZhbHVlLCBuYW1lLCBhbGxPck5vdGhpbmcpIHtcbiAgICAgIHZhciB0cnVzdGVkQ29udGV4dCA9IGdldFRydXN0ZWRDb250ZXh0KG5vZGUsIG5hbWUpO1xuICAgICAgYWxsT3JOb3RoaW5nID0gQUxMX09SX05PVEhJTkdfQVRUUlNbbmFtZV0gfHwgYWxsT3JOb3RoaW5nO1xuXG4gICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZSh2YWx1ZSwgdHJ1ZSwgdHJ1c3RlZENvbnRleHQsIGFsbE9yTm90aGluZyk7XG5cbiAgICAgIC8vIG5vIGludGVycG9sYXRpb24gZm91bmQgLT4gaWdub3JlXG4gICAgICBpZiAoIWludGVycG9sYXRlRm4pIHJldHVybjtcblxuXG4gICAgICBpZiAobmFtZSA9PT0gXCJtdWx0aXBsZVwiICYmIG5vZGVOYW1lXyhub2RlKSA9PT0gXCJzZWxlY3RcIikge1xuICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycihcInNlbG11bHRpXCIsXG4gICAgICAgICAgICBcIkJpbmRpbmcgdG8gdGhlICdtdWx0aXBsZScgYXR0cmlidXRlIGlzIG5vdCBzdXBwb3J0ZWQuIEVsZW1lbnQ6IHswfVwiLFxuICAgICAgICAgICAgc3RhcnRpbmdUYWcobm9kZSkpO1xuICAgICAgfVxuXG4gICAgICBkaXJlY3RpdmVzLnB1c2goe1xuICAgICAgICBwcmlvcml0eTogMTAwLFxuICAgICAgICBjb21waWxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHByZTogZnVuY3Rpb24gYXR0ckludGVycG9sYXRlUHJlTGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICAgICAgICAgdmFyICQkb2JzZXJ2ZXJzID0gKGF0dHIuJCRvYnNlcnZlcnMgfHwgKGF0dHIuJCRvYnNlcnZlcnMgPSB7fSkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKEVWRU5UX0hBTkRMRVJfQVRUUl9SRUdFWFAudGVzdChuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ25vZG9tZXZlbnRzJyxcbiAgICAgICAgICAgICAgICAgICAgICBcIkludGVycG9sYXRpb25zIGZvciBIVE1MIERPTSBldmVudCBhdHRyaWJ1dGVzIGFyZSBkaXNhbGxvd2VkLiAgUGxlYXNlIHVzZSB0aGUgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5nLSB2ZXJzaW9ucyAoc3VjaCBhcyBuZy1jbGljayBpbnN0ZWFkIG9mIG9uY2xpY2spIGluc3RlYWQuXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaGFzIGNoYW5nZWQgc2luY2UgbGFzdCAkaW50ZXJwb2xhdGUoKWVkXG4gICAgICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gYXR0cltuYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGludGVycG9sYXRlIGFnYWluIHNpbmNlIHRoZSBhdHRyaWJ1dGUgdmFsdWUgaGFzIGJlZW4gdXBkYXRlZFxuICAgICAgICAgICAgICAgICAgLy8gKGUuZy4gYnkgYW5vdGhlciBkaXJlY3RpdmUncyBjb21waWxlIGZ1bmN0aW9uKVxuICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIHVuc2V0L2VtcHR5IHZhbHVlcyBtYWtlIGludGVycG9sYXRlRm4gZmFsc3lcbiAgICAgICAgICAgICAgICAgIGludGVycG9sYXRlRm4gPSBuZXdWYWx1ZSAmJiAkaW50ZXJwb2xhdGUobmV3VmFsdWUsIHRydWUsIHRydXN0ZWRDb250ZXh0LCBhbGxPck5vdGhpbmcpO1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBpZiBhdHRyaWJ1dGUgd2FzIHVwZGF0ZWQgc28gdGhhdCB0aGVyZSBpcyBubyBpbnRlcnBvbGF0aW9uIGdvaW5nIG9uIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgICAgICAgICAgICAvLyByZWdpc3RlciBhbnkgb2JzZXJ2ZXJzXG4gICAgICAgICAgICAgICAgaWYgKCFpbnRlcnBvbGF0ZUZuKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplIGF0dHIgb2JqZWN0IHNvIHRoYXQgaXQncyByZWFkeSBpbiBjYXNlIHdlIG5lZWQgdGhlIHZhbHVlIGZvciBpc29sYXRlXG4gICAgICAgICAgICAgICAgLy8gc2NvcGUgaW5pdGlhbGl6YXRpb24sIG90aGVyd2lzZSB0aGUgdmFsdWUgd291bGQgbm90IGJlIGF2YWlsYWJsZSBmcm9tIGlzb2xhdGVcbiAgICAgICAgICAgICAgICAvLyBkaXJlY3RpdmUncyBsaW5raW5nIGZuIGR1cmluZyBsaW5raW5nIHBoYXNlXG4gICAgICAgICAgICAgICAgYXR0cltuYW1lXSA9IGludGVycG9sYXRlRm4oc2NvcGUpO1xuXG4gICAgICAgICAgICAgICAgKCQkb2JzZXJ2ZXJzW25hbWVdIHx8ICgkJG9ic2VydmVyc1tuYW1lXSA9IFtdKSkuJCRpbnRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgKGF0dHIuJCRvYnNlcnZlcnMgJiYgYXR0ci4kJG9ic2VydmVyc1tuYW1lXS4kJHNjb3BlIHx8IHNjb3BlKS5cbiAgICAgICAgICAgICAgICAgICR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hBY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vc3BlY2lhbCBjYXNlIGZvciBjbGFzcyBhdHRyaWJ1dGUgYWRkaXRpb24gKyByZW1vdmFsXG4gICAgICAgICAgICAgICAgICAgIC8vc28gdGhhdCBjbGFzcyBjaGFuZ2VzIGNhbiB0YXAgaW50byB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgICAgIC8vaG9va3MgcHJvdmlkZWQgYnkgdGhlICRhbmltYXRlIHNlcnZpY2UuIEJlIHN1cmUgdG9cbiAgICAgICAgICAgICAgICAgICAgLy9za2lwIGFuaW1hdGlvbnMgd2hlbiB0aGUgZmlyc3QgZGlnZXN0IG9jY3VycyAod2hlblxuICAgICAgICAgICAgICAgICAgICAvL2JvdGggdGhlIG5ldyBhbmQgdGhlIG9sZCB2YWx1ZXMgYXJlIHRoZSBzYW1lKSBzaW5jZVxuICAgICAgICAgICAgICAgICAgICAvL3RoZSBDU1MgY2xhc3NlcyBhcmUgdGhlIG5vbi1pbnRlcnBvbGF0ZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAnY2xhc3MnICYmIG5ld1ZhbHVlICE9IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0ci4kdXBkYXRlQ2xhc3MobmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyLiRzZXQobmFtZSwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgYSBzcGVjaWFsIGpxTGl0ZS5yZXBsYWNlV2l0aCwgd2hpY2ggY2FuIHJlcGxhY2UgaXRlbXMgd2hpY2hcbiAgICAgKiBoYXZlIG5vIHBhcmVudHMsIHByb3ZpZGVkIHRoYXQgdGhlIGNvbnRhaW5pbmcganFMaXRlIGNvbGxlY3Rpb24gaXMgcHJvdmlkZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0pxTGl0ZT19ICRyb290RWxlbWVudCBUaGUgcm9vdCBvZiB0aGUgY29tcGlsZSB0cmVlLiBVc2VkIHNvIHRoYXQgd2UgY2FuIHJlcGxhY2Ugbm9kZXNcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgcm9vdCBvZiB0aGUgdHJlZS5cbiAgICAgKiBAcGFyYW0ge0pxTGl0ZX0gZWxlbWVudHNUb1JlbW92ZSBUaGUganFMaXRlIGVsZW1lbnQgd2hpY2ggd2UgYXJlIGdvaW5nIHRvIHJlcGxhY2UuIFdlIGtlZXBcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgc2hlbGwsIGJ1dCByZXBsYWNlIGl0cyBET00gbm9kZSByZWZlcmVuY2UuXG4gICAgICogQHBhcmFtIHtOb2RlfSBuZXdOb2RlIFRoZSBuZXcgRE9NIG5vZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZVdpdGgoJHJvb3RFbGVtZW50LCBlbGVtZW50c1RvUmVtb3ZlLCBuZXdOb2RlKSB7XG4gICAgICB2YXIgZmlyc3RFbGVtZW50VG9SZW1vdmUgPSBlbGVtZW50c1RvUmVtb3ZlWzBdLFxuICAgICAgICAgIHJlbW92ZUNvdW50ID0gZWxlbWVudHNUb1JlbW92ZS5sZW5ndGgsXG4gICAgICAgICAgcGFyZW50ID0gZmlyc3RFbGVtZW50VG9SZW1vdmUucGFyZW50Tm9kZSxcbiAgICAgICAgICBpLCBpaTtcblxuICAgICAgaWYgKCRyb290RWxlbWVudCkge1xuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9ICRyb290RWxlbWVudC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgaWYgKCRyb290RWxlbWVudFtpXSA9PSBmaXJzdEVsZW1lbnRUb1JlbW92ZSkge1xuICAgICAgICAgICAgJHJvb3RFbGVtZW50W2krK10gPSBuZXdOb2RlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IGksIGoyID0gaiArIHJlbW92ZUNvdW50IC0gMSxcbiAgICAgICAgICAgICAgICAgICAgIGpqID0gJHJvb3RFbGVtZW50Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgaiA8IGpqOyBqKyssIGoyKyspIHtcbiAgICAgICAgICAgICAgaWYgKGoyIDwgamopIHtcbiAgICAgICAgICAgICAgICAkcm9vdEVsZW1lbnRbal0gPSAkcm9vdEVsZW1lbnRbajJdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSAkcm9vdEVsZW1lbnRbal07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRyb290RWxlbWVudC5sZW5ndGggLT0gcmVtb3ZlQ291bnQgLSAxO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgcmVwbGFjZWQgZWxlbWVudCBpcyBhbHNvIHRoZSBqUXVlcnkgLmNvbnRleHQgdGhlbiByZXBsYWNlIGl0XG4gICAgICAgICAgICAvLyAuY29udGV4dCBpcyBhIGRlcHJlY2F0ZWQgalF1ZXJ5IGFwaSwgc28gd2Ugc2hvdWxkIHNldCBpdCBvbmx5IHdoZW4galF1ZXJ5IHNldCBpdFxuICAgICAgICAgICAgLy8gaHR0cDovL2FwaS5qcXVlcnkuY29tL2NvbnRleHQvXG4gICAgICAgICAgICBpZiAoJHJvb3RFbGVtZW50LmNvbnRleHQgPT09IGZpcnN0RWxlbWVudFRvUmVtb3ZlKSB7XG4gICAgICAgICAgICAgICRyb290RWxlbWVudC5jb250ZXh0ID0gbmV3Tm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQobmV3Tm9kZSwgZmlyc3RFbGVtZW50VG9SZW1vdmUpO1xuICAgICAgfVxuXG4gICAgICAvLyBUT0RPKHBlcmYpOiB3aGF0J3MgdGhpcyBkb2N1bWVudCBmcmFnbWVudCBmb3I/IGlzIGl0IG5lZWRlZD8gY2FuIHdlIGF0IGxlYXN0IHJldXNlIGl0P1xuICAgICAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZmlyc3RFbGVtZW50VG9SZW1vdmUpO1xuXG4gICAgICBpZiAoanFMaXRlLmhhc0RhdGEoZmlyc3RFbGVtZW50VG9SZW1vdmUpKSB7XG4gICAgICAgIC8vIENvcHkgb3ZlciB1c2VyIGRhdGEgKHRoYXQgaW5jbHVkZXMgQW5ndWxhcidzICRzY29wZSBldGMuKS4gRG9uJ3QgY29weSBwcml2YXRlXG4gICAgICAgIC8vIGRhdGEgaGVyZSBiZWNhdXNlIHRoZXJlJ3Mgbm8gcHVibGljIGludGVyZmFjZSBpbiBqUXVlcnkgdG8gZG8gdGhhdCBhbmQgY29weWluZyBvdmVyXG4gICAgICAgIC8vIGV2ZW50IGxpc3RlbmVycyAod2hpY2ggaXMgdGhlIG1haW4gdXNlIG9mIHByaXZhdGUgZGF0YSkgd291bGRuJ3Qgd29yayBhbnl3YXkuXG4gICAgICAgIGpxTGl0ZShuZXdOb2RlKS5kYXRhKGpxTGl0ZShmaXJzdEVsZW1lbnRUb1JlbW92ZSkuZGF0YSgpKTtcblxuICAgICAgICAvLyBSZW1vdmUgZGF0YSBvZiB0aGUgcmVwbGFjZWQgZWxlbWVudC4gV2UgY2Fubm90IGp1c3QgY2FsbCAucmVtb3ZlKClcbiAgICAgICAgLy8gb24gdGhlIGVsZW1lbnQgaXQgc2luY2UgdGhhdCB3b3VsZCBkZWFsbG9jYXRlIHNjb3BlIHRoYXQgaXMgbmVlZGVkXG4gICAgICAgIC8vIGZvciB0aGUgbmV3IG5vZGUuIEluc3RlYWQsIHJlbW92ZSB0aGUgZGF0YSBcIm1hbnVhbGx5XCIuXG4gICAgICAgIGlmICghalF1ZXJ5KSB7XG4gICAgICAgICAgZGVsZXRlIGpxTGl0ZS5jYWNoZVtmaXJzdEVsZW1lbnRUb1JlbW92ZVtqcUxpdGUuZXhwYW5kb11dO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGpRdWVyeSAyLnggZG9lc24ndCBleHBvc2UgdGhlIGRhdGEgc3RvcmFnZS4gVXNlIGpRdWVyeS5jbGVhbkRhdGEgdG8gY2xlYW4gdXAgYWZ0ZXJcbiAgICAgICAgICAvLyB0aGUgcmVwbGFjZWQgZWxlbWVudC4gVGhlIGNsZWFuRGF0YSB2ZXJzaW9uIG1vbmtleS1wYXRjaGVkIGJ5IEFuZ3VsYXIgd291bGQgY2F1c2VcbiAgICAgICAgICAvLyB0aGUgc2NvcGUgdG8gYmUgdHJhc2hlZCBhbmQgd2UgZG8gbmVlZCB0aGUgdmVyeSBzYW1lIHNjb3BlIHRvIHdvcmsgd2l0aCB0aGUgbmV3XG4gICAgICAgICAgLy8gZWxlbWVudC4gSG93ZXZlciwgd2UgY2Fubm90IGp1c3QgY2FjaGUgdGhlIG5vbi1wYXRjaGVkIHZlcnNpb24gYW5kIHVzZSBpdCBoZXJlIGFzXG4gICAgICAgICAgLy8gdGhhdCB3b3VsZCBicmVhayBpZiBhbm90aGVyIGxpYnJhcnkgcGF0Y2hlcyB0aGUgbWV0aG9kIGFmdGVyIEFuZ3VsYXIgZG9lcyAob25lXG4gICAgICAgICAgLy8gZXhhbXBsZSBpcyBqUXVlcnkgVUkpLiBJbnN0ZWFkLCBzZXQgYSBmbGFnIGluZGljYXRpbmcgc2NvcGUgZGVzdHJveWluZyBzaG91bGQgYmVcbiAgICAgICAgICAvLyBza2lwcGVkIHRoaXMgb25lIHRpbWUuXG4gICAgICAgICAgc2tpcERlc3Ryb3lPbk5leHRKUXVlcnlDbGVhbkRhdGEgPSB0cnVlO1xuICAgICAgICAgIGpRdWVyeS5jbGVhbkRhdGEoW2ZpcnN0RWxlbWVudFRvUmVtb3ZlXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgayA9IDEsIGtrID0gZWxlbWVudHNUb1JlbW92ZS5sZW5ndGg7IGsgPCBrazsgaysrKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZWxlbWVudHNUb1JlbW92ZVtrXTtcbiAgICAgICAganFMaXRlKGVsZW1lbnQpLnJlbW92ZSgpOyAvLyBtdXN0IGRvIHRoaXMgd2F5IHRvIGNsZWFuIHVwIGV4cGFuZG9cbiAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50c1RvUmVtb3ZlW2tdO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50c1RvUmVtb3ZlWzBdID0gbmV3Tm9kZTtcbiAgICAgIGVsZW1lbnRzVG9SZW1vdmUubGVuZ3RoID0gMTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGNsb25lQW5kQW5ub3RhdGVGbihmbiwgYW5ub3RhdGlvbikge1xuICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbigpIHsgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7IH0sIGZuLCBhbm5vdGF0aW9uKTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGludm9rZUxpbmtGbihsaW5rRm4sIHNjb3BlLCAkZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXJzLCB0cmFuc2NsdWRlRm4pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxpbmtGbihzY29wZSwgJGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSwgc3RhcnRpbmdUYWcoJGVsZW1lbnQpKTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIFNldCB1cCAkd2F0Y2hlcyBmb3IgaXNvbGF0ZSBzY29wZSBhbmQgY29udHJvbGxlciBiaW5kaW5ncy4gVGhpcyBwcm9jZXNzXG4gICAgLy8gb25seSBvY2N1cnMgZm9yIGlzb2xhdGUgc2NvcGVzIGFuZCBuZXcgc2NvcGVzIHdpdGggY29udHJvbGxlckFzLlxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemVEaXJlY3RpdmVCaW5kaW5ncyhzY29wZSwgYXR0cnMsIGRlc3RpbmF0aW9uLCBiaW5kaW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLCBuZXdTY29wZSkge1xuICAgICAgdmFyIG9uTmV3U2NvcGVEZXN0cm95ZWQ7XG4gICAgICBmb3JFYWNoKGJpbmRpbmdzLCBmdW5jdGlvbihkZWZpbml0aW9uLCBzY29wZU5hbWUpIHtcbiAgICAgICAgdmFyIGF0dHJOYW1lID0gZGVmaW5pdGlvbi5hdHRyTmFtZSxcbiAgICAgICAgb3B0aW9uYWwgPSBkZWZpbml0aW9uLm9wdGlvbmFsLFxuICAgICAgICBtb2RlID0gZGVmaW5pdGlvbi5tb2RlLCAvLyBALCA9LCBvciAmXG4gICAgICAgIGxhc3RWYWx1ZSxcbiAgICAgICAgcGFyZW50R2V0LCBwYXJlbnRTZXQsIGNvbXBhcmU7XG5cbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGF0dHJzLCBhdHRyTmFtZSkpIHtcbiAgICAgICAgICAvLyBJbiB0aGUgY2FzZSBvZiB1c2VyIGRlZmluZWQgYSBiaW5kaW5nIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBhIG1ldGhvZCBpbiBPYmplY3QucHJvdG90eXBlIGJ1dCBkaWRuJ3Qgc2V0XG4gICAgICAgICAgLy8gdGhlIGNvcnJlc3BvbmRpbmcgYXR0cmlidXRlLiBXZSBuZWVkIHRvIG1ha2Ugc3VyZSBzdWJzZXF1ZW50IGNvZGUgd29uJ3QgYWNjZXNzIHRvIHRoZSBwcm90b3R5cGUgZnVuY3Rpb25cbiAgICAgICAgICBhdHRyc1thdHRyTmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKG1vZGUpIHtcblxuICAgICAgICAgIGNhc2UgJ0AnOlxuICAgICAgICAgICAgaWYgKCFhdHRyc1thdHRyTmFtZV0gJiYgIW9wdGlvbmFsKSB7XG4gICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF0dHJzLiRvYnNlcnZlKGF0dHJOYW1lLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF0dHJzLiQkb2JzZXJ2ZXJzW2F0dHJOYW1lXS4kJHNjb3BlID0gc2NvcGU7XG4gICAgICAgICAgICBpZiAoYXR0cnNbYXR0ck5hbWVdKSB7XG4gICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaGFzIGJlZW4gcHJvdmlkZWQgdGhlbiB3ZSB0cmlnZ2VyIGFuIGludGVycG9sYXRpb24gdG8gZW5zdXJlXG4gICAgICAgICAgICAgIC8vIHRoZSB2YWx1ZSBpcyB0aGVyZSBmb3IgdXNlIGluIHRoZSBsaW5rIGZuXG4gICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSAkaW50ZXJwb2xhdGUoYXR0cnNbYXR0ck5hbWVdKShzY29wZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJz0nOlxuICAgICAgICAgICAgaWYgKG9wdGlvbmFsICYmICFhdHRyc1thdHRyTmFtZV0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50R2V0ID0gJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSk7XG5cbiAgICAgICAgICAgIGlmIChwYXJlbnRHZXQubGl0ZXJhbCkge1xuICAgICAgICAgICAgICBjb21wYXJlID0gZXF1YWxzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29tcGFyZSA9IGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGEgPT09IGIgfHwgKGEgIT09IGEgJiYgYiAhPT0gYik7IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnRTZXQgPSBwYXJlbnRHZXQuYXNzaWduIHx8IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAvLyByZXNldCB0aGUgY2hhbmdlLCBvciB3ZSB3aWxsIHRocm93IHRoaXMgZXhjZXB0aW9uIG9uIGV2ZXJ5ICRkaWdlc3RcbiAgICAgICAgICAgICAgbGFzdFZhbHVlID0gZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IHBhcmVudEdldChzY29wZSk7XG4gICAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdub25hc3NpZ24nLFxuICAgICAgICAgICAgICAgICAgXCJFeHByZXNzaW9uICd7MH0nIHVzZWQgd2l0aCBkaXJlY3RpdmUgJ3sxfScgaXMgbm9uLWFzc2lnbmFibGUhXCIsXG4gICAgICAgICAgICAgICAgICBhdHRyc1thdHRyTmFtZV0sIGRpcmVjdGl2ZS5uYW1lKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsYXN0VmFsdWUgPSBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gcGFyZW50R2V0KHNjb3BlKTtcbiAgICAgICAgICAgIHZhciBwYXJlbnRWYWx1ZVdhdGNoID0gZnVuY3Rpb24gcGFyZW50VmFsdWVXYXRjaChwYXJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICBpZiAoIWNvbXBhcmUocGFyZW50VmFsdWUsIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgLy8gd2UgYXJlIG91dCBvZiBzeW5jIGFuZCBuZWVkIHRvIGNvcHlcbiAgICAgICAgICAgICAgICBpZiAoIWNvbXBhcmUocGFyZW50VmFsdWUsIGxhc3RWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgIC8vIHBhcmVudCBjaGFuZ2VkIGFuZCBpdCBoYXMgcHJlY2VkZW5jZVxuICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IHBhcmVudFZhbHVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgcGFyZW50IGNhbiBiZSBhc3NpZ25lZCB0aGVuIGRvIHNvXG4gICAgICAgICAgICAgICAgICBwYXJlbnRTZXQoc2NvcGUsIHBhcmVudFZhbHVlID0gZGVzdGluYXRpb25bc2NvcGVOYW1lXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBsYXN0VmFsdWUgPSBwYXJlbnRWYWx1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwYXJlbnRWYWx1ZVdhdGNoLiRzdGF0ZWZ1bCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgdW53YXRjaDtcbiAgICAgICAgICAgIGlmIChkZWZpbml0aW9uLmNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgdW53YXRjaCA9IHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oYXR0cnNbYXR0ck5hbWVdLCBwYXJlbnRWYWx1ZVdhdGNoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHVud2F0Y2ggPSBzY29wZS4kd2F0Y2goJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSwgcGFyZW50VmFsdWVXYXRjaCksIG51bGwsIHBhcmVudEdldC5saXRlcmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9uTmV3U2NvcGVEZXN0cm95ZWQgPSAob25OZXdTY29wZURlc3Ryb3llZCB8fCBbXSk7XG4gICAgICAgICAgICBvbk5ld1Njb3BlRGVzdHJveWVkLnB1c2godW53YXRjaCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJyYnOlxuICAgICAgICAgICAgcGFyZW50R2V0ID0gJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSk7XG5cbiAgICAgICAgICAgIC8vIERvbid0IGFzc2lnbiBub29wIHRvIGRlc3RpbmF0aW9uIGlmIGV4cHJlc3Npb24gaXMgbm90IHZhbGlkXG4gICAgICAgICAgICBpZiAocGFyZW50R2V0ID09PSBub29wICYmIG9wdGlvbmFsKSBicmVhaztcblxuICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IGZ1bmN0aW9uKGxvY2Fscykge1xuICAgICAgICAgICAgICByZXR1cm4gcGFyZW50R2V0KHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHZhciBkZXN0cm95QmluZGluZ3MgPSBvbk5ld1Njb3BlRGVzdHJveWVkID8gZnVuY3Rpb24gZGVzdHJveUJpbmRpbmdzKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBvbk5ld1Njb3BlRGVzdHJveWVkLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICBvbk5ld1Njb3BlRGVzdHJveWVkW2ldKCk7XG4gICAgICAgIH1cbiAgICAgIH0gOiBub29wO1xuICAgICAgaWYgKG5ld1Njb3BlICYmIGRlc3Ryb3lCaW5kaW5ncyAhPT0gbm9vcCkge1xuICAgICAgICBuZXdTY29wZS4kb24oJyRkZXN0cm95JywgZGVzdHJveUJpbmRpbmdzKTtcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVzdHJveUJpbmRpbmdzO1xuICAgIH1cbiAgfV07XG59XG5cbnZhciBQUkVGSVhfUkVHRVhQID0gL14oKD86eHxkYXRhKVtcXDpcXC1fXSkvaTtcbi8qKlxuICogQ29udmVydHMgYWxsIGFjY2VwdGVkIGRpcmVjdGl2ZXMgZm9ybWF0IGludG8gcHJvcGVyIGRpcmVjdGl2ZSBuYW1lLlxuICogQHBhcmFtIG5hbWUgTmFtZSB0byBub3JtYWxpemVcbiAqL1xuZnVuY3Rpb24gZGlyZWN0aXZlTm9ybWFsaXplKG5hbWUpIHtcbiAgcmV0dXJuIGNhbWVsQ2FzZShuYW1lLnJlcGxhY2UoUFJFRklYX1JFR0VYUCwgJycpKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgc2hhcmVkIG9iamVjdCBiZXR3ZWVuIGRpcmVjdGl2ZSBjb21waWxlIC8gbGlua2luZyBmdW5jdGlvbnMgd2hpY2ggY29udGFpbnMgbm9ybWFsaXplZCBET01cbiAqIGVsZW1lbnQgYXR0cmlidXRlcy4gVGhlIHZhbHVlcyByZWZsZWN0IGN1cnJlbnQgYmluZGluZyBzdGF0ZSBge3sgfX1gLiBUaGUgbm9ybWFsaXphdGlvbiBpc1xuICogbmVlZGVkIHNpbmNlIGFsbCBvZiB0aGVzZSBhcmUgdHJlYXRlZCBhcyBlcXVpdmFsZW50IGluIEFuZ3VsYXI6XG4gKlxuICogYGBgXG4gKiAgICA8c3BhbiBuZzpiaW5kPVwiYVwiIG5nLWJpbmQ9XCJhXCIgZGF0YS1uZy1iaW5kPVwiYVwiIHgtbmctYmluZD1cImFcIj5cbiAqIGBgYFxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3BlcnR5XG4gKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkYXR0clxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBtYXAgb2YgRE9NIGVsZW1lbnQgYXR0cmlidXRlIG5hbWVzIHRvIHRoZSBub3JtYWxpemVkIG5hbWUuIFRoaXMgaXNcbiAqIG5lZWRlZCB0byBkbyByZXZlcnNlIGxvb2t1cCBmcm9tIG5vcm1hbGl6ZWQgbmFtZSBiYWNrIHRvIGFjdHVhbCBuYW1lLlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkc2V0XG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2V0IERPTSBlbGVtZW50IGF0dHJpYnV0ZSB2YWx1ZS5cbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTm9ybWFsaXplZCBlbGVtZW50IGF0dHJpYnV0ZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBtb2RpZnkuIFRoZSBuYW1lIGlzXG4gKiAgICAgICAgICByZXZlcnNlLXRyYW5zbGF0ZWQgdXNpbmcgdGhlIHtAbGluayBuZy4kY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkYXR0ciAkYXR0cn1cbiAqICAgICAgICAgIHByb3BlcnR5IHRvIHRoZSBvcmlnaW5hbCBuYW1lLlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHNldCB0aGUgYXR0cmlidXRlIHRvLiBUaGUgdmFsdWUgY2FuIGJlIGFuIGludGVycG9sYXRlZCBzdHJpbmcuXG4gKi9cblxuXG5cbi8qKlxuICogQ2xvc3VyZSBjb21waWxlciB0eXBlIGluZm9ybWF0aW9uXG4gKi9cblxuZnVuY3Rpb24gbm9kZXNldExpbmtpbmdGbihcbiAgLyogYW5ndWxhci5TY29wZSAqLyBzY29wZSxcbiAgLyogTm9kZUxpc3QgKi8gbm9kZUxpc3QsXG4gIC8qIEVsZW1lbnQgKi8gcm9vdEVsZW1lbnQsXG4gIC8qIGZ1bmN0aW9uKEZ1bmN0aW9uKSAqLyBib3VuZFRyYW5zY2x1ZGVGblxuKSB7fVxuXG5mdW5jdGlvbiBkaXJlY3RpdmVMaW5raW5nRm4oXG4gIC8qIG5vZGVzZXRMaW5raW5nRm4gKi8gbm9kZXNldExpbmtpbmdGbixcbiAgLyogYW5ndWxhci5TY29wZSAqLyBzY29wZSxcbiAgLyogTm9kZSAqLyBub2RlLFxuICAvKiBFbGVtZW50ICovIHJvb3RFbGVtZW50LFxuICAvKiBmdW5jdGlvbihGdW5jdGlvbikgKi8gYm91bmRUcmFuc2NsdWRlRm5cbikge31cblxuZnVuY3Rpb24gdG9rZW5EaWZmZXJlbmNlKHN0cjEsIHN0cjIpIHtcbiAgdmFyIHZhbHVlcyA9ICcnLFxuICAgICAgdG9rZW5zMSA9IHN0cjEuc3BsaXQoL1xccysvKSxcbiAgICAgIHRva2VuczIgPSBzdHIyLnNwbGl0KC9cXHMrLyk7XG5cbiAgb3V0ZXI6XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zMS5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2VuczFbaV07XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB0b2tlbnMyLmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAodG9rZW4gPT0gdG9rZW5zMltqXSkgY29udGludWUgb3V0ZXI7XG4gICAgfVxuICAgIHZhbHVlcyArPSAodmFsdWVzLmxlbmd0aCA+IDAgPyAnICcgOiAnJykgKyB0b2tlbjtcbiAgfVxuICByZXR1cm4gdmFsdWVzO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDb21tZW50cyhqcU5vZGVzKSB7XG4gIGpxTm9kZXMgPSBqcUxpdGUoanFOb2Rlcyk7XG4gIHZhciBpID0ganFOb2Rlcy5sZW5ndGg7XG5cbiAgaWYgKGkgPD0gMSkge1xuICAgIHJldHVybiBqcU5vZGVzO1xuICB9XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBub2RlID0ganFOb2Rlc1tpXTtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0NPTU1FTlQpIHtcbiAgICAgIHNwbGljZS5jYWxsKGpxTm9kZXMsIGksIDEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ganFOb2Rlcztcbn1cblxudmFyICRjb250cm9sbGVyTWluRXJyID0gbWluRXJyKCckY29udHJvbGxlcicpO1xuXG5cbnZhciBDTlRSTF9SRUcgPSAvXihcXFMrKShcXHMrYXNcXHMrKFxcdyspKT8kLztcbmZ1bmN0aW9uIGlkZW50aWZpZXJGb3JDb250cm9sbGVyKGNvbnRyb2xsZXIsIGlkZW50KSB7XG4gIGlmIChpZGVudCAmJiBpc1N0cmluZyhpZGVudCkpIHJldHVybiBpZGVudDtcbiAgaWYgKGlzU3RyaW5nKGNvbnRyb2xsZXIpKSB7XG4gICAgdmFyIG1hdGNoID0gQ05UUkxfUkVHLmV4ZWMoY29udHJvbGxlcik7XG4gICAgaWYgKG1hdGNoKSByZXR1cm4gbWF0Y2hbM107XG4gIH1cbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGNvbnRyb2xsZXJQcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUge0BsaW5rIG5nLiRjb250cm9sbGVyICRjb250cm9sbGVyIHNlcnZpY2V9IGlzIHVzZWQgYnkgQW5ndWxhciB0byBjcmVhdGUgbmV3XG4gKiBjb250cm9sbGVycy5cbiAqXG4gKiBUaGlzIHByb3ZpZGVyIGFsbG93cyBjb250cm9sbGVyIHJlZ2lzdHJhdGlvbiB2aWEgdGhlXG4gKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlciByZWdpc3Rlcn0gbWV0aG9kLlxuICovXG5mdW5jdGlvbiAkQ29udHJvbGxlclByb3ZpZGVyKCkge1xuICB2YXIgY29udHJvbGxlcnMgPSB7fSxcbiAgICAgIGdsb2JhbHMgPSBmYWxzZTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29udHJvbGxlclByb3ZpZGVyI3JlZ2lzdGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBDb250cm9sbGVyIG5hbWUsIG9yIGFuIG9iamVjdCBtYXAgb2YgY29udHJvbGxlcnMgd2hlcmUgdGhlIGtleXMgYXJlXG4gICAqICAgIHRoZSBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGNvbnN0cnVjdG9ycy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbnxBcnJheX0gY29uc3RydWN0b3IgQ29udHJvbGxlciBjb25zdHJ1Y3RvciBmbiAob3B0aW9uYWxseSBkZWNvcmF0ZWQgd2l0aCBESVxuICAgKiAgICBhbm5vdGF0aW9ucyBpbiB0aGUgYXJyYXkgbm90YXRpb24pLlxuICAgKi9cbiAgdGhpcy5yZWdpc3RlciA9IGZ1bmN0aW9uKG5hbWUsIGNvbnN0cnVjdG9yKSB7XG4gICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ2NvbnRyb2xsZXInKTtcbiAgICBpZiAoaXNPYmplY3QobmFtZSkpIHtcbiAgICAgIGV4dGVuZChjb250cm9sbGVycywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRyb2xsZXJzW25hbWVdID0gY29uc3RydWN0b3I7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjb250cm9sbGVyUHJvdmlkZXIjYWxsb3dHbG9iYWxzXG4gICAqIEBkZXNjcmlwdGlvbiBJZiBjYWxsZWQsIGFsbG93cyBgJGNvbnRyb2xsZXJgIHRvIGZpbmQgY29udHJvbGxlciBjb25zdHJ1Y3RvcnMgb24gYHdpbmRvd2BcbiAgICovXG4gIHRoaXMuYWxsb3dHbG9iYWxzID0gZnVuY3Rpb24oKSB7XG4gICAgZ2xvYmFscyA9IHRydWU7XG4gIH07XG5cblxuICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsICckd2luZG93JywgZnVuY3Rpb24oJGluamVjdG9yLCAkd2luZG93KSB7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBuYW1lICRjb250cm9sbGVyXG4gICAgICogQHJlcXVpcmVzICRpbmplY3RvclxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGNvbnN0cnVjdG9yIElmIGNhbGxlZCB3aXRoIGEgZnVuY3Rpb24gdGhlbiBpdCdzIGNvbnNpZGVyZWQgdG8gYmUgdGhlXG4gICAgICogICAgY29udHJvbGxlciBjb25zdHJ1Y3RvciBmdW5jdGlvbi4gT3RoZXJ3aXNlIGl0J3MgY29uc2lkZXJlZCB0byBiZSBhIHN0cmluZyB3aGljaCBpcyB1c2VkXG4gICAgICogICAgdG8gcmV0cmlldmUgdGhlIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgdXNpbmcgdGhlIGZvbGxvd2luZyBzdGVwczpcbiAgICAgKlxuICAgICAqICAgICogY2hlY2sgaWYgYSBjb250cm9sbGVyIHdpdGggZ2l2ZW4gbmFtZSBpcyByZWdpc3RlcmVkIHZpYSBgJGNvbnRyb2xsZXJQcm92aWRlcmBcbiAgICAgKiAgICAqIGNoZWNrIGlmIGV2YWx1YXRpbmcgdGhlIHN0cmluZyBvbiB0aGUgY3VycmVudCBzY29wZSByZXR1cm5zIGEgY29uc3RydWN0b3JcbiAgICAgKiAgICAqIGlmICRjb250cm9sbGVyUHJvdmlkZXIjYWxsb3dHbG9iYWxzLCBjaGVjayBgd2luZG93W2NvbnN0cnVjdG9yXWAgb24gdGhlIGdsb2JhbFxuICAgICAqICAgICAgYHdpbmRvd2Agb2JqZWN0IChub3QgcmVjb21tZW5kZWQpXG4gICAgICpcbiAgICAgKiAgICBUaGUgc3RyaW5nIGNhbiB1c2UgdGhlIGBjb250cm9sbGVyIGFzIHByb3BlcnR5YCBzeW50YXgsIHdoZXJlIHRoZSBjb250cm9sbGVyIGluc3RhbmNlIGlzIHB1Ymxpc2hlZFxuICAgICAqICAgIGFzIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkgb24gdGhlIGBzY29wZWA7IHRoZSBgc2NvcGVgIG11c3QgYmUgaW5qZWN0ZWQgaW50byBgbG9jYWxzYCBwYXJhbSBmb3IgdGhpc1xuICAgICAqICAgIHRvIHdvcmsgY29ycmVjdGx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGxvY2FscyBJbmplY3Rpb24gbG9jYWxzIGZvciBDb250cm9sbGVyLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gSW5zdGFuY2Ugb2YgZ2l2ZW4gY29udHJvbGxlci5cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIGAkY29udHJvbGxlcmAgc2VydmljZSBpcyByZXNwb25zaWJsZSBmb3IgaW5zdGFudGlhdGluZyBjb250cm9sbGVycy5cbiAgICAgKlxuICAgICAqIEl0J3MganVzdCBhIHNpbXBsZSBjYWxsIHRvIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LCBidXQgZXh0cmFjdGVkIGludG9cbiAgICAgKiBhIHNlcnZpY2UsIHNvIHRoYXQgb25lIGNhbiBvdmVycmlkZSB0aGlzIHNlcnZpY2Ugd2l0aCBbQkMgdmVyc2lvbl0oaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTY0OTc4OCkuXG4gICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGV4cHJlc3Npb24sIGxvY2FscywgbGF0ZXIsIGlkZW50KSB7XG4gICAgICAvLyBQUklWQVRFIEFQSTpcbiAgICAgIC8vICAgcGFyYW0gYGxhdGVyYCAtLS0gaW5kaWNhdGVzIHRoYXQgdGhlIGNvbnRyb2xsZXIncyBjb25zdHJ1Y3RvciBpcyBpbnZva2VkIGF0IGEgbGF0ZXIgdGltZS5cbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgSWYgdHJ1ZSwgJGNvbnRyb2xsZXIgd2lsbCBhbGxvY2F0ZSB0aGUgb2JqZWN0IHdpdGggdGhlIGNvcnJlY3RcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgcHJvdG90eXBlIGNoYWluLCBidXQgd2lsbCBub3QgaW52b2tlIHRoZSBjb250cm9sbGVyIHVudGlsIGEgcmV0dXJuZWRcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgaXMgaW52b2tlZC5cbiAgICAgIC8vICAgcGFyYW0gYGlkZW50YCAtLS0gQW4gb3B0aW9uYWwgbGFiZWwgd2hpY2ggb3ZlcnJpZGVzIHRoZSBsYWJlbCBwYXJzZWQgZnJvbSB0aGUgY29udHJvbGxlclxuICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uLCBpZiBhbnkuXG4gICAgICB2YXIgaW5zdGFuY2UsIG1hdGNoLCBjb25zdHJ1Y3RvciwgaWRlbnRpZmllcjtcbiAgICAgIGxhdGVyID0gbGF0ZXIgPT09IHRydWU7XG4gICAgICBpZiAoaWRlbnQgJiYgaXNTdHJpbmcoaWRlbnQpKSB7XG4gICAgICAgIGlkZW50aWZpZXIgPSBpZGVudDtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzU3RyaW5nKGV4cHJlc3Npb24pKSB7XG4gICAgICAgIG1hdGNoID0gZXhwcmVzc2lvbi5tYXRjaChDTlRSTF9SRUcpO1xuICAgICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgICAgdGhyb3cgJGNvbnRyb2xsZXJNaW5FcnIoJ2N0cmxmbXQnLFxuICAgICAgICAgICAgXCJCYWRseSBmb3JtZWQgY29udHJvbGxlciBzdHJpbmcgJ3swfScuIFwiICtcbiAgICAgICAgICAgIFwiTXVzdCBtYXRjaCBgX19uYW1lX18gYXMgX19pZF9fYCBvciBgX19uYW1lX19gLlwiLCBleHByZXNzaW9uKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdHJ1Y3RvciA9IG1hdGNoWzFdLFxuICAgICAgICBpZGVudGlmaWVyID0gaWRlbnRpZmllciB8fCBtYXRjaFszXTtcbiAgICAgICAgZXhwcmVzc2lvbiA9IGNvbnRyb2xsZXJzLmhhc093blByb3BlcnR5KGNvbnN0cnVjdG9yKVxuICAgICAgICAgICAgPyBjb250cm9sbGVyc1tjb25zdHJ1Y3Rvcl1cbiAgICAgICAgICAgIDogZ2V0dGVyKGxvY2Fscy4kc2NvcGUsIGNvbnN0cnVjdG9yLCB0cnVlKSB8fFxuICAgICAgICAgICAgICAgIChnbG9iYWxzID8gZ2V0dGVyKCR3aW5kb3csIGNvbnN0cnVjdG9yLCB0cnVlKSA6IHVuZGVmaW5lZCk7XG5cbiAgICAgICAgYXNzZXJ0QXJnRm4oZXhwcmVzc2lvbiwgY29uc3RydWN0b3IsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAobGF0ZXIpIHtcbiAgICAgICAgLy8gSW5zdGFudGlhdGUgY29udHJvbGxlciBsYXRlcjpcbiAgICAgICAgLy8gVGhpcyBtYWNoaW5lcnkgaXMgdXNlZCB0byBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhlIG9iamVjdCBiZWZvcmUgY2FsbGluZyB0aGVcbiAgICAgICAgLy8gY29udHJvbGxlcidzIGNvbnN0cnVjdG9yIGl0c2VsZi5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhpcyBhbGxvd3MgcHJvcGVydGllcyB0byBiZSBhZGRlZCB0byB0aGUgY29udHJvbGxlciBiZWZvcmUgdGhlIGNvbnN0cnVjdG9yIGlzXG4gICAgICAgIC8vIGludm9rZWQuIFByaW1hcmlseSwgdGhpcyBpcyB1c2VkIGZvciBpc29sYXRlIHNjb3BlIGJpbmRpbmdzIGluICRjb21waWxlLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGlzIGZlYXR1cmUgaXMgbm90IGludGVuZGVkIGZvciB1c2UgYnkgYXBwbGljYXRpb25zLCBhbmQgaXMgdGh1cyBub3QgZG9jdW1lbnRlZFxuICAgICAgICAvLyBwdWJsaWNseS5cbiAgICAgICAgLy8gT2JqZWN0IGNyZWF0aW9uOiBodHRwOi8vanNwZXJmLmNvbS9jcmVhdGUtY29uc3RydWN0b3IvMlxuICAgICAgICB2YXIgY29udHJvbGxlclByb3RvdHlwZSA9IChpc0FycmF5KGV4cHJlc3Npb24pID9cbiAgICAgICAgICBleHByZXNzaW9uW2V4cHJlc3Npb24ubGVuZ3RoIC0gMV0gOiBleHByZXNzaW9uKS5wcm90b3R5cGU7XG4gICAgICAgIGluc3RhbmNlID0gT2JqZWN0LmNyZWF0ZShjb250cm9sbGVyUHJvdG90eXBlIHx8IG51bGwpO1xuXG4gICAgICAgIGlmIChpZGVudGlmaWVyKSB7XG4gICAgICAgICAgYWRkSWRlbnRpZmllcihsb2NhbHMsIGlkZW50aWZpZXIsIGluc3RhbmNlLCBjb25zdHJ1Y3RvciB8fCBleHByZXNzaW9uLm5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGluc3RhbnRpYXRlO1xuICAgICAgICByZXR1cm4gaW5zdGFudGlhdGUgPSBleHRlbmQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9ICRpbmplY3Rvci5pbnZva2UoZXhwcmVzc2lvbiwgaW5zdGFuY2UsIGxvY2FscywgY29uc3RydWN0b3IpO1xuICAgICAgICAgIGlmIChyZXN1bHQgIT09IGluc3RhbmNlICYmIChpc09iamVjdChyZXN1bHQpIHx8IGlzRnVuY3Rpb24ocmVzdWx0KSkpIHtcbiAgICAgICAgICAgIGluc3RhbmNlID0gcmVzdWx0O1xuICAgICAgICAgICAgaWYgKGlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgLy8gSWYgcmVzdWx0IGNoYW5nZWQsIHJlLWFzc2lnbiBjb250cm9sbGVyQXMgdmFsdWUgdG8gc2NvcGUuXG4gICAgICAgICAgICAgIGFkZElkZW50aWZpZXIobG9jYWxzLCBpZGVudGlmaWVyLCBpbnN0YW5jZSwgY29uc3RydWN0b3IgfHwgZXhwcmVzc2lvbi5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICB9LCB7XG4gICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlLFxuICAgICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXJcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGluc3RhbmNlID0gJGluamVjdG9yLmluc3RhbnRpYXRlKGV4cHJlc3Npb24sIGxvY2FscywgY29uc3RydWN0b3IpO1xuXG4gICAgICBpZiAoaWRlbnRpZmllcikge1xuICAgICAgICBhZGRJZGVudGlmaWVyKGxvY2FscywgaWRlbnRpZmllciwgaW5zdGFuY2UsIGNvbnN0cnVjdG9yIHx8IGV4cHJlc3Npb24ubmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYWRkSWRlbnRpZmllcihsb2NhbHMsIGlkZW50aWZpZXIsIGluc3RhbmNlLCBuYW1lKSB7XG4gICAgICBpZiAoIShsb2NhbHMgJiYgaXNPYmplY3QobG9jYWxzLiRzY29wZSkpKSB7XG4gICAgICAgIHRocm93IG1pbkVycignJGNvbnRyb2xsZXInKSgnbm9zY3AnLFxuICAgICAgICAgIFwiQ2Fubm90IGV4cG9ydCBjb250cm9sbGVyICd7MH0nIGFzICd7MX0nISBObyAkc2NvcGUgb2JqZWN0IHByb3ZpZGVkIHZpYSBgbG9jYWxzYC5cIixcbiAgICAgICAgICBuYW1lLCBpZGVudGlmaWVyKTtcbiAgICAgIH1cblxuICAgICAgbG9jYWxzLiRzY29wZVtpZGVudGlmaWVyXSA9IGluc3RhbmNlO1xuICAgIH1cbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRkb2N1bWVudFxuICogQHJlcXVpcmVzICR3aW5kb3dcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEge0BsaW5rIGFuZ3VsYXIuZWxlbWVudCBqUXVlcnkgb3IganFMaXRlfSB3cmFwcGVyIGZvciB0aGUgYnJvd3NlcidzIGB3aW5kb3cuZG9jdW1lbnRgIG9iamVjdC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwiZG9jdW1lbnRFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxwPiRkb2N1bWVudCB0aXRsZTogPGIgbmctYmluZD1cInRpdGxlXCI+PC9iPjwvcD5cbiAgICAgICAgIDxwPndpbmRvdy5kb2N1bWVudCB0aXRsZTogPGIgbmctYmluZD1cIndpbmRvd1RpdGxlXCI+PC9iPjwvcD5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2RvY3VtZW50RXhhbXBsZScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGRvY3VtZW50JywgZnVuY3Rpb24oJHNjb3BlLCAkZG9jdW1lbnQpIHtcbiAgICAgICAgICAgJHNjb3BlLnRpdGxlID0gJGRvY3VtZW50WzBdLnRpdGxlO1xuICAgICAgICAgICAkc2NvcGUud2luZG93VGl0bGUgPSBhbmd1bGFyLmVsZW1lbnQod2luZG93LmRvY3VtZW50KVswXS50aXRsZTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiAkRG9jdW1lbnRQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgZnVuY3Rpb24od2luZG93KSB7XG4gICAgcmV0dXJuIGpxTGl0ZSh3aW5kb3cuZG9jdW1lbnQpO1xuICB9XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGV4Y2VwdGlvbkhhbmRsZXJcbiAqIEByZXF1aXJlcyBuZy4kbG9nXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBbnkgdW5jYXVnaHQgZXhjZXB0aW9uIGluIGFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGVsZWdhdGVkIHRvIHRoaXMgc2VydmljZS5cbiAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHNpbXBseSBkZWxlZ2F0ZXMgdG8gYCRsb2cuZXJyb3JgIHdoaWNoIGxvZ3MgaXQgaW50b1xuICogdGhlIGJyb3dzZXIgY29uc29sZS5cbiAqXG4gKiBJbiB1bml0IHRlc3RzLCBpZiBgYW5ndWxhci1tb2Nrcy5qc2AgaXMgbG9hZGVkLCB0aGlzIHNlcnZpY2UgaXMgb3ZlcnJpZGRlbiBieVxuICoge0BsaW5rIG5nTW9jay4kZXhjZXB0aW9uSGFuZGxlciBtb2NrICRleGNlcHRpb25IYW5kbGVyfSB3aGljaCBhaWRzIGluIHRlc3RpbmcuXG4gKlxuICogIyMgRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogICBhbmd1bGFyLm1vZHVsZSgnZXhjZXB0aW9uT3ZlcnJpZGUnLCBbXSkuZmFjdG9yeSgnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbigpIHtcbiAqICAgICByZXR1cm4gZnVuY3Rpb24oZXhjZXB0aW9uLCBjYXVzZSkge1xuICogICAgICAgZXhjZXB0aW9uLm1lc3NhZ2UgKz0gJyAoY2F1c2VkIGJ5IFwiJyArIGNhdXNlICsgJ1wiKSc7XG4gKiAgICAgICB0aHJvdyBleGNlcHRpb247XG4gKiAgICAgfTtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiBUaGlzIGV4YW1wbGUgd2lsbCBvdmVycmlkZSB0aGUgbm9ybWFsIGFjdGlvbiBvZiBgJGV4Y2VwdGlvbkhhbmRsZXJgLCB0byBtYWtlIGFuZ3VsYXJcbiAqIGV4Y2VwdGlvbnMgZmFpbCBoYXJkIHdoZW4gdGhleSBoYXBwZW4sIGluc3RlYWQgb2YganVzdCBsb2dnaW5nIHRvIHRoZSBjb25zb2xlLlxuICpcbiAqIDxociAvPlxuICogTm90ZSwgdGhhdCBjb2RlIGV4ZWN1dGVkIGluIGV2ZW50LWxpc3RlbmVycyAoZXZlbiB0aG9zZSByZWdpc3RlcmVkIHVzaW5nIGpxTGl0ZSdzIGBvbmAvYGJpbmRgXG4gKiBtZXRob2RzKSBkb2VzIG5vdCBkZWxlZ2F0ZSBleGNlcHRpb25zIHRvIHRoZSB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9XG4gKiAodW5sZXNzIGV4ZWN1dGVkIGR1cmluZyBhIGRpZ2VzdCkuXG4gKlxuICogSWYgeW91IHdpc2gsIHlvdSBjYW4gbWFudWFsbHkgZGVsZWdhdGUgZXhjZXB0aW9ucywgZS5nLlxuICogYHRyeSB7IC4uLiB9IGNhdGNoKGUpIHsgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7IH1gXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXhjZXB0aW9uIEV4Y2VwdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIGVycm9yLlxuICogQHBhcmFtIHtzdHJpbmc9fSBjYXVzZSBvcHRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY29udGV4dCBpbiB3aGljaFxuICogICAgICAgdGhlIGVycm9yIHdhcyB0aHJvd24uXG4gKlxuICovXG5mdW5jdGlvbiAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRsb2cnLCBmdW5jdGlvbigkbG9nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGV4Y2VwdGlvbiwgY2F1c2UpIHtcbiAgICAgICRsb2cuZXJyb3IuYXBwbHkoJGxvZywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XTtcbn1cblxudmFyIEFQUExJQ0FUSU9OX0pTT04gPSAnYXBwbGljYXRpb24vanNvbic7XG52YXIgQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04gPSB7J0NvbnRlbnQtVHlwZSc6IEFQUExJQ0FUSU9OX0pTT04gKyAnO2NoYXJzZXQ9dXRmLTgnfTtcbnZhciBKU09OX1NUQVJUID0gL15cXFt8Xlxceyg/IVxceykvO1xudmFyIEpTT05fRU5EUyA9IHtcbiAgJ1snOiAvXSQvLFxuICAneyc6IC99JC9cbn07XG52YXIgSlNPTl9QUk9URUNUSU9OX1BSRUZJWCA9IC9eXFwpXFxdXFx9Jyw/XFxuLztcblxuZnVuY3Rpb24gc2VyaWFsaXplVmFsdWUodikge1xuICBpZiAoaXNPYmplY3QodikpIHtcbiAgICByZXR1cm4gaXNEYXRlKHYpID8gdi50b0lTT1N0cmluZygpIDogdG9Kc29uKHYpO1xuICB9XG4gIHJldHVybiB2O1xufVxuXG5cbmZ1bmN0aW9uICRIdHRwUGFyYW1TZXJpYWxpemVyUHJvdmlkZXIoKSB7XG4gIC8qKlxuICAgKiBAbmdkb2Mgc2VydmljZVxuICAgKiBAbmFtZSAkaHR0cFBhcmFtU2VyaWFsaXplclxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmYXVsdCB7QGxpbmsgJGh0dHAgYCRodHRwYH0gcGFyYW1zIHNlcmlhbGl6ZXIgdGhhdCBjb252ZXJ0cyBvYmplY3RzIHRvIHN0cmluZ3NcbiAgICogYWNjb3JkaW5nIHRvIHRoZSBmb2xsb3dpbmcgcnVsZXM6XG4gICAqXG4gICAqICogYHsnZm9vJzogJ2Jhcid9YCByZXN1bHRzIGluIGBmb289YmFyYFxuICAgKiAqIGB7J2Zvbyc6IERhdGUubm93KCl9YCByZXN1bHRzIGluIGBmb289MjAxNS0wNC0wMVQwOSUzQTUwJTNBNDkuMjYyWmAgKGB0b0lTT1N0cmluZygpYCBhbmQgZW5jb2RlZCByZXByZXNlbnRhdGlvbiBvZiBhIERhdGUgb2JqZWN0KVxuICAgKiAqIGB7J2Zvbyc6IFsnYmFyJywgJ2JheiddfWAgcmVzdWx0cyBpbiBgZm9vPWJhciZmb289YmF6YCAocmVwZWF0ZWQga2V5IGZvciBlYWNoIGFycmF5IGVsZW1lbnQpXG4gICAqICogYHsnZm9vJzogeydiYXInOidiYXonfX1gIHJlc3VsdHMgaW4gYGZvbz0lN0IlMjJiYXIlMjIlM0ElMjJiYXolMjIlN0RcImAgKHN0cmluZ2lmaWVkIGFuZCBlbmNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdClcbiAgICpcbiAgICogTm90ZSB0aGF0IHNlcmlhbGl6ZXIgd2lsbCBzb3J0IHRoZSByZXF1ZXN0IHBhcmFtZXRlcnMgYWxwaGFiZXRpY2FsbHkuXG4gICAqICovXG5cbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5nUGFyYW1TZXJpYWxpemVyKHBhcmFtcykge1xuICAgICAgaWYgKCFwYXJhbXMpIHJldHVybiAnJztcbiAgICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgICAgZm9yRWFjaFNvcnRlZChwYXJhbXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IGlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbih2LCBrKSB7XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSkgICsgJz0nICsgZW5jb2RlVXJpUXVlcnkoc2VyaWFsaXplVmFsdWUodikpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSkgKyAnPScgKyBlbmNvZGVVcmlRdWVyeShzZXJpYWxpemVWYWx1ZSh2YWx1ZSkpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcmJyk7XG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gJEh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2VQcm92aWRlcigpIHtcbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBBbHRlcm5hdGl2ZSB7QGxpbmsgJGh0dHAgYCRodHRwYH0gcGFyYW1zIHNlcmlhbGl6ZXIgdGhhdCBmb2xsb3dzXG4gICAqIGpRdWVyeSdzIFtgcGFyYW0oKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9qcXVlcnkucGFyYW0vKSBtZXRob2QgbG9naWMuXG4gICAqIFRoZSBzZXJpYWxpemVyIHdpbGwgYWxzbyBzb3J0IHRoZSBwYXJhbXMgYWxwaGFiZXRpY2FsbHkuXG4gICAqXG4gICAqIFRvIHVzZSBpdCBmb3Igc2VyaWFsaXppbmcgYCRodHRwYCByZXF1ZXN0IHBhcmFtZXRlcnMsIHNldCBpdCBhcyB0aGUgYHBhcmFtU2VyaWFsaXplcmAgcHJvcGVydHk6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqICRodHRwKHtcbiAgICogICB1cmw6IG15VXJsLFxuICAgKiAgIG1ldGhvZDogJ0dFVCcsXG4gICAqICAgcGFyYW1zOiBteVBhcmFtcyxcbiAgICogICBwYXJhbVNlcmlhbGl6ZXI6ICckaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZSdcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBJdCBpcyBhbHNvIHBvc3NpYmxlIHRvIHNldCBpdCBhcyB0aGUgZGVmYXVsdCBgcGFyYW1TZXJpYWxpemVyYCBpbiB0aGVcbiAgICoge0BsaW5rICRodHRwUHJvdmlkZXIjZGVmYXVsdHMgYCRodHRwUHJvdmlkZXJgfS5cbiAgICpcbiAgICogQWRkaXRpb25hbGx5LCB5b3UgY2FuIGluamVjdCB0aGUgc2VyaWFsaXplciBhbmQgdXNlIGl0IGV4cGxpY2l0bHksIGZvciBleGFtcGxlIHRvIHNlcmlhbGl6ZVxuICAgKiBmb3JtIGRhdGEgZm9yIHN1Ym1pc3Npb246XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC5jb250cm9sbGVyKGZ1bmN0aW9uKCRodHRwLCAkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZSkge1xuICAgKiAgIC8vLi4uXG4gICAqXG4gICAqICAgJGh0dHAoe1xuICAgKiAgICAgdXJsOiBteVVybCxcbiAgICogICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgKiAgICAgZGF0YTogJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2UobXlEYXRhKSxcbiAgICogICAgIGhlYWRlcnM6IHtcbiAgICogICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG4gICAqICAgICB9XG4gICAqICAgfSk7XG4gICAqXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogKi9cbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGpRdWVyeUxpa2VQYXJhbVNlcmlhbGl6ZXIocGFyYW1zKSB7XG4gICAgICBpZiAoIXBhcmFtcykgcmV0dXJuICcnO1xuICAgICAgdmFyIHBhcnRzID0gW107XG4gICAgICBzZXJpYWxpemUocGFyYW1zLCAnJywgdHJ1ZSk7XG4gICAgICByZXR1cm4gcGFydHMuam9pbignJicpO1xuXG4gICAgICBmdW5jdGlvbiBzZXJpYWxpemUodG9TZXJpYWxpemUsIHByZWZpeCwgdG9wTGV2ZWwpIHtcbiAgICAgICAgaWYgKHRvU2VyaWFsaXplID09PSBudWxsIHx8IGlzVW5kZWZpbmVkKHRvU2VyaWFsaXplKSkgcmV0dXJuO1xuICAgICAgICBpZiAoaXNBcnJheSh0b1NlcmlhbGl6ZSkpIHtcbiAgICAgICAgICBmb3JFYWNoKHRvU2VyaWFsaXplLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgc2VyaWFsaXplKHZhbHVlLCBwcmVmaXggKyAnW10nKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdCh0b1NlcmlhbGl6ZSkgJiYgIWlzRGF0ZSh0b1NlcmlhbGl6ZSkpIHtcbiAgICAgICAgICBmb3JFYWNoU29ydGVkKHRvU2VyaWFsaXplLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICBzZXJpYWxpemUodmFsdWUsIHByZWZpeCArXG4gICAgICAgICAgICAgICAgKHRvcExldmVsID8gJycgOiAnWycpICtcbiAgICAgICAgICAgICAgICBrZXkgK1xuICAgICAgICAgICAgICAgICh0b3BMZXZlbCA/ICcnIDogJ10nKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFydHMucHVzaChlbmNvZGVVcmlRdWVyeShwcmVmaXgpICsgJz0nICsgZW5jb2RlVXJpUXVlcnkoc2VyaWFsaXplVmFsdWUodG9TZXJpYWxpemUpKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0SHR0cFJlc3BvbnNlVHJhbnNmb3JtKGRhdGEsIGhlYWRlcnMpIHtcbiAgaWYgKGlzU3RyaW5nKGRhdGEpKSB7XG4gICAgLy8gU3RyaXAganNvbiB2dWxuZXJhYmlsaXR5IHByb3RlY3Rpb24gcHJlZml4IGFuZCB0cmltIHdoaXRlc3BhY2VcbiAgICB2YXIgdGVtcERhdGEgPSBkYXRhLnJlcGxhY2UoSlNPTl9QUk9URUNUSU9OX1BSRUZJWCwgJycpLnRyaW0oKTtcblxuICAgIGlmICh0ZW1wRGF0YSkge1xuICAgICAgdmFyIGNvbnRlbnRUeXBlID0gaGVhZGVycygnQ29udGVudC1UeXBlJyk7XG4gICAgICBpZiAoKGNvbnRlbnRUeXBlICYmIChjb250ZW50VHlwZS5pbmRleE9mKEFQUExJQ0FUSU9OX0pTT04pID09PSAwKSkgfHwgaXNKc29uTGlrZSh0ZW1wRGF0YSkpIHtcbiAgICAgICAgZGF0YSA9IGZyb21Kc29uKHRlbXBEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gaXNKc29uTGlrZShzdHIpIHtcbiAgICB2YXIganNvblN0YXJ0ID0gc3RyLm1hdGNoKEpTT05fU1RBUlQpO1xuICAgIHJldHVybiBqc29uU3RhcnQgJiYgSlNPTl9FTkRTW2pzb25TdGFydFswXV0udGVzdChzdHIpO1xufVxuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBrZXkgdmFsdWUgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGhlYWRlcnMgUmF3IGhlYWRlcnMgYXMgYSBzdHJpbmdcbiAqIEByZXR1cm5zIHtPYmplY3R9IFBhcnNlZCBoZWFkZXJzIGFzIGtleSB2YWx1ZSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IGNyZWF0ZU1hcCgpLCBpO1xuXG4gIGZ1bmN0aW9uIGZpbGxJblBhcnNlZChrZXksIHZhbCkge1xuICAgIGlmIChrZXkpIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9XG5cbiAgaWYgKGlzU3RyaW5nKGhlYWRlcnMpKSB7XG4gICAgZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24obGluZSkge1xuICAgICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgICAgZmlsbEluUGFyc2VkKGxvd2VyY2FzZSh0cmltKGxpbmUuc3Vic3RyKDAsIGkpKSksIHRyaW0obGluZS5zdWJzdHIoaSArIDEpKSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QoaGVhZGVycykpIHtcbiAgICBmb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uKGhlYWRlclZhbCwgaGVhZGVyS2V5KSB7XG4gICAgICBmaWxsSW5QYXJzZWQobG93ZXJjYXNlKGhlYWRlcktleSksIHRyaW0oaGVhZGVyVmFsKSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcGFyc2VkO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgYWNjZXNzIHRvIHBhcnNlZCBoZWFkZXJzLlxuICpcbiAqIEhlYWRlcnMgYXJlIGxhenkgcGFyc2VkIHdoZW4gZmlyc3QgcmVxdWVzdGVkLlxuICogQHNlZSBwYXJzZUhlYWRlcnNcbiAqXG4gKiBAcGFyYW0geyhzdHJpbmd8T2JqZWN0KX0gaGVhZGVycyBIZWFkZXJzIHRvIHByb3ZpZGUgYWNjZXNzIHRvLlxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZz0pfSBSZXR1cm5zIGEgZ2V0dGVyIGZ1bmN0aW9uIHdoaWNoIGlmIGNhbGxlZCB3aXRoOlxuICpcbiAqICAgLSBpZiBjYWxsZWQgd2l0aCBzaW5nbGUgYW4gYXJndW1lbnQgcmV0dXJucyBhIHNpbmdsZSBoZWFkZXIgdmFsdWUgb3IgbnVsbFxuICogICAtIGlmIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cyByZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCBoZWFkZXJzLlxuICovXG5mdW5jdGlvbiBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpIHtcbiAgdmFyIGhlYWRlcnNPYmo7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAoIWhlYWRlcnNPYmopIGhlYWRlcnNPYmogPSAgcGFyc2VIZWFkZXJzKGhlYWRlcnMpO1xuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGhlYWRlcnNPYmpbbG93ZXJjYXNlKG5hbWUpXTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHZhbHVlID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGVhZGVyc09iajtcbiAgfTtcbn1cblxuXG4vKipcbiAqIENoYWluIGFsbCBnaXZlbiBmdW5jdGlvbnNcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgZm9yIGJvdGggcmVxdWVzdCBhbmQgcmVzcG9uc2UgdHJhbnNmb3JtaW5nXG4gKlxuICogQHBhcmFtIHsqfSBkYXRhIERhdGEgdG8gdHJhbnNmb3JtLlxuICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmc9KX0gaGVhZGVycyBIVFRQIGhlYWRlcnMgZ2V0dGVyIGZuLlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXR1cyBIVFRQIHN0YXR1cyBjb2RlIG9mIHRoZSByZXNwb25zZS5cbiAqIEBwYXJhbSB7KEZ1bmN0aW9ufEFycmF5LjxGdW5jdGlvbj4pfSBmbnMgRnVuY3Rpb24gb3IgYW4gYXJyYXkgb2YgZnVuY3Rpb25zLlxuICogQHJldHVybnMgeyp9IFRyYW5zZm9ybWVkIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgc3RhdHVzLCBmbnMpIHtcbiAgaWYgKGlzRnVuY3Rpb24oZm5zKSkge1xuICAgIHJldHVybiBmbnMoZGF0YSwgaGVhZGVycywgc3RhdHVzKTtcbiAgfVxuXG4gIGZvckVhY2goZm5zLCBmdW5jdGlvbihmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzLCBzdGF0dXMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuXG5mdW5jdGlvbiBpc1N1Y2Nlc3Moc3RhdHVzKSB7XG4gIHJldHVybiAyMDAgPD0gc3RhdHVzICYmIHN0YXR1cyA8IDMwMDtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGh0dHBQcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2UgYCRodHRwUHJvdmlkZXJgIHRvIGNoYW5nZSB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiB0aGUge0BsaW5rIG5nLiRodHRwICRodHRwfSBzZXJ2aWNlLlxuICogKi9cbmZ1bmN0aW9uICRIdHRwUHJvdmlkZXIoKSB7XG4gIC8qKlxuICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICogQG5hbWUgJGh0dHBQcm92aWRlciNkZWZhdWx0c1xuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT2JqZWN0IGNvbnRhaW5pbmcgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9IHJlcXVlc3RzLlxuICAgKlxuICAgKiAtICoqYGRlZmF1bHRzLmNhY2hlYCoqIC0ge09iamVjdH0gLSBhbiBvYmplY3QgYnVpbHQgd2l0aCB7QGxpbmsgbmcuJGNhY2hlRmFjdG9yeSBgJGNhY2hlRmFjdG9yeWB9XG4gICAqIHRoYXQgd2lsbCBwcm92aWRlIHRoZSBjYWNoZSBmb3IgYWxsIHJlcXVlc3RzIHdobyBzZXQgdGhlaXIgYGNhY2hlYCBwcm9wZXJ0eSB0byBgdHJ1ZWAuXG4gICAqIElmIHlvdSBzZXQgdGhlIGBkZWZhdWx0cy5jYWNoZSA9IGZhbHNlYCB0aGVuIG9ubHkgcmVxdWVzdHMgdGhhdCBzcGVjaWZ5IHRoZWlyIG93biBjdXN0b21cbiAgICogY2FjaGUgb2JqZWN0IHdpbGwgYmUgY2FjaGVkLiBTZWUge0BsaW5rICRodHRwI2NhY2hpbmcgJGh0dHAgQ2FjaGluZ30gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqXG4gICAqIC0gKipgZGVmYXVsdHMueHNyZkNvb2tpZU5hbWVgKiogLSB7c3RyaW5nfSAtIE5hbWUgb2YgY29va2llIGNvbnRhaW5pbmcgdGhlIFhTUkYgdG9rZW4uXG4gICAqIERlZmF1bHRzIHZhbHVlIGlzIGAnWFNSRi1UT0tFTidgLlxuICAgKlxuICAgKiAtICoqYGRlZmF1bHRzLnhzcmZIZWFkZXJOYW1lYCoqIC0ge3N0cmluZ30gLSBOYW1lIG9mIEhUVFAgaGVhZGVyIHRvIHBvcHVsYXRlIHdpdGggdGhlXG4gICAqIFhTUkYgdG9rZW4uIERlZmF1bHRzIHZhbHVlIGlzIGAnWC1YU1JGLVRPS0VOJ2AuXG4gICAqXG4gICAqIC0gKipgZGVmYXVsdHMuaGVhZGVyc2AqKiAtIHtPYmplY3R9IC0gRGVmYXVsdCBoZWFkZXJzIGZvciBhbGwgJGh0dHAgcmVxdWVzdHMuXG4gICAqIFJlZmVyIHRvIHtAbGluayBuZy4kaHR0cCNzZXR0aW5nLWh0dHAtaGVhZGVycyAkaHR0cH0gZm9yIGRvY3VtZW50YXRpb24gb25cbiAgICogc2V0dGluZyBkZWZhdWx0IGhlYWRlcnMuXG4gICAqICAgICAtICoqYGRlZmF1bHRzLmhlYWRlcnMuY29tbW9uYCoqXG4gICAqICAgICAtICoqYGRlZmF1bHRzLmhlYWRlcnMucG9zdGAqKlxuICAgKiAgICAgLSAqKmBkZWZhdWx0cy5oZWFkZXJzLnB1dGAqKlxuICAgKiAgICAgLSAqKmBkZWZhdWx0cy5oZWFkZXJzLnBhdGNoYCoqXG4gICAqXG4gICAqXG4gICAqIC0gKipgZGVmYXVsdHMucGFyYW1TZXJpYWxpemVyYCoqIC0gYHtzdHJpbmd8ZnVuY3Rpb24oT2JqZWN0PHN0cmluZyxzdHJpbmc+KTpzdHJpbmd9YCAtIEEgZnVuY3Rpb25cbiAgICogIHVzZWQgdG8gdGhlIHByZXBhcmUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHJlcXVlc3QgcGFyYW1ldGVycyAoc3BlY2lmaWVkIGFzIGFuIG9iamVjdCkuXG4gICAqICBJZiBzcGVjaWZpZWQgYXMgc3RyaW5nLCBpdCBpcyBpbnRlcnByZXRlZCBhcyBhIGZ1bmN0aW9uIHJlZ2lzdGVyZWQgd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uXG4gICAqICBEZWZhdWx0cyB0byB7QGxpbmsgbmcuJGh0dHBQYXJhbVNlcmlhbGl6ZXIgJGh0dHBQYXJhbVNlcmlhbGl6ZXJ9LlxuICAgKlxuICAgKiovXG4gIHZhciBkZWZhdWx0cyA9IHRoaXMuZGVmYXVsdHMgPSB7XG4gICAgLy8gdHJhbnNmb3JtIGluY29taW5nIHJlc3BvbnNlIGRhdGFcbiAgICB0cmFuc2Zvcm1SZXNwb25zZTogW2RlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm1dLFxuXG4gICAgLy8gdHJhbnNmb3JtIG91dGdvaW5nIHJlcXVlc3QgZGF0YVxuICAgIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3QoZCkgJiYgIWlzRmlsZShkKSAmJiAhaXNCbG9iKGQpICYmICFpc0Zvcm1EYXRhKGQpID8gdG9Kc29uKGQpIDogZDtcbiAgICB9XSxcblxuICAgIC8vIGRlZmF1bHQgaGVhZGVyc1xuICAgIGhlYWRlcnM6IHtcbiAgICAgIGNvbW1vbjoge1xuICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgICAgIH0sXG4gICAgICBwb3N0OiAgIHNoYWxsb3dDb3B5KENPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OKSxcbiAgICAgIHB1dDogICAgc2hhbGxvd0NvcHkoQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04pLFxuICAgICAgcGF0Y2g6ICBzaGFsbG93Q29weShDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTilcbiAgICB9LFxuXG4gICAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgICBwYXJhbVNlcmlhbGl6ZXI6ICckaHR0cFBhcmFtU2VyaWFsaXplcidcbiAgfTtcblxuICB2YXIgdXNlQXBwbHlBc3luYyA9IGZhbHNlO1xuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkaHR0cFByb3ZpZGVyI3VzZUFwcGx5QXN5bmNcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIENvbmZpZ3VyZSAkaHR0cCBzZXJ2aWNlIHRvIGNvbWJpbmUgcHJvY2Vzc2luZyBvZiBtdWx0aXBsZSBodHRwIHJlc3BvbnNlcyByZWNlaXZlZCBhdCBhcm91bmRcbiAgICogdGhlIHNhbWUgdGltZSB2aWEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5QXN5bmMgJHJvb3RTY29wZS4kYXBwbHlBc3luY30uIFRoaXMgY2FuIHJlc3VsdCBpblxuICAgKiBzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudCBmb3IgYmlnZ2VyIGFwcGxpY2F0aW9ucyB0aGF0IG1ha2UgbWFueSBIVFRQIHJlcXVlc3RzXG4gICAqIGNvbmN1cnJlbnRseSAoY29tbW9uIGR1cmluZyBhcHBsaWNhdGlvbiBib290c3RyYXApLlxuICAgKlxuICAgKiBEZWZhdWx0cyB0byBmYWxzZS4gSWYgbm8gdmFsdWUgaXMgc3BlY2lmaWVkLCByZXR1cm5zIHRoZSBjdXJyZW50IGNvbmZpZ3VyZWQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIElmIHRydWUsIHdoZW4gcmVxdWVzdHMgYXJlIGxvYWRlZCwgdGhleSB3aWxsIHNjaGVkdWxlIGEgZGVmZXJyZWRcbiAgICogICAgXCJhcHBseVwiIG9uIHRoZSBuZXh0IHRpY2ssIGdpdmluZyB0aW1lIGZvciBzdWJzZXF1ZW50IHJlcXVlc3RzIGluIGEgcm91Z2hseSB+MTBtcyB3aW5kb3dcbiAgICogICAgdG8gbG9hZCBhbmQgc2hhcmUgdGhlIHNhbWUgZGlnZXN0IGN5Y2xlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxPYmplY3R9IElmIGEgdmFsdWUgaXMgc3BlY2lmaWVkLCByZXR1cm5zIHRoZSAkaHR0cFByb3ZpZGVyIGZvciBjaGFpbmluZy5cbiAgICogICAgb3RoZXJ3aXNlLCByZXR1cm5zIHRoZSBjdXJyZW50IGNvbmZpZ3VyZWQgdmFsdWUuXG4gICAqKi9cbiAgdGhpcy51c2VBcHBseUFzeW5jID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgdXNlQXBwbHlBc3luYyA9ICEhdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHVzZUFwcGx5QXN5bmM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgKiBAbmFtZSAkaHR0cFByb3ZpZGVyI2ludGVyY2VwdG9yc1xuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQXJyYXkgY29udGFpbmluZyBzZXJ2aWNlIGZhY3RvcmllcyBmb3IgYWxsIHN5bmNocm9ub3VzIG9yIGFzeW5jaHJvbm91cyB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9XG4gICAqIHByZS1wcm9jZXNzaW5nIG9mIHJlcXVlc3Qgb3IgcG9zdHByb2Nlc3Npbmcgb2YgcmVzcG9uc2VzLlxuICAgKlxuICAgKiBUaGVzZSBzZXJ2aWNlIGZhY3RvcmllcyBhcmUgb3JkZXJlZCBieSByZXF1ZXN0LCBpLmUuIHRoZXkgYXJlIGFwcGxpZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4gICAqIGFycmF5LCBvbiByZXF1ZXN0LCBidXQgcmV2ZXJzZSBvcmRlciwgb24gcmVzcG9uc2UuXG4gICAqXG4gICAqIHtAbGluayBuZy4kaHR0cCNpbnRlcmNlcHRvcnMgSW50ZXJjZXB0b3JzIGRldGFpbGVkIGluZm99XG4gICAqKi9cbiAgdmFyIGludGVyY2VwdG9yRmFjdG9yaWVzID0gdGhpcy5pbnRlcmNlcHRvcnMgPSBbXTtcblxuICB0aGlzLiRnZXQgPSBbJyRodHRwQmFja2VuZCcsICckJGNvb2tpZVJlYWRlcicsICckY2FjaGVGYWN0b3J5JywgJyRyb290U2NvcGUnLCAnJHEnLCAnJGluamVjdG9yJyxcbiAgICAgIGZ1bmN0aW9uKCRodHRwQmFja2VuZCwgJCRjb29raWVSZWFkZXIsICRjYWNoZUZhY3RvcnksICRyb290U2NvcGUsICRxLCAkaW5qZWN0b3IpIHtcblxuICAgIHZhciBkZWZhdWx0Q2FjaGUgPSAkY2FjaGVGYWN0b3J5KCckaHR0cCcpO1xuXG4gICAgLyoqXG4gICAgICogTWFrZSBzdXJlIHRoYXQgZGVmYXVsdCBwYXJhbSBzZXJpYWxpemVyIGlzIGV4cG9zZWQgYXMgYSBmdW5jdGlvblxuICAgICAqL1xuICAgIGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplciA9IGlzU3RyaW5nKGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplcikgP1xuICAgICAgJGluamVjdG9yLmdldChkZWZhdWx0cy5wYXJhbVNlcmlhbGl6ZXIpIDogZGVmYXVsdHMucGFyYW1TZXJpYWxpemVyO1xuXG4gICAgLyoqXG4gICAgICogSW50ZXJjZXB0b3JzIHN0b3JlZCBpbiByZXZlcnNlIG9yZGVyLiBJbm5lciBpbnRlcmNlcHRvcnMgYmVmb3JlIG91dGVyIGludGVyY2VwdG9ycy5cbiAgICAgKiBUaGUgcmV2ZXJzYWwgaXMgbmVlZGVkIHNvIHRoYXQgd2UgY2FuIGJ1aWxkIHVwIHRoZSBpbnRlcmNlcHRpb24gY2hhaW4gYXJvdW5kIHRoZVxuICAgICAqIHNlcnZlciByZXF1ZXN0LlxuICAgICAqL1xuICAgIHZhciByZXZlcnNlZEludGVyY2VwdG9ycyA9IFtdO1xuXG4gICAgZm9yRWFjaChpbnRlcmNlcHRvckZhY3RvcmllcywgZnVuY3Rpb24oaW50ZXJjZXB0b3JGYWN0b3J5KSB7XG4gICAgICByZXZlcnNlZEludGVyY2VwdG9ycy51bnNoaWZ0KGlzU3RyaW5nKGludGVyY2VwdG9yRmFjdG9yeSlcbiAgICAgICAgICA/ICRpbmplY3Rvci5nZXQoaW50ZXJjZXB0b3JGYWN0b3J5KSA6ICRpbmplY3Rvci5pbnZva2UoaW50ZXJjZXB0b3JGYWN0b3J5KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgJGh0dHBcbiAgICAgKiBAcmVxdWlyZXMgbmcuJGh0dHBCYWNrZW5kXG4gICAgICogQHJlcXVpcmVzICRjYWNoZUZhY3RvcnlcbiAgICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICAgICAqIEByZXF1aXJlcyAkcVxuICAgICAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRoZSBgJGh0dHBgIHNlcnZpY2UgaXMgYSBjb3JlIEFuZ3VsYXIgc2VydmljZSB0aGF0IGZhY2lsaXRhdGVzIGNvbW11bmljYXRpb24gd2l0aCB0aGUgcmVtb3RlXG4gICAgICogSFRUUCBzZXJ2ZXJzIHZpYSB0aGUgYnJvd3NlcidzIFtYTUxIdHRwUmVxdWVzdF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4veG1saHR0cHJlcXVlc3QpXG4gICAgICogb2JqZWN0IG9yIHZpYSBbSlNPTlBdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSlNPTlApLlxuICAgICAqXG4gICAgICogRm9yIHVuaXQgdGVzdGluZyBhcHBsaWNhdGlvbnMgdGhhdCB1c2UgYCRodHRwYCBzZXJ2aWNlLCBzZWVcbiAgICAgKiB7QGxpbmsgbmdNb2NrLiRodHRwQmFja2VuZCAkaHR0cEJhY2tlbmQgbW9ja30uXG4gICAgICpcbiAgICAgKiBGb3IgYSBoaWdoZXIgbGV2ZWwgb2YgYWJzdHJhY3Rpb24sIHBsZWFzZSBjaGVjayBvdXQgdGhlIHtAbGluayBuZ1Jlc291cmNlLiRyZXNvdXJjZVxuICAgICAqICRyZXNvdXJjZX0gc2VydmljZS5cbiAgICAgKlxuICAgICAqIFRoZSAkaHR0cCBBUEkgaXMgYmFzZWQgb24gdGhlIHtAbGluayBuZy4kcSBkZWZlcnJlZC9wcm9taXNlIEFQSXN9IGV4cG9zZWQgYnlcbiAgICAgKiB0aGUgJHEgc2VydmljZS4gV2hpbGUgZm9yIHNpbXBsZSB1c2FnZSBwYXR0ZXJucyB0aGlzIGRvZXNuJ3QgbWF0dGVyIG11Y2gsIGZvciBhZHZhbmNlZCB1c2FnZVxuICAgICAqIGl0IGlzIGltcG9ydGFudCB0byBmYW1pbGlhcml6ZSB5b3Vyc2VsZiB3aXRoIHRoZXNlIEFQSXMgYW5kIHRoZSBndWFyYW50ZWVzIHRoZXkgcHJvdmlkZS5cbiAgICAgKlxuICAgICAqXG4gICAgICogIyMgR2VuZXJhbCB1c2FnZVxuICAgICAqIFRoZSBgJGh0dHBgIHNlcnZpY2UgaXMgYSBmdW5jdGlvbiB3aGljaCB0YWtlcyBhIHNpbmdsZSBhcmd1bWVudCDigJQgYSBjb25maWd1cmF0aW9uIG9iamVjdCDigJRcbiAgICAgKiB0aGF0IGlzIHVzZWQgdG8gZ2VuZXJhdGUgYW4gSFRUUCByZXF1ZXN0IGFuZCByZXR1cm5zICBhIHtAbGluayBuZy4kcSBwcm9taXNlfVxuICAgICAqIHdpdGggdHdvICRodHRwIHNwZWNpZmljIG1ldGhvZHM6IGBzdWNjZXNzYCBhbmQgYGVycm9yYC5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICAvLyBTaW1wbGUgR0VUIHJlcXVlc3QgZXhhbXBsZSA6XG4gICAgICogICAkaHR0cC5nZXQoJy9zb21lVXJsJykuXG4gICAgICogICAgIHN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgKiAgICAgICAvLyB0aGlzIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5XG4gICAgICogICAgICAgLy8gd2hlbiB0aGUgcmVzcG9uc2UgaXMgYXZhaWxhYmxlXG4gICAgICogICAgIH0pLlxuICAgICAqICAgICBlcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAqICAgICAgIC8vIGNhbGxlZCBhc3luY2hyb25vdXNseSBpZiBhbiBlcnJvciBvY2N1cnNcbiAgICAgKiAgICAgICAvLyBvciBzZXJ2ZXIgcmV0dXJucyByZXNwb25zZSB3aXRoIGFuIGVycm9yIHN0YXR1cy5cbiAgICAgKiAgICAgfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgLy8gU2ltcGxlIFBPU1QgcmVxdWVzdCBleGFtcGxlIChwYXNzaW5nIGRhdGEpIDpcbiAgICAgKiAgICRodHRwLnBvc3QoJy9zb21lVXJsJywge21zZzonaGVsbG8gd29yZCEnfSkuXG4gICAgICogICAgIHN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgKiAgICAgICAvLyB0aGlzIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5XG4gICAgICogICAgICAgLy8gd2hlbiB0aGUgcmVzcG9uc2UgaXMgYXZhaWxhYmxlXG4gICAgICogICAgIH0pLlxuICAgICAqICAgICBlcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAqICAgICAgIC8vIGNhbGxlZCBhc3luY2hyb25vdXNseSBpZiBhbiBlcnJvciBvY2N1cnNcbiAgICAgKiAgICAgICAvLyBvciBzZXJ2ZXIgcmV0dXJucyByZXNwb25zZSB3aXRoIGFuIGVycm9yIHN0YXR1cy5cbiAgICAgKiAgICAgfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKlxuICAgICAqIFNpbmNlIHRoZSByZXR1cm5lZCB2YWx1ZSBvZiBjYWxsaW5nIHRoZSAkaHR0cCBmdW5jdGlvbiBpcyBhIGBwcm9taXNlYCwgeW91IGNhbiBhbHNvIHVzZVxuICAgICAqIHRoZSBgdGhlbmAgbWV0aG9kIHRvIHJlZ2lzdGVyIGNhbGxiYWNrcywgYW5kIHRoZXNlIGNhbGxiYWNrcyB3aWxsIHJlY2VpdmUgYSBzaW5nbGUgYXJndW1lbnQg4oCTXG4gICAgICogYW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgcmVzcG9uc2UuIFNlZSB0aGUgQVBJIHNpZ25hdHVyZSBhbmQgdHlwZSBpbmZvIGJlbG93IGZvciBtb3JlXG4gICAgICogZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEEgcmVzcG9uc2Ugc3RhdHVzIGNvZGUgYmV0d2VlbiAyMDAgYW5kIDI5OSBpcyBjb25zaWRlcmVkIGEgc3VjY2VzcyBzdGF0dXMgYW5kXG4gICAgICogd2lsbCByZXN1bHQgaW4gdGhlIHN1Y2Nlc3MgY2FsbGJhY2sgYmVpbmcgY2FsbGVkLiBOb3RlIHRoYXQgaWYgdGhlIHJlc3BvbnNlIGlzIGEgcmVkaXJlY3QsXG4gICAgICogWE1MSHR0cFJlcXVlc3Qgd2lsbCB0cmFuc3BhcmVudGx5IGZvbGxvdyBpdCwgbWVhbmluZyB0aGF0IHRoZSBlcnJvciBjYWxsYmFjayB3aWxsIG5vdCBiZVxuICAgICAqIGNhbGxlZCBmb3Igc3VjaCByZXNwb25zZXMuXG4gICAgICpcbiAgICAgKiAjIyBXcml0aW5nIFVuaXQgVGVzdHMgdGhhdCB1c2UgJGh0dHBcbiAgICAgKiBXaGVuIHVuaXQgdGVzdGluZyAodXNpbmcge0BsaW5rIG5nTW9jayBuZ01vY2t9KSwgaXQgaXMgbmVjZXNzYXJ5IHRvIGNhbGxcbiAgICAgKiB7QGxpbmsgbmdNb2NrLiRodHRwQmFja2VuZCNmbHVzaCAkaHR0cEJhY2tlbmQuZmx1c2goKX0gdG8gZmx1c2ggZWFjaCBwZW5kaW5nXG4gICAgICogcmVxdWVzdCB1c2luZyB0cmFpbmVkIHJlc3BvbnNlcy5cbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqICRodHRwQmFja2VuZC5leHBlY3RHRVQoLi4uKTtcbiAgICAgKiAkaHR0cC5nZXQoLi4uKTtcbiAgICAgKiAkaHR0cEJhY2tlbmQuZmx1c2goKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIFNob3J0Y3V0IG1ldGhvZHNcbiAgICAgKlxuICAgICAqIFNob3J0Y3V0IG1ldGhvZHMgYXJlIGFsc28gYXZhaWxhYmxlLiBBbGwgc2hvcnRjdXQgbWV0aG9kcyByZXF1aXJlIHBhc3NpbmcgaW4gdGhlIFVSTCwgYW5kXG4gICAgICogcmVxdWVzdCBkYXRhIG11c3QgYmUgcGFzc2VkIGluIGZvciBQT1NUL1BVVCByZXF1ZXN0cy5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICAkaHR0cC5nZXQoJy9zb21lVXJsJykuc3VjY2VzcyhzdWNjZXNzQ2FsbGJhY2spO1xuICAgICAqICAgJGh0dHAucG9zdCgnL3NvbWVVcmwnLCBkYXRhKS5zdWNjZXNzKHN1Y2Nlc3NDYWxsYmFjayk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBDb21wbGV0ZSBsaXN0IG9mIHNob3J0Y3V0IG1ldGhvZHM6XG4gICAgICpcbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNnZXQgJGh0dHAuZ2V0fVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2hlYWQgJGh0dHAuaGVhZH1cbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNwb3N0ICRodHRwLnBvc3R9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjcHV0ICRodHRwLnB1dH1cbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNkZWxldGUgJGh0dHAuZGVsZXRlfVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2pzb25wICRodHRwLmpzb25wfVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI3BhdGNoICRodHRwLnBhdGNofVxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyBTZXR0aW5nIEhUVFAgSGVhZGVyc1xuICAgICAqXG4gICAgICogVGhlICRodHRwIHNlcnZpY2Ugd2lsbCBhdXRvbWF0aWNhbGx5IGFkZCBjZXJ0YWluIEhUVFAgaGVhZGVycyB0byBhbGwgcmVxdWVzdHMuIFRoZXNlIGRlZmF1bHRzXG4gICAgICogY2FuIGJlIGZ1bGx5IGNvbmZpZ3VyZWQgYnkgYWNjZXNzaW5nIHRoZSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzYCBjb25maWd1cmF0aW9uXG4gICAgICogb2JqZWN0LCB3aGljaCBjdXJyZW50bHkgY29udGFpbnMgdGhpcyBkZWZhdWx0IGNvbmZpZ3VyYXRpb246XG4gICAgICpcbiAgICAgKiAtIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uYCAoaGVhZGVycyB0aGF0IGFyZSBjb21tb24gZm9yIGFsbCByZXF1ZXN0cyk6XG4gICAgICogICAtIGBBY2NlcHQ6IGFwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICogLyAqYFxuICAgICAqIC0gYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5wb3N0YDogKGhlYWRlciBkZWZhdWx0cyBmb3IgUE9TVCByZXF1ZXN0cylcbiAgICAgKiAgIC0gYENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbmBcbiAgICAgKiAtIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMucHV0YCAoaGVhZGVyIGRlZmF1bHRzIGZvciBQVVQgcmVxdWVzdHMpXG4gICAgICogICAtIGBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25gXG4gICAgICpcbiAgICAgKiBUbyBhZGQgb3Igb3ZlcndyaXRlIHRoZXNlIGRlZmF1bHRzLCBzaW1wbHkgYWRkIG9yIHJlbW92ZSBhIHByb3BlcnR5IGZyb20gdGhlc2UgY29uZmlndXJhdGlvblxuICAgICAqIG9iamVjdHMuIFRvIGFkZCBoZWFkZXJzIGZvciBhbiBIVFRQIG1ldGhvZCBvdGhlciB0aGFuIFBPU1Qgb3IgUFVULCBzaW1wbHkgYWRkIGEgbmV3IG9iamVjdFxuICAgICAqIHdpdGggdGhlIGxvd2VyY2FzZWQgSFRUUCBtZXRob2QgbmFtZSBhcyB0aGUga2V5LCBlLmcuXG4gICAgICogYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXQgPSB7ICdNeS1IZWFkZXInIDogJ3ZhbHVlJyB9YC5cbiAgICAgKlxuICAgICAqIFRoZSBkZWZhdWx0cyBjYW4gYWxzbyBiZSBzZXQgYXQgcnVudGltZSB2aWEgdGhlIGAkaHR0cC5kZWZhdWx0c2Agb2JqZWN0IGluIHRoZSBzYW1lXG4gICAgICogZmFzaGlvbi4gRm9yIGV4YW1wbGU6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBtb2R1bGUucnVuKGZ1bmN0aW9uKCRodHRwKSB7XG4gICAgICogICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljIFltVmxjRHBpYjI5dydcbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEluIGFkZGl0aW9uLCB5b3UgY2FuIHN1cHBseSBhIGBoZWFkZXJzYCBwcm9wZXJ0eSBpbiB0aGUgY29uZmlnIG9iamVjdCBwYXNzZWQgd2hlblxuICAgICAqIGNhbGxpbmcgYCRodHRwKGNvbmZpZylgLCB3aGljaCBvdmVycmlkZXMgdGhlIGRlZmF1bHRzIHdpdGhvdXQgY2hhbmdpbmcgdGhlbSBnbG9iYWxseS5cbiAgICAgKlxuICAgICAqIFRvIGV4cGxpY2l0bHkgcmVtb3ZlIGEgaGVhZGVyIGF1dG9tYXRpY2FsbHkgYWRkZWQgdmlhICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycyBvbiBhIHBlciByZXF1ZXN0IGJhc2lzLFxuICAgICAqIFVzZSB0aGUgYGhlYWRlcnNgIHByb3BlcnR5LCBzZXR0aW5nIHRoZSBkZXNpcmVkIGhlYWRlciB0byBgdW5kZWZpbmVkYC4gRm9yIGV4YW1wbGU6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIHZhciByZXEgPSB7XG4gICAgICogIG1ldGhvZDogJ1BPU1QnLFxuICAgICAqICB1cmw6ICdodHRwOi8vZXhhbXBsZS5jb20nLFxuICAgICAqICBoZWFkZXJzOiB7XG4gICAgICogICAgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZFxuICAgICAqICB9LFxuICAgICAqICBkYXRhOiB7IHRlc3Q6ICd0ZXN0JyB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogJGh0dHAocmVxKS5zdWNjZXNzKGZ1bmN0aW9uKCl7Li4ufSkuZXJyb3IoZnVuY3Rpb24oKXsuLi59KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIFRyYW5zZm9ybWluZyBSZXF1ZXN0cyBhbmQgUmVzcG9uc2VzXG4gICAgICpcbiAgICAgKiBCb3RoIHJlcXVlc3RzIGFuZCByZXNwb25zZXMgY2FuIGJlIHRyYW5zZm9ybWVkIHVzaW5nIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uczogYHRyYW5zZm9ybVJlcXVlc3RgXG4gICAgICogYW5kIGB0cmFuc2Zvcm1SZXNwb25zZWAuIFRoZXNlIHByb3BlcnRpZXMgY2FuIGJlIGEgc2luZ2xlIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICAgICAqIHRoZSB0cmFuc2Zvcm1lZCB2YWx1ZSAoYGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIsIHN0YXR1cylgKSBvciBhbiBhcnJheSBvZiBzdWNoIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9ucyxcbiAgICAgKiB3aGljaCBhbGxvd3MgeW91IHRvIGBwdXNoYCBvciBgdW5zaGlmdGAgYSBuZXcgdHJhbnNmb3JtYXRpb24gZnVuY3Rpb24gaW50byB0aGUgdHJhbnNmb3JtYXRpb24gY2hhaW4uXG4gICAgICpcbiAgICAgKiAjIyMgRGVmYXVsdCBUcmFuc2Zvcm1hdGlvbnNcbiAgICAgKlxuICAgICAqIFRoZSBgJGh0dHBQcm92aWRlcmAgcHJvdmlkZXIgYW5kIGAkaHR0cGAgc2VydmljZSBleHBvc2UgYGRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3RgIGFuZFxuICAgICAqIGBkZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZWAgcHJvcGVydGllcy4gSWYgYSByZXF1ZXN0IGRvZXMgbm90IHByb3ZpZGUgaXRzIG93biB0cmFuc2Zvcm1hdGlvbnNcbiAgICAgKiB0aGVuIHRoZXNlIHdpbGwgYmUgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gYXVnbWVudCBvciByZXBsYWNlIHRoZSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9ucyBieSBtb2RpZnlpbmcgdGhlc2UgcHJvcGVydGllcyBieSBhZGRpbmcgdG8gb3JcbiAgICAgKiByZXBsYWNpbmcgdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQW5ndWxhciBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zOlxuICAgICAqXG4gICAgICogUmVxdWVzdCB0cmFuc2Zvcm1hdGlvbnMgKGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3RgIGFuZCBgJGh0dHAuZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdGApOlxuICAgICAqXG4gICAgICogLSBJZiB0aGUgYGRhdGFgIHByb3BlcnR5IG9mIHRoZSByZXF1ZXN0IGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5zIGFuIG9iamVjdCwgc2VyaWFsaXplIGl0XG4gICAgICogICBpbnRvIEpTT04gZm9ybWF0LlxuICAgICAqXG4gICAgICogUmVzcG9uc2UgdHJhbnNmb3JtYXRpb25zIChgJGh0dHBQcm92aWRlci5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZWAgYW5kIGAkaHR0cC5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZWApOlxuICAgICAqXG4gICAgICogIC0gSWYgWFNSRiBwcmVmaXggaXMgZGV0ZWN0ZWQsIHN0cmlwIGl0IChzZWUgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnMgc2VjdGlvbiBiZWxvdykuXG4gICAgICogIC0gSWYgSlNPTiByZXNwb25zZSBpcyBkZXRlY3RlZCwgZGVzZXJpYWxpemUgaXQgdXNpbmcgYSBKU09OIHBhcnNlci5cbiAgICAgKlxuICAgICAqXG4gICAgICogIyMjIE92ZXJyaWRpbmcgdGhlIERlZmF1bHQgVHJhbnNmb3JtYXRpb25zIFBlciBSZXF1ZXN0XG4gICAgICpcbiAgICAgKiBJZiB5b3Ugd2lzaCBvdmVycmlkZSB0aGUgcmVxdWVzdC9yZXNwb25zZSB0cmFuc2Zvcm1hdGlvbnMgb25seSBmb3IgYSBzaW5nbGUgcmVxdWVzdCB0aGVuIHByb3ZpZGVcbiAgICAgKiBgdHJhbnNmb3JtUmVxdWVzdGAgYW5kL29yIGB0cmFuc2Zvcm1SZXNwb25zZWAgcHJvcGVydGllcyBvbiB0aGUgY29uZmlndXJhdGlvbiBvYmplY3QgcGFzc2VkXG4gICAgICogaW50byBgJGh0dHBgLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IGlmIHlvdSBwcm92aWRlIHRoZXNlIHByb3BlcnRpZXMgb24gdGhlIGNvbmZpZyBvYmplY3QgdGhlIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zIHdpbGwgYmVcbiAgICAgKiBvdmVyd3JpdHRlbi4gSWYgeW91IHdpc2ggdG8gYXVnbWVudCB0aGUgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbnMgdGhlbiB5b3UgbXVzdCBpbmNsdWRlIHRoZW0gaW4geW91clxuICAgICAqIGxvY2FsIHRyYW5zZm9ybWF0aW9uIGFycmF5LlxuICAgICAqXG4gICAgICogVGhlIGZvbGxvd2luZyBjb2RlIGRlbW9uc3RyYXRlcyBhZGRpbmcgYSBuZXcgcmVzcG9uc2UgdHJhbnNmb3JtYXRpb24gdG8gYmUgcnVuIGFmdGVyIHRoZSBkZWZhdWx0IHJlc3BvbnNlXG4gICAgICogdHJhbnNmb3JtYXRpb25zIGhhdmUgYmVlbiBydW4uXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGZ1bmN0aW9uIGFwcGVuZFRyYW5zZm9ybShkZWZhdWx0cywgdHJhbnNmb3JtKSB7XG4gICAgICpcbiAgICAgKiAgIC8vIFdlIGNhbid0IGd1YXJhbnRlZSB0aGF0IHRoZSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9uIGlzIGFuIGFycmF5XG4gICAgICogICBkZWZhdWx0cyA9IGFuZ3VsYXIuaXNBcnJheShkZWZhdWx0cykgPyBkZWZhdWx0cyA6IFtkZWZhdWx0c107XG4gICAgICpcbiAgICAgKiAgIC8vIEFwcGVuZCB0aGUgbmV3IHRyYW5zZm9ybWF0aW9uIHRvIHRoZSBkZWZhdWx0c1xuICAgICAqICAgcmV0dXJuIGRlZmF1bHRzLmNvbmNhdCh0cmFuc2Zvcm0pO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqICRodHRwKHtcbiAgICAgKiAgIHVybDogJy4uLicsXG4gICAgICogICBtZXRob2Q6ICdHRVQnLFxuICAgICAqICAgdHJhbnNmb3JtUmVzcG9uc2U6IGFwcGVuZFRyYW5zZm9ybSgkaHR0cC5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgICAgcmV0dXJuIGRvVHJhbnNmb3JtKHZhbHVlKTtcbiAgICAgKiAgIH0pXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIENhY2hpbmdcbiAgICAgKlxuICAgICAqIFRvIGVuYWJsZSBjYWNoaW5nLCBzZXQgdGhlIHJlcXVlc3QgY29uZmlndXJhdGlvbiBgY2FjaGVgIHByb3BlcnR5IHRvIGB0cnVlYCAodG8gdXNlIGRlZmF1bHRcbiAgICAgKiBjYWNoZSkgb3IgdG8gYSBjdXN0b20gY2FjaGUgb2JqZWN0IChidWlsdCB3aXRoIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5IGAkY2FjaGVGYWN0b3J5YH0pLlxuICAgICAqIFdoZW4gdGhlIGNhY2hlIGlzIGVuYWJsZWQsIGAkaHR0cGAgc3RvcmVzIHRoZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdGhlIHNwZWNpZmllZFxuICAgICAqIGNhY2hlLiBUaGUgbmV4dCB0aW1lIHRoZSBzYW1lIHJlcXVlc3QgaXMgbWFkZSwgdGhlIHJlc3BvbnNlIGlzIHNlcnZlZCBmcm9tIHRoZSBjYWNoZSB3aXRob3V0XG4gICAgICogc2VuZGluZyBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlci5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBldmVuIGlmIHRoZSByZXNwb25zZSBpcyBzZXJ2ZWQgZnJvbSBjYWNoZSwgZGVsaXZlcnkgb2YgdGhlIGRhdGEgaXMgYXN5bmNocm9ub3VzIGluXG4gICAgICogdGhlIHNhbWUgd2F5IHRoYXQgcmVhbCByZXF1ZXN0cyBhcmUuXG4gICAgICpcbiAgICAgKiBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgR0VUIHJlcXVlc3RzIGZvciB0aGUgc2FtZSBVUkwgdGhhdCBzaG91bGQgYmUgY2FjaGVkIHVzaW5nIHRoZSBzYW1lXG4gICAgICogY2FjaGUsIGJ1dCB0aGUgY2FjaGUgaXMgbm90IHBvcHVsYXRlZCB5ZXQsIG9ubHkgb25lIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB3aWxsIGJlIG1hZGUgYW5kXG4gICAgICogdGhlIHJlbWFpbmluZyByZXF1ZXN0cyB3aWxsIGJlIGZ1bGZpbGxlZCB1c2luZyB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgZmlyc3QgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gY2hhbmdlIHRoZSBkZWZhdWx0IGNhY2hlIHRvIGEgbmV3IG9iamVjdCAoYnVpbHQgd2l0aFxuICAgICAqIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5IGAkY2FjaGVGYWN0b3J5YH0pIGJ5IHVwZGF0aW5nIHRoZVxuICAgICAqIHtAbGluayBuZy4kaHR0cCNkZWZhdWx0cyBgJGh0dHAuZGVmYXVsdHMuY2FjaGVgfSBwcm9wZXJ0eS4gQWxsIHJlcXVlc3RzIHdobyBzZXRcbiAgICAgKiB0aGVpciBgY2FjaGVgIHByb3BlcnR5IHRvIGB0cnVlYCB3aWxsIG5vdyB1c2UgdGhpcyBjYWNoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBJZiB5b3Ugc2V0IHRoZSBkZWZhdWx0IGNhY2hlIHRvIGBmYWxzZWAgdGhlbiBvbmx5IHJlcXVlc3RzIHRoYXQgc3BlY2lmeSB0aGVpciBvd24gY3VzdG9tXG4gICAgICogY2FjaGUgb2JqZWN0IHdpbGwgYmUgY2FjaGVkLlxuICAgICAqXG4gICAgICogIyMgSW50ZXJjZXB0b3JzXG4gICAgICpcbiAgICAgKiBCZWZvcmUgeW91IHN0YXJ0IGNyZWF0aW5nIGludGVyY2VwdG9ycywgYmUgc3VyZSB0byB1bmRlcnN0YW5kIHRoZVxuICAgICAqIHtAbGluayBuZy4kcSAkcSBhbmQgZGVmZXJyZWQvcHJvbWlzZSBBUElzfS5cbiAgICAgKlxuICAgICAqIEZvciBwdXJwb3NlcyBvZiBnbG9iYWwgZXJyb3IgaGFuZGxpbmcsIGF1dGhlbnRpY2F0aW9uLCBvciBhbnkga2luZCBvZiBzeW5jaHJvbm91cyBvclxuICAgICAqIGFzeW5jaHJvbm91cyBwcmUtcHJvY2Vzc2luZyBvZiByZXF1ZXN0IG9yIHBvc3Rwcm9jZXNzaW5nIG9mIHJlc3BvbnNlcywgaXQgaXMgZGVzaXJhYmxlIHRvIGJlXG4gICAgICogYWJsZSB0byBpbnRlcmNlcHQgcmVxdWVzdHMgYmVmb3JlIHRoZXkgYXJlIGhhbmRlZCB0byB0aGUgc2VydmVyIGFuZFxuICAgICAqIHJlc3BvbnNlcyBiZWZvcmUgdGhleSBhcmUgaGFuZGVkIG92ZXIgdG8gdGhlIGFwcGxpY2F0aW9uIGNvZGUgdGhhdFxuICAgICAqIGluaXRpYXRlZCB0aGVzZSByZXF1ZXN0cy4gVGhlIGludGVyY2VwdG9ycyBsZXZlcmFnZSB0aGUge0BsaW5rIG5nLiRxXG4gICAgICogcHJvbWlzZSBBUElzfSB0byBmdWxmaWxsIHRoaXMgbmVlZCBmb3IgYm90aCBzeW5jaHJvbm91cyBhbmQgYXN5bmNocm9ub3VzIHByZS1wcm9jZXNzaW5nLlxuICAgICAqXG4gICAgICogVGhlIGludGVyY2VwdG9ycyBhcmUgc2VydmljZSBmYWN0b3JpZXMgdGhhdCBhcmUgcmVnaXN0ZXJlZCB3aXRoIHRoZSBgJGh0dHBQcm92aWRlcmAgYnlcbiAgICAgKiBhZGRpbmcgdGhlbSB0byB0aGUgYCRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzYCBhcnJheS4gVGhlIGZhY3RvcnkgaXMgY2FsbGVkIGFuZFxuICAgICAqIGluamVjdGVkIHdpdGggZGVwZW5kZW5jaWVzIChpZiBzcGVjaWZpZWQpIGFuZCByZXR1cm5zIHRoZSBpbnRlcmNlcHRvci5cbiAgICAgKlxuICAgICAqIFRoZXJlIGFyZSB0d28ga2luZHMgb2YgaW50ZXJjZXB0b3JzIChhbmQgdHdvIGtpbmRzIG9mIHJlamVjdGlvbiBpbnRlcmNlcHRvcnMpOlxuICAgICAqXG4gICAgICogICAqIGByZXF1ZXN0YDogaW50ZXJjZXB0b3JzIGdldCBjYWxsZWQgd2l0aCBhIGh0dHAgYGNvbmZpZ2Agb2JqZWN0LiBUaGUgZnVuY3Rpb24gaXMgZnJlZSB0b1xuICAgICAqICAgICBtb2RpZnkgdGhlIGBjb25maWdgIG9iamVjdCBvciBjcmVhdGUgYSBuZXcgb25lLiBUaGUgZnVuY3Rpb24gbmVlZHMgdG8gcmV0dXJuIHRoZSBgY29uZmlnYFxuICAgICAqICAgICBvYmplY3QgZGlyZWN0bHksIG9yIGEgcHJvbWlzZSBjb250YWluaW5nIHRoZSBgY29uZmlnYCBvciBhIG5ldyBgY29uZmlnYCBvYmplY3QuXG4gICAgICogICAqIGByZXF1ZXN0RXJyb3JgOiBpbnRlcmNlcHRvciBnZXRzIGNhbGxlZCB3aGVuIGEgcHJldmlvdXMgaW50ZXJjZXB0b3IgdGhyZXcgYW4gZXJyb3Igb3JcbiAgICAgKiAgICAgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi5cbiAgICAgKiAgICogYHJlc3BvbnNlYDogaW50ZXJjZXB0b3JzIGdldCBjYWxsZWQgd2l0aCBodHRwIGByZXNwb25zZWAgb2JqZWN0LiBUaGUgZnVuY3Rpb24gaXMgZnJlZSB0b1xuICAgICAqICAgICBtb2RpZnkgdGhlIGByZXNwb25zZWAgb2JqZWN0IG9yIGNyZWF0ZSBhIG5ldyBvbmUuIFRoZSBmdW5jdGlvbiBuZWVkcyB0byByZXR1cm4gdGhlIGByZXNwb25zZWBcbiAgICAgKiAgICAgb2JqZWN0IGRpcmVjdGx5LCBvciBhcyBhIHByb21pc2UgY29udGFpbmluZyB0aGUgYHJlc3BvbnNlYCBvciBhIG5ldyBgcmVzcG9uc2VgIG9iamVjdC5cbiAgICAgKiAgICogYHJlc3BvbnNlRXJyb3JgOiBpbnRlcmNlcHRvciBnZXRzIGNhbGxlZCB3aGVuIGEgcHJldmlvdXMgaW50ZXJjZXB0b3IgdGhyZXcgYW4gZXJyb3Igb3JcbiAgICAgKiAgICAgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi5cbiAgICAgKlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIC8vIHJlZ2lzdGVyIHRoZSBpbnRlcmNlcHRvciBhcyBhIHNlcnZpY2VcbiAgICAgKiAgICRwcm92aWRlLmZhY3RvcnkoJ215SHR0cEludGVyY2VwdG9yJywgZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5Mikge1xuICAgICAqICAgICByZXR1cm4ge1xuICAgICAqICAgICAgIC8vIG9wdGlvbmFsIG1ldGhvZFxuICAgICAqICAgICAgICdyZXF1ZXN0JzogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gc3VjY2Vzc1xuICAgICAqICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgKiAgICAgICB9LFxuICAgICAqXG4gICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXG4gICAgICogICAgICAncmVxdWVzdEVycm9yJzogZnVuY3Rpb24ocmVqZWN0aW9uKSB7XG4gICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gZXJyb3JcbiAgICAgKiAgICAgICAgIGlmIChjYW5SZWNvdmVyKHJlamVjdGlvbikpIHtcbiAgICAgKiAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlT3JOZXdQcm9taXNlXG4gICAgICogICAgICAgICB9XG4gICAgICogICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlamVjdGlvbik7XG4gICAgICogICAgICAgfSxcbiAgICAgKlxuICAgICAqXG4gICAgICpcbiAgICAgKiAgICAgICAvLyBvcHRpb25hbCBtZXRob2RcbiAgICAgKiAgICAgICAncmVzcG9uc2UnOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIHN1Y2Nlc3NcbiAgICAgKiAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgKiAgICAgICB9LFxuICAgICAqXG4gICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXG4gICAgICogICAgICAncmVzcG9uc2VFcnJvcic6IGZ1bmN0aW9uKHJlamVjdGlvbikge1xuICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIGVycm9yXG4gICAgICogICAgICAgICBpZiAoY2FuUmVjb3ZlcihyZWplY3Rpb24pKSB7XG4gICAgICogICAgICAgICAgIHJldHVybiByZXNwb25zZU9yTmV3UHJvbWlzZVxuICAgICAqICAgICAgICAgfVxuICAgICAqICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xuICAgICAqICAgICAgIH1cbiAgICAgKiAgICAgfTtcbiAgICAgKiAgIH0pO1xuICAgICAqXG4gICAgICogICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdteUh0dHBJbnRlcmNlcHRvcicpO1xuICAgICAqXG4gICAgICpcbiAgICAgKiAgIC8vIGFsdGVybmF0aXZlbHksIHJlZ2lzdGVyIHRoZSBpbnRlcmNlcHRvciB2aWEgYW4gYW5vbnltb3VzIGZhY3RvcnlcbiAgICAgKiAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5Mikge1xuICAgICAqICAgICByZXR1cm4ge1xuICAgICAqICAgICAgJ3JlcXVlc3QnOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgKiAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlXG4gICAgICogICAgICAgfSxcbiAgICAgKlxuICAgICAqICAgICAgICdyZXNwb25zZSc6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICogICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZVxuICAgICAqICAgICAgIH1cbiAgICAgKiAgICAgfTtcbiAgICAgKiAgIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIyMgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnNcbiAgICAgKlxuICAgICAqIFdoZW4gZGVzaWduaW5nIHdlYiBhcHBsaWNhdGlvbnMsIGNvbnNpZGVyIHNlY3VyaXR5IHRocmVhdHMgZnJvbTpcbiAgICAgKlxuICAgICAqIC0gW0pTT04gdnVsbmVyYWJpbGl0eV0oaHR0cDovL2hhYWNrZWQuY29tL2FyY2hpdmUvMjAwOC8xMS8yMC9hbmF0b215LW9mLWEtc3VidGxlLWpzb24tdnVsbmVyYWJpbGl0eS5hc3B4KVxuICAgICAqIC0gW1hTUkZdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3Jvc3Mtc2l0ZV9yZXF1ZXN0X2ZvcmdlcnkpXG4gICAgICpcbiAgICAgKiBCb3RoIHNlcnZlciBhbmQgdGhlIGNsaWVudCBtdXN0IGNvb3BlcmF0ZSBpbiBvcmRlciB0byBlbGltaW5hdGUgdGhlc2UgdGhyZWF0cy4gQW5ndWxhciBjb21lc1xuICAgICAqIHByZS1jb25maWd1cmVkIHdpdGggc3RyYXRlZ2llcyB0aGF0IGFkZHJlc3MgdGhlc2UgaXNzdWVzLCBidXQgZm9yIHRoaXMgdG8gd29yayBiYWNrZW5kIHNlcnZlclxuICAgICAqIGNvb3BlcmF0aW9uIGlzIHJlcXVpcmVkLlxuICAgICAqXG4gICAgICogIyMjIEpTT04gVnVsbmVyYWJpbGl0eSBQcm90ZWN0aW9uXG4gICAgICpcbiAgICAgKiBBIFtKU09OIHZ1bG5lcmFiaWxpdHldKGh0dHA6Ly9oYWFja2VkLmNvbS9hcmNoaXZlLzIwMDgvMTEvMjAvYW5hdG9teS1vZi1hLXN1YnRsZS1qc29uLXZ1bG5lcmFiaWxpdHkuYXNweClcbiAgICAgKiBhbGxvd3MgdGhpcmQgcGFydHkgd2Vic2l0ZSB0byB0dXJuIHlvdXIgSlNPTiByZXNvdXJjZSBVUkwgaW50b1xuICAgICAqIFtKU09OUF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9KU09OUCkgcmVxdWVzdCB1bmRlciBzb21lIGNvbmRpdGlvbnMuIFRvXG4gICAgICogY291bnRlciB0aGlzIHlvdXIgc2VydmVyIGNhbiBwcmVmaXggYWxsIEpTT04gcmVxdWVzdHMgd2l0aCBmb2xsb3dpbmcgc3RyaW5nIGBcIildfScsXFxuXCJgLlxuICAgICAqIEFuZ3VsYXIgd2lsbCBhdXRvbWF0aWNhbGx5IHN0cmlwIHRoZSBwcmVmaXggYmVmb3JlIHByb2Nlc3NpbmcgaXQgYXMgSlNPTi5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlIGlmIHlvdXIgc2VydmVyIG5lZWRzIHRvIHJldHVybjpcbiAgICAgKiBgYGBqc1xuICAgICAqIFsnb25lJywndHdvJ11cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIHdoaWNoIGlzIHZ1bG5lcmFibGUgdG8gYXR0YWNrLCB5b3VyIHNlcnZlciBjYW4gcmV0dXJuOlxuICAgICAqIGBgYGpzXG4gICAgICogKV19JyxcbiAgICAgKiBbJ29uZScsJ3R3byddXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBBbmd1bGFyIHdpbGwgc3RyaXAgdGhlIHByZWZpeCwgYmVmb3JlIHByb2Nlc3NpbmcgdGhlIEpTT04uXG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIyBDcm9zcyBTaXRlIFJlcXVlc3QgRm9yZ2VyeSAoWFNSRikgUHJvdGVjdGlvblxuICAgICAqXG4gICAgICogW1hTUkZdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3Jvc3Mtc2l0ZV9yZXF1ZXN0X2ZvcmdlcnkpIGlzIGEgdGVjaG5pcXVlIGJ5IHdoaWNoXG4gICAgICogYW4gdW5hdXRob3JpemVkIHNpdGUgY2FuIGdhaW4geW91ciB1c2VyJ3MgcHJpdmF0ZSBkYXRhLiBBbmd1bGFyIHByb3ZpZGVzIGEgbWVjaGFuaXNtXG4gICAgICogdG8gY291bnRlciBYU1JGLiBXaGVuIHBlcmZvcm1pbmcgWEhSIHJlcXVlc3RzLCB0aGUgJGh0dHAgc2VydmljZSByZWFkcyBhIHRva2VuIGZyb20gYSBjb29raWVcbiAgICAgKiAoYnkgZGVmYXVsdCwgYFhTUkYtVE9LRU5gKSBhbmQgc2V0cyBpdCBhcyBhbiBIVFRQIGhlYWRlciAoYFgtWFNSRi1UT0tFTmApLiBTaW5jZSBvbmx5XG4gICAgICogSmF2YVNjcmlwdCB0aGF0IHJ1bnMgb24geW91ciBkb21haW4gY291bGQgcmVhZCB0aGUgY29va2llLCB5b3VyIHNlcnZlciBjYW4gYmUgYXNzdXJlZCB0aGF0XG4gICAgICogdGhlIFhIUiBjYW1lIGZyb20gSmF2YVNjcmlwdCBydW5uaW5nIG9uIHlvdXIgZG9tYWluLiBUaGUgaGVhZGVyIHdpbGwgbm90IGJlIHNldCBmb3JcbiAgICAgKiBjcm9zcy1kb21haW4gcmVxdWVzdHMuXG4gICAgICpcbiAgICAgKiBUbyB0YWtlIGFkdmFudGFnZSBvZiB0aGlzLCB5b3VyIHNlcnZlciBuZWVkcyB0byBzZXQgYSB0b2tlbiBpbiBhIEphdmFTY3JpcHQgcmVhZGFibGUgc2Vzc2lvblxuICAgICAqIGNvb2tpZSBjYWxsZWQgYFhTUkYtVE9LRU5gIG9uIHRoZSBmaXJzdCBIVFRQIEdFVCByZXF1ZXN0LiBPbiBzdWJzZXF1ZW50IFhIUiByZXF1ZXN0cyB0aGVcbiAgICAgKiBzZXJ2ZXIgY2FuIHZlcmlmeSB0aGF0IHRoZSBjb29raWUgbWF0Y2hlcyBgWC1YU1JGLVRPS0VOYCBIVFRQIGhlYWRlciwgYW5kIHRoZXJlZm9yZSBiZSBzdXJlXG4gICAgICogdGhhdCBvbmx5IEphdmFTY3JpcHQgcnVubmluZyBvbiB5b3VyIGRvbWFpbiBjb3VsZCBoYXZlIHNlbnQgdGhlIHJlcXVlc3QuIFRoZSB0b2tlbiBtdXN0IGJlXG4gICAgICogdW5pcXVlIGZvciBlYWNoIHVzZXIgYW5kIG11c3QgYmUgdmVyaWZpYWJsZSBieSB0aGUgc2VydmVyICh0byBwcmV2ZW50IHRoZSBKYXZhU2NyaXB0IGZyb21cbiAgICAgKiBtYWtpbmcgdXAgaXRzIG93biB0b2tlbnMpLiBXZSByZWNvbW1lbmQgdGhhdCB0aGUgdG9rZW4gaXMgYSBkaWdlc3Qgb2YgeW91ciBzaXRlJ3NcbiAgICAgKiBhdXRoZW50aWNhdGlvbiBjb29raWUgd2l0aCBhIFtzYWx0XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TYWx0XyhjcnlwdG9ncmFwaHkmIzQxOylcbiAgICAgKiBmb3IgYWRkZWQgc2VjdXJpdHkuXG4gICAgICpcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgaGVhZGVycyBjYW4gYmUgc3BlY2lmaWVkIHVzaW5nIHRoZSB4c3JmSGVhZGVyTmFtZSBhbmQgeHNyZkNvb2tpZU5hbWVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGVpdGhlciAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzIGF0IGNvbmZpZy10aW1lLCAkaHR0cC5kZWZhdWx0cyBhdCBydW4tdGltZSxcbiAgICAgKiBvciB0aGUgcGVyLXJlcXVlc3QgY29uZmlnIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEluIG9yZGVyIHRvIHByZXZlbnQgY29sbGlzaW9ucyBpbiBlbnZpcm9ubWVudHMgd2hlcmUgbXVsdGlwbGUgQW5ndWxhciBhcHBzIHNoYXJlIHRoZVxuICAgICAqIHNhbWUgZG9tYWluIG9yIHN1YmRvbWFpbiwgd2UgcmVjb21tZW5kIHRoYXQgZWFjaCBhcHBsaWNhdGlvbiB1c2VzIHVuaXF1ZSBjb29raWUgbmFtZS5cbiAgICAgKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBPYmplY3QgZGVzY3JpYmluZyB0aGUgcmVxdWVzdCB0byBiZSBtYWRlIGFuZCBob3cgaXQgc2hvdWxkIGJlXG4gICAgICogICAgcHJvY2Vzc2VkLiBUaGUgb2JqZWN0IGhhcyBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgKlxuICAgICAqICAgIC0gKiptZXRob2QqKiDigJMgYHtzdHJpbmd9YCDigJMgSFRUUCBtZXRob2QgKGUuZy4gJ0dFVCcsICdQT1NUJywgZXRjKVxuICAgICAqICAgIC0gKip1cmwqKiDigJMgYHtzdHJpbmd9YCDigJMgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIG9mIHRoZSByZXNvdXJjZSB0aGF0IGlzIGJlaW5nIHJlcXVlc3RlZC5cbiAgICAgKiAgICAtICoqcGFyYW1zKiog4oCTIGB7T2JqZWN0LjxzdHJpbmd8T2JqZWN0Pn1gIOKAkyBNYXAgb2Ygc3RyaW5ncyBvciBvYmplY3RzIHdoaWNoIHdpbGwgYmUgc2VyaWFsaXplZFxuICAgICAqICAgICAgd2l0aCB0aGUgYHBhcmFtU2VyaWFsaXplcmAgYW5kIGFwcGVuZGVkIGFzIEdFVCBwYXJhbWV0ZXJzLlxuICAgICAqICAgIC0gKipkYXRhKiog4oCTIGB7c3RyaW5nfE9iamVjdH1gIOKAkyBEYXRhIHRvIGJlIHNlbnQgYXMgdGhlIHJlcXVlc3QgbWVzc2FnZSBkYXRhLlxuICAgICAqICAgIC0gKipoZWFkZXJzKiog4oCTIGB7T2JqZWN0fWAg4oCTIE1hcCBvZiBzdHJpbmdzIG9yIGZ1bmN0aW9ucyB3aGljaCByZXR1cm4gc3RyaW5ncyByZXByZXNlbnRpbmdcbiAgICAgKiAgICAgIEhUVFAgaGVhZGVycyB0byBzZW5kIHRvIHRoZSBzZXJ2ZXIuIElmIHRoZSByZXR1cm4gdmFsdWUgb2YgYSBmdW5jdGlvbiBpcyBudWxsLCB0aGVcbiAgICAgKiAgICAgIGhlYWRlciB3aWxsIG5vdCBiZSBzZW50LiBGdW5jdGlvbnMgYWNjZXB0IGEgY29uZmlnIG9iamVjdCBhcyBhbiBhcmd1bWVudC5cbiAgICAgKiAgICAtICoqeHNyZkhlYWRlck5hbWUqKiDigJMgYHtzdHJpbmd9YCDigJMgTmFtZSBvZiBIVFRQIGhlYWRlciB0byBwb3B1bGF0ZSB3aXRoIHRoZSBYU1JGIHRva2VuLlxuICAgICAqICAgIC0gKip4c3JmQ29va2llTmFtZSoqIOKAkyBge3N0cmluZ31gIOKAkyBOYW1lIG9mIGNvb2tpZSBjb250YWluaW5nIHRoZSBYU1JGIHRva2VuLlxuICAgICAqICAgIC0gKip0cmFuc2Zvcm1SZXF1ZXN0Kiog4oCTXG4gICAgICogICAgICBge2Z1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpfEFycmF5LjxmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKT59YCDigJNcbiAgICAgKiAgICAgIHRyYW5zZm9ybSBmdW5jdGlvbiBvciBhbiBhcnJheSBvZiBzdWNoIGZ1bmN0aW9ucy4gVGhlIHRyYW5zZm9ybSBmdW5jdGlvbiB0YWtlcyB0aGUgaHR0cFxuICAgICAqICAgICAgcmVxdWVzdCBib2R5IGFuZCBoZWFkZXJzIGFuZCByZXR1cm5zIGl0cyB0cmFuc2Zvcm1lZCAodHlwaWNhbGx5IHNlcmlhbGl6ZWQpIHZlcnNpb24uXG4gICAgICogICAgICBTZWUge0BsaW5rIG5nLiRodHRwI292ZXJyaWRpbmctdGhlLWRlZmF1bHQtdHJhbnNmb3JtYXRpb25zLXBlci1yZXF1ZXN0XG4gICAgICogICAgICBPdmVycmlkaW5nIHRoZSBEZWZhdWx0IFRyYW5zZm9ybWF0aW9uc31cbiAgICAgKiAgICAtICoqdHJhbnNmb3JtUmVzcG9uc2UqKiDigJNcbiAgICAgKiAgICAgIGB7ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlciwgc3RhdHVzKXxBcnJheS48ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlciwgc3RhdHVzKT59YCDigJNcbiAgICAgKiAgICAgIHRyYW5zZm9ybSBmdW5jdGlvbiBvciBhbiBhcnJheSBvZiBzdWNoIGZ1bmN0aW9ucy4gVGhlIHRyYW5zZm9ybSBmdW5jdGlvbiB0YWtlcyB0aGUgaHR0cFxuICAgICAqICAgICAgcmVzcG9uc2UgYm9keSwgaGVhZGVycyBhbmQgc3RhdHVzIGFuZCByZXR1cm5zIGl0cyB0cmFuc2Zvcm1lZCAodHlwaWNhbGx5IGRlc2VyaWFsaXplZCkgdmVyc2lvbi5cbiAgICAgKiAgICAgIFNlZSB7QGxpbmsgbmcuJGh0dHAjb3ZlcnJpZGluZy10aGUtZGVmYXVsdC10cmFuc2Zvcm1hdGlvbnMtcGVyLXJlcXVlc3RcbiAgICAgKiAgICAgIE92ZXJyaWRpbmcgdGhlIERlZmF1bHQgVHJhbnNmb3JtYXRpb25qcUxpa3N9XG4gICAgICogICAgLSAqKnBhcmFtU2VyaWFsaXplcioqIC0gYHtzdHJpbmd8ZnVuY3Rpb24oT2JqZWN0PHN0cmluZyxzdHJpbmc+KTpzdHJpbmd9YCAtIEEgZnVuY3Rpb24gdXNlZCB0b1xuICAgICAqICAgICAgcHJlcGFyZSB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHJlcXVlc3QgcGFyYW1ldGVycyAoc3BlY2lmaWVkIGFzIGFuIG9iamVjdCkuXG4gICAgICogICAgICBJZiBzcGVjaWZpZWQgYXMgc3RyaW5nLCBpdCBpcyBpbnRlcnByZXRlZCBhcyBmdW5jdGlvbiByZWdpc3RlcmVkIHdpdGggdGhlXG4gICAgICogICAgICB7QGxpbmsgJGluamVjdG9yICRpbmplY3Rvcn0sIHdoaWNoIG1lYW5zIHlvdSBjYW4gY3JlYXRlIHlvdXIgb3duIHNlcmlhbGl6ZXJcbiAgICAgKiAgICAgIGJ5IHJlZ2lzdGVyaW5nIGl0IGFzIGEge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSBzZXJ2aWNlfS5cbiAgICAgKiAgICAgIFRoZSBkZWZhdWx0IHNlcmlhbGl6ZXIgaXMgdGhlIHtAbGluayAkaHR0cFBhcmFtU2VyaWFsaXplciAkaHR0cFBhcmFtU2VyaWFsaXplcn07XG4gICAgICogICAgICBhbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIHVzZSB0aGUge0BsaW5rICRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlICRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlfVxuICAgICAqICAgIC0gKipjYWNoZSoqIOKAkyBge2Jvb2xlYW58Q2FjaGV9YCDigJMgSWYgdHJ1ZSwgYSBkZWZhdWx0ICRodHRwIGNhY2hlIHdpbGwgYmUgdXNlZCB0byBjYWNoZSB0aGVcbiAgICAgKiAgICAgIEdFVCByZXF1ZXN0LCBvdGhlcndpc2UgaWYgYSBjYWNoZSBpbnN0YW5jZSBidWlsdCB3aXRoXG4gICAgICogICAgICB7QGxpbmsgbmcuJGNhY2hlRmFjdG9yeSAkY2FjaGVGYWN0b3J5fSwgdGhpcyBjYWNoZSB3aWxsIGJlIHVzZWQgZm9yXG4gICAgICogICAgICBjYWNoaW5nLlxuICAgICAqICAgIC0gKip0aW1lb3V0Kiog4oCTIGB7bnVtYmVyfFByb21pc2V9YCDigJMgdGltZW91dCBpbiBtaWxsaXNlY29uZHMsIG9yIHtAbGluayBuZy4kcSBwcm9taXNlfVxuICAgICAqICAgICAgdGhhdCBzaG91bGQgYWJvcnQgdGhlIHJlcXVlc3Qgd2hlbiByZXNvbHZlZC5cbiAgICAgKiAgICAtICoqd2l0aENyZWRlbnRpYWxzKiogLSBge2Jvb2xlYW59YCAtIHdoZXRoZXIgdG8gc2V0IHRoZSBgd2l0aENyZWRlbnRpYWxzYCBmbGFnIG9uIHRoZVxuICAgICAqICAgICAgWEhSIG9iamVjdC4gU2VlIFtyZXF1ZXN0cyB3aXRoIGNyZWRlbnRpYWxzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVFRQL0FjY2Vzc19jb250cm9sX0NPUlMjUmVxdWVzdHNfd2l0aF9jcmVkZW50aWFscylcbiAgICAgKiAgICAgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqICAgIC0gKipyZXNwb25zZVR5cGUqKiAtIGB7c3RyaW5nfWAgLSBzZWVcbiAgICAgKiAgICAgIFtYTUxIdHRwUmVxdWVzdC5yZXNwb25zZVR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9YTUxIdHRwUmVxdWVzdCN4bWxodHRwcmVxdWVzdC1yZXNwb25zZXR5cGUpLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBSZXR1cm5zIGEge0BsaW5rIG5nLiRxIHByb21pc2V9IG9iamVjdCB3aXRoIHRoZVxuICAgICAqICAgc3RhbmRhcmQgYHRoZW5gIG1ldGhvZCBhbmQgdHdvIGh0dHAgc3BlY2lmaWMgbWV0aG9kczogYHN1Y2Nlc3NgIGFuZCBgZXJyb3JgLiBUaGUgYHRoZW5gXG4gICAgICogICBtZXRob2QgdGFrZXMgdHdvIGFyZ3VtZW50cyBhIHN1Y2Nlc3MgYW5kIGFuIGVycm9yIGNhbGxiYWNrIHdoaWNoIHdpbGwgYmUgY2FsbGVkIHdpdGggYVxuICAgICAqICAgcmVzcG9uc2Ugb2JqZWN0LiBUaGUgYHN1Y2Nlc3NgIGFuZCBgZXJyb3JgIG1ldGhvZHMgdGFrZSBhIHNpbmdsZSBhcmd1bWVudCAtIGEgZnVuY3Rpb24gdGhhdFxuICAgICAqICAgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBzdWNjZWVkcyBvciBmYWlscyByZXNwZWN0aXZlbHkuIFRoZSBhcmd1bWVudHMgcGFzc2VkIGludG9cbiAgICAgKiAgIHRoZXNlIGZ1bmN0aW9ucyBhcmUgZGVzdHJ1Y3R1cmVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSByZXNwb25zZSBvYmplY3QgcGFzc2VkIGludG8gdGhlXG4gICAgICogICBgdGhlbmAgbWV0aG9kLiBUaGUgcmVzcG9uc2Ugb2JqZWN0IGhhcyB0aGVzZSBwcm9wZXJ0aWVzOlxuICAgICAqXG4gICAgICogICAtICoqZGF0YSoqIOKAkyBge3N0cmluZ3xPYmplY3R9YCDigJMgVGhlIHJlc3BvbnNlIGJvZHkgdHJhbnNmb3JtZWQgd2l0aCB0aGUgdHJhbnNmb3JtXG4gICAgICogICAgIGZ1bmN0aW9ucy5cbiAgICAgKiAgIC0gKipzdGF0dXMqKiDigJMgYHtudW1iZXJ9YCDigJMgSFRUUCBzdGF0dXMgY29kZSBvZiB0aGUgcmVzcG9uc2UuXG4gICAgICogICAtICoqaGVhZGVycyoqIOKAkyBge2Z1bmN0aW9uKFtoZWFkZXJOYW1lXSl9YCDigJMgSGVhZGVyIGdldHRlciBmdW5jdGlvbi5cbiAgICAgKiAgIC0gKipjb25maWcqKiDigJMgYHtPYmplY3R9YCDigJMgVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgd2FzIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIHJlcXVlc3QuXG4gICAgICogICAtICoqc3RhdHVzVGV4dCoqIOKAkyBge3N0cmluZ31gIOKAkyBIVFRQIHN0YXR1cyB0ZXh0IG9mIHRoZSByZXNwb25zZS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPE9iamVjdD59IHBlbmRpbmdSZXF1ZXN0cyBBcnJheSBvZiBjb25maWcgb2JqZWN0cyBmb3IgY3VycmVudGx5IHBlbmRpbmdcbiAgICAgKiAgIHJlcXVlc3RzLiBUaGlzIGlzIHByaW1hcmlseSBtZWFudCB0byBiZSB1c2VkIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMuXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG48ZXhhbXBsZSBtb2R1bGU9XCJodHRwRXhhbXBsZVwiPlxuPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgPGRpdiBuZy1jb250cm9sbGVyPVwiRmV0Y2hDb250cm9sbGVyXCI+XG4gICAgPHNlbGVjdCBuZy1tb2RlbD1cIm1ldGhvZFwiIGFyaWEtbGFiZWw9XCJSZXF1ZXN0IG1ldGhvZFwiPlxuICAgICAgPG9wdGlvbj5HRVQ8L29wdGlvbj5cbiAgICAgIDxvcHRpb24+SlNPTlA8L29wdGlvbj5cbiAgICA8L3NlbGVjdD5cbiAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInVybFwiIHNpemU9XCI4MFwiIGFyaWEtbGFiZWw9XCJVUkxcIiAvPlxuICAgIDxidXR0b24gaWQ9XCJmZXRjaGJ0blwiIG5nLWNsaWNrPVwiZmV0Y2goKVwiPmZldGNoPC9idXR0b24+PGJyPlxuICAgIDxidXR0b24gaWQ9XCJzYW1wbGVnZXRidG5cIiBuZy1jbGljaz1cInVwZGF0ZU1vZGVsKCdHRVQnLCAnaHR0cC1oZWxsby5odG1sJylcIj5TYW1wbGUgR0VUPC9idXR0b24+XG4gICAgPGJ1dHRvbiBpZD1cInNhbXBsZWpzb25wYnRuXCJcbiAgICAgIG5nLWNsaWNrPVwidXBkYXRlTW9kZWwoJ0pTT05QJyxcbiAgICAgICAgICAgICAgICAgICAgJ2h0dHBzOi8vYW5ndWxhcmpzLm9yZy9ncmVldC5waHA/Y2FsbGJhY2s9SlNPTl9DQUxMQkFDSyZuYW1lPVN1cGVyJTIwSGVybycpXCI+XG4gICAgICBTYW1wbGUgSlNPTlBcbiAgICA8L2J1dHRvbj5cbiAgICA8YnV0dG9uIGlkPVwiaW52YWxpZGpzb25wYnRuXCJcbiAgICAgIG5nLWNsaWNrPVwidXBkYXRlTW9kZWwoJ0pTT05QJywgJ2h0dHBzOi8vYW5ndWxhcmpzLm9yZy9kb2VzbnRleGlzdCZjYWxsYmFjaz1KU09OX0NBTExCQUNLJylcIj5cbiAgICAgICAgSW52YWxpZCBKU09OUFxuICAgICAgPC9idXR0b24+XG4gICAgPHByZT5odHRwIHN0YXR1cyBjb2RlOiB7e3N0YXR1c319PC9wcmU+XG4gICAgPHByZT5odHRwIHJlc3BvbnNlIGRhdGE6IHt7ZGF0YX19PC9wcmU+XG4gIDwvZGl2PlxuPC9maWxlPlxuPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICBhbmd1bGFyLm1vZHVsZSgnaHR0cEV4YW1wbGUnLCBbXSlcbiAgICAuY29udHJvbGxlcignRmV0Y2hDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJHRlbXBsYXRlQ2FjaGUnLFxuICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJHRlbXBsYXRlQ2FjaGUpIHtcbiAgICAgICAgJHNjb3BlLm1ldGhvZCA9ICdHRVQnO1xuICAgICAgICAkc2NvcGUudXJsID0gJ2h0dHAtaGVsbG8uaHRtbCc7XG5cbiAgICAgICAgJHNjb3BlLmZldGNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHNjb3BlLmNvZGUgPSBudWxsO1xuICAgICAgICAgICRzY29wZS5yZXNwb25zZSA9IG51bGw7XG5cbiAgICAgICAgICAkaHR0cCh7bWV0aG9kOiAkc2NvcGUubWV0aG9kLCB1cmw6ICRzY29wZS51cmwsIGNhY2hlOiAkdGVtcGxhdGVDYWNoZX0pLlxuICAgICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgICAgICAgJHNjb3BlLmRhdGEgPSBkYXRhO1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICBlcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLmRhdGEgPSBkYXRhIHx8IFwiUmVxdWVzdCBmYWlsZWRcIjtcbiAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUudXBkYXRlTW9kZWwgPSBmdW5jdGlvbihtZXRob2QsIHVybCkge1xuICAgICAgICAgICRzY29wZS5tZXRob2QgPSBtZXRob2Q7XG4gICAgICAgICAgJHNjb3BlLnVybCA9IHVybDtcbiAgICAgICAgfTtcbiAgICAgIH1dKTtcbjwvZmlsZT5cbjxmaWxlIG5hbWU9XCJodHRwLWhlbGxvLmh0bWxcIj5cbiAgSGVsbG8sICRodHRwIVxuPC9maWxlPlxuPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICB2YXIgc3RhdHVzID0gZWxlbWVudChieS5iaW5kaW5nKCdzdGF0dXMnKSk7XG4gIHZhciBkYXRhID0gZWxlbWVudChieS5iaW5kaW5nKCdkYXRhJykpO1xuICB2YXIgZmV0Y2hCdG4gPSBlbGVtZW50KGJ5LmlkKCdmZXRjaGJ0bicpKTtcbiAgdmFyIHNhbXBsZUdldEJ0biA9IGVsZW1lbnQoYnkuaWQoJ3NhbXBsZWdldGJ0bicpKTtcbiAgdmFyIHNhbXBsZUpzb25wQnRuID0gZWxlbWVudChieS5pZCgnc2FtcGxlanNvbnBidG4nKSk7XG4gIHZhciBpbnZhbGlkSnNvbnBCdG4gPSBlbGVtZW50KGJ5LmlkKCdpbnZhbGlkanNvbnBidG4nKSk7XG5cbiAgaXQoJ3Nob3VsZCBtYWtlIGFuIHhociBHRVQgcmVxdWVzdCcsIGZ1bmN0aW9uKCkge1xuICAgIHNhbXBsZUdldEJ0bi5jbGljaygpO1xuICAgIGZldGNoQnRuLmNsaWNrKCk7XG4gICAgZXhwZWN0KHN0YXR1cy5nZXRUZXh0KCkpLnRvTWF0Y2goJzIwMCcpO1xuICAgIGV4cGVjdChkYXRhLmdldFRleHQoKSkudG9NYXRjaCgvSGVsbG8sIFxcJGh0dHAhLyk7XG4gIH0pO1xuXG4vLyBDb21tZW50ZWQgb3V0IGR1ZSB0byBmbGFrZXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy85MTg1XG4vLyBpdCgnc2hvdWxkIG1ha2UgYSBKU09OUCByZXF1ZXN0IHRvIGFuZ3VsYXJqcy5vcmcnLCBmdW5jdGlvbigpIHtcbi8vICAgc2FtcGxlSnNvbnBCdG4uY2xpY2soKTtcbi8vICAgZmV0Y2hCdG4uY2xpY2soKTtcbi8vICAgZXhwZWN0KHN0YXR1cy5nZXRUZXh0KCkpLnRvTWF0Y2goJzIwMCcpO1xuLy8gICBleHBlY3QoZGF0YS5nZXRUZXh0KCkpLnRvTWF0Y2goL1N1cGVyIEhlcm8hLyk7XG4vLyB9KTtcblxuICBpdCgnc2hvdWxkIG1ha2UgSlNPTlAgcmVxdWVzdCB0byBpbnZhbGlkIFVSTCBhbmQgaW52b2tlIHRoZSBlcnJvciBoYW5kbGVyJyxcbiAgICAgIGZ1bmN0aW9uKCkge1xuICAgIGludmFsaWRKc29ucEJ0bi5jbGljaygpO1xuICAgIGZldGNoQnRuLmNsaWNrKCk7XG4gICAgZXhwZWN0KHN0YXR1cy5nZXRUZXh0KCkpLnRvTWF0Y2goJzAnKTtcbiAgICBleHBlY3QoZGF0YS5nZXRUZXh0KCkpLnRvTWF0Y2goJ1JlcXVlc3QgZmFpbGVkJyk7XG4gIH0pO1xuPC9maWxlPlxuPC9leGFtcGxlPlxuICAgICAqL1xuICAgIGZ1bmN0aW9uICRodHRwKHJlcXVlc3RDb25maWcpIHtcblxuICAgICAgaWYgKCFhbmd1bGFyLmlzT2JqZWN0KHJlcXVlc3RDb25maWcpKSB7XG4gICAgICAgIHRocm93IG1pbkVycignJGh0dHAnKSgnYmFkcmVxJywgJ0h0dHAgcmVxdWVzdCBjb25maWd1cmF0aW9uIG11c3QgYmUgYW4gb2JqZWN0LiAgUmVjZWl2ZWQ6IHswfScsIHJlcXVlc3RDb25maWcpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29uZmlnID0gZXh0ZW5kKHtcbiAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgdHJhbnNmb3JtUmVxdWVzdDogZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdCxcbiAgICAgICAgdHJhbnNmb3JtUmVzcG9uc2U6IGRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgICBwYXJhbVNlcmlhbGl6ZXI6IGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplclxuICAgICAgfSwgcmVxdWVzdENvbmZpZyk7XG5cbiAgICAgIGNvbmZpZy5oZWFkZXJzID0gbWVyZ2VIZWFkZXJzKHJlcXVlc3RDb25maWcpO1xuICAgICAgY29uZmlnLm1ldGhvZCA9IHVwcGVyY2FzZShjb25maWcubWV0aG9kKTtcbiAgICAgIGNvbmZpZy5wYXJhbVNlcmlhbGl6ZXIgPSBpc1N0cmluZyhjb25maWcucGFyYW1TZXJpYWxpemVyKSA/XG4gICAgICAgICRpbmplY3Rvci5nZXQoY29uZmlnLnBhcmFtU2VyaWFsaXplcikgOiBjb25maWcucGFyYW1TZXJpYWxpemVyO1xuXG4gICAgICB2YXIgc2VydmVyUmVxdWVzdCA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICB2YXIgaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuICAgICAgICB2YXIgcmVxRGF0YSA9IHRyYW5zZm9ybURhdGEoY29uZmlnLmRhdGEsIGhlYWRlcnNHZXR0ZXIoaGVhZGVycyksIHVuZGVmaW5lZCwgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3QpO1xuXG4gICAgICAgIC8vIHN0cmlwIGNvbnRlbnQtdHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICBpZiAoaXNVbmRlZmluZWQocmVxRGF0YSkpIHtcbiAgICAgICAgICBmb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uKHZhbHVlLCBoZWFkZXIpIHtcbiAgICAgICAgICAgIGlmIChsb3dlcmNhc2UoaGVhZGVyKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgaGVhZGVyc1toZWFkZXJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpICYmICFpc1VuZGVmaW5lZChkZWZhdWx0cy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICAgICAgY29uZmlnLndpdGhDcmVkZW50aWFscyA9IGRlZmF1bHRzLndpdGhDcmVkZW50aWFscztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNlbmQgcmVxdWVzdFxuICAgICAgICByZXR1cm4gc2VuZFJlcShjb25maWcsIHJlcURhdGEpLnRoZW4odHJhbnNmb3JtUmVzcG9uc2UsIHRyYW5zZm9ybVJlc3BvbnNlKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBjaGFpbiA9IFtzZXJ2ZXJSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICAgICAgdmFyIHByb21pc2UgPSAkcS53aGVuKGNvbmZpZyk7XG5cbiAgICAgIC8vIGFwcGx5IGludGVyY2VwdG9yc1xuICAgICAgZm9yRWFjaChyZXZlcnNlZEludGVyY2VwdG9ycywgZnVuY3Rpb24oaW50ZXJjZXB0b3IpIHtcbiAgICAgICAgaWYgKGludGVyY2VwdG9yLnJlcXVlc3QgfHwgaW50ZXJjZXB0b3IucmVxdWVzdEVycm9yKSB7XG4gICAgICAgICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5yZXF1ZXN0LCBpbnRlcmNlcHRvci5yZXF1ZXN0RXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcmNlcHRvci5yZXNwb25zZSB8fCBpbnRlcmNlcHRvci5yZXNwb25zZUVycm9yKSB7XG4gICAgICAgICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5yZXNwb25zZSwgaW50ZXJjZXB0b3IucmVzcG9uc2VFcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgICAgIHZhciB0aGVuRm4gPSBjaGFpbi5zaGlmdCgpO1xuICAgICAgICB2YXIgcmVqZWN0Rm4gPSBjaGFpbi5zaGlmdCgpO1xuXG4gICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4odGhlbkZuLCByZWplY3RGbik7XG4gICAgICB9XG5cbiAgICAgIHByb21pc2Uuc3VjY2VzcyA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgIGFzc2VydEFyZ0ZuKGZuLCAnZm4nKTtcblxuICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICBmbihyZXNwb25zZS5kYXRhLCByZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLmhlYWRlcnMsIGNvbmZpZyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgIH07XG5cbiAgICAgIHByb21pc2UuZXJyb3IgPSBmdW5jdGlvbihmbikge1xuICAgICAgICBhc3NlcnRBcmdGbihmbiwgJ2ZuJyk7XG5cbiAgICAgICAgcHJvbWlzZS50aGVuKG51bGwsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgZm4ocmVzcG9uc2UuZGF0YSwgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS5oZWFkZXJzLCBjb25maWcpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcblxuICAgICAgZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICAgICAgLy8gbWFrZSBhIGNvcHkgc2luY2UgdGhlIHJlc3BvbnNlIG11c3QgYmUgY2FjaGVhYmxlXG4gICAgICAgIHZhciByZXNwID0gZXh0ZW5kKHt9LCByZXNwb25zZSk7XG4gICAgICAgIGlmICghcmVzcG9uc2UuZGF0YSkge1xuICAgICAgICAgIHJlc3AuZGF0YSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzcC5kYXRhID0gdHJhbnNmb3JtRGF0YShyZXNwb25zZS5kYXRhLCByZXNwb25zZS5oZWFkZXJzLCByZXNwb25zZS5zdGF0dXMsIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChpc1N1Y2Nlc3MocmVzcG9uc2Uuc3RhdHVzKSlcbiAgICAgICAgICA/IHJlc3BcbiAgICAgICAgICA6ICRxLnJlamVjdChyZXNwKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZXhlY3V0ZUhlYWRlckZucyhoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgICAgdmFyIGhlYWRlckNvbnRlbnQsIHByb2Nlc3NlZEhlYWRlcnMgPSB7fTtcblxuICAgICAgICBmb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uKGhlYWRlckZuLCBoZWFkZXIpIHtcbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihoZWFkZXJGbikpIHtcbiAgICAgICAgICAgIGhlYWRlckNvbnRlbnQgPSBoZWFkZXJGbihjb25maWcpO1xuICAgICAgICAgICAgaWYgKGhlYWRlckNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBwcm9jZXNzZWRIZWFkZXJzW2hlYWRlcl0gPSBoZWFkZXJDb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9jZXNzZWRIZWFkZXJzW2hlYWRlcl0gPSBoZWFkZXJGbjtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwcm9jZXNzZWRIZWFkZXJzO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBtZXJnZUhlYWRlcnMoY29uZmlnKSB7XG4gICAgICAgIHZhciBkZWZIZWFkZXJzID0gZGVmYXVsdHMuaGVhZGVycyxcbiAgICAgICAgICAgIHJlcUhlYWRlcnMgPSBleHRlbmQoe30sIGNvbmZpZy5oZWFkZXJzKSxcbiAgICAgICAgICAgIGRlZkhlYWRlck5hbWUsIGxvd2VyY2FzZURlZkhlYWRlck5hbWUsIHJlcUhlYWRlck5hbWU7XG5cbiAgICAgICAgZGVmSGVhZGVycyA9IGV4dGVuZCh7fSwgZGVmSGVhZGVycy5jb21tb24sIGRlZkhlYWRlcnNbbG93ZXJjYXNlKGNvbmZpZy5tZXRob2QpXSk7XG5cbiAgICAgICAgLy8gdXNpbmcgZm9yLWluIGluc3RlYWQgb2YgZm9yRWFjaCB0byBhdm9pZCB1bmVjZXNzYXJ5IGl0ZXJhdGlvbiBhZnRlciBoZWFkZXIgaGFzIGJlZW4gZm91bmRcbiAgICAgICAgZGVmYXVsdEhlYWRlcnNJdGVyYXRpb246XG4gICAgICAgIGZvciAoZGVmSGVhZGVyTmFtZSBpbiBkZWZIZWFkZXJzKSB7XG4gICAgICAgICAgbG93ZXJjYXNlRGVmSGVhZGVyTmFtZSA9IGxvd2VyY2FzZShkZWZIZWFkZXJOYW1lKTtcblxuICAgICAgICAgIGZvciAocmVxSGVhZGVyTmFtZSBpbiByZXFIZWFkZXJzKSB7XG4gICAgICAgICAgICBpZiAobG93ZXJjYXNlKHJlcUhlYWRlck5hbWUpID09PSBsb3dlcmNhc2VEZWZIZWFkZXJOYW1lKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIGRlZmF1bHRIZWFkZXJzSXRlcmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlcUhlYWRlcnNbZGVmSGVhZGVyTmFtZV0gPSBkZWZIZWFkZXJzW2RlZkhlYWRlck5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXhlY3V0ZSBpZiBoZWFkZXIgdmFsdWUgaXMgYSBmdW5jdGlvbiBmb3IgbWVyZ2VkIGhlYWRlcnNcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGVIZWFkZXJGbnMocmVxSGVhZGVycywgc2hhbGxvd0NvcHkoY29uZmlnKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJGh0dHAucGVuZGluZ1JlcXVlc3RzID0gW107XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGh0dHAjZ2V0XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgR0VUYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI2RlbGV0ZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYERFTEVURWAgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0XG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNoZWFkXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgSEVBRGAgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0XG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNqc29ucFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYEpTT05QYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3QuXG4gICAgICogICAgICAgICAgICAgICAgICAgICBUaGUgbmFtZSBvZiB0aGUgY2FsbGJhY2sgc2hvdWxkIGJlIHRoZSBzdHJpbmcgYEpTT05fQ0FMTEJBQ0tgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICovXG4gICAgY3JlYXRlU2hvcnRNZXRob2RzKCdnZXQnLCAnZGVsZXRlJywgJ2hlYWQnLCAnanNvbnAnKTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNwb3N0XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUE9TVGAgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0XG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFJlcXVlc3QgY29udGVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGh0dHAjcHV0XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUFVUYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgUmVxdWVzdCBjb250ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cblxuICAgICAvKipcbiAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgKiBAbmFtZSAkaHR0cCNwYXRjaFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYFBBVENIYCByZXF1ZXN0LlxuICAgICAgKlxuICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdFxuICAgICAgKiBAcGFyYW0geyp9IGRhdGEgUmVxdWVzdCBjb250ZW50XG4gICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAgKi9cbiAgICBjcmVhdGVTaG9ydE1ldGhvZHNXaXRoRGF0YSgncG9zdCcsICdwdXQnLCAncGF0Y2gnKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAgICAqIEBuYW1lICRodHRwI2RlZmF1bHRzXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBSdW50aW1lIGVxdWl2YWxlbnQgb2YgdGhlIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzYCBwcm9wZXJ0eS4gQWxsb3dzIGNvbmZpZ3VyYXRpb24gb2ZcbiAgICAgICAgICogZGVmYXVsdCBoZWFkZXJzLCB3aXRoQ3JlZGVudGlhbHMgYXMgd2VsbCBhcyByZXF1ZXN0IGFuZCByZXNwb25zZSB0cmFuc2Zvcm1hdGlvbnMuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSBcIlNldHRpbmcgSFRUUCBIZWFkZXJzXCIgYW5kIFwiVHJhbnNmb3JtaW5nIFJlcXVlc3RzIGFuZCBSZXNwb25zZXNcIiBzZWN0aW9ucyBhYm92ZS5cbiAgICAgICAgICovXG4gICAgJGh0dHAuZGVmYXVsdHMgPSBkZWZhdWx0cztcblxuXG4gICAgcmV0dXJuICRodHRwO1xuXG5cbiAgICBmdW5jdGlvbiBjcmVhdGVTaG9ydE1ldGhvZHMobmFtZXMpIHtcbiAgICAgIGZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICRodHRwW25hbWVdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICAgICAgICByZXR1cm4gJGh0dHAoZXh0ZW5kKHt9LCBjb25maWcgfHwge30sIHtcbiAgICAgICAgICAgIG1ldGhvZDogbmFtZSxcbiAgICAgICAgICAgIHVybDogdXJsXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjcmVhdGVTaG9ydE1ldGhvZHNXaXRoRGF0YShuYW1lKSB7XG4gICAgICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAkaHR0cFtuYW1lXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICAgICAgcmV0dXJuICRodHRwKGV4dGVuZCh7fSwgY29uZmlnIHx8IHt9LCB7XG4gICAgICAgICAgICBtZXRob2Q6IG5hbWUsXG4gICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIE1ha2VzIHRoZSByZXF1ZXN0LlxuICAgICAqXG4gICAgICogISEhIEFDQ0VTU0VTIENMT1NVUkUgVkFSUzpcbiAgICAgKiAkaHR0cEJhY2tlbmQsIGRlZmF1bHRzLCAkbG9nLCAkcm9vdFNjb3BlLCBkZWZhdWx0Q2FjaGUsICRodHRwLnBlbmRpbmdSZXF1ZXN0c1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNlbmRSZXEoY29uZmlnLCByZXFEYXRhKSB7XG4gICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpLFxuICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlLFxuICAgICAgICAgIGNhY2hlLFxuICAgICAgICAgIGNhY2hlZFJlc3AsXG4gICAgICAgICAgcmVxSGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzLFxuICAgICAgICAgIHVybCA9IGJ1aWxkVXJsKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbVNlcmlhbGl6ZXIoY29uZmlnLnBhcmFtcykpO1xuXG4gICAgICAkaHR0cC5wZW5kaW5nUmVxdWVzdHMucHVzaChjb25maWcpO1xuICAgICAgcHJvbWlzZS50aGVuKHJlbW92ZVBlbmRpbmdSZXEsIHJlbW92ZVBlbmRpbmdSZXEpO1xuXG5cbiAgICAgIGlmICgoY29uZmlnLmNhY2hlIHx8IGRlZmF1bHRzLmNhY2hlKSAmJiBjb25maWcuY2FjaGUgIT09IGZhbHNlICYmXG4gICAgICAgICAgKGNvbmZpZy5tZXRob2QgPT09ICdHRVQnIHx8IGNvbmZpZy5tZXRob2QgPT09ICdKU09OUCcpKSB7XG4gICAgICAgIGNhY2hlID0gaXNPYmplY3QoY29uZmlnLmNhY2hlKSA/IGNvbmZpZy5jYWNoZVxuICAgICAgICAgICAgICA6IGlzT2JqZWN0KGRlZmF1bHRzLmNhY2hlKSA/IGRlZmF1bHRzLmNhY2hlXG4gICAgICAgICAgICAgIDogZGVmYXVsdENhY2hlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgY2FjaGVkUmVzcCA9IGNhY2hlLmdldCh1cmwpO1xuICAgICAgICBpZiAoaXNEZWZpbmVkKGNhY2hlZFJlc3ApKSB7XG4gICAgICAgICAgaWYgKGlzUHJvbWlzZUxpa2UoY2FjaGVkUmVzcCkpIHtcbiAgICAgICAgICAgIC8vIGNhY2hlZCByZXF1ZXN0IGhhcyBhbHJlYWR5IGJlZW4gc2VudCwgYnV0IHRoZXJlIGlzIG5vIHJlc3BvbnNlIHlldFxuICAgICAgICAgICAgY2FjaGVkUmVzcC50aGVuKHJlc29sdmVQcm9taXNlV2l0aFJlc3VsdCwgcmVzb2x2ZVByb21pc2VXaXRoUmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2VydmluZyBmcm9tIGNhY2hlXG4gICAgICAgICAgICBpZiAoaXNBcnJheShjYWNoZWRSZXNwKSkge1xuICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZShjYWNoZWRSZXNwWzFdLCBjYWNoZWRSZXNwWzBdLCBzaGFsbG93Q29weShjYWNoZWRSZXNwWzJdKSwgY2FjaGVkUmVzcFszXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZShjYWNoZWRSZXNwLCAyMDAsIHt9LCAnT0snKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcHV0IHRoZSBwcm9taXNlIGZvciB0aGUgbm9uLXRyYW5zZm9ybWVkIHJlc3BvbnNlIGludG8gY2FjaGUgYXMgYSBwbGFjZWhvbGRlclxuICAgICAgICAgIGNhY2hlLnB1dCh1cmwsIHByb21pc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgLy8gaWYgd2Ugd29uJ3QgaGF2ZSB0aGUgcmVzcG9uc2UgaW4gY2FjaGUsIHNldCB0aGUgeHNyZiBoZWFkZXJzIGFuZFxuICAgICAgLy8gc2VuZCB0aGUgcmVxdWVzdCB0byB0aGUgYmFja2VuZFxuICAgICAgaWYgKGlzVW5kZWZpbmVkKGNhY2hlZFJlc3ApKSB7XG4gICAgICAgIHZhciB4c3JmVmFsdWUgPSB1cmxJc1NhbWVPcmlnaW4oY29uZmlnLnVybClcbiAgICAgICAgICAgID8gJCRjb29raWVSZWFkZXIoKVtjb25maWcueHNyZkNvb2tpZU5hbWUgfHwgZGVmYXVsdHMueHNyZkNvb2tpZU5hbWVdXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICAgIHJlcUhlYWRlcnNbKGNvbmZpZy54c3JmSGVhZGVyTmFtZSB8fCBkZWZhdWx0cy54c3JmSGVhZGVyTmFtZSldID0geHNyZlZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgJGh0dHBCYWNrZW5kKGNvbmZpZy5tZXRob2QsIHVybCwgcmVxRGF0YSwgZG9uZSwgcmVxSGVhZGVycywgY29uZmlnLnRpbWVvdXQsXG4gICAgICAgICAgICBjb25maWcud2l0aENyZWRlbnRpYWxzLCBjb25maWcucmVzcG9uc2VUeXBlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBDYWxsYmFjayByZWdpc3RlcmVkIHRvICRodHRwQmFja2VuZCgpOlxuICAgICAgICogIC0gY2FjaGVzIHRoZSByZXNwb25zZSBpZiBkZXNpcmVkXG4gICAgICAgKiAgLSByZXNvbHZlcyB0aGUgcmF3ICRodHRwIHByb21pc2VcbiAgICAgICAqICAtIGNhbGxzICRhcHBseVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBkb25lKHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcsIHN0YXR1c1RleHQpIHtcbiAgICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgICAgaWYgKGlzU3VjY2VzcyhzdGF0dXMpKSB7XG4gICAgICAgICAgICBjYWNoZS5wdXQodXJsLCBbc3RhdHVzLCByZXNwb25zZSwgcGFyc2VIZWFkZXJzKGhlYWRlcnNTdHJpbmcpLCBzdGF0dXNUZXh0XSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBwcm9taXNlIGZyb20gdGhlIGNhY2hlXG4gICAgICAgICAgICBjYWNoZS5yZW1vdmUodXJsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZXNvbHZlSHR0cFByb21pc2UoKSB7XG4gICAgICAgICAgcmVzb2x2ZVByb21pc2UocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXNlQXBwbHlBc3luYykge1xuICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5QXN5bmMocmVzb2x2ZUh0dHBQcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlSHR0cFByb21pc2UoKTtcbiAgICAgICAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSkgJHJvb3RTY29wZS4kYXBwbHkoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogUmVzb2x2ZXMgdGhlIHJhdyAkaHR0cCBwcm9taXNlLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlUHJvbWlzZShyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBzdGF0dXNUZXh0KSB7XG4gICAgICAgIC8vIG5vcm1hbGl6ZSBpbnRlcm5hbCBzdGF0dXNlcyB0byAwXG4gICAgICAgIHN0YXR1cyA9IE1hdGgubWF4KHN0YXR1cywgMCk7XG5cbiAgICAgICAgKGlzU3VjY2VzcyhzdGF0dXMpID8gZGVmZXJyZWQucmVzb2x2ZSA6IGRlZmVycmVkLnJlamVjdCkoe1xuICAgICAgICAgIGRhdGE6IHJlc3BvbnNlLFxuICAgICAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNHZXR0ZXIoaGVhZGVycyksXG4gICAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgICAgc3RhdHVzVGV4dDogc3RhdHVzVGV4dFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVByb21pc2VXaXRoUmVzdWx0KHJlc3VsdCkge1xuICAgICAgICByZXNvbHZlUHJvbWlzZShyZXN1bHQuZGF0YSwgcmVzdWx0LnN0YXR1cywgc2hhbGxvd0NvcHkocmVzdWx0LmhlYWRlcnMoKSksIHJlc3VsdC5zdGF0dXNUZXh0KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVtb3ZlUGVuZGluZ1JlcSgpIHtcbiAgICAgICAgdmFyIGlkeCA9ICRodHRwLnBlbmRpbmdSZXF1ZXN0cy5pbmRleE9mKGNvbmZpZyk7XG4gICAgICAgIGlmIChpZHggIT09IC0xKSAkaHR0cC5wZW5kaW5nUmVxdWVzdHMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBidWlsZFVybCh1cmwsIHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICAgIGlmIChzZXJpYWxpemVkUGFyYW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdXJsICs9ICgodXJsLmluZGV4T2YoJz8nKSA9PSAtMSkgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgICAgIH1cbiAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuICB9XTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlWGhyKCkge1xuICAgIHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRodHRwQmFja2VuZFxuICogQHJlcXVpcmVzICR3aW5kb3dcbiAqIEByZXF1aXJlcyAkZG9jdW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhUVFAgYmFja2VuZCB1c2VkIGJ5IHRoZSB7QGxpbmsgbmcuJGh0dHAgc2VydmljZX0gdGhhdCBkZWxlZ2F0ZXMgdG9cbiAqIFhNTEh0dHBSZXF1ZXN0IG9iamVjdCBvciBKU09OUCBhbmQgZGVhbHMgd2l0aCBicm93c2VyIGluY29tcGF0aWJpbGl0aWVzLlxuICpcbiAqIFlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byB1c2UgdGhpcyBzZXJ2aWNlIGRpcmVjdGx5LCBpbnN0ZWFkIHVzZSB0aGUgaGlnaGVyLWxldmVsIGFic3RyYWN0aW9uczpcbiAqIHtAbGluayBuZy4kaHR0cCAkaHR0cH0gb3Ige0BsaW5rIG5nUmVzb3VyY2UuJHJlc291cmNlICRyZXNvdXJjZX0uXG4gKlxuICogRHVyaW5nIHRlc3RpbmcgdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBzd2FwcGVkIHdpdGgge0BsaW5rIG5nTW9jay4kaHR0cEJhY2tlbmQgbW9ja1xuICogJGh0dHBCYWNrZW5kfSB3aGljaCBjYW4gYmUgdHJhaW5lZCB3aXRoIHJlc3BvbnNlcy5cbiAqL1xuZnVuY3Rpb24gJEh0dHBCYWNrZW5kUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJGJyb3dzZXInLCAnJHdpbmRvdycsICckZG9jdW1lbnQnLCBmdW5jdGlvbigkYnJvd3NlciwgJHdpbmRvdywgJGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIGNyZWF0ZUh0dHBCYWNrZW5kKCRicm93c2VyLCBjcmVhdGVYaHIsICRicm93c2VyLmRlZmVyLCAkd2luZG93LmFuZ3VsYXIuY2FsbGJhY2tzLCAkZG9jdW1lbnRbMF0pO1xuICB9XTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSHR0cEJhY2tlbmQoJGJyb3dzZXIsIGNyZWF0ZVhociwgJGJyb3dzZXJEZWZlciwgY2FsbGJhY2tzLCByYXdEb2N1bWVudCkge1xuICAvLyBUT0RPKHZvanRhKTogZml4IHRoZSBzaWduYXR1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uKG1ldGhvZCwgdXJsLCBwb3N0LCBjYWxsYmFjaywgaGVhZGVycywgdGltZW91dCwgd2l0aENyZWRlbnRpYWxzLCByZXNwb25zZVR5cGUpIHtcbiAgICAkYnJvd3Nlci4kJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50KCk7XG4gICAgdXJsID0gdXJsIHx8ICRicm93c2VyLnVybCgpO1xuXG4gICAgaWYgKGxvd2VyY2FzZShtZXRob2QpID09ICdqc29ucCcpIHtcbiAgICAgIHZhciBjYWxsYmFja0lkID0gJ18nICsgKGNhbGxiYWNrcy5jb3VudGVyKyspLnRvU3RyaW5nKDM2KTtcbiAgICAgIGNhbGxiYWNrc1tjYWxsYmFja0lkXSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgY2FsbGJhY2tzW2NhbGxiYWNrSWRdLmRhdGEgPSBkYXRhO1xuICAgICAgICBjYWxsYmFja3NbY2FsbGJhY2tJZF0uY2FsbGVkID0gdHJ1ZTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBqc29ucERvbmUgPSBqc29ucFJlcSh1cmwucmVwbGFjZSgnSlNPTl9DQUxMQkFDSycsICdhbmd1bGFyLmNhbGxiYWNrcy4nICsgY2FsbGJhY2tJZCksXG4gICAgICAgICAgY2FsbGJhY2tJZCwgZnVuY3Rpb24oc3RhdHVzLCB0ZXh0KSB7XG4gICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgc3RhdHVzLCBjYWxsYmFja3NbY2FsbGJhY2tJZF0uZGF0YSwgXCJcIiwgdGV4dCk7XG4gICAgICAgIGNhbGxiYWNrc1tjYWxsYmFja0lkXSA9IG5vb3A7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICB2YXIgeGhyID0gY3JlYXRlWGhyKCk7XG5cbiAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcbiAgICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gcmVxdWVzdExvYWRlZCgpIHtcbiAgICAgICAgdmFyIHN0YXR1c1RleHQgPSB4aHIuc3RhdHVzVGV4dCB8fCAnJztcblxuICAgICAgICAvLyByZXNwb25zZVRleHQgaXMgdGhlIG9sZC1zY2hvb2wgd2F5IG9mIHJldHJpZXZpbmcgcmVzcG9uc2UgKHN1cHBvcnRlZCBieSBJRTggJiA5KVxuICAgICAgICAvLyByZXNwb25zZS9yZXNwb25zZVR5cGUgcHJvcGVydGllcyB3ZXJlIGludHJvZHVjZWQgaW4gWEhSIExldmVsMiBzcGVjIChzdXBwb3J0ZWQgYnkgSUUxMClcbiAgICAgICAgdmFyIHJlc3BvbnNlID0gKCdyZXNwb25zZScgaW4geGhyKSA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHQ7XG5cbiAgICAgICAgLy8gbm9ybWFsaXplIElFOSBidWcgKGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzE0NTApXG4gICAgICAgIHZhciBzdGF0dXMgPSB4aHIuc3RhdHVzID09PSAxMjIzID8gMjA0IDogeGhyLnN0YXR1cztcblxuICAgICAgICAvLyBmaXggc3RhdHVzIGNvZGUgd2hlbiBpdCBpcyAwICgwIHN0YXR1cyBpcyB1bmRvY3VtZW50ZWQpLlxuICAgICAgICAvLyBPY2N1cnMgd2hlbiBhY2Nlc3NpbmcgZmlsZSByZXNvdXJjZXMgb3Igb24gQW5kcm9pZCA0LjEgc3RvY2sgYnJvd3NlclxuICAgICAgICAvLyB3aGlsZSByZXRyaWV2aW5nIGZpbGVzIGZyb20gYXBwbGljYXRpb24gY2FjaGUuXG4gICAgICAgIGlmIChzdGF0dXMgPT09IDApIHtcbiAgICAgICAgICBzdGF0dXMgPSByZXNwb25zZSA/IDIwMCA6IHVybFJlc29sdmUodXJsKS5wcm90b2NvbCA9PSAnZmlsZScgPyA0MDQgOiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29tcGxldGVSZXF1ZXN0KGNhbGxiYWNrLFxuICAgICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCksXG4gICAgICAgICAgICBzdGF0dXNUZXh0KTtcbiAgICAgIH07XG5cbiAgICAgIHZhciByZXF1ZXN0RXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVGhlIHJlc3BvbnNlIGlzIGFsd2F5cyBlbXB0eVxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly94aHIuc3BlYy53aGF0d2cub3JnLyNyZXF1ZXN0LWVycm9yLXN0ZXBzIGFuZCBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1uZXR3b3JrLWVycm9yXG4gICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgLTEsIG51bGwsIG51bGwsICcnKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vbmVycm9yID0gcmVxdWVzdEVycm9yO1xuICAgICAgeGhyLm9uYWJvcnQgPSByZXF1ZXN0RXJyb3I7XG5cbiAgICAgIGlmICh3aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXNwb25zZVR5cGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gV2ViS2l0IGFkZGVkIHN1cHBvcnQgZm9yIHRoZSBqc29uIHJlc3BvbnNlVHlwZSB2YWx1ZSBvbiAwOS8wMy8yMDEzXG4gICAgICAgICAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTczNjQ4LiBWZXJzaW9ucyBvZiBTYWZhcmkgcHJpb3IgdG8gNyBhcmVcbiAgICAgICAgICAvLyBrbm93biB0byB0aHJvdyB3aGVuIHNldHRpbmcgdGhlIHZhbHVlIFwianNvblwiIGFzIHRoZSByZXNwb25zZSB0eXBlLiBPdGhlciBvbGRlclxuICAgICAgICAgIC8vIGJyb3dzZXJzIGltcGxlbWVudGluZyB0aGUgcmVzcG9uc2VUeXBlXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBUaGUganNvbiByZXNwb25zZSB0eXBlIGNhbiBiZSBpZ25vcmVkIGlmIG5vdCBzdXBwb3J0ZWQsIGJlY2F1c2UgSlNPTiBwYXlsb2FkcyBhcmVcbiAgICAgICAgICAvLyBwYXJzZWQgb24gdGhlIGNsaWVudC1zaWRlIHJlZ2FyZGxlc3MuXG4gICAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB4aHIuc2VuZChwb3N0KTtcbiAgICB9XG5cbiAgICBpZiAodGltZW91dCA+IDApIHtcbiAgICAgIHZhciB0aW1lb3V0SWQgPSAkYnJvd3NlckRlZmVyKHRpbWVvdXRSZXF1ZXN0LCB0aW1lb3V0KTtcbiAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZUxpa2UodGltZW91dCkpIHtcbiAgICAgIHRpbWVvdXQudGhlbih0aW1lb3V0UmVxdWVzdCk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiB0aW1lb3V0UmVxdWVzdCgpIHtcbiAgICAgIGpzb25wRG9uZSAmJiBqc29ucERvbmUoKTtcbiAgICAgIHhociAmJiB4aHIuYWJvcnQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssIHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcsIHN0YXR1c1RleHQpIHtcbiAgICAgIC8vIGNhbmNlbCB0aW1lb3V0IGFuZCBzdWJzZXF1ZW50IHRpbWVvdXQgcHJvbWlzZSByZXNvbHV0aW9uXG4gICAgICBpZiAodGltZW91dElkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgJGJyb3dzZXJEZWZlci5jYW5jZWwodGltZW91dElkKTtcbiAgICAgIH1cbiAgICAgIGpzb25wRG9uZSA9IHhociA9IG51bGw7XG5cbiAgICAgIGNhbGxiYWNrKHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcsIHN0YXR1c1RleHQpO1xuICAgICAgJGJyb3dzZXIuJCRjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdChub29wKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24ganNvbnBSZXEodXJsLCBjYWxsYmFja0lkLCBkb25lKSB7XG4gICAgLy8gd2UgY2FuJ3QgdXNlIGpRdWVyeS9qcUxpdGUgaGVyZSBiZWNhdXNlIGpRdWVyeSBkb2VzIGNyYXp5IHN0dWZmIHdpdGggc2NyaXB0IGVsZW1lbnRzLCBlLmcuOlxuICAgIC8vIC0gZmV0Y2hlcyBsb2NhbCBzY3JpcHRzIHZpYSBYSFIgYW5kIGV2YWxzIHRoZW1cbiAgICAvLyAtIGFkZHMgYW5kIGltbWVkaWF0ZWx5IHJlbW92ZXMgc2NyaXB0IGVsZW1lbnRzIGZyb20gdGhlIGRvY3VtZW50XG4gICAgdmFyIHNjcmlwdCA9IHJhd0RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLCBjYWxsYmFjayA9IG51bGw7XG4gICAgc2NyaXB0LnR5cGUgPSBcInRleHQvamF2YXNjcmlwdFwiO1xuICAgIHNjcmlwdC5zcmMgPSB1cmw7XG4gICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcblxuICAgIGNhbGxiYWNrID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbihzY3JpcHQsIFwibG9hZFwiLCBjYWxsYmFjayk7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyRm4oc2NyaXB0LCBcImVycm9yXCIsIGNhbGxiYWNrKTtcbiAgICAgIHJhd0RvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICB2YXIgc3RhdHVzID0gLTE7XG4gICAgICB2YXIgdGV4dCA9IFwidW5rbm93blwiO1xuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IFwibG9hZFwiICYmICFjYWxsYmFja3NbY2FsbGJhY2tJZF0uY2FsbGVkKSB7XG4gICAgICAgICAgZXZlbnQgPSB7IHR5cGU6IFwiZXJyb3JcIiB9O1xuICAgICAgICB9XG4gICAgICAgIHRleHQgPSBldmVudC50eXBlO1xuICAgICAgICBzdGF0dXMgPSBldmVudC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIGRvbmUoc3RhdHVzLCB0ZXh0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgYWRkRXZlbnRMaXN0ZW5lckZuKHNjcmlwdCwgXCJsb2FkXCIsIGNhbGxiYWNrKTtcbiAgICBhZGRFdmVudExpc3RlbmVyRm4oc2NyaXB0LCBcImVycm9yXCIsIGNhbGxiYWNrKTtcbiAgICByYXdEb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgcmV0dXJuIGNhbGxiYWNrO1xuICB9XG59XG5cbnZhciAkaW50ZXJwb2xhdGVNaW5FcnIgPSBhbmd1bGFyLiRpbnRlcnBvbGF0ZU1pbkVyciA9IG1pbkVycignJGludGVycG9sYXRlJyk7XG4kaW50ZXJwb2xhdGVNaW5FcnIudGhyb3dOb2NvbmNhdCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgdGhyb3cgJGludGVycG9sYXRlTWluRXJyKCdub2NvbmNhdCcsXG4gICAgICBcIkVycm9yIHdoaWxlIGludGVycG9sYXRpbmc6IHswfVxcblN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGRpc2FsbG93cyBcIiArXG4gICAgICBcImludGVycG9sYXRpb25zIHRoYXQgY29uY2F0ZW5hdGUgbXVsdGlwbGUgZXhwcmVzc2lvbnMgd2hlbiBhIHRydXN0ZWQgdmFsdWUgaXMgXCIgK1xuICAgICAgXCJyZXF1aXJlZC4gIFNlZSBodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9uZy4kc2NlXCIsIHRleHQpO1xufTtcblxuJGludGVycG9sYXRlTWluRXJyLmludGVyciA9IGZ1bmN0aW9uKHRleHQsIGVycikge1xuICByZXR1cm4gJGludGVycG9sYXRlTWluRXJyKCdpbnRlcnInLCBcIkNhbid0IGludGVycG9sYXRlOiB7MH1cXG57MX1cIiwgdGV4dCwgZXJyLnRvU3RyaW5nKCkpO1xufTtcblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRpbnRlcnBvbGF0ZVByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVXNlZCBmb3IgY29uZmlndXJpbmcgdGhlIGludGVycG9sYXRpb24gbWFya3VwLiBEZWZhdWx0cyB0byBge3tgIGFuZCBgfX1gLlxuICpcbiAqIEBleGFtcGxlXG48ZXhhbXBsZSBtb2R1bGU9XCJjdXN0b21JbnRlcnBvbGF0aW9uQXBwXCI+XG48ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuPHNjcmlwdD5cbiAgdmFyIGN1c3RvbUludGVycG9sYXRpb25BcHAgPSBhbmd1bGFyLm1vZHVsZSgnY3VzdG9tSW50ZXJwb2xhdGlvbkFwcCcsIFtdKTtcblxuICBjdXN0b21JbnRlcnBvbGF0aW9uQXBwLmNvbmZpZyhmdW5jdGlvbigkaW50ZXJwb2xhdGVQcm92aWRlcikge1xuICAgICRpbnRlcnBvbGF0ZVByb3ZpZGVyLnN0YXJ0U3ltYm9sKCcvLycpO1xuICAgICRpbnRlcnBvbGF0ZVByb3ZpZGVyLmVuZFN5bWJvbCgnLy8nKTtcbiAgfSk7XG5cblxuICBjdXN0b21JbnRlcnBvbGF0aW9uQXBwLmNvbnRyb2xsZXIoJ0RlbW9Db250cm9sbGVyJywgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmxhYmVsID0gXCJUaGlzIGJpbmRpbmcgaXMgYnJvdWdodCB5b3UgYnkgLy8gaW50ZXJwb2xhdGlvbiBzeW1ib2xzLlwiO1xuICB9KTtcbjwvc2NyaXB0PlxuPGRpdiBuZy1hcHA9XCJBcHBcIiBuZy1jb250cm9sbGVyPVwiRGVtb0NvbnRyb2xsZXIgYXMgZGVtb1wiPlxuICAgIC8vZGVtby5sYWJlbC8vXG48L2Rpdj5cbjwvZmlsZT5cbjxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgaXQoJ3Nob3VsZCBpbnRlcnBvbGF0ZSBiaW5kaW5nIHdpdGggY3VzdG9tIHN5bWJvbHMnLCBmdW5jdGlvbigpIHtcbiAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdkZW1vLmxhYmVsJykpLmdldFRleHQoKSkudG9CZSgnVGhpcyBiaW5kaW5nIGlzIGJyb3VnaHQgeW91IGJ5IC8vIGludGVycG9sYXRpb24gc3ltYm9scy4nKTtcbiAgfSk7XG48L2ZpbGU+XG48L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uICRJbnRlcnBvbGF0ZVByb3ZpZGVyKCkge1xuICB2YXIgc3RhcnRTeW1ib2wgPSAne3snO1xuICB2YXIgZW5kU3ltYm9sID0gJ319JztcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkaW50ZXJwb2xhdGVQcm92aWRlciNzdGFydFN5bWJvbFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3ltYm9sIHRvIGRlbm90ZSBzdGFydCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBge3tgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHZhbHVlIG5ldyB2YWx1ZSB0byBzZXQgdGhlIHN0YXJ0aW5nIHN5bWJvbCB0by5cbiAgICogQHJldHVybnMge3N0cmluZ3xzZWxmfSBSZXR1cm5zIHRoZSBzeW1ib2wgd2hlbiB1c2VkIGFzIGdldHRlciBhbmQgc2VsZiBpZiB1c2VkIGFzIHNldHRlci5cbiAgICovXG4gIHRoaXMuc3RhcnRTeW1ib2wgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgc3RhcnRTeW1ib2wgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3RhcnRTeW1ib2w7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRpbnRlcnBvbGF0ZVByb3ZpZGVyI2VuZFN5bWJvbFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3ltYm9sIHRvIGRlbm90ZSB0aGUgZW5kIG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB9fWAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdmFsdWUgbmV3IHZhbHVlIHRvIHNldCB0aGUgZW5kaW5nIHN5bWJvbCB0by5cbiAgICogQHJldHVybnMge3N0cmluZ3xzZWxmfSBSZXR1cm5zIHRoZSBzeW1ib2wgd2hlbiB1c2VkIGFzIGdldHRlciBhbmQgc2VsZiBpZiB1c2VkIGFzIHNldHRlci5cbiAgICovXG4gIHRoaXMuZW5kU3ltYm9sID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGVuZFN5bWJvbCA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlbmRTeW1ib2w7XG4gICAgfVxuICB9O1xuXG5cbiAgdGhpcy4kZ2V0ID0gWyckcGFyc2UnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHNjZScsIGZ1bmN0aW9uKCRwYXJzZSwgJGV4Y2VwdGlvbkhhbmRsZXIsICRzY2UpIHtcbiAgICB2YXIgc3RhcnRTeW1ib2xMZW5ndGggPSBzdGFydFN5bWJvbC5sZW5ndGgsXG4gICAgICAgIGVuZFN5bWJvbExlbmd0aCA9IGVuZFN5bWJvbC5sZW5ndGgsXG4gICAgICAgIGVzY2FwZWRTdGFydFJlZ2V4cCA9IG5ldyBSZWdFeHAoc3RhcnRTeW1ib2wucmVwbGFjZSgvLi9nLCBlc2NhcGUpLCAnZycpLFxuICAgICAgICBlc2NhcGVkRW5kUmVnZXhwID0gbmV3IFJlZ0V4cChlbmRTeW1ib2wucmVwbGFjZSgvLi9nLCBlc2NhcGUpLCAnZycpO1xuXG4gICAgZnVuY3Rpb24gZXNjYXBlKGNoKSB7XG4gICAgICByZXR1cm4gJ1xcXFxcXFxcXFxcXCcgKyBjaDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bmVzY2FwZVRleHQodGV4dCkge1xuICAgICAgcmV0dXJuIHRleHQucmVwbGFjZShlc2NhcGVkU3RhcnRSZWdleHAsIHN0YXJ0U3ltYm9sKS5cbiAgICAgICAgcmVwbGFjZShlc2NhcGVkRW5kUmVnZXhwLCBlbmRTeW1ib2wpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0cmluZ2lmeSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHsgLy8gbnVsbCB8fCB1bmRlZmluZWRcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICB2YWx1ZSA9ICcnICsgdmFsdWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdmFsdWUgPSB0b0pzb24odmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgKiBAbmFtZSAkaW50ZXJwb2xhdGVcbiAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAqXG4gICAgICogQHJlcXVpcmVzICRwYXJzZVxuICAgICAqIEByZXF1aXJlcyAkc2NlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIENvbXBpbGVzIGEgc3RyaW5nIHdpdGggbWFya3VwIGludG8gYW4gaW50ZXJwb2xhdGlvbiBmdW5jdGlvbi4gVGhpcyBzZXJ2aWNlIGlzIHVzZWQgYnkgdGhlXG4gICAgICogSFRNTCB7QGxpbmsgbmcuJGNvbXBpbGUgJGNvbXBpbGV9IHNlcnZpY2UgZm9yIGRhdGEgYmluZGluZy4gU2VlXG4gICAgICoge0BsaW5rIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyICRpbnRlcnBvbGF0ZVByb3ZpZGVyfSBmb3IgY29uZmlndXJpbmcgdGhlXG4gICAgICogaW50ZXJwb2xhdGlvbiBtYXJrdXAuXG4gICAgICpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICB2YXIgJGludGVycG9sYXRlID0gLi4uOyAvLyBpbmplY3RlZFxuICAgICAqICAgdmFyIGV4cCA9ICRpbnRlcnBvbGF0ZSgnSGVsbG8ge3tuYW1lIHwgdXBwZXJjYXNlfX0hJyk7XG4gICAgICogICBleHBlY3QoZXhwKHtuYW1lOidBbmd1bGFyJ30pLnRvRXF1YWwoJ0hlbGxvIEFOR1VMQVIhJyk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgJGludGVycG9sYXRlYCB0YWtlcyBhbiBvcHRpb25hbCBmb3VydGggYXJndW1lbnQsIGBhbGxPck5vdGhpbmdgLiBJZiBgYWxsT3JOb3RoaW5nYCBpc1xuICAgICAqIGB0cnVlYCwgdGhlIGludGVycG9sYXRpb24gZnVuY3Rpb24gd2lsbCByZXR1cm4gYHVuZGVmaW5lZGAgdW5sZXNzIGFsbCBlbWJlZGRlZCBleHByZXNzaW9uc1xuICAgICAqIGV2YWx1YXRlIHRvIGEgdmFsdWUgb3RoZXIgdGhhbiBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICB2YXIgJGludGVycG9sYXRlID0gLi4uOyAvLyBpbmplY3RlZFxuICAgICAqICAgdmFyIGNvbnRleHQgPSB7Z3JlZXRpbmc6ICdIZWxsbycsIG5hbWU6IHVuZGVmaW5lZCB9O1xuICAgICAqXG4gICAgICogICAvLyBkZWZhdWx0IFwiZm9yZ2l2aW5nXCIgbW9kZVxuICAgICAqICAgdmFyIGV4cCA9ICRpbnRlcnBvbGF0ZSgne3tncmVldGluZ319IHt7bmFtZX19IScpO1xuICAgICAqICAgZXhwZWN0KGV4cChjb250ZXh0KSkudG9FcXVhbCgnSGVsbG8gIScpO1xuICAgICAqXG4gICAgICogICAvLyBcImFsbE9yTm90aGluZ1wiIG1vZGVcbiAgICAgKiAgIGV4cCA9ICRpbnRlcnBvbGF0ZSgne3tncmVldGluZ319IHt7bmFtZX19IScsIGZhbHNlLCBudWxsLCB0cnVlKTtcbiAgICAgKiAgIGV4cGVjdChleHAoY29udGV4dCkpLnRvQmVVbmRlZmluZWQoKTtcbiAgICAgKiAgIGNvbnRleHQubmFtZSA9ICdBbmd1bGFyJztcbiAgICAgKiAgIGV4cGVjdChleHAoY29udGV4dCkpLnRvRXF1YWwoJ0hlbGxvIEFuZ3VsYXIhJyk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgYWxsT3JOb3RoaW5nYCBpcyB1c2VmdWwgZm9yIGludGVycG9sYXRpbmcgVVJMcy4gYG5nU3JjYCBhbmQgYG5nU3Jjc2V0YCB1c2UgdGhpcyBiZWhhdmlvci5cbiAgICAgKlxuICAgICAqICMjIyNFc2NhcGVkIEludGVycG9sYXRpb25cbiAgICAgKiAkaW50ZXJwb2xhdGUgcHJvdmlkZXMgYSBtZWNoYW5pc20gZm9yIGVzY2FwaW5nIGludGVycG9sYXRpb24gbWFya2Vycy4gU3RhcnQgYW5kIGVuZCBtYXJrZXJzXG4gICAgICogY2FuIGJlIGVzY2FwZWQgYnkgcHJlY2VkaW5nIGVhY2ggb2YgdGhlaXIgY2hhcmFjdGVycyB3aXRoIGEgUkVWRVJTRSBTT0xJRFVTIFUrMDA1QyAoYmFja3NsYXNoKS5cbiAgICAgKiBJdCB3aWxsIGJlIHJlbmRlcmVkIGFzIGEgcmVndWxhciBzdGFydC9lbmQgbWFya2VyLCBhbmQgd2lsbCBub3QgYmUgaW50ZXJwcmV0ZWQgYXMgYW4gZXhwcmVzc2lvblxuICAgICAqIG9yIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGlzIGVuYWJsZXMgd2ViLXNlcnZlcnMgdG8gcHJldmVudCBzY3JpcHQgaW5qZWN0aW9uIGF0dGFja3MgYW5kIGRlZmFjaW5nIGF0dGFja3MsIHRvIHNvbWVcbiAgICAgKiBkZWdyZWUsIHdoaWxlIGFsc28gZW5hYmxpbmcgY29kZSBleGFtcGxlcyB0byB3b3JrIHdpdGhvdXQgcmVseWluZyBvbiB0aGVcbiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTm9uQmluZGFibGUgbmdOb25CaW5kYWJsZX0gZGlyZWN0aXZlLlxuICAgICAqXG4gICAgICogKipGb3Igc2VjdXJpdHkgcHVycG9zZXMsIGl0IGlzIHN0cm9uZ2x5IGVuY291cmFnZWQgdGhhdCB3ZWIgc2VydmVycyBlc2NhcGUgdXNlci1zdXBwbGllZCBkYXRhLFxuICAgICAqIHJlcGxhY2luZyBhbmdsZSBicmFja2V0cyAoJmx0OywgJmd0Oykgd2l0aCAmYW1wO2x0OyBhbmQgJmFtcDtndDsgcmVzcGVjdGl2ZWx5LCBhbmQgcmVwbGFjaW5nIGFsbFxuICAgICAqIGludGVycG9sYXRpb24gc3RhcnQvZW5kIG1hcmtlcnMgd2l0aCB0aGVpciBlc2NhcGVkIGNvdW50ZXJwYXJ0cy4qKlxuICAgICAqXG4gICAgICogRXNjYXBlZCBpbnRlcnBvbGF0aW9uIG1hcmtlcnMgYXJlIG9ubHkgcmVwbGFjZWQgd2l0aCB0aGUgYWN0dWFsIGludGVycG9sYXRpb24gbWFya2VycyBpbiByZW5kZXJlZFxuICAgICAqIG91dHB1dCB3aGVuIHRoZSAkaW50ZXJwb2xhdGUgc2VydmljZSBwcm9jZXNzZXMgdGhlIHRleHQuIFNvLCBmb3IgSFRNTCBlbGVtZW50cyBpbnRlcnBvbGF0ZWRcbiAgICAgKiBieSB7QGxpbmsgbmcuJGNvbXBpbGUgJGNvbXBpbGV9LCBvciBvdGhlcndpc2UgaW50ZXJwb2xhdGVkIHdpdGggdGhlIGBtdXN0SGF2ZUV4cHJlc3Npb25gIHBhcmFtZXRlclxuICAgICAqIHNldCB0byBgdHJ1ZWAsIHRoZSBpbnRlcnBvbGF0ZWQgdGV4dCBtdXN0IGNvbnRhaW4gYW4gdW5lc2NhcGVkIGludGVycG9sYXRpb24gZXhwcmVzc2lvbi4gQXMgc3VjaCxcbiAgICAgKiB0aGlzIGlzIHR5cGljYWxseSB1c2VmdWwgb25seSB3aGVuIHVzZXItZGF0YSBpcyB1c2VkIGluIHJlbmRlcmluZyBhIHRlbXBsYXRlIGZyb20gdGhlIHNlcnZlciwgb3JcbiAgICAgKiB3aGVuIG90aGVyd2lzZSB1bnRydXN0ZWQgZGF0YSBpcyB1c2VkIGJ5IGEgZGlyZWN0aXZlLlxuICAgICAqXG4gICAgICogPGV4YW1wbGU+XG4gICAgICogIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICogICAgPGRpdiBuZy1pbml0PVwidXNlcm5hbWU9J0EgdXNlcidcIj5cbiAgICAgKiAgICAgIDxwIG5nLWluaXQ9XCJhcHB0aXRsZT0nRXNjYXBpbmcgZGVtbydcIj57e2FwcHRpdGxlfX06IFxce1xceyB1c2VybmFtZSA9IFwiZGVmYWNlZCB2YWx1ZVwiOyBcXH1cXH1cbiAgICAgKiAgICAgICAgPC9wPlxuICAgICAqICAgICAgPHA+PHN0cm9uZz57e3VzZXJuYW1lfX08L3N0cm9uZz4gYXR0ZW1wdHMgdG8gaW5qZWN0IGNvZGUgd2hpY2ggd2lsbCBkZWZhY2UgdGhlXG4gICAgICogICAgICAgIGFwcGxpY2F0aW9uLCBidXQgZmFpbHMgdG8gYWNjb21wbGlzaCB0aGVpciB0YXNrLCBiZWNhdXNlIHRoZSBzZXJ2ZXIgaGFzIGNvcnJlY3RseVxuICAgICAqICAgICAgICBlc2NhcGVkIHRoZSBpbnRlcnBvbGF0aW9uIHN0YXJ0L2VuZCBtYXJrZXJzIHdpdGggUkVWRVJTRSBTT0xJRFVTIFUrMDA1QyAoYmFja3NsYXNoKVxuICAgICAqICAgICAgICBjaGFyYWN0ZXJzLjwvcD5cbiAgICAgKiAgICAgIDxwPkluc3RlYWQsIHRoZSByZXN1bHQgb2YgdGhlIGF0dGVtcHRlZCBzY3JpcHQgaW5qZWN0aW9uIGlzIHZpc2libGUsIGFuZCBjYW4gYmUgcmVtb3ZlZFxuICAgICAqICAgICAgICBmcm9tIHRoZSBkYXRhYmFzZSBieSBhbiBhZG1pbmlzdHJhdG9yLjwvcD5cbiAgICAgKiAgICA8L2Rpdj5cbiAgICAgKiAgPC9maWxlPlxuICAgICAqIDwvZXhhbXBsZT5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHdpdGggbWFya3VwIHRvIGludGVycG9sYXRlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG11c3RIYXZlRXhwcmVzc2lvbiBpZiBzZXQgdG8gdHJ1ZSB0aGVuIHRoZSBpbnRlcnBvbGF0aW9uIHN0cmluZyBtdXN0IGhhdmVcbiAgICAgKiAgICBlbWJlZGRlZCBleHByZXNzaW9uIGluIG9yZGVyIHRvIHJldHVybiBhbiBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uLiBTdHJpbmdzIHdpdGggbm9cbiAgICAgKiAgICBlbWJlZGRlZCBleHByZXNzaW9uIHdpbGwgcmV0dXJuIG51bGwgZm9yIHRoZSBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gdHJ1c3RlZENvbnRleHQgd2hlbiBwcm92aWRlZCwgdGhlIHJldHVybmVkIGZ1bmN0aW9uIHBhc3NlcyB0aGUgaW50ZXJwb2xhdGVkXG4gICAgICogICAgcmVzdWx0IHRocm91Z2gge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZCAkc2NlLmdldFRydXN0ZWQoaW50ZXJwb2xhdGVkUmVzdWx0LFxuICAgICAqICAgIHRydXN0ZWRDb250ZXh0KX0gYmVmb3JlIHJldHVybmluZyBpdC4gIFJlZmVyIHRvIHRoZSB7QGxpbmsgbmcuJHNjZSAkc2NlfSBzZXJ2aWNlIHRoYXRcbiAgICAgKiAgICBwcm92aWRlcyBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBmb3IgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBhbGxPck5vdGhpbmcgaWYgYHRydWVgLCB0aGVuIHRoZSByZXR1cm5lZCBmdW5jdGlvbiByZXR1cm5zIHVuZGVmaW5lZFxuICAgICAqICAgIHVubGVzcyBhbGwgZW1iZWRkZWQgZXhwcmVzc2lvbnMgZXZhbHVhdGUgdG8gYSB2YWx1ZSBvdGhlciB0aGFuIGB1bmRlZmluZWRgLlxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0KX0gYW4gaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiB3aGljaCBpcyB1c2VkIHRvIGNvbXB1dGUgdGhlXG4gICAgICogICAgaW50ZXJwb2xhdGVkIHN0cmluZy4gVGhlIGZ1bmN0aW9uIGhhcyB0aGVzZSBwYXJhbWV0ZXJzOlxuICAgICAqXG4gICAgICogLSBgY29udGV4dGA6IGV2YWx1YXRpb24gY29udGV4dCBmb3IgYWxsIGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBpbnRlcnBvbGF0ZWQgdGV4dFxuICAgICAqL1xuICAgIGZ1bmN0aW9uICRpbnRlcnBvbGF0ZSh0ZXh0LCBtdXN0SGF2ZUV4cHJlc3Npb24sIHRydXN0ZWRDb250ZXh0LCBhbGxPck5vdGhpbmcpIHtcbiAgICAgIGFsbE9yTm90aGluZyA9ICEhYWxsT3JOb3RoaW5nO1xuICAgICAgdmFyIHN0YXJ0SW5kZXgsXG4gICAgICAgICAgZW5kSW5kZXgsXG4gICAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICAgIGV4cHJlc3Npb25zID0gW10sXG4gICAgICAgICAgcGFyc2VGbnMgPSBbXSxcbiAgICAgICAgICB0ZXh0TGVuZ3RoID0gdGV4dC5sZW5ndGgsXG4gICAgICAgICAgZXhwLFxuICAgICAgICAgIGNvbmNhdCA9IFtdLFxuICAgICAgICAgIGV4cHJlc3Npb25Qb3NpdGlvbnMgPSBbXTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgdGV4dExlbmd0aCkge1xuICAgICAgICBpZiAoKChzdGFydEluZGV4ID0gdGV4dC5pbmRleE9mKHN0YXJ0U3ltYm9sLCBpbmRleCkpICE9IC0xKSAmJlxuICAgICAgICAgICAgICgoZW5kSW5kZXggPSB0ZXh0LmluZGV4T2YoZW5kU3ltYm9sLCBzdGFydEluZGV4ICsgc3RhcnRTeW1ib2xMZW5ndGgpKSAhPSAtMSkpIHtcbiAgICAgICAgICBpZiAoaW5kZXggIT09IHN0YXJ0SW5kZXgpIHtcbiAgICAgICAgICAgIGNvbmNhdC5wdXNoKHVuZXNjYXBlVGV4dCh0ZXh0LnN1YnN0cmluZyhpbmRleCwgc3RhcnRJbmRleCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXhwID0gdGV4dC5zdWJzdHJpbmcoc3RhcnRJbmRleCArIHN0YXJ0U3ltYm9sTGVuZ3RoLCBlbmRJbmRleCk7XG4gICAgICAgICAgZXhwcmVzc2lvbnMucHVzaChleHApO1xuICAgICAgICAgIHBhcnNlRm5zLnB1c2goJHBhcnNlKGV4cCwgcGFyc2VTdHJpbmdpZnlJbnRlcmNlcHRvcikpO1xuICAgICAgICAgIGluZGV4ID0gZW5kSW5kZXggKyBlbmRTeW1ib2xMZW5ndGg7XG4gICAgICAgICAgZXhwcmVzc2lvblBvc2l0aW9ucy5wdXNoKGNvbmNhdC5sZW5ndGgpO1xuICAgICAgICAgIGNvbmNhdC5wdXNoKCcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB3ZSBkaWQgbm90IGZpbmQgYW4gaW50ZXJwb2xhdGlvbiwgc28gd2UgaGF2ZSB0byBhZGQgdGhlIHJlbWFpbmRlciB0byB0aGUgc2VwYXJhdG9ycyBhcnJheVxuICAgICAgICAgIGlmIChpbmRleCAhPT0gdGV4dExlbmd0aCkge1xuICAgICAgICAgICAgY29uY2F0LnB1c2godW5lc2NhcGVUZXh0KHRleHQuc3Vic3RyaW5nKGluZGV4KSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDb25jYXRlbmF0aW5nIGV4cHJlc3Npb25zIG1ha2VzIGl0IGhhcmQgdG8gcmVhc29uIGFib3V0IHdoZXRoZXIgc29tZSBjb21iaW5hdGlvbiBvZlxuICAgICAgLy8gY29uY2F0ZW5hdGVkIHZhbHVlcyBhcmUgdW5zYWZlIHRvIHVzZSBhbmQgY291bGQgZWFzaWx5IGxlYWQgdG8gWFNTLiAgQnkgcmVxdWlyaW5nIHRoYXQgYVxuICAgICAgLy8gc2luZ2xlIGV4cHJlc3Npb24gYmUgdXNlZCBmb3IgaWZyYW1lW3NyY10sIG9iamVjdFtzcmNdLCBldGMuLCB3ZSBlbnN1cmUgdGhhdCB0aGUgdmFsdWVcbiAgICAgIC8vIHRoYXQncyB1c2VkIGlzIGFzc2lnbmVkIG9yIGNvbnN0cnVjdGVkIGJ5IHNvbWUgSlMgY29kZSBzb21ld2hlcmUgdGhhdCBpcyBtb3JlIHRlc3RhYmxlIG9yXG4gICAgICAvLyBtYWtlIGl0IG9idmlvdXMgdGhhdCB5b3UgYm91bmQgdGhlIHZhbHVlIHRvIHNvbWUgdXNlciBjb250cm9sbGVkIHZhbHVlLiAgVGhpcyBoZWxwcyByZWR1Y2VcbiAgICAgIC8vIHRoZSBsb2FkIHdoZW4gYXVkaXRpbmcgZm9yIFhTUyBpc3N1ZXMuXG4gICAgICBpZiAodHJ1c3RlZENvbnRleHQgJiYgY29uY2F0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAkaW50ZXJwb2xhdGVNaW5FcnIudGhyb3dOb2NvbmNhdCh0ZXh0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFtdXN0SGF2ZUV4cHJlc3Npb24gfHwgZXhwcmVzc2lvbnMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBjb21wdXRlID0gZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gZXhwcmVzc2lvbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgaWYgKGFsbE9yTm90aGluZyAmJiBpc1VuZGVmaW5lZCh2YWx1ZXNbaV0pKSByZXR1cm47XG4gICAgICAgICAgICBjb25jYXRbZXhwcmVzc2lvblBvc2l0aW9uc1tpXV0gPSB2YWx1ZXNbaV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjb25jYXQuam9pbignJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldFZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1c3RlZENvbnRleHQgP1xuICAgICAgICAgICAgJHNjZS5nZXRUcnVzdGVkKHRydXN0ZWRDb250ZXh0LCB2YWx1ZSkgOlxuICAgICAgICAgICAgJHNjZS52YWx1ZU9mKHZhbHVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uIGludGVycG9sYXRpb25Gbihjb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICB2YXIgaWkgPSBleHByZXNzaW9ucy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gbmV3IEFycmF5KGlpKTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZm9yICg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzW2ldID0gcGFyc2VGbnNbaV0oY29udGV4dCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gY29tcHV0ZSh2YWx1ZXMpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKCRpbnRlcnBvbGF0ZU1pbkVyci5pbnRlcnIodGV4dCwgZXJyKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgLy8gYWxsIG9mIHRoZXNlIHByb3BlcnRpZXMgYXJlIHVuZG9jdW1lbnRlZCBmb3Igbm93XG4gICAgICAgICAgZXhwOiB0ZXh0LCAvL2p1c3QgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCByZWd1bGFyIHdhdGNoZXJzIGNyZWF0ZWQgdmlhICR3YXRjaFxuICAgICAgICAgIGV4cHJlc3Npb25zOiBleHByZXNzaW9ucyxcbiAgICAgICAgICAkJHdhdGNoRGVsZWdhdGU6IGZ1bmN0aW9uKHNjb3BlLCBsaXN0ZW5lcikge1xuICAgICAgICAgICAgdmFyIGxhc3RWYWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBzY29wZS4kd2F0Y2hHcm91cChwYXJzZUZucywgZnVuY3Rpb24gaW50ZXJwb2xhdGVGbldhdGNoZXIodmFsdWVzLCBvbGRWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgdmFyIGN1cnJWYWx1ZSA9IGNvbXB1dGUodmFsdWVzKTtcbiAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBjdXJyVmFsdWUsIHZhbHVlcyAhPT0gb2xkVmFsdWVzID8gbGFzdFZhbHVlIDogY3VyclZhbHVlLCBzY29wZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGFzdFZhbHVlID0gY3VyclZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcGFyc2VTdHJpbmdpZnlJbnRlcmNlcHRvcih2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhbHVlID0gZ2V0VmFsdWUodmFsdWUpO1xuICAgICAgICAgIHJldHVybiBhbGxPck5vdGhpbmcgJiYgIWlzRGVmaW5lZCh2YWx1ZSkgPyB2YWx1ZSA6IHN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKCRpbnRlcnBvbGF0ZU1pbkVyci5pbnRlcnIodGV4dCwgZXJyKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaW50ZXJwb2xhdGUjc3RhcnRTeW1ib2xcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTeW1ib2wgdG8gZGVub3RlIHRoZSBzdGFydCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBge3tgLlxuICAgICAqXG4gICAgICogVXNlIHtAbGluayBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciNzdGFydFN5bWJvbCBgJGludGVycG9sYXRlUHJvdmlkZXIuc3RhcnRTeW1ib2xgfSB0byBjaGFuZ2VcbiAgICAgKiB0aGUgc3ltYm9sLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ30gc3RhcnQgc3ltYm9sLlxuICAgICAqL1xuICAgICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHN0YXJ0U3ltYm9sO1xuICAgIH07XG5cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaW50ZXJwb2xhdGUjZW5kU3ltYm9sXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU3ltYm9sIHRvIGRlbm90ZSB0aGUgZW5kIG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB9fWAuXG4gICAgICpcbiAgICAgKiBVc2Uge0BsaW5rIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyI2VuZFN5bWJvbCBgJGludGVycG9sYXRlUHJvdmlkZXIuZW5kU3ltYm9sYH0gdG8gY2hhbmdlXG4gICAgICogdGhlIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IGVuZCBzeW1ib2wuXG4gICAgICovXG4gICAgJGludGVycG9sYXRlLmVuZFN5bWJvbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGVuZFN5bWJvbDtcbiAgICB9O1xuXG4gICAgcmV0dXJuICRpbnRlcnBvbGF0ZTtcbiAgfV07XG59XG5cbmZ1bmN0aW9uICRJbnRlcnZhbFByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJHdpbmRvdycsICckcScsICckJHEnLFxuICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICAgJHdpbmRvdywgICAkcSwgICAkJHEpIHtcbiAgICB2YXIgaW50ZXJ2YWxzID0ge307XG5cblxuICAgICAvKipcbiAgICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgICogQG5hbWUgJGludGVydmFsXG4gICAgICAqXG4gICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgKiBBbmd1bGFyJ3Mgd3JhcHBlciBmb3IgYHdpbmRvdy5zZXRJbnRlcnZhbGAuIFRoZSBgZm5gIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIGV2ZXJ5IGBkZWxheWBcbiAgICAgICogbWlsbGlzZWNvbmRzLlxuICAgICAgKlxuICAgICAgKiBUaGUgcmV0dXJuIHZhbHVlIG9mIHJlZ2lzdGVyaW5nIGFuIGludGVydmFsIGZ1bmN0aW9uIGlzIGEgcHJvbWlzZS4gVGhpcyBwcm9taXNlIHdpbGwgYmVcbiAgICAgICogbm90aWZpZWQgdXBvbiBlYWNoIHRpY2sgb2YgdGhlIGludGVydmFsLCBhbmQgd2lsbCBiZSByZXNvbHZlZCBhZnRlciBgY291bnRgIGl0ZXJhdGlvbnMsIG9yXG4gICAgICAqIHJ1biBpbmRlZmluaXRlbHkgaWYgYGNvdW50YCBpcyBub3QgZGVmaW5lZC4gVGhlIHZhbHVlIG9mIHRoZSBub3RpZmljYXRpb24gd2lsbCBiZSB0aGVcbiAgICAgICogbnVtYmVyIG9mIGl0ZXJhdGlvbnMgdGhhdCBoYXZlIHJ1bi5cbiAgICAgICogVG8gY2FuY2VsIGFuIGludGVydmFsLCBjYWxsIGAkaW50ZXJ2YWwuY2FuY2VsKHByb21pc2UpYC5cbiAgICAgICpcbiAgICAgICogSW4gdGVzdHMgeW91IGNhbiB1c2Uge0BsaW5rIG5nTW9jay4kaW50ZXJ2YWwjZmx1c2ggYCRpbnRlcnZhbC5mbHVzaChtaWxsaXMpYH0gdG9cbiAgICAgICogbW92ZSBmb3J3YXJkIGJ5IGBtaWxsaXNgIG1pbGxpc2Vjb25kcyBhbmQgdHJpZ2dlciBhbnkgZnVuY3Rpb25zIHNjaGVkdWxlZCB0byBydW4gaW4gdGhhdFxuICAgICAgKiB0aW1lLlxuICAgICAgKlxuICAgICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgICAgKiAqKk5vdGUqKjogSW50ZXJ2YWxzIGNyZWF0ZWQgYnkgdGhpcyBzZXJ2aWNlIG11c3QgYmUgZXhwbGljaXRseSBkZXN0cm95ZWQgd2hlbiB5b3UgYXJlIGZpbmlzaGVkXG4gICAgICAqIHdpdGggdGhlbS4gIEluIHBhcnRpY3VsYXIgdGhleSBhcmUgbm90IGF1dG9tYXRpY2FsbHkgZGVzdHJveWVkIHdoZW4gYSBjb250cm9sbGVyJ3Mgc2NvcGUgb3IgYVxuICAgICAgKiBkaXJlY3RpdmUncyBlbGVtZW50IGFyZSBkZXN0cm95ZWQuXG4gICAgICAqIFlvdSBzaG91bGQgdGFrZSB0aGlzIGludG8gY29uc2lkZXJhdGlvbiBhbmQgbWFrZSBzdXJlIHRvIGFsd2F5cyBjYW5jZWwgdGhlIGludGVydmFsIGF0IHRoZVxuICAgICAgKiBhcHByb3ByaWF0ZSBtb21lbnQuICBTZWUgdGhlIGV4YW1wbGUgYmVsb3cgZm9yIG1vcmUgZGV0YWlscyBvbiBob3cgYW5kIHdoZW4gdG8gZG8gdGhpcy5cbiAgICAgICogPC9kaXY+XG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gQSBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSBjYWxsZWQgcmVwZWF0ZWRseS5cbiAgICAgICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5IE51bWJlciBvZiBtaWxsaXNlY29uZHMgYmV0d2VlbiBlYWNoIGZ1bmN0aW9uIGNhbGwuXG4gICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gW2NvdW50PTBdIE51bWJlciBvZiB0aW1lcyB0byByZXBlYXQuIElmIG5vdCBzZXQsIG9yIDAsIHdpbGwgcmVwZWF0XG4gICAgICAqICAgaW5kZWZpbml0ZWx5LlxuICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbaW52b2tlQXBwbHk9dHJ1ZV0gSWYgc2V0IHRvIGBmYWxzZWAgc2tpcHMgbW9kZWwgZGlydHkgY2hlY2tpbmcsIG90aGVyd2lzZVxuICAgICAgKiAgIHdpbGwgaW52b2tlIGBmbmAgd2l0aGluIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkYXBwbHkgJGFwcGx5fSBibG9jay5cbiAgICAgICogQHBhcmFtIHsuLi4qPX0gUGFzcyBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgdG8gdGhlIGV4ZWN1dGVkIGZ1bmN0aW9uLlxuICAgICAgKiBAcmV0dXJucyB7cHJvbWlzZX0gQSBwcm9taXNlIHdoaWNoIHdpbGwgYmUgbm90aWZpZWQgb24gZWFjaCBpdGVyYXRpb24uXG4gICAgICAqXG4gICAgICAqIEBleGFtcGxlXG4gICAgICAqIDxleGFtcGxlIG1vZHVsZT1cImludGVydmFsRXhhbXBsZVwiPlxuICAgICAgKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgKiAgIDxzY3JpcHQ+XG4gICAgICAqICAgICBhbmd1bGFyLm1vZHVsZSgnaW50ZXJ2YWxFeGFtcGxlJywgW10pXG4gICAgICAqICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRpbnRlcnZhbCcsXG4gICAgICAqICAgICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkaW50ZXJ2YWwpIHtcbiAgICAgICogICAgICAgICAgICRzY29wZS5mb3JtYXQgPSAnTS9kL3l5IGg6bW06c3MgYSc7XG4gICAgICAqICAgICAgICAgICAkc2NvcGUuYmxvb2RfMSA9IDEwMDtcbiAgICAgICogICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gMTIwO1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgdmFyIHN0b3A7XG4gICAgICAqICAgICAgICAgICAkc2NvcGUuZmlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgICAgLy8gRG9uJ3Qgc3RhcnQgYSBuZXcgZmlnaHQgaWYgd2UgYXJlIGFscmVhZHkgZmlnaHRpbmdcbiAgICAgICogICAgICAgICAgICAgaWYgKCBhbmd1bGFyLmlzRGVmaW5lZChzdG9wKSApIHJldHVybjtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgc3RvcCA9ICRpbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgICAgICBpZiAoJHNjb3BlLmJsb29kXzEgPiAwICYmICRzY29wZS5ibG9vZF8yID4gMCkge1xuICAgICAgKiAgICAgICAgICAgICAgICAgJHNjb3BlLmJsb29kXzEgPSAkc2NvcGUuYmxvb2RfMSAtIDM7XG4gICAgICAqICAgICAgICAgICAgICAgICAkc2NvcGUuYmxvb2RfMiA9ICRzY29wZS5ibG9vZF8yIC0gNDtcbiAgICAgICogICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgKiAgICAgICAgICAgICAgICAgJHNjb3BlLnN0b3BGaWdodCgpO1xuICAgICAgKiAgICAgICAgICAgICAgIH1cbiAgICAgICogICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICogICAgICAgICAgIH07XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICAkc2NvcGUuc3RvcEZpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChzdG9wKSkge1xuICAgICAgKiAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwoc3RvcCk7XG4gICAgICAqICAgICAgICAgICAgICAgc3RvcCA9IHVuZGVmaW5lZDtcbiAgICAgICogICAgICAgICAgICAgfVxuICAgICAgKiAgICAgICAgICAgfTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICRzY29wZS5yZXNldEZpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAgICRzY29wZS5ibG9vZF8xID0gMTAwO1xuICAgICAgKiAgICAgICAgICAgICAkc2NvcGUuYmxvb2RfMiA9IDEyMDtcbiAgICAgICogICAgICAgICAgIH07XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgKiAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaW50ZXJ2YWwgaXMgZGVzdHJveWVkIHRvb1xuICAgICAgKiAgICAgICAgICAgICAkc2NvcGUuc3RvcEZpZ2h0KCk7XG4gICAgICAqICAgICAgICAgICB9KTtcbiAgICAgICogICAgICAgICB9XSlcbiAgICAgICogICAgICAgLy8gUmVnaXN0ZXIgdGhlICdteUN1cnJlbnRUaW1lJyBkaXJlY3RpdmUgZmFjdG9yeSBtZXRob2QuXG4gICAgICAqICAgICAgIC8vIFdlIGluamVjdCAkaW50ZXJ2YWwgYW5kIGRhdGVGaWx0ZXIgc2VydmljZSBzaW5jZSB0aGUgZmFjdG9yeSBtZXRob2QgaXMgREkuXG4gICAgICAqICAgICAgIC5kaXJlY3RpdmUoJ215Q3VycmVudFRpbWUnLCBbJyRpbnRlcnZhbCcsICdkYXRlRmlsdGVyJyxcbiAgICAgICogICAgICAgICBmdW5jdGlvbigkaW50ZXJ2YWwsIGRhdGVGaWx0ZXIpIHtcbiAgICAgICogICAgICAgICAgIC8vIHJldHVybiB0aGUgZGlyZWN0aXZlIGxpbmsgZnVuY3Rpb24uIChjb21waWxlIGZ1bmN0aW9uIG5vdCBuZWVkZWQpXG4gICAgICAqICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAqICAgICAgICAgICAgIHZhciBmb3JtYXQsICAvLyBkYXRlIGZvcm1hdFxuICAgICAgKiAgICAgICAgICAgICAgICAgc3RvcFRpbWU7IC8vIHNvIHRoYXQgd2UgY2FuIGNhbmNlbCB0aGUgdGltZSB1cGRhdGVzXG4gICAgICAqXG4gICAgICAqICAgICAgICAgICAgIC8vIHVzZWQgdG8gdXBkYXRlIHRoZSBVSVxuICAgICAgKiAgICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVUaW1lKCkge1xuICAgICAgKiAgICAgICAgICAgICAgIGVsZW1lbnQudGV4dChkYXRlRmlsdGVyKG5ldyBEYXRlKCksIGZvcm1hdCkpO1xuICAgICAgKiAgICAgICAgICAgICB9XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICAgIC8vIHdhdGNoIHRoZSBleHByZXNzaW9uLCBhbmQgdXBkYXRlIHRoZSBVSSBvbiBjaGFuZ2UuXG4gICAgICAqICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChhdHRycy5teUN1cnJlbnRUaW1lLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgKiAgICAgICAgICAgICAgIGZvcm1hdCA9IHZhbHVlO1xuICAgICAgKiAgICAgICAgICAgICAgIHVwZGF0ZVRpbWUoKTtcbiAgICAgICogICAgICAgICAgICAgfSk7XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICAgIHN0b3BUaW1lID0gJGludGVydmFsKHVwZGF0ZVRpbWUsIDEwMDApO1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgICAvLyBsaXN0ZW4gb24gRE9NIGRlc3Ryb3kgKHJlbW92YWwpIGV2ZW50LCBhbmQgY2FuY2VsIHRoZSBuZXh0IFVJIHVwZGF0ZVxuICAgICAgKiAgICAgICAgICAgICAvLyB0byBwcmV2ZW50IHVwZGF0aW5nIHRpbWUgYWZ0ZXIgdGhlIERPTSBlbGVtZW50IHdhcyByZW1vdmVkLlxuICAgICAgKiAgICAgICAgICAgICBlbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgKiAgICAgICAgICAgICAgICRpbnRlcnZhbC5jYW5jZWwoc3RvcFRpbWUpO1xuICAgICAgKiAgICAgICAgICAgICB9KTtcbiAgICAgICogICAgICAgICAgIH1cbiAgICAgICogICAgICAgICB9XSk7XG4gICAgICAqICAgPC9zY3JpcHQ+XG4gICAgICAqXG4gICAgICAqICAgPGRpdj5cbiAgICAgICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAqICAgICAgIDxsYWJlbD5EYXRlIGZvcm1hdDogPGlucHV0IG5nLW1vZGVsPVwiZm9ybWF0XCI+PC9sYWJlbD4gPGhyLz5cbiAgICAgICogICAgICAgQ3VycmVudCB0aW1lIGlzOiA8c3BhbiBteS1jdXJyZW50LXRpbWU9XCJmb3JtYXRcIj48L3NwYW4+XG4gICAgICAqICAgICAgIDxoci8+XG4gICAgICAqICAgICAgIEJsb29kIDEgOiA8Zm9udCBjb2xvcj0ncmVkJz57e2Jsb29kXzF9fTwvZm9udD5cbiAgICAgICogICAgICAgQmxvb2QgMiA6IDxmb250IGNvbG9yPSdyZWQnPnt7Ymxvb2RfMn19PC9mb250PlxuICAgICAgKiAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLW5nLWNsaWNrPVwiZmlnaHQoKVwiPkZpZ2h0PC9idXR0b24+XG4gICAgICAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtbmctY2xpY2s9XCJzdG9wRmlnaHQoKVwiPlN0b3BGaWdodDwvYnV0dG9uPlxuICAgICAgKiAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLW5nLWNsaWNrPVwicmVzZXRGaWdodCgpXCI+cmVzZXRGaWdodDwvYnV0dG9uPlxuICAgICAgKiAgICAgPC9kaXY+XG4gICAgICAqICAgPC9kaXY+XG4gICAgICAqXG4gICAgICAqIDwvZmlsZT5cbiAgICAgICogPC9leGFtcGxlPlxuICAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnRlcnZhbChmbiwgZGVsYXksIGNvdW50LCBpbnZva2VBcHBseSkge1xuICAgICAgdmFyIGhhc1BhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0LFxuICAgICAgICAgIGFyZ3MgPSBoYXNQYXJhbXMgPyBzbGljZUFyZ3MoYXJndW1lbnRzLCA0KSA6IFtdLFxuICAgICAgICAgIHNldEludGVydmFsID0gJHdpbmRvdy5zZXRJbnRlcnZhbCxcbiAgICAgICAgICBjbGVhckludGVydmFsID0gJHdpbmRvdy5jbGVhckludGVydmFsLFxuICAgICAgICAgIGl0ZXJhdGlvbiA9IDAsXG4gICAgICAgICAgc2tpcEFwcGx5ID0gKGlzRGVmaW5lZChpbnZva2VBcHBseSkgJiYgIWludm9rZUFwcGx5KSxcbiAgICAgICAgICBkZWZlcnJlZCA9IChza2lwQXBwbHkgPyAkJHEgOiAkcSkuZGVmZXIoKSxcbiAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZTtcblxuICAgICAgY291bnQgPSBpc0RlZmluZWQoY291bnQpID8gY291bnQgOiAwO1xuXG4gICAgICBwcm9taXNlLnRoZW4obnVsbCwgbnVsbCwgKCFoYXNQYXJhbXMpID8gZm4gOiBmdW5jdGlvbigpIHtcbiAgICAgICAgZm4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgICB9KTtcblxuICAgICAgcHJvbWlzZS4kJGludGVydmFsSWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiB0aWNrKCkge1xuICAgICAgICBkZWZlcnJlZC5ub3RpZnkoaXRlcmF0aW9uKyspO1xuXG4gICAgICAgIGlmIChjb3VudCA+IDAgJiYgaXRlcmF0aW9uID49IGNvdW50KSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShpdGVyYXRpb24pO1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwocHJvbWlzZS4kJGludGVydmFsSWQpO1xuICAgICAgICAgIGRlbGV0ZSBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFza2lwQXBwbHkpICRyb290U2NvcGUuJGFwcGx5KCk7XG5cbiAgICAgIH0sIGRlbGF5KTtcblxuICAgICAgaW50ZXJ2YWxzW3Byb21pc2UuJCRpbnRlcnZhbElkXSA9IGRlZmVycmVkO1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cblxuICAgICAvKipcbiAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgKiBAbmFtZSAkaW50ZXJ2YWwjY2FuY2VsXG4gICAgICAqXG4gICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgKiBDYW5jZWxzIGEgdGFzayBhc3NvY2lhdGVkIHdpdGggdGhlIGBwcm9taXNlYC5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtwcm9taXNlfSBwcm9taXNlIHJldHVybmVkIGJ5IHRoZSBgJGludGVydmFsYCBmdW5jdGlvbi5cbiAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIHdhcyBzdWNjZXNzZnVsbHkgY2FuY2VsZWQuXG4gICAgICAqL1xuICAgIGludGVydmFsLmNhbmNlbCA9IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICAgIGlmIChwcm9taXNlICYmIHByb21pc2UuJCRpbnRlcnZhbElkIGluIGludGVydmFscykge1xuICAgICAgICBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdLnJlamVjdCgnY2FuY2VsZWQnKTtcbiAgICAgICAgJHdpbmRvdy5jbGVhckludGVydmFsKHByb21pc2UuJCRpbnRlcnZhbElkKTtcbiAgICAgICAgZGVsZXRlIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF07XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gaW50ZXJ2YWw7XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkbG9jYWxlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiAkbG9jYWxlIHNlcnZpY2UgcHJvdmlkZXMgbG9jYWxpemF0aW9uIHJ1bGVzIGZvciB2YXJpb3VzIEFuZ3VsYXIgY29tcG9uZW50cy4gQXMgb2YgcmlnaHQgbm93IHRoZVxuICogb25seSBwdWJsaWMgYXBpIGlzOlxuICpcbiAqICogYGlkYCDigJMgYHtzdHJpbmd9YCDigJMgbG9jYWxlIGlkIGZvcm1hdHRlZCBhcyBgbGFuZ3VhZ2VJZC1jb3VudHJ5SWRgIChlLmcuIGBlbi11c2ApXG4gKi9cbmZ1bmN0aW9uICRMb2NhbGVQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiAnZW4tdXMnLFxuXG4gICAgICBOVU1CRVJfRk9STUFUUzoge1xuICAgICAgICBERUNJTUFMX1NFUDogJy4nLFxuICAgICAgICBHUk9VUF9TRVA6ICcsJyxcbiAgICAgICAgUEFUVEVSTlM6IFtcbiAgICAgICAgICB7IC8vIERlY2ltYWwgUGF0dGVyblxuICAgICAgICAgICAgbWluSW50OiAxLFxuICAgICAgICAgICAgbWluRnJhYzogMCxcbiAgICAgICAgICAgIG1heEZyYWM6IDMsXG4gICAgICAgICAgICBwb3NQcmU6ICcnLFxuICAgICAgICAgICAgcG9zU3VmOiAnJyxcbiAgICAgICAgICAgIG5lZ1ByZTogJy0nLFxuICAgICAgICAgICAgbmVnU3VmOiAnJyxcbiAgICAgICAgICAgIGdTaXplOiAzLFxuICAgICAgICAgICAgbGdTaXplOiAzXG4gICAgICAgICAgfSx7IC8vQ3VycmVuY3kgUGF0dGVyblxuICAgICAgICAgICAgbWluSW50OiAxLFxuICAgICAgICAgICAgbWluRnJhYzogMixcbiAgICAgICAgICAgIG1heEZyYWM6IDIsXG4gICAgICAgICAgICBwb3NQcmU6ICdcXHUwMEE0JyxcbiAgICAgICAgICAgIHBvc1N1ZjogJycsXG4gICAgICAgICAgICBuZWdQcmU6ICcoXFx1MDBBNCcsXG4gICAgICAgICAgICBuZWdTdWY6ICcpJyxcbiAgICAgICAgICAgIGdTaXplOiAzLFxuICAgICAgICAgICAgbGdTaXplOiAzXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBDVVJSRU5DWV9TWU06ICckJ1xuICAgICAgfSxcblxuICAgICAgREFURVRJTUVfRk9STUFUUzoge1xuICAgICAgICBNT05USDpcbiAgICAgICAgICAgICdKYW51YXJ5LEZlYnJ1YXJ5LE1hcmNoLEFwcmlsLE1heSxKdW5lLEp1bHksQXVndXN0LFNlcHRlbWJlcixPY3RvYmVyLE5vdmVtYmVyLERlY2VtYmVyJ1xuICAgICAgICAgICAgLnNwbGl0KCcsJyksXG4gICAgICAgIFNIT1JUTU9OVEg6ICAnSmFuLEZlYixNYXIsQXByLE1heSxKdW4sSnVsLEF1ZyxTZXAsT2N0LE5vdixEZWMnLnNwbGl0KCcsJyksXG4gICAgICAgIERBWTogJ1N1bmRheSxNb25kYXksVHVlc2RheSxXZWRuZXNkYXksVGh1cnNkYXksRnJpZGF5LFNhdHVyZGF5Jy5zcGxpdCgnLCcpLFxuICAgICAgICBTSE9SVERBWTogJ1N1bixNb24sVHVlLFdlZCxUaHUsRnJpLFNhdCcuc3BsaXQoJywnKSxcbiAgICAgICAgQU1QTVM6IFsnQU0nLCdQTSddLFxuICAgICAgICBtZWRpdW06ICdNTU0gZCwgeSBoOm1tOnNzIGEnLFxuICAgICAgICAnc2hvcnQnOiAnTS9kL3l5IGg6bW0gYScsXG4gICAgICAgIGZ1bGxEYXRlOiAnRUVFRSwgTU1NTSBkLCB5JyxcbiAgICAgICAgbG9uZ0RhdGU6ICdNTU1NIGQsIHknLFxuICAgICAgICBtZWRpdW1EYXRlOiAnTU1NIGQsIHknLFxuICAgICAgICBzaG9ydERhdGU6ICdNL2QveXknLFxuICAgICAgICBtZWRpdW1UaW1lOiAnaDptbTpzcyBhJyxcbiAgICAgICAgc2hvcnRUaW1lOiAnaDptbSBhJyxcbiAgICAgICAgRVJBTkFNRVM6IFtcbiAgICAgICAgICBcIkJlZm9yZSBDaHJpc3RcIixcbiAgICAgICAgICBcIkFubm8gRG9taW5pXCJcbiAgICAgICAgXSxcbiAgICAgICAgRVJBUzogW1xuICAgICAgICAgIFwiQkNcIixcbiAgICAgICAgICBcIkFEXCJcbiAgICAgICAgXVxuICAgICAgfSxcblxuICAgICAgcGx1cmFsQ2F0OiBmdW5jdGlvbihudW0pIHtcbiAgICAgICAgaWYgKG51bSA9PT0gMSkge1xuICAgICAgICAgIHJldHVybiAnb25lJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ290aGVyJztcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufVxuXG52YXIgUEFUSF9NQVRDSCA9IC9eKFteXFw/I10qKShcXD8oW14jXSopKT8oIyguKikpPyQvLFxuICAgIERFRkFVTFRfUE9SVFMgPSB7J2h0dHAnOiA4MCwgJ2h0dHBzJzogNDQzLCAnZnRwJzogMjF9O1xudmFyICRsb2NhdGlvbk1pbkVyciA9IG1pbkVycignJGxvY2F0aW9uJyk7XG5cblxuLyoqXG4gKiBFbmNvZGUgcGF0aCB1c2luZyBlbmNvZGVVcmlTZWdtZW50LCBpZ25vcmluZyBmb3J3YXJkIHNsYXNoZXNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRvIGVuY29kZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy8nKSxcbiAgICAgIGkgPSBzZWdtZW50cy5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHNlZ21lbnRzW2ldID0gZW5jb2RlVXJpU2VnbWVudChzZWdtZW50c1tpXSk7XG4gIH1cblxuICByZXR1cm4gc2VnbWVudHMuam9pbignLycpO1xufVxuXG5mdW5jdGlvbiBwYXJzZUFic29sdXRlVXJsKGFic29sdXRlVXJsLCBsb2NhdGlvbk9iaikge1xuICB2YXIgcGFyc2VkVXJsID0gdXJsUmVzb2x2ZShhYnNvbHV0ZVVybCk7XG5cbiAgbG9jYXRpb25PYmouJCRwcm90b2NvbCA9IHBhcnNlZFVybC5wcm90b2NvbDtcbiAgbG9jYXRpb25PYmouJCRob3N0ID0gcGFyc2VkVXJsLmhvc3RuYW1lO1xuICBsb2NhdGlvbk9iai4kJHBvcnQgPSB0b0ludChwYXJzZWRVcmwucG9ydCkgfHwgREVGQVVMVF9QT1JUU1twYXJzZWRVcmwucHJvdG9jb2xdIHx8IG51bGw7XG59XG5cblxuZnVuY3Rpb24gcGFyc2VBcHBVcmwocmVsYXRpdmVVcmwsIGxvY2F0aW9uT2JqKSB7XG4gIHZhciBwcmVmaXhlZCA9IChyZWxhdGl2ZVVybC5jaGFyQXQoMCkgIT09ICcvJyk7XG4gIGlmIChwcmVmaXhlZCkge1xuICAgIHJlbGF0aXZlVXJsID0gJy8nICsgcmVsYXRpdmVVcmw7XG4gIH1cbiAgdmFyIG1hdGNoID0gdXJsUmVzb2x2ZShyZWxhdGl2ZVVybCk7XG4gIGxvY2F0aW9uT2JqLiQkcGF0aCA9IGRlY29kZVVSSUNvbXBvbmVudChwcmVmaXhlZCAmJiBtYXRjaC5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyA/XG4gICAgICBtYXRjaC5wYXRobmFtZS5zdWJzdHJpbmcoMSkgOiBtYXRjaC5wYXRobmFtZSk7XG4gIGxvY2F0aW9uT2JqLiQkc2VhcmNoID0gcGFyc2VLZXlWYWx1ZShtYXRjaC5zZWFyY2gpO1xuICBsb2NhdGlvbk9iai4kJGhhc2ggPSBkZWNvZGVVUklDb21wb25lbnQobWF0Y2guaGFzaCk7XG5cbiAgLy8gbWFrZSBzdXJlIHBhdGggc3RhcnRzIHdpdGggJy8nO1xuICBpZiAobG9jYXRpb25PYmouJCRwYXRoICYmIGxvY2F0aW9uT2JqLiQkcGF0aC5jaGFyQXQoMCkgIT0gJy8nKSB7XG4gICAgbG9jYXRpb25PYmouJCRwYXRoID0gJy8nICsgbG9jYXRpb25PYmouJCRwYXRoO1xuICB9XG59XG5cblxuLyoqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJlZ2luXG4gKiBAcGFyYW0ge3N0cmluZ30gd2hvbGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHJldHVybnMgdGV4dCBmcm9tIHdob2xlIGFmdGVyIGJlZ2luIG9yIHVuZGVmaW5lZCBpZiBpdCBkb2VzIG5vdCBiZWdpbiB3aXRoXG4gKiAgICAgICAgICAgICAgICAgICBleHBlY3RlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJlZ2luc1dpdGgoYmVnaW4sIHdob2xlKSB7XG4gIGlmICh3aG9sZS5pbmRleE9mKGJlZ2luKSA9PT0gMCkge1xuICAgIHJldHVybiB3aG9sZS5zdWJzdHIoYmVnaW4ubGVuZ3RoKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGluZGV4ID09IC0xID8gdXJsIDogdXJsLnN1YnN0cigwLCBpbmRleCk7XG59XG5cbmZ1bmN0aW9uIHRyaW1FbXB0eUhhc2godXJsKSB7XG4gIHJldHVybiB1cmwucmVwbGFjZSgvKCMuKyl8IyQvLCAnJDEnKTtcbn1cblxuXG5mdW5jdGlvbiBzdHJpcEZpbGUodXJsKSB7XG4gIHJldHVybiB1cmwuc3Vic3RyKDAsIHN0cmlwSGFzaCh1cmwpLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbn1cblxuLyogcmV0dXJuIHRoZSBzZXJ2ZXIgb25seSAoc2NoZW1lOi8vaG9zdDpwb3J0KSAqL1xuZnVuY3Rpb24gc2VydmVyQmFzZSh1cmwpIHtcbiAgcmV0dXJuIHVybC5zdWJzdHJpbmcoMCwgdXJsLmluZGV4T2YoJy8nLCB1cmwuaW5kZXhPZignLy8nKSArIDIpKTtcbn1cblxuXG4vKipcbiAqIExvY2F0aW9uSHRtbDVVcmwgcmVwcmVzZW50cyBhbiB1cmxcbiAqIFRoaXMgb2JqZWN0IGlzIGV4cG9zZWQgYXMgJGxvY2F0aW9uIHNlcnZpY2Ugd2hlbiBIVE1MNSBtb2RlIGlzIGVuYWJsZWQgYW5kIHN1cHBvcnRlZFxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2UgYXBwbGljYXRpb24gYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlUHJlZml4IHVybCBwYXRoIHByZWZpeFxuICovXG5mdW5jdGlvbiBMb2NhdGlvbkh0bWw1VXJsKGFwcEJhc2UsIGJhc2VQcmVmaXgpIHtcbiAgdGhpcy4kJGh0bWw1ID0gdHJ1ZTtcbiAgYmFzZVByZWZpeCA9IGJhc2VQcmVmaXggfHwgJyc7XG4gIHZhciBhcHBCYXNlTm9GaWxlID0gc3RyaXBGaWxlKGFwcEJhc2UpO1xuICBwYXJzZUFic29sdXRlVXJsKGFwcEJhc2UsIHRoaXMpO1xuXG5cbiAgLyoqXG4gICAqIFBhcnNlIGdpdmVuIGh0bWw1IChyZWd1bGFyKSB1cmwgc3RyaW5nIGludG8gcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIEhUTUw1IHVybFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy4kJHBhcnNlID0gZnVuY3Rpb24odXJsKSB7XG4gICAgdmFyIHBhdGhVcmwgPSBiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIHVybCk7XG4gICAgaWYgKCFpc1N0cmluZyhwYXRoVXJsKSkge1xuICAgICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdpcHRocHJmeCcsICdJbnZhbGlkIHVybCBcInswfVwiLCBtaXNzaW5nIHBhdGggcHJlZml4IFwiezF9XCIuJywgdXJsLFxuICAgICAgICAgIGFwcEJhc2VOb0ZpbGUpO1xuICAgIH1cblxuICAgIHBhcnNlQXBwVXJsKHBhdGhVcmwsIHRoaXMpO1xuXG4gICAgaWYgKCF0aGlzLiQkcGF0aCkge1xuICAgICAgdGhpcy4kJHBhdGggPSAnLyc7XG4gICAgfVxuXG4gICAgdGhpcy4kJGNvbXBvc2UoKTtcbiAgfTtcblxuICAvKipcbiAgICogQ29tcG9zZSB1cmwgYW5kIHVwZGF0ZSBgYWJzVXJsYCBwcm9wZXJ0eVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy4kJGNvbXBvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VhcmNoID0gdG9LZXlWYWx1ZSh0aGlzLiQkc2VhcmNoKSxcbiAgICAgICAgaGFzaCA9IHRoaXMuJCRoYXNoID8gJyMnICsgZW5jb2RlVXJpU2VnbWVudCh0aGlzLiQkaGFzaCkgOiAnJztcblxuICAgIHRoaXMuJCR1cmwgPSBlbmNvZGVQYXRoKHRoaXMuJCRwYXRoKSArIChzZWFyY2ggPyAnPycgKyBzZWFyY2ggOiAnJykgKyBoYXNoO1xuICAgIHRoaXMuJCRhYnNVcmwgPSBhcHBCYXNlTm9GaWxlICsgdGhpcy4kJHVybC5zdWJzdHIoMSk7IC8vIGZpcnN0IGNoYXIgaXMgYWx3YXlzICcvJ1xuICB9O1xuXG4gIHRoaXMuJCRwYXJzZUxpbmtVcmwgPSBmdW5jdGlvbih1cmwsIHJlbEhyZWYpIHtcbiAgICBpZiAocmVsSHJlZiAmJiByZWxIcmVmWzBdID09PSAnIycpIHtcbiAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgbGlua3MgdG8gaGFzaCBmcmFnbWVudHM6XG4gICAgICAvLyBrZWVwIHRoZSBvbGQgdXJsIGFuZCBvbmx5IHJlcGxhY2UgdGhlIGhhc2ggZnJhZ21lbnRcbiAgICAgIHRoaXMuaGFzaChyZWxIcmVmLnNsaWNlKDEpKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgYXBwVXJsLCBwcmV2QXBwVXJsO1xuICAgIHZhciByZXdyaXR0ZW5Vcmw7XG5cbiAgICBpZiAoKGFwcFVybCA9IGJlZ2luc1dpdGgoYXBwQmFzZSwgdXJsKSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcHJldkFwcFVybCA9IGFwcFVybDtcbiAgICAgIGlmICgoYXBwVXJsID0gYmVnaW5zV2l0aChiYXNlUHJlZml4LCBhcHBVcmwpKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2VOb0ZpbGUgKyAoYmVnaW5zV2l0aCgnLycsIGFwcFVybCkgfHwgYXBwVXJsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2UgKyBwcmV2QXBwVXJsO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKGFwcFVybCA9IGJlZ2luc1dpdGgoYXBwQmFzZU5vRmlsZSwgdXJsKSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZSArIGFwcFVybDtcbiAgICB9IGVsc2UgaWYgKGFwcEJhc2VOb0ZpbGUgPT0gdXJsICsgJy8nKSB7XG4gICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlTm9GaWxlO1xuICAgIH1cbiAgICBpZiAocmV3cml0dGVuVXJsKSB7XG4gICAgICB0aGlzLiQkcGFyc2UocmV3cml0dGVuVXJsKTtcbiAgICB9XG4gICAgcmV0dXJuICEhcmV3cml0dGVuVXJsO1xuICB9O1xufVxuXG5cbi8qKlxuICogTG9jYXRpb25IYXNoYmFuZ1VybCByZXByZXNlbnRzIHVybFxuICogVGhpcyBvYmplY3QgaXMgZXhwb3NlZCBhcyAkbG9jYXRpb24gc2VydmljZSB3aGVuIGRldmVsb3BlciBkb2Vzbid0IG9wdCBpbnRvIGh0bWw1IG1vZGUuXG4gKiBJdCBhbHNvIHNlcnZlcyBhcyB0aGUgYmFzZSBjbGFzcyBmb3IgaHRtbDUgbW9kZSBmYWxsYmFjayBvbiBsZWdhY3kgYnJvd3NlcnMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZSBhcHBsaWNhdGlvbiBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IGhhc2hQcmVmaXggaGFzaGJhbmcgcHJlZml4XG4gKi9cbmZ1bmN0aW9uIExvY2F0aW9uSGFzaGJhbmdVcmwoYXBwQmFzZSwgaGFzaFByZWZpeCkge1xuICB2YXIgYXBwQmFzZU5vRmlsZSA9IHN0cmlwRmlsZShhcHBCYXNlKTtcblxuICBwYXJzZUFic29sdXRlVXJsKGFwcEJhc2UsIHRoaXMpO1xuXG5cbiAgLyoqXG4gICAqIFBhcnNlIGdpdmVuIGhhc2hiYW5nIHVybCBpbnRvIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBIYXNoYmFuZyB1cmxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuJCRwYXJzZSA9IGZ1bmN0aW9uKHVybCkge1xuICAgIHZhciB3aXRob3V0QmFzZVVybCA9IGJlZ2luc1dpdGgoYXBwQmFzZSwgdXJsKSB8fCBiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIHVybCk7XG4gICAgdmFyIHdpdGhvdXRIYXNoVXJsO1xuXG4gICAgaWYgKCFpc1VuZGVmaW5lZCh3aXRob3V0QmFzZVVybCkgJiYgd2l0aG91dEJhc2VVcmwuY2hhckF0KDApID09PSAnIycpIHtcblxuICAgICAgLy8gVGhlIHJlc3Qgb2YgdGhlIHVybCBzdGFydHMgd2l0aCBhIGhhc2ggc28gd2UgaGF2ZVxuICAgICAgLy8gZ290IGVpdGhlciBhIGhhc2hiYW5nIHBhdGggb3IgYSBwbGFpbiBoYXNoIGZyYWdtZW50XG4gICAgICB3aXRob3V0SGFzaFVybCA9IGJlZ2luc1dpdGgoaGFzaFByZWZpeCwgd2l0aG91dEJhc2VVcmwpO1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKHdpdGhvdXRIYXNoVXJsKSkge1xuICAgICAgICAvLyBUaGVyZSB3YXMgbm8gaGFzaGJhbmcgcHJlZml4IHNvIHdlIGp1c3QgaGF2ZSBhIGhhc2ggZnJhZ21lbnRcbiAgICAgICAgd2l0aG91dEhhc2hVcmwgPSB3aXRob3V0QmFzZVVybDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGVyZSB3YXMgbm8gaGFzaGJhbmcgcGF0aCBub3IgaGFzaCBmcmFnbWVudDpcbiAgICAgIC8vIElmIHdlIGFyZSBpbiBIVE1MNSBtb2RlIHdlIHVzZSB3aGF0IGlzIGxlZnQgYXMgdGhlIHBhdGg7XG4gICAgICAvLyBPdGhlcndpc2Ugd2UgaWdub3JlIHdoYXQgaXMgbGVmdFxuICAgICAgaWYgKHRoaXMuJCRodG1sNSkge1xuICAgICAgICB3aXRob3V0SGFzaFVybCA9IHdpdGhvdXRCYXNlVXJsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2l0aG91dEhhc2hVcmwgPSAnJztcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHdpdGhvdXRCYXNlVXJsKSkge1xuICAgICAgICAgIGFwcEJhc2UgPSB1cmw7XG4gICAgICAgICAgdGhpcy5yZXBsYWNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJzZUFwcFVybCh3aXRob3V0SGFzaFVybCwgdGhpcyk7XG5cbiAgICB0aGlzLiQkcGF0aCA9IHJlbW92ZVdpbmRvd3NEcml2ZU5hbWUodGhpcy4kJHBhdGgsIHdpdGhvdXRIYXNoVXJsLCBhcHBCYXNlKTtcblxuICAgIHRoaXMuJCRjb21wb3NlKCk7XG5cbiAgICAvKlxuICAgICAqIEluIFdpbmRvd3MsIG9uIGFuIGFuY2hvciBub2RlIG9uIGRvY3VtZW50cyBsb2FkZWQgZnJvbVxuICAgICAqIHRoZSBmaWxlc3lzdGVtLCB0aGUgYnJvd3NlciB3aWxsIHJldHVybiBhIHBhdGhuYW1lXG4gICAgICogcHJlZml4ZWQgd2l0aCB0aGUgZHJpdmUgbmFtZSAoJy9DOi9wYXRoJykgd2hlbiBhXG4gICAgICogcGF0aG5hbWUgd2l0aG91dCBhIGRyaXZlIGlzIHNldDpcbiAgICAgKiAgKiBhLnNldEF0dHJpYnV0ZSgnaHJlZicsICcvZm9vJylcbiAgICAgKiAgICogYS5wYXRobmFtZSA9PT0gJy9DOi9mb28nIC8vdHJ1ZVxuICAgICAqXG4gICAgICogSW5zaWRlIG9mIEFuZ3VsYXIsIHdlJ3JlIGFsd2F5cyB1c2luZyBwYXRobmFtZXMgdGhhdFxuICAgICAqIGRvIG5vdCBpbmNsdWRlIGRyaXZlIG5hbWVzIGZvciByb3V0aW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZVdpbmRvd3NEcml2ZU5hbWUocGF0aCwgdXJsLCBiYXNlKSB7XG4gICAgICAvKlxuICAgICAgTWF0Y2hlcyBwYXRocyBmb3IgZmlsZSBwcm90b2NvbCBvbiB3aW5kb3dzLFxuICAgICAgc3VjaCBhcyAvQzovZm9vL2JhciwgYW5kIGNhcHR1cmVzIG9ubHkgL2Zvby9iYXIuXG4gICAgICAqL1xuICAgICAgdmFyIHdpbmRvd3NGaWxlUGF0aEV4cCA9IC9eXFwvW0EtWl06KFxcLy4qKS87XG5cbiAgICAgIHZhciBmaXJzdFBhdGhTZWdtZW50TWF0Y2g7XG5cbiAgICAgIC8vR2V0IHRoZSByZWxhdGl2ZSBwYXRoIGZyb20gdGhlIGlucHV0IFVSTC5cbiAgICAgIGlmICh1cmwuaW5kZXhPZihiYXNlKSA9PT0gMCkge1xuICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShiYXNlLCAnJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBpbnB1dCBVUkwgaW50ZW50aW9uYWxseSBjb250YWlucyBhIGZpcnN0IHBhdGggc2VnbWVudCB0aGF0IGVuZHMgd2l0aCBhIGNvbG9uLlxuICAgICAgaWYgKHdpbmRvd3NGaWxlUGF0aEV4cC5leGVjKHVybCkpIHtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9XG5cbiAgICAgIGZpcnN0UGF0aFNlZ21lbnRNYXRjaCA9IHdpbmRvd3NGaWxlUGF0aEV4cC5leGVjKHBhdGgpO1xuICAgICAgcmV0dXJuIGZpcnN0UGF0aFNlZ21lbnRNYXRjaCA/IGZpcnN0UGF0aFNlZ21lbnRNYXRjaFsxXSA6IHBhdGg7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBDb21wb3NlIGhhc2hiYW5nIHVybCBhbmQgdXBkYXRlIGBhYnNVcmxgIHByb3BlcnR5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWFyY2ggPSB0b0tleVZhbHVlKHRoaXMuJCRzZWFyY2gpLFxuICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnO1xuXG4gICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7XG4gICAgdGhpcy4kJGFic1VybCA9IGFwcEJhc2UgKyAodGhpcy4kJHVybCA/IGhhc2hQcmVmaXggKyB0aGlzLiQkdXJsIDogJycpO1xuICB9O1xuXG4gIHRoaXMuJCRwYXJzZUxpbmtVcmwgPSBmdW5jdGlvbih1cmwsIHJlbEhyZWYpIHtcbiAgICBpZiAoc3RyaXBIYXNoKGFwcEJhc2UpID09IHN0cmlwSGFzaCh1cmwpKSB7XG4gICAgICB0aGlzLiQkcGFyc2UodXJsKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG59XG5cblxuLyoqXG4gKiBMb2NhdGlvbkhhc2hiYW5nVXJsIHJlcHJlc2VudHMgdXJsXG4gKiBUaGlzIG9iamVjdCBpcyBleHBvc2VkIGFzICRsb2NhdGlvbiBzZXJ2aWNlIHdoZW4gaHRtbDUgaGlzdG9yeSBhcGkgaXMgZW5hYmxlZCBidXQgdGhlIGJyb3dzZXJcbiAqIGRvZXMgbm90IHN1cHBvcnQgaXQuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZSBhcHBsaWNhdGlvbiBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IGhhc2hQcmVmaXggaGFzaGJhbmcgcHJlZml4XG4gKi9cbmZ1bmN0aW9uIExvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsKGFwcEJhc2UsIGhhc2hQcmVmaXgpIHtcbiAgdGhpcy4kJGh0bWw1ID0gdHJ1ZTtcbiAgTG9jYXRpb25IYXNoYmFuZ1VybC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gIHZhciBhcHBCYXNlTm9GaWxlID0gc3RyaXBGaWxlKGFwcEJhc2UpO1xuXG4gIHRoaXMuJCRwYXJzZUxpbmtVcmwgPSBmdW5jdGlvbih1cmwsIHJlbEhyZWYpIHtcbiAgICBpZiAocmVsSHJlZiAmJiByZWxIcmVmWzBdID09PSAnIycpIHtcbiAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgbGlua3MgdG8gaGFzaCBmcmFnbWVudHM6XG4gICAgICAvLyBrZWVwIHRoZSBvbGQgdXJsIGFuZCBvbmx5IHJlcGxhY2UgdGhlIGhhc2ggZnJhZ21lbnRcbiAgICAgIHRoaXMuaGFzaChyZWxIcmVmLnNsaWNlKDEpKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciByZXdyaXR0ZW5Vcmw7XG4gICAgdmFyIGFwcFVybDtcblxuICAgIGlmIChhcHBCYXNlID09IHN0cmlwSGFzaCh1cmwpKSB7XG4gICAgICByZXdyaXR0ZW5VcmwgPSB1cmw7XG4gICAgfSBlbHNlIGlmICgoYXBwVXJsID0gYmVnaW5zV2l0aChhcHBCYXNlTm9GaWxlLCB1cmwpKSkge1xuICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZSArIGhhc2hQcmVmaXggKyBhcHBVcmw7XG4gICAgfSBlbHNlIGlmIChhcHBCYXNlTm9GaWxlID09PSB1cmwgKyAnLycpIHtcbiAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2VOb0ZpbGU7XG4gICAgfVxuICAgIGlmIChyZXdyaXR0ZW5VcmwpIHtcbiAgICAgIHRoaXMuJCRwYXJzZShyZXdyaXR0ZW5VcmwpO1xuICAgIH1cbiAgICByZXR1cm4gISFyZXdyaXR0ZW5Vcmw7XG4gIH07XG5cbiAgdGhpcy4kJGNvbXBvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VhcmNoID0gdG9LZXlWYWx1ZSh0aGlzLiQkc2VhcmNoKSxcbiAgICAgICAgaGFzaCA9IHRoaXMuJCRoYXNoID8gJyMnICsgZW5jb2RlVXJpU2VnbWVudCh0aGlzLiQkaGFzaCkgOiAnJztcblxuICAgIHRoaXMuJCR1cmwgPSBlbmNvZGVQYXRoKHRoaXMuJCRwYXRoKSArIChzZWFyY2ggPyAnPycgKyBzZWFyY2ggOiAnJykgKyBoYXNoO1xuICAgIC8vIGluY2x1ZGUgaGFzaFByZWZpeCBpbiAkJGFic1VybCB3aGVuICQkdXJsIGlzIGVtcHR5IHNvIElFOCAmIDkgZG8gbm90IHJlbG9hZCBwYWdlIGJlY2F1c2Ugb2YgcmVtb3ZhbCBvZiAnIydcbiAgICB0aGlzLiQkYWJzVXJsID0gYXBwQmFzZSArIGhhc2hQcmVmaXggKyB0aGlzLiQkdXJsO1xuICB9O1xuXG59XG5cblxudmFyIGxvY2F0aW9uUHJvdG90eXBlID0ge1xuXG4gIC8qKlxuICAgKiBBcmUgd2UgaW4gaHRtbDUgbW9kZT9cbiAgICogQHByaXZhdGVcbiAgICovXG4gICQkaHRtbDU6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBIYXMgYW55IGNoYW5nZSBiZWVuIHJlcGxhY2luZz9cbiAgICogQHByaXZhdGVcbiAgICovXG4gICQkcmVwbGFjZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI2Fic1VybFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuXG4gICAqXG4gICAqIFJldHVybiBmdWxsIHVybCByZXByZXNlbnRhdGlvbiB3aXRoIGFsbCBzZWdtZW50cyBlbmNvZGVkIGFjY29yZGluZyB0byBydWxlcyBzcGVjaWZpZWQgaW5cbiAgICogW1JGQyAzOTg2XShodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMzOTg2LnR4dCkuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIHVybCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgYWJzVXJsID0gJGxvY2F0aW9uLmFic1VybCgpO1xuICAgKiAvLyA9PiBcImh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gZnVsbCB1cmxcbiAgICovXG4gIGFic1VybDogbG9jYXRpb25HZXR0ZXIoJyQkYWJzVXJsJyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3VybFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm4gdXJsIChlLmcuIGAvcGF0aD9hPWIjaGFzaGApIHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci5cbiAgICpcbiAgICogQ2hhbmdlIHBhdGgsIHNlYXJjaCBhbmQgaGFzaCwgd2hlbiBjYWxsZWQgd2l0aCBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciB1cmwgPSAkbG9jYXRpb24udXJsKCk7XG4gICAqIC8vID0+IFwiL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdXJsIE5ldyB1cmwgd2l0aG91dCBiYXNlIHByZWZpeCAoZS5nLiBgL3BhdGg/YT1iI2hhc2hgKVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHVybFxuICAgKi9cbiAgdXJsOiBmdW5jdGlvbih1cmwpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodXJsKSkge1xuICAgICAgcmV0dXJuIHRoaXMuJCR1cmw7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoID0gUEFUSF9NQVRDSC5leGVjKHVybCk7XG4gICAgaWYgKG1hdGNoWzFdIHx8IHVybCA9PT0gJycpIHRoaXMucGF0aChkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMV0pKTtcbiAgICBpZiAobWF0Y2hbMl0gfHwgbWF0Y2hbMV0gfHwgdXJsID09PSAnJykgdGhpcy5zZWFyY2gobWF0Y2hbM10gfHwgJycpO1xuICAgIHRoaXMuaGFzaChtYXRjaFs1XSB8fCAnJyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jcHJvdG9jb2xcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LlxuICAgKlxuICAgKiBSZXR1cm4gcHJvdG9jb2wgb2YgY3VycmVudCB1cmwuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIHVybCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgcHJvdG9jb2wgPSAkbG9jYXRpb24ucHJvdG9jb2woKTtcbiAgICogLy8gPT4gXCJodHRwXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gcHJvdG9jb2wgb2YgY3VycmVudCB1cmxcbiAgICovXG4gIHByb3RvY29sOiBsb2NhdGlvbkdldHRlcignJCRwcm90b2NvbCcpLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNob3N0XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS5cbiAgICpcbiAgICogUmV0dXJuIGhvc3Qgb2YgY3VycmVudCB1cmwuXG4gICAqXG4gICAqIE5vdGU6IGNvbXBhcmVkIHRvIHRoZSBub24tYW5ndWxhciB2ZXJzaW9uIGBsb2NhdGlvbi5ob3N0YCB3aGljaCByZXR1cm5zIGBob3N0bmFtZTpwb3J0YCwgdGhpcyByZXR1cm5zIHRoZSBgaG9zdG5hbWVgIHBvcnRpb24gb25seS5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBob3N0ID0gJGxvY2F0aW9uLmhvc3QoKTtcbiAgICogLy8gPT4gXCJleGFtcGxlLmNvbVwiXG4gICAqXG4gICAqIC8vIGdpdmVuIHVybCBodHRwOi8vdXNlcjpwYXNzd29yZEBleGFtcGxlLmNvbTo4MDgwLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogaG9zdCA9ICRsb2NhdGlvbi5ob3N0KCk7XG4gICAqIC8vID0+IFwiZXhhbXBsZS5jb21cIlxuICAgKiBob3N0ID0gbG9jYXRpb24uaG9zdDtcbiAgICogLy8gPT4gXCJleGFtcGxlLmNvbTo4MDgwXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gaG9zdCBvZiBjdXJyZW50IHVybC5cbiAgICovXG4gIGhvc3Q6IGxvY2F0aW9uR2V0dGVyKCckJGhvc3QnKSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jcG9ydFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuXG4gICAqXG4gICAqIFJldHVybiBwb3J0IG9mIGN1cnJlbnQgdXJsLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiB1cmwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogdmFyIHBvcnQgPSAkbG9jYXRpb24ucG9ydCgpO1xuICAgKiAvLyA9PiA4MFxuICAgKiBgYGBcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSBwb3J0XG4gICAqL1xuICBwb3J0OiBsb2NhdGlvbkdldHRlcignJCRwb3J0JyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3BhdGhcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci5cbiAgICpcbiAgICogUmV0dXJuIHBhdGggb2YgY3VycmVudCB1cmwgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBDaGFuZ2UgcGF0aCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLlxuICAgKlxuICAgKiBOb3RlOiBQYXRoIHNob3VsZCBhbHdheXMgYmVnaW4gd2l0aCBmb3J3YXJkIHNsYXNoICgvKSwgdGhpcyBtZXRob2Qgd2lsbCBhZGQgdGhlIGZvcndhcmQgc2xhc2hcbiAgICogaWYgaXQgaXMgbWlzc2luZy5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBwYXRoID0gJGxvY2F0aW9uLnBhdGgoKTtcbiAgICogLy8gPT4gXCIvc29tZS9wYXRoXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpPX0gcGF0aCBOZXcgcGF0aFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHBhdGhcbiAgICovXG4gIHBhdGg6IGxvY2F0aW9uR2V0dGVyU2V0dGVyKCckJHBhdGgnLCBmdW5jdGlvbihwYXRoKSB7XG4gICAgcGF0aCA9IHBhdGggIT09IG51bGwgPyBwYXRoLnRvU3RyaW5nKCkgOiAnJztcbiAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNzZWFyY2hcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci5cbiAgICpcbiAgICogUmV0dXJuIHNlYXJjaCBwYXJ0IChhcyBvYmplY3QpIG9mIGN1cnJlbnQgdXJsIHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci5cbiAgICpcbiAgICogQ2hhbmdlIHNlYXJjaCBwYXJ0IHdoZW4gY2FsbGVkIHdpdGggcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIHVybCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgc2VhcmNoT2JqZWN0ID0gJGxvY2F0aW9uLnNlYXJjaCgpO1xuICAgKiAvLyA9PiB7Zm9vOiAnYmFyJywgYmF6OiAneG94byd9XG4gICAqXG4gICAqIC8vIHNldCBmb28gdG8gJ3lpcGVlJ1xuICAgKiAkbG9jYXRpb24uc2VhcmNoKCdmb28nLCAneWlwZWUnKTtcbiAgICogLy8gJGxvY2F0aW9uLnNlYXJjaCgpID0+IHtmb286ICd5aXBlZScsIGJhejogJ3hveG8nfVxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0LjxzdHJpbmc+fE9iamVjdC48QXJyYXkuPHN0cmluZz4+fSBzZWFyY2ggTmV3IHNlYXJjaCBwYXJhbXMgLSBzdHJpbmcgb3JcbiAgICogaGFzaCBvYmplY3QuXG4gICAqXG4gICAqIFdoZW4gY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQgdGhlIG1ldGhvZCBhY3RzIGFzIGEgc2V0dGVyLCBzZXR0aW5nIHRoZSBgc2VhcmNoYCBjb21wb25lbnRcbiAgICogb2YgYCRsb2NhdGlvbmAgdG8gdGhlIHNwZWNpZmllZCB2YWx1ZS5cbiAgICpcbiAgICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgaGFzaCBvYmplY3QgY29udGFpbmluZyBhbiBhcnJheSBvZiB2YWx1ZXMsIHRoZXNlIHZhbHVlcyB3aWxsIGJlIGVuY29kZWRcbiAgICogYXMgZHVwbGljYXRlIHNlYXJjaCBwYXJhbWV0ZXJzIGluIHRoZSB1cmwuXG4gICAqXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xOdW1iZXJ8QXJyYXk8c3RyaW5nPnxib29sZWFuKT19IHBhcmFtVmFsdWUgSWYgYHNlYXJjaGAgaXMgYSBzdHJpbmcgb3IgbnVtYmVyLCB0aGVuIGBwYXJhbVZhbHVlYFxuICAgKiB3aWxsIG92ZXJyaWRlIG9ubHkgYSBzaW5nbGUgc2VhcmNoIHByb3BlcnR5LlxuICAgKlxuICAgKiBJZiBgcGFyYW1WYWx1ZWAgaXMgYW4gYXJyYXksIGl0IHdpbGwgb3ZlcnJpZGUgdGhlIHByb3BlcnR5IG9mIHRoZSBgc2VhcmNoYCBjb21wb25lbnQgb2ZcbiAgICogYCRsb2NhdGlvbmAgc3BlY2lmaWVkIHZpYSB0aGUgZmlyc3QgYXJndW1lbnQuXG4gICAqXG4gICAqIElmIGBwYXJhbVZhbHVlYCBpcyBgbnVsbGAsIHRoZSBwcm9wZXJ0eSBzcGVjaWZpZWQgdmlhIHRoZSBmaXJzdCBhcmd1bWVudCB3aWxsIGJlIGRlbGV0ZWQuXG4gICAqXG4gICAqIElmIGBwYXJhbVZhbHVlYCBpcyBgdHJ1ZWAsIHRoZSBwcm9wZXJ0eSBzcGVjaWZpZWQgdmlhIHRoZSBmaXJzdCBhcmd1bWVudCB3aWxsIGJlIGFkZGVkIHdpdGggbm9cbiAgICogdmFsdWUgbm9yIHRyYWlsaW5nIGVxdWFsIHNpZ24uXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH0gSWYgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzIHJldHVybnMgdGhlIHBhcnNlZCBgc2VhcmNoYCBvYmplY3QuIElmIGNhbGxlZCB3aXRoXG4gICAqIG9uZSBvciBtb3JlIGFyZ3VtZW50cyByZXR1cm5zIGAkbG9jYXRpb25gIG9iamVjdCBpdHNlbGYuXG4gICAqL1xuICBzZWFyY2g6IGZ1bmN0aW9uKHNlYXJjaCwgcGFyYW1WYWx1ZSkge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gdGhpcy4kJHNlYXJjaDtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaWYgKGlzU3RyaW5nKHNlYXJjaCkgfHwgaXNOdW1iZXIoc2VhcmNoKSkge1xuICAgICAgICAgIHNlYXJjaCA9IHNlYXJjaC50b1N0cmluZygpO1xuICAgICAgICAgIHRoaXMuJCRzZWFyY2ggPSBwYXJzZUtleVZhbHVlKHNlYXJjaCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qoc2VhcmNoKSkge1xuICAgICAgICAgIHNlYXJjaCA9IGNvcHkoc2VhcmNoLCB7fSk7XG4gICAgICAgICAgLy8gcmVtb3ZlIG9iamVjdCB1bmRlZmluZWQgb3IgbnVsbCBwcm9wZXJ0aWVzXG4gICAgICAgICAgZm9yRWFjaChzZWFyY2gsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSBkZWxldGUgc2VhcmNoW2tleV07XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB0aGlzLiQkc2VhcmNoID0gc2VhcmNoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignaXNyY2hhcmcnLFxuICAgICAgICAgICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG9mIHRoZSBgJGxvY2F0aW9uI3NlYXJjaCgpYCBjYWxsIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHBhcmFtVmFsdWUpIHx8IHBhcmFtVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy4kJHNlYXJjaFtzZWFyY2hdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuJCRzZWFyY2hbc2VhcmNoXSA9IHBhcmFtVmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLiQkY29tcG9zZSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNoYXNoXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybiBoYXNoIGZyYWdtZW50IHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci5cbiAgICpcbiAgICogQ2hhbmdlIGhhc2ggZnJhZ21lbnQgd2hlbiBjYWxsZWQgd2l0aCBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvI2hhc2hWYWx1ZVxuICAgKiB2YXIgaGFzaCA9ICRsb2NhdGlvbi5oYXNoKCk7XG4gICAqIC8vID0+IFwiaGFzaFZhbHVlXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpPX0gaGFzaCBOZXcgaGFzaCBmcmFnbWVudFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IGhhc2hcbiAgICovXG4gIGhhc2g6IGxvY2F0aW9uR2V0dGVyU2V0dGVyKCckJGhhc2gnLCBmdW5jdGlvbihoYXNoKSB7XG4gICAgcmV0dXJuIGhhc2ggIT09IG51bGwgPyBoYXNoLnRvU3RyaW5nKCkgOiAnJztcbiAgfSksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3JlcGxhY2VcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIElmIGNhbGxlZCwgYWxsIGNoYW5nZXMgdG8gJGxvY2F0aW9uIGR1cmluZyBjdXJyZW50IGAkZGlnZXN0YCB3aWxsIGJlIHJlcGxhY2luZyBjdXJyZW50IGhpc3RvcnlcbiAgICogcmVjb3JkLCBpbnN0ZWFkIG9mIGFkZGluZyBuZXcgb25lLlxuICAgKi9cbiAgcmVwbGFjZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kJHJlcGxhY2UgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59O1xuXG5mb3JFYWNoKFtMb2NhdGlvbkhhc2hiYW5nSW5IdG1sNVVybCwgTG9jYXRpb25IYXNoYmFuZ1VybCwgTG9jYXRpb25IdG1sNVVybF0sIGZ1bmN0aW9uKExvY2F0aW9uKSB7XG4gIExvY2F0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobG9jYXRpb25Qcm90b3R5cGUpO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNzdGF0ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm4gdGhlIGhpc3Rvcnkgc3RhdGUgb2JqZWN0IHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci5cbiAgICpcbiAgICogQ2hhbmdlIHRoZSBoaXN0b3J5IHN0YXRlIG9iamVjdCB3aGVuIGNhbGxlZCB3aXRoIG9uZSBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC5cbiAgICogVGhlIHN0YXRlIG9iamVjdCBpcyBsYXRlciBwYXNzZWQgdG8gYHB1c2hTdGF0ZWAgb3IgYHJlcGxhY2VTdGF0ZWAuXG4gICAqXG4gICAqIE5PVEU6IFRoaXMgbWV0aG9kIGlzIHN1cHBvcnRlZCBvbmx5IGluIEhUTUw1IG1vZGUgYW5kIG9ubHkgaW4gYnJvd3NlcnMgc3VwcG9ydGluZ1xuICAgKiB0aGUgSFRNTDUgSGlzdG9yeSBBUEkgKGkuZS4gbWV0aG9kcyBgcHVzaFN0YXRlYCBhbmQgYHJlcGxhY2VTdGF0ZWApLiBJZiB5b3UgbmVlZCB0byBzdXBwb3J0XG4gICAqIG9sZGVyIGJyb3dzZXJzIChsaWtlIElFOSBvciBBbmRyb2lkIDwgNC4wKSwgZG9uJ3QgdXNlIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdD19IHN0YXRlIFN0YXRlIG9iamVjdCBmb3IgcHVzaFN0YXRlIG9yIHJlcGxhY2VTdGF0ZVxuICAgKiBAcmV0dXJuIHtvYmplY3R9IHN0YXRlXG4gICAqL1xuICBMb2NhdGlvbi5wcm90b3R5cGUuc3RhdGUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuJCRzdGF0ZTtcbiAgICB9XG5cbiAgICBpZiAoTG9jYXRpb24gIT09IExvY2F0aW9uSHRtbDVVcmwgfHwgIXRoaXMuJCRodG1sNSkge1xuICAgICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdub3N0YXRlJywgJ0hpc3RvcnkgQVBJIHN0YXRlIHN1cHBvcnQgaXMgYXZhaWxhYmxlIG9ubHkgJyArXG4gICAgICAgICdpbiBIVE1MNSBtb2RlIGFuZCBvbmx5IGluIGJyb3dzZXJzIHN1cHBvcnRpbmcgSFRNTDUgSGlzdG9yeSBBUEknKTtcbiAgICB9XG4gICAgLy8gVGhlIHVzZXIgbWlnaHQgbW9kaWZ5IGBzdGF0ZU9iamVjdGAgYWZ0ZXIgaW52b2tpbmcgYCRsb2NhdGlvbi5zdGF0ZShzdGF0ZU9iamVjdClgXG4gICAgLy8gYnV0IHdlJ3JlIGNoYW5naW5nIHRoZSAkJHN0YXRlIHJlZmVyZW5jZSB0byAkYnJvd3Nlci5zdGF0ZSgpIGR1cmluZyB0aGUgJGRpZ2VzdFxuICAgIC8vIHNvIHRoZSBtb2RpZmljYXRpb24gd2luZG93IGlzIG5hcnJvdy5cbiAgICB0aGlzLiQkc3RhdGUgPSBpc1VuZGVmaW5lZChzdGF0ZSkgPyBudWxsIDogc3RhdGU7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbn0pO1xuXG5cbmZ1bmN0aW9uIGxvY2F0aW9uR2V0dGVyKHByb3BlcnR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpc1twcm9wZXJ0eV07XG4gIH07XG59XG5cblxuZnVuY3Rpb24gbG9jYXRpb25HZXR0ZXJTZXR0ZXIocHJvcGVydHksIHByZXByb2Nlc3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRoaXNbcHJvcGVydHldO1xuICAgIH1cblxuICAgIHRoaXNbcHJvcGVydHldID0gcHJlcHJvY2Vzcyh2YWx1ZSk7XG4gICAgdGhpcy4kJGNvbXBvc2UoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xufVxuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRsb2NhdGlvblxuICpcbiAqIEByZXF1aXJlcyAkcm9vdEVsZW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSAkbG9jYXRpb24gc2VydmljZSBwYXJzZXMgdGhlIFVSTCBpbiB0aGUgYnJvd3NlciBhZGRyZXNzIGJhciAoYmFzZWQgb24gdGhlXG4gKiBbd2luZG93LmxvY2F0aW9uXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi93aW5kb3cubG9jYXRpb24pKSBhbmQgbWFrZXMgdGhlIFVSTFxuICogYXZhaWxhYmxlIHRvIHlvdXIgYXBwbGljYXRpb24uIENoYW5nZXMgdG8gdGhlIFVSTCBpbiB0aGUgYWRkcmVzcyBiYXIgYXJlIHJlZmxlY3RlZCBpbnRvXG4gKiAkbG9jYXRpb24gc2VydmljZSBhbmQgY2hhbmdlcyB0byAkbG9jYXRpb24gYXJlIHJlZmxlY3RlZCBpbnRvIHRoZSBicm93c2VyIGFkZHJlc3MgYmFyLlxuICpcbiAqICoqVGhlICRsb2NhdGlvbiBzZXJ2aWNlOioqXG4gKlxuICogLSBFeHBvc2VzIHRoZSBjdXJyZW50IFVSTCBpbiB0aGUgYnJvd3NlciBhZGRyZXNzIGJhciwgc28geW91IGNhblxuICogICAtIFdhdGNoIGFuZCBvYnNlcnZlIHRoZSBVUkwuXG4gKiAgIC0gQ2hhbmdlIHRoZSBVUkwuXG4gKiAtIFN5bmNocm9uaXplcyB0aGUgVVJMIHdpdGggdGhlIGJyb3dzZXIgd2hlbiB0aGUgdXNlclxuICogICAtIENoYW5nZXMgdGhlIGFkZHJlc3MgYmFyLlxuICogICAtIENsaWNrcyB0aGUgYmFjayBvciBmb3J3YXJkIGJ1dHRvbiAob3IgY2xpY2tzIGEgSGlzdG9yeSBsaW5rKS5cbiAqICAgLSBDbGlja3Mgb24gYSBsaW5rLlxuICogLSBSZXByZXNlbnRzIHRoZSBVUkwgb2JqZWN0IGFzIGEgc2V0IG9mIG1ldGhvZHMgKHByb3RvY29sLCBob3N0LCBwb3J0LCBwYXRoLCBzZWFyY2gsIGhhc2gpLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSB7QGxpbmsgZ3VpZGUvJGxvY2F0aW9uIERldmVsb3BlciBHdWlkZTogVXNpbmcgJGxvY2F0aW9ufVxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkbG9jYXRpb25Qcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2UgdGhlIGAkbG9jYXRpb25Qcm92aWRlcmAgdG8gY29uZmlndXJlIGhvdyB0aGUgYXBwbGljYXRpb24gZGVlcCBsaW5raW5nIHBhdGhzIGFyZSBzdG9yZWQuXG4gKi9cbmZ1bmN0aW9uICRMb2NhdGlvblByb3ZpZGVyKCkge1xuICB2YXIgaGFzaFByZWZpeCA9ICcnLFxuICAgICAgaHRtbDVNb2RlID0ge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgcmVxdWlyZUJhc2U6IHRydWUsXG4gICAgICAgIHJld3JpdGVMaW5rczogdHJ1ZVxuICAgICAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb25Qcm92aWRlciNoYXNoUHJlZml4XG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZz19IHByZWZpeCBQcmVmaXggZm9yIGhhc2ggcGFydCAoY29udGFpbmluZyBwYXRoIGFuZCBzZWFyY2gpXG4gICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAqL1xuICB0aGlzLmhhc2hQcmVmaXggPSBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHByZWZpeCkpIHtcbiAgICAgIGhhc2hQcmVmaXggPSBwcmVmaXg7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGhhc2hQcmVmaXg7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvblByb3ZpZGVyI2h0bWw1TW9kZVxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQHBhcmFtIHsoYm9vbGVhbnxPYmplY3QpPX0gbW9kZSBJZiBib29sZWFuLCBzZXRzIGBodG1sNU1vZGUuZW5hYmxlZGAgdG8gdmFsdWUuXG4gICAqICAgSWYgb2JqZWN0LCBzZXRzIGBlbmFibGVkYCwgYHJlcXVpcmVCYXNlYCBhbmQgYHJld3JpdGVMaW5rc2AgdG8gcmVzcGVjdGl2ZSB2YWx1ZXMuIFN1cHBvcnRlZFxuICAgKiAgIHByb3BlcnRpZXM6XG4gICAqICAgLSAqKmVuYWJsZWQqKiDigJMgYHtib29sZWFufWAg4oCTIChkZWZhdWx0OiBmYWxzZSkgSWYgdHJ1ZSwgd2lsbCByZWx5IG9uIGBoaXN0b3J5LnB1c2hTdGF0ZWAgdG9cbiAgICogICAgIGNoYW5nZSB1cmxzIHdoZXJlIHN1cHBvcnRlZC4gV2lsbCBmYWxsIGJhY2sgdG8gaGFzaC1wcmVmaXhlZCBwYXRocyBpbiBicm93c2VycyB0aGF0IGRvIG5vdFxuICAgKiAgICAgc3VwcG9ydCBgcHVzaFN0YXRlYC5cbiAgICogICAtICoqcmVxdWlyZUJhc2UqKiAtIGB7Ym9vbGVhbn1gIC0gKGRlZmF1bHQ6IGB0cnVlYCkgV2hlbiBodG1sNU1vZGUgaXMgZW5hYmxlZCwgc3BlY2lmaWVzXG4gICAqICAgICB3aGV0aGVyIG9yIG5vdCBhIDxiYXNlPiB0YWcgaXMgcmVxdWlyZWQgdG8gYmUgcHJlc2VudC4gSWYgYGVuYWJsZWRgIGFuZCBgcmVxdWlyZUJhc2VgIGFyZVxuICAgKiAgICAgdHJ1ZSwgYW5kIGEgYmFzZSB0YWcgaXMgbm90IHByZXNlbnQsIGFuIGVycm9yIHdpbGwgYmUgdGhyb3duIHdoZW4gYCRsb2NhdGlvbmAgaXMgaW5qZWN0ZWQuXG4gICAqICAgICBTZWUgdGhlIHtAbGluayBndWlkZS8kbG9jYXRpb24gJGxvY2F0aW9uIGd1aWRlIGZvciBtb3JlIGluZm9ybWF0aW9ufVxuICAgKiAgIC0gKipyZXdyaXRlTGlua3MqKiAtIGB7Ym9vbGVhbn1gIC0gKGRlZmF1bHQ6IGB0cnVlYCkgV2hlbiBodG1sNU1vZGUgaXMgZW5hYmxlZCxcbiAgICogICAgIGVuYWJsZXMvZGlzYWJsZXMgdXJsIHJld3JpdGluZyBmb3IgcmVsYXRpdmUgbGlua3MuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IGh0bWw1TW9kZSBvYmplY3QgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXJcbiAgICovXG4gIHRoaXMuaHRtbDVNb2RlID0gZnVuY3Rpb24obW9kZSkge1xuICAgIGlmIChpc0Jvb2xlYW4obW9kZSkpIHtcbiAgICAgIGh0bWw1TW9kZS5lbmFibGVkID0gbW9kZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QobW9kZSkpIHtcblxuICAgICAgaWYgKGlzQm9vbGVhbihtb2RlLmVuYWJsZWQpKSB7XG4gICAgICAgIGh0bWw1TW9kZS5lbmFibGVkID0gbW9kZS5lbmFibGVkO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNCb29sZWFuKG1vZGUucmVxdWlyZUJhc2UpKSB7XG4gICAgICAgIGh0bWw1TW9kZS5yZXF1aXJlQmFzZSA9IG1vZGUucmVxdWlyZUJhc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Jvb2xlYW4obW9kZS5yZXdyaXRlTGlua3MpKSB7XG4gICAgICAgIGh0bWw1TW9kZS5yZXdyaXRlTGlua3MgPSBtb2RlLnJld3JpdGVMaW5rcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBodG1sNU1vZGU7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZXZlbnRcbiAgICogQG5hbWUgJGxvY2F0aW9uIyRsb2NhdGlvbkNoYW5nZVN0YXJ0XG4gICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGVcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEJyb2FkY2FzdGVkIGJlZm9yZSBhIFVSTCB3aWxsIGNoYW5nZS5cbiAgICpcbiAgICogVGhpcyBjaGFuZ2UgY2FuIGJlIHByZXZlbnRlZCBieSBjYWxsaW5nXG4gICAqIGBwcmV2ZW50RGVmYXVsdGAgbWV0aG9kIG9mIHRoZSBldmVudC4gU2VlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn0gZm9yIG1vcmVcbiAgICogZGV0YWlscyBhYm91dCBldmVudCBvYmplY3QuIFVwb24gc3VjY2Vzc2Z1bCBjaGFuZ2VcbiAgICoge0BsaW5rIG5nLiRsb2NhdGlvbiMkbG9jYXRpb25DaGFuZ2VTdWNjZXNzICRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3N9IGlzIGZpcmVkLlxuICAgKlxuICAgKiBUaGUgYG5ld1N0YXRlYCBhbmQgYG9sZFN0YXRlYCBwYXJhbWV0ZXJzIG1heSBiZSBkZWZpbmVkIG9ubHkgaW4gSFRNTDUgbW9kZSBhbmQgd2hlblxuICAgKiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGUgSFRNTDUgSGlzdG9yeSBBUEkuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1VybCBOZXcgVVJMXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb2xkVXJsIFVSTCB0aGF0IHdhcyBiZWZvcmUgaXQgd2FzIGNoYW5nZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmV3U3RhdGUgTmV3IGhpc3Rvcnkgc3RhdGUgb2JqZWN0XG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb2xkU3RhdGUgSGlzdG9yeSBzdGF0ZSBvYmplY3QgdGhhdCB3YXMgYmVmb3JlIGl0IHdhcyBjaGFuZ2VkLlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIGV2ZW50XG4gICAqIEBuYW1lICRsb2NhdGlvbiMkbG9jYXRpb25DaGFuZ2VTdWNjZXNzXG4gICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGVcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEJyb2FkY2FzdGVkIGFmdGVyIGEgVVJMIHdhcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBUaGUgYG5ld1N0YXRlYCBhbmQgYG9sZFN0YXRlYCBwYXJhbWV0ZXJzIG1heSBiZSBkZWZpbmVkIG9ubHkgaW4gSFRNTDUgbW9kZSBhbmQgd2hlblxuICAgKiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGUgSFRNTDUgSGlzdG9yeSBBUEkuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1VybCBOZXcgVVJMXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb2xkVXJsIFVSTCB0aGF0IHdhcyBiZWZvcmUgaXQgd2FzIGNoYW5nZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmV3U3RhdGUgTmV3IGhpc3Rvcnkgc3RhdGUgb2JqZWN0XG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb2xkU3RhdGUgSGlzdG9yeSBzdGF0ZSBvYmplY3QgdGhhdCB3YXMgYmVmb3JlIGl0IHdhcyBjaGFuZ2VkLlxuICAgKi9cblxuICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGJyb3dzZXInLCAnJHNuaWZmZXInLCAnJHJvb3RFbGVtZW50JywgJyR3aW5kb3cnLFxuICAgICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgJGJyb3dzZXIsICRzbmlmZmVyLCAkcm9vdEVsZW1lbnQsICR3aW5kb3cpIHtcbiAgICB2YXIgJGxvY2F0aW9uLFxuICAgICAgICBMb2NhdGlvbk1vZGUsXG4gICAgICAgIGJhc2VIcmVmID0gJGJyb3dzZXIuYmFzZUhyZWYoKSwgLy8gaWYgYmFzZVtocmVmXSBpcyB1bmRlZmluZWQsIGl0IGRlZmF1bHRzIHRvICcnXG4gICAgICAgIGluaXRpYWxVcmwgPSAkYnJvd3Nlci51cmwoKSxcbiAgICAgICAgYXBwQmFzZTtcblxuICAgIGlmIChodG1sNU1vZGUuZW5hYmxlZCkge1xuICAgICAgaWYgKCFiYXNlSHJlZiAmJiBodG1sNU1vZGUucmVxdWlyZUJhc2UpIHtcbiAgICAgICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdub2Jhc2UnLFxuICAgICAgICAgIFwiJGxvY2F0aW9uIGluIEhUTUw1IG1vZGUgcmVxdWlyZXMgYSA8YmFzZT4gdGFnIHRvIGJlIHByZXNlbnQhXCIpO1xuICAgICAgfVxuICAgICAgYXBwQmFzZSA9IHNlcnZlckJhc2UoaW5pdGlhbFVybCkgKyAoYmFzZUhyZWYgfHwgJy8nKTtcbiAgICAgIExvY2F0aW9uTW9kZSA9ICRzbmlmZmVyLmhpc3RvcnkgPyBMb2NhdGlvbkh0bWw1VXJsIDogTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwcEJhc2UgPSBzdHJpcEhhc2goaW5pdGlhbFVybCk7XG4gICAgICBMb2NhdGlvbk1vZGUgPSBMb2NhdGlvbkhhc2hiYW5nVXJsO1xuICAgIH1cbiAgICAkbG9jYXRpb24gPSBuZXcgTG9jYXRpb25Nb2RlKGFwcEJhc2UsICcjJyArIGhhc2hQcmVmaXgpO1xuICAgICRsb2NhdGlvbi4kJHBhcnNlTGlua1VybChpbml0aWFsVXJsLCBpbml0aWFsVXJsKTtcblxuICAgICRsb2NhdGlvbi4kJHN0YXRlID0gJGJyb3dzZXIuc3RhdGUoKTtcblxuICAgIHZhciBJR05PUkVfVVJJX1JFR0VYUCA9IC9eXFxzKihqYXZhc2NyaXB0fG1haWx0byk6L2k7XG5cbiAgICBmdW5jdGlvbiBzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrKHVybCwgcmVwbGFjZSwgc3RhdGUpIHtcbiAgICAgIHZhciBvbGRVcmwgPSAkbG9jYXRpb24udXJsKCk7XG4gICAgICB2YXIgb2xkU3RhdGUgPSAkbG9jYXRpb24uJCRzdGF0ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgICRicm93c2VyLnVybCh1cmwsIHJlcGxhY2UsIHN0YXRlKTtcblxuICAgICAgICAvLyBNYWtlIHN1cmUgJGxvY2F0aW9uLnN0YXRlKCkgcmV0dXJucyByZWZlcmVudGlhbGx5IGlkZW50aWNhbCAobm90IGp1c3QgZGVlcGx5IGVxdWFsKVxuICAgICAgICAvLyBzdGF0ZSBvYmplY3Q7IHRoaXMgbWFrZXMgcG9zc2libGUgcXVpY2sgY2hlY2tpbmcgaWYgdGhlIHN0YXRlIGNoYW5nZWQgaW4gdGhlIGRpZ2VzdFxuICAgICAgICAvLyBsb29wLiBDaGVja2luZyBkZWVwIGVxdWFsaXR5IHdvdWxkIGJlIHRvbyBleHBlbnNpdmUuXG4gICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gJGJyb3dzZXIuc3RhdGUoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gUmVzdG9yZSBvbGQgdmFsdWVzIGlmIHB1c2hTdGF0ZSBmYWlsc1xuICAgICAgICAkbG9jYXRpb24udXJsKG9sZFVybCk7XG4gICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gb2xkU3RhdGU7XG5cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkcm9vdEVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIC8vIFRPRE8odm9qdGEpOiByZXdyaXRlIGxpbmsgd2hlbiBvcGVuaW5nIGluIG5ldyB0YWIvd2luZG93IChpbiBsZWdhY3kgYnJvd3NlcilcbiAgICAgIC8vIGN1cnJlbnRseSB3ZSBvcGVuIG5pY2UgdXJsIGxpbmsgYW5kIHJlZGlyZWN0IHRoZW5cblxuICAgICAgaWYgKCFodG1sNU1vZGUucmV3cml0ZUxpbmtzIHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC5zaGlmdEtleSB8fCBldmVudC53aGljaCA9PSAyIHx8IGV2ZW50LmJ1dHRvbiA9PSAyKSByZXR1cm47XG5cbiAgICAgIHZhciBlbG0gPSBqcUxpdGUoZXZlbnQudGFyZ2V0KTtcblxuICAgICAgLy8gdHJhdmVyc2UgdGhlIERPTSB1cCB0byBmaW5kIGZpcnN0IEEgdGFnXG4gICAgICB3aGlsZSAobm9kZU5hbWVfKGVsbVswXSkgIT09ICdhJykge1xuICAgICAgICAvLyBpZ25vcmUgcmV3cml0aW5nIGlmIG5vIEEgdGFnIChyZWFjaGVkIHJvb3QgZWxlbWVudCwgb3Igbm8gcGFyZW50IC0gcmVtb3ZlZCBmcm9tIGRvY3VtZW50KVxuICAgICAgICBpZiAoZWxtWzBdID09PSAkcm9vdEVsZW1lbnRbMF0gfHwgIShlbG0gPSBlbG0ucGFyZW50KCkpWzBdKSByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBhYnNIcmVmID0gZWxtLnByb3AoJ2hyZWYnKTtcbiAgICAgIC8vIGdldCB0aGUgYWN0dWFsIGhyZWYgYXR0cmlidXRlIC0gc2VlXG4gICAgICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZGQzNDcxNDgodj12cy44NSkuYXNweFxuICAgICAgdmFyIHJlbEhyZWYgPSBlbG0uYXR0cignaHJlZicpIHx8IGVsbS5hdHRyKCd4bGluazpocmVmJyk7XG5cbiAgICAgIGlmIChpc09iamVjdChhYnNIcmVmKSAmJiBhYnNIcmVmLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IFNWR0FuaW1hdGVkU3RyaW5nXScpIHtcbiAgICAgICAgLy8gU1ZHQW5pbWF0ZWRTdHJpbmcuYW5pbVZhbCBzaG91bGQgYmUgaWRlbnRpY2FsIHRvIFNWR0FuaW1hdGVkU3RyaW5nLmJhc2VWYWwsIHVubGVzcyBkdXJpbmdcbiAgICAgICAgLy8gYW4gYW5pbWF0aW9uLlxuICAgICAgICBhYnNIcmVmID0gdXJsUmVzb2x2ZShhYnNIcmVmLmFuaW1WYWwpLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIC8vIElnbm9yZSB3aGVuIHVybCBpcyBzdGFydGVkIHdpdGggamF2YXNjcmlwdDogb3IgbWFpbHRvOlxuICAgICAgaWYgKElHTk9SRV9VUklfUkVHRVhQLnRlc3QoYWJzSHJlZikpIHJldHVybjtcblxuICAgICAgaWYgKGFic0hyZWYgJiYgIWVsbS5hdHRyKCd0YXJnZXQnKSAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgaWYgKCRsb2NhdGlvbi4kJHBhcnNlTGlua1VybChhYnNIcmVmLCByZWxIcmVmKSkge1xuICAgICAgICAgIC8vIFdlIGRvIGEgcHJldmVudERlZmF1bHQgZm9yIGFsbCB1cmxzIHRoYXQgYXJlIHBhcnQgb2YgdGhlIGFuZ3VsYXIgYXBwbGljYXRpb24sXG4gICAgICAgICAgLy8gaW4gaHRtbDVtb2RlIGFuZCBhbHNvIHdpdGhvdXQsIHNvIHRoYXQgd2UgYXJlIGFibGUgdG8gYWJvcnQgbmF2aWdhdGlvbiB3aXRob3V0XG4gICAgICAgICAgLy8gZ2V0dGluZyBkb3VibGUgZW50cmllcyBpbiB0aGUgbG9jYXRpb24gaGlzdG9yeS5cbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIC8vIHVwZGF0ZSBsb2NhdGlvbiBtYW51YWxseVxuICAgICAgICAgIGlmICgkbG9jYXRpb24uYWJzVXJsKCkgIT0gJGJyb3dzZXIudXJsKCkpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7XG4gICAgICAgICAgICAvLyBoYWNrIHRvIHdvcmsgYXJvdW5kIEZGNiBidWcgNjg0MjA4IHdoZW4gc2NlbmFyaW8gcnVubmVyIGNsaWNrcyBvbiBsaW5rc1xuICAgICAgICAgICAgJHdpbmRvdy5hbmd1bGFyWydmZi02ODQyMDgtcHJldmVudERlZmF1bHQnXSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cblxuICAgIC8vIHJld3JpdGUgaGFzaGJhbmcgdXJsIDw+IGh0bWw1IHVybFxuICAgIGlmICh0cmltRW1wdHlIYXNoKCRsb2NhdGlvbi5hYnNVcmwoKSkgIT0gdHJpbUVtcHR5SGFzaChpbml0aWFsVXJsKSkge1xuICAgICAgJGJyb3dzZXIudXJsKCRsb2NhdGlvbi5hYnNVcmwoKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgdmFyIGluaXRpYWxpemluZyA9IHRydWU7XG5cbiAgICAvLyB1cGRhdGUgJGxvY2F0aW9uIHdoZW4gJGJyb3dzZXIgdXJsIGNoYW5nZXNcbiAgICAkYnJvd3Nlci5vblVybENoYW5nZShmdW5jdGlvbihuZXdVcmwsIG5ld1N0YXRlKSB7XG4gICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvbGRVcmwgPSAkbG9jYXRpb24uYWJzVXJsKCk7XG4gICAgICAgIHZhciBvbGRTdGF0ZSA9ICRsb2NhdGlvbi4kJHN0YXRlO1xuICAgICAgICB2YXIgZGVmYXVsdFByZXZlbnRlZDtcblxuICAgICAgICAkbG9jYXRpb24uJCRwYXJzZShuZXdVcmwpO1xuICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9IG5ld1N0YXRlO1xuXG4gICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQgPSAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRsb2NhdGlvbkNoYW5nZVN0YXJ0JywgbmV3VXJsLCBvbGRVcmwsXG4gICAgICAgICAgICBuZXdTdGF0ZSwgb2xkU3RhdGUpLmRlZmF1bHRQcmV2ZW50ZWQ7XG5cbiAgICAgICAgLy8gaWYgdGhlIGxvY2F0aW9uIHdhcyBjaGFuZ2VkIGJ5IGEgYCRsb2NhdGlvbkNoYW5nZVN0YXJ0YCBoYW5kbGVyIHRoZW4gc3RvcFxuICAgICAgICAvLyBwcm9jZXNzaW5nIHRoaXMgbG9jYXRpb24gY2hhbmdlXG4gICAgICAgIGlmICgkbG9jYXRpb24uYWJzVXJsKCkgIT09IG5ld1VybCkgcmV0dXJuO1xuXG4gICAgICAgIGlmIChkZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgJGxvY2F0aW9uLiQkcGFyc2Uob2xkVXJsKTtcbiAgICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9IG9sZFN0YXRlO1xuICAgICAgICAgIHNldEJyb3dzZXJVcmxXaXRoRmFsbGJhY2sob2xkVXJsLCBmYWxzZSwgb2xkU3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluaXRpYWxpemluZyA9IGZhbHNlO1xuICAgICAgICAgIGFmdGVyTG9jYXRpb25DaGFuZ2Uob2xkVXJsLCBvbGRTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIGJyb3dzZXJcbiAgICAkcm9vdFNjb3BlLiR3YXRjaChmdW5jdGlvbiAkbG9jYXRpb25XYXRjaCgpIHtcbiAgICAgIHZhciBvbGRVcmwgPSB0cmltRW1wdHlIYXNoKCRicm93c2VyLnVybCgpKTtcbiAgICAgIHZhciBuZXdVcmwgPSB0cmltRW1wdHlIYXNoKCRsb2NhdGlvbi5hYnNVcmwoKSk7XG4gICAgICB2YXIgb2xkU3RhdGUgPSAkYnJvd3Nlci5zdGF0ZSgpO1xuICAgICAgdmFyIGN1cnJlbnRSZXBsYWNlID0gJGxvY2F0aW9uLiQkcmVwbGFjZTtcbiAgICAgIHZhciB1cmxPclN0YXRlQ2hhbmdlZCA9IG9sZFVybCAhPT0gbmV3VXJsIHx8XG4gICAgICAgICgkbG9jYXRpb24uJCRodG1sNSAmJiAkc25pZmZlci5oaXN0b3J5ICYmIG9sZFN0YXRlICE9PSAkbG9jYXRpb24uJCRzdGF0ZSk7XG5cbiAgICAgIGlmIChpbml0aWFsaXppbmcgfHwgdXJsT3JTdGF0ZUNoYW5nZWQpIHtcbiAgICAgICAgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG5cbiAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBuZXdVcmwgPSAkbG9jYXRpb24uYWJzVXJsKCk7XG4gICAgICAgICAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRsb2NhdGlvbkNoYW5nZVN0YXJ0JywgbmV3VXJsLCBvbGRVcmwsXG4gICAgICAgICAgICAgICRsb2NhdGlvbi4kJHN0YXRlLCBvbGRTdGF0ZSkuZGVmYXVsdFByZXZlbnRlZDtcblxuICAgICAgICAgIC8vIGlmIHRoZSBsb2NhdGlvbiB3YXMgY2hhbmdlZCBieSBhIGAkbG9jYXRpb25DaGFuZ2VTdGFydGAgaGFuZGxlciB0aGVuIHN0b3BcbiAgICAgICAgICAvLyBwcm9jZXNzaW5nIHRoaXMgbG9jYXRpb24gY2hhbmdlXG4gICAgICAgICAgaWYgKCRsb2NhdGlvbi5hYnNVcmwoKSAhPT0gbmV3VXJsKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgJGxvY2F0aW9uLiQkcGFyc2Uob2xkVXJsKTtcbiAgICAgICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gb2xkU3RhdGU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh1cmxPclN0YXRlQ2hhbmdlZCkge1xuICAgICAgICAgICAgICBzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrKG5ld1VybCwgY3VycmVudFJlcGxhY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkU3RhdGUgPT09ICRsb2NhdGlvbi4kJHN0YXRlID8gbnVsbCA6ICRsb2NhdGlvbi4kJHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFmdGVyTG9jYXRpb25DaGFuZ2Uob2xkVXJsLCBvbGRTdGF0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgJGxvY2F0aW9uLiQkcmVwbGFjZSA9IGZhbHNlO1xuXG4gICAgICAvLyB3ZSBkb24ndCBuZWVkIHRvIHJldHVybiBhbnl0aGluZyBiZWNhdXNlICRldmFsQXN5bmMgd2lsbCBtYWtlIHRoZSBkaWdlc3QgbG9vcCBkaXJ0eSB3aGVuXG4gICAgICAvLyB0aGVyZSBpcyBhIGNoYW5nZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuICRsb2NhdGlvbjtcblxuICAgIGZ1bmN0aW9uIGFmdGVyTG9jYXRpb25DaGFuZ2Uob2xkVXJsLCBvbGRTdGF0ZSkge1xuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgJGxvY2F0aW9uLmFic1VybCgpLCBvbGRVcmwsXG4gICAgICAgICRsb2NhdGlvbi4kJHN0YXRlLCBvbGRTdGF0ZSk7XG4gICAgfVxufV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRsb2dcbiAqIEByZXF1aXJlcyAkd2luZG93XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTaW1wbGUgc2VydmljZSBmb3IgbG9nZ2luZy4gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBzYWZlbHkgd3JpdGVzIHRoZSBtZXNzYWdlXG4gKiBpbnRvIHRoZSBicm93c2VyJ3MgY29uc29sZSAoaWYgcHJlc2VudCkuXG4gKlxuICogVGhlIG1haW4gcHVycG9zZSBvZiB0aGlzIHNlcnZpY2UgaXMgdG8gc2ltcGxpZnkgZGVidWdnaW5nIGFuZCB0cm91Ymxlc2hvb3RpbmcuXG4gKlxuICogVGhlIGRlZmF1bHQgaXMgdG8gbG9nIGBkZWJ1Z2AgbWVzc2FnZXMuIFlvdSBjYW4gdXNlXG4gKiB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyIG5nLiRsb2dQcm92aWRlciNkZWJ1Z0VuYWJsZWR9IHRvIGNoYW5nZSB0aGlzLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJsb2dFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICBhbmd1bGFyLm1vZHVsZSgnbG9nRXhhbXBsZScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0xvZ0NvbnRyb2xsZXInLCBbJyRzY29wZScsICckbG9nJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9nKSB7XG4gICAgICAgICAgICRzY29wZS4kbG9nID0gJGxvZztcbiAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSAnSGVsbG8gV29ybGQhJztcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkxvZ0NvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxwPlJlbG9hZCB0aGlzIHBhZ2Ugd2l0aCBvcGVuIGNvbnNvbGUsIGVudGVyIHRleHQgYW5kIGhpdCB0aGUgbG9nIGJ1dHRvbi4uLjwvcD5cbiAgICAgICAgIDxsYWJlbD5NZXNzYWdlOlxuICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJtZXNzYWdlXCIgLz48L2xhYmVsPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIiRsb2cubG9nKG1lc3NhZ2UpXCI+bG9nPC9idXR0b24+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiJGxvZy53YXJuKG1lc3NhZ2UpXCI+d2FybjwvYnV0dG9uPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIiRsb2cuaW5mbyhtZXNzYWdlKVwiPmluZm88L2J1dHRvbj5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLmVycm9yKG1lc3NhZ2UpXCI+ZXJyb3I8L2J1dHRvbj5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLmRlYnVnKG1lc3NhZ2UpXCI+ZGVidWc8L2J1dHRvbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkbG9nUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoZSBgJGxvZ1Byb3ZpZGVyYCB0byBjb25maWd1cmUgaG93IHRoZSBhcHBsaWNhdGlvbiBsb2dzIG1lc3NhZ2VzXG4gKi9cbmZ1bmN0aW9uICRMb2dQcm92aWRlcigpIHtcbiAgdmFyIGRlYnVnID0gdHJ1ZSxcbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2dQcm92aWRlciNkZWJ1Z0VuYWJsZWRcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGZsYWcgZW5hYmxlIG9yIGRpc2FibGUgZGVidWcgbGV2ZWwgbWVzc2FnZXNcbiAgICogQHJldHVybnMgeyp9IGN1cnJlbnQgdmFsdWUgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXJcbiAgICovXG4gIHRoaXMuZGVidWdFbmFibGVkID0gZnVuY3Rpb24oZmxhZykge1xuICAgIGlmIChpc0RlZmluZWQoZmxhZykpIHtcbiAgICAgIGRlYnVnID0gZmxhZztcbiAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRlYnVnO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCBmdW5jdGlvbigkd2luZG93KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyNsb2dcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGEgbG9nIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgbG9nOiBjb25zb2xlTG9nKCdsb2cnKSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkbG9nI2luZm9cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGFuIGluZm9ybWF0aW9uIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgaW5mbzogY29uc29sZUxvZygnaW5mbycpLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRsb2cjd2FyblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYSB3YXJuaW5nIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgd2FybjogY29uc29sZUxvZygnd2FybicpLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRsb2cjZXJyb3JcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGFuIGVycm9yIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgZXJyb3I6IGNvbnNvbGVMb2coJ2Vycm9yJyksXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyNkZWJ1Z1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYSBkZWJ1ZyBtZXNzYWdlXG4gICAgICAgKi9cbiAgICAgIGRlYnVnOiAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBmbiA9IGNvbnNvbGVMb2coJ2RlYnVnJyk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChkZWJ1Zykge1xuICAgICAgICAgICAgZm4uYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KCkpXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdEVycm9yKGFyZykge1xuICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGlmIChhcmcuc3RhY2spIHtcbiAgICAgICAgICBhcmcgPSAoYXJnLm1lc3NhZ2UgJiYgYXJnLnN0YWNrLmluZGV4T2YoYXJnLm1lc3NhZ2UpID09PSAtMSlcbiAgICAgICAgICAgICAgPyAnRXJyb3I6ICcgKyBhcmcubWVzc2FnZSArICdcXG4nICsgYXJnLnN0YWNrXG4gICAgICAgICAgICAgIDogYXJnLnN0YWNrO1xuICAgICAgICB9IGVsc2UgaWYgKGFyZy5zb3VyY2VVUkwpIHtcbiAgICAgICAgICBhcmcgPSBhcmcubWVzc2FnZSArICdcXG4nICsgYXJnLnNvdXJjZVVSTCArICc6JyArIGFyZy5saW5lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnNvbGVMb2codHlwZSkge1xuICAgICAgdmFyIGNvbnNvbGUgPSAkd2luZG93LmNvbnNvbGUgfHwge30sXG4gICAgICAgICAgbG9nRm4gPSBjb25zb2xlW3R5cGVdIHx8IGNvbnNvbGUubG9nIHx8IG5vb3AsXG4gICAgICAgICAgaGFzQXBwbHkgPSBmYWxzZTtcblxuICAgICAgLy8gTm90ZTogcmVhZGluZyBsb2dGbi5hcHBseSB0aHJvd3MgYW4gZXJyb3IgaW4gSUUxMSBpbiBJRTggZG9jdW1lbnQgbW9kZS5cbiAgICAgIC8vIFRoZSByZWFzb24gYmVoaW5kIHRoaXMgaXMgdGhhdCBjb25zb2xlLmxvZyBoYXMgdHlwZSBcIm9iamVjdFwiIGluIElFOC4uLlxuICAgICAgdHJ5IHtcbiAgICAgICAgaGFzQXBwbHkgPSAhIWxvZ0ZuLmFwcGx5O1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgaWYgKGhhc0FwcGx5KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgIGZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgICAgIGFyZ3MucHVzaChmb3JtYXRFcnJvcihhcmcpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gbG9nRm4uYXBwbHkoY29uc29sZSwgYXJncyk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8vIHdlIGFyZSBJRSB3aGljaCBlaXRoZXIgZG9lc24ndCBoYXZlIHdpbmRvdy5jb25zb2xlID0+IHRoaXMgaXMgbm9vcCBhbmQgd2UgZG8gbm90aGluZyxcbiAgICAgIC8vIG9yIHdlIGFyZSBJRSB3aGVyZSBjb25zb2xlLmxvZyBkb2Vzbid0IGhhdmUgYXBwbHkgc28gd2UgbG9nIGF0IGxlYXN0IGZpcnN0IDIgYXJnc1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGFyZzEsIGFyZzIpIHtcbiAgICAgICAgbG9nRm4oYXJnMSwgYXJnMiA9PSBudWxsID8gJycgOiBhcmcyKTtcbiAgICAgIH07XG4gICAgfVxuICB9XTtcbn1cblxuLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICogICAgIEFueSBjb21taXRzIHRvIHRoaXMgZmlsZSBzaG91bGQgYmUgcmV2aWV3ZWQgd2l0aCBzZWN1cml0eSBpbiBtaW5kLiAgKlxuICogICBDaGFuZ2VzIHRvIHRoaXMgZmlsZSBjYW4gcG90ZW50aWFsbHkgY3JlYXRlIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4gKlxuICogICAgICAgICAgQW4gYXBwcm92YWwgZnJvbSAyIENvcmUgbWVtYmVycyB3aXRoIGhpc3Rvcnkgb2YgbW9kaWZ5aW5nICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBmaWxlIGlzIHJlcXVpcmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogIERvZXMgdGhlIGNoYW5nZSBzb21laG93IGFsbG93IGZvciBhcmJpdHJhcnkgamF2YXNjcmlwdCB0byBiZSBleGVjdXRlZD8gKlxuICogICAgT3IgYWxsb3dzIGZvciBzb21lb25lIHRvIGNoYW5nZSB0aGUgcHJvdG90eXBlIG9mIGJ1aWx0LWluIG9iamVjdHM/ICAgKlxuICogICAgIE9yIGdpdmVzIHVuZGVzaXJlZCBhY2Nlc3MgdG8gdmFyaWFibGVzIGxpa2VzIGRvY3VtZW50IG9yIHdpbmRvdz8gICAgKlxuICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKi9cblxudmFyICRwYXJzZU1pbkVyciA9IG1pbkVycignJHBhcnNlJyk7XG5cbi8vIFNhbmRib3hpbmcgQW5ndWxhciBFeHByZXNzaW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBBbmd1bGFyIGV4cHJlc3Npb25zIGFyZSBnZW5lcmFsbHkgY29uc2lkZXJlZCBzYWZlIGJlY2F1c2UgdGhlc2UgZXhwcmVzc2lvbnMgb25seSBoYXZlIGRpcmVjdFxuLy8gYWNjZXNzIHRvIGAkc2NvcGVgIGFuZCBsb2NhbHMuIEhvd2V2ZXIsIG9uZSBjYW4gb2J0YWluIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IEpTIGNvZGUgYnlcbi8vIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byBuYXRpdmUgSlMgZnVuY3Rpb25zIHN1Y2ggYXMgdGhlIEZ1bmN0aW9uIGNvbnN0cnVjdG9yLlxuLy9cbi8vIEFzIGFuIGV4YW1wbGUsIGNvbnNpZGVyIHRoZSBmb2xsb3dpbmcgQW5ndWxhciBleHByZXNzaW9uOlxuLy9cbi8vICAge30udG9TdHJpbmcuY29uc3RydWN0b3IoJ2FsZXJ0KFwiZXZpbCBKUyBjb2RlXCIpJylcbi8vXG4vLyBUaGlzIHNhbmRib3hpbmcgdGVjaG5pcXVlIGlzIG5vdCBwZXJmZWN0IGFuZCBkb2Vzbid0IGFpbSB0byBiZS4gVGhlIGdvYWwgaXMgdG8gcHJldmVudCBleHBsb2l0c1xuLy8gYWdhaW5zdCB0aGUgZXhwcmVzc2lvbiBsYW5ndWFnZSwgYnV0IG5vdCB0byBwcmV2ZW50IGV4cGxvaXRzIHRoYXQgd2VyZSBlbmFibGVkIGJ5IGV4cG9zaW5nXG4vLyBzZW5zaXRpdmUgSmF2YVNjcmlwdCBvciBicm93c2VyIEFQSXMgb24gU2NvcGUuIEV4cG9zaW5nIHN1Y2ggb2JqZWN0cyBvbiBhIFNjb3BlIGlzIG5ldmVyIGEgZ29vZFxuLy8gcHJhY3RpY2UgYW5kIHRoZXJlZm9yZSB3ZSBhcmUgbm90IGV2ZW4gdHJ5aW5nIHRvIHByb3RlY3QgYWdhaW5zdCBpbnRlcmFjdGlvbiB3aXRoIGFuIG9iamVjdFxuLy8gZXhwbGljaXRseSBleHBvc2VkIGluIHRoaXMgd2F5LlxuLy9cbi8vIEluIGdlbmVyYWwsIGl0IGlzIG5vdCBwb3NzaWJsZSB0byBhY2Nlc3MgYSBXaW5kb3cgb2JqZWN0IGZyb20gYW4gYW5ndWxhciBleHByZXNzaW9uIHVubGVzcyBhXG4vLyB3aW5kb3cgb3Igc29tZSBET00gb2JqZWN0IHRoYXQgaGFzIGEgcmVmZXJlbmNlIHRvIHdpbmRvdyBpcyBwdWJsaXNoZWQgb250byBhIFNjb3BlLlxuLy8gU2ltaWxhcmx5IHdlIHByZXZlbnQgaW52b2NhdGlvbnMgb2YgZnVuY3Rpb24ga25vd24gdG8gYmUgZGFuZ2Vyb3VzLCBhcyB3ZWxsIGFzIGFzc2lnbm1lbnRzIHRvXG4vLyBuYXRpdmUgb2JqZWN0cy5cbi8vXG4vLyBTZWUgaHR0cHM6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvZ3VpZGUvc2VjdXJpdHlcblxuXG5mdW5jdGlvbiBlbnN1cmVTYWZlTWVtYmVyTmFtZShuYW1lLCBmdWxsRXhwcmVzc2lvbikge1xuICBpZiAobmFtZSA9PT0gXCJfX2RlZmluZUdldHRlcl9fXCIgfHwgbmFtZSA9PT0gXCJfX2RlZmluZVNldHRlcl9fXCJcbiAgICAgIHx8IG5hbWUgPT09IFwiX19sb29rdXBHZXR0ZXJfX1wiIHx8IG5hbWUgPT09IFwiX19sb29rdXBTZXR0ZXJfX1wiXG4gICAgICB8fCBuYW1lID09PSBcIl9fcHJvdG9fX1wiKSB7XG4gICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2VjZmxkJyxcbiAgICAgICAgJ0F0dGVtcHRpbmcgdG8gYWNjZXNzIGEgZGlzYWxsb3dlZCBmaWVsZCBpbiBBbmd1bGFyIGV4cHJlc3Npb25zISAnXG4gICAgICAgICsgJ0V4cHJlc3Npb246IHswfScsIGZ1bGxFeHByZXNzaW9uKTtcbiAgfVxuICByZXR1cm4gbmFtZTtcbn1cblxuZnVuY3Rpb24gZW5zdXJlU2FmZU9iamVjdChvYmosIGZ1bGxFeHByZXNzaW9uKSB7XG4gIC8vIG5pZnR5IGNoZWNrIGlmIG9iaiBpcyBGdW5jdGlvbiB0aGF0IGlzIGZhc3QgYW5kIHdvcmtzIGFjcm9zcyBpZnJhbWVzIGFuZCBvdGhlciBjb250ZXh0c1xuICBpZiAob2JqKSB7XG4gICAgaWYgKG9iai5jb25zdHJ1Y3RvciA9PT0gb2JqKSB7XG4gICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2lzZWNmbicsXG4gICAgICAgICAgJ1JlZmVyZW5jaW5nIEZ1bmN0aW9uIGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGlzYWxsb3dlZCEgRXhwcmVzc2lvbjogezB9JyxcbiAgICAgICAgICBmdWxsRXhwcmVzc2lvbik7XG4gICAgfSBlbHNlIGlmICgvLyBpc1dpbmRvdyhvYmopXG4gICAgICAgIG9iai53aW5kb3cgPT09IG9iaikge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2Vjd2luZG93JyxcbiAgICAgICAgICAnUmVmZXJlbmNpbmcgdGhlIFdpbmRvdyBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsXG4gICAgICAgICAgZnVsbEV4cHJlc3Npb24pO1xuICAgIH0gZWxzZSBpZiAoLy8gaXNFbGVtZW50KG9iailcbiAgICAgICAgb2JqLmNoaWxkcmVuICYmIChvYmoubm9kZU5hbWUgfHwgKG9iai5wcm9wICYmIG9iai5hdHRyICYmIG9iai5maW5kKSkpIHtcbiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2RvbScsXG4gICAgICAgICAgJ1JlZmVyZW5jaW5nIERPTSBub2RlcyBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsXG4gICAgICAgICAgZnVsbEV4cHJlc3Npb24pO1xuICAgIH0gZWxzZSBpZiAoLy8gYmxvY2sgT2JqZWN0IHNvIHRoYXQgd2UgY2FuJ3QgZ2V0IGhvbGQgb2YgZGFuZ2Vyb3VzIE9iamVjdC4qIG1ldGhvZHNcbiAgICAgICAgb2JqID09PSBPYmplY3QpIHtcbiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY29iaicsXG4gICAgICAgICAgJ1JlZmVyZW5jaW5nIE9iamVjdCBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsXG4gICAgICAgICAgZnVsbEV4cHJlc3Npb24pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG52YXIgQ0FMTCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsO1xudmFyIEFQUExZID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xudmFyIEJJTkQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZDtcblxuZnVuY3Rpb24gZW5zdXJlU2FmZUZ1bmN0aW9uKG9iaiwgZnVsbEV4cHJlc3Npb24pIHtcbiAgaWYgKG9iaikge1xuICAgIGlmIChvYmouY29uc3RydWN0b3IgPT09IG9iaikge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2VjZm4nLFxuICAgICAgICAnUmVmZXJlbmNpbmcgRnVuY3Rpb24gaW4gQW5ndWxhciBleHByZXNzaW9ucyBpcyBkaXNhbGxvd2VkISBFeHByZXNzaW9uOiB7MH0nLFxuICAgICAgICBmdWxsRXhwcmVzc2lvbik7XG4gICAgfSBlbHNlIGlmIChvYmogPT09IENBTEwgfHwgb2JqID09PSBBUFBMWSB8fCBvYmogPT09IEJJTkQpIHtcbiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2ZmJyxcbiAgICAgICAgJ1JlZmVyZW5jaW5nIGNhbGwsIGFwcGx5IG9yIGJpbmQgaW4gQW5ndWxhciBleHByZXNzaW9ucyBpcyBkaXNhbGxvd2VkISBFeHByZXNzaW9uOiB7MH0nLFxuICAgICAgICBmdWxsRXhwcmVzc2lvbik7XG4gICAgfVxuICB9XG59XG5cbnZhciBPUEVSQVRPUlMgPSBjcmVhdGVNYXAoKTtcbmZvckVhY2goJysgLSAqIC8gJSA9PT0gIT09ID09ICE9IDwgPiA8PSA+PSAmJiB8fCAhID0gfCcuc3BsaXQoJyAnKSwgZnVuY3Rpb24ob3BlcmF0b3IpIHsgT1BFUkFUT1JTW29wZXJhdG9yXSA9IHRydWU7IH0pO1xudmFyIEVTQ0FQRSA9IHtcIm5cIjpcIlxcblwiLCBcImZcIjpcIlxcZlwiLCBcInJcIjpcIlxcclwiLCBcInRcIjpcIlxcdFwiLCBcInZcIjpcIlxcdlwiLCBcIidcIjpcIidcIiwgJ1wiJzonXCInfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBMZXhlciA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbn07XG5cbkxleGVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IExleGVyLFxuXG4gIGxleDogZnVuY3Rpb24odGV4dCkge1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgdGhpcy5pbmRleCA9IDA7XG4gICAgdGhpcy50b2tlbnMgPSBbXTtcblxuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNoID0gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KTtcbiAgICAgIGlmIChjaCA9PT0gJ1wiJyB8fCBjaCA9PT0gXCInXCIpIHtcbiAgICAgICAgdGhpcy5yZWFkU3RyaW5nKGNoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc051bWJlcihjaCkgfHwgY2ggPT09ICcuJyAmJiB0aGlzLmlzTnVtYmVyKHRoaXMucGVlaygpKSkge1xuICAgICAgICB0aGlzLnJlYWROdW1iZXIoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0lkZW50KGNoKSkge1xuICAgICAgICB0aGlzLnJlYWRJZGVudCgpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmlzKGNoLCAnKCl7fVtdLiw7Oj8nKSkge1xuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtpbmRleDogdGhpcy5pbmRleCwgdGV4dDogY2h9KTtcbiAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmlzV2hpdGVzcGFjZShjaCkpIHtcbiAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGNoMiA9IGNoICsgdGhpcy5wZWVrKCk7XG4gICAgICAgIHZhciBjaDMgPSBjaDIgKyB0aGlzLnBlZWsoMik7XG4gICAgICAgIHZhciBvcDEgPSBPUEVSQVRPUlNbY2hdO1xuICAgICAgICB2YXIgb3AyID0gT1BFUkFUT1JTW2NoMl07XG4gICAgICAgIHZhciBvcDMgPSBPUEVSQVRPUlNbY2gzXTtcbiAgICAgICAgaWYgKG9wMSB8fCBvcDIgfHwgb3AzKSB7XG4gICAgICAgICAgdmFyIHRva2VuID0gb3AzID8gY2gzIDogKG9wMiA/IGNoMiA6IGNoKTtcbiAgICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtpbmRleDogdGhpcy5pbmRleCwgdGV4dDogdG9rZW4sIG9wZXJhdG9yOiB0cnVlfSk7XG4gICAgICAgICAgdGhpcy5pbmRleCArPSB0b2tlbi5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdVbmV4cGVjdGVkIG5leHQgY2hhcmFjdGVyICcsIHRoaXMuaW5kZXgsIHRoaXMuaW5kZXggKyAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy50b2tlbnM7XG4gIH0sXG5cbiAgaXM6IGZ1bmN0aW9uKGNoLCBjaGFycykge1xuICAgIHJldHVybiBjaGFycy5pbmRleE9mKGNoKSAhPT0gLTE7XG4gIH0sXG5cbiAgcGVlazogZnVuY3Rpb24oaSkge1xuICAgIHZhciBudW0gPSBpIHx8IDE7XG4gICAgcmV0dXJuICh0aGlzLmluZGV4ICsgbnVtIDwgdGhpcy50ZXh0Lmxlbmd0aCkgPyB0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXggKyBudW0pIDogZmFsc2U7XG4gIH0sXG5cbiAgaXNOdW1iZXI6IGZ1bmN0aW9uKGNoKSB7XG4gICAgcmV0dXJuICgnMCcgPD0gY2ggJiYgY2ggPD0gJzknKSAmJiB0eXBlb2YgY2ggPT09IFwic3RyaW5nXCI7XG4gIH0sXG5cbiAgaXNXaGl0ZXNwYWNlOiBmdW5jdGlvbihjaCkge1xuICAgIC8vIElFIHRyZWF0cyBub24tYnJlYWtpbmcgc3BhY2UgYXMgXFx1MDBBMFxuICAgIHJldHVybiAoY2ggPT09ICcgJyB8fCBjaCA9PT0gJ1xccicgfHwgY2ggPT09ICdcXHQnIHx8XG4gICAgICAgICAgICBjaCA9PT0gJ1xcbicgfHwgY2ggPT09ICdcXHYnIHx8IGNoID09PSAnXFx1MDBBMCcpO1xuICB9LFxuXG4gIGlzSWRlbnQ6IGZ1bmN0aW9uKGNoKSB7XG4gICAgcmV0dXJuICgnYScgPD0gY2ggJiYgY2ggPD0gJ3onIHx8XG4gICAgICAgICAgICAnQScgPD0gY2ggJiYgY2ggPD0gJ1onIHx8XG4gICAgICAgICAgICAnXycgPT09IGNoIHx8IGNoID09PSAnJCcpO1xuICB9LFxuXG4gIGlzRXhwT3BlcmF0b3I6IGZ1bmN0aW9uKGNoKSB7XG4gICAgcmV0dXJuIChjaCA9PT0gJy0nIHx8IGNoID09PSAnKycgfHwgdGhpcy5pc051bWJlcihjaCkpO1xuICB9LFxuXG4gIHRocm93RXJyb3I6IGZ1bmN0aW9uKGVycm9yLCBzdGFydCwgZW5kKSB7XG4gICAgZW5kID0gZW5kIHx8IHRoaXMuaW5kZXg7XG4gICAgdmFyIGNvbFN0ciA9IChpc0RlZmluZWQoc3RhcnQpXG4gICAgICAgICAgICA/ICdzICcgKyBzdGFydCArICAnLScgKyB0aGlzLmluZGV4ICsgJyBbJyArIHRoaXMudGV4dC5zdWJzdHJpbmcoc3RhcnQsIGVuZCkgKyAnXSdcbiAgICAgICAgICAgIDogJyAnICsgZW5kKTtcbiAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2xleGVycicsICdMZXhlciBFcnJvcjogezB9IGF0IGNvbHVtbnsxfSBpbiBleHByZXNzaW9uIFt7Mn1dLicsXG4gICAgICAgIGVycm9yLCBjb2xTdHIsIHRoaXMudGV4dCk7XG4gIH0sXG5cbiAgcmVhZE51bWJlcjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIG51bWJlciA9ICcnO1xuICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgd2hpbGUgKHRoaXMuaW5kZXggPCB0aGlzLnRleHQubGVuZ3RoKSB7XG4gICAgICB2YXIgY2ggPSBsb3dlcmNhc2UodGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KSk7XG4gICAgICBpZiAoY2ggPT0gJy4nIHx8IHRoaXMuaXNOdW1iZXIoY2gpKSB7XG4gICAgICAgIG51bWJlciArPSBjaDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwZWVrQ2ggPSB0aGlzLnBlZWsoKTtcbiAgICAgICAgaWYgKGNoID09ICdlJyAmJiB0aGlzLmlzRXhwT3BlcmF0b3IocGVla0NoKSkge1xuICAgICAgICAgIG51bWJlciArPSBjaDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzRXhwT3BlcmF0b3IoY2gpICYmXG4gICAgICAgICAgICBwZWVrQ2ggJiYgdGhpcy5pc051bWJlcihwZWVrQ2gpICYmXG4gICAgICAgICAgICBudW1iZXIuY2hhckF0KG51bWJlci5sZW5ndGggLSAxKSA9PSAnZScpIHtcbiAgICAgICAgICBudW1iZXIgKz0gY2g7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0V4cE9wZXJhdG9yKGNoKSAmJlxuICAgICAgICAgICAgKCFwZWVrQ2ggfHwgIXRoaXMuaXNOdW1iZXIocGVla0NoKSkgJiZcbiAgICAgICAgICAgIG51bWJlci5jaGFyQXQobnVtYmVyLmxlbmd0aCAtIDEpID09ICdlJykge1xuICAgICAgICAgIHRoaXMudGhyb3dFcnJvcignSW52YWxpZCBleHBvbmVudCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmluZGV4Kys7XG4gICAgfVxuICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgaW5kZXg6IHN0YXJ0LFxuICAgICAgdGV4dDogbnVtYmVyLFxuICAgICAgY29uc3RhbnQ6IHRydWUsXG4gICAgICB2YWx1ZTogTnVtYmVyKG51bWJlcilcbiAgICB9KTtcbiAgfSxcblxuICByZWFkSWRlbnQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgd2hpbGUgKHRoaXMuaW5kZXggPCB0aGlzLnRleHQubGVuZ3RoKSB7XG4gICAgICB2YXIgY2ggPSB0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXgpO1xuICAgICAgaWYgKCEodGhpcy5pc0lkZW50KGNoKSB8fCB0aGlzLmlzTnVtYmVyKGNoKSkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB0aGlzLmluZGV4Kys7XG4gICAgfVxuICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgaW5kZXg6IHN0YXJ0LFxuICAgICAgdGV4dDogdGhpcy50ZXh0LnNsaWNlKHN0YXJ0LCB0aGlzLmluZGV4KSxcbiAgICAgIGlkZW50aWZpZXI6IHRydWVcbiAgICB9KTtcbiAgfSxcblxuICByZWFkU3RyaW5nOiBmdW5jdGlvbihxdW90ZSkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgdGhpcy5pbmRleCsrO1xuICAgIHZhciBzdHJpbmcgPSAnJztcbiAgICB2YXIgcmF3U3RyaW5nID0gcXVvdGU7XG4gICAgdmFyIGVzY2FwZSA9IGZhbHNlO1xuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNoID0gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KTtcbiAgICAgIHJhd1N0cmluZyArPSBjaDtcbiAgICAgIGlmIChlc2NhcGUpIHtcbiAgICAgICAgaWYgKGNoID09PSAndScpIHtcbiAgICAgICAgICB2YXIgaGV4ID0gdGhpcy50ZXh0LnN1YnN0cmluZyh0aGlzLmluZGV4ICsgMSwgdGhpcy5pbmRleCArIDUpO1xuICAgICAgICAgIGlmICghaGV4Lm1hdGNoKC9bXFxkYS1mXXs0fS9pKSkge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdJbnZhbGlkIHVuaWNvZGUgZXNjYXBlIFtcXFxcdScgKyBoZXggKyAnXScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmluZGV4ICs9IDQ7XG4gICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoaGV4LCAxNikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciByZXAgPSBFU0NBUEVbY2hdO1xuICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArIChyZXAgfHwgY2gpO1xuICAgICAgICB9XG4gICAgICAgIGVzY2FwZSA9IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJ1xcXFwnKSB7XG4gICAgICAgIGVzY2FwZSA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGNoID09PSBxdW90ZSkge1xuICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICAgIGluZGV4OiBzdGFydCxcbiAgICAgICAgICB0ZXh0OiByYXdTdHJpbmcsXG4gICAgICAgICAgY29uc3RhbnQ6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IHN0cmluZ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyaW5nICs9IGNoO1xuICAgICAgfVxuICAgICAgdGhpcy5pbmRleCsrO1xuICAgIH1cbiAgICB0aGlzLnRocm93RXJyb3IoJ1VudGVybWluYXRlZCBxdW90ZScsIHN0YXJ0KTtcbiAgfVxufTtcblxudmFyIEFTVCA9IGZ1bmN0aW9uKGxleGVyLCBvcHRpb25zKSB7XG4gIHRoaXMubGV4ZXIgPSBsZXhlcjtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbn07XG5cbkFTVC5Qcm9ncmFtID0gJ1Byb2dyYW0nO1xuQVNULkV4cHJlc3Npb25TdGF0ZW1lbnQgPSAnRXhwcmVzc2lvblN0YXRlbWVudCc7XG5BU1QuQXNzaWdubWVudEV4cHJlc3Npb24gPSAnQXNzaWdubWVudEV4cHJlc3Npb24nO1xuQVNULkNvbmRpdGlvbmFsRXhwcmVzc2lvbiA9ICdDb25kaXRpb25hbEV4cHJlc3Npb24nO1xuQVNULkxvZ2ljYWxFeHByZXNzaW9uID0gJ0xvZ2ljYWxFeHByZXNzaW9uJztcbkFTVC5CaW5hcnlFeHByZXNzaW9uID0gJ0JpbmFyeUV4cHJlc3Npb24nO1xuQVNULlVuYXJ5RXhwcmVzc2lvbiA9ICdVbmFyeUV4cHJlc3Npb24nO1xuQVNULkNhbGxFeHByZXNzaW9uID0gJ0NhbGxFeHByZXNzaW9uJztcbkFTVC5NZW1iZXJFeHByZXNzaW9uID0gJ01lbWJlckV4cHJlc3Npb24nO1xuQVNULklkZW50aWZpZXIgPSAnSWRlbnRpZmllcic7XG5BU1QuTGl0ZXJhbCA9ICdMaXRlcmFsJztcbkFTVC5BcnJheUV4cHJlc3Npb24gPSAnQXJyYXlFeHByZXNzaW9uJztcbkFTVC5Qcm9wZXJ0eSA9ICdQcm9wZXJ0eSc7XG5BU1QuT2JqZWN0RXhwcmVzc2lvbiA9ICdPYmplY3RFeHByZXNzaW9uJztcbkFTVC5UaGlzRXhwcmVzc2lvbiA9ICdUaGlzRXhwcmVzc2lvbic7XG5cbi8vIEludGVybmFsIHVzZSBvbmx5XG5BU1QuTkdWYWx1ZVBhcmFtZXRlciA9ICdOR1ZhbHVlUGFyYW1ldGVyJztcblxuQVNULnByb3RvdHlwZSA9IHtcbiAgYXN0OiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICB0aGlzLnRva2VucyA9IHRoaXMubGV4ZXIubGV4KHRleHQpO1xuXG4gICAgdmFyIHZhbHVlID0gdGhpcy5wcm9ncmFtKCk7XG5cbiAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoICE9PSAwKSB7XG4gICAgICB0aGlzLnRocm93RXJyb3IoJ2lzIGFuIHVuZXhwZWN0ZWQgdG9rZW4nLCB0aGlzLnRva2Vuc1swXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuXG4gIHByb2dyYW06IGZ1bmN0aW9uKCkge1xuICAgIHZhciBib2R5ID0gW107XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggPiAwICYmICF0aGlzLnBlZWsoJ30nLCAnKScsICc7JywgJ10nKSlcbiAgICAgICAgYm9keS5wdXNoKHRoaXMuZXhwcmVzc2lvblN0YXRlbWVudCgpKTtcbiAgICAgIGlmICghdGhpcy5leHBlY3QoJzsnKSkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBBU1QuUHJvZ3JhbSwgYm9keTogYm9keX07XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGV4cHJlc3Npb25TdGF0ZW1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7IHR5cGU6IEFTVC5FeHByZXNzaW9uU3RhdGVtZW50LCBleHByZXNzaW9uOiB0aGlzLmZpbHRlckNoYWluKCkgfTtcbiAgfSxcblxuICBmaWx0ZXJDaGFpbjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICB2YXIgdG9rZW47XG4gICAgd2hpbGUgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCd8JykpKSB7XG4gICAgICBsZWZ0ID0gdGhpcy5maWx0ZXIobGVmdCk7XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIGV4cHJlc3Npb246IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmFzc2lnbm1lbnQoKTtcbiAgfSxcblxuICBhc3NpZ25tZW50OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcy50ZXJuYXJ5KCk7XG4gICAgaWYgKHRoaXMuZXhwZWN0KCc9JykpIHtcbiAgICAgIHJlc3VsdCA9IHsgdHlwZTogQVNULkFzc2lnbm1lbnRFeHByZXNzaW9uLCBsZWZ0OiByZXN1bHQsIHJpZ2h0OiB0aGlzLmFzc2lnbm1lbnQoKSwgb3BlcmF0b3I6ICc9J307XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG5cbiAgdGVybmFyeTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRlc3QgPSB0aGlzLmxvZ2ljYWxPUigpO1xuICAgIHZhciBhbHRlcm5hdGU7XG4gICAgdmFyIGNvbnNlcXVlbnQ7XG4gICAgaWYgKHRoaXMuZXhwZWN0KCc/JykpIHtcbiAgICAgIGFsdGVybmF0ZSA9IHRoaXMuZXhwcmVzc2lvbigpO1xuICAgICAgaWYgKHRoaXMuY29uc3VtZSgnOicpKSB7XG4gICAgICAgIGNvbnNlcXVlbnQgPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogQVNULkNvbmRpdGlvbmFsRXhwcmVzc2lvbiwgdGVzdDogdGVzdCwgYWx0ZXJuYXRlOiBhbHRlcm5hdGUsIGNvbnNlcXVlbnQ6IGNvbnNlcXVlbnR9O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGVzdDtcbiAgfSxcblxuICBsb2dpY2FsT1I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5sb2dpY2FsQU5EKCk7XG4gICAgd2hpbGUgKHRoaXMuZXhwZWN0KCd8fCcpKSB7XG4gICAgICBsZWZ0ID0geyB0eXBlOiBBU1QuTG9naWNhbEV4cHJlc3Npb24sIG9wZXJhdG9yOiAnfHwnLCBsZWZ0OiBsZWZ0LCByaWdodDogdGhpcy5sb2dpY2FsQU5EKCkgfTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgbG9naWNhbEFORDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLmVxdWFsaXR5KCk7XG4gICAgd2hpbGUgKHRoaXMuZXhwZWN0KCcmJicpKSB7XG4gICAgICBsZWZ0ID0geyB0eXBlOiBBU1QuTG9naWNhbEV4cHJlc3Npb24sIG9wZXJhdG9yOiAnJiYnLCBsZWZ0OiBsZWZ0LCByaWdodDogdGhpcy5lcXVhbGl0eSgpfTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgZXF1YWxpdHk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5yZWxhdGlvbmFsKCk7XG4gICAgdmFyIHRva2VuO1xuICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnPT0nLCchPScsJz09PScsJyE9PScpKSkge1xuICAgICAgbGVmdCA9IHsgdHlwZTogQVNULkJpbmFyeUV4cHJlc3Npb24sIG9wZXJhdG9yOiB0b2tlbi50ZXh0LCBsZWZ0OiBsZWZ0LCByaWdodDogdGhpcy5yZWxhdGlvbmFsKCkgfTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgcmVsYXRpb25hbDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLmFkZGl0aXZlKCk7XG4gICAgdmFyIHRva2VuO1xuICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnPCcsICc+JywgJzw9JywgJz49JykpKSB7XG4gICAgICBsZWZ0ID0geyB0eXBlOiBBU1QuQmluYXJ5RXhwcmVzc2lvbiwgb3BlcmF0b3I6IHRva2VuLnRleHQsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLmFkZGl0aXZlKCkgfTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgYWRkaXRpdmU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5tdWx0aXBsaWNhdGl2ZSgpO1xuICAgIHZhciB0b2tlbjtcbiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5leHBlY3QoJysnLCctJykpKSB7XG4gICAgICBsZWZ0ID0geyB0eXBlOiBBU1QuQmluYXJ5RXhwcmVzc2lvbiwgb3BlcmF0b3I6IHRva2VuLnRleHQsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLm11bHRpcGxpY2F0aXZlKCkgfTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgbXVsdGlwbGljYXRpdmU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy51bmFyeSgpO1xuICAgIHZhciB0b2tlbjtcbiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5leHBlY3QoJyonLCcvJywnJScpKSkge1xuICAgICAgbGVmdCA9IHsgdHlwZTogQVNULkJpbmFyeUV4cHJlc3Npb24sIG9wZXJhdG9yOiB0b2tlbi50ZXh0LCBsZWZ0OiBsZWZ0LCByaWdodDogdGhpcy51bmFyeSgpIH07XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIHVuYXJ5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdG9rZW47XG4gICAgaWYgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCcrJywgJy0nLCAnIScpKSkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogQVNULlVuYXJ5RXhwcmVzc2lvbiwgb3BlcmF0b3I6IHRva2VuLnRleHQsIHByZWZpeDogdHJ1ZSwgYXJndW1lbnQ6IHRoaXMudW5hcnkoKSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5wcmltYXJ5KCk7XG4gICAgfVxuICB9LFxuXG4gIHByaW1hcnk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwcmltYXJ5O1xuICAgIGlmICh0aGlzLmV4cGVjdCgnKCcpKSB7XG4gICAgICBwcmltYXJ5ID0gdGhpcy5maWx0ZXJDaGFpbigpO1xuICAgICAgdGhpcy5jb25zdW1lKCcpJyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmV4cGVjdCgnWycpKSB7XG4gICAgICBwcmltYXJ5ID0gdGhpcy5hcnJheURlY2xhcmF0aW9uKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmV4cGVjdCgneycpKSB7XG4gICAgICBwcmltYXJ5ID0gdGhpcy5vYmplY3QoKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuY29uc3RhbnRzLmhhc093blByb3BlcnR5KHRoaXMucGVlaygpLnRleHQpKSB7XG4gICAgICBwcmltYXJ5ID0gY29weSh0aGlzLmNvbnN0YW50c1t0aGlzLmNvbnN1bWUoKS50ZXh0XSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBlZWsoKS5pZGVudGlmaWVyKSB7XG4gICAgICBwcmltYXJ5ID0gdGhpcy5pZGVudGlmaWVyKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBlZWsoKS5jb25zdGFudCkge1xuICAgICAgcHJpbWFyeSA9IHRoaXMuY29uc3RhbnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50aHJvd0Vycm9yKCdub3QgYSBwcmltYXJ5IGV4cHJlc3Npb24nLCB0aGlzLnBlZWsoKSk7XG4gICAgfVxuXG4gICAgdmFyIG5leHQ7XG4gICAgd2hpbGUgKChuZXh0ID0gdGhpcy5leHBlY3QoJygnLCAnWycsICcuJykpKSB7XG4gICAgICBpZiAobmV4dC50ZXh0ID09PSAnKCcpIHtcbiAgICAgICAgcHJpbWFyeSA9IHt0eXBlOiBBU1QuQ2FsbEV4cHJlc3Npb24sIGNhbGxlZTogcHJpbWFyeSwgYXJndW1lbnRzOiB0aGlzLnBhcnNlQXJndW1lbnRzKCkgfTtcbiAgICAgICAgdGhpcy5jb25zdW1lKCcpJyk7XG4gICAgICB9IGVsc2UgaWYgKG5leHQudGV4dCA9PT0gJ1snKSB7XG4gICAgICAgIHByaW1hcnkgPSB7IHR5cGU6IEFTVC5NZW1iZXJFeHByZXNzaW9uLCBvYmplY3Q6IHByaW1hcnksIHByb3BlcnR5OiB0aGlzLmV4cHJlc3Npb24oKSwgY29tcHV0ZWQ6IHRydWUgfTtcbiAgICAgICAgdGhpcy5jb25zdW1lKCddJyk7XG4gICAgICB9IGVsc2UgaWYgKG5leHQudGV4dCA9PT0gJy4nKSB7XG4gICAgICAgIHByaW1hcnkgPSB7IHR5cGU6IEFTVC5NZW1iZXJFeHByZXNzaW9uLCBvYmplY3Q6IHByaW1hcnksIHByb3BlcnR5OiB0aGlzLmlkZW50aWZpZXIoKSwgY29tcHV0ZWQ6IGZhbHNlIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRocm93RXJyb3IoJ0lNUE9TU0lCTEUnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByaW1hcnk7XG4gIH0sXG5cbiAgZmlsdGVyOiBmdW5jdGlvbihiYXNlRXhwcmVzc2lvbikge1xuICAgIHZhciBhcmdzID0gW2Jhc2VFeHByZXNzaW9uXTtcbiAgICB2YXIgcmVzdWx0ID0ge3R5cGU6IEFTVC5DYWxsRXhwcmVzc2lvbiwgY2FsbGVlOiB0aGlzLmlkZW50aWZpZXIoKSwgYXJndW1lbnRzOiBhcmdzLCBmaWx0ZXI6IHRydWV9O1xuXG4gICAgd2hpbGUgKHRoaXMuZXhwZWN0KCc6JykpIHtcbiAgICAgIGFyZ3MucHVzaCh0aGlzLmV4cHJlc3Npb24oKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcblxuICBwYXJzZUFyZ3VtZW50czogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBpZiAodGhpcy5wZWVrVG9rZW4oKS50ZXh0ICE9PSAnKScpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgYXJncy5wdXNoKHRoaXMuZXhwcmVzc2lvbigpKTtcbiAgICAgIH0gd2hpbGUgKHRoaXMuZXhwZWN0KCcsJykpO1xuICAgIH1cbiAgICByZXR1cm4gYXJncztcbiAgfSxcblxuICBpZGVudGlmaWVyOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLmNvbnN1bWUoKTtcbiAgICBpZiAoIXRva2VuLmlkZW50aWZpZXIpIHtcbiAgICAgIHRoaXMudGhyb3dFcnJvcignaXMgbm90IGEgdmFsaWQgaWRlbnRpZmllcicsIHRva2VuKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdHlwZTogQVNULklkZW50aWZpZXIsIG5hbWU6IHRva2VuLnRleHQgfTtcbiAgfSxcblxuICBjb25zdGFudDogZnVuY3Rpb24oKSB7XG4gICAgLy8gVE9ETyBjaGVjayB0aGF0IGl0IGlzIGEgY29uc3RhbnRcbiAgICByZXR1cm4geyB0eXBlOiBBU1QuTGl0ZXJhbCwgdmFsdWU6IHRoaXMuY29uc3VtZSgpLnZhbHVlIH07XG4gIH0sXG5cbiAgYXJyYXlEZWNsYXJhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVsZW1lbnRzID0gW107XG4gICAgaWYgKHRoaXMucGVla1Rva2VuKCkudGV4dCAhPT0gJ10nKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGlmICh0aGlzLnBlZWsoJ10nKSkge1xuICAgICAgICAgIC8vIFN1cHBvcnQgdHJhaWxpbmcgY29tbWFzIHBlciBFUzUuMS5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50cy5wdXNoKHRoaXMuZXhwcmVzc2lvbigpKTtcbiAgICAgIH0gd2hpbGUgKHRoaXMuZXhwZWN0KCcsJykpO1xuICAgIH1cbiAgICB0aGlzLmNvbnN1bWUoJ10nKTtcblxuICAgIHJldHVybiB7IHR5cGU6IEFTVC5BcnJheUV4cHJlc3Npb24sIGVsZW1lbnRzOiBlbGVtZW50cyB9O1xuICB9LFxuXG4gIG9iamVjdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHByb3BlcnRpZXMgPSBbXSwgcHJvcGVydHk7XG4gICAgaWYgKHRoaXMucGVla1Rva2VuKCkudGV4dCAhPT0gJ30nKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGlmICh0aGlzLnBlZWsoJ30nKSkge1xuICAgICAgICAgIC8vIFN1cHBvcnQgdHJhaWxpbmcgY29tbWFzIHBlciBFUzUuMS5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBwcm9wZXJ0eSA9IHt0eXBlOiBBU1QuUHJvcGVydHksIGtpbmQ6ICdpbml0J307XG4gICAgICAgIGlmICh0aGlzLnBlZWsoKS5jb25zdGFudCkge1xuICAgICAgICAgIHByb3BlcnR5LmtleSA9IHRoaXMuY29uc3RhbnQoKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBlZWsoKS5pZGVudGlmaWVyKSB7XG4gICAgICAgICAgcHJvcGVydHkua2V5ID0gdGhpcy5pZGVudGlmaWVyKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy50aHJvd0Vycm9yKFwiaW52YWxpZCBrZXlcIiwgdGhpcy5wZWVrKCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29uc3VtZSgnOicpO1xuICAgICAgICBwcm9wZXJ0eS52YWx1ZSA9IHRoaXMuZXhwcmVzc2lvbigpO1xuICAgICAgICBwcm9wZXJ0aWVzLnB1c2gocHJvcGVydHkpO1xuICAgICAgfSB3aGlsZSAodGhpcy5leHBlY3QoJywnKSk7XG4gICAgfVxuICAgIHRoaXMuY29uc3VtZSgnfScpO1xuXG4gICAgcmV0dXJuIHt0eXBlOiBBU1QuT2JqZWN0RXhwcmVzc2lvbiwgcHJvcGVydGllczogcHJvcGVydGllcyB9O1xuICB9LFxuXG4gIHRocm93RXJyb3I6IGZ1bmN0aW9uKG1zZywgdG9rZW4pIHtcbiAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ3N5bnRheCcsXG4gICAgICAgICdTeW50YXggRXJyb3I6IFRva2VuIFxcJ3swfVxcJyB7MX0gYXQgY29sdW1uIHsyfSBvZiB0aGUgZXhwcmVzc2lvbiBbezN9XSBzdGFydGluZyBhdCBbezR9XS4nLFxuICAgICAgICAgIHRva2VuLnRleHQsIG1zZywgKHRva2VuLmluZGV4ICsgMSksIHRoaXMudGV4dCwgdGhpcy50ZXh0LnN1YnN0cmluZyh0b2tlbi5pbmRleCkpO1xuICB9LFxuXG4gIGNvbnN1bWU6IGZ1bmN0aW9uKGUxKSB7XG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCd1ZW9lJywgJ1VuZXhwZWN0ZWQgZW5kIG9mIGV4cHJlc3Npb246IHswfScsIHRoaXMudGV4dCk7XG4gICAgfVxuXG4gICAgdmFyIHRva2VuID0gdGhpcy5leHBlY3QoZTEpO1xuICAgIGlmICghdG9rZW4pIHtcbiAgICAgIHRoaXMudGhyb3dFcnJvcignaXMgdW5leHBlY3RlZCwgZXhwZWN0aW5nIFsnICsgZTEgKyAnXScsIHRoaXMucGVlaygpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRva2VuO1xuICB9LFxuXG4gIHBlZWtUb2tlbjogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCd1ZW9lJywgJ1VuZXhwZWN0ZWQgZW5kIG9mIGV4cHJlc3Npb246IHswfScsIHRoaXMudGV4dCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRva2Vuc1swXTtcbiAgfSxcblxuICBwZWVrOiBmdW5jdGlvbihlMSwgZTIsIGUzLCBlNCkge1xuICAgIHJldHVybiB0aGlzLnBlZWtBaGVhZCgwLCBlMSwgZTIsIGUzLCBlNCk7XG4gIH0sXG5cbiAgcGVla0FoZWFkOiBmdW5jdGlvbihpLCBlMSwgZTIsIGUzLCBlNCkge1xuICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggPiBpKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0aGlzLnRva2Vuc1tpXTtcbiAgICAgIHZhciB0ID0gdG9rZW4udGV4dDtcbiAgICAgIGlmICh0ID09PSBlMSB8fCB0ID09PSBlMiB8fCB0ID09PSBlMyB8fCB0ID09PSBlNCB8fFxuICAgICAgICAgICghZTEgJiYgIWUyICYmICFlMyAmJiAhZTQpKSB7XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGV4cGVjdDogZnVuY3Rpb24oZTEsIGUyLCBlMywgZTQpIHtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLnBlZWsoZTEsIGUyLCBlMywgZTQpO1xuICAgIGlmICh0b2tlbikge1xuICAgICAgdGhpcy50b2tlbnMuc2hpZnQoKTtcbiAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG5cbiAgLyogYHVuZGVmaW5lZGAgaXMgbm90IGEgY29uc3RhbnQsIGl0IGlzIGFuIGlkZW50aWZpZXIsXG4gICAqIGJ1dCB1c2luZyBpdCBhcyBhbiBpZGVudGlmaWVyIGlzIG5vdCBzdXBwb3J0ZWRcbiAgICovXG4gIGNvbnN0YW50czoge1xuICAgICd0cnVlJzogeyB0eXBlOiBBU1QuTGl0ZXJhbCwgdmFsdWU6IHRydWUgfSxcbiAgICAnZmFsc2UnOiB7IHR5cGU6IEFTVC5MaXRlcmFsLCB2YWx1ZTogZmFsc2UgfSxcbiAgICAnbnVsbCc6IHsgdHlwZTogQVNULkxpdGVyYWwsIHZhbHVlOiBudWxsIH0sXG4gICAgJ3VuZGVmaW5lZCc6IHt0eXBlOiBBU1QuTGl0ZXJhbCwgdmFsdWU6IHVuZGVmaW5lZCB9LFxuICAgICd0aGlzJzoge3R5cGU6IEFTVC5UaGlzRXhwcmVzc2lvbiB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGlmRGVmaW5lZCh2LCBkKSB7XG4gIHJldHVybiB0eXBlb2YgdiAhPT0gJ3VuZGVmaW5lZCcgPyB2IDogZDtcbn1cblxuZnVuY3Rpb24gcGx1c0ZuKGwsIHIpIHtcbiAgaWYgKHR5cGVvZiBsID09PSAndW5kZWZpbmVkJykgcmV0dXJuIHI7XG4gIGlmICh0eXBlb2YgciA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBsO1xuICByZXR1cm4gbCArIHI7XG59XG5cbmZ1bmN0aW9uIGlzU3RhdGVsZXNzKCRmaWx0ZXIsIGZpbHRlck5hbWUpIHtcbiAgdmFyIGZuID0gJGZpbHRlcihmaWx0ZXJOYW1lKTtcbiAgcmV0dXJuICFmbi4kc3RhdGVmdWw7XG59XG5cbmZ1bmN0aW9uIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LCAkZmlsdGVyKSB7XG4gIHZhciBhbGxDb25zdGFudHM7XG4gIHZhciBhcmdzVG9XYXRjaDtcbiAgc3dpdGNoIChhc3QudHlwZSkge1xuICBjYXNlIEFTVC5Qcm9ncmFtOlxuICAgIGFsbENvbnN0YW50cyA9IHRydWU7XG4gICAgZm9yRWFjaChhc3QuYm9keSwgZnVuY3Rpb24oZXhwcikge1xuICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhleHByLmV4cHJlc3Npb24sICRmaWx0ZXIpO1xuICAgICAgYWxsQ29uc3RhbnRzID0gYWxsQ29uc3RhbnRzICYmIGV4cHIuZXhwcmVzc2lvbi5jb25zdGFudDtcbiAgICB9KTtcbiAgICBhc3QuY29uc3RhbnQgPSBhbGxDb25zdGFudHM7XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULkxpdGVyYWw6XG4gICAgYXN0LmNvbnN0YW50ID0gdHJ1ZTtcbiAgICBhc3QudG9XYXRjaCA9IFtdO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5VbmFyeUV4cHJlc3Npb246XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QuYXJndW1lbnQsICRmaWx0ZXIpO1xuICAgIGFzdC5jb25zdGFudCA9IGFzdC5hcmd1bWVudC5jb25zdGFudDtcbiAgICBhc3QudG9XYXRjaCA9IGFzdC5hcmd1bWVudC50b1dhdGNoO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5CaW5hcnlFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmxlZnQsICRmaWx0ZXIpO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnJpZ2h0LCAkZmlsdGVyKTtcbiAgICBhc3QuY29uc3RhbnQgPSBhc3QubGVmdC5jb25zdGFudCAmJiBhc3QucmlnaHQuY29uc3RhbnQ7XG4gICAgYXN0LnRvV2F0Y2ggPSBhc3QubGVmdC50b1dhdGNoLmNvbmNhdChhc3QucmlnaHQudG9XYXRjaCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULkxvZ2ljYWxFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmxlZnQsICRmaWx0ZXIpO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnJpZ2h0LCAkZmlsdGVyKTtcbiAgICBhc3QuY29uc3RhbnQgPSBhc3QubGVmdC5jb25zdGFudCAmJiBhc3QucmlnaHQuY29uc3RhbnQ7XG4gICAgYXN0LnRvV2F0Y2ggPSBhc3QuY29uc3RhbnQgPyBbXSA6IFthc3RdO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5Db25kaXRpb25hbEV4cHJlc3Npb246XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QudGVzdCwgJGZpbHRlcik7XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QuYWx0ZXJuYXRlLCAkZmlsdGVyKTtcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5jb25zZXF1ZW50LCAkZmlsdGVyKTtcbiAgICBhc3QuY29uc3RhbnQgPSBhc3QudGVzdC5jb25zdGFudCAmJiBhc3QuYWx0ZXJuYXRlLmNvbnN0YW50ICYmIGFzdC5jb25zZXF1ZW50LmNvbnN0YW50O1xuICAgIGFzdC50b1dhdGNoID0gYXN0LmNvbnN0YW50ID8gW10gOiBbYXN0XTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuSWRlbnRpZmllcjpcbiAgICBhc3QuY29uc3RhbnQgPSBmYWxzZTtcbiAgICBhc3QudG9XYXRjaCA9IFthc3RdO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5NZW1iZXJFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0Lm9iamVjdCwgJGZpbHRlcik7XG4gICAgaWYgKGFzdC5jb21wdXRlZCkge1xuICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QucHJvcGVydHksICRmaWx0ZXIpO1xuICAgIH1cbiAgICBhc3QuY29uc3RhbnQgPSBhc3Qub2JqZWN0LmNvbnN0YW50ICYmICghYXN0LmNvbXB1dGVkIHx8IGFzdC5wcm9wZXJ0eS5jb25zdGFudCk7XG4gICAgYXN0LnRvV2F0Y2ggPSBbYXN0XTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuQ2FsbEV4cHJlc3Npb246XG4gICAgYWxsQ29uc3RhbnRzID0gYXN0LmZpbHRlciA/IGlzU3RhdGVsZXNzKCRmaWx0ZXIsIGFzdC5jYWxsZWUubmFtZSkgOiBmYWxzZTtcbiAgICBhcmdzVG9XYXRjaCA9IFtdO1xuICAgIGZvckVhY2goYXN0LmFyZ3VtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhleHByLCAkZmlsdGVyKTtcbiAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBleHByLmNvbnN0YW50O1xuICAgICAgaWYgKCFleHByLmNvbnN0YW50KSB7XG4gICAgICAgIGFyZ3NUb1dhdGNoLnB1c2guYXBwbHkoYXJnc1RvV2F0Y2gsIGV4cHIudG9XYXRjaCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgYXN0LmNvbnN0YW50ID0gYWxsQ29uc3RhbnRzO1xuICAgIGFzdC50b1dhdGNoID0gYXN0LmZpbHRlciAmJiBpc1N0YXRlbGVzcygkZmlsdGVyLCBhc3QuY2FsbGVlLm5hbWUpID8gYXJnc1RvV2F0Y2ggOiBbYXN0XTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuQXNzaWdubWVudEV4cHJlc3Npb246XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QubGVmdCwgJGZpbHRlcik7XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QucmlnaHQsICRmaWx0ZXIpO1xuICAgIGFzdC5jb25zdGFudCA9IGFzdC5sZWZ0LmNvbnN0YW50ICYmIGFzdC5yaWdodC5jb25zdGFudDtcbiAgICBhc3QudG9XYXRjaCA9IFthc3RdO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5BcnJheUV4cHJlc3Npb246XG4gICAgYWxsQ29uc3RhbnRzID0gdHJ1ZTtcbiAgICBhcmdzVG9XYXRjaCA9IFtdO1xuICAgIGZvckVhY2goYXN0LmVsZW1lbnRzLCBmdW5jdGlvbihleHByKSB7XG4gICAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGV4cHIsICRmaWx0ZXIpO1xuICAgICAgYWxsQ29uc3RhbnRzID0gYWxsQ29uc3RhbnRzICYmIGV4cHIuY29uc3RhbnQ7XG4gICAgICBpZiAoIWV4cHIuY29uc3RhbnQpIHtcbiAgICAgICAgYXJnc1RvV2F0Y2gucHVzaC5hcHBseShhcmdzVG9XYXRjaCwgZXhwci50b1dhdGNoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBhc3QuY29uc3RhbnQgPSBhbGxDb25zdGFudHM7XG4gICAgYXN0LnRvV2F0Y2ggPSBhcmdzVG9XYXRjaDtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuT2JqZWN0RXhwcmVzc2lvbjpcbiAgICBhbGxDb25zdGFudHMgPSB0cnVlO1xuICAgIGFyZ3NUb1dhdGNoID0gW107XG4gICAgZm9yRWFjaChhc3QucHJvcGVydGllcywgZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMocHJvcGVydHkudmFsdWUsICRmaWx0ZXIpO1xuICAgICAgYWxsQ29uc3RhbnRzID0gYWxsQ29uc3RhbnRzICYmIHByb3BlcnR5LnZhbHVlLmNvbnN0YW50O1xuICAgICAgaWYgKCFwcm9wZXJ0eS52YWx1ZS5jb25zdGFudCkge1xuICAgICAgICBhcmdzVG9XYXRjaC5wdXNoLmFwcGx5KGFyZ3NUb1dhdGNoLCBwcm9wZXJ0eS52YWx1ZS50b1dhdGNoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBhc3QuY29uc3RhbnQgPSBhbGxDb25zdGFudHM7XG4gICAgYXN0LnRvV2F0Y2ggPSBhcmdzVG9XYXRjaDtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuVGhpc0V4cHJlc3Npb246XG4gICAgYXN0LmNvbnN0YW50ID0gZmFsc2U7XG4gICAgYXN0LnRvV2F0Y2ggPSBbXTtcbiAgICBicmVhaztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRJbnB1dHMoYm9keSkge1xuICBpZiAoYm9keS5sZW5ndGggIT0gMSkgcmV0dXJuO1xuICB2YXIgbGFzdEV4cHJlc3Npb24gPSBib2R5WzBdLmV4cHJlc3Npb247XG4gIHZhciBjYW5kaWRhdGUgPSBsYXN0RXhwcmVzc2lvbi50b1dhdGNoO1xuICBpZiAoY2FuZGlkYXRlLmxlbmd0aCAhPT0gMSkgcmV0dXJuIGNhbmRpZGF0ZTtcbiAgcmV0dXJuIGNhbmRpZGF0ZVswXSAhPT0gbGFzdEV4cHJlc3Npb24gPyBjYW5kaWRhdGUgOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGlzQXNzaWduYWJsZShhc3QpIHtcbiAgcmV0dXJuIGFzdC50eXBlID09PSBBU1QuSWRlbnRpZmllciB8fCBhc3QudHlwZSA9PT0gQVNULk1lbWJlckV4cHJlc3Npb247XG59XG5cbmZ1bmN0aW9uIGFzc2lnbmFibGVBU1QoYXN0KSB7XG4gIGlmIChhc3QuYm9keS5sZW5ndGggPT09IDEgJiYgaXNBc3NpZ25hYmxlKGFzdC5ib2R5WzBdLmV4cHJlc3Npb24pKSB7XG4gICAgcmV0dXJuIHt0eXBlOiBBU1QuQXNzaWdubWVudEV4cHJlc3Npb24sIGxlZnQ6IGFzdC5ib2R5WzBdLmV4cHJlc3Npb24sIHJpZ2h0OiB7dHlwZTogQVNULk5HVmFsdWVQYXJhbWV0ZXJ9LCBvcGVyYXRvcjogJz0nfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0xpdGVyYWwoYXN0KSB7XG4gIHJldHVybiBhc3QuYm9keS5sZW5ndGggPT09IDAgfHxcbiAgICAgIGFzdC5ib2R5Lmxlbmd0aCA9PT0gMSAmJiAoXG4gICAgICBhc3QuYm9keVswXS5leHByZXNzaW9uLnR5cGUgPT09IEFTVC5MaXRlcmFsIHx8XG4gICAgICBhc3QuYm9keVswXS5leHByZXNzaW9uLnR5cGUgPT09IEFTVC5BcnJheUV4cHJlc3Npb24gfHxcbiAgICAgIGFzdC5ib2R5WzBdLmV4cHJlc3Npb24udHlwZSA9PT0gQVNULk9iamVjdEV4cHJlc3Npb24pO1xufVxuXG5mdW5jdGlvbiBpc0NvbnN0YW50KGFzdCkge1xuICByZXR1cm4gYXN0LmNvbnN0YW50O1xufVxuXG5mdW5jdGlvbiBBU1RDb21waWxlcihhc3RCdWlsZGVyLCAkZmlsdGVyKSB7XG4gIHRoaXMuYXN0QnVpbGRlciA9IGFzdEJ1aWxkZXI7XG4gIHRoaXMuJGZpbHRlciA9ICRmaWx0ZXI7XG59XG5cbkFTVENvbXBpbGVyLnByb3RvdHlwZSA9IHtcbiAgY29tcGlsZTogZnVuY3Rpb24oZXhwcmVzc2lvbiwgZXhwZW5zaXZlQ2hlY2tzKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBhc3QgPSB0aGlzLmFzdEJ1aWxkZXIuYXN0KGV4cHJlc3Npb24pO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBuZXh0SWQ6IDAsXG4gICAgICBmaWx0ZXJzOiB7fSxcbiAgICAgIGV4cGVuc2l2ZUNoZWNrczogZXhwZW5zaXZlQ2hlY2tzLFxuICAgICAgZm46IHt2YXJzOiBbXSwgYm9keTogW10sIG93bjoge319LFxuICAgICAgYXNzaWduOiB7dmFyczogW10sIGJvZHk6IFtdLCBvd246IHt9fSxcbiAgICAgIGlucHV0czogW11cbiAgICB9O1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LCBzZWxmLiRmaWx0ZXIpO1xuICAgIHZhciBleHRyYSA9ICcnO1xuICAgIHZhciBhc3NpZ25hYmxlO1xuICAgIHRoaXMuc3RhZ2UgPSAnYXNzaWduJztcbiAgICBpZiAoKGFzc2lnbmFibGUgPSBhc3NpZ25hYmxlQVNUKGFzdCkpKSB7XG4gICAgICB0aGlzLnN0YXRlLmNvbXB1dGluZyA9ICdhc3NpZ24nO1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMubmV4dElkKCk7XG4gICAgICB0aGlzLnJlY3Vyc2UoYXNzaWduYWJsZSwgcmVzdWx0KTtcbiAgICAgIGV4dHJhID0gJ2ZuLmFzc2lnbj0nICsgdGhpcy5nZW5lcmF0ZUZ1bmN0aW9uKCdhc3NpZ24nLCAncyx2LGwnKTtcbiAgICB9XG4gICAgdmFyIHRvV2F0Y2ggPSBnZXRJbnB1dHMoYXN0LmJvZHkpO1xuICAgIHNlbGYuc3RhZ2UgPSAnaW5wdXRzJztcbiAgICBmb3JFYWNoKHRvV2F0Y2gsIGZ1bmN0aW9uKHdhdGNoLCBrZXkpIHtcbiAgICAgIHZhciBmbktleSA9ICdmbicgKyBrZXk7XG4gICAgICBzZWxmLnN0YXRlW2ZuS2V5XSA9IHt2YXJzOiBbXSwgYm9keTogW10sIG93bjoge319O1xuICAgICAgc2VsZi5zdGF0ZS5jb21wdXRpbmcgPSBmbktleTtcbiAgICAgIHZhciBpbnRvSWQgPSBzZWxmLm5leHRJZCgpO1xuICAgICAgc2VsZi5yZWN1cnNlKHdhdGNoLCBpbnRvSWQpO1xuICAgICAgc2VsZi5yZXR1cm5fKGludG9JZCk7XG4gICAgICBzZWxmLnN0YXRlLmlucHV0cy5wdXNoKGZuS2V5KTtcbiAgICAgIHdhdGNoLndhdGNoSWQgPSBrZXk7XG4gICAgfSk7XG4gICAgdGhpcy5zdGF0ZS5jb21wdXRpbmcgPSAnZm4nO1xuICAgIHRoaXMuc3RhZ2UgPSAnbWFpbic7XG4gICAgdGhpcy5yZWN1cnNlKGFzdCk7XG4gICAgdmFyIGZuU3RyaW5nID1cbiAgICAgIC8vIFRoZSBidWlsZCBhbmQgbWluaWZpY2F0aW9uIHN0ZXBzIHJlbW92ZSB0aGUgc3RyaW5nIFwidXNlIHN0cmljdFwiIGZyb20gdGhlIGNvZGUsIGJ1dCB0aGlzIGlzIGRvbmUgdXNpbmcgYSByZWdleC5cbiAgICAgIC8vIFRoaXMgaXMgYSB3b3JrYXJvdW5kIGZvciB0aGlzIHVudGlsIHdlIGRvIGEgYmV0dGVyIGpvYiBhdCBvbmx5IHJlbW92aW5nIHRoZSBwcmVmaXggb25seSB3aGVuIHdlIHNob3VsZC5cbiAgICAgICdcIicgKyB0aGlzLlVTRSArICcgJyArIHRoaXMuU1RSSUNUICsgJ1wiO1xcbicgK1xuICAgICAgdGhpcy5maWx0ZXJQcmVmaXgoKSArXG4gICAgICAndmFyIGZuPScgKyB0aGlzLmdlbmVyYXRlRnVuY3Rpb24oJ2ZuJywgJ3MsbCxhLGknKSArXG4gICAgICBleHRyYSArXG4gICAgICB0aGlzLndhdGNoRm5zKCkgK1xuICAgICAgJ3JldHVybiBmbjsnO1xuXG4gICAgLyoganNoaW50IC1XMDU0ICovXG4gICAgdmFyIGZuID0gKG5ldyBGdW5jdGlvbignJGZpbHRlcicsXG4gICAgICAgICdlbnN1cmVTYWZlTWVtYmVyTmFtZScsXG4gICAgICAgICdlbnN1cmVTYWZlT2JqZWN0JyxcbiAgICAgICAgJ2Vuc3VyZVNhZmVGdW5jdGlvbicsXG4gICAgICAgICdpZkRlZmluZWQnLFxuICAgICAgICAncGx1cycsXG4gICAgICAgICd0ZXh0JyxcbiAgICAgICAgZm5TdHJpbmcpKShcbiAgICAgICAgICB0aGlzLiRmaWx0ZXIsXG4gICAgICAgICAgZW5zdXJlU2FmZU1lbWJlck5hbWUsXG4gICAgICAgICAgZW5zdXJlU2FmZU9iamVjdCxcbiAgICAgICAgICBlbnN1cmVTYWZlRnVuY3Rpb24sXG4gICAgICAgICAgaWZEZWZpbmVkLFxuICAgICAgICAgIHBsdXNGbixcbiAgICAgICAgICBleHByZXNzaW9uKTtcbiAgICAvKiBqc2hpbnQgK1cwNTQgKi9cbiAgICB0aGlzLnN0YXRlID0gdGhpcy5zdGFnZSA9IHVuZGVmaW5lZDtcbiAgICBmbi5saXRlcmFsID0gaXNMaXRlcmFsKGFzdCk7XG4gICAgZm4uY29uc3RhbnQgPSBpc0NvbnN0YW50KGFzdCk7XG4gICAgcmV0dXJuIGZuO1xuICB9LFxuXG4gIFVTRTogJ3VzZScsXG5cbiAgU1RSSUNUOiAnc3RyaWN0JyxcblxuICB3YXRjaEZuczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBmbnMgPSB0aGlzLnN0YXRlLmlucHV0cztcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZm9yRWFjaChmbnMsIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKCd2YXIgJyArIG5hbWUgKyAnPScgKyBzZWxmLmdlbmVyYXRlRnVuY3Rpb24obmFtZSwgJ3MnKSk7XG4gICAgfSk7XG4gICAgaWYgKGZucy5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdC5wdXNoKCdmbi5pbnB1dHM9WycgKyBmbnMuam9pbignLCcpICsgJ107Jyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gIH0sXG5cbiAgZ2VuZXJhdGVGdW5jdGlvbjogZnVuY3Rpb24obmFtZSwgcGFyYW1zKSB7XG4gICAgcmV0dXJuICdmdW5jdGlvbignICsgcGFyYW1zICsgJyl7JyArXG4gICAgICAgIHRoaXMudmFyc1ByZWZpeChuYW1lKSArXG4gICAgICAgIHRoaXMuYm9keShuYW1lKSArXG4gICAgICAgICd9Oyc7XG4gIH0sXG5cbiAgZmlsdGVyUHJlZml4OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZm9yRWFjaCh0aGlzLnN0YXRlLmZpbHRlcnMsIGZ1bmN0aW9uKGlkLCBmaWx0ZXIpIHtcbiAgICAgIHBhcnRzLnB1c2goaWQgKyAnPSRmaWx0ZXIoJyArIHNlbGYuZXNjYXBlKGZpbHRlcikgKyAnKScpO1xuICAgIH0pO1xuICAgIGlmIChwYXJ0cy5sZW5ndGgpIHJldHVybiAndmFyICcgKyBwYXJ0cy5qb2luKCcsJykgKyAnOyc7XG4gICAgcmV0dXJuICcnO1xuICB9LFxuXG4gIHZhcnNQcmVmaXg6IGZ1bmN0aW9uKHNlY3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZVtzZWN0aW9uXS52YXJzLmxlbmd0aCA/ICd2YXIgJyArIHRoaXMuc3RhdGVbc2VjdGlvbl0udmFycy5qb2luKCcsJykgKyAnOycgOiAnJztcbiAgfSxcblxuICBib2R5OiBmdW5jdGlvbihzZWN0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVbc2VjdGlvbl0uYm9keS5qb2luKCcnKTtcbiAgfSxcblxuICByZWN1cnNlOiBmdW5jdGlvbihhc3QsIGludG9JZCwgbmFtZUlkLCByZWN1cnNpb25GbiwgY3JlYXRlLCBza2lwV2F0Y2hJZENoZWNrKSB7XG4gICAgdmFyIGxlZnQsIHJpZ2h0LCBzZWxmID0gdGhpcywgYXJncywgZXhwcmVzc2lvbjtcbiAgICByZWN1cnNpb25GbiA9IHJlY3Vyc2lvbkZuIHx8IG5vb3A7XG4gICAgaWYgKCFza2lwV2F0Y2hJZENoZWNrICYmIGlzRGVmaW5lZChhc3Qud2F0Y2hJZCkpIHtcbiAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgdGhpcy5pZl8oJ2knLFxuICAgICAgICB0aGlzLmxhenlBc3NpZ24oaW50b0lkLCB0aGlzLmNvbXB1dGVkTWVtYmVyKCdpJywgYXN0LndhdGNoSWQpKSxcbiAgICAgICAgdGhpcy5sYXp5UmVjdXJzZShhc3QsIGludG9JZCwgbmFtZUlkLCByZWN1cnNpb25GbiwgY3JlYXRlLCB0cnVlKVxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpdGNoIChhc3QudHlwZSkge1xuICAgIGNhc2UgQVNULlByb2dyYW06XG4gICAgICBmb3JFYWNoKGFzdC5ib2R5LCBmdW5jdGlvbihleHByZXNzaW9uLCBwb3MpIHtcbiAgICAgICAgc2VsZi5yZWN1cnNlKGV4cHJlc3Npb24uZXhwcmVzc2lvbiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGV4cHIpIHsgcmlnaHQgPSBleHByOyB9KTtcbiAgICAgICAgaWYgKHBvcyAhPT0gYXN0LmJvZHkubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHNlbGYuY3VycmVudCgpLmJvZHkucHVzaChyaWdodCwgJzsnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLnJldHVybl8ocmlnaHQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULkxpdGVyYWw6XG4gICAgICBleHByZXNzaW9uID0gdGhpcy5lc2NhcGUoYXN0LnZhbHVlKTtcbiAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICByZWN1cnNpb25GbihleHByZXNzaW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULlVuYXJ5RXhwcmVzc2lvbjpcbiAgICAgIHRoaXMucmVjdXJzZShhc3QuYXJndW1lbnQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmdW5jdGlvbihleHByKSB7IHJpZ2h0ID0gZXhwcjsgfSk7XG4gICAgICBleHByZXNzaW9uID0gYXN0Lm9wZXJhdG9yICsgJygnICsgdGhpcy5pZkRlZmluZWQocmlnaHQsIDApICsgJyknO1xuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGV4cHJlc3Npb24pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuQmluYXJ5RXhwcmVzc2lvbjpcbiAgICAgIHRoaXMucmVjdXJzZShhc3QubGVmdCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGV4cHIpIHsgbGVmdCA9IGV4cHI7IH0pO1xuICAgICAgdGhpcy5yZWN1cnNlKGFzdC5yaWdodCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGV4cHIpIHsgcmlnaHQgPSBleHByOyB9KTtcbiAgICAgIGlmIChhc3Qub3BlcmF0b3IgPT09ICcrJykge1xuICAgICAgICBleHByZXNzaW9uID0gdGhpcy5wbHVzKGxlZnQsIHJpZ2h0KTtcbiAgICAgIH0gZWxzZSBpZiAoYXN0Lm9wZXJhdG9yID09PSAnLScpIHtcbiAgICAgICAgZXhwcmVzc2lvbiA9IHRoaXMuaWZEZWZpbmVkKGxlZnQsIDApICsgYXN0Lm9wZXJhdG9yICsgdGhpcy5pZkRlZmluZWQocmlnaHQsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhwcmVzc2lvbiA9ICcoJyArIGxlZnQgKyAnKScgKyBhc3Qub3BlcmF0b3IgKyAnKCcgKyByaWdodCArICcpJztcbiAgICAgIH1cbiAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICByZWN1cnNpb25GbihleHByZXNzaW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULkxvZ2ljYWxFeHByZXNzaW9uOlxuICAgICAgaW50b0lkID0gaW50b0lkIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICBzZWxmLnJlY3Vyc2UoYXN0LmxlZnQsIGludG9JZCk7XG4gICAgICBzZWxmLmlmXyhhc3Qub3BlcmF0b3IgPT09ICcmJicgPyBpbnRvSWQgOiBzZWxmLm5vdChpbnRvSWQpLCBzZWxmLmxhenlSZWN1cnNlKGFzdC5yaWdodCwgaW50b0lkKSk7XG4gICAgICByZWN1cnNpb25GbihpbnRvSWQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuQ29uZGl0aW9uYWxFeHByZXNzaW9uOlxuICAgICAgaW50b0lkID0gaW50b0lkIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICBzZWxmLnJlY3Vyc2UoYXN0LnRlc3QsIGludG9JZCk7XG4gICAgICBzZWxmLmlmXyhpbnRvSWQsIHNlbGYubGF6eVJlY3Vyc2UoYXN0LmFsdGVybmF0ZSwgaW50b0lkKSwgc2VsZi5sYXp5UmVjdXJzZShhc3QuY29uc2VxdWVudCwgaW50b0lkKSk7XG4gICAgICByZWN1cnNpb25GbihpbnRvSWQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuSWRlbnRpZmllcjpcbiAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgaWYgKG5hbWVJZCkge1xuICAgICAgICBuYW1lSWQuY29udGV4dCA9IHNlbGYuc3RhZ2UgPT09ICdpbnB1dHMnID8gJ3MnIDogdGhpcy5hc3NpZ24odGhpcy5uZXh0SWQoKSwgdGhpcy5nZXRIYXNPd25Qcm9wZXJ0eSgnbCcsIGFzdC5uYW1lKSArICc/bDpzJyk7XG4gICAgICAgIG5hbWVJZC5jb21wdXRlZCA9IGZhbHNlO1xuICAgICAgICBuYW1lSWQubmFtZSA9IGFzdC5uYW1lO1xuICAgICAgfVxuICAgICAgZW5zdXJlU2FmZU1lbWJlck5hbWUoYXN0Lm5hbWUpO1xuICAgICAgc2VsZi5pZl8oc2VsZi5zdGFnZSA9PT0gJ2lucHV0cycgfHwgc2VsZi5ub3Qoc2VsZi5nZXRIYXNPd25Qcm9wZXJ0eSgnbCcsIGFzdC5uYW1lKSksXG4gICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYuaWZfKHNlbGYuc3RhZ2UgPT09ICdpbnB1dHMnIHx8ICdzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSkge1xuICAgICAgICAgICAgICBzZWxmLmlmXyhcbiAgICAgICAgICAgICAgICBzZWxmLm5vdChzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKCdzJywgYXN0Lm5hbWUpKSxcbiAgICAgICAgICAgICAgICBzZWxmLmxhenlBc3NpZ24oc2VsZi5ub25Db21wdXRlZE1lbWJlcigncycsIGFzdC5uYW1lKSwgJ3t9JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKCdzJywgYXN0Lm5hbWUpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgaW50b0lkICYmIHNlbGYubGF6eUFzc2lnbihpbnRvSWQsIHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIoJ2wnLCBhc3QubmFtZSkpXG4gICAgICAgICk7XG4gICAgICBpZiAoc2VsZi5zdGF0ZS5leHBlbnNpdmVDaGVja3MgfHwgaXNQb3NzaWJseURhbmdlcm91c01lbWJlck5hbWUoYXN0Lm5hbWUpKSB7XG4gICAgICAgIHNlbGYuYWRkRW5zdXJlU2FmZU9iamVjdChpbnRvSWQpO1xuICAgICAgfVxuICAgICAgcmVjdXJzaW9uRm4oaW50b0lkKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULk1lbWJlckV4cHJlc3Npb246XG4gICAgICBsZWZ0ID0gbmFtZUlkICYmIChuYW1lSWQuY29udGV4dCA9IHRoaXMubmV4dElkKCkpIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgIHNlbGYucmVjdXJzZShhc3Qub2JqZWN0LCBsZWZ0LCB1bmRlZmluZWQsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLmlmXyhzZWxmLm5vdE51bGwobGVmdCksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChhc3QuY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIHJpZ2h0ID0gc2VsZi5uZXh0SWQoKTtcbiAgICAgICAgICAgIHNlbGYucmVjdXJzZShhc3QucHJvcGVydHksIHJpZ2h0KTtcbiAgICAgICAgICAgIHNlbGYuYWRkRW5zdXJlU2FmZU1lbWJlck5hbWUocmlnaHQpO1xuICAgICAgICAgICAgaWYgKGNyZWF0ZSAmJiBjcmVhdGUgIT09IDEpIHtcbiAgICAgICAgICAgICAgc2VsZi5pZl8oc2VsZi5ub3Qoc2VsZi5jb21wdXRlZE1lbWJlcihsZWZ0LCByaWdodCkpLCBzZWxmLmxhenlBc3NpZ24oc2VsZi5jb21wdXRlZE1lbWJlcihsZWZ0LCByaWdodCksICd7fScpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV4cHJlc3Npb24gPSBzZWxmLmVuc3VyZVNhZmVPYmplY3Qoc2VsZi5jb21wdXRlZE1lbWJlcihsZWZ0LCByaWdodCkpO1xuICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgICAgICAgIGlmIChuYW1lSWQpIHtcbiAgICAgICAgICAgICAgbmFtZUlkLmNvbXB1dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgbmFtZUlkLm5hbWUgPSByaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZW5zdXJlU2FmZU1lbWJlck5hbWUoYXN0LnByb3BlcnR5Lm5hbWUpO1xuICAgICAgICAgICAgaWYgKGNyZWF0ZSAmJiBjcmVhdGUgIT09IDEpIHtcbiAgICAgICAgICAgICAgc2VsZi5pZl8oc2VsZi5ub3Qoc2VsZi5ub25Db21wdXRlZE1lbWJlcihsZWZ0LCBhc3QucHJvcGVydHkubmFtZSkpLCBzZWxmLmxhenlBc3NpZ24oc2VsZi5ub25Db21wdXRlZE1lbWJlcihsZWZ0LCBhc3QucHJvcGVydHkubmFtZSksICd7fScpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV4cHJlc3Npb24gPSBzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKGxlZnQsIGFzdC5wcm9wZXJ0eS5uYW1lKTtcbiAgICAgICAgICAgIGlmIChzZWxmLnN0YXRlLmV4cGVuc2l2ZUNoZWNrcyB8fCBpc1Bvc3NpYmx5RGFuZ2Vyb3VzTWVtYmVyTmFtZShhc3QucHJvcGVydHkubmFtZSkpIHtcbiAgICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHNlbGYuZW5zdXJlU2FmZU9iamVjdChleHByZXNzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICAgICAgICBpZiAobmFtZUlkKSB7XG4gICAgICAgICAgICAgIG5hbWVJZC5jb21wdXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICBuYW1lSWQubmFtZSA9IGFzdC5wcm9wZXJ0eS5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCAndW5kZWZpbmVkJyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZWN1cnNpb25GbihpbnRvSWQpO1xuICAgICAgfSwgISFjcmVhdGUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuQ2FsbEV4cHJlc3Npb246XG4gICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgIGlmIChhc3QuZmlsdGVyKSB7XG4gICAgICAgIHJpZ2h0ID0gc2VsZi5maWx0ZXIoYXN0LmNhbGxlZS5uYW1lKTtcbiAgICAgICAgYXJncyA9IFtdO1xuICAgICAgICBmb3JFYWNoKGFzdC5hcmd1bWVudHMsIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgICAgICB2YXIgYXJndW1lbnQgPSBzZWxmLm5leHRJZCgpO1xuICAgICAgICAgIHNlbGYucmVjdXJzZShleHByLCBhcmd1bWVudCk7XG4gICAgICAgICAgYXJncy5wdXNoKGFyZ3VtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGV4cHJlc3Npb24gPSByaWdodCArICcoJyArIGFyZ3Muam9pbignLCcpICsgJyknO1xuICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICByZWN1cnNpb25GbihpbnRvSWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmlnaHQgPSBzZWxmLm5leHRJZCgpO1xuICAgICAgICBsZWZ0ID0ge307XG4gICAgICAgIGFyZ3MgPSBbXTtcbiAgICAgICAgc2VsZi5yZWN1cnNlKGFzdC5jYWxsZWUsIHJpZ2h0LCBsZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLmlmXyhzZWxmLm5vdE51bGwocmlnaHQpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYuYWRkRW5zdXJlU2FmZUZ1bmN0aW9uKHJpZ2h0KTtcbiAgICAgICAgICAgIGZvckVhY2goYXN0LmFyZ3VtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICAgICAgICBzZWxmLnJlY3Vyc2UoZXhwciwgc2VsZi5uZXh0SWQoKSwgdW5kZWZpbmVkLCBmdW5jdGlvbihhcmd1bWVudCkge1xuICAgICAgICAgICAgICAgIGFyZ3MucHVzaChzZWxmLmVuc3VyZVNhZmVPYmplY3QoYXJndW1lbnQpKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChsZWZ0Lm5hbWUpIHtcbiAgICAgICAgICAgICAgaWYgKCFzZWxmLnN0YXRlLmV4cGVuc2l2ZUNoZWNrcykge1xuICAgICAgICAgICAgICAgIHNlbGYuYWRkRW5zdXJlU2FmZU9iamVjdChsZWZ0LmNvbnRleHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGV4cHJlc3Npb24gPSBzZWxmLm1lbWJlcihsZWZ0LmNvbnRleHQsIGxlZnQubmFtZSwgbGVmdC5jb21wdXRlZCkgKyAnKCcgKyBhcmdzLmpvaW4oJywnKSArICcpJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGV4cHJlc3Npb24gPSByaWdodCArICcoJyArIGFyZ3Muam9pbignLCcpICsgJyknO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHNlbGYuZW5zdXJlU2FmZU9iamVjdChleHByZXNzaW9uKTtcbiAgICAgICAgICAgIHNlbGYuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsICd1bmRlZmluZWQnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZWN1cnNpb25GbihpbnRvSWQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULkFzc2lnbm1lbnRFeHByZXNzaW9uOlxuICAgICAgcmlnaHQgPSB0aGlzLm5leHRJZCgpO1xuICAgICAgbGVmdCA9IHt9O1xuICAgICAgaWYgKCFpc0Fzc2lnbmFibGUoYXN0LmxlZnQpKSB7XG4gICAgICAgIHRocm93ICRwYXJzZU1pbkVycignbHZhbCcsICdUcnlpbmcgdG8gYXNzaW5nIGEgdmFsdWUgdG8gYSBub24gbC12YWx1ZScpO1xuICAgICAgfVxuICAgICAgdGhpcy5yZWN1cnNlKGFzdC5sZWZ0LCB1bmRlZmluZWQsIGxlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLmlmXyhzZWxmLm5vdE51bGwobGVmdC5jb250ZXh0KSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5yZWN1cnNlKGFzdC5yaWdodCwgcmlnaHQpO1xuICAgICAgICAgIHNlbGYuYWRkRW5zdXJlU2FmZU9iamVjdChzZWxmLm1lbWJlcihsZWZ0LmNvbnRleHQsIGxlZnQubmFtZSwgbGVmdC5jb21wdXRlZCkpO1xuICAgICAgICAgIGV4cHJlc3Npb24gPSBzZWxmLm1lbWJlcihsZWZ0LmNvbnRleHQsIGxlZnQubmFtZSwgbGVmdC5jb21wdXRlZCkgKyBhc3Qub3BlcmF0b3IgKyByaWdodDtcbiAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCB8fCBleHByZXNzaW9uKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCAxKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULkFycmF5RXhwcmVzc2lvbjpcbiAgICAgIGFyZ3MgPSBbXTtcbiAgICAgIGZvckVhY2goYXN0LmVsZW1lbnRzLCBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIHNlbGYucmVjdXJzZShleHByLCBzZWxmLm5leHRJZCgpLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGFyZ3VtZW50KSB7XG4gICAgICAgICAgYXJncy5wdXNoKGFyZ3VtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGV4cHJlc3Npb24gPSAnWycgKyBhcmdzLmpvaW4oJywnKSArICddJztcbiAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICByZWN1cnNpb25GbihleHByZXNzaW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULk9iamVjdEV4cHJlc3Npb246XG4gICAgICBhcmdzID0gW107XG4gICAgICBmb3JFYWNoKGFzdC5wcm9wZXJ0aWVzLCBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgICBzZWxmLnJlY3Vyc2UocHJvcGVydHkudmFsdWUsIHNlbGYubmV4dElkKCksIHVuZGVmaW5lZCwgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICAgIGFyZ3MucHVzaChzZWxmLmVzY2FwZShcbiAgICAgICAgICAgICAgcHJvcGVydHkua2V5LnR5cGUgPT09IEFTVC5JZGVudGlmaWVyID8gcHJvcGVydHkua2V5Lm5hbWUgOlxuICAgICAgICAgICAgICAgICgnJyArIHByb3BlcnR5LmtleS52YWx1ZSkpICtcbiAgICAgICAgICAgICAgJzonICsgZXhwcik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBleHByZXNzaW9uID0gJ3snICsgYXJncy5qb2luKCcsJykgKyAnfSc7XG4gICAgICB0aGlzLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgcmVjdXJzaW9uRm4oZXhwcmVzc2lvbik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5UaGlzRXhwcmVzc2lvbjpcbiAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgJ3MnKTtcbiAgICAgIHJlY3Vyc2lvbkZuKCdzJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5OR1ZhbHVlUGFyYW1ldGVyOlxuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCAndicpO1xuICAgICAgcmVjdXJzaW9uRm4oJ3YnKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSxcblxuICBnZXRIYXNPd25Qcm9wZXJ0eTogZnVuY3Rpb24oZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgICB2YXIga2V5ID0gZWxlbWVudCArICcuJyArIHByb3BlcnR5O1xuICAgIHZhciBvd24gPSB0aGlzLmN1cnJlbnQoKS5vd247XG4gICAgaWYgKCFvd24uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgb3duW2tleV0gPSB0aGlzLm5leHRJZChmYWxzZSwgZWxlbWVudCArICcmJignICsgdGhpcy5lc2NhcGUocHJvcGVydHkpICsgJyBpbiAnICsgZWxlbWVudCArICcpJyk7XG4gICAgfVxuICAgIHJldHVybiBvd25ba2V5XTtcbiAgfSxcblxuICBhc3NpZ246IGZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICAgIGlmICghaWQpIHJldHVybjtcbiAgICB0aGlzLmN1cnJlbnQoKS5ib2R5LnB1c2goaWQsICc9JywgdmFsdWUsICc7Jyk7XG4gICAgcmV0dXJuIGlkO1xuICB9LFxuXG4gIGZpbHRlcjogZnVuY3Rpb24oZmlsdGVyTmFtZSkge1xuICAgIGlmICghdGhpcy5zdGF0ZS5maWx0ZXJzLmhhc093blByb3BlcnR5KGZpbHRlck5hbWUpKSB7XG4gICAgICB0aGlzLnN0YXRlLmZpbHRlcnNbZmlsdGVyTmFtZV0gPSB0aGlzLm5leHRJZCh0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuZmlsdGVyc1tmaWx0ZXJOYW1lXTtcbiAgfSxcblxuICBpZkRlZmluZWQ6IGZ1bmN0aW9uKGlkLCBkZWZhdWx0VmFsdWUpIHtcbiAgICByZXR1cm4gJ2lmRGVmaW5lZCgnICsgaWQgKyAnLCcgKyB0aGlzLmVzY2FwZShkZWZhdWx0VmFsdWUpICsgJyknO1xuICB9LFxuXG4gIHBsdXM6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgcmV0dXJuICdwbHVzKCcgKyBsZWZ0ICsgJywnICsgcmlnaHQgKyAnKSc7XG4gIH0sXG5cbiAgcmV0dXJuXzogZnVuY3Rpb24oaWQpIHtcbiAgICB0aGlzLmN1cnJlbnQoKS5ib2R5LnB1c2goJ3JldHVybiAnLCBpZCwgJzsnKTtcbiAgfSxcblxuICBpZl86IGZ1bmN0aW9uKHRlc3QsIGFsdGVybmF0ZSwgY29uc2VxdWVudCkge1xuICAgIGlmICh0ZXN0ID09PSB0cnVlKSB7XG4gICAgICBhbHRlcm5hdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGJvZHkgPSB0aGlzLmN1cnJlbnQoKS5ib2R5O1xuICAgICAgYm9keS5wdXNoKCdpZignLCB0ZXN0LCAnKXsnKTtcbiAgICAgIGFsdGVybmF0ZSgpO1xuICAgICAgYm9keS5wdXNoKCd9Jyk7XG4gICAgICBpZiAoY29uc2VxdWVudCkge1xuICAgICAgICBib2R5LnB1c2goJ2Vsc2V7Jyk7XG4gICAgICAgIGNvbnNlcXVlbnQoKTtcbiAgICAgICAgYm9keS5wdXNoKCd9Jyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIG5vdDogZnVuY3Rpb24oZXhwcmVzc2lvbikge1xuICAgIHJldHVybiAnISgnICsgZXhwcmVzc2lvbiArICcpJztcbiAgfSxcblxuICBub3ROdWxsOiBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb24gKyAnIT1udWxsJztcbiAgfSxcblxuICBub25Db21wdXRlZE1lbWJlcjogZnVuY3Rpb24obGVmdCwgcmlnaHQpIHtcbiAgICByZXR1cm4gbGVmdCArICcuJyArIHJpZ2h0O1xuICB9LFxuXG4gIGNvbXB1dGVkTWVtYmVyOiBmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgIHJldHVybiBsZWZ0ICsgJ1snICsgcmlnaHQgKyAnXSc7XG4gIH0sXG5cbiAgbWVtYmVyOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29tcHV0ZWQpIHtcbiAgICBpZiAoY29tcHV0ZWQpIHJldHVybiB0aGlzLmNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0KTtcbiAgICByZXR1cm4gdGhpcy5ub25Db21wdXRlZE1lbWJlcihsZWZ0LCByaWdodCk7XG4gIH0sXG5cbiAgYWRkRW5zdXJlU2FmZU9iamVjdDogZnVuY3Rpb24oaXRlbSkge1xuICAgIHRoaXMuY3VycmVudCgpLmJvZHkucHVzaCh0aGlzLmVuc3VyZVNhZmVPYmplY3QoaXRlbSksICc7Jyk7XG4gIH0sXG5cbiAgYWRkRW5zdXJlU2FmZU1lbWJlck5hbWU6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICB0aGlzLmN1cnJlbnQoKS5ib2R5LnB1c2godGhpcy5lbnN1cmVTYWZlTWVtYmVyTmFtZShpdGVtKSwgJzsnKTtcbiAgfSxcblxuICBhZGRFbnN1cmVTYWZlRnVuY3Rpb246IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICB0aGlzLmN1cnJlbnQoKS5ib2R5LnB1c2godGhpcy5lbnN1cmVTYWZlRnVuY3Rpb24oaXRlbSksICc7Jyk7XG4gIH0sXG5cbiAgZW5zdXJlU2FmZU9iamVjdDogZnVuY3Rpb24oaXRlbSkge1xuICAgIHJldHVybiAnZW5zdXJlU2FmZU9iamVjdCgnICsgaXRlbSArICcsdGV4dCknO1xuICB9LFxuXG4gIGVuc3VyZVNhZmVNZW1iZXJOYW1lOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgcmV0dXJuICdlbnN1cmVTYWZlTWVtYmVyTmFtZSgnICsgaXRlbSArICcsdGV4dCknO1xuICB9LFxuXG4gIGVuc3VyZVNhZmVGdW5jdGlvbjogZnVuY3Rpb24oaXRlbSkge1xuICAgIHJldHVybiAnZW5zdXJlU2FmZUZ1bmN0aW9uKCcgKyBpdGVtICsgJyx0ZXh0KSc7XG4gIH0sXG5cbiAgbGF6eVJlY3Vyc2U6IGZ1bmN0aW9uKGFzdCwgaW50b0lkLCBuYW1lSWQsIHJlY3Vyc2lvbkZuLCBjcmVhdGUsIHNraXBXYXRjaElkQ2hlY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5yZWN1cnNlKGFzdCwgaW50b0lkLCBuYW1lSWQsIHJlY3Vyc2lvbkZuLCBjcmVhdGUsIHNraXBXYXRjaElkQ2hlY2spO1xuICAgIH07XG4gIH0sXG5cbiAgbGF6eUFzc2lnbjogZnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHNlbGYuYXNzaWduKGlkLCB2YWx1ZSk7XG4gICAgfTtcbiAgfSxcblxuICBzdHJpbmdFc2NhcGVSZWdleDogL1teIGEtekEtWjAtOV0vZyxcblxuICBzdHJpbmdFc2NhcGVGbjogZnVuY3Rpb24oYykge1xuICAgIHJldHVybiAnXFxcXHUnICsgKCcwMDAwJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KTtcbiAgfSxcblxuICBlc2NhcGU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGlzU3RyaW5nKHZhbHVlKSkgcmV0dXJuIFwiJ1wiICsgdmFsdWUucmVwbGFjZSh0aGlzLnN0cmluZ0VzY2FwZVJlZ2V4LCB0aGlzLnN0cmluZ0VzY2FwZUZuKSArIFwiJ1wiO1xuICAgIGlmIChpc051bWJlcih2YWx1ZSkpIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSkgcmV0dXJuICd0cnVlJztcbiAgICBpZiAodmFsdWUgPT09IGZhbHNlKSByZXR1cm4gJ2ZhbHNlJztcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiAnbnVsbCc7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiAndW5kZWZpbmVkJztcblxuICAgIHRocm93ICRwYXJzZU1pbkVycignZXNjJywgJ0lNUE9TU0lCTEUnKTtcbiAgfSxcblxuICBuZXh0SWQ6IGZ1bmN0aW9uKHNraXAsIGluaXQpIHtcbiAgICB2YXIgaWQgPSAndicgKyAodGhpcy5zdGF0ZS5uZXh0SWQrKyk7XG4gICAgaWYgKCFza2lwKSB7XG4gICAgICB0aGlzLmN1cnJlbnQoKS52YXJzLnB1c2goaWQgKyAoaW5pdCA/ICc9JyArIGluaXQgOiAnJykpO1xuICAgIH1cbiAgICByZXR1cm4gaWQ7XG4gIH0sXG5cbiAgY3VycmVudDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVbdGhpcy5zdGF0ZS5jb21wdXRpbmddO1xuICB9XG59O1xuXG5cbmZ1bmN0aW9uIEFTVEludGVycHJldGVyKGFzdEJ1aWxkZXIsICRmaWx0ZXIpIHtcbiAgdGhpcy5hc3RCdWlsZGVyID0gYXN0QnVpbGRlcjtcbiAgdGhpcy4kZmlsdGVyID0gJGZpbHRlcjtcbn1cblxuQVNUSW50ZXJwcmV0ZXIucHJvdG90eXBlID0ge1xuICBjb21waWxlOiBmdW5jdGlvbihleHByZXNzaW9uLCBleHBlbnNpdmVDaGVja3MpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGFzdCA9IHRoaXMuYXN0QnVpbGRlci5hc3QoZXhwcmVzc2lvbik7XG4gICAgdGhpcy5leHByZXNzaW9uID0gZXhwcmVzc2lvbjtcbiAgICB0aGlzLmV4cGVuc2l2ZUNoZWNrcyA9IGV4cGVuc2l2ZUNoZWNrcztcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdCwgc2VsZi4kZmlsdGVyKTtcbiAgICB2YXIgYXNzaWduYWJsZTtcbiAgICB2YXIgYXNzaWduO1xuICAgIGlmICgoYXNzaWduYWJsZSA9IGFzc2lnbmFibGVBU1QoYXN0KSkpIHtcbiAgICAgIGFzc2lnbiA9IHRoaXMucmVjdXJzZShhc3NpZ25hYmxlKTtcbiAgICB9XG4gICAgdmFyIHRvV2F0Y2ggPSBnZXRJbnB1dHMoYXN0LmJvZHkpO1xuICAgIHZhciBpbnB1dHM7XG4gICAgaWYgKHRvV2F0Y2gpIHtcbiAgICAgIGlucHV0cyA9IFtdO1xuICAgICAgZm9yRWFjaCh0b1dhdGNoLCBmdW5jdGlvbih3YXRjaCwga2V5KSB7XG4gICAgICAgIHZhciBpbnB1dCA9IHNlbGYucmVjdXJzZSh3YXRjaCk7XG4gICAgICAgIHdhdGNoLmlucHV0ID0gaW5wdXQ7XG4gICAgICAgIGlucHV0cy5wdXNoKGlucHV0KTtcbiAgICAgICAgd2F0Y2gud2F0Y2hJZCA9IGtleTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgZXhwcmVzc2lvbnMgPSBbXTtcbiAgICBmb3JFYWNoKGFzdC5ib2R5LCBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgICBleHByZXNzaW9ucy5wdXNoKHNlbGYucmVjdXJzZShleHByZXNzaW9uLmV4cHJlc3Npb24pKTtcbiAgICB9KTtcbiAgICB2YXIgZm4gPSBhc3QuYm9keS5sZW5ndGggPT09IDAgPyBmdW5jdGlvbigpIHt9IDpcbiAgICAgICAgICAgICBhc3QuYm9keS5sZW5ndGggPT09IDEgPyBleHByZXNzaW9uc1swXSA6XG4gICAgICAgICAgICAgZnVuY3Rpb24oc2NvcGUsIGxvY2Fscykge1xuICAgICAgICAgICAgICAgdmFyIGxhc3RWYWx1ZTtcbiAgICAgICAgICAgICAgIGZvckVhY2goZXhwcmVzc2lvbnMsIGZ1bmN0aW9uKGV4cCkge1xuICAgICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBleHAoc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgIHJldHVybiBsYXN0VmFsdWU7XG4gICAgICAgICAgICAgfTtcbiAgICBpZiAoYXNzaWduKSB7XG4gICAgICBmbi5hc3NpZ24gPSBmdW5jdGlvbihzY29wZSwgdmFsdWUsIGxvY2Fscykge1xuICAgICAgICByZXR1cm4gYXNzaWduKHNjb3BlLCBsb2NhbHMsIHZhbHVlKTtcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChpbnB1dHMpIHtcbiAgICAgIGZuLmlucHV0cyA9IGlucHV0cztcbiAgICB9XG4gICAgZm4ubGl0ZXJhbCA9IGlzTGl0ZXJhbChhc3QpO1xuICAgIGZuLmNvbnN0YW50ID0gaXNDb25zdGFudChhc3QpO1xuICAgIHJldHVybiBmbjtcbiAgfSxcblxuICByZWN1cnNlOiBmdW5jdGlvbihhc3QsIGNvbnRleHQsIGNyZWF0ZSkge1xuICAgIHZhciBsZWZ0LCByaWdodCwgc2VsZiA9IHRoaXMsIGFyZ3MsIGV4cHJlc3Npb247XG4gICAgaWYgKGFzdC5pbnB1dCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5wdXRzKGFzdC5pbnB1dCwgYXN0LndhdGNoSWQpO1xuICAgIH1cbiAgICBzd2l0Y2ggKGFzdC50eXBlKSB7XG4gICAgY2FzZSBBU1QuTGl0ZXJhbDpcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlKGFzdC52YWx1ZSwgY29udGV4dCk7XG4gICAgY2FzZSBBU1QuVW5hcnlFeHByZXNzaW9uOlxuICAgICAgcmlnaHQgPSB0aGlzLnJlY3Vyc2UoYXN0LmFyZ3VtZW50KTtcbiAgICAgIHJldHVybiB0aGlzWyd1bmFyeScgKyBhc3Qub3BlcmF0b3JdKHJpZ2h0LCBjb250ZXh0KTtcbiAgICBjYXNlIEFTVC5CaW5hcnlFeHByZXNzaW9uOlxuICAgICAgbGVmdCA9IHRoaXMucmVjdXJzZShhc3QubGVmdCk7XG4gICAgICByaWdodCA9IHRoaXMucmVjdXJzZShhc3QucmlnaHQpO1xuICAgICAgcmV0dXJuIHRoaXNbJ2JpbmFyeScgKyBhc3Qub3BlcmF0b3JdKGxlZnQsIHJpZ2h0LCBjb250ZXh0KTtcbiAgICBjYXNlIEFTVC5Mb2dpY2FsRXhwcmVzc2lvbjpcbiAgICAgIGxlZnQgPSB0aGlzLnJlY3Vyc2UoYXN0LmxlZnQpO1xuICAgICAgcmlnaHQgPSB0aGlzLnJlY3Vyc2UoYXN0LnJpZ2h0KTtcbiAgICAgIHJldHVybiB0aGlzWydiaW5hcnknICsgYXN0Lm9wZXJhdG9yXShsZWZ0LCByaWdodCwgY29udGV4dCk7XG4gICAgY2FzZSBBU1QuQ29uZGl0aW9uYWxFeHByZXNzaW9uOlxuICAgICAgcmV0dXJuIHRoaXNbJ3Rlcm5hcnk/OiddKFxuICAgICAgICB0aGlzLnJlY3Vyc2UoYXN0LnRlc3QpLFxuICAgICAgICB0aGlzLnJlY3Vyc2UoYXN0LmFsdGVybmF0ZSksXG4gICAgICAgIHRoaXMucmVjdXJzZShhc3QuY29uc2VxdWVudCksXG4gICAgICAgIGNvbnRleHRcbiAgICAgICk7XG4gICAgY2FzZSBBU1QuSWRlbnRpZmllcjpcbiAgICAgIGVuc3VyZVNhZmVNZW1iZXJOYW1lKGFzdC5uYW1lLCBzZWxmLmV4cHJlc3Npb24pO1xuICAgICAgcmV0dXJuIHNlbGYuaWRlbnRpZmllcihhc3QubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5leHBlbnNpdmVDaGVja3MgfHwgaXNQb3NzaWJseURhbmdlcm91c01lbWJlck5hbWUoYXN0Lm5hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LCBjcmVhdGUsIHNlbGYuZXhwcmVzc2lvbik7XG4gICAgY2FzZSBBU1QuTWVtYmVyRXhwcmVzc2lvbjpcbiAgICAgIGxlZnQgPSB0aGlzLnJlY3Vyc2UoYXN0Lm9iamVjdCwgZmFsc2UsICEhY3JlYXRlKTtcbiAgICAgIGlmICghYXN0LmNvbXB1dGVkKSB7XG4gICAgICAgIGVuc3VyZVNhZmVNZW1iZXJOYW1lKGFzdC5wcm9wZXJ0eS5uYW1lLCBzZWxmLmV4cHJlc3Npb24pO1xuICAgICAgICByaWdodCA9IGFzdC5wcm9wZXJ0eS5uYW1lO1xuICAgICAgfVxuICAgICAgaWYgKGFzdC5jb21wdXRlZCkgcmlnaHQgPSB0aGlzLnJlY3Vyc2UoYXN0LnByb3BlcnR5KTtcbiAgICAgIHJldHVybiBhc3QuY29tcHV0ZWQgP1xuICAgICAgICB0aGlzLmNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0LCBjb250ZXh0LCBjcmVhdGUsIHNlbGYuZXhwcmVzc2lvbikgOlxuICAgICAgICB0aGlzLm5vbkNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0LCBzZWxmLmV4cGVuc2l2ZUNoZWNrcywgY29udGV4dCwgY3JlYXRlLCBzZWxmLmV4cHJlc3Npb24pO1xuICAgIGNhc2UgQVNULkNhbGxFeHByZXNzaW9uOlxuICAgICAgYXJncyA9IFtdO1xuICAgICAgZm9yRWFjaChhc3QuYXJndW1lbnRzLCBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIGFyZ3MucHVzaChzZWxmLnJlY3Vyc2UoZXhwcikpO1xuICAgICAgfSk7XG4gICAgICBpZiAoYXN0LmZpbHRlcikgcmlnaHQgPSB0aGlzLiRmaWx0ZXIoYXN0LmNhbGxlZS5uYW1lKTtcbiAgICAgIGlmICghYXN0LmZpbHRlcikgcmlnaHQgPSB0aGlzLnJlY3Vyc2UoYXN0LmNhbGxlZSwgdHJ1ZSk7XG4gICAgICByZXR1cm4gYXN0LmZpbHRlciA/XG4gICAgICAgIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFsdWVzLnB1c2goYXJnc1tpXShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgdmFsdWUgPSByaWdodC5hcHBseSh1bmRlZmluZWQsIHZhbHVlcywgaW5wdXRzKTtcbiAgICAgICAgICByZXR1cm4gY29udGV4dCA/IHtjb250ZXh0OiB1bmRlZmluZWQsIG5hbWU6IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfSA6IHZhbHVlO1xuICAgICAgICB9IDpcbiAgICAgICAgZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgICB2YXIgcmhzID0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICBpZiAocmhzLnZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGVuc3VyZVNhZmVPYmplY3QocmhzLmNvbnRleHQsIHNlbGYuZXhwcmVzc2lvbik7XG4gICAgICAgICAgICBlbnN1cmVTYWZlRnVuY3Rpb24ocmhzLnZhbHVlLCBzZWxmLmV4cHJlc3Npb24pO1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIHZhbHVlcy5wdXNoKGVuc3VyZVNhZmVPYmplY3QoYXJnc1tpXShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyksIHNlbGYuZXhwcmVzc2lvbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsdWUgPSBlbnN1cmVTYWZlT2JqZWN0KHJocy52YWx1ZS5hcHBseShyaHMuY29udGV4dCwgdmFsdWVzKSwgc2VsZi5leHByZXNzaW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IHZhbHVlfSA6IHZhbHVlO1xuICAgICAgICB9O1xuICAgIGNhc2UgQVNULkFzc2lnbm1lbnRFeHByZXNzaW9uOlxuICAgICAgbGVmdCA9IHRoaXMucmVjdXJzZShhc3QubGVmdCwgdHJ1ZSwgMSk7XG4gICAgICByaWdodCA9IHRoaXMucmVjdXJzZShhc3QucmlnaHQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciBsaHMgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgdmFyIHJocyA9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgZW5zdXJlU2FmZU9iamVjdChsaHMudmFsdWUsIHNlbGYuZXhwcmVzc2lvbik7XG4gICAgICAgIGxocy5jb250ZXh0W2xocy5uYW1lXSA9IHJocztcbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IHJoc30gOiByaHM7XG4gICAgICB9O1xuICAgIGNhc2UgQVNULkFycmF5RXhwcmVzc2lvbjpcbiAgICAgIGFyZ3MgPSBbXTtcbiAgICAgIGZvckVhY2goYXN0LmVsZW1lbnRzLCBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIGFyZ3MucHVzaChzZWxmLnJlY3Vyc2UoZXhwcikpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIHZhbHVlLnB1c2goYXJnc1tpXShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiB2YWx1ZX0gOiB2YWx1ZTtcbiAgICAgIH07XG4gICAgY2FzZSBBU1QuT2JqZWN0RXhwcmVzc2lvbjpcbiAgICAgIGFyZ3MgPSBbXTtcbiAgICAgIGZvckVhY2goYXN0LnByb3BlcnRpZXMsIGZ1bmN0aW9uKHByb3BlcnR5KSB7XG4gICAgICAgIGFyZ3MucHVzaCh7a2V5OiBwcm9wZXJ0eS5rZXkudHlwZSA9PT0gQVNULklkZW50aWZpZXIgP1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkua2V5Lm5hbWUgOlxuICAgICAgICAgICAgICAgICAgICAgICAgKCcnICsgcHJvcGVydHkua2V5LnZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZi5yZWN1cnNlKHByb3BlcnR5LnZhbHVlKVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICB2YWx1ZVthcmdzW2ldLmtleV0gPSBhcmdzW2ldLnZhbHVlKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogdmFsdWV9IDogdmFsdWU7XG4gICAgICB9O1xuICAgIGNhc2UgQVNULlRoaXNFeHByZXNzaW9uOlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlKSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBzY29wZX0gOiBzY29wZTtcbiAgICAgIH07XG4gICAgY2FzZSBBU1QuTkdWYWx1ZVBhcmFtZXRlcjpcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXNzaWdufSA6IGFzc2lnbjtcbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gICd1bmFyeSsnOiBmdW5jdGlvbihhcmd1bWVudCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGFyZ3VtZW50KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIGlmIChpc0RlZmluZWQoYXJnKSkge1xuICAgICAgICBhcmcgPSArYXJnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJnID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICd1bmFyeS0nOiBmdW5jdGlvbihhcmd1bWVudCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGFyZ3VtZW50KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIGlmIChpc0RlZmluZWQoYXJnKSkge1xuICAgICAgICBhcmcgPSAtYXJnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJnID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICd1bmFyeSEnOiBmdW5jdGlvbihhcmd1bWVudCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9ICFhcmd1bWVudChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5Kyc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgbGhzID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICB2YXIgcmhzID0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgdmFyIGFyZyA9IHBsdXNGbihsaHMsIHJocyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5LSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgbGhzID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICB2YXIgcmhzID0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgdmFyIGFyZyA9IChpc0RlZmluZWQobGhzKSA/IGxocyA6IDApIC0gKGlzRGVmaW5lZChyaHMpID8gcmhzIDogMCk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5Kic6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgKiByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5Lyc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgLyByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5JSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgJSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5PT09JzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA9PT0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSE9PSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgIT09IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnk9PSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPT0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSE9JzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSAhPSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5PCc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPCByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5Pic6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPiByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5PD0nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIDw9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnk+PSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPj0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSYmJzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSAmJiByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5fHwnOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHx8IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICd0ZXJuYXJ5PzonOiBmdW5jdGlvbih0ZXN0LCBhbHRlcm5hdGUsIGNvbnNlcXVlbnQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSB0ZXN0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA/IGFsdGVybmF0ZShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgOiBjb25zZXF1ZW50KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gIHZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHsgcmV0dXJuIGNvbnRleHQgPyB7Y29udGV4dDogdW5kZWZpbmVkLCBuYW1lOiB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX0gOiB2YWx1ZTsgfTtcbiAgfSxcbiAgaWRlbnRpZmllcjogZnVuY3Rpb24obmFtZSwgZXhwZW5zaXZlQ2hlY2tzLCBjb250ZXh0LCBjcmVhdGUsIGV4cHJlc3Npb24pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBiYXNlID0gbG9jYWxzICYmIChuYW1lIGluIGxvY2FscykgPyBsb2NhbHMgOiBzY29wZTtcbiAgICAgIGlmIChjcmVhdGUgJiYgY3JlYXRlICE9PSAxICYmIGJhc2UgJiYgIShiYXNlW25hbWVdKSkge1xuICAgICAgICBiYXNlW25hbWVdID0ge307XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBiYXNlID8gYmFzZVtuYW1lXSA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChleHBlbnNpdmVDaGVja3MpIHtcbiAgICAgICAgZW5zdXJlU2FmZU9iamVjdCh2YWx1ZSwgZXhwcmVzc2lvbik7XG4gICAgICB9XG4gICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICByZXR1cm4ge2NvbnRleHQ6IGJhc2UsIG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgY29tcHV0ZWRNZW1iZXI6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0LCBjcmVhdGUsIGV4cHJlc3Npb24pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBsaHMgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHZhciByaHM7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICBpZiAobGhzICE9IG51bGwpIHtcbiAgICAgICAgcmhzID0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICBlbnN1cmVTYWZlTWVtYmVyTmFtZShyaHMsIGV4cHJlc3Npb24pO1xuICAgICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSAmJiBsaHMgJiYgIShsaHNbcmhzXSkpIHtcbiAgICAgICAgICBsaHNbcmhzXSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gbGhzW3Joc107XG4gICAgICAgIGVuc3VyZVNhZmVPYmplY3QodmFsdWUsIGV4cHJlc3Npb24pO1xuICAgICAgfVxuICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHtjb250ZXh0OiBsaHMsIG5hbWU6IHJocywgdmFsdWU6IHZhbHVlfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBub25Db21wdXRlZE1lbWJlcjogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGV4cGVuc2l2ZUNoZWNrcywgY29udGV4dCwgY3JlYXRlLCBleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgbGhzID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSAmJiBsaHMgJiYgIShsaHNbcmlnaHRdKSkge1xuICAgICAgICBsaHNbcmlnaHRdID0ge307XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBsaHMgIT0gbnVsbCA/IGxoc1tyaWdodF0gOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoZXhwZW5zaXZlQ2hlY2tzIHx8IGlzUG9zc2libHlEYW5nZXJvdXNNZW1iZXJOYW1lKHJpZ2h0KSkge1xuICAgICAgICBlbnN1cmVTYWZlT2JqZWN0KHZhbHVlLCBleHByZXNzaW9uKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB7Y29udGV4dDogbGhzLCBuYW1lOiByaWdodCwgdmFsdWU6IHZhbHVlfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBpbnB1dHM6IGZ1bmN0aW9uKGlucHV0LCB3YXRjaElkKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCB2YWx1ZSwgbG9jYWxzLCBpbnB1dHMpIHtcbiAgICAgIGlmIChpbnB1dHMpIHJldHVybiBpbnB1dHNbd2F0Y2hJZF07XG4gICAgICByZXR1cm4gaW5wdXQoc2NvcGUsIHZhbHVlLCBsb2NhbHMpO1xuICAgIH07XG4gIH1cbn07XG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBQYXJzZXIgPSBmdW5jdGlvbihsZXhlciwgJGZpbHRlciwgb3B0aW9ucykge1xuICB0aGlzLmxleGVyID0gbGV4ZXI7XG4gIHRoaXMuJGZpbHRlciA9ICRmaWx0ZXI7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIHRoaXMuYXN0ID0gbmV3IEFTVCh0aGlzLmxleGVyKTtcbiAgdGhpcy5hc3RDb21waWxlciA9IG9wdGlvbnMuY3NwID8gbmV3IEFTVEludGVycHJldGVyKHRoaXMuYXN0LCAkZmlsdGVyKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBBU1RDb21waWxlcih0aGlzLmFzdCwgJGZpbHRlcik7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUGFyc2VyLFxuXG4gIHBhcnNlOiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgcmV0dXJuIHRoaXMuYXN0Q29tcGlsZXIuY29tcGlsZSh0ZXh0LCB0aGlzLm9wdGlvbnMuZXhwZW5zaXZlQ2hlY2tzKTtcbiAgfVxufTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFBhcnNlciBoZWxwZXIgZnVuY3Rpb25zXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5mdW5jdGlvbiBzZXR0ZXIob2JqLCBwYXRoLCBzZXRWYWx1ZSwgZnVsbEV4cCkge1xuICBlbnN1cmVTYWZlT2JqZWN0KG9iaiwgZnVsbEV4cCk7XG5cbiAgdmFyIGVsZW1lbnQgPSBwYXRoLnNwbGl0KCcuJyksIGtleTtcbiAgZm9yICh2YXIgaSA9IDA7IGVsZW1lbnQubGVuZ3RoID4gMTsgaSsrKSB7XG4gICAga2V5ID0gZW5zdXJlU2FmZU1lbWJlck5hbWUoZWxlbWVudC5zaGlmdCgpLCBmdWxsRXhwKTtcbiAgICB2YXIgcHJvcGVydHlPYmogPSBlbnN1cmVTYWZlT2JqZWN0KG9ialtrZXldLCBmdWxsRXhwKTtcbiAgICBpZiAoIXByb3BlcnR5T2JqKSB7XG4gICAgICBwcm9wZXJ0eU9iaiA9IHt9O1xuICAgICAgb2JqW2tleV0gPSBwcm9wZXJ0eU9iajtcbiAgICB9XG4gICAgb2JqID0gcHJvcGVydHlPYmo7XG4gIH1cbiAga2V5ID0gZW5zdXJlU2FmZU1lbWJlck5hbWUoZWxlbWVudC5zaGlmdCgpLCBmdWxsRXhwKTtcbiAgZW5zdXJlU2FmZU9iamVjdChvYmpba2V5XSwgZnVsbEV4cCk7XG4gIG9ialtrZXldID0gc2V0VmFsdWU7XG4gIHJldHVybiBzZXRWYWx1ZTtcbn1cblxudmFyIGdldHRlckZuQ2FjaGVEZWZhdWx0ID0gY3JlYXRlTWFwKCk7XG52YXIgZ2V0dGVyRm5DYWNoZUV4cGVuc2l2ZSA9IGNyZWF0ZU1hcCgpO1xuXG5mdW5jdGlvbiBpc1Bvc3NpYmx5RGFuZ2Vyb3VzTWVtYmVyTmFtZShuYW1lKSB7XG4gIHJldHVybiBuYW1lID09ICdjb25zdHJ1Y3Rvcic7XG59XG5cbnZhciBvYmplY3RWYWx1ZU9mID0gT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mO1xuXG5mdW5jdGlvbiBnZXRWYWx1ZU9mKHZhbHVlKSB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlLnZhbHVlT2YpID8gdmFsdWUudmFsdWVPZigpIDogb2JqZWN0VmFsdWVPZi5jYWxsKHZhbHVlKTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHBhcnNlXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbnZlcnRzIEFuZ3VsYXIge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaW50byBhIGZ1bmN0aW9uLlxuICpcbiAqIGBgYGpzXG4gKiAgIHZhciBnZXR0ZXIgPSAkcGFyc2UoJ3VzZXIubmFtZScpO1xuICogICB2YXIgc2V0dGVyID0gZ2V0dGVyLmFzc2lnbjtcbiAqICAgdmFyIGNvbnRleHQgPSB7dXNlcjp7bmFtZTonYW5ndWxhcid9fTtcbiAqICAgdmFyIGxvY2FscyA9IHt1c2VyOntuYW1lOidsb2NhbCd9fTtcbiAqXG4gKiAgIGV4cGVjdChnZXR0ZXIoY29udGV4dCkpLnRvRXF1YWwoJ2FuZ3VsYXInKTtcbiAqICAgc2V0dGVyKGNvbnRleHQsICduZXdWYWx1ZScpO1xuICogICBleHBlY3QoY29udGV4dC51c2VyLm5hbWUpLnRvRXF1YWwoJ25ld1ZhbHVlJyk7XG4gKiAgIGV4cGVjdChnZXR0ZXIoY29udGV4dCwgbG9jYWxzKSkudG9FcXVhbCgnbG9jYWwnKTtcbiAqIGBgYFxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAqXG4gKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXG4gKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW5cbiAqICAgICAgYGNvbnRleHRgLlxuICpcbiAqICAgIFRoZSByZXR1cm5lZCBmdW5jdGlvbiBhbHNvIGhhcyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKiAgICAgICogYGxpdGVyYWxgIOKAkyBge2Jvb2xlYW59YCDigJMgd2hldGhlciB0aGUgZXhwcmVzc2lvbidzIHRvcC1sZXZlbCBub2RlIGlzIGEgSmF2YVNjcmlwdFxuICogICAgICAgIGxpdGVyYWwuXG4gKiAgICAgICogYGNvbnN0YW50YCDigJMgYHtib29sZWFufWAg4oCTIHdoZXRoZXIgdGhlIGV4cHJlc3Npb24gaXMgbWFkZSBlbnRpcmVseSBvZiBKYXZhU2NyaXB0XG4gKiAgICAgICAgY29uc3RhbnQgbGl0ZXJhbHMuXG4gKiAgICAgICogYGFzc2lnbmAg4oCTIGB7P2Z1bmN0aW9uKGNvbnRleHQsIHZhbHVlKX1gIOKAkyBpZiB0aGUgZXhwcmVzc2lvbiBpcyBhc3NpZ25hYmxlLCB0aGlzIHdpbGwgYmVcbiAqICAgICAgICBzZXQgdG8gYSBmdW5jdGlvbiB0byBjaGFuZ2UgaXRzIHZhbHVlIG9uIHRoZSBnaXZlbiBjb250ZXh0LlxuICpcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkcGFyc2VQcm92aWRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogYCRwYXJzZVByb3ZpZGVyYCBjYW4gYmUgdXNlZCBmb3IgY29uZmlndXJpbmcgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgdGhlIHtAbGluayBuZy4kcGFyc2UgJHBhcnNlfVxuICogIHNlcnZpY2UuXG4gKi9cbmZ1bmN0aW9uICRQYXJzZVByb3ZpZGVyKCkge1xuICB2YXIgY2FjaGVEZWZhdWx0ID0gY3JlYXRlTWFwKCk7XG4gIHZhciBjYWNoZUV4cGVuc2l2ZSA9IGNyZWF0ZU1hcCgpO1xuXG4gIHRoaXMuJGdldCA9IFsnJGZpbHRlcicsICckc25pZmZlcicsIGZ1bmN0aW9uKCRmaWx0ZXIsICRzbmlmZmVyKSB7XG4gICAgdmFyICRwYXJzZU9wdGlvbnMgPSB7XG4gICAgICAgICAgY3NwOiAkc25pZmZlci5jc3AsXG4gICAgICAgICAgZXhwZW5zaXZlQ2hlY2tzOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICAkcGFyc2VPcHRpb25zRXhwZW5zaXZlID0ge1xuICAgICAgICAgIGNzcDogJHNuaWZmZXIuY3NwLFxuICAgICAgICAgIGV4cGVuc2l2ZUNoZWNrczogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICRwYXJzZShleHAsIGludGVyY2VwdG9yRm4sIGV4cGVuc2l2ZUNoZWNrcykge1xuICAgICAgdmFyIHBhcnNlZEV4cHJlc3Npb24sIG9uZVRpbWUsIGNhY2hlS2V5O1xuXG4gICAgICBzd2l0Y2ggKHR5cGVvZiBleHApIHtcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICBleHAgPSBleHAudHJpbSgpO1xuICAgICAgICAgIGNhY2hlS2V5ID0gZXhwO1xuXG4gICAgICAgICAgdmFyIGNhY2hlID0gKGV4cGVuc2l2ZUNoZWNrcyA/IGNhY2hlRXhwZW5zaXZlIDogY2FjaGVEZWZhdWx0KTtcbiAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uID0gY2FjaGVbY2FjaGVLZXldO1xuXG4gICAgICAgICAgaWYgKCFwYXJzZWRFeHByZXNzaW9uKSB7XG4gICAgICAgICAgICBpZiAoZXhwLmNoYXJBdCgwKSA9PT0gJzonICYmIGV4cC5jaGFyQXQoMSkgPT09ICc6Jykge1xuICAgICAgICAgICAgICBvbmVUaW1lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgZXhwID0gZXhwLnN1YnN0cmluZygyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwYXJzZU9wdGlvbnMgPSBleHBlbnNpdmVDaGVja3MgPyAkcGFyc2VPcHRpb25zRXhwZW5zaXZlIDogJHBhcnNlT3B0aW9ucztcbiAgICAgICAgICAgIHZhciBsZXhlciA9IG5ldyBMZXhlcihwYXJzZU9wdGlvbnMpO1xuICAgICAgICAgICAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIobGV4ZXIsICRmaWx0ZXIsIHBhcnNlT3B0aW9ucyk7XG4gICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uID0gcGFyc2VyLnBhcnNlKGV4cCk7XG4gICAgICAgICAgICBpZiAocGFyc2VkRXhwcmVzc2lvbi5jb25zdGFudCkge1xuICAgICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZSA9IGNvbnN0YW50V2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob25lVGltZSkge1xuICAgICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZSA9IHBhcnNlZEV4cHJlc3Npb24ubGl0ZXJhbCA/XG4gICAgICAgICAgICAgICAgICBvbmVUaW1lTGl0ZXJhbFdhdGNoRGVsZWdhdGUgOiBvbmVUaW1lV2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VkRXhwcmVzc2lvbi5pbnB1dHMpIHtcbiAgICAgICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGUgPSBpbnB1dHNXYXRjaERlbGVnYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FjaGVbY2FjaGVLZXldID0gcGFyc2VkRXhwcmVzc2lvbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGFkZEludGVyY2VwdG9yKHBhcnNlZEV4cHJlc3Npb24sIGludGVyY2VwdG9yRm4pO1xuXG4gICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgICByZXR1cm4gYWRkSW50ZXJjZXB0b3IoZXhwLCBpbnRlcmNlcHRvckZuKTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBub29wO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrKG5ld1ZhbHVlLCBvbGRWYWx1ZU9mVmFsdWUpIHtcblxuICAgICAgaWYgKG5ld1ZhbHVlID09IG51bGwgfHwgb2xkVmFsdWVPZlZhbHVlID09IG51bGwpIHsgLy8gbnVsbC91bmRlZmluZWRcbiAgICAgICAgcmV0dXJuIG5ld1ZhbHVlID09PSBvbGRWYWx1ZU9mVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbmV3VmFsdWUgPT09ICdvYmplY3QnKSB7XG5cbiAgICAgICAgLy8gYXR0ZW1wdCB0byBjb252ZXJ0IHRoZSB2YWx1ZSB0byBhIHByaW1pdGl2ZSB0eXBlXG4gICAgICAgIC8vIFRPRE8oZG9jcyk6IGFkZCBhIG5vdGUgdG8gZG9jcyB0aGF0IGJ5IGltcGxlbWVudGluZyB2YWx1ZU9mIGV2ZW4gb2JqZWN0cyBhbmQgYXJyYXlzIGNhblxuICAgICAgICAvLyAgICAgICAgICAgICBiZSBjaGVhcGx5IGRpcnR5LWNoZWNrZWRcbiAgICAgICAgbmV3VmFsdWUgPSBnZXRWYWx1ZU9mKG5ld1ZhbHVlKTtcblxuICAgICAgICBpZiAodHlwZW9mIG5ld1ZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIC8vIG9iamVjdHMvYXJyYXlzIGFyZSBub3Qgc3VwcG9ydGVkIC0gZGVlcC13YXRjaGluZyB0aGVtIHdvdWxkIGJlIHRvbyBleHBlbnNpdmVcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmYWxsLXRocm91Z2ggdG8gdGhlIHByaW1pdGl2ZSBlcXVhbGl0eSBjaGVja1xuICAgICAgfVxuXG4gICAgICAvL1ByaW1pdGl2ZSBvciBOYU5cbiAgICAgIHJldHVybiBuZXdWYWx1ZSA9PT0gb2xkVmFsdWVPZlZhbHVlIHx8IChuZXdWYWx1ZSAhPT0gbmV3VmFsdWUgJiYgb2xkVmFsdWVPZlZhbHVlICE9PSBvbGRWYWx1ZU9mVmFsdWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlucHV0c1dhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcGFyc2VkRXhwcmVzc2lvbiwgcHJldHR5UHJpbnRFeHByZXNzaW9uKSB7XG4gICAgICB2YXIgaW5wdXRFeHByZXNzaW9ucyA9IHBhcnNlZEV4cHJlc3Npb24uaW5wdXRzO1xuICAgICAgdmFyIGxhc3RSZXN1bHQ7XG5cbiAgICAgIGlmIChpbnB1dEV4cHJlc3Npb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB2YXIgb2xkSW5wdXRWYWx1ZU9mID0gZXhwcmVzc2lvbklucHV0RGlydHlDaGVjazsgLy8gaW5pdCB0byBzb21ldGhpbmcgdW5pcXVlIHNvIHRoYXQgZXF1YWxzIGNoZWNrIGZhaWxzXG4gICAgICAgIGlucHV0RXhwcmVzc2lvbnMgPSBpbnB1dEV4cHJlc3Npb25zWzBdO1xuICAgICAgICByZXR1cm4gc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIGV4cHJlc3Npb25JbnB1dFdhdGNoKHNjb3BlKSB7XG4gICAgICAgICAgdmFyIG5ld0lucHV0VmFsdWUgPSBpbnB1dEV4cHJlc3Npb25zKHNjb3BlKTtcbiAgICAgICAgICBpZiAoIWV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2sobmV3SW5wdXRWYWx1ZSwgb2xkSW5wdXRWYWx1ZU9mKSkge1xuICAgICAgICAgICAgbGFzdFJlc3VsdCA9IHBhcnNlZEV4cHJlc3Npb24oc2NvcGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBbbmV3SW5wdXRWYWx1ZV0pO1xuICAgICAgICAgICAgb2xkSW5wdXRWYWx1ZU9mID0gbmV3SW5wdXRWYWx1ZSAmJiBnZXRWYWx1ZU9mKG5ld0lucHV0VmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICAgICAgfSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwcmV0dHlQcmludEV4cHJlc3Npb24pO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2xkSW5wdXRWYWx1ZU9mVmFsdWVzID0gW107XG4gICAgICB2YXIgb2xkSW5wdXRWYWx1ZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGlucHV0RXhwcmVzc2lvbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBvbGRJbnB1dFZhbHVlT2ZWYWx1ZXNbaV0gPSBleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrOyAvLyBpbml0IHRvIHNvbWV0aGluZyB1bmlxdWUgc28gdGhhdCBlcXVhbHMgY2hlY2sgZmFpbHNcbiAgICAgICAgb2xkSW5wdXRWYWx1ZXNbaV0gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIGV4cHJlc3Npb25JbnB1dHNXYXRjaChzY29wZSkge1xuICAgICAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGlucHV0RXhwcmVzc2lvbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIHZhciBuZXdJbnB1dFZhbHVlID0gaW5wdXRFeHByZXNzaW9uc1tpXShzY29wZSk7XG4gICAgICAgICAgaWYgKGNoYW5nZWQgfHwgKGNoYW5nZWQgPSAhZXhwcmVzc2lvbklucHV0RGlydHlDaGVjayhuZXdJbnB1dFZhbHVlLCBvbGRJbnB1dFZhbHVlT2ZWYWx1ZXNbaV0pKSkge1xuICAgICAgICAgICAgb2xkSW5wdXRWYWx1ZXNbaV0gPSBuZXdJbnB1dFZhbHVlO1xuICAgICAgICAgICAgb2xkSW5wdXRWYWx1ZU9mVmFsdWVzW2ldID0gbmV3SW5wdXRWYWx1ZSAmJiBnZXRWYWx1ZU9mKG5ld0lucHV0VmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgbGFzdFJlc3VsdCA9IHBhcnNlZEV4cHJlc3Npb24oc2NvcGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBvbGRJbnB1dFZhbHVlcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICAgIH0sIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcHJldHR5UHJpbnRFeHByZXNzaW9uKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbmVUaW1lV2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uKSB7XG4gICAgICB2YXIgdW53YXRjaCwgbGFzdFZhbHVlO1xuICAgICAgcmV0dXJuIHVud2F0Y2ggPSBzY29wZS4kd2F0Y2goZnVuY3Rpb24gb25lVGltZVdhdGNoKHNjb3BlKSB7XG4gICAgICAgIHJldHVybiBwYXJzZWRFeHByZXNzaW9uKHNjb3BlKTtcbiAgICAgIH0sIGZ1bmN0aW9uIG9uZVRpbWVMaXN0ZW5lcih2YWx1ZSwgb2xkLCBzY29wZSkge1xuICAgICAgICBsYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChpc0RlZmluZWQobGFzdFZhbHVlKSkge1xuICAgICAgICAgICAgICB1bndhdGNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIG9iamVjdEVxdWFsaXR5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbmVUaW1lTGl0ZXJhbFdhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcGFyc2VkRXhwcmVzc2lvbikge1xuICAgICAgdmFyIHVud2F0Y2gsIGxhc3RWYWx1ZTtcbiAgICAgIHJldHVybiB1bndhdGNoID0gc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIG9uZVRpbWVXYXRjaChzY29wZSkge1xuICAgICAgICByZXR1cm4gcGFyc2VkRXhwcmVzc2lvbihzY29wZSk7XG4gICAgICB9LCBmdW5jdGlvbiBvbmVUaW1lTGlzdGVuZXIodmFsdWUsIG9sZCwgc2NvcGUpIHtcbiAgICAgICAgbGFzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVyKSkge1xuICAgICAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgdmFsdWUsIG9sZCwgc2NvcGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FsbERlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgc2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGlzQWxsRGVmaW5lZChsYXN0VmFsdWUpKSB1bndhdGNoKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIG9iamVjdEVxdWFsaXR5KTtcblxuICAgICAgZnVuY3Rpb24gaXNBbGxEZWZpbmVkKHZhbHVlKSB7XG4gICAgICAgIHZhciBhbGxEZWZpbmVkID0gdHJ1ZTtcbiAgICAgICAgZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgaWYgKCFpc0RlZmluZWQodmFsKSkgYWxsRGVmaW5lZCA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFsbERlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uc3RhbnRXYXRjaERlbGVnYXRlKHNjb3BlLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHBhcnNlZEV4cHJlc3Npb24pIHtcbiAgICAgIHZhciB1bndhdGNoO1xuICAgICAgcmV0dXJuIHVud2F0Y2ggPSBzY29wZS4kd2F0Y2goZnVuY3Rpb24gY29uc3RhbnRXYXRjaChzY29wZSkge1xuICAgICAgICByZXR1cm4gcGFyc2VkRXhwcmVzc2lvbihzY29wZSk7XG4gICAgICB9LCBmdW5jdGlvbiBjb25zdGFudExpc3RlbmVyKHZhbHVlLCBvbGQsIHNjb3BlKSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVyKSkge1xuICAgICAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgdW53YXRjaCgpO1xuICAgICAgfSwgb2JqZWN0RXF1YWxpdHkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZEludGVyY2VwdG9yKHBhcnNlZEV4cHJlc3Npb24sIGludGVyY2VwdG9yRm4pIHtcbiAgICAgIGlmICghaW50ZXJjZXB0b3JGbikgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb247XG4gICAgICB2YXIgd2F0Y2hEZWxlZ2F0ZSA9IHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlO1xuXG4gICAgICB2YXIgcmVndWxhcldhdGNoID1cbiAgICAgICAgICB3YXRjaERlbGVnYXRlICE9PSBvbmVUaW1lTGl0ZXJhbFdhdGNoRGVsZWdhdGUgJiZcbiAgICAgICAgICB3YXRjaERlbGVnYXRlICE9PSBvbmVUaW1lV2F0Y2hEZWxlZ2F0ZTtcblxuICAgICAgdmFyIGZuID0gcmVndWxhcldhdGNoID8gZnVuY3Rpb24gcmVndWxhckludGVyY2VwdGVkRXhwcmVzc2lvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZWRFeHByZXNzaW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgcmV0dXJuIGludGVyY2VwdG9yRm4odmFsdWUsIHNjb3BlLCBsb2NhbHMpO1xuICAgICAgfSA6IGZ1bmN0aW9uIG9uZVRpbWVJbnRlcmNlcHRlZEV4cHJlc3Npb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VkRXhwcmVzc2lvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIHZhciByZXN1bHQgPSBpbnRlcmNlcHRvckZuKHZhbHVlLCBzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgLy8gd2Ugb25seSByZXR1cm4gdGhlIGludGVyY2VwdG9yJ3MgcmVzdWx0IGlmIHRoZVxuICAgICAgICAvLyBpbml0aWFsIHZhbHVlIGlzIGRlZmluZWQgKGZvciBiaW5kLW9uY2UpXG4gICAgICAgIHJldHVybiBpc0RlZmluZWQodmFsdWUpID8gcmVzdWx0IDogdmFsdWU7XG4gICAgICB9O1xuXG4gICAgICAvLyBQcm9wYWdhdGUgJCR3YXRjaERlbGVnYXRlcyBvdGhlciB0aGVuIGlucHV0c1dhdGNoRGVsZWdhdGVcbiAgICAgIGlmIChwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZSAmJlxuICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlICE9PSBpbnB1dHNXYXRjaERlbGVnYXRlKSB7XG4gICAgICAgIGZuLiQkd2F0Y2hEZWxlZ2F0ZSA9IHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlO1xuICAgICAgfSBlbHNlIGlmICghaW50ZXJjZXB0b3JGbi4kc3RhdGVmdWwpIHtcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYW4gaW50ZXJjZXB0b3IsIGJ1dCBubyB3YXRjaERlbGVnYXRlIHRoZW4gdHJlYXQgdGhlIGludGVyY2VwdG9yIGxpa2VcbiAgICAgICAgLy8gd2UgdHJlYXQgZmlsdGVycyAtIGl0IGlzIGFzc3VtZWQgdG8gYmUgYSBwdXJlIGZ1bmN0aW9uIHVubGVzcyBmbGFnZ2VkIHdpdGggJHN0YXRlZnVsXG4gICAgICAgIGZuLiQkd2F0Y2hEZWxlZ2F0ZSA9IGlucHV0c1dhdGNoRGVsZWdhdGU7XG4gICAgICAgIGZuLmlucHV0cyA9IHBhcnNlZEV4cHJlc3Npb24uaW5wdXRzID8gcGFyc2VkRXhwcmVzc2lvbi5pbnB1dHMgOiBbcGFyc2VkRXhwcmVzc2lvbl07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbjtcbiAgICB9XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkcVxuICogQHJlcXVpcmVzICRyb290U2NvcGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgc2VydmljZSB0aGF0IGhlbHBzIHlvdSBydW4gZnVuY3Rpb25zIGFzeW5jaHJvbm91c2x5LCBhbmQgdXNlIHRoZWlyIHJldHVybiB2YWx1ZXMgKG9yIGV4Y2VwdGlvbnMpXG4gKiB3aGVuIHRoZXkgYXJlIGRvbmUgcHJvY2Vzc2luZy5cbiAqXG4gKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIHByb21pc2VzL2RlZmVycmVkIG9iamVjdHMgaW5zcGlyZWQgYnlcbiAqIFtLcmlzIEtvd2FsJ3MgUV0oaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xKS5cbiAqXG4gKiAkcSBjYW4gYmUgdXNlZCBpbiB0d28gZmFzaGlvbnMgLS0tIG9uZSB3aGljaCBpcyBtb3JlIHNpbWlsYXIgdG8gS3JpcyBLb3dhbCdzIFEgb3IgalF1ZXJ5J3MgRGVmZXJyZWRcbiAqIGltcGxlbWVudGF0aW9ucywgYW5kIHRoZSBvdGhlciB3aGljaCByZXNlbWJsZXMgRVM2IHByb21pc2VzIHRvIHNvbWUgZGVncmVlLlxuICpcbiAqICMgJHEgY29uc3RydWN0b3JcbiAqXG4gKiBUaGUgc3RyZWFtbGluZWQgRVM2IHN0eWxlIHByb21pc2UgaXMgZXNzZW50aWFsbHkganVzdCB1c2luZyAkcSBhcyBhIGNvbnN0cnVjdG9yIHdoaWNoIHRha2VzIGEgYHJlc29sdmVyYFxuICogZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50LiBUaGlzIGlzIHNpbWlsYXIgdG8gdGhlIG5hdGl2ZSBQcm9taXNlIGltcGxlbWVudGF0aW9uIGZyb20gRVM2IEhhcm1vbnksXG4gKiBzZWUgW01ETl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZSkuXG4gKlxuICogV2hpbGUgdGhlIGNvbnN0cnVjdG9yLXN0eWxlIHVzZSBpcyBzdXBwb3J0ZWQsIG5vdCBhbGwgb2YgdGhlIHN1cHBvcnRpbmcgbWV0aG9kcyBmcm9tIEVTNiBIYXJtb255IHByb21pc2VzIGFyZVxuICogYXZhaWxhYmxlIHlldC5cbiAqXG4gKiBJdCBjYW4gYmUgdXNlZCBsaWtlIHNvOlxuICpcbiAqIGBgYGpzXG4gKiAgIC8vIGZvciB0aGUgcHVycG9zZSBvZiB0aGlzIGV4YW1wbGUgbGV0J3MgYXNzdW1lIHRoYXQgdmFyaWFibGVzIGAkcWAgYW5kIGBva1RvR3JlZXRgXG4gKiAgIC8vIGFyZSBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgbGV4aWNhbCBzY29wZSAodGhleSBjb3VsZCBoYXZlIGJlZW4gaW5qZWN0ZWQgb3IgcGFzc2VkIGluKS5cbiAqXG4gKiAgIGZ1bmN0aW9uIGFzeW5jR3JlZXQobmFtZSkge1xuICogICAgIC8vIHBlcmZvcm0gc29tZSBhc3luY2hyb25vdXMgb3BlcmF0aW9uLCByZXNvbHZlIG9yIHJlamVjdCB0aGUgcHJvbWlzZSB3aGVuIGFwcHJvcHJpYXRlLlxuICogICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAqICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgIGlmIChva1RvR3JlZXQobmFtZSkpIHtcbiAqICAgICAgICAgICByZXNvbHZlKCdIZWxsbywgJyArIG5hbWUgKyAnIScpO1xuICogICAgICAgICB9IGVsc2Uge1xuICogICAgICAgICAgIHJlamVjdCgnR3JlZXRpbmcgJyArIG5hbWUgKyAnIGlzIG5vdCBhbGxvd2VkLicpO1xuICogICAgICAgICB9XG4gKiAgICAgICB9LCAxMDAwKTtcbiAqICAgICB9KTtcbiAqICAgfVxuICpcbiAqICAgdmFyIHByb21pc2UgPSBhc3luY0dyZWV0KCdSb2JpbiBIb29kJyk7XG4gKiAgIHByb21pc2UudGhlbihmdW5jdGlvbihncmVldGluZykge1xuICogICAgIGFsZXJ0KCdTdWNjZXNzOiAnICsgZ3JlZXRpbmcpO1xuICogICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAqICAgICBhbGVydCgnRmFpbGVkOiAnICsgcmVhc29uKTtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiBOb3RlOiBwcm9ncmVzcy9ub3RpZnkgY2FsbGJhY2tzIGFyZSBub3QgY3VycmVudGx5IHN1cHBvcnRlZCB2aWEgdGhlIEVTNi1zdHlsZSBpbnRlcmZhY2UuXG4gKlxuICogSG93ZXZlciwgdGhlIG1vcmUgdHJhZGl0aW9uYWwgQ29tbW9uSlMtc3R5bGUgdXNhZ2UgaXMgc3RpbGwgYXZhaWxhYmxlLCBhbmQgZG9jdW1lbnRlZCBiZWxvdy5cbiAqXG4gKiBbVGhlIENvbW1vbkpTIFByb21pc2UgcHJvcG9zYWxdKGh0dHA6Ly93aWtpLmNvbW1vbmpzLm9yZy93aWtpL1Byb21pc2VzKSBkZXNjcmliZXMgYSBwcm9taXNlIGFzIGFuXG4gKiBpbnRlcmZhY2UgZm9yIGludGVyYWN0aW5nIHdpdGggYW4gb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgcmVzdWx0IG9mIGFuIGFjdGlvbiB0aGF0IGlzXG4gKiBwZXJmb3JtZWQgYXN5bmNocm9ub3VzbHksIGFuZCBtYXkgb3IgbWF5IG5vdCBiZSBmaW5pc2hlZCBhdCBhbnkgZ2l2ZW4gcG9pbnQgaW4gdGltZS5cbiAqXG4gKiBGcm9tIHRoZSBwZXJzcGVjdGl2ZSBvZiBkZWFsaW5nIHdpdGggZXJyb3IgaGFuZGxpbmcsIGRlZmVycmVkIGFuZCBwcm9taXNlIEFQSXMgYXJlIHRvXG4gKiBhc3luY2hyb25vdXMgcHJvZ3JhbW1pbmcgd2hhdCBgdHJ5YCwgYGNhdGNoYCBhbmQgYHRocm93YCBrZXl3b3JkcyBhcmUgdG8gc3luY2hyb25vdXMgcHJvZ3JhbW1pbmcuXG4gKlxuICogYGBganNcbiAqICAgLy8gZm9yIHRoZSBwdXJwb3NlIG9mIHRoaXMgZXhhbXBsZSBsZXQncyBhc3N1bWUgdGhhdCB2YXJpYWJsZXMgYCRxYCBhbmQgYG9rVG9HcmVldGBcbiAqICAgLy8gYXJlIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBsZXhpY2FsIHNjb3BlICh0aGV5IGNvdWxkIGhhdmUgYmVlbiBpbmplY3RlZCBvciBwYXNzZWQgaW4pLlxuICpcbiAqICAgZnVuY3Rpb24gYXN5bmNHcmVldChuYW1lKSB7XG4gKiAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAqXG4gKiAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgIGRlZmVycmVkLm5vdGlmeSgnQWJvdXQgdG8gZ3JlZXQgJyArIG5hbWUgKyAnLicpO1xuICpcbiAqICAgICAgIGlmIChva1RvR3JlZXQobmFtZSkpIHtcbiAqICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgnSGVsbG8sICcgKyBuYW1lICsgJyEnKTtcbiAqICAgICAgIH0gZWxzZSB7XG4gKiAgICAgICAgIGRlZmVycmVkLnJlamVjdCgnR3JlZXRpbmcgJyArIG5hbWUgKyAnIGlzIG5vdCBhbGxvd2VkLicpO1xuICogICAgICAgfVxuICogICAgIH0sIDEwMDApO1xuICpcbiAqICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAqICAgfVxuICpcbiAqICAgdmFyIHByb21pc2UgPSBhc3luY0dyZWV0KCdSb2JpbiBIb29kJyk7XG4gKiAgIHByb21pc2UudGhlbihmdW5jdGlvbihncmVldGluZykge1xuICogICAgIGFsZXJ0KCdTdWNjZXNzOiAnICsgZ3JlZXRpbmcpO1xuICogICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAqICAgICBhbGVydCgnRmFpbGVkOiAnICsgcmVhc29uKTtcbiAqICAgfSwgZnVuY3Rpb24odXBkYXRlKSB7XG4gKiAgICAgYWxlcnQoJ0dvdCBub3RpZmljYXRpb246ICcgKyB1cGRhdGUpO1xuICogICB9KTtcbiAqIGBgYFxuICpcbiAqIEF0IGZpcnN0IGl0IG1pZ2h0IG5vdCBiZSBvYnZpb3VzIHdoeSB0aGlzIGV4dHJhIGNvbXBsZXhpdHkgaXMgd29ydGggdGhlIHRyb3VibGUuIFRoZSBwYXlvZmZcbiAqIGNvbWVzIGluIHRoZSB3YXkgb2YgZ3VhcmFudGVlcyB0aGF0IHByb21pc2UgYW5kIGRlZmVycmVkIEFQSXMgbWFrZSwgc2VlXG4gKiBodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3VuY29tbW9uanMvYmxvYi9tYXN0ZXIvcHJvbWlzZXMvc3BlY2lmaWNhdGlvbi5tZC5cbiAqXG4gKiBBZGRpdGlvbmFsbHkgdGhlIHByb21pc2UgYXBpIGFsbG93cyBmb3IgY29tcG9zaXRpb24gdGhhdCBpcyB2ZXJ5IGhhcmQgdG8gZG8gd2l0aCB0aGVcbiAqIHRyYWRpdGlvbmFsIGNhbGxiYWNrIChbQ1BTXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbnRpbnVhdGlvbi1wYXNzaW5nX3N0eWxlKSkgYXBwcm9hY2guXG4gKiBGb3IgbW9yZSBvbiB0aGlzIHBsZWFzZSBzZWUgdGhlIFtRIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcSkgZXNwZWNpYWxseSB0aGVcbiAqIHNlY3Rpb24gb24gc2VyaWFsIG9yIHBhcmFsbGVsIGpvaW5pbmcgb2YgcHJvbWlzZXMuXG4gKlxuICogIyBUaGUgRGVmZXJyZWQgQVBJXG4gKlxuICogQSBuZXcgaW5zdGFuY2Ugb2YgZGVmZXJyZWQgaXMgY29uc3RydWN0ZWQgYnkgY2FsbGluZyBgJHEuZGVmZXIoKWAuXG4gKlxuICogVGhlIHB1cnBvc2Ugb2YgdGhlIGRlZmVycmVkIG9iamVjdCBpcyB0byBleHBvc2UgdGhlIGFzc29jaWF0ZWQgUHJvbWlzZSBpbnN0YW5jZSBhcyB3ZWxsIGFzIEFQSXNcbiAqIHRoYXQgY2FuIGJlIHVzZWQgZm9yIHNpZ25hbGluZyB0aGUgc3VjY2Vzc2Z1bCBvciB1bnN1Y2Nlc3NmdWwgY29tcGxldGlvbiwgYXMgd2VsbCBhcyB0aGUgc3RhdHVzXG4gKiBvZiB0aGUgdGFzay5cbiAqXG4gKiAqKk1ldGhvZHMqKlxuICpcbiAqIC0gYHJlc29sdmUodmFsdWUpYCDigJMgcmVzb2x2ZXMgdGhlIGRlcml2ZWQgcHJvbWlzZSB3aXRoIHRoZSBgdmFsdWVgLiBJZiB0aGUgdmFsdWUgaXMgYSByZWplY3Rpb25cbiAqICAgY29uc3RydWN0ZWQgdmlhIGAkcS5yZWplY3RgLCB0aGUgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIGluc3RlYWQuXG4gKiAtIGByZWplY3QocmVhc29uKWAg4oCTIHJlamVjdHMgdGhlIGRlcml2ZWQgcHJvbWlzZSB3aXRoIHRoZSBgcmVhc29uYC4gVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gKiAgIHJlc29sdmluZyBpdCB3aXRoIGEgcmVqZWN0aW9uIGNvbnN0cnVjdGVkIHZpYSBgJHEucmVqZWN0YC5cbiAqIC0gYG5vdGlmeSh2YWx1ZSlgIC0gcHJvdmlkZXMgdXBkYXRlcyBvbiB0aGUgc3RhdHVzIG9mIHRoZSBwcm9taXNlJ3MgZXhlY3V0aW9uLiBUaGlzIG1heSBiZSBjYWxsZWRcbiAqICAgbXVsdGlwbGUgdGltZXMgYmVmb3JlIHRoZSBwcm9taXNlIGlzIGVpdGhlciByZXNvbHZlZCBvciByZWplY3RlZC5cbiAqXG4gKiAqKlByb3BlcnRpZXMqKlxuICpcbiAqIC0gcHJvbWlzZSDigJMgYHtQcm9taXNlfWAg4oCTIHByb21pc2Ugb2JqZWN0IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGRlZmVycmVkLlxuICpcbiAqXG4gKiAjIFRoZSBQcm9taXNlIEFQSVxuICpcbiAqIEEgbmV3IHByb21pc2UgaW5zdGFuY2UgaXMgY3JlYXRlZCB3aGVuIGEgZGVmZXJyZWQgaW5zdGFuY2UgaXMgY3JlYXRlZCBhbmQgY2FuIGJlIHJldHJpZXZlZCBieVxuICogY2FsbGluZyBgZGVmZXJyZWQucHJvbWlzZWAuXG4gKlxuICogVGhlIHB1cnBvc2Ugb2YgdGhlIHByb21pc2Ugb2JqZWN0IGlzIHRvIGFsbG93IGZvciBpbnRlcmVzdGVkIHBhcnRpZXMgdG8gZ2V0IGFjY2VzcyB0byB0aGUgcmVzdWx0XG4gKiBvZiB0aGUgZGVmZXJyZWQgdGFzayB3aGVuIGl0IGNvbXBsZXRlcy5cbiAqXG4gKiAqKk1ldGhvZHMqKlxuICpcbiAqIC0gYHRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrLCBub3RpZnlDYWxsYmFjaylgIOKAkyByZWdhcmRsZXNzIG9mIHdoZW4gdGhlIHByb21pc2Ugd2FzIG9yXG4gKiAgIHdpbGwgYmUgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQsIGB0aGVuYCBjYWxscyBvbmUgb2YgdGhlIHN1Y2Nlc3Mgb3IgZXJyb3IgY2FsbGJhY2tzIGFzeW5jaHJvbm91c2x5XG4gKiAgIGFzIHNvb24gYXMgdGhlIHJlc3VsdCBpcyBhdmFpbGFibGUuIFRoZSBjYWxsYmFja3MgYXJlIGNhbGxlZCB3aXRoIGEgc2luZ2xlIGFyZ3VtZW50OiB0aGUgcmVzdWx0XG4gKiAgIG9yIHJlamVjdGlvbiByZWFzb24uIEFkZGl0aW9uYWxseSwgdGhlIG5vdGlmeSBjYWxsYmFjayBtYXkgYmUgY2FsbGVkIHplcm8gb3IgbW9yZSB0aW1lcyB0b1xuICogICBwcm92aWRlIGEgcHJvZ3Jlc3MgaW5kaWNhdGlvbiwgYmVmb3JlIHRoZSBwcm9taXNlIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkLlxuICpcbiAqICAgVGhpcyBtZXRob2QgKnJldHVybnMgYSBuZXcgcHJvbWlzZSogd2hpY2ggaXMgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQgdmlhIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlXG4gKiAgIGBzdWNjZXNzQ2FsbGJhY2tgLCBgZXJyb3JDYWxsYmFja2AgKHVubGVzcyB0aGF0IHZhbHVlIGlzIGEgcHJvbWlzZSwgaW4gd2hpY2ggY2FzZSBpdCBpcyByZXNvbHZlZFxuICogICB3aXRoIHRoZSB2YWx1ZSB3aGljaCBpcyByZXNvbHZlZCBpbiB0aGF0IHByb21pc2UgdXNpbmdcbiAqICAgW3Byb21pc2UgY2hhaW5pbmddKGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2VzNi9wcm9taXNlcy8jdG9jLXByb21pc2VzLXF1ZXVlcykpLlxuICogICBJdCBhbHNvIG5vdGlmaWVzIHZpYSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBgbm90aWZ5Q2FsbGJhY2tgIG1ldGhvZC4gVGhlIHByb21pc2UgY2Fubm90IGJlXG4gKiAgIHJlc29sdmVkIG9yIHJlamVjdGVkIGZyb20gdGhlIG5vdGlmeUNhbGxiYWNrIG1ldGhvZC5cbiAqXG4gKiAtIGBjYXRjaChlcnJvckNhbGxiYWNrKWAg4oCTIHNob3J0aGFuZCBmb3IgYHByb21pc2UudGhlbihudWxsLCBlcnJvckNhbGxiYWNrKWBcbiAqXG4gKiAtIGBmaW5hbGx5KGNhbGxiYWNrLCBub3RpZnlDYWxsYmFjaylgIOKAkyBhbGxvd3MgeW91IHRvIG9ic2VydmUgZWl0aGVyIHRoZSBmdWxmaWxsbWVudCBvciByZWplY3Rpb24gb2YgYSBwcm9taXNlLFxuICogICBidXQgdG8gZG8gc28gd2l0aG91dCBtb2RpZnlpbmcgdGhlIGZpbmFsIHZhbHVlLiBUaGlzIGlzIHVzZWZ1bCB0byByZWxlYXNlIHJlc291cmNlcyBvciBkbyBzb21lXG4gKiAgIGNsZWFuLXVwIHRoYXQgbmVlZHMgdG8gYmUgZG9uZSB3aGV0aGVyIHRoZSBwcm9taXNlIHdhcyByZWplY3RlZCBvciByZXNvbHZlZC4gU2VlIHRoZSBbZnVsbFxuICogICBzcGVjaWZpY2F0aW9uXShodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3Evd2lraS9BUEktUmVmZXJlbmNlI3Byb21pc2VmaW5hbGx5Y2FsbGJhY2spIGZvclxuICogICBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqICMgQ2hhaW5pbmcgcHJvbWlzZXNcbiAqXG4gKiBCZWNhdXNlIGNhbGxpbmcgdGhlIGB0aGVuYCBtZXRob2Qgb2YgYSBwcm9taXNlIHJldHVybnMgYSBuZXcgZGVyaXZlZCBwcm9taXNlLCBpdCBpcyBlYXNpbHlcbiAqIHBvc3NpYmxlIHRvIGNyZWF0ZSBhIGNoYWluIG9mIHByb21pc2VzOlxuICpcbiAqIGBgYGpzXG4gKiAgIHByb21pc2VCID0gcHJvbWlzZUEudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAqICAgICByZXR1cm4gcmVzdWx0ICsgMTtcbiAqICAgfSk7XG4gKlxuICogICAvLyBwcm9taXNlQiB3aWxsIGJlIHJlc29sdmVkIGltbWVkaWF0ZWx5IGFmdGVyIHByb21pc2VBIGlzIHJlc29sdmVkIGFuZCBpdHMgdmFsdWVcbiAqICAgLy8gd2lsbCBiZSB0aGUgcmVzdWx0IG9mIHByb21pc2VBIGluY3JlbWVudGVkIGJ5IDFcbiAqIGBgYFxuICpcbiAqIEl0IGlzIHBvc3NpYmxlIHRvIGNyZWF0ZSBjaGFpbnMgb2YgYW55IGxlbmd0aCBhbmQgc2luY2UgYSBwcm9taXNlIGNhbiBiZSByZXNvbHZlZCB3aXRoIGFub3RoZXJcbiAqIHByb21pc2UgKHdoaWNoIHdpbGwgZGVmZXIgaXRzIHJlc29sdXRpb24gZnVydGhlciksIGl0IGlzIHBvc3NpYmxlIHRvIHBhdXNlL2RlZmVyIHJlc29sdXRpb24gb2ZcbiAqIHRoZSBwcm9taXNlcyBhdCBhbnkgcG9pbnQgaW4gdGhlIGNoYWluLiBUaGlzIG1ha2VzIGl0IHBvc3NpYmxlIHRvIGltcGxlbWVudCBwb3dlcmZ1bCBBUElzIGxpa2VcbiAqICRodHRwJ3MgcmVzcG9uc2UgaW50ZXJjZXB0b3JzLlxuICpcbiAqXG4gKiAjIERpZmZlcmVuY2VzIGJldHdlZW4gS3JpcyBLb3dhbCdzIFEgYW5kICRxXG4gKlxuICogIFRoZXJlIGFyZSB0d28gbWFpbiBkaWZmZXJlbmNlczpcbiAqXG4gKiAtICRxIGlzIGludGVncmF0ZWQgd2l0aCB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGV9IFNjb3BlIG1vZGVsIG9ic2VydmF0aW9uXG4gKiAgIG1lY2hhbmlzbSBpbiBhbmd1bGFyLCB3aGljaCBtZWFucyBmYXN0ZXIgcHJvcGFnYXRpb24gb2YgcmVzb2x1dGlvbiBvciByZWplY3Rpb24gaW50byB5b3VyXG4gKiAgIG1vZGVscyBhbmQgYXZvaWRpbmcgdW5uZWNlc3NhcnkgYnJvd3NlciByZXBhaW50cywgd2hpY2ggd291bGQgcmVzdWx0IGluIGZsaWNrZXJpbmcgVUkuXG4gKiAtIFEgaGFzIG1hbnkgbW9yZSBmZWF0dXJlcyB0aGFuICRxLCBidXQgdGhhdCBjb21lcyBhdCBhIGNvc3Qgb2YgYnl0ZXMuICRxIGlzIHRpbnksIGJ1dCBjb250YWluc1xuICogICBhbGwgdGhlIGltcG9ydGFudCBmdW5jdGlvbmFsaXR5IG5lZWRlZCBmb3IgY29tbW9uIGFzeW5jIHRhc2tzLlxuICpcbiAqICAjIFRlc3RpbmdcbiAqXG4gKiAgYGBganNcbiAqICAgIGl0KCdzaG91bGQgc2ltdWxhdGUgcHJvbWlzZScsIGluamVjdChmdW5jdGlvbigkcSwgJHJvb3RTY29wZSkge1xuICogICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICogICAgICB2YXIgcHJvbWlzZSA9IGRlZmVycmVkLnByb21pc2U7XG4gKiAgICAgIHZhciByZXNvbHZlZFZhbHVlO1xuICpcbiAqICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7IHJlc29sdmVkVmFsdWUgPSB2YWx1ZTsgfSk7XG4gKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7XG4gKlxuICogICAgICAvLyBTaW11bGF0ZSByZXNvbHZpbmcgb2YgcHJvbWlzZVxuICogICAgICBkZWZlcnJlZC5yZXNvbHZlKDEyMyk7XG4gKiAgICAgIC8vIE5vdGUgdGhhdCB0aGUgJ3RoZW4nIGZ1bmN0aW9uIGRvZXMgbm90IGdldCBjYWxsZWQgc3luY2hyb25vdXNseS5cbiAqICAgICAgLy8gVGhpcyBpcyBiZWNhdXNlIHdlIHdhbnQgdGhlIHByb21pc2UgQVBJIHRvIGFsd2F5cyBiZSBhc3luYywgd2hldGhlciBvciBub3RcbiAqICAgICAgLy8gaXQgZ290IGNhbGxlZCBzeW5jaHJvbm91c2x5IG9yIGFzeW5jaHJvbm91c2x5LlxuICogICAgICBleHBlY3QocmVzb2x2ZWRWYWx1ZSkudG9CZVVuZGVmaW5lZCgpO1xuICpcbiAqICAgICAgLy8gUHJvcGFnYXRlIHByb21pc2UgcmVzb2x1dGlvbiB0byAndGhlbicgZnVuY3Rpb25zIHVzaW5nICRhcHBseSgpLlxuICogICAgICAkcm9vdFNjb3BlLiRhcHBseSgpO1xuICogICAgICBleHBlY3QocmVzb2x2ZWRWYWx1ZSkudG9FcXVhbCgxMjMpO1xuICogICAgfSkpO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oZnVuY3Rpb24sIGZ1bmN0aW9uKX0gcmVzb2x2ZXIgRnVuY3Rpb24gd2hpY2ggaXMgcmVzcG9uc2libGUgZm9yIHJlc29sdmluZyBvclxuICogICByZWplY3RpbmcgdGhlIG5ld2x5IGNyZWF0ZWQgcHJvbWlzZS4gVGhlIGZpcnN0IHBhcmFtZXRlciBpcyBhIGZ1bmN0aW9uIHdoaWNoIHJlc29sdmVzIHRoZVxuICogICBwcm9taXNlLCB0aGUgc2Vjb25kIHBhcmFtZXRlciBpcyBhIGZ1bmN0aW9uIHdoaWNoIHJlamVjdHMgdGhlIHByb21pc2UuXG4gKlxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBuZXdseSBjcmVhdGVkIHByb21pc2UuXG4gKi9cbmZ1bmN0aW9uICRRUHJvdmlkZXIoKSB7XG5cbiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRleGNlcHRpb25IYW5kbGVyJywgZnVuY3Rpb24oJHJvb3RTY29wZSwgJGV4Y2VwdGlvbkhhbmRsZXIpIHtcbiAgICByZXR1cm4gcUZhY3RvcnkoZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhjYWxsYmFjayk7XG4gICAgfSwgJGV4Y2VwdGlvbkhhbmRsZXIpO1xuICB9XTtcbn1cblxuZnVuY3Rpb24gJCRRUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJGJyb3dzZXInLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbigkYnJvd3NlciwgJGV4Y2VwdGlvbkhhbmRsZXIpIHtcbiAgICByZXR1cm4gcUZhY3RvcnkoZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICRicm93c2VyLmRlZmVyKGNhbGxiYWNrKTtcbiAgICB9LCAkZXhjZXB0aW9uSGFuZGxlcik7XG4gIH1dO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBwcm9taXNlIG1hbmFnZXIuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbil9IG5leHRUaWNrIEZ1bmN0aW9uIGZvciBleGVjdXRpbmcgZnVuY3Rpb25zIGluIHRoZSBuZXh0IHR1cm4uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKC4uLiopfSBleGNlcHRpb25IYW5kbGVyIEZ1bmN0aW9uIGludG8gd2hpY2ggdW5leHBlY3RlZCBleGNlcHRpb25zIGFyZSBwYXNzZWQgZm9yXG4gKiAgICAgZGVidWdnaW5nIHB1cnBvc2VzLlxuICogQHJldHVybnMge29iamVjdH0gUHJvbWlzZSBtYW5hZ2VyLlxuICovXG5mdW5jdGlvbiBxRmFjdG9yeShuZXh0VGljaywgZXhjZXB0aW9uSGFuZGxlcikge1xuICB2YXIgJHFNaW5FcnIgPSBtaW5FcnIoJyRxJywgVHlwZUVycm9yKTtcbiAgZnVuY3Rpb24gY2FsbE9uY2Uoc2VsZiwgcmVzb2x2ZUZuLCByZWplY3RGbikge1xuICAgIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgICBmdW5jdGlvbiB3cmFwKGZuKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKGNhbGxlZCkgcmV0dXJuO1xuICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICBmbi5jYWxsKHNlbGYsIHZhbHVlKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIFt3cmFwKHJlc29sdmVGbiksIHdyYXAocmVqZWN0Rm4pXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nLiRxI2RlZmVyXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDcmVhdGVzIGEgYERlZmVycmVkYCBvYmplY3Qgd2hpY2ggcmVwcmVzZW50cyBhIHRhc2sgd2hpY2ggd2lsbCBmaW5pc2ggaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQHJldHVybnMge0RlZmVycmVkfSBSZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIGRlZmVycmVkLlxuICAgKi9cbiAgdmFyIGRlZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBEZWZlcnJlZCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFByb21pc2UoKSB7XG4gICAgdGhpcy4kJHN0YXRlID0geyBzdGF0dXM6IDAgfTtcbiAgfVxuXG4gIFByb21pc2UucHJvdG90eXBlID0ge1xuICAgIHRoZW46IGZ1bmN0aW9uKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBwcm9ncmVzc0JhY2spIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgRGVmZXJyZWQoKTtcblxuICAgICAgdGhpcy4kJHN0YXRlLnBlbmRpbmcgPSB0aGlzLiQkc3RhdGUucGVuZGluZyB8fCBbXTtcbiAgICAgIHRoaXMuJCRzdGF0ZS5wZW5kaW5nLnB1c2goW3Jlc3VsdCwgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb2dyZXNzQmFja10pO1xuICAgICAgaWYgKHRoaXMuJCRzdGF0ZS5zdGF0dXMgPiAwKSBzY2hlZHVsZVByb2Nlc3NRdWV1ZSh0aGlzLiQkc3RhdGUpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0LnByb21pc2U7XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICBcImZpbmFsbHlcIjogZnVuY3Rpb24oY2FsbGJhY2ssIHByb2dyZXNzQmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2sodmFsdWUsIHRydWUsIGNhbGxiYWNrKTtcbiAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVDYWxsYmFjayhlcnJvciwgZmFsc2UsIGNhbGxiYWNrKTtcbiAgICAgIH0sIHByb2dyZXNzQmFjayk7XG4gICAgfVxuICB9O1xuXG4gIC8vRmFzdGVyLCBtb3JlIGJhc2ljIHRoYW4gYW5ndWxhci5iaW5kIGh0dHA6Ly9qc3BlcmYuY29tL2FuZ3VsYXItYmluZC12cy1jdXN0b20tdnMtbmF0aXZlXG4gIGZ1bmN0aW9uIHNpbXBsZUJpbmQoY29udGV4dCwgZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGZuLmNhbGwoY29udGV4dCwgdmFsdWUpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwcm9jZXNzUXVldWUoc3RhdGUpIHtcbiAgICB2YXIgZm4sIGRlZmVycmVkLCBwZW5kaW5nO1xuXG4gICAgcGVuZGluZyA9IHN0YXRlLnBlbmRpbmc7XG4gICAgc3RhdGUucHJvY2Vzc1NjaGVkdWxlZCA9IGZhbHNlO1xuICAgIHN0YXRlLnBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcGVuZGluZy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICBkZWZlcnJlZCA9IHBlbmRpbmdbaV1bMF07XG4gICAgICBmbiA9IHBlbmRpbmdbaV1bc3RhdGUuc3RhdHVzXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZm4oc3RhdGUudmFsdWUpKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5zdGF0dXMgPT09IDEpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHN0YXRlLnZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoc3RhdGUudmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGRlZmVycmVkLnJlamVjdChlKTtcbiAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY2hlZHVsZVByb2Nlc3NRdWV1ZShzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5wcm9jZXNzU2NoZWR1bGVkIHx8ICFzdGF0ZS5wZW5kaW5nKSByZXR1cm47XG4gICAgc3RhdGUucHJvY2Vzc1NjaGVkdWxlZCA9IHRydWU7XG4gICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7IHByb2Nlc3NRdWV1ZShzdGF0ZSk7IH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gRGVmZXJyZWQoKSB7XG4gICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKTtcbiAgICAvL05lY2Vzc2FyeSB0byBzdXBwb3J0IHVuYm91bmQgZXhlY3V0aW9uIDovXG4gICAgdGhpcy5yZXNvbHZlID0gc2ltcGxlQmluZCh0aGlzLCB0aGlzLnJlc29sdmUpO1xuICAgIHRoaXMucmVqZWN0ID0gc2ltcGxlQmluZCh0aGlzLCB0aGlzLnJlamVjdCk7XG4gICAgdGhpcy5ub3RpZnkgPSBzaW1wbGVCaW5kKHRoaXMsIHRoaXMubm90aWZ5KTtcbiAgfVxuXG4gIERlZmVycmVkLnByb3RvdHlwZSA9IHtcbiAgICByZXNvbHZlOiBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMpIHJldHVybjtcbiAgICAgIGlmICh2YWwgPT09IHRoaXMucHJvbWlzZSkge1xuICAgICAgICB0aGlzLiQkcmVqZWN0KCRxTWluRXJyKFxuICAgICAgICAgICdxY3ljbGUnLFxuICAgICAgICAgIFwiRXhwZWN0ZWQgcHJvbWlzZSB0byBiZSByZXNvbHZlZCB3aXRoIHZhbHVlIG90aGVyIHRoYW4gaXRzZWxmICd7MH0nXCIsXG4gICAgICAgICAgdmFsKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiQkcmVzb2x2ZSh2YWwpO1xuICAgICAgfVxuXG4gICAgfSxcblxuICAgICQkcmVzb2x2ZTogZnVuY3Rpb24odmFsKSB7XG4gICAgICB2YXIgdGhlbiwgZm5zO1xuXG4gICAgICBmbnMgPSBjYWxsT25jZSh0aGlzLCB0aGlzLiQkcmVzb2x2ZSwgdGhpcy4kJHJlamVjdCk7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoKGlzT2JqZWN0KHZhbCkgfHwgaXNGdW5jdGlvbih2YWwpKSkgdGhlbiA9IHZhbCAmJiB2YWwudGhlbjtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhlbikpIHtcbiAgICAgICAgICB0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPSAtMTtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsLCBmbnNbMF0sIGZuc1sxXSwgdGhpcy5ub3RpZnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucHJvbWlzZS4kJHN0YXRlLnZhbHVlID0gdmFsO1xuICAgICAgICAgIHRoaXMucHJvbWlzZS4kJHN0YXRlLnN0YXR1cyA9IDE7XG4gICAgICAgICAgc2NoZWR1bGVQcm9jZXNzUXVldWUodGhpcy5wcm9taXNlLiQkc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGZuc1sxXShlKTtcbiAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVqZWN0OiBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgIGlmICh0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMpIHJldHVybjtcbiAgICAgIHRoaXMuJCRyZWplY3QocmVhc29uKTtcbiAgICB9LFxuXG4gICAgJCRyZWplY3Q6IGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgdGhpcy5wcm9taXNlLiQkc3RhdGUudmFsdWUgPSByZWFzb247XG4gICAgICB0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPSAyO1xuICAgICAgc2NoZWR1bGVQcm9jZXNzUXVldWUodGhpcy5wcm9taXNlLiQkc3RhdGUpO1xuICAgIH0sXG5cbiAgICBub3RpZnk6IGZ1bmN0aW9uKHByb2dyZXNzKSB7XG4gICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5wcm9taXNlLiQkc3RhdGUucGVuZGluZztcblxuICAgICAgaWYgKCh0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPD0gMCkgJiYgY2FsbGJhY2tzICYmIGNhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGNhbGxiYWNrLCByZXN1bHQ7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrc1tpXVswXTtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2tzW2ldWzNdO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmVzdWx0Lm5vdGlmeShpc0Z1bmN0aW9uKGNhbGxiYWNrKSA/IGNhbGxiYWNrKHByb2dyZXNzKSA6IHByb2dyZXNzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkcSNyZWplY3RcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgYXMgcmVqZWN0ZWQgd2l0aCB0aGUgc3BlY2lmaWVkIGByZWFzb25gLiBUaGlzIGFwaSBzaG91bGQgYmVcbiAgICogdXNlZCB0byBmb3J3YXJkIHJlamVjdGlvbiBpbiBhIGNoYWluIG9mIHByb21pc2VzLiBJZiB5b3UgYXJlIGRlYWxpbmcgd2l0aCB0aGUgbGFzdCBwcm9taXNlIGluXG4gICAqIGEgcHJvbWlzZSBjaGFpbiwgeW91IGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgaXQuXG4gICAqXG4gICAqIFdoZW4gY29tcGFyaW5nIGRlZmVycmVkcy9wcm9taXNlcyB0byB0aGUgZmFtaWxpYXIgYmVoYXZpb3Igb2YgdHJ5L2NhdGNoL3Rocm93LCB0aGluayBvZlxuICAgKiBgcmVqZWN0YCBhcyB0aGUgYHRocm93YCBrZXl3b3JkIGluIEphdmFTY3JpcHQuIFRoaXMgYWxzbyBtZWFucyB0aGF0IGlmIHlvdSBcImNhdGNoXCIgYW4gZXJyb3IgdmlhXG4gICAqIGEgcHJvbWlzZSBlcnJvciBjYWxsYmFjayBhbmQgeW91IHdhbnQgdG8gZm9yd2FyZCB0aGUgZXJyb3IgdG8gdGhlIHByb21pc2UgZGVyaXZlZCBmcm9tIHRoZVxuICAgKiBjdXJyZW50IHByb21pc2UsIHlvdSBoYXZlIHRvIFwicmV0aHJvd1wiIHRoZSBlcnJvciBieSByZXR1cm5pbmcgYSByZWplY3Rpb24gY29uc3RydWN0ZWQgdmlhXG4gICAqIGByZWplY3RgLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgIHByb21pc2VCID0gcHJvbWlzZUEudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICogICAgIC8vIHN1Y2Nlc3M6IGRvIHNvbWV0aGluZyBhbmQgcmVzb2x2ZSBwcm9taXNlQlxuICAgKiAgICAgLy8gICAgICAgICAgd2l0aCB0aGUgb2xkIG9yIGEgbmV3IHJlc3VsdFxuICAgKiAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICogICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICogICAgIC8vIGVycm9yOiBoYW5kbGUgdGhlIGVycm9yIGlmIHBvc3NpYmxlIGFuZFxuICAgKiAgICAgLy8gICAgICAgIHJlc29sdmUgcHJvbWlzZUIgd2l0aCBuZXdQcm9taXNlT3JWYWx1ZSxcbiAgICogICAgIC8vICAgICAgICBvdGhlcndpc2UgZm9yd2FyZCB0aGUgcmVqZWN0aW9uIHRvIHByb21pc2VCXG4gICAqICAgICBpZiAoY2FuSGFuZGxlKHJlYXNvbikpIHtcbiAgICogICAgICAvLyBoYW5kbGUgdGhlIGVycm9yIGFuZCByZWNvdmVyXG4gICAqICAgICAgcmV0dXJuIG5ld1Byb21pc2VPclZhbHVlO1xuICAgKiAgICAgfVxuICAgKiAgICAgcmV0dXJuICRxLnJlamVjdChyZWFzb24pO1xuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHsqfSByZWFzb24gQ29uc3RhbnQsIG1lc3NhZ2UsIGV4Y2VwdGlvbiBvciBhbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSByZWplY3Rpb24gcmVhc29uLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHByb21pc2UgdGhhdCB3YXMgYWxyZWFkeSByZXNvbHZlZCBhcyByZWplY3RlZCB3aXRoIHRoZSBgcmVhc29uYC5cbiAgICovXG4gIHZhciByZWplY3QgPSBmdW5jdGlvbihyZWFzb24pIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IERlZmVycmVkKCk7XG4gICAgcmVzdWx0LnJlamVjdChyZWFzb24pO1xuICAgIHJldHVybiByZXN1bHQucHJvbWlzZTtcbiAgfTtcblxuICB2YXIgbWFrZVByb21pc2UgPSBmdW5jdGlvbiBtYWtlUHJvbWlzZSh2YWx1ZSwgcmVzb2x2ZWQpIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IERlZmVycmVkKCk7XG4gICAgaWYgKHJlc29sdmVkKSB7XG4gICAgICByZXN1bHQucmVzb2x2ZSh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5yZWplY3QodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0LnByb21pc2U7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNhbGxiYWNrID0gZnVuY3Rpb24gaGFuZGxlQ2FsbGJhY2sodmFsdWUsIGlzUmVzb2x2ZWQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGNhbGxiYWNrT3V0cHV0ID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgaWYgKGlzRnVuY3Rpb24oY2FsbGJhY2spKSBjYWxsYmFja091dHB1dCA9IGNhbGxiYWNrKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG1ha2VQcm9taXNlKGUsIGZhbHNlKTtcbiAgICB9XG4gICAgaWYgKGlzUHJvbWlzZUxpa2UoY2FsbGJhY2tPdXRwdXQpKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2tPdXRwdXQudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG1ha2VQcm9taXNlKHZhbHVlLCBpc1Jlc29sdmVkKTtcbiAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBtYWtlUHJvbWlzZShlcnJvciwgZmFsc2UpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtYWtlUHJvbWlzZSh2YWx1ZSwgaXNSZXNvbHZlZCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI3doZW5cbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFdyYXBzIGFuIG9iamVjdCB0aGF0IG1pZ2h0IGJlIGEgdmFsdWUgb3IgYSAoM3JkIHBhcnR5KSB0aGVuLWFibGUgcHJvbWlzZSBpbnRvIGEgJHEgcHJvbWlzZS5cbiAgICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3UgYXJlIGRlYWxpbmcgd2l0aCBhbiBvYmplY3QgdGhhdCBtaWdodCBvciBtaWdodCBub3QgYmUgYSBwcm9taXNlLCBvciBpZlxuICAgKiB0aGUgcHJvbWlzZSBjb21lcyBmcm9tIGEgc291cmNlIHRoYXQgY2FuJ3QgYmUgdHJ1c3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSBvciBhIHByb21pc2VcbiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBwcm9taXNlIG9mIHRoZSBwYXNzZWQgdmFsdWUgb3IgcHJvbWlzZVxuICAgKi9cblxuXG4gIHZhciB3aGVuID0gZnVuY3Rpb24odmFsdWUsIGNhbGxiYWNrLCBlcnJiYWNrLCBwcm9ncmVzc0JhY2spIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IERlZmVycmVkKCk7XG4gICAgcmVzdWx0LnJlc29sdmUodmFsdWUpO1xuICAgIHJldHVybiByZXN1bHQucHJvbWlzZS50aGVuKGNhbGxiYWNrLCBlcnJiYWNrLCBwcm9ncmVzc0JhY2spO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI3Jlc29sdmVcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEFsaWFzIG9mIHtAbGluayBuZy4kcSN3aGVuIHdoZW59IHRvIG1haW50YWluIG5hbWluZyBjb25zaXN0ZW5jeSB3aXRoIEVTNi5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSBvciBhIHByb21pc2VcbiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBwcm9taXNlIG9mIHRoZSBwYXNzZWQgdmFsdWUgb3IgcHJvbWlzZVxuICAgKi9cbiAgdmFyIHJlc29sdmUgPSB3aGVuO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI2FsbFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ29tYmluZXMgbXVsdGlwbGUgcHJvbWlzZXMgaW50byBhIHNpbmdsZSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiBhbGwgb2YgdGhlIGlucHV0XG4gICAqIHByb21pc2VzIGFyZSByZXNvbHZlZC5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheS48UHJvbWlzZT58T2JqZWN0LjxQcm9taXNlPn0gcHJvbWlzZXMgQW4gYXJyYXkgb3IgaGFzaCBvZiBwcm9taXNlcy5cbiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBzaW5nbGUgcHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCBhbiBhcnJheS9oYXNoIG9mIHZhbHVlcyxcbiAgICogICBlYWNoIHZhbHVlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb21pc2UgYXQgdGhlIHNhbWUgaW5kZXgva2V5IGluIHRoZSBgcHJvbWlzZXNgIGFycmF5L2hhc2guXG4gICAqICAgSWYgYW55IG9mIHRoZSBwcm9taXNlcyBpcyByZXNvbHZlZCB3aXRoIGEgcmVqZWN0aW9uLCB0aGlzIHJlc3VsdGluZyBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWRcbiAgICogICB3aXRoIHRoZSBzYW1lIHJlamVjdGlvbiB2YWx1ZS5cbiAgICovXG5cbiAgZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gICAgdmFyIGRlZmVycmVkID0gbmV3IERlZmVycmVkKCksXG4gICAgICAgIGNvdW50ZXIgPSAwLFxuICAgICAgICByZXN1bHRzID0gaXNBcnJheShwcm9taXNlcykgPyBbXSA6IHt9O1xuXG4gICAgZm9yRWFjaChwcm9taXNlcywgZnVuY3Rpb24ocHJvbWlzZSwga2V5KSB7XG4gICAgICBjb3VudGVyKys7XG4gICAgICB3aGVuKHByb21pc2UpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHJlc3VsdHMuaGFzT3duUHJvcGVydHkoa2V5KSkgcmV0dXJuO1xuICAgICAgICByZXN1bHRzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgaWYgKCEoLS1jb3VudGVyKSkgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHRzKTtcbiAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICBpZiAocmVzdWx0cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSByZXR1cm47XG4gICAgICAgIGRlZmVycmVkLnJlamVjdChyZWFzb24pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpZiAoY291bnRlciA9PT0gMCkge1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfVxuXG4gIHZhciAkUSA9IGZ1bmN0aW9uIFEocmVzb2x2ZXIpIHtcbiAgICBpZiAoIWlzRnVuY3Rpb24ocmVzb2x2ZXIpKSB7XG4gICAgICB0aHJvdyAkcU1pbkVycignbm9yc2x2cicsIFwiRXhwZWN0ZWQgcmVzb2x2ZXJGbiwgZ290ICd7MH0nXCIsIHJlc29sdmVyKTtcbiAgICB9XG5cbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUSkpIHtcbiAgICAgIC8vIE1vcmUgdXNlZnVsIHdoZW4gJFEgaXMgdGhlIFByb21pc2UgaXRzZWxmLlxuICAgICAgcmV0dXJuIG5ldyBRKHJlc29sdmVyKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcblxuICAgIGZ1bmN0aW9uIHJlc29sdmVGbih2YWx1ZSkge1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVqZWN0Rm4ocmVhc29uKSB7XG4gICAgICBkZWZlcnJlZC5yZWplY3QocmVhc29uKTtcbiAgICB9XG5cbiAgICByZXNvbHZlcihyZXNvbHZlRm4sIHJlamVjdEZuKTtcblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9O1xuXG4gICRRLmRlZmVyID0gZGVmZXI7XG4gICRRLnJlamVjdCA9IHJlamVjdDtcbiAgJFEud2hlbiA9IHdoZW47XG4gICRRLnJlc29sdmUgPSByZXNvbHZlO1xuICAkUS5hbGwgPSBhbGw7XG5cbiAgcmV0dXJuICRRO1xufVxuXG5mdW5jdGlvbiAkJFJBRlByb3ZpZGVyKCkgeyAvL3JBRlxuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJHRpbWVvdXQnLCBmdW5jdGlvbigkd2luZG93LCAkdGltZW91dCkge1xuICAgIHZhciByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSAkd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZTtcblxuICAgIHZhciBjYW5jZWxBbmltYXRpb25GcmFtZSA9ICR3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy53ZWJraXRDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG5cbiAgICB2YXIgcmFmU3VwcG9ydGVkID0gISFyZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgdmFyIHJhZkZuID0gcmFmU3VwcG9ydGVkXG4gICAgICA/IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgdmFyIGlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgOiBmdW5jdGlvbihmbikge1xuICAgICAgICAgIHZhciB0aW1lciA9ICR0aW1lb3V0KGZuLCAxNi42NiwgZmFsc2UpOyAvLyAxMDAwIC8gNjAgPSAxNi42NjZcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkdGltZW91dC5jYW5jZWwodGltZXIpO1xuICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICBxdWV1ZUZuLnN1cHBvcnRlZCA9IHJhZlN1cHBvcnRlZDtcblxuICAgIHZhciBjYW5jZWxMYXN0UkFGO1xuICAgIHZhciB0YXNrQ291bnQgPSAwO1xuICAgIHZhciB0YXNrUXVldWUgPSBbXTtcbiAgICByZXR1cm4gcXVldWVGbjtcblxuICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YXNrUXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHRhc2sgPSB0YXNrUXVldWVbaV07XG4gICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgdGFza1F1ZXVlW2ldID0gbnVsbDtcbiAgICAgICAgICB0YXNrKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRhc2tDb3VudCA9IHRhc2tRdWV1ZS5sZW5ndGggPSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHF1ZXVlRm4oYXN5bmNGbikge1xuICAgICAgdmFyIGluZGV4ID0gdGFza1F1ZXVlLmxlbmd0aDtcblxuICAgICAgdGFza0NvdW50Kys7XG4gICAgICB0YXNrUXVldWUucHVzaChhc3luY0ZuKTtcblxuICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgIGNhbmNlbExhc3RSQUYgPSByYWZGbihmbHVzaCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiBjYW5jZWxRdWV1ZUZuKCkge1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgIHRhc2tRdWV1ZVtpbmRleF0gPSBudWxsO1xuICAgICAgICAgIGluZGV4ID0gbnVsbDtcblxuICAgICAgICAgIGlmICgtLXRhc2tDb3VudCA9PT0gMCAmJiBjYW5jZWxMYXN0UkFGKSB7XG4gICAgICAgICAgICBjYW5jZWxMYXN0UkFGKCk7XG4gICAgICAgICAgICBjYW5jZWxMYXN0UkFGID0gbnVsbDtcbiAgICAgICAgICAgIHRhc2tRdWV1ZS5sZW5ndGggPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1dO1xufVxuXG4vKipcbiAqIERFU0lHTiBOT1RFU1xuICpcbiAqIFRoZSBkZXNpZ24gZGVjaXNpb25zIGJlaGluZCB0aGUgc2NvcGUgYXJlIGhlYXZpbHkgZmF2b3JlZCBmb3Igc3BlZWQgYW5kIG1lbW9yeSBjb25zdW1wdGlvbi5cbiAqXG4gKiBUaGUgdHlwaWNhbCB1c2Ugb2Ygc2NvcGUgaXMgdG8gd2F0Y2ggdGhlIGV4cHJlc3Npb25zLCB3aGljaCBtb3N0IG9mIHRoZSB0aW1lIHJldHVybiB0aGUgc2FtZVxuICogdmFsdWUgYXMgbGFzdCB0aW1lIHNvIHdlIG9wdGltaXplIHRoZSBvcGVyYXRpb24uXG4gKlxuICogQ2xvc3VyZXMgY29uc3RydWN0aW9uIGlzIGV4cGVuc2l2ZSBpbiB0ZXJtcyBvZiBzcGVlZCBhcyB3ZWxsIGFzIG1lbW9yeTpcbiAqICAgLSBObyBjbG9zdXJlcywgaW5zdGVhZCB1c2UgcHJvdG90eXBpY2FsIGluaGVyaXRhbmNlIGZvciBBUElcbiAqICAgLSBJbnRlcm5hbCBzdGF0ZSBuZWVkcyB0byBiZSBzdG9yZWQgb24gc2NvcGUgZGlyZWN0bHksIHdoaWNoIG1lYW5zIHRoYXQgcHJpdmF0ZSBzdGF0ZSBpc1xuICogICAgIGV4cG9zZWQgYXMgJCRfX19fIHByb3BlcnRpZXNcbiAqXG4gKiBMb29wIG9wZXJhdGlvbnMgYXJlIG9wdGltaXplZCBieSB1c2luZyB3aGlsZShjb3VudC0tKSB7IC4uLiB9XG4gKiAgIC0gdGhpcyBtZWFucyB0aGF0IGluIG9yZGVyIHRvIGtlZXAgdGhlIHNhbWUgb3JkZXIgb2YgZXhlY3V0aW9uIGFzIGFkZGl0aW9uIHdlIGhhdmUgdG8gYWRkXG4gKiAgICAgaXRlbXMgdG8gdGhlIGFycmF5IGF0IHRoZSBiZWdpbm5pbmcgKHVuc2hpZnQpIGluc3RlYWQgb2YgYXQgdGhlIGVuZCAocHVzaClcbiAqXG4gKiBDaGlsZCBzY29wZXMgYXJlIGNyZWF0ZWQgYW5kIHJlbW92ZWQgb2Z0ZW5cbiAqICAgLSBVc2luZyBhbiBhcnJheSB3b3VsZCBiZSBzbG93IHNpbmNlIGluc2VydHMgaW4gbWlkZGxlIGFyZSBleHBlbnNpdmUgc28gd2UgdXNlIGxpbmtlZCBsaXN0XG4gKlxuICogVGhlcmUgYXJlIGZldyB3YXRjaGVzIHRoZW4gYSBsb3Qgb2Ygb2JzZXJ2ZXJzLiBUaGlzIGlzIHdoeSB5b3UgZG9uJ3Qgd2FudCB0aGUgb2JzZXJ2ZXIgdG8gYmVcbiAqIGltcGxlbWVudGVkIGluIHRoZSBzYW1lIHdheSBhcyB3YXRjaC4gV2F0Y2ggcmVxdWlyZXMgcmV0dXJuIG9mIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uIHdoaWNoXG4gKiBhcmUgZXhwZW5zaXZlIHRvIGNvbnN0cnVjdC5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkcm9vdFNjb3BlUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFByb3ZpZGVyIGZvciB0aGUgJHJvb3RTY29wZSBzZXJ2aWNlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHJvb3RTY29wZVByb3ZpZGVyI2RpZ2VzdFR0bFxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2V0cyB0aGUgbnVtYmVyIG9mIGAkZGlnZXN0YCBpdGVyYXRpb25zIHRoZSBzY29wZSBzaG91bGQgYXR0ZW1wdCB0byBleGVjdXRlIGJlZm9yZSBnaXZpbmcgdXAgYW5kXG4gKiBhc3N1bWluZyB0aGF0IHRoZSBtb2RlbCBpcyB1bnN0YWJsZS5cbiAqXG4gKiBUaGUgY3VycmVudCBkZWZhdWx0IGlzIDEwIGl0ZXJhdGlvbnMuXG4gKlxuICogSW4gY29tcGxleCBhcHBsaWNhdGlvbnMgaXQncyBwb3NzaWJsZSB0aGF0IHRoZSBkZXBlbmRlbmNpZXMgYmV0d2VlbiBgJHdhdGNoYHMgd2lsbCByZXN1bHQgaW5cbiAqIHNldmVyYWwgZGlnZXN0IGl0ZXJhdGlvbnMuIEhvd2V2ZXIgaWYgYW4gYXBwbGljYXRpb24gbmVlZHMgbW9yZSB0aGFuIHRoZSBkZWZhdWx0IDEwIGRpZ2VzdFxuICogaXRlcmF0aW9ucyBmb3IgaXRzIG1vZGVsIHRvIHN0YWJpbGl6ZSB0aGVuIHlvdSBzaG91bGQgaW52ZXN0aWdhdGUgd2hhdCBpcyBjYXVzaW5nIHRoZSBtb2RlbCB0b1xuICogY29udGludW91c2x5IGNoYW5nZSBkdXJpbmcgdGhlIGRpZ2VzdC5cbiAqXG4gKiBJbmNyZWFzaW5nIHRoZSBUVEwgY291bGQgaGF2ZSBwZXJmb3JtYW5jZSBpbXBsaWNhdGlvbnMsIHNvIHlvdSBzaG91bGQgbm90IGNoYW5nZSBpdCB3aXRob3V0XG4gKiBwcm9wZXIganVzdGlmaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbGltaXQgVGhlIG51bWJlciBvZiBkaWdlc3QgaXRlcmF0aW9ucy5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRyb290U2NvcGVcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEV2ZXJ5IGFwcGxpY2F0aW9uIGhhcyBhIHNpbmdsZSByb290IHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfS5cbiAqIEFsbCBvdGhlciBzY29wZXMgYXJlIGRlc2NlbmRhbnQgc2NvcGVzIG9mIHRoZSByb290IHNjb3BlLiBTY29wZXMgcHJvdmlkZSBzZXBhcmF0aW9uXG4gKiBiZXR3ZWVuIHRoZSBtb2RlbCBhbmQgdGhlIHZpZXcsIHZpYSBhIG1lY2hhbmlzbSBmb3Igd2F0Y2hpbmcgdGhlIG1vZGVsIGZvciBjaGFuZ2VzLlxuICogVGhleSBhbHNvIHByb3ZpZGUgYW4gZXZlbnQgZW1pc3Npb24vYnJvYWRjYXN0IGFuZCBzdWJzY3JpcHRpb24gZmFjaWxpdHkuIFNlZSB0aGVcbiAqIHtAbGluayBndWlkZS9zY29wZSBkZXZlbG9wZXIgZ3VpZGUgb24gc2NvcGVzfS5cbiAqL1xuZnVuY3Rpb24gJFJvb3RTY29wZVByb3ZpZGVyKCkge1xuICB2YXIgVFRMID0gMTA7XG4gIHZhciAkcm9vdFNjb3BlTWluRXJyID0gbWluRXJyKCckcm9vdFNjb3BlJyk7XG4gIHZhciBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG4gIHZhciBhcHBseUFzeW5jSWQgPSBudWxsO1xuXG4gIHRoaXMuZGlnZXN0VHRsID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgVFRMID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBUVEw7XG4gIH07XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRTY29wZUNsYXNzKHBhcmVudCkge1xuICAgIGZ1bmN0aW9uIENoaWxkU2NvcGUoKSB7XG4gICAgICB0aGlzLiQkd2F0Y2hlcnMgPSB0aGlzLiQkbmV4dFNpYmxpbmcgPVxuICAgICAgICAgIHRoaXMuJCRjaGlsZEhlYWQgPSB0aGlzLiQkY2hpbGRUYWlsID0gbnVsbDtcbiAgICAgIHRoaXMuJCRsaXN0ZW5lcnMgPSB7fTtcbiAgICAgIHRoaXMuJCRsaXN0ZW5lckNvdW50ID0ge307XG4gICAgICB0aGlzLiQkd2F0Y2hlcnNDb3VudCA9IDA7XG4gICAgICB0aGlzLiRpZCA9IG5leHRVaWQoKTtcbiAgICAgIHRoaXMuJCRDaGlsZFNjb3BlID0gbnVsbDtcbiAgICB9XG4gICAgQ2hpbGRTY29wZS5wcm90b3R5cGUgPSBwYXJlbnQ7XG4gICAgcmV0dXJuIENoaWxkU2NvcGU7XG4gIH1cblxuICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsICckZXhjZXB0aW9uSGFuZGxlcicsICckcGFyc2UnLCAnJGJyb3dzZXInLFxuICAgICAgZnVuY3Rpb24oJGluamVjdG9yLCAkZXhjZXB0aW9uSGFuZGxlciwgJHBhcnNlLCAkYnJvd3Nlcikge1xuXG4gICAgZnVuY3Rpb24gZGVzdHJveUNoaWxkU2NvcGUoJGV2ZW50KSB7XG4gICAgICAgICRldmVudC5jdXJyZW50U2NvcGUuJCRkZXN0cm95ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyB0eXBlXG4gICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQSByb290IHNjb3BlIGNhbiBiZSByZXRyaWV2ZWQgdXNpbmcgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlICRyb290U2NvcGV9IGtleSBmcm9tIHRoZVxuICAgICAqIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBDaGlsZCBzY29wZXMgYXJlIGNyZWF0ZWQgdXNpbmcgdGhlXG4gICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG5ldyAkbmV3KCl9IG1ldGhvZC4gKE1vc3Qgc2NvcGVzIGFyZSBjcmVhdGVkIGF1dG9tYXRpY2FsbHkgd2hlblxuICAgICAqIGNvbXBpbGVkIEhUTUwgdGVtcGxhdGUgaXMgZXhlY3V0ZWQuKVxuICAgICAqXG4gICAgICogSGVyZSBpcyBhIHNpbXBsZSBzY29wZSBzbmlwcGV0IHRvIHNob3cgaG93IHlvdSBjYW4gaW50ZXJhY3Qgd2l0aCB0aGUgc2NvcGUuXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxmaWxlIHNyYz1cIi4vdGVzdC9uZy9yb290U2NvcGVTcGVjLmpzXCIgdGFnPVwiZG9jczFcIiAvPlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIyBJbmhlcml0YW5jZVxuICAgICAqIEEgc2NvcGUgY2FuIGluaGVyaXQgZnJvbSBhIHBhcmVudCBzY29wZSwgYXMgaW4gdGhpcyBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICAgICB2YXIgcGFyZW50ID0gJHJvb3RTY29wZTtcbiAgICAgICAgIHZhciBjaGlsZCA9IHBhcmVudC4kbmV3KCk7XG5cbiAgICAgICAgIHBhcmVudC5zYWx1dGF0aW9uID0gXCJIZWxsb1wiO1xuICAgICAgICAgZXhwZWN0KGNoaWxkLnNhbHV0YXRpb24pLnRvRXF1YWwoJ0hlbGxvJyk7XG5cbiAgICAgICAgIGNoaWxkLnNhbHV0YXRpb24gPSBcIldlbGNvbWVcIjtcbiAgICAgICAgIGV4cGVjdChjaGlsZC5zYWx1dGF0aW9uKS50b0VxdWFsKCdXZWxjb21lJyk7XG4gICAgICAgICBleHBlY3QocGFyZW50LnNhbHV0YXRpb24pLnRvRXF1YWwoJ0hlbGxvJyk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBXaGVuIGludGVyYWN0aW5nIHdpdGggYFNjb3BlYCBpbiB0ZXN0cywgYWRkaXRpb25hbCBoZWxwZXIgbWV0aG9kcyBhcmUgYXZhaWxhYmxlIG9uIHRoZVxuICAgICAqIGluc3RhbmNlcyBvZiBgU2NvcGVgIHR5cGUuIFNlZSB7QGxpbmsgbmdNb2NrLiRyb290U2NvcGUuU2NvcGUgbmdNb2NrIFNjb3BlfSBmb3IgYWRkaXRpb25hbFxuICAgICAqIGRldGFpbHMuXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uKCk+PX0gcHJvdmlkZXJzIE1hcCBvZiBzZXJ2aWNlIGZhY3Rvcnkgd2hpY2ggbmVlZCB0byBiZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWQgZm9yIHRoZSBjdXJyZW50IHNjb3BlLiBEZWZhdWx0cyB0byB7QGxpbmsgbmd9LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsICo+PX0gaW5zdGFuY2VDYWNoZSBQcm92aWRlcyBwcmUtaW5zdGFudGlhdGVkIHNlcnZpY2VzIHdoaWNoIHNob3VsZFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kL292ZXJyaWRlIHNlcnZpY2VzIHByb3ZpZGVkIGJ5IGBwcm92aWRlcnNgLiBUaGlzIGlzIGhhbmR5XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHVuaXQtdGVzdGluZyBhbmQgaGF2aW5nIHRoZSBuZWVkIHRvIG92ZXJyaWRlIGEgZGVmYXVsdFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBOZXdseSBjcmVhdGVkIHNjb3BlLlxuICAgICAqXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2NvcGUoKSB7XG4gICAgICB0aGlzLiRpZCA9IG5leHRVaWQoKTtcbiAgICAgIHRoaXMuJCRwaGFzZSA9IHRoaXMuJHBhcmVudCA9IHRoaXMuJCR3YXRjaGVycyA9XG4gICAgICAgICAgICAgICAgICAgICB0aGlzLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmcgPVxuICAgICAgICAgICAgICAgICAgICAgdGhpcy4kJGNoaWxkSGVhZCA9IHRoaXMuJCRjaGlsZFRhaWwgPSBudWxsO1xuICAgICAgdGhpcy4kcm9vdCA9IHRoaXM7XG4gICAgICB0aGlzLiQkZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICB0aGlzLiQkbGlzdGVuZXJzID0ge307XG4gICAgICB0aGlzLiQkbGlzdGVuZXJDb3VudCA9IHt9O1xuICAgICAgdGhpcy4kJHdhdGNoZXJzQ291bnQgPSAwO1xuICAgICAgdGhpcy4kJGlzb2xhdGVCaW5kaW5ncyA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkaWRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFVuaXF1ZSBzY29wZSBJRCAobW9ub3RvbmljYWxseSBpbmNyZWFzaW5nKSB1c2VmdWwgZm9yIGRlYnVnZ2luZy5cbiAgICAgKi9cblxuICAgICAvKipcbiAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHBhcmVudFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogUmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgc2NvcGUuXG4gICAgICAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkcm9vdFxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmVmZXJlbmNlIHRvIHRoZSByb290IHNjb3BlLlxuICAgICAgICovXG5cbiAgICBTY29wZS5wcm90b3R5cGUgPSB7XG4gICAgICBjb25zdHJ1Y3RvcjogU2NvcGUsXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJG5ld1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIENyZWF0ZXMgYSBuZXcgY2hpbGQge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9LlxuICAgICAgICpcbiAgICAgICAqIFRoZSBwYXJlbnQgc2NvcGUgd2lsbCBwcm9wYWdhdGUgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfSBldmVudC5cbiAgICAgICAqIFRoZSBzY29wZSBjYW4gYmUgcmVtb3ZlZCBmcm9tIHRoZSBzY29wZSBoaWVyYXJjaHkgdXNpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3kgJGRlc3Ryb3koKX0uXG4gICAgICAgKlxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3kgJGRlc3Ryb3koKX0gbXVzdCBiZSBjYWxsZWQgb24gYSBzY29wZSB3aGVuIGl0IGlzXG4gICAgICAgKiBkZXNpcmVkIGZvciB0aGUgc2NvcGUgYW5kIGl0cyBjaGlsZCBzY29wZXMgdG8gYmUgcGVybWFuZW50bHkgZGV0YWNoZWQgZnJvbSB0aGUgcGFyZW50IGFuZFxuICAgICAgICogdGh1cyBzdG9wIHBhcnRpY2lwYXRpbmcgaW4gbW9kZWwgY2hhbmdlIGRldGVjdGlvbiBhbmQgbGlzdGVuZXIgbm90aWZpY2F0aW9uIGJ5IGludm9raW5nLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNvbGF0ZSBJZiB0cnVlLCB0aGVuIHRoZSBzY29wZSBkb2VzIG5vdCBwcm90b3R5cGljYWxseSBpbmhlcml0IGZyb20gdGhlXG4gICAgICAgKiAgICAgICAgIHBhcmVudCBzY29wZS4gVGhlIHNjb3BlIGlzIGlzb2xhdGVkLCBhcyBpdCBjYW4gbm90IHNlZSBwYXJlbnQgc2NvcGUgcHJvcGVydGllcy5cbiAgICAgICAqICAgICAgICAgV2hlbiBjcmVhdGluZyB3aWRnZXRzLCBpdCBpcyB1c2VmdWwgZm9yIHRoZSB3aWRnZXQgdG8gbm90IGFjY2lkZW50YWxseSByZWFkIHBhcmVudFxuICAgICAgICogICAgICAgICBzdGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1Njb3BlfSBbcGFyZW50PXRoaXNdIFRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBgU2NvcGVgfSB0aGF0IHdpbGwgYmUgdGhlIGAkcGFyZW50YFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgbmV3bHkgY3JlYXRlZCBzY29wZS4gRGVmYXVsdHMgdG8gYHRoaXNgIHNjb3BlIGlmIG5vdCBwcm92aWRlZC5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyB1c2VkIHdoZW4gY3JlYXRpbmcgYSB0cmFuc2NsdWRlIHNjb3BlIHRvIGNvcnJlY3RseSBwbGFjZSBpdFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgc2NvcGUgaGllcmFyY2h5IHdoaWxlIG1haW50YWluaW5nIHRoZSBjb3JyZWN0IHByb3RvdHlwaWNhbFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmhlcml0YW5jZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgbmV3bHkgY3JlYXRlZCBjaGlsZCBzY29wZS5cbiAgICAgICAqXG4gICAgICAgKi9cbiAgICAgICRuZXc6IGZ1bmN0aW9uKGlzb2xhdGUsIHBhcmVudCkge1xuICAgICAgICB2YXIgY2hpbGQ7XG5cbiAgICAgICAgcGFyZW50ID0gcGFyZW50IHx8IHRoaXM7XG5cbiAgICAgICAgaWYgKGlzb2xhdGUpIHtcbiAgICAgICAgICBjaGlsZCA9IG5ldyBTY29wZSgpO1xuICAgICAgICAgIGNoaWxkLiRyb290ID0gdGhpcy4kcm9vdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPbmx5IGNyZWF0ZSBhIGNoaWxkIHNjb3BlIGNsYXNzIGlmIHNvbWVib2R5IGFza3MgZm9yIG9uZSxcbiAgICAgICAgICAvLyBidXQgY2FjaGUgaXQgdG8gYWxsb3cgdGhlIFZNIHRvIG9wdGltaXplIGxvb2t1cHMuXG4gICAgICAgICAgaWYgKCF0aGlzLiQkQ2hpbGRTY29wZSkge1xuICAgICAgICAgICAgdGhpcy4kJENoaWxkU2NvcGUgPSBjcmVhdGVDaGlsZFNjb3BlQ2xhc3ModGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkID0gbmV3IHRoaXMuJCRDaGlsZFNjb3BlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQuJHBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgY2hpbGQuJCRwcmV2U2libGluZyA9IHBhcmVudC4kJGNoaWxkVGFpbDtcbiAgICAgICAgaWYgKHBhcmVudC4kJGNoaWxkSGVhZCkge1xuICAgICAgICAgIHBhcmVudC4kJGNoaWxkVGFpbC4kJG5leHRTaWJsaW5nID0gY2hpbGQ7XG4gICAgICAgICAgcGFyZW50LiQkY2hpbGRUYWlsID0gY2hpbGQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyZW50LiQkY2hpbGRIZWFkID0gcGFyZW50LiQkY2hpbGRUYWlsID0gY2hpbGQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXaGVuIHRoZSBuZXcgc2NvcGUgaXMgbm90IGlzb2xhdGVkIG9yIHdlIGluaGVyaXQgZnJvbSBgdGhpc2AsIGFuZFxuICAgICAgICAvLyB0aGUgcGFyZW50IHNjb3BlIGlzIGRlc3Ryb3llZCwgdGhlIHByb3BlcnR5IGAkJGRlc3Ryb3llZGAgaXMgaW5oZXJpdGVkXG4gICAgICAgIC8vIHByb3RvdHlwaWNhbGx5LiBJbiBhbGwgb3RoZXIgY2FzZXMsIHRoaXMgcHJvcGVydHkgbmVlZHMgdG8gYmUgc2V0XG4gICAgICAgIC8vIHdoZW4gdGhlIHBhcmVudCBzY29wZSBpcyBkZXN0cm95ZWQuXG4gICAgICAgIC8vIFRoZSBsaXN0ZW5lciBuZWVkcyB0byBiZSBhZGRlZCBhZnRlciB0aGUgcGFyZW50IGlzIHNldFxuICAgICAgICBpZiAoaXNvbGF0ZSB8fCBwYXJlbnQgIT0gdGhpcykgY2hpbGQuJG9uKCckZGVzdHJveScsIGRlc3Ryb3lDaGlsZFNjb3BlKTtcblxuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmVnaXN0ZXJzIGEgYGxpc3RlbmVyYCBjYWxsYmFjayB0byBiZSBleGVjdXRlZCB3aGVuZXZlciB0aGUgYHdhdGNoRXhwcmVzc2lvbmAgY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiAtIFRoZSBgd2F0Y2hFeHByZXNzaW9uYCBpcyBjYWxsZWQgb24gZXZlcnkgY2FsbCB0byB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0XG4gICAgICAgKiAgICRkaWdlc3QoKX0gYW5kIHNob3VsZCByZXR1cm4gdGhlIHZhbHVlIHRoYXQgd2lsbCBiZSB3YXRjaGVkLiAoU2luY2VcbiAgICAgICAqICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IHJlcnVucyB3aGVuIGl0IGRldGVjdHMgY2hhbmdlcyB0aGVcbiAgICAgICAqICAgYHdhdGNoRXhwcmVzc2lvbmAgY2FuIGV4ZWN1dGUgbXVsdGlwbGUgdGltZXMgcGVyXG4gICAgICAgKiAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfSBhbmQgc2hvdWxkIGJlIGlkZW1wb3RlbnQuKVxuICAgICAgICogLSBUaGUgYGxpc3RlbmVyYCBpcyBjYWxsZWQgb25seSB3aGVuIHRoZSB2YWx1ZSBmcm9tIHRoZSBjdXJyZW50IGB3YXRjaEV4cHJlc3Npb25gIGFuZCB0aGVcbiAgICAgICAqICAgcHJldmlvdXMgY2FsbCB0byBgd2F0Y2hFeHByZXNzaW9uYCBhcmUgbm90IGVxdWFsICh3aXRoIHRoZSBleGNlcHRpb24gb2YgdGhlIGluaXRpYWwgcnVuLFxuICAgICAgICogICBzZWUgYmVsb3cpLiBJbmVxdWFsaXR5IGlzIGRldGVybWluZWQgYWNjb3JkaW5nIHRvIHJlZmVyZW5jZSBpbmVxdWFsaXR5LFxuICAgICAgICogICBbc3RyaWN0IGNvbXBhcmlzb25dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL09wZXJhdG9ycy9Db21wYXJpc29uX09wZXJhdG9ycylcbiAgICAgICAqICAgIHZpYSB0aGUgYCE9PWAgSmF2YXNjcmlwdCBvcGVyYXRvciwgdW5sZXNzIGBvYmplY3RFcXVhbGl0eSA9PSB0cnVlYFxuICAgICAgICogICAoc2VlIG5leHQgcG9pbnQpXG4gICAgICAgKiAtIFdoZW4gYG9iamVjdEVxdWFsaXR5ID09IHRydWVgLCBpbmVxdWFsaXR5IG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uYCBpcyBkZXRlcm1pbmVkXG4gICAgICAgKiAgIGFjY29yZGluZyB0byB0aGUge0BsaW5rIGFuZ3VsYXIuZXF1YWxzfSBmdW5jdGlvbi4gVG8gc2F2ZSB0aGUgdmFsdWUgb2YgdGhlIG9iamVjdCBmb3JcbiAgICAgICAqICAgbGF0ZXIgY29tcGFyaXNvbiwgdGhlIHtAbGluayBhbmd1bGFyLmNvcHl9IGZ1bmN0aW9uIGlzIHVzZWQuIFRoaXMgdGhlcmVmb3JlIG1lYW5zIHRoYXRcbiAgICAgICAqICAgd2F0Y2hpbmcgY29tcGxleCBvYmplY3RzIHdpbGwgaGF2ZSBhZHZlcnNlIG1lbW9yeSBhbmQgcGVyZm9ybWFuY2UgaW1wbGljYXRpb25zLlxuICAgICAgICogLSBUaGUgd2F0Y2ggYGxpc3RlbmVyYCBtYXkgY2hhbmdlIHRoZSBtb2RlbCwgd2hpY2ggbWF5IHRyaWdnZXIgb3RoZXIgYGxpc3RlbmVyYHMgdG8gZmlyZS5cbiAgICAgICAqICAgVGhpcyBpcyBhY2hpZXZlZCBieSByZXJ1bm5pbmcgdGhlIHdhdGNoZXJzIHVudGlsIG5vIGNoYW5nZXMgYXJlIGRldGVjdGVkLiBUaGUgcmVydW5cbiAgICAgICAqICAgaXRlcmF0aW9uIGxpbWl0IGlzIDEwIHRvIHByZXZlbnQgYW4gaW5maW5pdGUgbG9vcCBkZWFkbG9jay5cbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogSWYgeW91IHdhbnQgdG8gYmUgbm90aWZpZWQgd2hlbmV2ZXIge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBpcyBjYWxsZWQsXG4gICAgICAgKiB5b3UgY2FuIHJlZ2lzdGVyIGEgYHdhdGNoRXhwcmVzc2lvbmAgZnVuY3Rpb24gd2l0aCBubyBgbGlzdGVuZXJgLiAoU2luY2UgYHdhdGNoRXhwcmVzc2lvbmBcbiAgICAgICAqIGNhbiBleGVjdXRlIG11bHRpcGxlIHRpbWVzIHBlciB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3R9IGN5Y2xlIHdoZW4gYVxuICAgICAgICogY2hhbmdlIGlzIGRldGVjdGVkLCBiZSBwcmVwYXJlZCBmb3IgbXVsdGlwbGUgY2FsbHMgdG8geW91ciBsaXN0ZW5lci4pXG4gICAgICAgKlxuICAgICAgICogQWZ0ZXIgYSB3YXRjaGVyIGlzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgc2NvcGUsIHRoZSBgbGlzdGVuZXJgIGZuIGlzIGNhbGxlZCBhc3luY2hyb25vdXNseVxuICAgICAgICogKHZpYSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZXZhbEFzeW5jICRldmFsQXN5bmN9KSB0byBpbml0aWFsaXplIHRoZVxuICAgICAgICogd2F0Y2hlci4gSW4gcmFyZSBjYXNlcywgdGhpcyBpcyB1bmRlc2lyYWJsZSBiZWNhdXNlIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQgd2hlbiB0aGUgcmVzdWx0XG4gICAgICAgKiBvZiBgd2F0Y2hFeHByZXNzaW9uYCBkaWRuJ3QgY2hhbmdlLiBUbyBkZXRlY3QgdGhpcyBzY2VuYXJpbyB3aXRoaW4gdGhlIGBsaXN0ZW5lcmAgZm4sIHlvdVxuICAgICAgICogY2FuIGNvbXBhcmUgdGhlIGBuZXdWYWxgIGFuZCBgb2xkVmFsYC4gSWYgdGhlc2UgdHdvIHZhbHVlcyBhcmUgaWRlbnRpY2FsIChgPT09YCkgdGhlbiB0aGVcbiAgICAgICAqIGxpc3RlbmVyIHdhcyBjYWxsZWQgZHVlIHRvIGluaXRpYWxpemF0aW9uLlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogIyBFeGFtcGxlXG4gICAgICAgKiBgYGBqc1xuICAgICAgICAgICAvLyBsZXQncyBhc3N1bWUgdGhhdCBzY29wZSB3YXMgZGVwZW5kZW5jeSBpbmplY3RlZCBhcyB0aGUgJHJvb3RTY29wZVxuICAgICAgICAgICB2YXIgc2NvcGUgPSAkcm9vdFNjb3BlO1xuICAgICAgICAgICBzY29wZS5uYW1lID0gJ21pc2tvJztcbiAgICAgICAgICAgc2NvcGUuY291bnRlciA9IDA7XG5cbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgIHNjb3BlLiR3YXRjaCgnbmFtZScsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgIHNjb3BlLmNvdW50ZXIgPSBzY29wZS5jb3VudGVyICsgMTtcbiAgICAgICAgICAgfSk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApO1xuXG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgLy8gdGhlIGxpc3RlbmVyIGlzIGFsd2F5cyBjYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCAkZGlnZXN0IGxvb3AgYWZ0ZXIgaXQgd2FzIHJlZ2lzdGVyZWRcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7XG5cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAvLyBidXQgbm93IGl0IHdpbGwgbm90IGJlIGNhbGxlZCB1bmxlc3MgdGhlIHZhbHVlIGNoYW5nZXNcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7XG5cbiAgICAgICAgICAgc2NvcGUubmFtZSA9ICdhZGFtJztcbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgyKTtcblxuXG5cbiAgICAgICAgICAgLy8gVXNpbmcgYSBmdW5jdGlvbiBhcyBhIHdhdGNoRXhwcmVzc2lvblxuICAgICAgICAgICB2YXIgZm9vZDtcbiAgICAgICAgICAgc2NvcGUuZm9vZENvdW50ZXIgPSAwO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgIHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHZhbHVlIGJlaW5nIHdhdGNoZWQuIEl0IGlzIGNhbGxlZCBmb3IgZWFjaCB0dXJuIG9mIHRoZSAkZGlnZXN0IGxvb3BcbiAgICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIGZvb2Q7IH0sXG4gICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgY2hhbmdlIGxpc3RlbmVyLCBjYWxsZWQgd2hlbiB0aGUgdmFsdWUgcmV0dXJuZWQgZnJvbSB0aGUgYWJvdmUgZnVuY3Rpb24gY2hhbmdlc1xuICAgICAgICAgICAgIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgaWYgKCBuZXdWYWx1ZSAhPT0gb2xkVmFsdWUgKSB7XG4gICAgICAgICAgICAgICAgIC8vIE9ubHkgaW5jcmVtZW50IHRoZSBjb3VudGVyIGlmIHRoZSB2YWx1ZSBjaGFuZ2VkXG4gICAgICAgICAgICAgICAgIHNjb3BlLmZvb2RDb3VudGVyID0gc2NvcGUuZm9vZENvdW50ZXIgKyAxO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgKTtcbiAgICAgICAgICAgLy8gTm8gZGlnZXN0IGhhcyBiZWVuIHJ1biBzbyB0aGUgY291bnRlciB3aWxsIGJlIHplcm9cbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmZvb2RDb3VudGVyKS50b0VxdWFsKDApO1xuXG4gICAgICAgICAgIC8vIFJ1biB0aGUgZGlnZXN0IGJ1dCBzaW5jZSBmb29kIGhhcyBub3QgY2hhbmdlZCBjb3VudCB3aWxsIHN0aWxsIGJlIHplcm9cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMCk7XG5cbiAgICAgICAgICAgLy8gVXBkYXRlIGZvb2QgYW5kIHJ1biBkaWdlc3QuICBOb3cgdGhlIGNvdW50ZXIgd2lsbCBpbmNyZW1lbnRcbiAgICAgICAgICAgZm9vZCA9ICdjaGVlc2VidXJnZXInO1xuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5mb29kQ291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhmdW5jdGlvbigpfHN0cmluZyl9IHdhdGNoRXhwcmVzc2lvbiBFeHByZXNzaW9uIHRoYXQgaXMgZXZhbHVhdGVkIG9uIGVhY2hcbiAgICAgICAqICAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gY3ljbGUuIEEgY2hhbmdlIGluIHRoZSByZXR1cm4gdmFsdWUgdHJpZ2dlcnNcbiAgICAgICAqICAgIGEgY2FsbCB0byB0aGUgYGxpc3RlbmVyYC5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBzdHJpbmdgOiBFdmFsdWF0ZWQgYXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn1cbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGNhbGxlZCB3aXRoIGN1cnJlbnQgYHNjb3BlYCBhcyBhIHBhcmFtZXRlci5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwsIHNjb3BlKX0gbGlzdGVuZXIgQ2FsbGJhY2sgY2FsbGVkIHdoZW5ldmVyIHRoZSB2YWx1ZVxuICAgICAgICogICAgb2YgYHdhdGNoRXhwcmVzc2lvbmAgY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBuZXdWYWxgIGNvbnRhaW5zIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uYFxuICAgICAgICogICAgLSBgb2xkVmFsYCBjb250YWlucyB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgKiAgICAtIGBzY29wZWAgcmVmZXJzIHRvIHRoZSBjdXJyZW50IHNjb3BlXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBvYmplY3RFcXVhbGl0eSBDb21wYXJlIGZvciBvYmplY3QgZXF1YWxpdHkgdXNpbmcge0BsaW5rIGFuZ3VsYXIuZXF1YWxzfSBpbnN0ZWFkIG9mXG4gICAgICAgKiAgICAgY29tcGFyaW5nIGZvciByZWZlcmVuY2UgZXF1YWxpdHkuXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIGxpc3RlbmVyLlxuICAgICAgICovXG4gICAgICAkd2F0Y2g6IGZ1bmN0aW9uKHdhdGNoRXhwLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHByZXR0eVByaW50RXhwcmVzc2lvbikge1xuICAgICAgICB2YXIgZ2V0ID0gJHBhcnNlKHdhdGNoRXhwKTtcblxuICAgICAgICBpZiAoZ2V0LiQkd2F0Y2hEZWxlZ2F0ZSkge1xuICAgICAgICAgIHJldHVybiBnZXQuJCR3YXRjaERlbGVnYXRlKHRoaXMsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgZ2V0LCB3YXRjaEV4cCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcyxcbiAgICAgICAgICAgIGFycmF5ID0gc2NvcGUuJCR3YXRjaGVycyxcbiAgICAgICAgICAgIHdhdGNoZXIgPSB7XG4gICAgICAgICAgICAgIGZuOiBsaXN0ZW5lcixcbiAgICAgICAgICAgICAgbGFzdDogaW5pdFdhdGNoVmFsLFxuICAgICAgICAgICAgICBnZXQ6IGdldCxcbiAgICAgICAgICAgICAgZXhwOiBwcmV0dHlQcmludEV4cHJlc3Npb24gfHwgd2F0Y2hFeHAsXG4gICAgICAgICAgICAgIGVxOiAhIW9iamVjdEVxdWFsaXR5XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIGxhc3REaXJ0eVdhdGNoID0gbnVsbDtcblxuICAgICAgICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgICAgICAgd2F0Y2hlci5mbiA9IG5vb3A7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWFycmF5KSB7XG4gICAgICAgICAgYXJyYXkgPSBzY29wZS4kJHdhdGNoZXJzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgdXNlIHVuc2hpZnQgc2luY2Ugd2UgdXNlIGEgd2hpbGUgbG9vcCBpbiAkZGlnZXN0IGZvciBzcGVlZC5cbiAgICAgICAgLy8gdGhlIHdoaWxlIGxvb3AgcmVhZHMgaW4gcmV2ZXJzZSBvcmRlci5cbiAgICAgICAgYXJyYXkudW5zaGlmdCh3YXRjaGVyKTtcbiAgICAgICAgaW5jcmVtZW50V2F0Y2hlcnNDb3VudCh0aGlzLCAxKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZGVyZWdpc3RlcldhdGNoKCkge1xuICAgICAgICAgIGlmIChhcnJheVJlbW92ZShhcnJheSwgd2F0Y2hlcikgPj0gMCkge1xuICAgICAgICAgICAgaW5jcmVtZW50V2F0Y2hlcnNDb3VudChzY29wZSwgLTEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG4gICAgICAgIH07XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoR3JvdXBcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBIHZhcmlhbnQgb2Yge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfSB3aGVyZSBpdCB3YXRjaGVzIGFuIGFycmF5IG9mIGB3YXRjaEV4cHJlc3Npb25zYC5cbiAgICAgICAqIElmIGFueSBvbmUgZXhwcmVzc2lvbiBpbiB0aGUgY29sbGVjdGlvbiBjaGFuZ2VzIHRoZSBgbGlzdGVuZXJgIGlzIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqIC0gVGhlIGl0ZW1zIGluIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AgYXJyYXkgYXJlIG9ic2VydmVkIHZpYSBzdGFuZGFyZCAkd2F0Y2ggb3BlcmF0aW9uIGFuZCBhcmUgZXhhbWluZWQgb24gZXZlcnlcbiAgICAgICAqICAgY2FsbCB0byAkZGlnZXN0KCkgdG8gc2VlIGlmIGFueSBpdGVtcyBjaGFuZ2VzLlxuICAgICAgICogLSBUaGUgYGxpc3RlbmVyYCBpcyBjYWxsZWQgd2hlbmV2ZXIgYW55IGV4cHJlc3Npb24gaW4gdGhlIGB3YXRjaEV4cHJlc3Npb25zYCBhcnJheSBjaGFuZ2VzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZ3xGdW5jdGlvbihzY29wZSk+fSB3YXRjaEV4cHJlc3Npb25zIEFycmF5IG9mIGV4cHJlc3Npb25zIHRoYXQgd2lsbCBiZSBpbmRpdmlkdWFsbHlcbiAgICAgICAqIHdhdGNoZWQgdXNpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3VmFsdWVzLCBvbGRWYWx1ZXMsIHNjb3BlKX0gbGlzdGVuZXIgQ2FsbGJhY2sgY2FsbGVkIHdoZW5ldmVyIHRoZSByZXR1cm4gdmFsdWUgb2YgYW55XG4gICAgICAgKiAgICBleHByZXNzaW9uIGluIGB3YXRjaEV4cHJlc3Npb25zYCBjaGFuZ2VzXG4gICAgICAgKiAgICBUaGUgYG5ld1ZhbHVlc2AgYXJyYXkgY29udGFpbnMgdGhlIGN1cnJlbnQgdmFsdWVzIG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AsIHdpdGggdGhlIGluZGV4ZXMgbWF0Y2hpbmdcbiAgICAgICAqICAgIHRob3NlIG9mIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgKiAgICBhbmQgdGhlIGBvbGRWYWx1ZXNgIGFycmF5IGNvbnRhaW5zIHRoZSBwcmV2aW91cyB2YWx1ZXMgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25zYCwgd2l0aCB0aGUgaW5kZXhlcyBtYXRjaGluZ1xuICAgICAgICogICAgdGhvc2Ugb2YgYHdhdGNoRXhwcmVzc2lvbmBcbiAgICAgICAqICAgIFRoZSBgc2NvcGVgIHJlZmVycyB0byB0aGUgY3VycmVudCBzY29wZS5cbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciBhbGwgbGlzdGVuZXJzLlxuICAgICAgICovXG4gICAgICAkd2F0Y2hHcm91cDogZnVuY3Rpb24od2F0Y2hFeHByZXNzaW9ucywgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlcyA9IG5ldyBBcnJheSh3YXRjaEV4cHJlc3Npb25zLmxlbmd0aCk7XG4gICAgICAgIHZhciBuZXdWYWx1ZXMgPSBuZXcgQXJyYXkod2F0Y2hFeHByZXNzaW9ucy5sZW5ndGgpO1xuICAgICAgICB2YXIgZGVyZWdpc3RlckZucyA9IFtdO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZmlyc3RSdW4gPSB0cnVlO1xuXG4gICAgICAgIGlmICghd2F0Y2hFeHByZXNzaW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBObyBleHByZXNzaW9ucyBtZWFucyB3ZSBjYWxsIHRoZSBsaXN0ZW5lciBBU0FQXG4gICAgICAgICAgdmFyIHNob3VsZENhbGwgPSB0cnVlO1xuICAgICAgICAgIHNlbGYuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChzaG91bGRDYWxsKSBsaXN0ZW5lcihuZXdWYWx1ZXMsIG5ld1ZhbHVlcywgc2VsZik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaEdyb3VwKCkge1xuICAgICAgICAgICAgc2hvdWxkQ2FsbCA9IGZhbHNlO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2F0Y2hFeHByZXNzaW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAvLyBTcGVjaWFsIGNhc2Ugc2l6ZSBvZiBvbmVcbiAgICAgICAgICByZXR1cm4gdGhpcy4kd2F0Y2god2F0Y2hFeHByZXNzaW9uc1swXSwgZnVuY3Rpb24gd2F0Y2hHcm91cEFjdGlvbih2YWx1ZSwgb2xkVmFsdWUsIHNjb3BlKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZXNbMF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIG9sZFZhbHVlc1swXSA9IG9sZFZhbHVlO1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCAodmFsdWUgPT09IG9sZFZhbHVlKSA/IG5ld1ZhbHVlcyA6IG9sZFZhbHVlcywgc2NvcGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yRWFjaCh3YXRjaEV4cHJlc3Npb25zLCBmdW5jdGlvbihleHByLCBpKSB7XG4gICAgICAgICAgdmFyIHVud2F0Y2hGbiA9IHNlbGYuJHdhdGNoKGV4cHIsIGZ1bmN0aW9uIHdhdGNoR3JvdXBTdWJBY3Rpb24odmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZXNbaV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIG9sZFZhbHVlc1tpXSA9IG9sZFZhbHVlO1xuICAgICAgICAgICAgaWYgKCFjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCkge1xuICAgICAgICAgICAgICBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgIHNlbGYuJGV2YWxBc3luYyh3YXRjaEdyb3VwQWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBkZXJlZ2lzdGVyRm5zLnB1c2godW53YXRjaEZuKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gd2F0Y2hHcm91cEFjdGlvbigpIHtcbiAgICAgICAgICBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgaWYgKGZpcnN0UnVuKSB7XG4gICAgICAgICAgICBmaXJzdFJ1biA9IGZhbHNlO1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCBuZXdWYWx1ZXMsIHNlbGYpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaXN0ZW5lcihuZXdWYWx1ZXMsIG9sZFZhbHVlcywgc2VsZik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaEdyb3VwKCkge1xuICAgICAgICAgIHdoaWxlIChkZXJlZ2lzdGVyRm5zLmxlbmd0aCkge1xuICAgICAgICAgICAgZGVyZWdpc3RlckZucy5zaGlmdCgpKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoQ29sbGVjdGlvblxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNoYWxsb3cgd2F0Y2hlcyB0aGUgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kIGZpcmVzIHdoZW5ldmVyIGFueSBvZiB0aGUgcHJvcGVydGllcyBjaGFuZ2VcbiAgICAgICAqIChmb3IgYXJyYXlzLCB0aGlzIGltcGxpZXMgd2F0Y2hpbmcgdGhlIGFycmF5IGl0ZW1zOyBmb3Igb2JqZWN0IG1hcHMsIHRoaXMgaW1wbGllcyB3YXRjaGluZ1xuICAgICAgICogdGhlIHByb3BlcnRpZXMpLiBJZiBhIGNoYW5nZSBpcyBkZXRlY3RlZCwgdGhlIGBsaXN0ZW5lcmAgY2FsbGJhY2sgaXMgZmlyZWQuXG4gICAgICAgKlxuICAgICAgICogLSBUaGUgYG9iamAgY29sbGVjdGlvbiBpcyBvYnNlcnZlZCB2aWEgc3RhbmRhcmQgJHdhdGNoIG9wZXJhdGlvbiBhbmQgaXMgZXhhbWluZWQgb24gZXZlcnlcbiAgICAgICAqICAgY2FsbCB0byAkZGlnZXN0KCkgdG8gc2VlIGlmIGFueSBpdGVtcyBoYXZlIGJlZW4gYWRkZWQsIHJlbW92ZWQsIG9yIG1vdmVkLlxuICAgICAgICogLSBUaGUgYGxpc3RlbmVyYCBpcyBjYWxsZWQgd2hlbmV2ZXIgYW55dGhpbmcgd2l0aGluIHRoZSBgb2JqYCBoYXMgY2hhbmdlZC4gRXhhbXBsZXMgaW5jbHVkZVxuICAgICAgICogICBhZGRpbmcsIHJlbW92aW5nLCBhbmQgbW92aW5nIGl0ZW1zIGJlbG9uZ2luZyB0byBhbiBvYmplY3Qgb3IgYXJyYXkuXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqICMgRXhhbXBsZVxuICAgICAgICogYGBganNcbiAgICAgICAgICAkc2NvcGUubmFtZXMgPSBbJ2lnb3InLCAnbWF0aWFzJywgJ21pc2tvJywgJ2phbWVzJ107XG4gICAgICAgICAgJHNjb3BlLmRhdGFDb3VudCA9IDQ7XG5cbiAgICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbignbmFtZXMnLCBmdW5jdGlvbihuZXdOYW1lcywgb2xkTmFtZXMpIHtcbiAgICAgICAgICAgICRzY29wZS5kYXRhQ291bnQgPSBuZXdOYW1lcy5sZW5ndGg7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBleHBlY3QoJHNjb3BlLmRhdGFDb3VudCkudG9FcXVhbCg0KTtcbiAgICAgICAgICAkc2NvcGUuJGRpZ2VzdCgpO1xuXG4gICAgICAgICAgLy9zdGlsbCBhdCA0IC4uLiBubyBjaGFuZ2VzXG4gICAgICAgICAgZXhwZWN0KCRzY29wZS5kYXRhQ291bnQpLnRvRXF1YWwoNCk7XG5cbiAgICAgICAgICAkc2NvcGUubmFtZXMucG9wKCk7XG4gICAgICAgICAgJHNjb3BlLiRkaWdlc3QoKTtcblxuICAgICAgICAgIC8vbm93IHRoZXJlJ3MgYmVlbiBhIGNoYW5nZVxuICAgICAgICAgIGV4cGVjdCgkc2NvcGUuZGF0YUNvdW50KS50b0VxdWFsKDMpO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9uKHNjb3BlKX0gb2JqIEV2YWx1YXRlZCBhcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS4gVGhlXG4gICAgICAgKiAgICBleHByZXNzaW9uIHZhbHVlIHNob3VsZCBldmFsdWF0ZSB0byBhbiBvYmplY3Qgb3IgYW4gYXJyYXkgd2hpY2ggaXMgb2JzZXJ2ZWQgb24gZWFjaFxuICAgICAgICogICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBjeWNsZS4gQW55IHNoYWxsb3cgY2hhbmdlIHdpdGhpbiB0aGVcbiAgICAgICAqICAgIGNvbGxlY3Rpb24gd2lsbCB0cmlnZ2VyIGEgY2FsbCB0byB0aGUgYGxpc3RlbmVyYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ld0NvbGxlY3Rpb24sIG9sZENvbGxlY3Rpb24sIHNjb3BlKX0gbGlzdGVuZXIgYSBjYWxsYmFjayBmdW5jdGlvbiBjYWxsZWRcbiAgICAgICAqICAgIHdoZW4gYSBjaGFuZ2UgaXMgZGV0ZWN0ZWQuXG4gICAgICAgKiAgICAtIFRoZSBgbmV3Q29sbGVjdGlvbmAgb2JqZWN0IGlzIHRoZSBuZXdseSBtb2RpZmllZCBkYXRhIG9idGFpbmVkIGZyb20gdGhlIGBvYmpgIGV4cHJlc3Npb25cbiAgICAgICAqICAgIC0gVGhlIGBvbGRDb2xsZWN0aW9uYCBvYmplY3QgaXMgYSBjb3B5IG9mIHRoZSBmb3JtZXIgY29sbGVjdGlvbiBkYXRhLlxuICAgICAgICogICAgICBEdWUgdG8gcGVyZm9ybWFuY2UgY29uc2lkZXJhdGlvbnMsIHRoZWBvbGRDb2xsZWN0aW9uYCB2YWx1ZSBpcyBjb21wdXRlZCBvbmx5IGlmIHRoZVxuICAgICAgICogICAgICBgbGlzdGVuZXJgIGZ1bmN0aW9uIGRlY2xhcmVzIHR3byBvciBtb3JlIGFyZ3VtZW50cy5cbiAgICAgICAqICAgIC0gVGhlIGBzY29wZWAgYXJndW1lbnQgcmVmZXJzIHRvIHRoZSBjdXJyZW50IHNjb3BlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIGxpc3RlbmVyLiBXaGVuIHRoZVxuICAgICAgICogICAgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkLCB0aGUgaW50ZXJuYWwgd2F0Y2ggb3BlcmF0aW9uIGlzIHRlcm1pbmF0ZWQuXG4gICAgICAgKi9cbiAgICAgICR3YXRjaENvbGxlY3Rpb246IGZ1bmN0aW9uKG9iaiwgbGlzdGVuZXIpIHtcbiAgICAgICAgJHdhdGNoQ29sbGVjdGlvbkludGVyY2VwdG9yLiRzdGF0ZWZ1bCA9IHRydWU7XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAvLyB0aGUgY3VycmVudCB2YWx1ZSwgdXBkYXRlZCBvbiBlYWNoIGRpcnR5LWNoZWNrIHJ1blxuICAgICAgICB2YXIgbmV3VmFsdWU7XG4gICAgICAgIC8vIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSBuZXdWYWx1ZSBmcm9tIHRoZSBsYXN0IGRpcnR5LWNoZWNrIHJ1bixcbiAgICAgICAgLy8gdXBkYXRlZCB0byBtYXRjaCBuZXdWYWx1ZSBkdXJpbmcgZGlydHktY2hlY2sgcnVuXG4gICAgICAgIHZhciBvbGRWYWx1ZTtcbiAgICAgICAgLy8gYSBzaGFsbG93IGNvcHkgb2YgdGhlIG5ld1ZhbHVlIGZyb20gd2hlbiB0aGUgbGFzdCBjaGFuZ2UgaGFwcGVuZWRcbiAgICAgICAgdmFyIHZlcnlPbGRWYWx1ZTtcbiAgICAgICAgLy8gb25seSB0cmFjayB2ZXJ5T2xkVmFsdWUgaWYgdGhlIGxpc3RlbmVyIGlzIGFza2luZyBmb3IgaXRcbiAgICAgICAgdmFyIHRyYWNrVmVyeU9sZFZhbHVlID0gKGxpc3RlbmVyLmxlbmd0aCA+IDEpO1xuICAgICAgICB2YXIgY2hhbmdlRGV0ZWN0ZWQgPSAwO1xuICAgICAgICB2YXIgY2hhbmdlRGV0ZWN0b3IgPSAkcGFyc2Uob2JqLCAkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IpO1xuICAgICAgICB2YXIgaW50ZXJuYWxBcnJheSA9IFtdO1xuICAgICAgICB2YXIgaW50ZXJuYWxPYmplY3QgPSB7fTtcbiAgICAgICAgdmFyIGluaXRSdW4gPSB0cnVlO1xuICAgICAgICB2YXIgb2xkTGVuZ3RoID0gMDtcblxuICAgICAgICBmdW5jdGlvbiAkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IoX3ZhbHVlKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBfdmFsdWU7XG4gICAgICAgICAgdmFyIG5ld0xlbmd0aCwga2V5LCBib3RoTmFOLCBuZXdJdGVtLCBvbGRJdGVtO1xuXG4gICAgICAgICAgLy8gSWYgdGhlIG5ldyB2YWx1ZSBpcyB1bmRlZmluZWQsIHRoZW4gcmV0dXJuIHVuZGVmaW5lZCBhcyB0aGUgd2F0Y2ggbWF5IGJlIGEgb25lLXRpbWUgd2F0Y2hcbiAgICAgICAgICBpZiAoaXNVbmRlZmluZWQobmV3VmFsdWUpKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoIWlzT2JqZWN0KG5ld1ZhbHVlKSkgeyAvLyBpZiBwcmltaXRpdmVcbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgb2xkVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlMaWtlKG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBpbnRlcm5hbEFycmF5KSB7XG4gICAgICAgICAgICAgIC8vIHdlIGFyZSB0cmFuc2l0aW9uaW5nIGZyb20gc29tZXRoaW5nIHdoaWNoIHdhcyBub3QgYW4gYXJyYXkgaW50byBhcnJheS5cbiAgICAgICAgICAgICAgb2xkVmFsdWUgPSBpbnRlcm5hbEFycmF5O1xuICAgICAgICAgICAgICBvbGRMZW5ndGggPSBvbGRWYWx1ZS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXdMZW5ndGggPSBuZXdWYWx1ZS5sZW5ndGg7XG5cbiAgICAgICAgICAgIGlmIChvbGRMZW5ndGggIT09IG5ld0xlbmd0aCkge1xuICAgICAgICAgICAgICAvLyBpZiBsZW5ndGhzIGRvIG5vdCBtYXRjaCB3ZSBuZWVkIHRvIHRyaWdnZXIgY2hhbmdlIG5vdGlmaWNhdGlvblxuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICBvbGRWYWx1ZS5sZW5ndGggPSBvbGRMZW5ndGggPSBuZXdMZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb3B5IHRoZSBpdGVtcyB0byBvbGRWYWx1ZSBhbmQgbG9vayBmb3IgY2hhbmdlcy5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgb2xkSXRlbSA9IG9sZFZhbHVlW2ldO1xuICAgICAgICAgICAgICBuZXdJdGVtID0gbmV3VmFsdWVbaV07XG5cbiAgICAgICAgICAgICAgYm90aE5hTiA9IChvbGRJdGVtICE9PSBvbGRJdGVtKSAmJiAobmV3SXRlbSAhPT0gbmV3SXRlbSk7XG4gICAgICAgICAgICAgIGlmICghYm90aE5hTiAmJiAob2xkSXRlbSAhPT0gbmV3SXRlbSkpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICAgIG9sZFZhbHVlW2ldID0gbmV3SXRlbTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob2xkVmFsdWUgIT09IGludGVybmFsT2JqZWN0KSB7XG4gICAgICAgICAgICAgIC8vIHdlIGFyZSB0cmFuc2l0aW9uaW5nIGZyb20gc29tZXRoaW5nIHdoaWNoIHdhcyBub3QgYW4gb2JqZWN0IGludG8gb2JqZWN0LlxuICAgICAgICAgICAgICBvbGRWYWx1ZSA9IGludGVybmFsT2JqZWN0ID0ge307XG4gICAgICAgICAgICAgIG9sZExlbmd0aCA9IDA7XG4gICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb3B5IHRoZSBpdGVtcyB0byBvbGRWYWx1ZSBhbmQgbG9vayBmb3IgY2hhbmdlcy5cbiAgICAgICAgICAgIG5ld0xlbmd0aCA9IDA7XG4gICAgICAgICAgICBmb3IgKGtleSBpbiBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICBpZiAobmV3VmFsdWUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIG5ld0xlbmd0aCsrO1xuICAgICAgICAgICAgICAgIG5ld0l0ZW0gPSBuZXdWYWx1ZVtrZXldO1xuICAgICAgICAgICAgICAgIG9sZEl0ZW0gPSBvbGRWYWx1ZVtrZXldO1xuXG4gICAgICAgICAgICAgICAgaWYgKGtleSBpbiBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgYm90aE5hTiA9IChvbGRJdGVtICE9PSBvbGRJdGVtKSAmJiAobmV3SXRlbSAhPT0gbmV3SXRlbSk7XG4gICAgICAgICAgICAgICAgICBpZiAoIWJvdGhOYU4gJiYgKG9sZEl0ZW0gIT09IG5ld0l0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlW2tleV0gPSBuZXdJdGVtO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBvbGRMZW5ndGgrKztcbiAgICAgICAgICAgICAgICAgIG9sZFZhbHVlW2tleV0gPSBuZXdJdGVtO1xuICAgICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvbGRMZW5ndGggPiBuZXdMZW5ndGgpIHtcbiAgICAgICAgICAgICAgLy8gd2UgdXNlZCB0byBoYXZlIG1vcmUga2V5cywgbmVlZCB0byBmaW5kIHRoZW0gYW5kIGRlc3Ryb3kgdGhlbS5cbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgICAgZm9yIChrZXkgaW4gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW5ld1ZhbHVlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgIG9sZExlbmd0aC0tO1xuICAgICAgICAgICAgICAgICAgZGVsZXRlIG9sZFZhbHVlW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjaGFuZ2VEZXRlY3RlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uICR3YXRjaENvbGxlY3Rpb25BY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGluaXRSdW4pIHtcbiAgICAgICAgICAgIGluaXRSdW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlLCBuZXdWYWx1ZSwgc2VsZik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlLCB2ZXJ5T2xkVmFsdWUsIHNlbGYpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIG1ha2UgYSBjb3B5IGZvciB0aGUgbmV4dCB0aW1lIGEgY29sbGVjdGlvbiBpcyBjaGFuZ2VkXG4gICAgICAgICAgaWYgKHRyYWNrVmVyeU9sZFZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIWlzT2JqZWN0KG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgICAvL3ByaW1pdGl2ZVxuICAgICAgICAgICAgICB2ZXJ5T2xkVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheUxpa2UobmV3VmFsdWUpKSB7XG4gICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZSA9IG5ldyBBcnJheShuZXdWYWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld1ZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlW2ldID0gbmV3VmFsdWVbaV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGlmIG9iamVjdFxuICAgICAgICAgICAgICB2ZXJ5T2xkVmFsdWUgPSB7fTtcbiAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwobmV3VmFsdWUsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZVtrZXldID0gbmV3VmFsdWVba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy4kd2F0Y2goY2hhbmdlRGV0ZWN0b3IsICR3YXRjaENvbGxlY3Rpb25BY3Rpb24pO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3RcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBQcm9jZXNzZXMgYWxsIG9mIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlcnN9IG9mIHRoZSBjdXJyZW50IHNjb3BlIGFuZFxuICAgICAgICogaXRzIGNoaWxkcmVuLiBCZWNhdXNlIGEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXJ9J3MgbGlzdGVuZXIgY2FuIGNoYW5nZVxuICAgICAgICogdGhlIG1vZGVsLCB0aGUgYCRkaWdlc3QoKWAga2VlcHMgY2FsbGluZyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXJzfVxuICAgICAgICogdW50aWwgbm8gbW9yZSBsaXN0ZW5lcnMgYXJlIGZpcmluZy4gVGhpcyBtZWFucyB0aGF0IGl0IGlzIHBvc3NpYmxlIHRvIGdldCBpbnRvIGFuIGluZmluaXRlXG4gICAgICAgKiBsb29wLiBUaGlzIGZ1bmN0aW9uIHdpbGwgdGhyb3cgYCdNYXhpbXVtIGl0ZXJhdGlvbiBsaW1pdCBleGNlZWRlZC4nYCBpZiB0aGUgbnVtYmVyIG9mXG4gICAgICAgKiBpdGVyYXRpb25zIGV4Y2VlZHMgMTAuXG4gICAgICAgKlxuICAgICAgICogVXN1YWxseSwgeW91IGRvbid0IGNhbGwgYCRkaWdlc3QoKWAgZGlyZWN0bHkgaW5cbiAgICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDb250cm9sbGVyIGNvbnRyb2xsZXJzfSBvciBpblxuICAgICAgICoge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LlxuICAgICAgICogSW5zdGVhZCwgeW91IHNob3VsZCBjYWxsIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseSAkYXBwbHkoKX0gKHR5cGljYWxseSBmcm9tIHdpdGhpblxuICAgICAgICogYSB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUgZGlyZWN0aXZlfSksIHdoaWNoIHdpbGwgZm9yY2UgYSBgJGRpZ2VzdCgpYC5cbiAgICAgICAqXG4gICAgICAgKiBJZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuZXZlciBgJGRpZ2VzdCgpYCBpcyBjYWxsZWQsXG4gICAgICAgKiB5b3UgY2FuIHJlZ2lzdGVyIGEgYHdhdGNoRXhwcmVzc2lvbmAgZnVuY3Rpb24gd2l0aFxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfSB3aXRoIG5vIGBsaXN0ZW5lcmAuXG4gICAgICAgKlxuICAgICAgICogSW4gdW5pdCB0ZXN0cywgeW91IG1heSBuZWVkIHRvIGNhbGwgYCRkaWdlc3QoKWAgdG8gc2ltdWxhdGUgdGhlIHNjb3BlIGxpZmUgY3ljbGUuXG4gICAgICAgKlxuICAgICAgICogIyBFeGFtcGxlXG4gICAgICAgKiBgYGBqc1xuICAgICAgICAgICB2YXIgc2NvcGUgPSAuLi47XG4gICAgICAgICAgIHNjb3BlLm5hbWUgPSAnbWlza28nO1xuICAgICAgICAgICBzY29wZS5jb3VudGVyID0gMDtcblxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTtcbiAgICAgICAgICAgc2NvcGUuJHdhdGNoKCduYW1lJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgc2NvcGUuY291bnRlciA9IHNjb3BlLmNvdW50ZXIgKyAxO1xuICAgICAgICAgICB9KTtcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7XG5cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAvLyB0aGUgbGlzdGVuZXIgaXMgYWx3YXlzIGNhbGxlZCBkdXJpbmcgdGhlIGZpcnN0ICRkaWdlc3QgbG9vcCBhZnRlciBpdCB3YXMgcmVnaXN0ZXJlZFxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIC8vIGJ1dCBub3cgaXQgd2lsbCBub3QgYmUgY2FsbGVkIHVubGVzcyB0aGUgdmFsdWUgY2hhbmdlc1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICAgICBzY29wZS5uYW1lID0gJ2FkYW0nO1xuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDIpO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICovXG4gICAgICAkZGlnZXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHdhdGNoLCB2YWx1ZSwgbGFzdCxcbiAgICAgICAgICAgIHdhdGNoZXJzLFxuICAgICAgICAgICAgbGVuZ3RoLFxuICAgICAgICAgICAgZGlydHksIHR0bCA9IFRUTCxcbiAgICAgICAgICAgIG5leHQsIGN1cnJlbnQsIHRhcmdldCA9IHRoaXMsXG4gICAgICAgICAgICB3YXRjaExvZyA9IFtdLFxuICAgICAgICAgICAgbG9nSWR4LCBsb2dNc2csIGFzeW5jVGFzaztcblxuICAgICAgICBiZWdpblBoYXNlKCckZGlnZXN0Jyk7XG4gICAgICAgIC8vIENoZWNrIGZvciBjaGFuZ2VzIHRvIGJyb3dzZXIgdXJsIHRoYXQgaGFwcGVuZWQgaW4gc3luYyBiZWZvcmUgdGhlIGNhbGwgdG8gJGRpZ2VzdFxuICAgICAgICAkYnJvd3Nlci4kJGNoZWNrVXJsQ2hhbmdlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMgPT09ICRyb290U2NvcGUgJiYgYXBwbHlBc3luY0lkICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgcm9vdCBzY29wZSwgYW5kICRhcHBseUFzeW5jIGhhcyBzY2hlZHVsZWQgYSBkZWZlcnJlZCAkYXBwbHkoKSwgdGhlblxuICAgICAgICAgIC8vIGNhbmNlbCB0aGUgc2NoZWR1bGVkICRhcHBseSBhbmQgZmx1c2ggdGhlIHF1ZXVlIG9mIGV4cHJlc3Npb25zIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAgICAkYnJvd3Nlci5kZWZlci5jYW5jZWwoYXBwbHlBc3luY0lkKTtcbiAgICAgICAgICBmbHVzaEFwcGx5QXN5bmMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3REaXJ0eVdhdGNoID0gbnVsbDtcblxuICAgICAgICBkbyB7IC8vIFwid2hpbGUgZGlydHlcIiBsb29wXG4gICAgICAgICAgZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICBjdXJyZW50ID0gdGFyZ2V0O1xuXG4gICAgICAgICAgd2hpbGUgKGFzeW5jUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBhc3luY1Rhc2sgPSBhc3luY1F1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICAgIGFzeW5jVGFzay5zY29wZS4kZXZhbChhc3luY1Rhc2suZXhwcmVzc2lvbiwgYXN5bmNUYXNrLmxvY2Fscyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRyYXZlcnNlU2NvcGVzTG9vcDpcbiAgICAgICAgICBkbyB7IC8vIFwidHJhdmVyc2UgdGhlIHNjb3Blc1wiIGxvb3BcbiAgICAgICAgICAgIGlmICgod2F0Y2hlcnMgPSBjdXJyZW50LiQkd2F0Y2hlcnMpKSB7XG4gICAgICAgICAgICAgIC8vIHByb2Nlc3Mgb3VyIHdhdGNoZXNcbiAgICAgICAgICAgICAgbGVuZ3RoID0gd2F0Y2hlcnMubGVuZ3RoO1xuICAgICAgICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgd2F0Y2ggPSB3YXRjaGVyc1tsZW5ndGhdO1xuICAgICAgICAgICAgICAgICAgLy8gTW9zdCBjb21tb24gd2F0Y2hlcyBhcmUgb24gcHJpbWl0aXZlcywgaW4gd2hpY2ggY2FzZSB3ZSBjYW4gc2hvcnRcbiAgICAgICAgICAgICAgICAgIC8vIGNpcmN1aXQgaXQgd2l0aCA9PT0gb3BlcmF0b3IsIG9ubHkgd2hlbiA9PT0gZmFpbHMgZG8gd2UgdXNlIC5lcXVhbHNcbiAgICAgICAgICAgICAgICAgIGlmICh3YXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHZhbHVlID0gd2F0Y2guZ2V0KGN1cnJlbnQpKSAhPT0gKGxhc3QgPSB3YXRjaC5sYXN0KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgISh3YXRjaC5lcVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZXF1YWxzKHZhbHVlLCBsYXN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGxhc3QgPT09ICdudW1iZXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgaXNOYU4odmFsdWUpICYmIGlzTmFOKGxhc3QpKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBkaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSB3YXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICB3YXRjaC5sYXN0ID0gd2F0Y2guZXEgPyBjb3B5KHZhbHVlLCBudWxsKSA6IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgIHdhdGNoLmZuKHZhbHVlLCAoKGxhc3QgPT09IGluaXRXYXRjaFZhbCkgPyB2YWx1ZSA6IGxhc3QpLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodHRsIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nSWR4ID0gNCAtIHR0bDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghd2F0Y2hMb2dbbG9nSWR4XSkgd2F0Y2hMb2dbbG9nSWR4XSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2F0Y2hMb2dbbG9nSWR4XS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnOiBpc0Z1bmN0aW9uKHdhdGNoLmV4cCkgPyAnZm46ICcgKyAod2F0Y2guZXhwLm5hbWUgfHwgd2F0Y2guZXhwLnRvU3RyaW5nKCkpIDogd2F0Y2guZXhwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWw6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRWYWw6IGxhc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3YXRjaCA9PT0gbGFzdERpcnR5V2F0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbW9zdCByZWNlbnRseSBkaXJ0eSB3YXRjaGVyIGlzIG5vdyBjbGVhbiwgc2hvcnQgY2lyY3VpdCBzaW5jZSB0aGUgcmVtYWluaW5nIHdhdGNoZXJzXG4gICAgICAgICAgICAgICAgICAgICAgLy8gaGF2ZSBhbHJlYWR5IGJlZW4gdGVzdGVkLlxuICAgICAgICAgICAgICAgICAgICAgIGRpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWsgdHJhdmVyc2VTY29wZXNMb29wO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEluc2FuaXR5IFdhcm5pbmc6IHNjb3BlIGRlcHRoLWZpcnN0IHRyYXZlcnNhbFxuICAgICAgICAgICAgLy8geWVzLCB0aGlzIGNvZGUgaXMgYSBiaXQgY3JhenksIGJ1dCBpdCB3b3JrcyBhbmQgd2UgaGF2ZSB0ZXN0cyB0byBwcm92ZSBpdCFcbiAgICAgICAgICAgIC8vIHRoaXMgcGllY2Ugc2hvdWxkIGJlIGtlcHQgaW4gc3luYyB3aXRoIHRoZSB0cmF2ZXJzYWwgaW4gJGJyb2FkY2FzdFxuICAgICAgICAgICAgaWYgKCEobmV4dCA9ICgoY3VycmVudC4kJHdhdGNoZXJzQ291bnQgJiYgY3VycmVudC4kJGNoaWxkSGVhZCkgfHxcbiAgICAgICAgICAgICAgICAoY3VycmVudCAhPT0gdGFyZ2V0ICYmIGN1cnJlbnQuJCRuZXh0U2libGluZykpKSkge1xuICAgICAgICAgICAgICB3aGlsZSAoY3VycmVudCAhPT0gdGFyZ2V0ICYmICEobmV4dCA9IGN1cnJlbnQuJCRuZXh0U2libGluZykpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC4kcGFyZW50O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBuZXh0KSk7XG5cbiAgICAgICAgICAvLyBgYnJlYWsgdHJhdmVyc2VTY29wZXNMb29wO2AgdGFrZXMgdXMgdG8gaGVyZVxuXG4gICAgICAgICAgaWYgKChkaXJ0eSB8fCBhc3luY1F1ZXVlLmxlbmd0aCkgJiYgISh0dGwtLSkpIHtcbiAgICAgICAgICAgIGNsZWFyUGhhc2UoKTtcbiAgICAgICAgICAgIHRocm93ICRyb290U2NvcGVNaW5FcnIoJ2luZmRpZycsXG4gICAgICAgICAgICAgICAgJ3swfSAkZGlnZXN0KCkgaXRlcmF0aW9ucyByZWFjaGVkLiBBYm9ydGluZyFcXG4nICtcbiAgICAgICAgICAgICAgICAnV2F0Y2hlcnMgZmlyZWQgaW4gdGhlIGxhc3QgNSBpdGVyYXRpb25zOiB7MX0nLFxuICAgICAgICAgICAgICAgIFRUTCwgd2F0Y2hMb2cpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IHdoaWxlIChkaXJ0eSB8fCBhc3luY1F1ZXVlLmxlbmd0aCk7XG5cbiAgICAgICAgY2xlYXJQaGFzZSgpO1xuXG4gICAgICAgIHdoaWxlIChwb3N0RGlnZXN0UXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHBvc3REaWdlc3RRdWV1ZS5zaGlmdCgpKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGV2ZW50XG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95XG4gICAgICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiBzY29wZSBiZWluZyBkZXN0cm95ZWRcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEJyb2FkY2FzdGVkIHdoZW4gYSBzY29wZSBhbmQgaXRzIGNoaWxkcmVuIGFyZSBiZWluZyBkZXN0cm95ZWQuXG4gICAgICAgKlxuICAgICAgICogTm90ZSB0aGF0LCBpbiBBbmd1bGFySlMsIHRoZXJlIGlzIGFsc28gYSBgJGRlc3Ryb3lgIGpRdWVyeSBldmVudCwgd2hpY2ggY2FuIGJlIHVzZWQgdG9cbiAgICAgICAqIGNsZWFuIHVwIERPTSBiaW5kaW5ncyBiZWZvcmUgYW4gZWxlbWVudCBpcyByZW1vdmVkIGZyb20gdGhlIERPTS5cbiAgICAgICAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3lcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZW1vdmVzIHRoZSBjdXJyZW50IHNjb3BlIChhbmQgYWxsIG9mIGl0cyBjaGlsZHJlbikgZnJvbSB0aGUgcGFyZW50IHNjb3BlLiBSZW1vdmFsIGltcGxpZXNcbiAgICAgICAqIHRoYXQgY2FsbHMgdG8ge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IHdpbGwgbm8gbG9uZ2VyXG4gICAgICAgKiBwcm9wYWdhdGUgdG8gdGhlIGN1cnJlbnQgc2NvcGUgYW5kIGl0cyBjaGlsZHJlbi4gUmVtb3ZhbCBhbHNvIGltcGxpZXMgdGhhdCB0aGUgY3VycmVudFxuICAgICAgICogc2NvcGUgaXMgZWxpZ2libGUgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgYCRkZXN0cm95KClgIGlzIHVzdWFsbHkgdXNlZCBieSBkaXJlY3RpdmVzIHN1Y2ggYXNcbiAgICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgbmdSZXBlYXR9IGZvciBtYW5hZ2luZyB0aGVcbiAgICAgICAqIHVucm9sbGluZyBvZiB0aGUgbG9vcC5cbiAgICAgICAqXG4gICAgICAgKiBKdXN0IGJlZm9yZSBhIHNjb3BlIGlzIGRlc3Ryb3llZCwgYSBgJGRlc3Ryb3lgIGV2ZW50IGlzIGJyb2FkY2FzdGVkIG9uIHRoaXMgc2NvcGUuXG4gICAgICAgKiBBcHBsaWNhdGlvbiBjb2RlIGNhbiByZWdpc3RlciBhIGAkZGVzdHJveWAgZXZlbnQgaGFuZGxlciB0aGF0IHdpbGwgZ2l2ZSBpdCBhIGNoYW5jZSB0b1xuICAgICAgICogcGVyZm9ybSBhbnkgbmVjZXNzYXJ5IGNsZWFudXAuXG4gICAgICAgKlxuICAgICAgICogTm90ZSB0aGF0LCBpbiBBbmd1bGFySlMsIHRoZXJlIGlzIGFsc28gYSBgJGRlc3Ryb3lgIGpRdWVyeSBldmVudCwgd2hpY2ggY2FuIGJlIHVzZWQgdG9cbiAgICAgICAqIGNsZWFuIHVwIERPTSBiaW5kaW5ncyBiZWZvcmUgYW4gZWxlbWVudCBpcyByZW1vdmVkIGZyb20gdGhlIERPTS5cbiAgICAgICAqL1xuICAgICAgJGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBXZSBjYW4ndCBkZXN0cm95IGEgc2NvcGUgdGhhdCBoYXMgYmVlbiBhbHJlYWR5IGRlc3Ryb3llZC5cbiAgICAgICAgaWYgKHRoaXMuJCRkZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuJHBhcmVudDtcblxuICAgICAgICB0aGlzLiRicm9hZGNhc3QoJyRkZXN0cm95Jyk7XG4gICAgICAgIHRoaXMuJCRkZXN0cm95ZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmICh0aGlzID09PSAkcm9vdFNjb3BlKSB7XG4gICAgICAgICAgLy9SZW1vdmUgaGFuZGxlcnMgYXR0YWNoZWQgdG8gd2luZG93IHdoZW4gJHJvb3RTY29wZSBpcyByZW1vdmVkXG4gICAgICAgICAgJGJyb3dzZXIuJCRhcHBsaWNhdGlvbkRlc3Ryb3llZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5jcmVtZW50V2F0Y2hlcnNDb3VudCh0aGlzLCAtdGhpcy4kJHdhdGNoZXJzQ291bnQpO1xuICAgICAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gdGhpcy4kJGxpc3RlbmVyQ291bnQpIHtcbiAgICAgICAgICBkZWNyZW1lbnRMaXN0ZW5lckNvdW50KHRoaXMsIHRoaXMuJCRsaXN0ZW5lckNvdW50W2V2ZW50TmFtZV0sIGV2ZW50TmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXZlciBhbGwgdGhlIHJlZmVyZW5jZXMgdG8gcGFyZW50IHNjb3BlcyAoYWZ0ZXIgdGhpcyBjbGVhbnVwLCB0aGUgY3VycmVudCBzY29wZSBzaG91bGRcbiAgICAgICAgLy8gbm90IGJlIHJldGFpbmVkIGJ5IGFueSBvZiBvdXIgcmVmZXJlbmNlcyBhbmQgc2hvdWxkIGJlIGVsaWdpYmxlIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24pXG4gICAgICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LiQkY2hpbGRIZWFkID09IHRoaXMpIHBhcmVudC4kJGNoaWxkSGVhZCA9IHRoaXMuJCRuZXh0U2libGluZztcbiAgICAgICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuJCRjaGlsZFRhaWwgPT0gdGhpcykgcGFyZW50LiQkY2hpbGRUYWlsID0gdGhpcy4kJHByZXZTaWJsaW5nO1xuICAgICAgICBpZiAodGhpcy4kJHByZXZTaWJsaW5nKSB0aGlzLiQkcHJldlNpYmxpbmcuJCRuZXh0U2libGluZyA9IHRoaXMuJCRuZXh0U2libGluZztcbiAgICAgICAgaWYgKHRoaXMuJCRuZXh0U2libGluZykgdGhpcy4kJG5leHRTaWJsaW5nLiQkcHJldlNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmc7XG5cbiAgICAgICAgLy8gRGlzYWJsZSBsaXN0ZW5lcnMsIHdhdGNoZXJzIGFuZCBhcHBseS9kaWdlc3QgbWV0aG9kc1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gdGhpcy4kZGlnZXN0ID0gdGhpcy4kYXBwbHkgPSB0aGlzLiRldmFsQXN5bmMgPSB0aGlzLiRhcHBseUFzeW5jID0gbm9vcDtcbiAgICAgICAgdGhpcy4kb24gPSB0aGlzLiR3YXRjaCA9IHRoaXMuJHdhdGNoR3JvdXAgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5vb3A7IH07XG4gICAgICAgIHRoaXMuJCRsaXN0ZW5lcnMgPSB7fTtcblxuICAgICAgICAvLyBBbGwgb2YgdGhlIGNvZGUgYmVsb3cgaXMgYm9ndXMgY29kZSB0aGF0IHdvcmtzIGFyb3VuZCBWOCdzIG1lbW9yeSBsZWFrIHZpYSBvcHRpbWl6ZWQgY29kZVxuICAgICAgICAvLyBhbmQgaW5saW5lIGNhY2hlcy5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gc2VlOlxuICAgICAgICAvLyAtIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yMDczI2MyNlxuICAgICAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzY3OTQjaXNzdWVjb21tZW50LTM4NjQ4OTA5XG4gICAgICAgIC8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTMxMyNpc3N1ZWNvbW1lbnQtMTAzNzg0NTFcblxuICAgICAgICB0aGlzLiRwYXJlbnQgPSB0aGlzLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmcgPSB0aGlzLiQkY2hpbGRIZWFkID1cbiAgICAgICAgICAgIHRoaXMuJCRjaGlsZFRhaWwgPSB0aGlzLiRyb290ID0gdGhpcy4kJHdhdGNoZXJzID0gbnVsbDtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZXZhbFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEV4ZWN1dGVzIHRoZSBgZXhwcmVzc2lvbmAgb24gdGhlIGN1cnJlbnQgc2NvcGUgYW5kIHJldHVybnMgdGhlIHJlc3VsdC4gQW55IGV4Y2VwdGlvbnMgaW5cbiAgICAgICAqIHRoZSBleHByZXNzaW9uIGFyZSBwcm9wYWdhdGVkICh1bmNhdWdodCkuIFRoaXMgaXMgdXNlZnVsIHdoZW4gZXZhbHVhdGluZyBBbmd1bGFyXG4gICAgICAgKiBleHByZXNzaW9ucy5cbiAgICAgICAqXG4gICAgICAgKiAjIEV4YW1wbGVcbiAgICAgICAqIGBgYGpzXG4gICAgICAgICAgIHZhciBzY29wZSA9IG5nLiRyb290U2NvcGUuU2NvcGUoKTtcbiAgICAgICAgICAgc2NvcGUuYSA9IDE7XG4gICAgICAgICAgIHNjb3BlLmIgPSAyO1xuXG4gICAgICAgICAgIGV4cGVjdChzY29wZS4kZXZhbCgnYStiJykpLnRvRXF1YWwoMyk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS4kZXZhbChmdW5jdGlvbihzY29wZSl7IHJldHVybiBzY29wZS5hICsgc2NvcGUuYjsgfSkpLnRvRXF1YWwoMyk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHByZXNzaW9uIEFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZC5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBzdHJpbmdgOiBleGVjdXRlIHVzaW5nIHRoZSBydWxlcyBhcyBkZWZpbmVkIGluICB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS5cbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsob2JqZWN0KT19IGxvY2FscyBMb2NhbCB2YXJpYWJsZXMgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluIHNjb3BlLlxuICAgICAgICogQHJldHVybnMgeyp9IFRoZSByZXN1bHQgb2YgZXZhbHVhdGluZyB0aGUgZXhwcmVzc2lvbi5cbiAgICAgICAqL1xuICAgICAgJGV2YWw6IGZ1bmN0aW9uKGV4cHIsIGxvY2Fscykge1xuICAgICAgICByZXR1cm4gJHBhcnNlKGV4cHIpKHRoaXMsIGxvY2Fscyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGV2YWxBc3luY1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEV4ZWN1dGVzIHRoZSBleHByZXNzaW9uIG9uIHRoZSBjdXJyZW50IHNjb3BlIGF0IGEgbGF0ZXIgcG9pbnQgaW4gdGltZS5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgYCRldmFsQXN5bmNgIG1ha2VzIG5vIGd1YXJhbnRlZXMgYXMgdG8gd2hlbiB0aGUgYGV4cHJlc3Npb25gIHdpbGwgYmUgZXhlY3V0ZWQsIG9ubHlcbiAgICAgICAqIHRoYXQ6XG4gICAgICAgKlxuICAgICAgICogICAtIGl0IHdpbGwgZXhlY3V0ZSBhZnRlciB0aGUgZnVuY3Rpb24gdGhhdCBzY2hlZHVsZWQgdGhlIGV2YWx1YXRpb24gKHByZWZlcmFibHkgYmVmb3JlIERPTVxuICAgICAgICogICAgIHJlbmRlcmluZykuXG4gICAgICAgKiAgIC0gYXQgbGVhc3Qgb25lIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCBjeWNsZX0gd2lsbCBiZSBwZXJmb3JtZWQgYWZ0ZXJcbiAgICAgICAqICAgICBgZXhwcmVzc2lvbmAgZXhlY3V0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEFueSBleGNlcHRpb25zIGZyb20gdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZXhwcmVzc2lvbiBhcmUgZm9yd2FyZGVkIHRvIHRoZVxuICAgICAgICoge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxuICAgICAgICpcbiAgICAgICAqIF9fTm90ZTpfXyBpZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBvdXRzaWRlIG9mIGEgYCRkaWdlc3RgIGN5Y2xlLCBhIG5ldyBgJGRpZ2VzdGAgY3ljbGVcbiAgICAgICAqIHdpbGwgYmUgc2NoZWR1bGVkLiBIb3dldmVyLCBpdCBpcyBlbmNvdXJhZ2VkIHRvIGFsd2F5cyBjYWxsIGNvZGUgdGhhdCBjaGFuZ2VzIHRoZSBtb2RlbFxuICAgICAgICogZnJvbSB3aXRoaW4gYW4gYCRhcHBseWAgY2FsbC4gVGhhdCBpbmNsdWRlcyBjb2RlIGV2YWx1YXRlZCB2aWEgYCRldmFsQXN5bmNgLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KHN0cmluZ3xmdW5jdGlvbigpKT19IGV4cHJlc3Npb24gQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KG9iamVjdCk9fSBsb2NhbHMgTG9jYWwgdmFyaWFibGVzIG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpbiBzY29wZS5cbiAgICAgICAqL1xuICAgICAgJGV2YWxBc3luYzogZnVuY3Rpb24oZXhwciwgbG9jYWxzKSB7XG4gICAgICAgIC8vIGlmIHdlIGFyZSBvdXRzaWRlIG9mIGFuICRkaWdlc3QgbG9vcCBhbmQgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSB3ZSBhcmUgc2NoZWR1bGluZyBhc3luY1xuICAgICAgICAvLyB0YXNrIGFsc28gc2NoZWR1bGUgYXN5bmMgYXV0by1mbHVzaFxuICAgICAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSAmJiAhYXN5bmNRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChhc3luY1F1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFzeW5jUXVldWUucHVzaCh7c2NvcGU6IHRoaXMsIGV4cHJlc3Npb246IGV4cHIsIGxvY2FsczogbG9jYWxzfSk7XG4gICAgICB9LFxuXG4gICAgICAkJHBvc3REaWdlc3Q6IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgIHBvc3REaWdlc3RRdWV1ZS5wdXNoKGZuKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkYXBwbHlcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBgJGFwcGx5KClgIGlzIHVzZWQgdG8gZXhlY3V0ZSBhbiBleHByZXNzaW9uIGluIGFuZ3VsYXIgZnJvbSBvdXRzaWRlIG9mIHRoZSBhbmd1bGFyXG4gICAgICAgKiBmcmFtZXdvcmsuIChGb3IgZXhhbXBsZSBmcm9tIGJyb3dzZXIgRE9NIGV2ZW50cywgc2V0VGltZW91dCwgWEhSIG9yIHRoaXJkIHBhcnR5IGxpYnJhcmllcykuXG4gICAgICAgKiBCZWNhdXNlIHdlIGFyZSBjYWxsaW5nIGludG8gdGhlIGFuZ3VsYXIgZnJhbWV3b3JrIHdlIG5lZWQgdG8gcGVyZm9ybSBwcm9wZXIgc2NvcGUgbGlmZVxuICAgICAgICogY3ljbGUgb2Yge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyIGV4Y2VwdGlvbiBoYW5kbGluZ30sXG4gICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0IGV4ZWN1dGluZyB3YXRjaGVzfS5cbiAgICAgICAqXG4gICAgICAgKiAjIyBMaWZlIGN5Y2xlXG4gICAgICAgKlxuICAgICAgICogIyBQc2V1ZG8tQ29kZSBvZiBgJGFwcGx5KClgXG4gICAgICAgKiBgYGBqc1xuICAgICAgICAgICBmdW5jdGlvbiAkYXBwbHkoZXhwcikge1xuICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICByZXR1cm4gJGV2YWwoZXhwcik7XG4gICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICRyb290LiRkaWdlc3QoKTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgIH1cbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBTY29wZSdzIGAkYXBwbHkoKWAgbWV0aG9kIHRyYW5zaXRpb25zIHRocm91Z2ggdGhlIGZvbGxvd2luZyBzdGFnZXM6XG4gICAgICAgKlxuICAgICAgICogMS4gVGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIGV4ZWN1dGVkIHVzaW5nIHRoZVxuICAgICAgICogICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGV2YWwgJGV2YWwoKX0gbWV0aG9kLlxuICAgICAgICogMi4gQW55IGV4Y2VwdGlvbnMgZnJvbSB0aGUgZXhlY3V0aW9uIG9mIHRoZSBleHByZXNzaW9uIGFyZSBmb3J3YXJkZWQgdG8gdGhlXG4gICAgICAgKiAgICB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAgKiAzLiBUaGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNofSBsaXN0ZW5lcnMgYXJlIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZVxuICAgICAgICogICAgZXhwcmVzc2lvbiB3YXMgZXhlY3V0ZWQgdXNpbmcgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfSBtZXRob2QuXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KHN0cmluZ3xmdW5jdGlvbigpKT19IGV4cCBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgKlxuICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS5cbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHdpdGggY3VycmVudCBgc2NvcGVgIHBhcmFtZXRlci5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdCBvZiBldmFsdWF0aW5nIHRoZSBleHByZXNzaW9uLlxuICAgICAgICovXG4gICAgICAkYXBwbHk6IGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBiZWdpblBoYXNlKCckYXBwbHknKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy4kZXZhbChleHByKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGNsZWFyUGhhc2UoKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRhcHBseUFzeW5jXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogU2NoZWR1bGUgdGhlIGludm9jYXRpb24gb2YgJGFwcGx5IHRvIG9jY3VyIGF0IGEgbGF0ZXIgdGltZS4gVGhlIGFjdHVhbCB0aW1lIGRpZmZlcmVuY2VcbiAgICAgICAqIHZhcmllcyBhY3Jvc3MgYnJvd3NlcnMsIGJ1dCBpcyB0eXBpY2FsbHkgYXJvdW5kIH4xMCBtaWxsaXNlY29uZHMuXG4gICAgICAgKlxuICAgICAgICogVGhpcyBjYW4gYmUgdXNlZCB0byBxdWV1ZSB1cCBtdWx0aXBsZSBleHByZXNzaW9ucyB3aGljaCBuZWVkIHRvIGJlIGV2YWx1YXRlZCBpbiB0aGUgc2FtZVxuICAgICAgICogZGlnZXN0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KHN0cmluZ3xmdW5jdGlvbigpKT19IGV4cCBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgKlxuICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS5cbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHdpdGggY3VycmVudCBgc2NvcGVgIHBhcmFtZXRlci5cbiAgICAgICAqL1xuICAgICAgJGFwcGx5QXN5bmM6IGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcztcbiAgICAgICAgZXhwciAmJiBhcHBseUFzeW5jUXVldWUucHVzaCgkYXBwbHlBc3luY0V4cHJlc3Npb24pO1xuICAgICAgICBzY2hlZHVsZUFwcGx5QXN5bmMoKTtcblxuICAgICAgICBmdW5jdGlvbiAkYXBwbHlBc3luY0V4cHJlc3Npb24oKSB7XG4gICAgICAgICAgc2NvcGUuJGV2YWwoZXhwcik7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkb25cbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBMaXN0ZW5zIG9uIGV2ZW50cyBvZiBhIGdpdmVuIHR5cGUuIFNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZW1pdCAkZW1pdH0gZm9yXG4gICAgICAgKiBkaXNjdXNzaW9uIG9mIGV2ZW50IGxpZmUgY3ljbGUuXG4gICAgICAgKlxuICAgICAgICogVGhlIGV2ZW50IGxpc3RlbmVyIGZ1bmN0aW9uIGZvcm1hdCBpczogYGZ1bmN0aW9uKGV2ZW50LCBhcmdzLi4uKWAuIFRoZSBgZXZlbnRgIG9iamVjdFxuICAgICAgICogcGFzc2VkIGludG8gdGhlIGxpc3RlbmVyIGhhcyB0aGUgZm9sbG93aW5nIGF0dHJpYnV0ZXM6XG4gICAgICAgKlxuICAgICAgICogICAtIGB0YXJnZXRTY29wZWAgLSBge1Njb3BlfWA6IHRoZSBzY29wZSBvbiB3aGljaCB0aGUgZXZlbnQgd2FzIGAkZW1pdGAtZWQgb3JcbiAgICAgICAqICAgICBgJGJyb2FkY2FzdGAtZWQuXG4gICAgICAgKiAgIC0gYGN1cnJlbnRTY29wZWAgLSBge1Njb3BlfWA6IHRoZSBzY29wZSB0aGF0IGlzIGN1cnJlbnRseSBoYW5kbGluZyB0aGUgZXZlbnQuIE9uY2UgdGhlXG4gICAgICAgKiAgICAgZXZlbnQgcHJvcGFnYXRlcyB0aHJvdWdoIHRoZSBzY29wZSBoaWVyYXJjaHksIHRoaXMgcHJvcGVydHkgaXMgc2V0IHRvIG51bGwuXG4gICAgICAgKiAgIC0gYG5hbWVgIC0gYHtzdHJpbmd9YDogbmFtZSBvZiB0aGUgZXZlbnQuXG4gICAgICAgKiAgIC0gYHN0b3BQcm9wYWdhdGlvbmAgLSBge2Z1bmN0aW9uPX1gOiBjYWxsaW5nIGBzdG9wUHJvcGFnYXRpb25gIGZ1bmN0aW9uIHdpbGwgY2FuY2VsXG4gICAgICAgKiAgICAgZnVydGhlciBldmVudCBwcm9wYWdhdGlvbiAoYXZhaWxhYmxlIG9ubHkgZm9yIGV2ZW50cyB0aGF0IHdlcmUgYCRlbWl0YC1lZCkuXG4gICAgICAgKiAgIC0gYHByZXZlbnREZWZhdWx0YCAtIGB7ZnVuY3Rpb259YDogY2FsbGluZyBgcHJldmVudERlZmF1bHRgIHNldHMgYGRlZmF1bHRQcmV2ZW50ZWRgIGZsYWdcbiAgICAgICAqICAgICB0byB0cnVlLlxuICAgICAgICogICAtIGBkZWZhdWx0UHJldmVudGVkYCAtIGB7Ym9vbGVhbn1gOiB0cnVlIGlmIGBwcmV2ZW50RGVmYXVsdGAgd2FzIGNhbGxlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFdmVudCBuYW1lIHRvIGxpc3RlbiBvbi5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZXZlbnQsIC4uLmFyZ3MpfSBsaXN0ZW5lciBGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWQuXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIGxpc3RlbmVyLlxuICAgICAgICovXG4gICAgICAkb246IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBuYW1lZExpc3RlbmVycyA9IHRoaXMuJCRsaXN0ZW5lcnNbbmFtZV07XG4gICAgICAgIGlmICghbmFtZWRMaXN0ZW5lcnMpIHtcbiAgICAgICAgICB0aGlzLiQkbGlzdGVuZXJzW25hbWVdID0gbmFtZWRMaXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBuYW1lZExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblxuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXM7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpZiAoIWN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdKSB7XG4gICAgICAgICAgICBjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdKys7XG4gICAgICAgIH0gd2hpbGUgKChjdXJyZW50ID0gY3VycmVudC4kcGFyZW50KSk7XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGluZGV4T2ZMaXN0ZW5lciA9IG5hbWVkTGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgICAgIGlmIChpbmRleE9mTGlzdGVuZXIgIT09IC0xKSB7XG4gICAgICAgICAgICBuYW1lZExpc3RlbmVyc1tpbmRleE9mTGlzdGVuZXJdID0gbnVsbDtcbiAgICAgICAgICAgIGRlY3JlbWVudExpc3RlbmVyQ291bnQoc2VsZiwgMSwgbmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGVtaXRcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBEaXNwYXRjaGVzIGFuIGV2ZW50IGBuYW1lYCB1cHdhcmRzIHRocm91Z2ggdGhlIHNjb3BlIGhpZXJhcmNoeSBub3RpZnlpbmcgdGhlXG4gICAgICAgKiByZWdpc3RlcmVkIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn0gbGlzdGVuZXJzLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBldmVudCBsaWZlIGN5Y2xlIHN0YXJ0cyBhdCB0aGUgc2NvcGUgb24gd2hpY2ggYCRlbWl0YCB3YXMgY2FsbGVkLiBBbGxcbiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IGxpc3RlbmluZyBmb3IgYG5hbWVgIGV2ZW50IG9uIHRoaXMgc2NvcGUgZ2V0XG4gICAgICAgKiBub3RpZmllZC4gQWZ0ZXJ3YXJkcywgdGhlIGV2ZW50IHRyYXZlcnNlcyB1cHdhcmRzIHRvd2FyZCB0aGUgcm9vdCBzY29wZSBhbmQgY2FsbHMgYWxsXG4gICAgICAgKiByZWdpc3RlcmVkIGxpc3RlbmVycyBhbG9uZyB0aGUgd2F5LiBUaGUgZXZlbnQgd2lsbCBzdG9wIHByb3BhZ2F0aW5nIGlmIG9uZSBvZiB0aGUgbGlzdGVuZXJzXG4gICAgICAgKiBjYW5jZWxzIGl0LlxuICAgICAgICpcbiAgICAgICAqIEFueSBleGNlcHRpb24gZW1pdHRlZCBmcm9tIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSB3aWxsIGJlIHBhc3NlZFxuICAgICAgICogb250byB0aGUge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEV2ZW50IG5hbWUgdG8gZW1pdC5cbiAgICAgICAqIEBwYXJhbSB7Li4uKn0gYXJncyBPcHRpb25hbCBvbmUgb3IgbW9yZSBhcmd1bWVudHMgd2hpY2ggd2lsbCBiZSBwYXNzZWQgb250byB0aGUgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAgICogQHJldHVybiB7T2JqZWN0fSBFdmVudCBvYmplY3QgKHNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259KS5cbiAgICAgICAqL1xuICAgICAgJGVtaXQ6IGZ1bmN0aW9uKG5hbWUsIGFyZ3MpIHtcbiAgICAgICAgdmFyIGVtcHR5ID0gW10sXG4gICAgICAgICAgICBuYW1lZExpc3RlbmVycyxcbiAgICAgICAgICAgIHNjb3BlID0gdGhpcyxcbiAgICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbiA9IGZhbHNlLFxuICAgICAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIHRhcmdldFNjb3BlOiBzY29wZSxcbiAgICAgICAgICAgICAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtzdG9wUHJvcGFnYXRpb24gPSB0cnVlO30sXG4gICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZGVmYXVsdFByZXZlbnRlZDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaXN0ZW5lckFyZ3MgPSBjb25jYXQoW2V2ZW50XSwgYXJndW1lbnRzLCAxKSxcbiAgICAgICAgICAgIGksIGxlbmd0aDtcblxuICAgICAgICBkbyB7XG4gICAgICAgICAgbmFtZWRMaXN0ZW5lcnMgPSBzY29wZS4kJGxpc3RlbmVyc1tuYW1lXSB8fCBlbXB0eTtcbiAgICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBzY29wZTtcbiAgICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBuYW1lZExpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICAvLyBpZiBsaXN0ZW5lcnMgd2VyZSBkZXJlZ2lzdGVyZWQsIGRlZnJhZ21lbnQgdGhlIGFycmF5XG4gICAgICAgICAgICBpZiAoIW5hbWVkTGlzdGVuZXJzW2ldKSB7XG4gICAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICBsZW5ndGgtLTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAvL2FsbG93IGFsbCBsaXN0ZW5lcnMgYXR0YWNoZWQgdG8gdGhlIGN1cnJlbnQgc2NvcGUgdG8gcnVuXG4gICAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzW2ldLmFwcGx5KG51bGwsIGxpc3RlbmVyQXJncyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvL2lmIGFueSBsaXN0ZW5lciBvbiB0aGUgY3VycmVudCBzY29wZSBzdG9wcyBwcm9wYWdhdGlvbiwgcHJldmVudCBidWJibGluZ1xuICAgICAgICAgIGlmIChzdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vdHJhdmVyc2UgdXB3YXJkc1xuICAgICAgICAgIHNjb3BlID0gc2NvcGUuJHBhcmVudDtcbiAgICAgICAgfSB3aGlsZSAoc2NvcGUpO1xuXG4gICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGJyb2FkY2FzdFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIERpc3BhdGNoZXMgYW4gZXZlbnQgYG5hbWVgIGRvd253YXJkcyB0byBhbGwgY2hpbGQgc2NvcGVzIChhbmQgdGhlaXIgY2hpbGRyZW4pIG5vdGlmeWluZyB0aGVcbiAgICAgICAqIHJlZ2lzdGVyZWQge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSBsaXN0ZW5lcnMuXG4gICAgICAgKlxuICAgICAgICogVGhlIGV2ZW50IGxpZmUgY3ljbGUgc3RhcnRzIGF0IHRoZSBzY29wZSBvbiB3aGljaCBgJGJyb2FkY2FzdGAgd2FzIGNhbGxlZC4gQWxsXG4gICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSBsaXN0ZW5pbmcgZm9yIGBuYW1lYCBldmVudCBvbiB0aGlzIHNjb3BlIGdldFxuICAgICAgICogbm90aWZpZWQuIEFmdGVyd2FyZHMsIHRoZSBldmVudCBwcm9wYWdhdGVzIHRvIGFsbCBkaXJlY3QgYW5kIGluZGlyZWN0IHNjb3BlcyBvZiB0aGUgY3VycmVudFxuICAgICAgICogc2NvcGUgYW5kIGNhbGxzIGFsbCByZWdpc3RlcmVkIGxpc3RlbmVycyBhbG9uZyB0aGUgd2F5LiBUaGUgZXZlbnQgY2Fubm90IGJlIGNhbmNlbGVkLlxuICAgICAgICpcbiAgICAgICAqIEFueSBleGNlcHRpb24gZW1pdHRlZCBmcm9tIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSB3aWxsIGJlIHBhc3NlZFxuICAgICAgICogb250byB0aGUge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEV2ZW50IG5hbWUgdG8gYnJvYWRjYXN0LlxuICAgICAgICogQHBhcmFtIHsuLi4qfSBhcmdzIE9wdGlvbmFsIG9uZSBvciBtb3JlIGFyZ3VtZW50cyB3aGljaCB3aWxsIGJlIHBhc3NlZCBvbnRvIHRoZSBldmVudCBsaXN0ZW5lcnMuXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEV2ZW50IG9iamVjdCwgc2VlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn1cbiAgICAgICAqL1xuICAgICAgJGJyb2FkY2FzdDogZnVuY3Rpb24obmFtZSwgYXJncykge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcyxcbiAgICAgICAgICAgIGN1cnJlbnQgPSB0YXJnZXQsXG4gICAgICAgICAgICBuZXh0ID0gdGFyZ2V0LFxuICAgICAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIHRhcmdldFNjb3BlOiB0YXJnZXQsXG4gICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBldmVudC5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZGVmYXVsdFByZXZlbnRlZDogZmFsc2VcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgaWYgKCF0YXJnZXQuJCRsaXN0ZW5lckNvdW50W25hbWVdKSByZXR1cm4gZXZlbnQ7XG5cbiAgICAgICAgdmFyIGxpc3RlbmVyQXJncyA9IGNvbmNhdChbZXZlbnRdLCBhcmd1bWVudHMsIDEpLFxuICAgICAgICAgICAgbGlzdGVuZXJzLCBpLCBsZW5ndGg7XG5cbiAgICAgICAgLy9kb3duIHdoaWxlIHlvdSBjYW4sIHRoZW4gdXAgYW5kIG5leHQgc2libGluZyBvciB1cCBhbmQgbmV4dCBzaWJsaW5nIHVudGlsIGJhY2sgYXQgcm9vdFxuICAgICAgICB3aGlsZSAoKGN1cnJlbnQgPSBuZXh0KSkge1xuICAgICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IGN1cnJlbnQ7XG4gICAgICAgICAgbGlzdGVuZXJzID0gY3VycmVudC4kJGxpc3RlbmVyc1tuYW1lXSB8fCBbXTtcbiAgICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vIGlmIGxpc3RlbmVycyB3ZXJlIGRlcmVnaXN0ZXJlZCwgZGVmcmFnbWVudCB0aGUgYXJyYXlcbiAgICAgICAgICAgIGlmICghbGlzdGVuZXJzW2ldKSB7XG4gICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkobnVsbCwgbGlzdGVuZXJBcmdzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSW5zYW5pdHkgV2FybmluZzogc2NvcGUgZGVwdGgtZmlyc3QgdHJhdmVyc2FsXG4gICAgICAgICAgLy8geWVzLCB0aGlzIGNvZGUgaXMgYSBiaXQgY3JhenksIGJ1dCBpdCB3b3JrcyBhbmQgd2UgaGF2ZSB0ZXN0cyB0byBwcm92ZSBpdCFcbiAgICAgICAgICAvLyB0aGlzIHBpZWNlIHNob3VsZCBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGUgdHJhdmVyc2FsIGluICRkaWdlc3RcbiAgICAgICAgICAvLyAodGhvdWdoIGl0IGRpZmZlcnMgZHVlIHRvIGhhdmluZyB0aGUgZXh0cmEgY2hlY2sgZm9yICQkbGlzdGVuZXJDb3VudClcbiAgICAgICAgICBpZiAoIShuZXh0ID0gKChjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSAmJiBjdXJyZW50LiQkY2hpbGRIZWFkKSB8fFxuICAgICAgICAgICAgICAoY3VycmVudCAhPT0gdGFyZ2V0ICYmIGN1cnJlbnQuJCRuZXh0U2libGluZykpKSkge1xuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnQgIT09IHRhcmdldCAmJiAhKG5leHQgPSBjdXJyZW50LiQkbmV4dFNpYmxpbmcpKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgJHJvb3RTY29wZSA9IG5ldyBTY29wZSgpO1xuXG4gICAgLy9UaGUgaW50ZXJuYWwgcXVldWVzLiBFeHBvc2UgdGhlbSBvbiB0aGUgJHJvb3RTY29wZSBmb3IgZGVidWdnaW5nL3Rlc3RpbmcgcHVycG9zZXMuXG4gICAgdmFyIGFzeW5jUXVldWUgPSAkcm9vdFNjb3BlLiQkYXN5bmNRdWV1ZSA9IFtdO1xuICAgIHZhciBwb3N0RGlnZXN0UXVldWUgPSAkcm9vdFNjb3BlLiQkcG9zdERpZ2VzdFF1ZXVlID0gW107XG4gICAgdmFyIGFwcGx5QXN5bmNRdWV1ZSA9ICRyb290U2NvcGUuJCRhcHBseUFzeW5jUXVldWUgPSBbXTtcblxuICAgIHJldHVybiAkcm9vdFNjb3BlO1xuXG5cbiAgICBmdW5jdGlvbiBiZWdpblBoYXNlKHBoYXNlKSB7XG4gICAgICBpZiAoJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgIHRocm93ICRyb290U2NvcGVNaW5FcnIoJ2lucHJvZycsICd7MH0gYWxyZWFkeSBpbiBwcm9ncmVzcycsICRyb290U2NvcGUuJCRwaGFzZSk7XG4gICAgICB9XG5cbiAgICAgICRyb290U2NvcGUuJCRwaGFzZSA9IHBoYXNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFyUGhhc2UoKSB7XG4gICAgICAkcm9vdFNjb3BlLiQkcGhhc2UgPSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluY3JlbWVudFdhdGNoZXJzQ291bnQoY3VycmVudCwgY291bnQpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgY3VycmVudC4kJHdhdGNoZXJzQ291bnQgKz0gY291bnQ7XG4gICAgICB9IHdoaWxlICgoY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlY3JlbWVudExpc3RlbmVyQ291bnQoY3VycmVudCwgY291bnQsIG5hbWUpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0gLT0gY291bnQ7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdID09PSAwKSB7XG4gICAgICAgICAgZGVsZXRlIGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlICgoY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGZ1bmN0aW9uIHVzZWQgYXMgYW4gaW5pdGlhbCB2YWx1ZSBmb3Igd2F0Y2hlcnMuXG4gICAgICogYmVjYXVzZSBpdCdzIHVuaXF1ZSB3ZSBjYW4gZWFzaWx5IHRlbGwgaXQgYXBhcnQgZnJvbSBvdGhlciB2YWx1ZXNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0V2F0Y2hWYWwoKSB7fVxuXG4gICAgZnVuY3Rpb24gZmx1c2hBcHBseUFzeW5jKCkge1xuICAgICAgd2hpbGUgKGFwcGx5QXN5bmNRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhcHBseUFzeW5jUXVldWUuc2hpZnQoKSgpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFwcGx5QXN5bmNJZCA9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NoZWR1bGVBcHBseUFzeW5jKCkge1xuICAgICAgaWYgKGFwcGx5QXN5bmNJZCA9PT0gbnVsbCkge1xuICAgICAgICBhcHBseUFzeW5jSWQgPSAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseShmbHVzaEFwcGx5QXN5bmMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1dO1xufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICogUHJpdmF0ZSBzZXJ2aWNlIHRvIHNhbml0aXplIHVyaXMgZm9yIGxpbmtzIGFuZCBpbWFnZXMuIFVzZWQgYnkgJGNvbXBpbGUgYW5kICRzYW5pdGl6ZS5cbiAqL1xuZnVuY3Rpb24gJCRTYW5pdGl6ZVVyaVByb3ZpZGVyKCkge1xuICB2YXIgYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSAvXlxccyooaHR0cHM/fGZ0cHxtYWlsdG98dGVsfGZpbGUpOi8sXG4gICAgaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gL15cXHMqKChodHRwcz98ZnRwfGZpbGV8YmxvYik6fGRhdGE6aW1hZ2VcXC8pLztcblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHJpZXZlcyBvciBvdmVycmlkZXMgdGhlIGRlZmF1bHQgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCBmb3Igd2hpdGVsaXN0aW5nIG9mIHNhZmVcbiAgICogdXJscyBkdXJpbmcgYVtocmVmXSBzYW5pdGl6YXRpb24uXG4gICAqXG4gICAqIFRoZSBzYW5pdGl6YXRpb24gaXMgYSBzZWN1cml0eSBtZWFzdXJlIGFpbWVkIGF0IHByZXZlbnQgWFNTIGF0dGFja3MgdmlhIGh0bWwgbGlua3MuXG4gICAqXG4gICAqIEFueSB1cmwgYWJvdXQgdG8gYmUgYXNzaWduZWQgdG8gYVtocmVmXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvXG4gICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdGBcbiAgICogcmVndWxhciBleHByZXNzaW9uLiBJZiBhIG1hdGNoIGlzIGZvdW5kLCB0aGUgb3JpZ2luYWwgdXJsIGlzIHdyaXR0ZW4gaW50byB0aGUgZG9tLiBPdGhlcndpc2UsXG4gICAqIHRoZSBhYnNvbHV0ZSB1cmwgaXMgcHJlZml4ZWQgd2l0aCBgJ3Vuc2FmZTonYCBzdHJpbmcgYW5kIG9ubHkgdGhlbiBpcyBpdCB3cml0dGVuIGludG8gdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWdFeHA9fSByZWdleHAgTmV3IHJlZ2V4cCB0byB3aGl0ZWxpc3QgdXJscyB3aXRoLlxuICAgKiBAcmV0dXJucyB7UmVnRXhwfG5nLiRjb21waWxlUHJvdmlkZXJ9IEN1cnJlbnQgUmVnRXhwIGlmIGNhbGxlZCB3aXRob3V0IHZhbHVlIG9yIHNlbGYgZm9yXG4gICAqICAgIGNoYWluaW5nIG90aGVyd2lzZS5cbiAgICovXG4gIHRoaXMuYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSBmdW5jdGlvbihyZWdleHApIHtcbiAgICBpZiAoaXNEZWZpbmVkKHJlZ2V4cCkpIHtcbiAgICAgIGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gcmVnZXhwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdDtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZVxuICAgKiB1cmxzIGR1cmluZyBpbWdbc3JjXSBzYW5pdGl6YXRpb24uXG4gICAqXG4gICAqIFRoZSBzYW5pdGl6YXRpb24gaXMgYSBzZWN1cml0eSBtZWFzdXJlIGFpbWVkIGF0IHByZXZlbnQgWFNTIGF0dGFja3MgdmlhIGh0bWwgbGlua3MuXG4gICAqXG4gICAqIEFueSB1cmwgYWJvdXQgdG8gYmUgYXNzaWduZWQgdG8gaW1nW3NyY10gdmlhIGRhdGEtYmluZGluZyBpcyBmaXJzdCBub3JtYWxpemVkIGFuZCB0dXJuZWQgaW50b1xuICAgKiBhbiBhYnNvbHV0ZSB1cmwuIEFmdGVyd2FyZHMsIHRoZSB1cmwgaXMgbWF0Y2hlZCBhZ2FpbnN0IHRoZSBgaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0YFxuICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSxcbiAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguXG4gICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3JcbiAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLlxuICAgKi9cbiAgdGhpcy5pbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSBmdW5jdGlvbihyZWdleHApIHtcbiAgICBpZiAoaXNEZWZpbmVkKHJlZ2V4cCkpIHtcbiAgICAgIGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IHJlZ2V4cDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0O1xuICB9O1xuXG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBzYW5pdGl6ZVVyaSh1cmksIGlzSW1hZ2UpIHtcbiAgICAgIHZhciByZWdleCA9IGlzSW1hZ2UgPyBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgOiBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdDtcbiAgICAgIHZhciBub3JtYWxpemVkVmFsO1xuICAgICAgbm9ybWFsaXplZFZhbCA9IHVybFJlc29sdmUodXJpKS5ocmVmO1xuICAgICAgaWYgKG5vcm1hbGl6ZWRWYWwgIT09ICcnICYmICFub3JtYWxpemVkVmFsLm1hdGNoKHJlZ2V4KSkge1xuICAgICAgICByZXR1cm4gJ3Vuc2FmZTonICsgbm9ybWFsaXplZFZhbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1cmk7XG4gICAgfTtcbiAgfTtcbn1cblxuLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICogICAgIEFueSBjb21taXRzIHRvIHRoaXMgZmlsZSBzaG91bGQgYmUgcmV2aWV3ZWQgd2l0aCBzZWN1cml0eSBpbiBtaW5kLiAgKlxuICogICBDaGFuZ2VzIHRvIHRoaXMgZmlsZSBjYW4gcG90ZW50aWFsbHkgY3JlYXRlIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4gKlxuICogICAgICAgICAgQW4gYXBwcm92YWwgZnJvbSAyIENvcmUgbWVtYmVycyB3aXRoIGhpc3Rvcnkgb2YgbW9kaWZ5aW5nICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBmaWxlIGlzIHJlcXVpcmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogIERvZXMgdGhlIGNoYW5nZSBzb21laG93IGFsbG93IGZvciBhcmJpdHJhcnkgamF2YXNjcmlwdCB0byBiZSBleGVjdXRlZD8gKlxuICogICAgT3IgYWxsb3dzIGZvciBzb21lb25lIHRvIGNoYW5nZSB0aGUgcHJvdG90eXBlIG9mIGJ1aWx0LWluIG9iamVjdHM/ICAgKlxuICogICAgIE9yIGdpdmVzIHVuZGVzaXJlZCBhY2Nlc3MgdG8gdmFyaWFibGVzIGxpa2VzIGRvY3VtZW50IG9yIHdpbmRvdz8gICAgKlxuICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKi9cblxudmFyICRzY2VNaW5FcnIgPSBtaW5FcnIoJyRzY2UnKTtcblxudmFyIFNDRV9DT05URVhUUyA9IHtcbiAgSFRNTDogJ2h0bWwnLFxuICBDU1M6ICdjc3MnLFxuICBVUkw6ICd1cmwnLFxuICAvLyBSRVNPVVJDRV9VUkwgaXMgYSBzdWJ0eXBlIG9mIFVSTCB1c2VkIGluIGNvbnRleHRzIHdoZXJlIGEgcHJpdmlsZWdlZCByZXNvdXJjZSBpcyBzb3VyY2VkIGZyb20gYVxuICAvLyB1cmwuICAoZS5nLiBuZy1pbmNsdWRlLCBzY3JpcHQgc3JjLCB0ZW1wbGF0ZVVybClcbiAgUkVTT1VSQ0VfVVJMOiAncmVzb3VyY2VVcmwnLFxuICBKUzogJ2pzJ1xufTtcblxuLy8gSGVscGVyIGZ1bmN0aW9ucyBmb2xsb3cuXG5cbmZ1bmN0aW9uIGFkanVzdE1hdGNoZXIobWF0Y2hlcikge1xuICBpZiAobWF0Y2hlciA9PT0gJ3NlbGYnKSB7XG4gICAgcmV0dXJuIG1hdGNoZXI7XG4gIH0gZWxzZSBpZiAoaXNTdHJpbmcobWF0Y2hlcikpIHtcbiAgICAvLyBTdHJpbmdzIG1hdGNoIGV4YWN0bHkgZXhjZXB0IGZvciAyIHdpbGRjYXJkcyAtICcqJyBhbmQgJyoqJy5cbiAgICAvLyAnKicgbWF0Y2hlcyBhbnkgY2hhcmFjdGVyIGV4Y2VwdCB0aG9zZSBmcm9tIHRoZSBzZXQgJzovLj8mJy5cbiAgICAvLyAnKionIG1hdGNoZXMgYW55IGNoYXJhY3RlciAobGlrZSAuKiBpbiBhIFJlZ0V4cCkuXG4gICAgLy8gTW9yZSB0aGFuIDIgKidzIHJhaXNlcyBhbiBlcnJvciBhcyBpdCdzIGlsbCBkZWZpbmVkLlxuICAgIGlmIChtYXRjaGVyLmluZGV4T2YoJyoqKicpID4gLTEpIHtcbiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2l3Y2FyZCcsXG4gICAgICAgICAgJ0lsbGVnYWwgc2VxdWVuY2UgKioqIGluIHN0cmluZyBtYXRjaGVyLiAgU3RyaW5nOiB7MH0nLCBtYXRjaGVyKTtcbiAgICB9XG4gICAgbWF0Y2hlciA9IGVzY2FwZUZvclJlZ2V4cChtYXRjaGVyKS5cbiAgICAgICAgICAgICAgICAgIHJlcGxhY2UoJ1xcXFwqXFxcXConLCAnLionKS5cbiAgICAgICAgICAgICAgICAgIHJlcGxhY2UoJ1xcXFwqJywgJ1teOi8uPyY7XSonKTtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBtYXRjaGVyICsgJyQnKTtcbiAgfSBlbHNlIGlmIChpc1JlZ0V4cChtYXRjaGVyKSkge1xuICAgIC8vIFRoZSBvbmx5IG90aGVyIHR5cGUgb2YgbWF0Y2hlciBhbGxvd2VkIGlzIGEgUmVnZXhwLlxuICAgIC8vIE1hdGNoIGVudGlyZSBVUkwgLyBkaXNhbGxvdyBwYXJ0aWFsIG1hdGNoZXMuXG4gICAgLy8gRmxhZ3MgYXJlIHJlc2V0IChpLmUuIG5vIGdsb2JhbCwgaWdub3JlQ2FzZSBvciBtdWx0aWxpbmUpXG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgbWF0Y2hlci5zb3VyY2UgKyAnJCcpO1xuICB9IGVsc2Uge1xuICAgIHRocm93ICRzY2VNaW5FcnIoJ2ltYXRjaGVyJyxcbiAgICAgICAgJ01hdGNoZXJzIG1heSBvbmx5IGJlIFwic2VsZlwiLCBzdHJpbmcgcGF0dGVybnMgb3IgUmVnRXhwIG9iamVjdHMnKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGFkanVzdE1hdGNoZXJzKG1hdGNoZXJzKSB7XG4gIHZhciBhZGp1c3RlZE1hdGNoZXJzID0gW107XG4gIGlmIChpc0RlZmluZWQobWF0Y2hlcnMpKSB7XG4gICAgZm9yRWFjaChtYXRjaGVycywgZnVuY3Rpb24obWF0Y2hlcikge1xuICAgICAgYWRqdXN0ZWRNYXRjaGVycy5wdXNoKGFkanVzdE1hdGNoZXIobWF0Y2hlcikpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBhZGp1c3RlZE1hdGNoZXJzO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRzY2VEZWxlZ2F0ZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBgJHNjZURlbGVnYXRlYCBpcyBhIHNlcnZpY2UgdGhhdCBpcyB1c2VkIGJ5IHRoZSBgJHNjZWAgc2VydmljZSB0byBwcm92aWRlIHtAbGluayBuZy4kc2NlIFN0cmljdFxuICogQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0gc2VydmljZXMgdG8gQW5ndWxhckpTLlxuICpcbiAqIFR5cGljYWxseSwgeW91IHdvdWxkIGNvbmZpZ3VyZSBvciBvdmVycmlkZSB0aGUge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSAkc2NlRGVsZWdhdGV9IGluc3RlYWQgb2ZcbiAqIHRoZSBgJHNjZWAgc2VydmljZSB0byBjdXN0b21pemUgdGhlIHdheSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyB3b3JrcyBpbiBBbmd1bGFySlMuICBUaGlzIGlzXG4gKiBiZWNhdXNlLCB3aGlsZSB0aGUgYCRzY2VgIHByb3ZpZGVzIG51bWVyb3VzIHNob3J0aGFuZCBtZXRob2RzLCBldGMuLCB5b3UgcmVhbGx5IG9ubHkgbmVlZCB0b1xuICogb3ZlcnJpZGUgMyBjb3JlIGZ1bmN0aW9ucyAoYHRydXN0QXNgLCBgZ2V0VHJ1c3RlZGAgYW5kIGB2YWx1ZU9mYCkgdG8gcmVwbGFjZSB0aGUgd2F5IHRoaW5nc1xuICogd29yayBiZWNhdXNlIGAkc2NlYCBkZWxlZ2F0ZXMgdG8gYCRzY2VEZWxlZ2F0ZWAgZm9yIHRoZXNlIG9wZXJhdGlvbnMuXG4gKlxuICogUmVmZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyICRzY2VEZWxlZ2F0ZVByb3ZpZGVyfSB0byBjb25maWd1cmUgdGhpcyBzZXJ2aWNlLlxuICpcbiAqIFRoZSBkZWZhdWx0IGluc3RhbmNlIG9mIGAkc2NlRGVsZWdhdGVgIHNob3VsZCB3b3JrIG91dCBvZiB0aGUgYm94IHdpdGggbGl0dGxlIHBhaW4uICBXaGlsZSB5b3VcbiAqIGNhbiBvdmVycmlkZSBpdCBjb21wbGV0ZWx5IHRvIGNoYW5nZSB0aGUgYmVoYXZpb3Igb2YgYCRzY2VgLCB0aGUgY29tbW9uIGNhc2Ugd291bGRcbiAqIGludm9sdmUgY29uZmlndXJpbmcgdGhlIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciAkc2NlRGVsZWdhdGVQcm92aWRlcn0gaW5zdGVhZCBieSBzZXR0aW5nXG4gKiB5b3VyIG93biB3aGl0ZWxpc3RzIGFuZCBibGFja2xpc3RzIGZvciB0cnVzdGluZyBVUkxzIHVzZWQgZm9yIGxvYWRpbmcgQW5ndWxhckpTIHJlc291cmNlcyBzdWNoIGFzXG4gKiB0ZW1wbGF0ZXMuICBSZWZlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3RcbiAqICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0fSBhbmQge0BsaW5rXG4gKiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdCAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybEJsYWNrbGlzdH1cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHNjZURlbGVnYXRlUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoZSBgJHNjZURlbGVnYXRlUHJvdmlkZXJgIHByb3ZpZGVyIGFsbG93cyBkZXZlbG9wZXJzIHRvIGNvbmZpZ3VyZSB0aGUge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVxuICogJHNjZURlbGVnYXRlfSBzZXJ2aWNlLiAgVGhpcyBhbGxvd3Mgb25lIHRvIGdldC9zZXQgdGhlIHdoaXRlbGlzdHMgYW5kIGJsYWNrbGlzdHMgdXNlZCB0byBlbnN1cmVcbiAqIHRoYXQgdGhlIFVSTHMgdXNlZCBmb3Igc291cmNpbmcgQW5ndWxhciB0ZW1wbGF0ZXMgYXJlIHNhZmUuICBSZWZlciB7QGxpbmtcbiAqIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0ICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0fSBhbmRcbiAqIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdCAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybEJsYWNrbGlzdH1cbiAqXG4gKiBGb3IgdGhlIGdlbmVyYWwgZGV0YWlscyBhYm91dCB0aGlzIHNlcnZpY2UgaW4gQW5ndWxhciwgcmVhZCB0aGUgbWFpbiBwYWdlIGZvciB7QGxpbmsgbmcuJHNjZVxuICogU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSl9LlxuICpcbiAqICoqRXhhbXBsZSoqOiAgQ29uc2lkZXIgdGhlIGZvbGxvd2luZyBjYXNlLiA8YSBuYW1lPVwiZXhhbXBsZVwiPjwvYT5cbiAqXG4gKiAtIHlvdXIgYXBwIGlzIGhvc3RlZCBhdCB1cmwgYGh0dHA6Ly9teWFwcC5leGFtcGxlLmNvbS9gXG4gKiAtIGJ1dCBzb21lIG9mIHlvdXIgdGVtcGxhdGVzIGFyZSBob3N0ZWQgb24gb3RoZXIgZG9tYWlucyB5b3UgY29udHJvbCBzdWNoIGFzXG4gKiAgIGBodHRwOi8vc3J2MDEuYXNzZXRzLmV4YW1wbGUuY29tL2AswqAgYGh0dHA6Ly9zcnYwMi5hc3NldHMuZXhhbXBsZS5jb20vYCwgZXRjLlxuICogLSBhbmQgeW91IGhhdmUgYW4gb3BlbiByZWRpcmVjdCBhdCBgaHR0cDovL215YXBwLmV4YW1wbGUuY29tL2NsaWNrVGhydT8uLi5gLlxuICpcbiAqIEhlcmUgaXMgd2hhdCBhIHNlY3VyZSBjb25maWd1cmF0aW9uIGZvciB0aGlzIHNjZW5hcmlvIG1pZ2h0IGxvb2sgbGlrZTpcbiAqXG4gKiBgYGBcbiAqICBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbXSkuY29uZmlnKGZ1bmN0aW9uKCRzY2VEZWxlZ2F0ZVByb3ZpZGVyKSB7XG4gKiAgICAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybFdoaXRlbGlzdChbXG4gKiAgICAgIC8vIEFsbG93IHNhbWUgb3JpZ2luIHJlc291cmNlIGxvYWRzLlxuICogICAgICAnc2VsZicsXG4gKiAgICAgIC8vIEFsbG93IGxvYWRpbmcgZnJvbSBvdXIgYXNzZXRzIGRvbWFpbi4gIE5vdGljZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuICogYW5kICoqLlxuICogICAgICAnaHR0cDovL3NydiouYXNzZXRzLmV4YW1wbGUuY29tLyoqJ1xuICogICAgXSk7XG4gKlxuICogICAgLy8gVGhlIGJsYWNrbGlzdCBvdmVycmlkZXMgdGhlIHdoaXRlbGlzdCBzbyB0aGUgb3BlbiByZWRpcmVjdCBoZXJlIGlzIGJsb2NrZWQuXG4gKiAgICAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybEJsYWNrbGlzdChbXG4gKiAgICAgICdodHRwOi8vbXlhcHAuZXhhbXBsZS5jb20vY2xpY2tUaHJ1KionXG4gKiAgICBdKTtcbiAqICB9KTtcbiAqIGBgYFxuICovXG5cbmZ1bmN0aW9uICRTY2VEZWxlZ2F0ZVByb3ZpZGVyKCkge1xuICB0aGlzLlNDRV9DT05URVhUUyA9IFNDRV9DT05URVhUUztcblxuICAvLyBSZXNvdXJjZSBVUkxzIGNhbiBhbHNvIGJlIHRydXN0ZWQgYnkgcG9saWN5LlxuICB2YXIgcmVzb3VyY2VVcmxXaGl0ZWxpc3QgPSBbJ3NlbGYnXSxcbiAgICAgIHJlc291cmNlVXJsQmxhY2tsaXN0ID0gW107XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3RcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheT19IHdoaXRlbGlzdCBXaGVuIHByb3ZpZGVkLCByZXBsYWNlcyB0aGUgcmVzb3VyY2VVcmxXaGl0ZWxpc3Qgd2l0aCB0aGUgdmFsdWVcbiAgICogICAgIHByb3ZpZGVkLiAgVGhpcyBtdXN0IGJlIGFuIGFycmF5IG9yIG51bGwuICBBIHNuYXBzaG90IG9mIHRoaXMgYXJyYXkgaXMgdXNlZCBzbyBmdXJ0aGVyXG4gICAqICAgICBjaGFuZ2VzIHRvIHRoZSBhcnJheSBhcmUgaWdub3JlZC5cbiAgICpcbiAgICogICAgIEZvbGxvdyB7QGxpbmsgbmcuJHNjZSNyZXNvdXJjZVVybFBhdHRlcm5JdGVtIHRoaXMgbGlua30gZm9yIGEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW1zXG4gICAqICAgICBhbGxvd2VkIGluIHRoaXMgYXJyYXkuXG4gICAqXG4gICAqICAgICBOb3RlOiAqKmFuIGVtcHR5IHdoaXRlbGlzdCBhcnJheSB3aWxsIGJsb2NrIGFsbCBVUkxzKiohXG4gICAqXG4gICAqIEByZXR1cm4ge0FycmF5fSB0aGUgY3VycmVudGx5IHNldCB3aGl0ZWxpc3QgYXJyYXkuXG4gICAqXG4gICAqIFRoZSAqKmRlZmF1bHQgdmFsdWUqKiB3aGVuIG5vIHdoaXRlbGlzdCBoYXMgYmVlbiBleHBsaWNpdGx5IHNldCBpcyBgWydzZWxmJ11gIGFsbG93aW5nIG9ubHlcbiAgICogc2FtZSBvcmlnaW4gcmVzb3VyY2UgcmVxdWVzdHMuXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzL0dldHMgdGhlIHdoaXRlbGlzdCBvZiB0cnVzdGVkIHJlc291cmNlIFVSTHMuXG4gICAqL1xuICB0aGlzLnJlc291cmNlVXJsV2hpdGVsaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmVzb3VyY2VVcmxXaGl0ZWxpc3QgPSBhZGp1c3RNYXRjaGVycyh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXNvdXJjZVVybFdoaXRlbGlzdDtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5PX0gYmxhY2tsaXN0IFdoZW4gcHJvdmlkZWQsIHJlcGxhY2VzIHRoZSByZXNvdXJjZVVybEJsYWNrbGlzdCB3aXRoIHRoZSB2YWx1ZVxuICAgKiAgICAgcHJvdmlkZWQuICBUaGlzIG11c3QgYmUgYW4gYXJyYXkgb3IgbnVsbC4gIEEgc25hcHNob3Qgb2YgdGhpcyBhcnJheSBpcyB1c2VkIHNvIGZ1cnRoZXJcbiAgICogICAgIGNoYW5nZXMgdG8gdGhlIGFycmF5IGFyZSBpZ25vcmVkLlxuICAgKlxuICAgKiAgICAgRm9sbG93IHtAbGluayBuZy4kc2NlI3Jlc291cmNlVXJsUGF0dGVybkl0ZW0gdGhpcyBsaW5rfSBmb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbXNcbiAgICogICAgIGFsbG93ZWQgaW4gdGhpcyBhcnJheS5cbiAgICpcbiAgICogICAgIFRoZSB0eXBpY2FsIHVzYWdlIGZvciB0aGUgYmxhY2tsaXN0IGlzIHRvICoqYmxvY2tcbiAgICogICAgIFtvcGVuIHJlZGlyZWN0c10oaHR0cDovL2N3ZS5taXRyZS5vcmcvZGF0YS9kZWZpbml0aW9ucy82MDEuaHRtbCkqKiBzZXJ2ZWQgYnkgeW91ciBkb21haW4gYXNcbiAgICogICAgIHRoZXNlIHdvdWxkIG90aGVyd2lzZSBiZSB0cnVzdGVkIGJ1dCBhY3R1YWxseSByZXR1cm4gY29udGVudCBmcm9tIHRoZSByZWRpcmVjdGVkIGRvbWFpbi5cbiAgICpcbiAgICogICAgIEZpbmFsbHksICoqdGhlIGJsYWNrbGlzdCBvdmVycmlkZXMgdGhlIHdoaXRlbGlzdCoqIGFuZCBoYXMgdGhlIGZpbmFsIHNheS5cbiAgICpcbiAgICogQHJldHVybiB7QXJyYXl9IHRoZSBjdXJyZW50bHkgc2V0IGJsYWNrbGlzdCBhcnJheS5cbiAgICpcbiAgICogVGhlICoqZGVmYXVsdCB2YWx1ZSoqIHdoZW4gbm8gd2hpdGVsaXN0IGhhcyBiZWVuIGV4cGxpY2l0bHkgc2V0IGlzIHRoZSBlbXB0eSBhcnJheSAoaS5lLiB0aGVyZVxuICAgKiBpcyBubyBibGFja2xpc3QuKVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cy9HZXRzIHRoZSBibGFja2xpc3Qgb2YgdHJ1c3RlZCByZXNvdXJjZSBVUkxzLlxuICAgKi9cblxuICB0aGlzLnJlc291cmNlVXJsQmxhY2tsaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmVzb3VyY2VVcmxCbGFja2xpc3QgPSBhZGp1c3RNYXRjaGVycyh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXNvdXJjZVVybEJsYWNrbGlzdDtcbiAgfTtcblxuICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRpbmplY3Rvcikge1xuXG4gICAgdmFyIGh0bWxTYW5pdGl6ZXIgPSBmdW5jdGlvbiBodG1sU2FuaXRpemVyKGh0bWwpIHtcbiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ3Vuc2FmZScsICdBdHRlbXB0aW5nIHRvIHVzZSBhbiB1bnNhZmUgdmFsdWUgaW4gYSBzYWZlIGNvbnRleHQuJyk7XG4gICAgfTtcblxuICAgIGlmICgkaW5qZWN0b3IuaGFzKCckc2FuaXRpemUnKSkge1xuICAgICAgaHRtbFNhbml0aXplciA9ICRpbmplY3Rvci5nZXQoJyRzYW5pdGl6ZScpO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gbWF0Y2hVcmwobWF0Y2hlciwgcGFyc2VkVXJsKSB7XG4gICAgICBpZiAobWF0Y2hlciA9PT0gJ3NlbGYnKSB7XG4gICAgICAgIHJldHVybiB1cmxJc1NhbWVPcmlnaW4ocGFyc2VkVXJsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlZmluaXRlbHkgYSByZWdleC4gIFNlZSBhZGp1c3RNYXRjaGVycygpXG4gICAgICAgIHJldHVybiAhIW1hdGNoZXIuZXhlYyhwYXJzZWRVcmwuaHJlZik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNSZXNvdXJjZVVybEFsbG93ZWRCeVBvbGljeSh1cmwpIHtcbiAgICAgIHZhciBwYXJzZWRVcmwgPSB1cmxSZXNvbHZlKHVybC50b1N0cmluZygpKTtcbiAgICAgIHZhciBpLCBuLCBhbGxvd2VkID0gZmFsc2U7XG4gICAgICAvLyBFbnN1cmUgdGhhdCBhdCBsZWFzdCBvbmUgaXRlbSBmcm9tIHRoZSB3aGl0ZWxpc3QgYWxsb3dzIHRoaXMgdXJsLlxuICAgICAgZm9yIChpID0gMCwgbiA9IHJlc291cmNlVXJsV2hpdGVsaXN0Lmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBpZiAobWF0Y2hVcmwocmVzb3VyY2VVcmxXaGl0ZWxpc3RbaV0sIHBhcnNlZFVybCkpIHtcbiAgICAgICAgICBhbGxvd2VkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFsbG93ZWQpIHtcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgbm8gaXRlbSBmcm9tIHRoZSBibGFja2xpc3QgYmxvY2tlZCB0aGlzIHVybC5cbiAgICAgICAgZm9yIChpID0gMCwgbiA9IHJlc291cmNlVXJsQmxhY2tsaXN0Lmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIGlmIChtYXRjaFVybChyZXNvdXJjZVVybEJsYWNrbGlzdFtpXSwgcGFyc2VkVXJsKSkge1xuICAgICAgICAgICAgYWxsb3dlZCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWxsb3dlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUhvbGRlclR5cGUoQmFzZSkge1xuICAgICAgdmFyIGhvbGRlclR5cGUgPSBmdW5jdGlvbiBUcnVzdGVkVmFsdWVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZSkge1xuICAgICAgICB0aGlzLiQkdW53cmFwVHJ1c3RlZFZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRydXN0ZWRWYWx1ZTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgICBpZiAoQmFzZSkge1xuICAgICAgICBob2xkZXJUeXBlLnByb3RvdHlwZSA9IG5ldyBCYXNlKCk7XG4gICAgICB9XG4gICAgICBob2xkZXJUeXBlLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24gc2NlVmFsdWVPZigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtcbiAgICAgIH07XG4gICAgICBob2xkZXJUeXBlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHNjZVRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpLnRvU3RyaW5nKCk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGhvbGRlclR5cGU7XG4gICAgfVxuXG4gICAgdmFyIHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UgPSBnZW5lcmF0ZUhvbGRlclR5cGUoKSxcbiAgICAgICAgYnlUeXBlID0ge307XG5cbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLkhUTUxdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpO1xuICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuQ1NTXSA9IGdlbmVyYXRlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKTtcbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLlVSTF0gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7XG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5KU10gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7XG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5SRVNPVVJDRV9VUkxdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKGJ5VHlwZVtTQ0VfQ09OVEVYVFMuVVJMXSk7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZURlbGVnYXRlI3RydXN0QXNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgaXMgdHJ1c3RlZCBieSBhbmd1bGFyIGZvciB1c2UgaW4gc3BlY2lmaWVkIHN0cmljdFxuICAgICAqIGNvbnRleHR1YWwgZXNjYXBpbmcgY29udGV4dHMgKHN1Y2ggYXMgbmctYmluZC1odG1sLCBuZy1pbmNsdWRlLCBhbnkgc3JjXG4gICAgICogYXR0cmlidXRlIGludGVycG9sYXRpb24sIGFueSBkb20gZXZlbnQgYmluZGluZyBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvblxuICAgICAqIHN1Y2ggYXMgZm9yIG9uY2xpY2ssICBldGMuKSB0aGF0IHVzZXMgdGhlIHByb3ZpZGVkIHZhbHVlLlxuICAgICAqIFNlZSB7QGxpbmsgbmcuJHNjZSAkc2NlfSBmb3IgZW5hYmxpbmcgc3RyaWN0IGNvbnRleHR1YWwgZXNjYXBpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUga2luZCBvZiBjb250ZXh0IGluIHdoaWNoIHRoaXMgdmFsdWUgaXMgc2FmZSBmb3IgdXNlLiAgZS5nLiB1cmwsXG4gICAgICogICByZXNvdXJjZVVybCwgaHRtbCwganMgYW5kIGNzcy5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0aGF0IHRoYXQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgdHJ1c3RlZC9zYWZlLlxuICAgICAqIEByZXR1cm5zIHsqfSBBIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgdG8gc3RhbmQgaW4gZm9yIHRoZSBwcm92aWRlZCBgdmFsdWVgIGluIHBsYWNlc1xuICAgICAqIHdoZXJlIEFuZ3VsYXIgZXhwZWN0cyBhICRzY2UudHJ1c3RBcygpIHJldHVybiB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVzdEFzKHR5cGUsIHRydXN0ZWRWYWx1ZSkge1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gKGJ5VHlwZS5oYXNPd25Qcm9wZXJ0eSh0eXBlKSA/IGJ5VHlwZVt0eXBlXSA6IG51bGwpO1xuICAgICAgaWYgKCFDb25zdHJ1Y3Rvcikge1xuICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpY29udGV4dCcsXG4gICAgICAgICAgICAnQXR0ZW1wdGVkIHRvIHRydXN0IGEgdmFsdWUgaW4gaW52YWxpZCBjb250ZXh0LiBDb250ZXh0OiB7MH07IFZhbHVlOiB7MX0nLFxuICAgICAgICAgICAgdHlwZSwgdHJ1c3RlZFZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmICh0cnVzdGVkVmFsdWUgPT09IG51bGwgfHwgdHJ1c3RlZFZhbHVlID09PSB1bmRlZmluZWQgfHwgdHJ1c3RlZFZhbHVlID09PSAnJykge1xuICAgICAgICByZXR1cm4gdHJ1c3RlZFZhbHVlO1xuICAgICAgfVxuICAgICAgLy8gQWxsIHRoZSBjdXJyZW50IGNvbnRleHRzIGluIFNDRV9DT05URVhUUyBoYXBwZW4gdG8gYmUgc3RyaW5ncy4gIEluIG9yZGVyIHRvIGF2b2lkIHRydXN0aW5nXG4gICAgICAvLyBtdXRhYmxlIG9iamVjdHMsIHdlIGVuc3VyZSBoZXJlIHRoYXQgdGhlIHZhbHVlIHBhc3NlZCBpbiBpcyBhY3R1YWxseSBhIHN0cmluZy5cbiAgICAgIGlmICh0eXBlb2YgdHJ1c3RlZFZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpdHlwZScsXG4gICAgICAgICAgICAnQXR0ZW1wdGVkIHRvIHRydXN0IGEgbm9uLXN0cmluZyB2YWx1ZSBpbiBhIGNvbnRlbnQgcmVxdWlyaW5nIGEgc3RyaW5nOiBDb250ZXh0OiB7MH0nLFxuICAgICAgICAgICAgdHlwZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRydXN0ZWRWYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2VEZWxlZ2F0ZSN2YWx1ZU9mXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBJZiB0aGUgcGFzc2VkIHBhcmFtZXRlciBoYWQgYmVlbiByZXR1cm5lZCBieSBhIHByaW9yIGNhbGwgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzXG4gICAgICogYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0sIHJldHVybnMgdGhlIHZhbHVlIHRoYXQgaGFkIGJlZW4gcGFzc2VkIHRvIHtAbGlua1xuICAgICAqIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LlxuICAgICAqXG4gICAgICogSWYgdGhlIHBhc3NlZCBwYXJhbWV0ZXIgaXMgbm90IGEgdmFsdWUgdGhhdCBoYWQgYmVlbiByZXR1cm5lZCBieSB7QGxpbmtcbiAgICAgKiBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSwgcmV0dXJucyBpdCBhcy1pcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfVxuICAgICAqICAgICAgY2FsbCBvciBhbnl0aGluZyBlbHNlLlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgYHZhbHVlYCB0aGF0IHdhcyBvcmlnaW5hbGx5IHByb3ZpZGVkIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBc1xuICAgICAqICAgICBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSBpZiBgdmFsdWVgIGlzIHRoZSByZXN1bHQgb2Ygc3VjaCBhIGNhbGwuICBPdGhlcndpc2UsIHJldHVybnNcbiAgICAgKiAgICAgYHZhbHVlYCB1bmNoYW5nZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVPZihtYXliZVRydXN0ZWQpIHtcbiAgICAgIGlmIChtYXliZVRydXN0ZWQgaW5zdGFuY2VvZiB0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKSB7XG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBUYWtlcyB0aGUgcmVzdWx0IG9mIGEge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9IGNhbGwgYW5kXG4gICAgICogcmV0dXJucyB0aGUgb3JpZ2luYWxseSBzdXBwbGllZCB2YWx1ZSBpZiB0aGUgcXVlcmllZCBjb250ZXh0IHR5cGUgaXMgYSBzdXBlcnR5cGUgb2YgdGhlXG4gICAgICogY3JlYXRlZCB0eXBlLiAgSWYgdGhpcyBjb25kaXRpb24gaXNuJ3Qgc2F0aXNmaWVkLCB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGtpbmQgb2YgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHRvIGJlIHVzZWQuXG4gICAgICogQHBhcmFtIHsqfSBtYXliZVRydXN0ZWQgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBc1xuICAgICAqICAgICBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSBjYWxsLlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgdmFsdWUgdGhlIHdhcyBvcmlnaW5hbGx5IHByb3ZpZGVkIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBc1xuICAgICAqICAgICBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSBpZiB2YWxpZCBpbiB0aGlzIGNvbnRleHQuICBPdGhlcndpc2UsIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VHJ1c3RlZCh0eXBlLCBtYXliZVRydXN0ZWQpIHtcbiAgICAgIGlmIChtYXliZVRydXN0ZWQgPT09IG51bGwgfHwgbWF5YmVUcnVzdGVkID09PSB1bmRlZmluZWQgfHwgbWF5YmVUcnVzdGVkID09PSAnJykge1xuICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkO1xuICAgICAgfVxuICAgICAgdmFyIGNvbnN0cnVjdG9yID0gKGJ5VHlwZS5oYXNPd25Qcm9wZXJ0eSh0eXBlKSA/IGJ5VHlwZVt0eXBlXSA6IG51bGwpO1xuICAgICAgaWYgKGNvbnN0cnVjdG9yICYmIG1heWJlVHJ1c3RlZCBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtcbiAgICAgIH1cbiAgICAgIC8vIElmIHdlIGdldCBoZXJlLCB0aGVuIHdlIG1heSBvbmx5IHRha2Ugb25lIG9mIHR3byBhY3Rpb25zLlxuICAgICAgLy8gMS4gc2FuaXRpemUgdGhlIHZhbHVlIGZvciB0aGUgcmVxdWVzdGVkIHR5cGUsIG9yXG4gICAgICAvLyAyLiB0aHJvdyBhbiBleGNlcHRpb24uXG4gICAgICBpZiAodHlwZSA9PT0gU0NFX0NPTlRFWFRTLlJFU09VUkNFX1VSTCkge1xuICAgICAgICBpZiAoaXNSZXNvdXJjZVVybEFsbG93ZWRCeVBvbGljeShtYXliZVRydXN0ZWQpKSB7XG4gICAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpbnNlY3VybCcsXG4gICAgICAgICAgICAgICdCbG9ja2VkIGxvYWRpbmcgcmVzb3VyY2UgZnJvbSB1cmwgbm90IGFsbG93ZWQgYnkgJHNjZURlbGVnYXRlIHBvbGljeS4gIFVSTDogezB9JyxcbiAgICAgICAgICAgICAgbWF5YmVUcnVzdGVkLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFNDRV9DT05URVhUUy5IVE1MKSB7XG4gICAgICAgIHJldHVybiBodG1sU2FuaXRpemVyKG1heWJlVHJ1c3RlZCk7XG4gICAgICB9XG4gICAgICB0aHJvdyAkc2NlTWluRXJyKCd1bnNhZmUnLCAnQXR0ZW1wdGluZyB0byB1c2UgYW4gdW5zYWZlIHZhbHVlIGluIGEgc2FmZSBjb250ZXh0LicpO1xuICAgIH1cblxuICAgIHJldHVybiB7IHRydXN0QXM6IHRydXN0QXMsXG4gICAgICAgICAgICAgZ2V0VHJ1c3RlZDogZ2V0VHJ1c3RlZCxcbiAgICAgICAgICAgICB2YWx1ZU9mOiB2YWx1ZU9mIH07XG4gIH1dO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkc2NlUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoZSAkc2NlUHJvdmlkZXIgcHJvdmlkZXIgYWxsb3dzIGRldmVsb3BlcnMgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgbmcuJHNjZSAkc2NlfSBzZXJ2aWNlLlxuICogLSAgIGVuYWJsZS9kaXNhYmxlIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpIGluIGEgbW9kdWxlXG4gKiAtICAgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gd2l0aCBhIGN1c3RvbSBkZWxlZ2F0ZVxuICpcbiAqIFJlYWQgbW9yZSBhYm91dCB7QGxpbmsgbmcuJHNjZSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uXG4gKi9cblxuLyoganNoaW50IG1heGxlbjogZmFsc2UqL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkc2NlXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIGAkc2NlYCBpcyBhIHNlcnZpY2UgdGhhdCBwcm92aWRlcyBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBzZXJ2aWNlcyB0byBBbmd1bGFySlMuXG4gKlxuICogIyBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZ1xuICpcbiAqIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpIGlzIGEgbW9kZSBpbiB3aGljaCBBbmd1bGFySlMgcmVxdWlyZXMgYmluZGluZ3MgaW4gY2VydGFpblxuICogY29udGV4dHMgdG8gcmVzdWx0IGluIGEgdmFsdWUgdGhhdCBpcyBtYXJrZWQgYXMgc2FmZSB0byB1c2UgZm9yIHRoYXQgY29udGV4dC4gIE9uZSBleGFtcGxlIG9mXG4gKiBzdWNoIGEgY29udGV4dCBpcyBiaW5kaW5nIGFyYml0cmFyeSBodG1sIGNvbnRyb2xsZWQgYnkgdGhlIHVzZXIgdmlhIGBuZy1iaW5kLWh0bWxgLiAgV2UgcmVmZXJcbiAqIHRvIHRoZXNlIGNvbnRleHRzIGFzIHByaXZpbGVnZWQgb3IgU0NFIGNvbnRleHRzLlxuICpcbiAqIEFzIG9mIHZlcnNpb24gMS4yLCBBbmd1bGFyIHNoaXBzIHdpdGggU0NFIGVuYWJsZWQgYnkgZGVmYXVsdC5cbiAqXG4gKiBOb3RlOiAgV2hlbiBlbmFibGVkICh0aGUgZGVmYXVsdCksIElFPDExIGluIHF1aXJrcyBtb2RlIGlzIG5vdCBzdXBwb3J0ZWQuICBJbiB0aGlzIG1vZGUsIElFPDExIGFsbG93XG4gKiBvbmUgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgamF2YXNjcmlwdCBieSB0aGUgdXNlIG9mIHRoZSBleHByZXNzaW9uKCkgc3ludGF4LiAgUmVmZXJcbiAqIDxodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9pZS9hcmNoaXZlLzIwMDgvMTAvMTYvZW5kaW5nLWV4cHJlc3Npb25zLmFzcHg+IHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlbS5cbiAqIFlvdSBjYW4gZW5zdXJlIHlvdXIgZG9jdW1lbnQgaXMgaW4gc3RhbmRhcmRzIG1vZGUgYW5kIG5vdCBxdWlya3MgbW9kZSBieSBhZGRpbmcgYDwhZG9jdHlwZSBodG1sPmBcbiAqIHRvIHRoZSB0b3Agb2YgeW91ciBIVE1MIGRvY3VtZW50LlxuICpcbiAqIFNDRSBhc3Npc3RzIGluIHdyaXRpbmcgY29kZSBpbiB3YXkgdGhhdCAoYSkgaXMgc2VjdXJlIGJ5IGRlZmF1bHQgYW5kIChiKSBtYWtlcyBhdWRpdGluZyBmb3JcbiAqIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcyBzdWNoIGFzIFhTUywgY2xpY2tqYWNraW5nLCBldGMuIGEgbG90IGVhc2llci5cbiAqXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSBvZiBhIGJpbmRpbmcgaW4gYSBwcml2aWxlZ2VkIGNvbnRleHQ6XG4gKlxuICogYGBgXG4gKiA8aW5wdXQgbmctbW9kZWw9XCJ1c2VySHRtbFwiIGFyaWEtbGFiZWw9XCJVc2VyIGlucHV0XCI+XG4gKiA8ZGl2IG5nLWJpbmQtaHRtbD1cInVzZXJIdG1sXCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBOb3RpY2UgdGhhdCBgbmctYmluZC1odG1sYCBpcyBib3VuZCB0byBgdXNlckh0bWxgIGNvbnRyb2xsZWQgYnkgdGhlIHVzZXIuICBXaXRoIFNDRVxuICogZGlzYWJsZWQsIHRoaXMgYXBwbGljYXRpb24gYWxsb3dzIHRoZSB1c2VyIHRvIHJlbmRlciBhcmJpdHJhcnkgSFRNTCBpbnRvIHRoZSBESVYuXG4gKiBJbiBhIG1vcmUgcmVhbGlzdGljIGV4YW1wbGUsIG9uZSBtYXkgYmUgcmVuZGVyaW5nIHVzZXIgY29tbWVudHMsIGJsb2cgYXJ0aWNsZXMsIGV0Yy4gdmlhXG4gKiBiaW5kaW5ncy4gIChIVE1MIGlzIGp1c3Qgb25lIGV4YW1wbGUgb2YgYSBjb250ZXh0IHdoZXJlIHJlbmRlcmluZyB1c2VyIGNvbnRyb2xsZWQgaW5wdXQgY3JlYXRlc1xuICogc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLilcbiAqXG4gKiBGb3IgdGhlIGNhc2Ugb2YgSFRNTCwgeW91IG1pZ2h0IHVzZSBhIGxpYnJhcnksIGVpdGhlciBvbiB0aGUgY2xpZW50IHNpZGUsIG9yIG9uIHRoZSBzZXJ2ZXIgc2lkZSxcbiAqIHRvIHNhbml0aXplIHVuc2FmZSBIVE1MIGJlZm9yZSBiaW5kaW5nIHRvIHRoZSB2YWx1ZSBhbmQgcmVuZGVyaW5nIGl0IGluIHRoZSBkb2N1bWVudC5cbiAqXG4gKiBIb3cgd291bGQgeW91IGVuc3VyZSB0aGF0IGV2ZXJ5IHBsYWNlIHRoYXQgdXNlZCB0aGVzZSB0eXBlcyBvZiBiaW5kaW5ncyB3YXMgYm91bmQgdG8gYSB2YWx1ZSB0aGF0XG4gKiB3YXMgc2FuaXRpemVkIGJ5IHlvdXIgbGlicmFyeSAob3IgcmV0dXJuZWQgYXMgc2FmZSBmb3IgcmVuZGVyaW5nIGJ5IHlvdXIgc2VydmVyPykgIEhvdyBjYW4geW91XG4gKiBlbnN1cmUgdGhhdCB5b3UgZGlkbid0IGFjY2lkZW50YWxseSBkZWxldGUgdGhlIGxpbmUgdGhhdCBzYW5pdGl6ZWQgdGhlIHZhbHVlLCBvciByZW5hbWVkIHNvbWVcbiAqIHByb3BlcnRpZXMvZmllbGRzIGFuZCBmb3Jnb3QgdG8gdXBkYXRlIHRoZSBiaW5kaW5nIHRvIHRoZSBzYW5pdGl6ZWQgdmFsdWU/XG4gKlxuICogVG8gYmUgc2VjdXJlIGJ5IGRlZmF1bHQsIHlvdSB3YW50IHRvIGVuc3VyZSB0aGF0IGFueSBzdWNoIGJpbmRpbmdzIGFyZSBkaXNhbGxvd2VkIHVubGVzcyB5b3UgY2FuXG4gKiBkZXRlcm1pbmUgdGhhdCBzb21ldGhpbmcgZXhwbGljaXRseSBzYXlzIGl0J3Mgc2FmZSB0byB1c2UgYSB2YWx1ZSBmb3IgYmluZGluZyBpbiB0aGF0XG4gKiBjb250ZXh0LiAgWW91IGNhbiB0aGVuIGF1ZGl0IHlvdXIgY29kZSAoYSBzaW1wbGUgZ3JlcCB3b3VsZCBkbykgdG8gZW5zdXJlIHRoYXQgdGhpcyBpcyBvbmx5IGRvbmVcbiAqIGZvciB0aG9zZSB2YWx1ZXMgdGhhdCB5b3UgY2FuIGVhc2lseSB0ZWxsIGFyZSBzYWZlIC0gYmVjYXVzZSB0aGV5IHdlcmUgcmVjZWl2ZWQgZnJvbSB5b3VyIHNlcnZlcixcbiAqIHNhbml0aXplZCBieSB5b3VyIGxpYnJhcnksIGV0Yy4gIFlvdSBjYW4gb3JnYW5pemUgeW91ciBjb2RlYmFzZSB0byBoZWxwIHdpdGggdGhpcyAtIHBlcmhhcHNcbiAqIGFsbG93aW5nIG9ubHkgdGhlIGZpbGVzIGluIGEgc3BlY2lmaWMgZGlyZWN0b3J5IHRvIGRvIHRoaXMuICBFbnN1cmluZyB0aGF0IHRoZSBpbnRlcm5hbCBBUElcbiAqIGV4cG9zZWQgYnkgdGhhdCBjb2RlIGRvZXNuJ3QgbWFya3VwIGFyYml0cmFyeSB2YWx1ZXMgYXMgc2FmZSB0aGVuIGJlY29tZXMgYSBtb3JlIG1hbmFnZWFibGUgdGFzay5cbiAqXG4gKiBJbiB0aGUgY2FzZSBvZiBBbmd1bGFySlMnIFNDRSBzZXJ2aWNlLCBvbmUgdXNlcyB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc31cbiAqIChhbmQgc2hvcnRoYW5kIG1ldGhvZHMgc3VjaCBhcyB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzSHRtbCAkc2NlLnRydXN0QXNIdG1sfSwgZXRjLikgdG9cbiAqIG9idGFpbiB2YWx1ZXMgdGhhdCB3aWxsIGJlIGFjY2VwdGVkIGJ5IFNDRSAvIHByaXZpbGVnZWQgY29udGV4dHMuXG4gKlxuICpcbiAqICMjIEhvdyBkb2VzIGl0IHdvcms/XG4gKlxuICogSW4gcHJpdmlsZWdlZCBjb250ZXh0cywgZGlyZWN0aXZlcyBhbmQgY29kZSB3aWxsIGJpbmQgdG8gdGhlIHJlc3VsdCBvZiB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkXG4gKiAkc2NlLmdldFRydXN0ZWQoY29udGV4dCwgdmFsdWUpfSByYXRoZXIgdGhhbiB0byB0aGUgdmFsdWUgZGlyZWN0bHkuICBEaXJlY3RpdmVzIHVzZSB7QGxpbmtcbiAqIG5nLiRzY2UjcGFyc2VBcyAkc2NlLnBhcnNlQXN9IHJhdGhlciB0aGFuIGAkcGFyc2VgIHRvIHdhdGNoIGF0dHJpYnV0ZSBiaW5kaW5ncywgd2hpY2ggcGVyZm9ybXMgdGhlXG4gKiB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZH0gYmVoaW5kIHRoZSBzY2VuZXMgb24gbm9uLWNvbnN0YW50IGxpdGVyYWxzLlxuICpcbiAqIEFzIGFuIGV4YW1wbGUsIHtAbGluayBuZy5kaXJlY3RpdmU6bmdCaW5kSHRtbCBuZ0JpbmRIdG1sfSB1c2VzIHtAbGlua1xuICogbmcuJHNjZSNwYXJzZUFzSHRtbCAkc2NlLnBhcnNlQXNIdG1sKGJpbmRpbmcgZXhwcmVzc2lvbil9LiAgSGVyZSdzIHRoZSBhY3R1YWwgY29kZSAoc2xpZ2h0bHlcbiAqIHNpbXBsaWZpZWQpOlxuICpcbiAqIGBgYFxuICogdmFyIG5nQmluZEh0bWxEaXJlY3RpdmUgPSBbJyRzY2UnLCBmdW5jdGlvbigkc2NlKSB7XG4gKiAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICogICAgIHNjb3BlLiR3YXRjaCgkc2NlLnBhcnNlQXNIdG1sKGF0dHIubmdCaW5kSHRtbCksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgICAgICBlbGVtZW50Lmh0bWwodmFsdWUgfHwgJycpO1xuICogICAgIH0pO1xuICogICB9O1xuICogfV07XG4gKiBgYGBcbiAqXG4gKiAjIyBJbXBhY3Qgb24gbG9hZGluZyB0ZW1wbGF0ZXNcbiAqXG4gKiBUaGlzIGFwcGxpZXMgYm90aCB0byB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0luY2x1ZGUgYG5nLWluY2x1ZGVgfSBkaXJlY3RpdmUgYXMgd2VsbCBhc1xuICogYHRlbXBsYXRlVXJsYCdzIHNwZWNpZmllZCBieSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LlxuICpcbiAqIEJ5IGRlZmF1bHQsIEFuZ3VsYXIgb25seSBsb2FkcyB0ZW1wbGF0ZXMgZnJvbSB0aGUgc2FtZSBkb21haW4gYW5kIHByb3RvY29sIGFzIHRoZSBhcHBsaWNhdGlvblxuICogZG9jdW1lbnQuICBUaGlzIGlzIGRvbmUgYnkgY2FsbGluZyB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmxcbiAqICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsfSBvbiB0aGUgdGVtcGxhdGUgVVJMLiAgVG8gbG9hZCB0ZW1wbGF0ZXMgZnJvbSBvdGhlciBkb21haW5zIGFuZC9vclxuICogcHJvdG9jb2xzLCB5b3UgbWF5IGVpdGhlciBlaXRoZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHdoaXRlbGlzdFxuICogdGhlbX0gb3Ige0BsaW5rIG5nLiRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsIHdyYXAgaXR9IGludG8gYSB0cnVzdGVkIHZhbHVlLlxuICpcbiAqICpQbGVhc2Ugbm90ZSo6XG4gKiBUaGUgYnJvd3NlcidzXG4gKiBbU2FtZSBPcmlnaW4gUG9saWN5XShodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Jyb3dzZXJzZWMvd2lraS9QYXJ0MiNTYW1lLW9yaWdpbl9wb2xpY3lfZm9yX1hNTEh0dHBSZXF1ZXN0KVxuICogYW5kIFtDcm9zcy1PcmlnaW4gUmVzb3VyY2UgU2hhcmluZyAoQ09SUyldKGh0dHA6Ly93d3cudzMub3JnL1RSL2NvcnMvKVxuICogcG9saWN5IGFwcGx5IGluIGFkZGl0aW9uIHRvIHRoaXMgYW5kIG1heSBmdXJ0aGVyIHJlc3RyaWN0IHdoZXRoZXIgdGhlIHRlbXBsYXRlIGlzIHN1Y2Nlc3NmdWxseVxuICogbG9hZGVkLiAgVGhpcyBtZWFucyB0aGF0IHdpdGhvdXQgdGhlIHJpZ2h0IENPUlMgcG9saWN5LCBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIGEgZGlmZmVyZW50IGRvbWFpblxuICogd29uJ3Qgd29yayBvbiBhbGwgYnJvd3NlcnMuICBBbHNvLCBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIGBmaWxlOi8vYCBVUkwgZG9lcyBub3Qgd29yayBvbiBzb21lXG4gKiBicm93c2Vycy5cbiAqXG4gKiAjIyBUaGlzIGZlZWxzIGxpa2UgdG9vIG11Y2ggb3ZlcmhlYWRcbiAqXG4gKiBJdCdzIGltcG9ydGFudCB0byByZW1lbWJlciB0aGF0IFNDRSBvbmx5IGFwcGxpZXMgdG8gaW50ZXJwb2xhdGlvbiBleHByZXNzaW9ucy5cbiAqXG4gKiBJZiB5b3VyIGV4cHJlc3Npb25zIGFyZSBjb25zdGFudCBsaXRlcmFscywgdGhleSdyZSBhdXRvbWF0aWNhbGx5IHRydXN0ZWQgYW5kIHlvdSBkb24ndCBuZWVkIHRvXG4gKiBjYWxsIGAkc2NlLnRydXN0QXNgIG9uIHRoZW0gKHJlbWVtYmVyIHRvIGluY2x1ZGUgdGhlIGBuZ1Nhbml0aXplYCBtb2R1bGUpIChlLmcuXG4gKiBgPGRpdiBuZy1iaW5kLWh0bWw9XCInPGI+aW1wbGljaXRseSB0cnVzdGVkPC9iPidcIj48L2Rpdj5gKSBqdXN0IHdvcmtzLlxuICpcbiAqIEFkZGl0aW9uYWxseSwgYGFbaHJlZl1gIGFuZCBgaW1nW3NyY11gIGF1dG9tYXRpY2FsbHkgc2FuaXRpemUgdGhlaXIgVVJMcyBhbmQgZG8gbm90IHBhc3MgdGhlbVxuICogdGhyb3VnaCB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZH0uICBTQ0UgZG9lc24ndCBwbGF5IGEgcm9sZSBoZXJlLlxuICpcbiAqIFRoZSBpbmNsdWRlZCB7QGxpbmsgbmcuJHNjZURlbGVnYXRlICRzY2VEZWxlZ2F0ZX0gY29tZXMgd2l0aCBzYW5lIGRlZmF1bHRzIHRvIGFsbG93IHlvdSB0byBsb2FkXG4gKiB0ZW1wbGF0ZXMgaW4gYG5nLWluY2x1ZGVgIGZyb20geW91ciBhcHBsaWNhdGlvbidzIGRvbWFpbiB3aXRob3V0IGhhdmluZyB0byBldmVuIGtub3cgYWJvdXQgU0NFLlxuICogSXQgYmxvY2tzIGxvYWRpbmcgdGVtcGxhdGVzIGZyb20gb3RoZXIgZG9tYWlucyBvciBsb2FkaW5nIHRlbXBsYXRlcyBvdmVyIGh0dHAgZnJvbSBhbiBodHRwc1xuICogc2VydmVkIGRvY3VtZW50LiAgWW91IGNhbiBjaGFuZ2UgdGhlc2UgYnkgc2V0dGluZyB5b3VyIG93biBjdXN0b20ge0BsaW5rXG4gKiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCB3aGl0ZWxpc3RzfSBhbmQge0BsaW5rXG4gKiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdCBibGFja2xpc3RzfSBmb3IgbWF0Y2hpbmcgc3VjaCBVUkxzLlxuICpcbiAqIFRoaXMgc2lnbmlmaWNhbnRseSByZWR1Y2VzIHRoZSBvdmVyaGVhZC4gIEl0IGlzIGZhciBlYXNpZXIgdG8gcGF5IHRoZSBzbWFsbCBvdmVyaGVhZCBhbmQgaGF2ZSBhblxuICogYXBwbGljYXRpb24gdGhhdCdzIHNlY3VyZSBhbmQgY2FuIGJlIGF1ZGl0ZWQgdG8gdmVyaWZ5IHRoYXQgd2l0aCBtdWNoIG1vcmUgZWFzZSB0aGFuIGJvbHRpbmdcbiAqIHNlY3VyaXR5IG9udG8gYW4gYXBwbGljYXRpb24gbGF0ZXIuXG4gKlxuICogPGEgbmFtZT1cImNvbnRleHRzXCI+PC9hPlxuICogIyMgV2hhdCB0cnVzdGVkIGNvbnRleHQgdHlwZXMgYXJlIHN1cHBvcnRlZD9cbiAqXG4gKiB8IENvbnRleHQgICAgICAgICAgICAgfCBOb3RlcyAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IGAkc2NlLkhUTUxgICAgICAgICAgfCBGb3IgSFRNTCB0aGF0J3Mgc2FmZSB0byBzb3VyY2UgaW50byB0aGUgYXBwbGljYXRpb24uICBUaGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0JpbmRIdG1sIG5nQmluZEh0bWx9IGRpcmVjdGl2ZSB1c2VzIHRoaXMgY29udGV4dCBmb3IgYmluZGluZ3MuIElmIGFuIHVuc2FmZSB2YWx1ZSBpcyBlbmNvdW50ZXJlZCBhbmQgdGhlIHtAbGluayBuZ1Nhbml0aXplICRzYW5pdGl6ZX0gbW9kdWxlIGlzIHByZXNlbnQgdGhpcyB3aWxsIHNhbml0aXplIHRoZSB2YWx1ZSBpbnN0ZWFkIG9mIHRocm93aW5nIGFuIGVycm9yLiB8XG4gKiB8IGAkc2NlLkNTU2AgICAgICAgICAgfCBGb3IgQ1NTIHRoYXQncyBzYWZlIHRvIHNvdXJjZSBpbnRvIHRoZSBhcHBsaWNhdGlvbi4gIEN1cnJlbnRseSB1bnVzZWQuICBGZWVsIGZyZWUgdG8gdXNlIGl0IGluIHlvdXIgb3duIGRpcmVjdGl2ZXMuIHxcbiAqIHwgYCRzY2UuVVJMYCAgICAgICAgICB8IEZvciBVUkxzIHRoYXQgYXJlIHNhZmUgdG8gZm9sbG93IGFzIGxpbmtzLiAgQ3VycmVudGx5IHVudXNlZCAoYDxhIGhyZWY9YCBhbmQgYDxpbWcgc3JjPWAgc2FuaXRpemUgdGhlaXIgdXJscyBhbmQgZG9uJ3QgY29uc3RpdHV0ZSBhbiBTQ0UgY29udGV4dC4gfFxuICogfCBgJHNjZS5SRVNPVVJDRV9VUkxgIHwgRm9yIFVSTHMgdGhhdCBhcmUgbm90IG9ubHkgc2FmZSB0byBmb2xsb3cgYXMgbGlua3MsIGJ1dCB3aG9zZSBjb250ZW50cyBhcmUgYWxzbyBzYWZlIHRvIGluY2x1ZGUgaW4geW91ciBhcHBsaWNhdGlvbi4gIEV4YW1wbGVzIGluY2x1ZGUgYG5nLWluY2x1ZGVgLCBgc3JjYCAvIGBuZ1NyY2AgYmluZGluZ3MgZm9yIHRhZ3Mgb3RoZXIgdGhhbiBgSU1HYCAoZS5nLiBgSUZSQU1FYCwgYE9CSkVDVGAsIGV0Yy4pICA8YnI+PGJyPk5vdGUgdGhhdCBgJHNjZS5SRVNPVVJDRV9VUkxgIG1ha2VzIGEgc3Ryb25nZXIgc3RhdGVtZW50IGFib3V0IHRoZSBVUkwgdGhhbiBgJHNjZS5VUkxgIGRvZXMgYW5kIHRoZXJlZm9yZSBjb250ZXh0cyByZXF1aXJpbmcgdmFsdWVzIHRydXN0ZWQgZm9yIGAkc2NlLlJFU09VUkNFX1VSTGAgY2FuIGJlIHVzZWQgYW55d2hlcmUgdGhhdCB2YWx1ZXMgdHJ1c3RlZCBmb3IgYCRzY2UuVVJMYCBhcmUgcmVxdWlyZWQuIHxcbiAqIHwgYCRzY2UuSlNgICAgICAgICAgICB8IEZvciBKYXZhU2NyaXB0IHRoYXQgaXMgc2FmZSB0byBleGVjdXRlIGluIHlvdXIgYXBwbGljYXRpb24ncyBjb250ZXh0LiAgQ3VycmVudGx5IHVudXNlZC4gIEZlZWwgZnJlZSB0byB1c2UgaXQgaW4geW91ciBvd24gZGlyZWN0aXZlcy4gfFxuICpcbiAqICMjIEZvcm1hdCBvZiBpdGVtcyBpbiB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3QgcmVzb3VyY2VVcmxXaGl0ZWxpc3R9L3tAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdCBCbGFja2xpc3R9IDxhIG5hbWU9XCJyZXNvdXJjZVVybFBhdHRlcm5JdGVtXCI+PC9hPlxuICpcbiAqICBFYWNoIGVsZW1lbnQgaW4gdGhlc2UgYXJyYXlzIG11c3QgYmUgb25lIG9mIHRoZSBmb2xsb3dpbmc6XG4gKlxuICogIC0gKionc2VsZicqKlxuICogICAgLSBUaGUgc3BlY2lhbCAqKnN0cmluZyoqLCBgJ3NlbGYnYCwgY2FuIGJlIHVzZWQgdG8gbWF0Y2ggYWdhaW5zdCBhbGwgVVJMcyBvZiB0aGUgKipzYW1lXG4gKiAgICAgIGRvbWFpbioqIGFzIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudCB1c2luZyB0aGUgKipzYW1lIHByb3RvY29sKiouXG4gKiAgLSAqKlN0cmluZyoqIChleGNlcHQgdGhlIHNwZWNpYWwgdmFsdWUgYCdzZWxmJ2ApXG4gKiAgICAtIFRoZSBzdHJpbmcgaXMgbWF0Y2hlZCBhZ2FpbnN0IHRoZSBmdWxsICpub3JtYWxpemVkIC8gYWJzb2x1dGUgVVJMKiBvZiB0aGUgcmVzb3VyY2VcbiAqICAgICAgYmVpbmcgdGVzdGVkIChzdWJzdHJpbmcgbWF0Y2hlcyBhcmUgbm90IGdvb2QgZW5vdWdoLilcbiAqICAgIC0gVGhlcmUgYXJlIGV4YWN0bHkgKip0d28gd2lsZGNhcmQgc2VxdWVuY2VzKiogLSBgKmAgYW5kIGAqKmAuICBBbGwgb3RoZXIgY2hhcmFjdGVyc1xuICogICAgICBtYXRjaCB0aGVtc2VsdmVzLlxuICogICAgLSBgKmA6IG1hdGNoZXMgemVybyBvciBtb3JlIG9jY3VycmVuY2VzIG9mIGFueSBjaGFyYWN0ZXIgb3RoZXIgdGhhbiBvbmUgb2YgdGhlIGZvbGxvd2luZyA2XG4gKiAgICAgIGNoYXJhY3RlcnM6ICdgOmAnLCAnYC9gJywgJ2AuYCcsICdgP2AnLCAnYCZgJyBhbmQgJzsnLiAgSXQncyBhIHVzZWZ1bCB3aWxkY2FyZCBmb3IgdXNlXG4gKiAgICAgIGluIGEgd2hpdGVsaXN0LlxuICogICAgLSBgKipgOiBtYXRjaGVzIHplcm8gb3IgbW9yZSBvY2N1cnJlbmNlcyBvZiAqYW55KiBjaGFyYWN0ZXIuICBBcyBzdWNoLCBpdCdzIG5vdFxuICogICAgICBub3QgYXBwcm9wcmlhdGUgdG8gdXNlIGluIGZvciBhIHNjaGVtZSwgZG9tYWluLCBldGMuIGFzIGl0IHdvdWxkIG1hdGNoIHRvbyBtdWNoLiAgKGUuZy5cbiAqICAgICAgaHR0cDovLyoqLmV4YW1wbGUuY29tLyB3b3VsZCBtYXRjaCBodHRwOi8vZXZpbC5jb20vP2lnbm9yZT0uZXhhbXBsZS5jb20vIGFuZCB0aGF0IG1pZ2h0XG4gKiAgICAgIG5vdCBoYXZlIGJlZW4gdGhlIGludGVudGlvbi4pICBJdHMgdXNhZ2UgYXQgdGhlIHZlcnkgZW5kIG9mIHRoZSBwYXRoIGlzIG9rLiAgKGUuZy5cbiAqICAgICAgaHR0cDovL2Zvby5leGFtcGxlLmNvbS90ZW1wbGF0ZXMvKiopLlxuICogIC0gKipSZWdFeHAqKiAoKnNlZSBjYXZlYXQgYmVsb3cqKVxuICogICAgLSAqQ2F2ZWF0KjogIFdoaWxlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXJlIHBvd2VyZnVsIGFuZCBvZmZlciBncmVhdCBmbGV4aWJpbGl0eSwgIHRoZWlyIHN5bnRheFxuICogICAgICAoYW5kIGFsbCB0aGUgaW5ldml0YWJsZSBlc2NhcGluZykgbWFrZXMgdGhlbSAqaGFyZGVyIHRvIG1haW50YWluKi4gIEl0J3MgZWFzeSB0b1xuICogICAgICBhY2NpZGVudGFsbHkgaW50cm9kdWNlIGEgYnVnIHdoZW4gb25lIHVwZGF0ZXMgYSBjb21wbGV4IGV4cHJlc3Npb24gKGltaG8sIGFsbCByZWdleGVzIHNob3VsZFxuICogICAgICBoYXZlIGdvb2QgdGVzdCBjb3ZlcmFnZS4pLiAgRm9yIGluc3RhbmNlLCB0aGUgdXNlIG9mIGAuYCBpbiB0aGUgcmVnZXggaXMgY29ycmVjdCBvbmx5IGluIGFcbiAqICAgICAgc21hbGwgbnVtYmVyIG9mIGNhc2VzLiAgQSBgLmAgY2hhcmFjdGVyIGluIHRoZSByZWdleCB1c2VkIHdoZW4gbWF0Y2hpbmcgdGhlIHNjaGVtZSBvciBhXG4gKiAgICAgIHN1YmRvbWFpbiBjb3VsZCBiZSBtYXRjaGVkIGFnYWluc3QgYSBgOmAgb3IgbGl0ZXJhbCBgLmAgdGhhdCB3YXMgbGlrZWx5IG5vdCBpbnRlbmRlZC4gICBJdFxuICogICAgICBpcyBoaWdobHkgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBzdHJpbmcgcGF0dGVybnMgYW5kIG9ubHkgZmFsbCBiYWNrIHRvIHJlZ3VsYXIgZXhwcmVzc2lvbnNcbiAqICAgICAgaWYgdGhleSBhcyBhIGxhc3QgcmVzb3J0LlxuICogICAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgUmVnRXhwIChpLmUuIG5vdCBhIHN0cmluZy4pICBJdCBpc1xuICogICAgICBtYXRjaGVkIGFnYWluc3QgdGhlICoqZW50aXJlKiogKm5vcm1hbGl6ZWQgLyBhYnNvbHV0ZSBVUkwqIG9mIHRoZSByZXNvdXJjZSBiZWluZyB0ZXN0ZWRcbiAqICAgICAgKGV2ZW4gd2hlbiB0aGUgUmVnRXhwIGRpZCBub3QgaGF2ZSB0aGUgYF5gIGFuZCBgJGAgY29kZXMuKSAgSW4gYWRkaXRpb24sIGFueSBmbGFnc1xuICogICAgICBwcmVzZW50IG9uIHRoZSBSZWdFeHAgKHN1Y2ggYXMgbXVsdGlsaW5lLCBnbG9iYWwsIGlnbm9yZUNhc2UpIGFyZSBpZ25vcmVkLlxuICogICAgLSBJZiB5b3UgYXJlIGdlbmVyYXRpbmcgeW91ciBKYXZhU2NyaXB0IGZyb20gc29tZSBvdGhlciB0ZW1wbGF0aW5nIGVuZ2luZSAobm90XG4gKiAgICAgIHJlY29tbWVuZGVkLCBlLmcuIGluIGlzc3VlIFsjNDAwNl0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvNDAwNikpLFxuICogICAgICByZW1lbWJlciB0byBlc2NhcGUgeW91ciByZWd1bGFyIGV4cHJlc3Npb24gKGFuZCBiZSBhd2FyZSB0aGF0IHlvdSBtaWdodCBuZWVkIG1vcmUgdGhhblxuICogICAgICBvbmUgbGV2ZWwgb2YgZXNjYXBpbmcgZGVwZW5kaW5nIG9uIHlvdXIgdGVtcGxhdGluZyBlbmdpbmUgYW5kIHRoZSB3YXkgeW91IGludGVycG9sYXRlZFxuICogICAgICB0aGUgdmFsdWUuKSAgRG8gbWFrZSB1c2Ugb2YgeW91ciBwbGF0Zm9ybSdzIGVzY2FwaW5nIG1lY2hhbmlzbSBhcyBpdCBtaWdodCBiZSBnb29kXG4gKiAgICAgIGVub3VnaCBiZWZvcmUgY29kaW5nIHlvdXIgb3duLiAgZS5nLiBSdWJ5IGhhc1xuICogICAgICBbUmVnZXhwLmVzY2FwZShzdHIpXShodHRwOi8vd3d3LnJ1YnktZG9jLm9yZy9jb3JlLTIuMC4wL1JlZ2V4cC5odG1sI21ldGhvZC1jLWVzY2FwZSlcbiAqICAgICAgYW5kIFB5dGhvbiBoYXMgW3JlLmVzY2FwZV0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3JlLmh0bWwjcmUuZXNjYXBlKS5cbiAqICAgICAgSmF2YXNjcmlwdCBsYWNrcyBhIHNpbWlsYXIgYnVpbHQgaW4gZnVuY3Rpb24gZm9yIGVzY2FwaW5nLiAgVGFrZSBhIGxvb2sgYXQgR29vZ2xlXG4gKiAgICAgIENsb3N1cmUgbGlicmFyeSdzIFtnb29nLnN0cmluZy5yZWdFeHBFc2NhcGUocyldKFxuICogICAgICBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19zdHJpbmdfc3RyaW5nLmpzLnNvdXJjZS5odG1sI2xpbmU5NjIpLlxuICpcbiAqIFJlZmVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciAkc2NlRGVsZWdhdGVQcm92aWRlcn0gZm9yIGFuIGV4YW1wbGUuXG4gKlxuICogIyMgU2hvdyBtZSBhbiBleGFtcGxlIHVzaW5nIFNDRS5cbiAqXG4gKiA8ZXhhbXBsZSBtb2R1bGU9XCJteVNjZUFwcFwiIGRlcHM9XCJhbmd1bGFyLXNhbml0aXplLmpzXCI+XG4gKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJBcHBDb250cm9sbGVyIGFzIG15Q3RybFwiPlxuICogICAgIDxpIG5nLWJpbmQtaHRtbD1cIm15Q3RybC5leHBsaWNpdGx5VHJ1c3RlZEh0bWxcIiBpZD1cImV4cGxpY2l0bHlUcnVzdGVkSHRtbFwiPjwvaT48YnI+PGJyPlxuICogICAgIDxiPlVzZXIgY29tbWVudHM8L2I+PGJyPlxuICogICAgIEJ5IGRlZmF1bHQsIEhUTUwgdGhhdCBpc24ndCBleHBsaWNpdGx5IHRydXN0ZWQgKGUuZy4gQWxpY2UncyBjb21tZW50KSBpcyBzYW5pdGl6ZWQgd2hlblxuICogICAgICRzYW5pdGl6ZSBpcyBhdmFpbGFibGUuICBJZiAkc2FuaXRpemUgaXNuJ3QgYXZhaWxhYmxlLCB0aGlzIHJlc3VsdHMgaW4gYW4gZXJyb3IgaW5zdGVhZCBvZiBhblxuICogICAgIGV4cGxvaXQuXG4gKiAgICAgPGRpdiBjbGFzcz1cIndlbGxcIj5cbiAqICAgICAgIDxkaXYgbmctcmVwZWF0PVwidXNlckNvbW1lbnQgaW4gbXlDdHJsLnVzZXJDb21tZW50c1wiPlxuICogICAgICAgICA8Yj57e3VzZXJDb21tZW50Lm5hbWV9fTwvYj46XG4gKiAgICAgICAgIDxzcGFuIG5nLWJpbmQtaHRtbD1cInVzZXJDb21tZW50Lmh0bWxDb21tZW50XCIgY2xhc3M9XCJodG1sQ29tbWVudFwiPjwvc3Bhbj5cbiAqICAgICAgICAgPGJyPlxuICogICAgICAgPC9kaXY+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICogPC9maWxlPlxuICpcbiAqIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAqICAgYW5ndWxhci5tb2R1bGUoJ215U2NlQXBwJywgWyduZ1Nhbml0aXplJ10pXG4gKiAgICAgLmNvbnRyb2xsZXIoJ0FwcENvbnRyb2xsZXInLCBbJyRodHRwJywgJyR0ZW1wbGF0ZUNhY2hlJywgJyRzY2UnLFxuICogICAgICAgZnVuY3Rpb24oJGh0dHAsICR0ZW1wbGF0ZUNhY2hlLCAkc2NlKSB7XG4gKiAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAqICAgICAgICAgJGh0dHAuZ2V0KFwidGVzdF9kYXRhLmpzb25cIiwge2NhY2hlOiAkdGVtcGxhdGVDYWNoZX0pLnN1Y2Nlc3MoZnVuY3Rpb24odXNlckNvbW1lbnRzKSB7XG4gKiAgICAgICAgICAgc2VsZi51c2VyQ29tbWVudHMgPSB1c2VyQ29tbWVudHM7XG4gKiAgICAgICAgIH0pO1xuICogICAgICAgICBzZWxmLmV4cGxpY2l0bHlUcnVzdGVkSHRtbCA9ICRzY2UudHJ1c3RBc0h0bWwoXG4gKiAgICAgICAgICAgICAnPHNwYW4gb25tb3VzZW92ZXI9XCJ0aGlzLnRleHRDb250ZW50PSZxdW90O0V4cGxpY2l0bHkgdHJ1c3RlZCBIVE1MIGJ5cGFzc2VzICcgK1xuICogICAgICAgICAgICAgJ3Nhbml0aXphdGlvbi4mcXVvdDtcIj5Ib3ZlciBvdmVyIHRoaXMgdGV4dC48L3NwYW4+Jyk7XG4gKiAgICAgICB9XSk7XG4gKiA8L2ZpbGU+XG4gKlxuICogPGZpbGUgbmFtZT1cInRlc3RfZGF0YS5qc29uXCI+XG4gKiBbXG4gKiAgIHsgXCJuYW1lXCI6IFwiQWxpY2VcIixcbiAqICAgICBcImh0bWxDb21tZW50XCI6XG4gKiAgICAgICAgIFwiPHNwYW4gb25tb3VzZW92ZXI9J3RoaXMudGV4dENvbnRlbnQ9XFxcIlBXTjNEIVxcXCInPklzIDxpPmFueW9uZTwvaT4gcmVhZGluZyB0aGlzPzwvc3Bhbj5cIlxuICogICB9LFxuICogICB7IFwibmFtZVwiOiBcIkJvYlwiLFxuICogICAgIFwiaHRtbENvbW1lbnRcIjogXCI8aT5ZZXMhPC9pPiAgQW0gSSB0aGUgb25seSBvdGhlciBvbmU/XCJcbiAqICAgfVxuICogXVxuICogPC9maWxlPlxuICpcbiAqIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgZGVzY3JpYmUoJ1NDRSBkb2MgZGVtbycsIGZ1bmN0aW9uKCkge1xuICogICAgIGl0KCdzaG91bGQgc2FuaXRpemUgdW50cnVzdGVkIHZhbHVlcycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KGVsZW1lbnQuYWxsKGJ5LmNzcygnLmh0bWxDb21tZW50JykpLmZpcnN0KCkuZ2V0SW5uZXJIdG1sKCkpXG4gKiAgICAgICAgICAgLnRvQmUoJzxzcGFuPklzIDxpPmFueW9uZTwvaT4gcmVhZGluZyB0aGlzPzwvc3Bhbj4nKTtcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgaXQoJ3Nob3VsZCBOT1Qgc2FuaXRpemUgZXhwbGljaXRseSB0cnVzdGVkIHZhbHVlcycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2V4cGxpY2l0bHlUcnVzdGVkSHRtbCcpKS5nZXRJbm5lckh0bWwoKSkudG9CZShcbiAqICAgICAgICAgICAnPHNwYW4gb25tb3VzZW92ZXI9XCJ0aGlzLnRleHRDb250ZW50PSZxdW90O0V4cGxpY2l0bHkgdHJ1c3RlZCBIVE1MIGJ5cGFzc2VzICcgK1xuICogICAgICAgICAgICdzYW5pdGl6YXRpb24uJnF1b3Q7XCI+SG92ZXIgb3ZlciB0aGlzIHRleHQuPC9zcGFuPicpO1xuICogICAgIH0pO1xuICogICB9KTtcbiAqIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKlxuICpcbiAqICMjIENhbiBJIGRpc2FibGUgU0NFIGNvbXBsZXRlbHk/XG4gKlxuICogWWVzLCB5b3UgY2FuLiAgSG93ZXZlciwgdGhpcyBpcyBzdHJvbmdseSBkaXNjb3VyYWdlZC4gIFNDRSBnaXZlcyB5b3UgYSBsb3Qgb2Ygc2VjdXJpdHkgYmVuZWZpdHNcbiAqIGZvciBsaXR0bGUgY29kaW5nIG92ZXJoZWFkLiAgSXQgd2lsbCBiZSBtdWNoIGhhcmRlciB0byB0YWtlIGFuIFNDRSBkaXNhYmxlZCBhcHBsaWNhdGlvbiBhbmRcbiAqIGVpdGhlciBzZWN1cmUgaXQgb24geW91ciBvd24gb3IgZW5hYmxlIFNDRSBhdCBhIGxhdGVyIHN0YWdlLiAgSXQgbWlnaHQgbWFrZSBzZW5zZSB0byBkaXNhYmxlIFNDRVxuICogZm9yIGNhc2VzIHdoZXJlIHlvdSBoYXZlIGEgbG90IG9mIGV4aXN0aW5nIGNvZGUgdGhhdCB3YXMgd3JpdHRlbiBiZWZvcmUgU0NFIHdhcyBpbnRyb2R1Y2VkIGFuZFxuICogeW91J3JlIG1pZ3JhdGluZyB0aGVtIGEgbW9kdWxlIGF0IGEgdGltZS5cbiAqXG4gKiBUaGF0IHNhaWQsIGhlcmUncyBob3cgeW91IGNhbiBjb21wbGV0ZWx5IGRpc2FibGUgU0NFOlxuICpcbiAqIGBgYFxuICogYW5ndWxhci5tb2R1bGUoJ215QXBwV2l0aFNjZURpc2FibGVkbXlBcHAnLCBbXSkuY29uZmlnKGZ1bmN0aW9uKCRzY2VQcm92aWRlcikge1xuICogICAvLyBDb21wbGV0ZWx5IGRpc2FibGUgU0NFLiAgRm9yIGRlbW9uc3RyYXRpb24gcHVycG9zZXMgb25seSFcbiAqICAgLy8gRG8gbm90IHVzZSBpbiBuZXcgcHJvamVjdHMuXG4gKiAgICRzY2VQcm92aWRlci5lbmFibGVkKGZhbHNlKTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICovXG4vKiBqc2hpbnQgbWF4bGVuOiAxMDAgKi9cblxuZnVuY3Rpb24gJFNjZVByb3ZpZGVyKCkge1xuICB2YXIgZW5hYmxlZCA9IHRydWU7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHNjZVByb3ZpZGVyI2VuYWJsZWRcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gdmFsdWUgSWYgcHJvdmlkZWQsIHRoZW4gZW5hYmxlcy9kaXNhYmxlcyBTQ0UuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgU0NFIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEVuYWJsZXMvZGlzYWJsZXMgU0NFIGFuZCByZXR1cm5zIHRoZSBjdXJyZW50IHZhbHVlLlxuICAgKi9cbiAgdGhpcy5lbmFibGVkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgZW5hYmxlZCA9ICEhdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBlbmFibGVkO1xuICB9O1xuXG5cbiAgLyogRGVzaWduIG5vdGVzIG9uIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGZvciBTQ0UuXG4gICAqXG4gICAqIFRoZSBBUEkgY29udHJhY3QgZm9yIHRoZSBTQ0UgZGVsZWdhdGVcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBUaGUgU0NFIGRlbGVnYXRlIG9iamVjdCBtdXN0IHByb3ZpZGUgdGhlIGZvbGxvd2luZyAzIG1ldGhvZHM6XG4gICAqXG4gICAqIC0gdHJ1c3RBcyhjb250ZXh0RW51bSwgdmFsdWUpXG4gICAqICAgICBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIHRlbGwgdGhlIFNDRSBzZXJ2aWNlIHRoYXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIE9LIHRvIHVzZSBpbiB0aGVcbiAgICogICAgIGNvbnRleHRzIHNwZWNpZmllZCBieSBjb250ZXh0RW51bS4gIEl0IG11c3QgcmV0dXJuIGFuIG9iamVjdCB0aGF0IHdpbGwgYmUgYWNjZXB0ZWQgYnlcbiAgICogICAgIGdldFRydXN0ZWQoKSBmb3IgYSBjb21wYXRpYmxlIGNvbnRleHRFbnVtIGFuZCByZXR1cm4gdGhpcyB2YWx1ZS5cbiAgICpcbiAgICogLSB2YWx1ZU9mKHZhbHVlKVxuICAgKiAgICAgRm9yIHZhbHVlcyB0aGF0IHdlcmUgbm90IHByb2R1Y2VkIGJ5IHRydXN0QXMoKSwgcmV0dXJuIHRoZW0gYXMgaXMuICBGb3IgdmFsdWVzIHRoYXQgd2VyZVxuICAgKiAgICAgcHJvZHVjZWQgYnkgdHJ1c3RBcygpLCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgaW5wdXQgdmFsdWUgdG8gdHJ1c3RBcy4gIEJhc2ljYWxseSwgaWZcbiAgICogICAgIHRydXN0QXMgaXMgd3JhcHBpbmcgdGhlIGdpdmVuIHZhbHVlcyBpbnRvIHNvbWUgdHlwZSwgdGhpcyBvcGVyYXRpb24gdW53cmFwcyBpdCB3aGVuIGdpdmVuXG4gICAqICAgICBzdWNoIGEgdmFsdWUuXG4gICAqXG4gICAqIC0gZ2V0VHJ1c3RlZChjb250ZXh0RW51bSwgdmFsdWUpXG4gICAqICAgICBUaGlzIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gdGhlIGEgdmFsdWUgdGhhdCBpcyBzYWZlIHRvIHVzZSBpbiB0aGUgY29udGV4dCBzcGVjaWZpZWQgYnlcbiAgICogICAgIGNvbnRleHRFbnVtIG9yIHRocm93IGFuZCBleGNlcHRpb24gb3RoZXJ3aXNlLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIGNvbnRyYWN0IGRlbGliZXJhdGVseSBkb2VzIE5PVCBzdGF0ZSB0aGF0IHZhbHVlcyByZXR1cm5lZCBieSB0cnVzdEFzKCkgbXVzdCBiZVxuICAgKiBvcGFxdWUgb3Igd3JhcHBlZCBpbiBzb21lIGhvbGRlciBvYmplY3QuICBUaGF0IGhhcHBlbnMgdG8gYmUgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsLiAgRm9yXG4gICAqIGluc3RhbmNlLCBhbiBpbXBsZW1lbnRhdGlvbiBjb3VsZCBtYWludGFpbiBhIHJlZ2lzdHJ5IG9mIGFsbCB0cnVzdGVkIG9iamVjdHMgYnkgY29udGV4dC4gIEluXG4gICAqIHN1Y2ggYSBjYXNlLCB0cnVzdEFzKCkgd291bGQgcmV0dXJuIHRoZSBzYW1lIG9iamVjdCB0aGF0IHdhcyBwYXNzZWQgaW4uICBnZXRUcnVzdGVkKCkgd291bGRcbiAgICogcmV0dXJuIHRoZSBzYW1lIG9iamVjdCBwYXNzZWQgaW4gaWYgaXQgd2FzIGZvdW5kIGluIHRoZSByZWdpc3RyeSB1bmRlciBhIGNvbXBhdGlibGUgY29udGV4dCBvclxuICAgKiB0aHJvdyBhbiBleGNlcHRpb24gb3RoZXJ3aXNlLiAgQW4gaW1wbGVtZW50YXRpb24gbWlnaHQgb25seSB3cmFwIHZhbHVlcyBzb21lIG9mIHRoZSB0aW1lIGJhc2VkXG4gICAqIG9uIHNvbWUgY3JpdGVyaWEuICBnZXRUcnVzdGVkKCkgbWlnaHQgcmV0dXJuIGEgdmFsdWUgYW5kIG5vdCB0aHJvdyBhbiBleGNlcHRpb24gZm9yIHNwZWNpYWxcbiAgICogY29uc3RhbnRzIG9yIG9iamVjdHMgZXZlbiBpZiBub3Qgd3JhcHBlZC4gIEFsbCBzdWNoIGltcGxlbWVudGF0aW9ucyBmdWxmaWxsIHRoaXMgY29udHJhY3QuXG4gICAqXG4gICAqXG4gICAqIEEgbm90ZSBvbiB0aGUgaW5oZXJpdGFuY2UgbW9kZWwgZm9yIFNDRSBjb250ZXh0c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogSSd2ZSB1c2VkIGluaGVyaXRhbmNlIGFuZCBtYWRlIFJFU09VUkNFX1VSTCB3cmFwcGVkIHR5cGVzIGEgc3VidHlwZSBvZiBVUkwgd3JhcHBlZCB0eXBlcy4gIFRoaXNcbiAgICogaXMgcHVyZWx5IGFuIGltcGxlbWVudGF0aW9uIGRldGFpbHMuXG4gICAqXG4gICAqIFRoZSBjb250cmFjdCBpcyBzaW1wbHkgdGhpczpcbiAgICpcbiAgICogICAgIGdldFRydXN0ZWQoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKSBzdWNjZWVkaW5nIGltcGxpZXMgdGhhdCBnZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlcbiAgICogICAgIHdpbGwgYWxzbyBzdWNjZWVkLlxuICAgKlxuICAgKiBJbmhlcml0YW5jZSBoYXBwZW5zIHRvIGNhcHR1cmUgdGhpcyBpbiBhIG5hdHVyYWwgd2F5LiAgSW4gc29tZSBmdXR1cmUsIHdlXG4gICAqIG1heSBub3QgdXNlIGluaGVyaXRhbmNlIGFueW1vcmUuICBUaGF0IGlzIE9LIGJlY2F1c2Ugbm8gY29kZSBvdXRzaWRlIG9mXG4gICAqIHNjZS5qcyBhbmQgc2NlU3BlY3MuanMgd291bGQgbmVlZCB0byBiZSBhd2FyZSBvZiB0aGlzIGRldGFpbC5cbiAgICovXG5cbiAgdGhpcy4kZ2V0ID0gWyckcGFyc2UnLCAnJHNjZURlbGVnYXRlJywgZnVuY3Rpb24oXG4gICAgICAgICAgICAgICAgJHBhcnNlLCAgICRzY2VEZWxlZ2F0ZSkge1xuICAgIC8vIFByZXJlcTogRW5zdXJlIHRoYXQgd2UncmUgbm90IHJ1bm5pbmcgaW4gSUU8MTEgcXVpcmtzIG1vZGUuICBJbiB0aGF0IG1vZGUsIElFIDwgMTEgYWxsb3dcbiAgICAvLyB0aGUgXCJleHByZXNzaW9uKGphdmFzY3JpcHQgZXhwcmVzc2lvbilcIiBzeW50YXggd2hpY2ggaXMgaW5zZWN1cmUuXG4gICAgaWYgKGVuYWJsZWQgJiYgbXNpZSA8IDgpIHtcbiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2llcXVpcmtzJyxcbiAgICAgICAgJ1N0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGRvZXMgbm90IHN1cHBvcnQgSW50ZXJuZXQgRXhwbG9yZXIgdmVyc2lvbiA8IDExIGluIHF1aXJrcyAnICtcbiAgICAgICAgJ21vZGUuICBZb3UgY2FuIGZpeCB0aGlzIGJ5IGFkZGluZyB0aGUgdGV4dCA8IWRvY3R5cGUgaHRtbD4gdG8gdGhlIHRvcCBvZiB5b3VyIEhUTUwgJyArXG4gICAgICAgICdkb2N1bWVudC4gIFNlZSBodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9uZy4kc2NlIGZvciBtb3JlIGluZm9ybWF0aW9uLicpO1xuICAgIH1cblxuICAgIHZhciBzY2UgPSBzaGFsbG93Q29weShTQ0VfQ09OVEVYVFMpO1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjaXNFbmFibGVkXG4gICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgU0NFIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS4gIElmIHlvdSB3YW50IHRvIHNldCB0aGUgdmFsdWUsIHlvdVxuICAgICAqIGhhdmUgdG8gZG8gaXQgYXQgbW9kdWxlIGNvbmZpZyB0aW1lIG9uIHtAbGluayBuZy4kc2NlUHJvdmlkZXIgJHNjZVByb3ZpZGVyfS5cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgU0NFIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgc2NlLmlzRW5hYmxlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGVuYWJsZWQ7XG4gICAgfTtcbiAgICBzY2UudHJ1c3RBcyA9ICRzY2VEZWxlZ2F0ZS50cnVzdEFzO1xuICAgIHNjZS5nZXRUcnVzdGVkID0gJHNjZURlbGVnYXRlLmdldFRydXN0ZWQ7XG4gICAgc2NlLnZhbHVlT2YgPSAkc2NlRGVsZWdhdGUudmFsdWVPZjtcblxuICAgIGlmICghZW5hYmxlZCkge1xuICAgICAgc2NlLnRydXN0QXMgPSBzY2UuZ2V0VHJ1c3RlZCA9IGZ1bmN0aW9uKHR5cGUsIHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbiAgICAgIHNjZS52YWx1ZU9mID0gaWRlbnRpdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQ29udmVydHMgQW5ndWxhciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpbnRvIGEgZnVuY3Rpb24uICBUaGlzIGlzIGxpa2Uge0BsaW5rXG4gICAgICogbmcuJHBhcnNlICRwYXJzZX0gYW5kIGlzIGlkZW50aWNhbCB3aGVuIHRoZSBleHByZXNzaW9uIGlzIGEgbGl0ZXJhbCBjb25zdGFudC4gIE90aGVyd2lzZSwgaXRcbiAgICAgKiB3cmFwcyB0aGUgZXhwcmVzc2lvbiBpbiBhIGNhbGwgdG8ge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZCAkc2NlLmdldFRydXN0ZWQoKnR5cGUqLFxuICAgICAqICpyZXN1bHQqKX1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBraW5kIG9mIFNDRSBjb250ZXh0IGluIHdoaWNoIHRoaXMgcmVzdWx0IHdpbGwgYmUgdXNlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICpcbiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXG4gICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxuICAgICAqICAgICAgYGNvbnRleHRgLlxuICAgICAqL1xuICAgIHNjZS5wYXJzZUFzID0gZnVuY3Rpb24gc2NlUGFyc2VBcyh0eXBlLCBleHByKSB7XG4gICAgICB2YXIgcGFyc2VkID0gJHBhcnNlKGV4cHIpO1xuICAgICAgaWYgKHBhcnNlZC5saXRlcmFsICYmIHBhcnNlZC5jb25zdGFudCkge1xuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICRwYXJzZShleHByLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzY2UuZ2V0VHJ1c3RlZCh0eXBlLCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBEZWxlZ2F0ZXMgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LiAgQXMgc3VjaCxcbiAgICAgKiByZXR1cm5zIGFuIG9iamVjdCB0aGF0IGlzIHRydXN0ZWQgYnkgYW5ndWxhciBmb3IgdXNlIGluIHNwZWNpZmllZCBzdHJpY3QgY29udGV4dHVhbFxuICAgICAqIGVzY2FwaW5nIGNvbnRleHRzIChzdWNoIGFzIG5nLWJpbmQtaHRtbCwgbmctaW5jbHVkZSwgYW55IHNyYyBhdHRyaWJ1dGVcbiAgICAgKiBpbnRlcnBvbGF0aW9uLCBhbnkgZG9tIGV2ZW50IGJpbmRpbmcgYXR0cmlidXRlIGludGVycG9sYXRpb24gc3VjaCBhcyBmb3Igb25jbGljaywgIGV0Yy4pXG4gICAgICogdGhhdCB1c2VzIHRoZSBwcm92aWRlZCB2YWx1ZS4gIFNlZSAqIHtAbGluayBuZy4kc2NlICRzY2V9IGZvciBlbmFibGluZyBzdHJpY3QgY29udGV4dHVhbFxuICAgICAqIGVzY2FwaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGtpbmQgb2YgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHNhZmUgZm9yIHVzZS4gIGUuZy4gdXJsLFxuICAgICAqICAgcmVzb3VyY2VVcmwsIGh0bWwsIGpzIGFuZCBjc3MuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdGhhdCB0aGF0IHNob3VsZCBiZSBjb25zaWRlcmVkIHRydXN0ZWQvc2FmZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gQSB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIHRvIHN0YW5kIGluIGZvciB0aGUgcHJvdmlkZWQgYHZhbHVlYCBpbiBwbGFjZXNcbiAgICAgKiB3aGVyZSBBbmd1bGFyIGV4cGVjdHMgYSAkc2NlLnRydXN0QXMoKSByZXR1cm4gdmFsdWUuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzSHRtbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnRydXN0QXNIdG1sKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5IVE1MLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdHJ1c3RBcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gQW4gb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkSHRtbFxuICAgICAqICAgICAkc2NlLmdldFRydXN0ZWRIdG1sKHZhbHVlKX0gdG8gb2J0YWluIHRoZSBvcmlnaW5hbCB2YWx1ZS4gIChwcml2aWxlZ2VkIGRpcmVjdGl2ZXNcbiAgICAgKiAgICAgb25seSBhY2NlcHQgZXhwcmVzc2lvbnMgdGhhdCBhcmUgZWl0aGVyIGxpdGVyYWwgY29uc3RhbnRzIG9yIGFyZSB0aGVcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlIG9mIHtAbGluayBuZy4kc2NlI3RydXN0QXMgJHNjZS50cnVzdEFzfS4pXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzVXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc1VybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzKCRzY2UuVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdHJ1c3RBcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gQW4gb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkVXJsXG4gICAgICogICAgICRzY2UuZ2V0VHJ1c3RlZFVybCh2YWx1ZSl9IHRvIG9idGFpbiB0aGUgb3JpZ2luYWwgdmFsdWUuICAocHJpdmlsZWdlZCBkaXJlY3RpdmVzXG4gICAgICogICAgIG9ubHkgYWNjZXB0IGV4cHJlc3Npb25zIHRoYXQgYXJlIGVpdGhlciBsaXRlcmFsIGNvbnN0YW50cyBvciBhcmUgdGhlXG4gICAgICogICAgIHJldHVybiB2YWx1ZSBvZiB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc30uKVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc1Jlc291cmNlVXJsKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB0cnVzdEFzLlxuICAgICAqIEByZXR1cm5zIHsqfSBBbiBvYmplY3QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybFxuICAgICAqICAgICAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybCh2YWx1ZSl9IHRvIG9idGFpbiB0aGUgb3JpZ2luYWwgdmFsdWUuICAocHJpdmlsZWdlZCBkaXJlY3RpdmVzXG4gICAgICogICAgIG9ubHkgYWNjZXB0IGV4cHJlc3Npb25zIHRoYXQgYXJlIGVpdGhlciBsaXRlcmFsIGNvbnN0YW50cyBvciBhcmUgdGhlIHJldHVyblxuICAgICAqICAgICB2YWx1ZSBvZiB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc30uKVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc0pzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc0pzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5KUywgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHRydXN0QXMuXG4gICAgICogQHJldHVybnMgeyp9IEFuIG9iamVjdCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8ge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZEpzXG4gICAgICogICAgICRzY2UuZ2V0VHJ1c3RlZEpzKHZhbHVlKX0gdG8gb2J0YWluIHRoZSBvcmlnaW5hbCB2YWx1ZS4gIChwcml2aWxlZ2VkIGRpcmVjdGl2ZXNcbiAgICAgKiAgICAgb25seSBhY2NlcHQgZXhwcmVzc2lvbnMgdGhhdCBhcmUgZWl0aGVyIGxpdGVyYWwgY29uc3RhbnRzIG9yIGFyZSB0aGVcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlIG9mIHtAbGluayBuZy4kc2NlI3RydXN0QXMgJHNjZS50cnVzdEFzfS4pXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBEZWxlZ2F0ZXMgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZGB9LiAgQXMgc3VjaCxcbiAgICAgKiB0YWtlcyB0aGUgcmVzdWx0IG9mIGEge0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyBgJHNjZS50cnVzdEFzYH0oKSBjYWxsIGFuZCByZXR1cm5zIHRoZVxuICAgICAqIG9yaWdpbmFsbHkgc3VwcGxpZWQgdmFsdWUgaWYgdGhlIHF1ZXJpZWQgY29udGV4dCB0eXBlIGlzIGEgc3VwZXJ0eXBlIG9mIHRoZSBjcmVhdGVkIHR5cGUuXG4gICAgICogSWYgdGhpcyBjb25kaXRpb24gaXNuJ3Qgc2F0aXNmaWVkLCB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGtpbmQgb2YgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHRvIGJlIHVzZWQuXG4gICAgICogQHBhcmFtIHsqfSBtYXliZVRydXN0ZWQgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlI3RydXN0QXMgYCRzY2UudHJ1c3RBc2B9XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgY2FsbC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIHRoZSB3YXMgb3JpZ2luYWxseSBwcm92aWRlZCB0b1xuICAgICAqICAgICAgICAgICAgICB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzIGAkc2NlLnRydXN0QXNgfSBpZiB2YWxpZCBpbiB0aGlzIGNvbnRleHQuXG4gICAgICogICAgICAgICAgICAgIE90aGVyd2lzZSwgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRIdG1sXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZEh0bWwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLkhUTUwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlLmdldFRydXN0ZWRgLlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5IVE1MLCB2YWx1ZSlgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkQ3NzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZENzcyh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuQ1NTLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZS5nZXRUcnVzdGVkYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuQ1NTLCB2YWx1ZSlgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkVXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZFVybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZS5nZXRUcnVzdGVkYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSlgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkSnNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkSnModmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLkpTLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZS5nZXRUcnVzdGVkYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuSlMsIHZhbHVlKWBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNIdG1sXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc0h0bWwoZXhwcmVzc2lvbiBzdHJpbmcpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuSFRNTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3NcbiAgICAgKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluXG4gICAgICogICAgICBgY29udGV4dGAuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzQ3NzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc0Nzcyh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZUFzIGAkc2NlLnBhcnNlQXMoJHNjZS5DU1MsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICpcbiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXG4gICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxuICAgICAqICAgICAgYGNvbnRleHRgLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc1VybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5nc1xuICAgICAqICAgICAgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW5cbiAgICAgKiAgICAgIGBjb250ZXh0YC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNSZXNvdXJjZVVybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNSZXNvdXJjZVVybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZUFzIGAkc2NlLnBhcnNlQXMoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICpcbiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXG4gICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxuICAgICAqICAgICAgYGNvbnRleHRgLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc0pzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc0pzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlQXMgYCRzY2UucGFyc2VBcygkc2NlLkpTLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5nc1xuICAgICAqICAgICAgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW5cbiAgICAgKiAgICAgIGBjb250ZXh0YC5cbiAgICAgKi9cblxuICAgIC8vIFNob3J0aGFuZCBkZWxlZ2F0aW9ucy5cbiAgICB2YXIgcGFyc2UgPSBzY2UucGFyc2VBcyxcbiAgICAgICAgZ2V0VHJ1c3RlZCA9IHNjZS5nZXRUcnVzdGVkLFxuICAgICAgICB0cnVzdEFzID0gc2NlLnRydXN0QXM7XG5cbiAgICBmb3JFYWNoKFNDRV9DT05URVhUUywgZnVuY3Rpb24oZW51bVZhbHVlLCBuYW1lKSB7XG4gICAgICB2YXIgbE5hbWUgPSBsb3dlcmNhc2UobmFtZSk7XG4gICAgICBzY2VbY2FtZWxDYXNlKFwicGFyc2VfYXNfXCIgKyBsTmFtZSldID0gZnVuY3Rpb24oZXhwcikge1xuICAgICAgICByZXR1cm4gcGFyc2UoZW51bVZhbHVlLCBleHByKTtcbiAgICAgIH07XG4gICAgICBzY2VbY2FtZWxDYXNlKFwiZ2V0X3RydXN0ZWRfXCIgKyBsTmFtZSldID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGdldFRydXN0ZWQoZW51bVZhbHVlLCB2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgc2NlW2NhbWVsQ2FzZShcInRydXN0X2FzX1wiICsgbE5hbWUpXSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0cnVzdEFzKGVudW1WYWx1ZSwgdmFsdWUpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIHJldHVybiBzY2U7XG4gIH1dO1xufVxuXG4vKipcbiAqICEhISBUaGlzIGlzIGFuIHVuZG9jdW1lbnRlZCBcInByaXZhdGVcIiBzZXJ2aWNlICEhIVxuICpcbiAqIEBuYW1lICRzbmlmZmVyXG4gKiBAcmVxdWlyZXMgJHdpbmRvd1xuICogQHJlcXVpcmVzICRkb2N1bWVudFxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaGlzdG9yeSBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgaHRtbDUgaGlzdG9yeSBhcGkgP1xuICogQHByb3BlcnR5IHtib29sZWFufSB0cmFuc2l0aW9ucyBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgQ1NTIHRyYW5zaXRpb24gZXZlbnRzID9cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gYW5pbWF0aW9ucyBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgQ1NTIGFuaW1hdGlvbiBldmVudHMgP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBpcyB2ZXJ5IHNpbXBsZSBpbXBsZW1lbnRhdGlvbiBvZiB0ZXN0aW5nIGJyb3dzZXIncyBmZWF0dXJlcy5cbiAqL1xuZnVuY3Rpb24gJFNuaWZmZXJQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCR3aW5kb3csICRkb2N1bWVudCkge1xuICAgIHZhciBldmVudFN1cHBvcnQgPSB7fSxcbiAgICAgICAgYW5kcm9pZCA9XG4gICAgICAgICAgdG9JbnQoKC9hbmRyb2lkIChcXGQrKS8uZXhlYyhsb3dlcmNhc2UoKCR3aW5kb3cubmF2aWdhdG9yIHx8IHt9KS51c2VyQWdlbnQpKSB8fCBbXSlbMV0pLFxuICAgICAgICBib3hlZSA9IC9Cb3hlZS9pLnRlc3QoKCR3aW5kb3cubmF2aWdhdG9yIHx8IHt9KS51c2VyQWdlbnQpLFxuICAgICAgICBkb2N1bWVudCA9ICRkb2N1bWVudFswXSB8fCB7fSxcbiAgICAgICAgdmVuZG9yUHJlZml4LFxuICAgICAgICB2ZW5kb3JSZWdleCA9IC9eKE1venx3ZWJraXR8bXMpKD89W0EtWl0pLyxcbiAgICAgICAgYm9keVN0eWxlID0gZG9jdW1lbnQuYm9keSAmJiBkb2N1bWVudC5ib2R5LnN0eWxlLFxuICAgICAgICB0cmFuc2l0aW9ucyA9IGZhbHNlLFxuICAgICAgICBhbmltYXRpb25zID0gZmFsc2UsXG4gICAgICAgIG1hdGNoO1xuXG4gICAgaWYgKGJvZHlTdHlsZSkge1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiBib2R5U3R5bGUpIHtcbiAgICAgICAgaWYgKG1hdGNoID0gdmVuZG9yUmVnZXguZXhlYyhwcm9wKSkge1xuICAgICAgICAgIHZlbmRvclByZWZpeCA9IG1hdGNoWzBdO1xuICAgICAgICAgIHZlbmRvclByZWZpeCA9IHZlbmRvclByZWZpeC5zdWJzdHIoMCwgMSkudG9VcHBlckNhc2UoKSArIHZlbmRvclByZWZpeC5zdWJzdHIoMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF2ZW5kb3JQcmVmaXgpIHtcbiAgICAgICAgdmVuZG9yUHJlZml4ID0gKCdXZWJraXRPcGFjaXR5JyBpbiBib2R5U3R5bGUpICYmICd3ZWJraXQnO1xuICAgICAgfVxuXG4gICAgICB0cmFuc2l0aW9ucyA9ICEhKCgndHJhbnNpdGlvbicgaW4gYm9keVN0eWxlKSB8fCAodmVuZG9yUHJlZml4ICsgJ1RyYW5zaXRpb24nIGluIGJvZHlTdHlsZSkpO1xuICAgICAgYW5pbWF0aW9ucyAgPSAhISgoJ2FuaW1hdGlvbicgaW4gYm9keVN0eWxlKSB8fCAodmVuZG9yUHJlZml4ICsgJ0FuaW1hdGlvbicgaW4gYm9keVN0eWxlKSk7XG5cbiAgICAgIGlmIChhbmRyb2lkICYmICghdHJhbnNpdGlvbnMgfHwgICFhbmltYXRpb25zKSkge1xuICAgICAgICB0cmFuc2l0aW9ucyA9IGlzU3RyaW5nKGJvZHlTdHlsZS53ZWJraXRUcmFuc2l0aW9uKTtcbiAgICAgICAgYW5pbWF0aW9ucyA9IGlzU3RyaW5nKGJvZHlTdHlsZS53ZWJraXRBbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIEFuZHJvaWQgaGFzIGhpc3RvcnkucHVzaFN0YXRlLCBidXQgaXQgZG9lcyBub3QgdXBkYXRlIGxvY2F0aW9uIGNvcnJlY3RseVxuICAgICAgLy8gc28gbGV0J3Mgbm90IHVzZSB0aGUgaGlzdG9yeSBBUEkgYXQgYWxsLlxuICAgICAgLy8gaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2FuZHJvaWQvaXNzdWVzL2RldGFpbD9pZD0xNzQ3MVxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvOTA0XG5cbiAgICAgIC8vIG9sZGVyIHdlYmtpdCBicm93c2VyICg1MzMuOSkgb24gQm94ZWUgYm94IGhhcyBleGFjdGx5IHRoZSBzYW1lIHByb2JsZW0gYXMgQW5kcm9pZCBoYXNcbiAgICAgIC8vIHNvIGxldCdzIG5vdCB1c2UgdGhlIGhpc3RvcnkgQVBJIGFsc29cbiAgICAgIC8vIFdlIGFyZSBwdXJwb3NlZnVsbHkgdXNpbmcgYCEoYW5kcm9pZCA8IDQpYCB0byBjb3ZlciB0aGUgY2FzZSB3aGVuIGBhbmRyb2lkYCBpcyB1bmRlZmluZWRcbiAgICAgIC8vIGpzaGludCAtVzAxOFxuICAgICAgaGlzdG9yeTogISEoJHdpbmRvdy5oaXN0b3J5ICYmICR3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUgJiYgIShhbmRyb2lkIDwgNCkgJiYgIWJveGVlKSxcbiAgICAgIC8vIGpzaGludCArVzAxOFxuICAgICAgaGFzRXZlbnQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIC8vIElFOSBpbXBsZW1lbnRzICdpbnB1dCcgZXZlbnQgaXQncyBzbyBmdWJhcmVkIHRoYXQgd2UgcmF0aGVyIHByZXRlbmQgdGhhdCBpdCBkb2Vzbid0IGhhdmVcbiAgICAgICAgLy8gaXQuIEluIHBhcnRpY3VsYXIgdGhlIGV2ZW50IGlzIG5vdCBmaXJlZCB3aGVuIGJhY2tzcGFjZSBvciBkZWxldGUga2V5IGFyZSBwcmVzc2VkIG9yXG4gICAgICAgIC8vIHdoZW4gY3V0IG9wZXJhdGlvbiBpcyBwZXJmb3JtZWQuXG4gICAgICAgIC8vIElFMTArIGltcGxlbWVudHMgJ2lucHV0JyBldmVudCBidXQgaXQgZXJyb25lb3VzbHkgZmlyZXMgdW5kZXIgdmFyaW91cyBzaXR1YXRpb25zLFxuICAgICAgICAvLyBlLmcuIHdoZW4gcGxhY2Vob2xkZXIgY2hhbmdlcywgb3IgYSBmb3JtIGlzIGZvY3VzZWQuXG4gICAgICAgIGlmIChldmVudCA9PT0gJ2lucHV0JyAmJiBtc2llIDw9IDExKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGV2ZW50U3VwcG9ydFtldmVudF0pKSB7XG4gICAgICAgICAgdmFyIGRpdkVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIGV2ZW50U3VwcG9ydFtldmVudF0gPSAnb24nICsgZXZlbnQgaW4gZGl2RWxtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV2ZW50U3VwcG9ydFtldmVudF07XG4gICAgICB9LFxuICAgICAgY3NwOiBjc3AoKSxcbiAgICAgIHZlbmRvclByZWZpeDogdmVuZG9yUHJlZml4LFxuICAgICAgdHJhbnNpdGlvbnM6IHRyYW5zaXRpb25zLFxuICAgICAgYW5pbWF0aW9uczogYW5pbWF0aW9ucyxcbiAgICAgIGFuZHJvaWQ6IGFuZHJvaWRcbiAgICB9O1xuICB9XTtcbn1cblxudmFyICRjb21waWxlTWluRXJyID0gbWluRXJyKCckY29tcGlsZScpO1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkdGVtcGxhdGVSZXF1ZXN0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYCR0ZW1wbGF0ZVJlcXVlc3RgIHNlcnZpY2UgcnVucyBzZWN1cml0eSBjaGVja3MgdGhlbiBkb3dubG9hZHMgdGhlIHByb3ZpZGVkIHRlbXBsYXRlIHVzaW5nXG4gKiBgJGh0dHBgIGFuZCwgdXBvbiBzdWNjZXNzLCBzdG9yZXMgdGhlIGNvbnRlbnRzIGluc2lkZSBvZiBgJHRlbXBsYXRlQ2FjaGVgLiBJZiB0aGUgSFRUUCByZXF1ZXN0XG4gKiBmYWlscyBvciB0aGUgcmVzcG9uc2UgZGF0YSBvZiB0aGUgSFRUUCByZXF1ZXN0IGlzIGVtcHR5LCBhIGAkY29tcGlsZWAgZXJyb3Igd2lsbCBiZSB0aHJvd24gKHRoZVxuICogZXhjZXB0aW9uIGNhbiBiZSB0aHdhcnRlZCBieSBzZXR0aW5nIHRoZSAybmQgcGFyYW1ldGVyIG9mIHRoZSBmdW5jdGlvbiB0byB0cnVlKS4gTm90ZSB0aGF0IHRoZVxuICogY29udGVudHMgb2YgYCR0ZW1wbGF0ZUNhY2hlYCBhcmUgdHJ1c3RlZCwgc28gdGhlIGNhbGwgdG8gYCRzY2UuZ2V0VHJ1c3RlZFVybCh0cGwpYCBpcyBvbWl0dGVkXG4gKiB3aGVuIGB0cGxgIGlzIG9mIHR5cGUgc3RyaW5nIGFuZCBgJHRlbXBsYXRlQ2FjaGVgIGhhcyB0aGUgbWF0Y2hpbmcgZW50cnkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8VHJ1c3RlZFJlc291cmNlVXJsfSB0cGwgVGhlIEhUVFAgcmVxdWVzdCB0ZW1wbGF0ZSBVUkxcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGlnbm9yZVJlcXVlc3RFcnJvciBXaGV0aGVyIG9yIG5vdCB0byBpZ25vcmUgdGhlIGV4Y2VwdGlvbiB3aGVuIHRoZSByZXF1ZXN0IGZhaWxzIG9yIHRoZSB0ZW1wbGF0ZSBpcyBlbXB0eVxuICpcbiAqIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSBmb3IgdGhlIEhUVFAgcmVzcG9uc2UgZGF0YSBvZiB0aGUgZ2l2ZW4gVVJMLlxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0b3RhbFBlbmRpbmdSZXF1ZXN0cyB0b3RhbCBhbW91bnQgb2YgcGVuZGluZyB0ZW1wbGF0ZSByZXF1ZXN0cyBiZWluZyBkb3dubG9hZGVkLlxuICovXG5mdW5jdGlvbiAkVGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHRlbXBsYXRlQ2FjaGUnLCAnJGh0dHAnLCAnJHEnLCAnJHNjZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlLCAkaHR0cCwgJHEsICRzY2UpIHtcbiAgICBmdW5jdGlvbiBoYW5kbGVSZXF1ZXN0Rm4odHBsLCBpZ25vcmVSZXF1ZXN0RXJyb3IpIHtcbiAgICAgIGhhbmRsZVJlcXVlc3RGbi50b3RhbFBlbmRpbmdSZXF1ZXN0cysrO1xuXG4gICAgICAvLyBXZSBjb25zaWRlciB0aGUgdGVtcGxhdGUgY2FjaGUgaG9sZHMgb25seSB0cnVzdGVkIHRlbXBsYXRlcywgc29cbiAgICAgIC8vIHRoZXJlJ3Mgbm8gbmVlZCB0byBnbyB0aHJvdWdoIHdoaXRlbGlzdGluZyBhZ2FpbiBmb3Iga2V5cyB0aGF0IGFscmVhZHlcbiAgICAgIC8vIGFyZSBpbmNsdWRlZCBpbiB0aGVyZS4gVGhpcyBhbHNvIG1ha2VzIEFuZ3VsYXIgYWNjZXB0IGFueSBzY3JpcHRcbiAgICAgIC8vIGRpcmVjdGl2ZSwgbm8gbWF0dGVyIGl0cyBuYW1lLiBIb3dldmVyLCB3ZSBzdGlsbCBuZWVkIHRvIHVud3JhcCB0cnVzdGVkXG4gICAgICAvLyB0eXBlcy5cbiAgICAgIGlmICghaXNTdHJpbmcodHBsKSB8fCAhJHRlbXBsYXRlQ2FjaGUuZ2V0KHRwbCkpIHtcbiAgICAgICAgdHBsID0gJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwodHBsKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRyYW5zZm9ybVJlc3BvbnNlID0gJGh0dHAuZGVmYXVsdHMgJiYgJGh0dHAuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2U7XG5cbiAgICAgIGlmIChpc0FycmF5KHRyYW5zZm9ybVJlc3BvbnNlKSkge1xuICAgICAgICB0cmFuc2Zvcm1SZXNwb25zZSA9IHRyYW5zZm9ybVJlc3BvbnNlLmZpbHRlcihmdW5jdGlvbih0cmFuc2Zvcm1lcikge1xuICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1lciAhPT0gZGVmYXVsdEh0dHBSZXNwb25zZVRyYW5zZm9ybTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHRyYW5zZm9ybVJlc3BvbnNlID09PSBkZWZhdWx0SHR0cFJlc3BvbnNlVHJhbnNmb3JtKSB7XG4gICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGh0dHBPcHRpb25zID0ge1xuICAgICAgICBjYWNoZTogJHRlbXBsYXRlQ2FjaGUsXG4gICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlOiB0cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuICRodHRwLmdldCh0cGwsIGh0dHBPcHRpb25zKVxuICAgICAgICBbJ2ZpbmFsbHknXShmdW5jdGlvbigpIHtcbiAgICAgICAgICBoYW5kbGVSZXF1ZXN0Rm4udG90YWxQZW5kaW5nUmVxdWVzdHMtLTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAkdGVtcGxhdGVDYWNoZS5wdXQodHBsLCByZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgfSwgaGFuZGxlRXJyb3IpO1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVFcnJvcihyZXNwKSB7XG4gICAgICAgIGlmICghaWdub3JlUmVxdWVzdEVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3RwbG9hZCcsICdGYWlsZWQgdG8gbG9hZCB0ZW1wbGF0ZTogezB9IChIVFRQIHN0YXR1czogezF9IHsyfSknLFxuICAgICAgICAgICAgdHBsLCByZXNwLnN0YXR1cywgcmVzcC5zdGF0dXNUZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlc3ApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZVJlcXVlc3RGbi50b3RhbFBlbmRpbmdSZXF1ZXN0cyA9IDA7XG5cbiAgICByZXR1cm4gaGFuZGxlUmVxdWVzdEZuO1xuICB9XTtcbn1cblxuZnVuY3Rpb24gJCRUZXN0YWJpbGl0eVByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGJyb3dzZXInLCAnJGxvY2F0aW9uJyxcbiAgICAgICBmdW5jdGlvbigkcm9vdFNjb3BlLCAgICRicm93c2VyLCAgICRsb2NhdGlvbikge1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJHRlc3RhYmlsaXR5XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBUaGUgcHJpdmF0ZSAkJHRlc3RhYmlsaXR5IHNlcnZpY2UgcHJvdmlkZXMgYSBjb2xsZWN0aW9uIG9mIG1ldGhvZHMgZm9yIHVzZSB3aGVuIGRlYnVnZ2luZ1xuICAgICAqIG9yIGJ5IGF1dG9tYXRlZCB0ZXN0IGFuZCBkZWJ1Z2dpbmcgdG9vbHMuXG4gICAgICovXG4gICAgdmFyIHRlc3RhYmlsaXR5ID0ge307XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSAkJHRlc3RhYmlsaXR5I2ZpbmRCaW5kaW5nc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSBib3VuZCAodmlhIG5nLWJpbmQgb3Ige3t9fSlcbiAgICAgKiB0byBleHByZXNzaW9ucyBtYXRjaGluZyB0aGUgaW5wdXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgcm9vdCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBUaGUgYmluZGluZyBleHByZXNzaW9uIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X2V4YWN0TWF0Y2ggSWYgdHJ1ZSwgb25seSByZXR1cm5zIGV4YWN0IG1hdGNoZXNcbiAgICAgKiAgICAgZm9yIHRoZSBleHByZXNzaW9uLiBGaWx0ZXJzIGFuZCB3aGl0ZXNwYWNlIGFyZSBpZ25vcmVkLlxuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LmZpbmRCaW5kaW5ncyA9IGZ1bmN0aW9uKGVsZW1lbnQsIGV4cHJlc3Npb24sIG9wdF9leGFjdE1hdGNoKSB7XG4gICAgICB2YXIgYmluZGluZ3MgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25nLWJpbmRpbmcnKTtcbiAgICAgIHZhciBtYXRjaGVzID0gW107XG4gICAgICBmb3JFYWNoKGJpbmRpbmdzLCBmdW5jdGlvbihiaW5kaW5nKSB7XG4gICAgICAgIHZhciBkYXRhQmluZGluZyA9IGFuZ3VsYXIuZWxlbWVudChiaW5kaW5nKS5kYXRhKCckYmluZGluZycpO1xuICAgICAgICBpZiAoZGF0YUJpbmRpbmcpIHtcbiAgICAgICAgICBmb3JFYWNoKGRhdGFCaW5kaW5nLCBmdW5jdGlvbihiaW5kaW5nTmFtZSkge1xuICAgICAgICAgICAgaWYgKG9wdF9leGFjdE1hdGNoKSB7XG4gICAgICAgICAgICAgIHZhciBtYXRjaGVyID0gbmV3IFJlZ0V4cCgnKF58XFxcXHMpJyArIGVzY2FwZUZvclJlZ2V4cChleHByZXNzaW9uKSArICcoXFxcXHN8XFxcXHx8JCknKTtcbiAgICAgICAgICAgICAgaWYgKG1hdGNoZXIudGVzdChiaW5kaW5nTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goYmluZGluZyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChiaW5kaW5nTmFtZS5pbmRleE9mKGV4cHJlc3Npb24pICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGJpbmRpbmcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZmluZE1vZGVsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSB0d28td2F5IGZvdW5kIHZpYSBuZy1tb2RlbCB0b1xuICAgICAqIGV4cHJlc3Npb25zIG1hdGNoaW5nIHRoZSBpbnB1dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCByb290IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFRoZSBtb2RlbCBleHByZXNzaW9uIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X2V4YWN0TWF0Y2ggSWYgdHJ1ZSwgb25seSByZXR1cm5zIGV4YWN0IG1hdGNoZXNcbiAgICAgKiAgICAgZm9yIHRoZSBleHByZXNzaW9uLlxuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LmZpbmRNb2RlbHMgPSBmdW5jdGlvbihlbGVtZW50LCBleHByZXNzaW9uLCBvcHRfZXhhY3RNYXRjaCkge1xuICAgICAgdmFyIHByZWZpeGVzID0gWyduZy0nLCAnZGF0YS1uZy0nLCAnbmdcXFxcOiddO1xuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBwcmVmaXhlcy5sZW5ndGg7ICsrcCkge1xuICAgICAgICB2YXIgYXR0cmlidXRlRXF1YWxzID0gb3B0X2V4YWN0TWF0Y2ggPyAnPScgOiAnKj0nO1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSAnWycgKyBwcmVmaXhlc1twXSArICdtb2RlbCcgKyBhdHRyaWJ1dGVFcXVhbHMgKyAnXCInICsgZXhwcmVzc2lvbiArICdcIl0nO1xuICAgICAgICB2YXIgZWxlbWVudHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAgICBpZiAoZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZ2V0TG9jYXRpb25cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IGZvciBnZXR0aW5nIHRoZSBsb2NhdGlvbiBpbiBhIGJyb3dzZXIgYWdub3N0aWMgd2F5LiBSZXR1cm5zXG4gICAgICogICAgIHRoZSBwYXRoLCBzZWFyY2gsIGFuZCBoYXNoLiAoZS5nLiAvcGF0aD9hPWIjaGFzaClcbiAgICAgKi9cbiAgICB0ZXN0YWJpbGl0eS5nZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICRsb2NhdGlvbi51cmwoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJCR0ZXN0YWJpbGl0eSNzZXRMb2NhdGlvblxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgZm9yIG5hdmlnYXRpbmcgdG8gYSBsb2NhdGlvbiB3aXRob3V0IGRvaW5nIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGxvY2F0aW9uIHVybCAocGF0aCwgc2VhcmNoIGFuZCBoYXNoLFxuICAgICAqICAgICBlLmcuIC9wYXRoP2E9YiNoYXNoKSB0byBnbyB0by5cbiAgICAgKi9cbiAgICB0ZXN0YWJpbGl0eS5zZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKHVybCkge1xuICAgICAgaWYgKHVybCAhPT0gJGxvY2F0aW9uLnVybCgpKSB7XG4gICAgICAgICRsb2NhdGlvbi51cmwodXJsKTtcbiAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjd2hlblN0YWJsZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQ2FsbHMgdGhlIGNhbGxiYWNrIHdoZW4gJHRpbWVvdXQgYW5kICRodHRwIHJlcXVlc3RzIGFyZSBjb21wbGV0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LndoZW5TdGFibGUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgJGJyb3dzZXIubm90aWZ5V2hlbk5vT3V0c3RhbmRpbmdSZXF1ZXN0cyhjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIHJldHVybiB0ZXN0YWJpbGl0eTtcbiAgfV07XG59XG5cbmZ1bmN0aW9uICRUaW1lb3V0UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckYnJvd3NlcicsICckcScsICckJHEnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLFxuICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICAgJGJyb3dzZXIsICAgJHEsICAgJCRxLCAgICRleGNlcHRpb25IYW5kbGVyKSB7XG5cbiAgICB2YXIgZGVmZXJyZWRzID0ge307XG5cblxuICAgICAvKipcbiAgICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgICogQG5hbWUgJHRpbWVvdXRcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIEFuZ3VsYXIncyB3cmFwcGVyIGZvciBgd2luZG93LnNldFRpbWVvdXRgLiBUaGUgYGZuYCBmdW5jdGlvbiBpcyB3cmFwcGVkIGludG8gYSB0cnkvY2F0Y2hcbiAgICAgICogYmxvY2sgYW5kIGRlbGVnYXRlcyBhbnkgZXhjZXB0aW9ucyB0b1xuICAgICAgKiB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAqXG4gICAgICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgY2FsbGluZyBgJHRpbWVvdXRgIGlzIGEgcHJvbWlzZSwgd2hpY2ggd2lsbCBiZSByZXNvbHZlZCB3aGVuXG4gICAgICAqIHRoZSBkZWxheSBoYXMgcGFzc2VkIGFuZCB0aGUgdGltZW91dCBmdW5jdGlvbiwgaWYgcHJvdmlkZWQsIGlzIGV4ZWN1dGVkLlxuICAgICAgKlxuICAgICAgKiBUbyBjYW5jZWwgYSB0aW1lb3V0IHJlcXVlc3QsIGNhbGwgYCR0aW1lb3V0LmNhbmNlbChwcm9taXNlKWAuXG4gICAgICAqXG4gICAgICAqIEluIHRlc3RzIHlvdSBjYW4gdXNlIHtAbGluayBuZ01vY2suJHRpbWVvdXQgYCR0aW1lb3V0LmZsdXNoKClgfSB0b1xuICAgICAgKiBzeW5jaHJvbm91c2x5IGZsdXNoIHRoZSBxdWV1ZSBvZiBkZWZlcnJlZCBmdW5jdGlvbnMuXG4gICAgICAqXG4gICAgICAqIElmIHlvdSBvbmx5IHdhbnQgYSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCBhZnRlciBzb21lIHNwZWNpZmllZCBkZWxheVxuICAgICAgKiB0aGVuIHlvdSBjYW4gY2FsbCBgJHRpbWVvdXRgIHdpdGhvdXQgdGhlIGBmbmAgZnVuY3Rpb24uXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IGZuIEEgZnVuY3Rpb24sIHdob3NlIGV4ZWN1dGlvbiBzaG91bGQgYmUgZGVsYXllZC5cbiAgICAgICogQHBhcmFtIHtudW1iZXI9fSBbZGVsYXk9MF0gRGVsYXkgaW4gbWlsbGlzZWNvbmRzLlxuICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbaW52b2tlQXBwbHk9dHJ1ZV0gSWYgc2V0IHRvIGBmYWxzZWAgc2tpcHMgbW9kZWwgZGlydHkgY2hlY2tpbmcsIG90aGVyd2lzZVxuICAgICAgKiAgIHdpbGwgaW52b2tlIGBmbmAgd2l0aGluIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkYXBwbHkgJGFwcGx5fSBibG9jay5cbiAgICAgICogQHBhcmFtIHsuLi4qPX0gUGFzcyBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgdG8gdGhlIGV4ZWN1dGVkIGZ1bmN0aW9uLlxuICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2hlbiB0aGUgdGltZW91dCBpcyByZWFjaGVkLiBUaGUgdmFsdWUgdGhpc1xuICAgICAgKiAgIHByb21pc2Ugd2lsbCBiZSByZXNvbHZlZCB3aXRoIGlzIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBmbmAgZnVuY3Rpb24uXG4gICAgICAqXG4gICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVvdXQoZm4sIGRlbGF5LCBpbnZva2VBcHBseSkge1xuICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgICBpbnZva2VBcHBseSA9IGRlbGF5O1xuICAgICAgICBkZWxheSA9IGZuO1xuICAgICAgICBmbiA9IG5vb3A7XG4gICAgICB9XG5cbiAgICAgIHZhciBhcmdzID0gc2xpY2VBcmdzKGFyZ3VtZW50cywgMyksXG4gICAgICAgICAgc2tpcEFwcGx5ID0gKGlzRGVmaW5lZChpbnZva2VBcHBseSkgJiYgIWludm9rZUFwcGx5KSxcbiAgICAgICAgICBkZWZlcnJlZCA9IChza2lwQXBwbHkgPyAkJHEgOiAkcSkuZGVmZXIoKSxcbiAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZSxcbiAgICAgICAgICB0aW1lb3V0SWQ7XG5cbiAgICAgIHRpbWVvdXRJZCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZm4uYXBwbHkobnVsbCwgYXJncykpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGUpO1xuICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgIGRlbGV0ZSBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNraXBBcHBseSkgJHJvb3RTY29wZS4kYXBwbHkoKTtcbiAgICAgIH0sIGRlbGF5KTtcblxuICAgICAgcHJvbWlzZS4kJHRpbWVvdXRJZCA9IHRpbWVvdXRJZDtcbiAgICAgIGRlZmVycmVkc1t0aW1lb3V0SWRdID0gZGVmZXJyZWQ7XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAqIEBuYW1lICR0aW1lb3V0I2NhbmNlbFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogQ2FuY2VscyBhIHRhc2sgYXNzb2NpYXRlZCB3aXRoIHRoZSBgcHJvbWlzZWAuIEFzIGEgcmVzdWx0IG9mIHRoaXMsIHRoZSBwcm9taXNlIHdpbGwgYmVcbiAgICAgICogcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtQcm9taXNlPX0gcHJvbWlzZSBQcm9taXNlIHJldHVybmVkIGJ5IHRoZSBgJHRpbWVvdXRgIGZ1bmN0aW9uLlxuICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgaGFzbid0IGV4ZWN1dGVkIHlldCBhbmQgd2FzIHN1Y2Nlc3NmdWxseVxuICAgICAgKiAgIGNhbmNlbGVkLlxuICAgICAgKi9cbiAgICB0aW1lb3V0LmNhbmNlbCA9IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICAgIGlmIChwcm9taXNlICYmIHByb21pc2UuJCR0aW1lb3V0SWQgaW4gZGVmZXJyZWRzKSB7XG4gICAgICAgIGRlZmVycmVkc1twcm9taXNlLiQkdGltZW91dElkXS5yZWplY3QoJ2NhbmNlbGVkJyk7XG4gICAgICAgIGRlbGV0ZSBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF07XG4gICAgICAgIHJldHVybiAkYnJvd3Nlci5kZWZlci5jYW5jZWwocHJvbWlzZS4kJHRpbWVvdXRJZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiB0aW1lb3V0O1xuICB9XTtcbn1cblxuLy8gTk9URTogIFRoZSB1c2FnZSBvZiB3aW5kb3cgYW5kIGRvY3VtZW50IGluc3RlYWQgb2YgJHdpbmRvdyBhbmQgJGRvY3VtZW50IGhlcmUgaXNcbi8vIGRlbGliZXJhdGUuICBUaGlzIHNlcnZpY2UgZGVwZW5kcyBvbiB0aGUgc3BlY2lmaWMgYmVoYXZpb3Igb2YgYW5jaG9yIG5vZGVzIGNyZWF0ZWQgYnkgdGhlXG4vLyBicm93c2VyIChyZXNvbHZpbmcgYW5kIHBhcnNpbmcgVVJMcykgdGhhdCBpcyB1bmxpa2VseSB0byBiZSBwcm92aWRlZCBieSBtb2NrIG9iamVjdHMgYW5kXG4vLyBjYXVzZSB1cyB0byBicmVhayB0ZXN0cy4gIEluIGFkZGl0aW9uLCB3aGVuIHRoZSBicm93c2VyIHJlc29sdmVzIGEgVVJMIGZvciBYSFIsIGl0XG4vLyBkb2Vzbid0IGtub3cgYWJvdXQgbW9ja2VkIGxvY2F0aW9ucyBhbmQgcmVzb2x2ZXMgVVJMcyB0byB0aGUgcmVhbCBkb2N1bWVudCAtIHdoaWNoIGlzXG4vLyBleGFjdGx5IHRoZSBiZWhhdmlvciBuZWVkZWQgaGVyZS4gIFRoZXJlIGlzIGxpdHRsZSB2YWx1ZSBpcyBtb2NraW5nIHRoZXNlIG91dCBmb3IgdGhpc1xuLy8gc2VydmljZS5cbnZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xudmFyIG9yaWdpblVybCA9IHVybFJlc29sdmUod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG5cbi8qKlxuICpcbiAqIEltcGxlbWVudGF0aW9uIE5vdGVzIGZvciBub24tSUUgYnJvd3NlcnNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEFzc2lnbmluZyBhIFVSTCB0byB0aGUgaHJlZiBwcm9wZXJ0eSBvZiBhbiBhbmNob3IgRE9NIG5vZGUsIGV2ZW4gb25lIGF0dGFjaGVkIHRvIHRoZSBET00sXG4gKiByZXN1bHRzIGJvdGggaW4gdGhlIG5vcm1hbGl6aW5nIGFuZCBwYXJzaW5nIG9mIHRoZSBVUkwuICBOb3JtYWxpemluZyBtZWFucyB0aGF0IGEgcmVsYXRpdmVcbiAqIFVSTCB3aWxsIGJlIHJlc29sdmVkIGludG8gYW4gYWJzb2x1dGUgVVJMIGluIHRoZSBjb250ZXh0IG9mIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudC5cbiAqIFBhcnNpbmcgbWVhbnMgdGhhdCB0aGUgYW5jaG9yIG5vZGUncyBob3N0LCBob3N0bmFtZSwgcHJvdG9jb2wsIHBvcnQsIHBhdGhuYW1lIGFuZCByZWxhdGVkXG4gKiBwcm9wZXJ0aWVzIGFyZSBhbGwgcG9wdWxhdGVkIHRvIHJlZmxlY3QgdGhlIG5vcm1hbGl6ZWQgVVJMLiAgVGhpcyBhcHByb2FjaCBoYXMgd2lkZVxuICogY29tcGF0aWJpbGl0eSAtIFNhZmFyaSAxKywgTW96aWxsYSAxKywgT3BlcmEgNyssZSBldGMuICBTZWVcbiAqIGh0dHA6Ly93d3cuYXB0YW5hLmNvbS9yZWZlcmVuY2UvaHRtbC9hcGkvSFRNTEFuY2hvckVsZW1lbnQuaHRtbFxuICpcbiAqIEltcGxlbWVudGF0aW9uIE5vdGVzIGZvciBJRVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBJRSA+PSA4IGFuZCA8PSAxMCBub3JtYWxpemVzIHRoZSBVUkwgd2hlbiBhc3NpZ25lZCB0byB0aGUgYW5jaG9yIG5vZGUgc2ltaWxhciB0byB0aGUgb3RoZXJcbiAqIGJyb3dzZXJzLiAgSG93ZXZlciwgdGhlIHBhcnNlZCBjb21wb25lbnRzIHdpbGwgbm90IGJlIHNldCBpZiB0aGUgVVJMIGFzc2lnbmVkIGRpZCBub3Qgc3BlY2lmeVxuICogdGhlbS4gIChlLmcuIGlmIHlvdSBhc3NpZ24gYS5ocmVmID0gXCJmb29cIiwgdGhlbiBhLnByb3RvY29sLCBhLmhvc3QsIGV0Yy4gd2lsbCBiZSBlbXB0eS4pICBXZVxuICogd29yayBhcm91bmQgdGhhdCBieSBwZXJmb3JtaW5nIHRoZSBwYXJzaW5nIGluIGEgMm5kIHN0ZXAgYnkgdGFraW5nIGEgcHJldmlvdXNseSBub3JtYWxpemVkXG4gKiBVUkwgKGUuZy4gYnkgYXNzaWduaW5nIHRvIGEuaHJlZikgYW5kIGFzc2lnbmluZyBpdCBhLmhyZWYgYWdhaW4uICBUaGlzIGNvcnJlY3RseSBwb3B1bGF0ZXMgdGhlXG4gKiBwcm9wZXJ0aWVzIHN1Y2ggYXMgcHJvdG9jb2wsIGhvc3RuYW1lLCBwb3J0LCBldGMuXG4gKlxuICogSUU3IGRvZXMgbm90IG5vcm1hbGl6ZSB0aGUgVVJMIHdoZW4gYXNzaWduZWQgdG8gYW4gYW5jaG9yIG5vZGUuICAoQXBwYXJlbnRseSwgaXQgZG9lcywgaWYgb25lXG4gKiB1c2VzIHRoZSBpbm5lciBIVE1MIGFwcHJvYWNoIHRvIGFzc2lnbiB0aGUgVVJMIGFzIHBhcnQgb2YgYW4gSFRNTCBzbmlwcGV0IC1cbiAqIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ3MjcyOSkgIEhvd2V2ZXIsIHNldHRpbmcgaW1nW3NyY10gZG9lcyBub3JtYWxpemUgdGhlIFVSTC5cbiAqIFVuZm9ydHVuYXRlbHksIHNldHRpbmcgaW1nW3NyY10gdG8gc29tZXRoaW5nIGxpa2UgXCJqYXZhc2NyaXB0OmZvb1wiIG9uIElFIHRocm93cyBhbiBleGNlcHRpb24uXG4gKiBTaW5jZSB0aGUgcHJpbWFyeSB1c2FnZSBmb3Igbm9ybWFsaXppbmcgVVJMcyBpcyB0byBzYW5pdGl6ZSBzdWNoIFVSTHMsIHdlIGNhbid0IHVzZSB0aGF0XG4gKiBtZXRob2QgYW5kIElFIDwgOCBpcyB1bnN1cHBvcnRlZC5cbiAqXG4gKiBSZWZlcmVuY2VzOlxuICogICBodHRwOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MQW5jaG9yRWxlbWVudFxuICogICBodHRwOi8vd3d3LmFwdGFuYS5jb20vcmVmZXJlbmNlL2h0bWwvYXBpL0hUTUxBbmNob3JFbGVtZW50Lmh0bWxcbiAqICAgaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gKiAgIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvcHVsbC8yOTAyXG4gKiAgIGh0dHA6Ly9qYW1lcy5wYWRvbHNleS5jb20vamF2YXNjcmlwdC9wYXJzaW5nLXVybHMtd2l0aC10aGUtZG9tL1xuICpcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkLlxuICogQGRlc2NyaXB0aW9uIE5vcm1hbGl6ZXMgYW5kIHBhcnNlcyBhIFVSTC5cbiAqIEByZXR1cm5zIHtvYmplY3R9IFJldHVybnMgdGhlIG5vcm1hbGl6ZWQgVVJMIGFzIGEgZGljdGlvbmFyeS5cbiAqXG4gKiAgIHwgbWVtYmVyIG5hbWUgICB8IERlc2NyaXB0aW9uICAgIHxcbiAqICAgfC0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tfFxuICogICB8IGhyZWYgICAgICAgICAgfCBBIG5vcm1hbGl6ZWQgdmVyc2lvbiBvZiB0aGUgcHJvdmlkZWQgVVJMIGlmIGl0IHdhcyBub3QgYW4gYWJzb2x1dGUgVVJMIHxcbiAqICAgfCBwcm90b2NvbCAgICAgIHwgVGhlIHByb3RvY29sIGluY2x1ZGluZyB0aGUgdHJhaWxpbmcgY29sb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiAgIHwgaG9zdCAgICAgICAgICB8IFRoZSBob3N0IGFuZCBwb3J0IChpZiB0aGUgcG9ydCBpcyBub24tZGVmYXVsdCkgb2YgdGhlIG5vcm1hbGl6ZWRVcmwgICAgfFxuICogICB8IHNlYXJjaCAgICAgICAgfCBUaGUgc2VhcmNoIHBhcmFtcywgbWludXMgdGhlIHF1ZXN0aW9uIG1hcmsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqICAgfCBoYXNoICAgICAgICAgIHwgVGhlIGhhc2ggc3RyaW5nLCBtaW51cyB0aGUgaGFzaCBzeW1ib2xcbiAqICAgfCBob3N0bmFtZSAgICAgIHwgVGhlIGhvc3RuYW1lXG4gKiAgIHwgcG9ydCAgICAgICAgICB8IFRoZSBwb3J0LCB3aXRob3V0IFwiOlwiXG4gKiAgIHwgcGF0aG5hbWUgICAgICB8IFRoZSBwYXRobmFtZSwgYmVnaW5uaW5nIHdpdGggXCIvXCJcbiAqXG4gKi9cbmZ1bmN0aW9uIHVybFJlc29sdmUodXJsKSB7XG4gIHZhciBocmVmID0gdXJsO1xuXG4gIGlmIChtc2llKSB7XG4gICAgLy8gTm9ybWFsaXplIGJlZm9yZSBwYXJzZS4gIFJlZmVyIEltcGxlbWVudGF0aW9uIE5vdGVzIG9uIHdoeSB0aGlzIGlzXG4gICAgLy8gZG9uZSBpbiB0d28gc3RlcHMgb24gSUUuXG4gICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKFwiaHJlZlwiLCBocmVmKTtcbiAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgfVxuXG4gIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgcmV0dXJuIHtcbiAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKVxuICAgICAgPyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgOiAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICB9O1xufVxuXG4vKipcbiAqIFBhcnNlIGEgcmVxdWVzdCBVUkwgYW5kIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSBzYW1lLW9yaWdpbiByZXF1ZXN0IGFzIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHJlcXVlc3RVcmwgVGhlIHVybCBvZiB0aGUgcmVxdWVzdCBhcyBhIHN0cmluZyB0aGF0IHdpbGwgYmUgcmVzb2x2ZWRcbiAqIG9yIGEgcGFyc2VkIFVSTCBvYmplY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcmVxdWVzdCBpcyBmb3IgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudC5cbiAqL1xuZnVuY3Rpb24gdXJsSXNTYW1lT3JpZ2luKHJlcXVlc3RVcmwpIHtcbiAgdmFyIHBhcnNlZCA9IChpc1N0cmluZyhyZXF1ZXN0VXJsKSkgPyB1cmxSZXNvbHZlKHJlcXVlc3RVcmwpIDogcmVxdWVzdFVybDtcbiAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVybC5wcm90b2NvbCAmJlxuICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VcmwuaG9zdCk7XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICR3aW5kb3dcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgcmVmZXJlbmNlIHRvIHRoZSBicm93c2VyJ3MgYHdpbmRvd2Agb2JqZWN0LiBXaGlsZSBgd2luZG93YFxuICogaXMgZ2xvYmFsbHkgYXZhaWxhYmxlIGluIEphdmFTY3JpcHQsIGl0IGNhdXNlcyB0ZXN0YWJpbGl0eSBwcm9ibGVtcywgYmVjYXVzZVxuICogaXQgaXMgYSBnbG9iYWwgdmFyaWFibGUuIEluIGFuZ3VsYXIgd2UgYWx3YXlzIHJlZmVyIHRvIGl0IHRocm91Z2ggdGhlXG4gKiBgJHdpbmRvd2Agc2VydmljZSwgc28gaXQgbWF5IGJlIG92ZXJyaWRkZW4sIHJlbW92ZWQgb3IgbW9ja2VkIGZvciB0ZXN0aW5nLlxuICpcbiAqIEV4cHJlc3Npb25zLCBsaWtlIHRoZSBvbmUgZGVmaW5lZCBmb3IgdGhlIGBuZ0NsaWNrYCBkaXJlY3RpdmUgaW4gdGhlIGV4YW1wbGVcbiAqIGJlbG93LCBhcmUgZXZhbHVhdGVkIHdpdGggcmVzcGVjdCB0byB0aGUgY3VycmVudCBzY29wZS4gIFRoZXJlZm9yZSwgdGhlcmUgaXNcbiAqIG5vIHJpc2sgb2YgaW5hZHZlcnRlbnRseSBjb2RpbmcgaW4gYSBkZXBlbmRlbmN5IG9uIGEgZ2xvYmFsIHZhbHVlIGluIHN1Y2ggYW5cbiAqIGV4cHJlc3Npb24uXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cIndpbmRvd0V4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3dpbmRvd0V4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJHdpbmRvdycsIGZ1bmN0aW9uKCRzY29wZSwgJHdpbmRvdykge1xuICAgICAgICAgICAgICRzY29wZS5ncmVldGluZyA9ICdIZWxsbywgV29ybGQhJztcbiAgICAgICAgICAgICAkc2NvcGUuZG9HcmVldGluZyA9IGZ1bmN0aW9uKGdyZWV0aW5nKSB7XG4gICAgICAgICAgICAgICAkd2luZG93LmFsZXJ0KGdyZWV0aW5nKTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwiZ3JlZXRpbmdcIiBhcmlhLWxhYmVsPVwiZ3JlZXRpbmdcIiAvPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImRvR3JlZXRpbmcoZ3JlZXRpbmcpXCI+QUxFUlQ8L2J1dHRvbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICBpdCgnc2hvdWxkIGRpc3BsYXkgdGhlIGdyZWV0aW5nIGluIHRoZSBpbnB1dCBib3gnLCBmdW5jdGlvbigpIHtcbiAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdncmVldGluZycpKS5zZW5kS2V5cygnSGVsbG8sIEUyRSBUZXN0cycpO1xuICAgICAgIC8vIElmIHdlIGNsaWNrIHRoZSBidXR0b24gaXQgd2lsbCBibG9jayB0aGUgdGVzdCBydW5uZXJcbiAgICAgICAvLyBlbGVtZW50KCc6YnV0dG9uJykuY2xpY2soKTtcbiAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uICRXaW5kb3dQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gdmFsdWVGbih3aW5kb3cpO1xufVxuXG4vKipcbiAqIEBuYW1lICQkY29va2llUmVhZGVyXG4gKiBAcmVxdWlyZXMgJGRvY3VtZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIGlzIGEgcHJpdmF0ZSBzZXJ2aWNlIGZvciByZWFkaW5nIGNvb2tpZXMgdXNlZCBieSAkaHR0cCBhbmQgbmdDb29raWVzXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSBhIGtleS92YWx1ZSBtYXAgb2YgdGhlIGN1cnJlbnQgY29va2llc1xuICovXG5mdW5jdGlvbiAkJENvb2tpZVJlYWRlcigkZG9jdW1lbnQpIHtcbiAgdmFyIHJhd0RvY3VtZW50ID0gJGRvY3VtZW50WzBdIHx8IHt9O1xuICB2YXIgbGFzdENvb2tpZXMgPSB7fTtcbiAgdmFyIGxhc3RDb29raWVTdHJpbmcgPSAnJztcblxuICBmdW5jdGlvbiBzYWZlRGVjb2RlVVJJQ29tcG9uZW50KHN0cikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvb2tpZUFycmF5LCBjb29raWUsIGksIGluZGV4LCBuYW1lO1xuICAgIHZhciBjdXJyZW50Q29va2llU3RyaW5nID0gcmF3RG9jdW1lbnQuY29va2llIHx8ICcnO1xuXG4gICAgaWYgKGN1cnJlbnRDb29raWVTdHJpbmcgIT09IGxhc3RDb29raWVTdHJpbmcpIHtcbiAgICAgIGxhc3RDb29raWVTdHJpbmcgPSBjdXJyZW50Q29va2llU3RyaW5nO1xuICAgICAgY29va2llQXJyYXkgPSBsYXN0Q29va2llU3RyaW5nLnNwbGl0KCc7ICcpO1xuICAgICAgbGFzdENvb2tpZXMgPSB7fTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGNvb2tpZUFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvb2tpZSA9IGNvb2tpZUFycmF5W2ldO1xuICAgICAgICBpbmRleCA9IGNvb2tpZS5pbmRleE9mKCc9Jyk7XG4gICAgICAgIGlmIChpbmRleCA+IDApIHsgLy9pZ25vcmUgbmFtZWxlc3MgY29va2llc1xuICAgICAgICAgIG5hbWUgPSBzYWZlRGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZS5zdWJzdHJpbmcoMCwgaW5kZXgpKTtcbiAgICAgICAgICAvLyB0aGUgZmlyc3QgdmFsdWUgdGhhdCBpcyBzZWVuIGZvciBhIGNvb2tpZSBpcyB0aGUgbW9zdFxuICAgICAgICAgIC8vIHNwZWNpZmljIG9uZS4gIHZhbHVlcyBmb3IgdGhlIHNhbWUgY29va2llIG5hbWUgdGhhdFxuICAgICAgICAgIC8vIGZvbGxvdyBhcmUgZm9yIGxlc3Mgc3BlY2lmaWMgcGF0aHMuXG4gICAgICAgICAgaWYgKGxhc3RDb29raWVzW25hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGxhc3RDb29raWVzW25hbWVdID0gc2FmZURlY29kZVVSSUNvbXBvbmVudChjb29raWUuc3Vic3RyaW5nKGluZGV4ICsgMSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGFzdENvb2tpZXM7XG4gIH07XG59XG5cbiQkQ29va2llUmVhZGVyLiRpbmplY3QgPSBbJyRkb2N1bWVudCddO1xuXG5mdW5jdGlvbiAkJENvb2tpZVJlYWRlclByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSAkJENvb2tpZVJlYWRlcjtcbn1cblxuLyogZ2xvYmFsIGN1cnJlbmN5RmlsdGVyOiB0cnVlLFxuIGRhdGVGaWx0ZXI6IHRydWUsXG4gZmlsdGVyRmlsdGVyOiB0cnVlLFxuIGpzb25GaWx0ZXI6IHRydWUsXG4gbGltaXRUb0ZpbHRlcjogdHJ1ZSxcbiBsb3dlcmNhc2VGaWx0ZXI6IHRydWUsXG4gbnVtYmVyRmlsdGVyOiB0cnVlLFxuIG9yZGVyQnlGaWx0ZXI6IHRydWUsXG4gdXBwZXJjYXNlRmlsdGVyOiB0cnVlLFxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkZmlsdGVyUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEZpbHRlcnMgYXJlIGp1c3QgZnVuY3Rpb25zIHdoaWNoIHRyYW5zZm9ybSBpbnB1dCB0byBhbiBvdXRwdXQuIEhvd2V2ZXIgZmlsdGVycyBuZWVkIHRvIGJlXG4gKiBEZXBlbmRlbmN5IEluamVjdGVkLiBUbyBhY2hpZXZlIHRoaXMgYSBmaWx0ZXIgZGVmaW5pdGlvbiBjb25zaXN0cyBvZiBhIGZhY3RvcnkgZnVuY3Rpb24gd2hpY2ggaXNcbiAqIGFubm90YXRlZCB3aXRoIGRlcGVuZGVuY2llcyBhbmQgaXMgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIGEgZmlsdGVyIGZ1bmN0aW9uLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogRmlsdGVyIG5hbWVzIG11c3QgYmUgdmFsaWQgYW5ndWxhciB7QGxpbmsgZXhwcmVzc2lvbn0gaWRlbnRpZmllcnMsIHN1Y2ggYXMgYHVwcGVyY2FzZWAgb3IgYG9yZGVyQnlgLlxuICogTmFtZXMgd2l0aCBzcGVjaWFsIGNoYXJhY3RlcnMsIHN1Y2ggYXMgaHlwaGVucyBhbmQgZG90cywgYXJlIG5vdCBhbGxvd2VkLiBJZiB5b3Ugd2lzaCB0byBuYW1lc3BhY2VcbiAqIHlvdXIgZmlsdGVycywgdGhlbiB5b3UgY2FuIHVzZSBjYXBpdGFsaXphdGlvbiAoYG15YXBwU3Vic2VjdGlvbkZpbHRlcnhgKSBvciB1bmRlcnNjb3Jlc1xuICogKGBteWFwcF9zdWJzZWN0aW9uX2ZpbHRlcnhgKS5cbiAqIDwvZGl2PlxuICpcbiAqIGBgYGpzXG4gKiAgIC8vIEZpbHRlciByZWdpc3RyYXRpb25cbiAqICAgZnVuY3Rpb24gTXlNb2R1bGUoJHByb3ZpZGUsICRmaWx0ZXJQcm92aWRlcikge1xuICogICAgIC8vIGNyZWF0ZSBhIHNlcnZpY2UgdG8gZGVtb25zdHJhdGUgaW5qZWN0aW9uIChub3QgYWx3YXlzIG5lZWRlZClcbiAqICAgICAkcHJvdmlkZS52YWx1ZSgnZ3JlZXQnLCBmdW5jdGlvbihuYW1lKXtcbiAqICAgICAgIHJldHVybiAnSGVsbG8gJyArIG5hbWUgKyAnISc7XG4gKiAgICAgfSk7XG4gKlxuICogICAgIC8vIHJlZ2lzdGVyIGEgZmlsdGVyIGZhY3Rvcnkgd2hpY2ggdXNlcyB0aGVcbiAqICAgICAvLyBncmVldCBzZXJ2aWNlIHRvIGRlbW9uc3RyYXRlIERJLlxuICogICAgICRmaWx0ZXJQcm92aWRlci5yZWdpc3RlcignZ3JlZXQnLCBmdW5jdGlvbihncmVldCl7XG4gKiAgICAgICAvLyByZXR1cm4gdGhlIGZpbHRlciBmdW5jdGlvbiB3aGljaCB1c2VzIHRoZSBncmVldCBzZXJ2aWNlXG4gKiAgICAgICAvLyB0byBnZW5lcmF0ZSBzYWx1dGF0aW9uXG4gKiAgICAgICByZXR1cm4gZnVuY3Rpb24odGV4dCkge1xuICogICAgICAgICAvLyBmaWx0ZXJzIG5lZWQgdG8gYmUgZm9yZ2l2aW5nIHNvIGNoZWNrIGlucHV0IHZhbGlkaXR5XG4gKiAgICAgICAgIHJldHVybiB0ZXh0ICYmIGdyZWV0KHRleHQpIHx8IHRleHQ7XG4gKiAgICAgICB9O1xuICogICAgIH0pO1xuICogICB9XG4gKiBgYGBcbiAqXG4gKiBUaGUgZmlsdGVyIGZ1bmN0aW9uIGlzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgYCRpbmplY3RvcmAgdW5kZXIgdGhlIGZpbHRlciBuYW1lIHN1ZmZpeCB3aXRoXG4gKiBgRmlsdGVyYC5cbiAqXG4gKiBgYGBqc1xuICogICBpdCgnc2hvdWxkIGJlIHRoZSBzYW1lIGluc3RhbmNlJywgaW5qZWN0KFxuICogICAgIGZ1bmN0aW9uKCRmaWx0ZXJQcm92aWRlcikge1xuICogICAgICAgJGZpbHRlclByb3ZpZGVyLnJlZ2lzdGVyKCdyZXZlcnNlJywgZnVuY3Rpb24oKXtcbiAqICAgICAgICAgcmV0dXJuIC4uLjtcbiAqICAgICAgIH0pO1xuICogICAgIH0sXG4gKiAgICAgZnVuY3Rpb24oJGZpbHRlciwgcmV2ZXJzZUZpbHRlcikge1xuICogICAgICAgZXhwZWN0KCRmaWx0ZXIoJ3JldmVyc2UnKSkudG9CZShyZXZlcnNlRmlsdGVyKTtcbiAqICAgICB9KTtcbiAqIGBgYFxuICpcbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBob3cgYW5ndWxhciBmaWx0ZXJzIHdvcmssIGFuZCBob3cgdG8gY3JlYXRlIHlvdXIgb3duIGZpbHRlcnMsIHNlZVxuICoge0BsaW5rIGd1aWRlL2ZpbHRlciBGaWx0ZXJzfSBpbiB0aGUgQW5ndWxhciBEZXZlbG9wZXIgR3VpZGUuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGZpbHRlclxuICogQGtpbmQgZnVuY3Rpb25cbiAqIEBkZXNjcmlwdGlvblxuICogRmlsdGVycyBhcmUgdXNlZCBmb3IgZm9ybWF0dGluZyBkYXRhIGRpc3BsYXllZCB0byB0aGUgdXNlci5cbiAqXG4gKiBUaGUgZ2VuZXJhbCBzeW50YXggaW4gdGVtcGxhdGVzIGlzIGFzIGZvbGxvd3M6XG4gKlxuICogICAgICAgICB7eyBleHByZXNzaW9uIFt8IGZpbHRlcl9uYW1lWzpwYXJhbWV0ZXJfdmFsdWVdIC4uLiBdIH19XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgZmlsdGVyIGZ1bmN0aW9uIHRvIHJldHJpZXZlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIGZpbHRlciBmdW5jdGlvblxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCIkZmlsdGVyXCIgbW9kdWxlPVwiZmlsdGVyRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIk1haW5DdHJsXCI+XG4gICAgICAgIDxoMz57eyBvcmlnaW5hbFRleHQgfX08L2gzPlxuICAgICAgICA8aDM+e3sgZmlsdGVyZWRUZXh0IH19PC9oMz5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuXG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdmaWx0ZXJFeGFtcGxlJywgW10pXG4gICAgICAuY29udHJvbGxlcignTWFpbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUsICRmaWx0ZXIpIHtcbiAgICAgICAgJHNjb3BlLm9yaWdpbmFsVGV4dCA9ICdoZWxsbyc7XG4gICAgICAgICRzY29wZS5maWx0ZXJlZFRleHQgPSAkZmlsdGVyKCd1cHBlcmNhc2UnKSgkc2NvcGUub3JpZ2luYWxUZXh0KTtcbiAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gICovXG4kRmlsdGVyUHJvdmlkZXIuJGluamVjdCA9IFsnJHByb3ZpZGUnXTtcbmZ1bmN0aW9uICRGaWx0ZXJQcm92aWRlcigkcHJvdmlkZSkge1xuICB2YXIgc3VmZml4ID0gJ0ZpbHRlcic7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGZpbHRlclByb3ZpZGVyI3JlZ2lzdGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBOYW1lIG9mIHRoZSBmaWx0ZXIgZnVuY3Rpb24sIG9yIGFuIG9iamVjdCBtYXAgb2YgZmlsdGVycyB3aGVyZVxuICAgKiAgICB0aGUga2V5cyBhcmUgdGhlIGZpbHRlciBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGZpbHRlciBmYWN0b3JpZXMuXG4gICAqXG4gICAqICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAqICAgICoqTm90ZToqKiBGaWx0ZXIgbmFtZXMgbXVzdCBiZSB2YWxpZCBhbmd1bGFyIHtAbGluayBleHByZXNzaW9ufSBpZGVudGlmaWVycywgc3VjaCBhcyBgdXBwZXJjYXNlYCBvciBgb3JkZXJCeWAuXG4gICAqICAgIE5hbWVzIHdpdGggc3BlY2lhbCBjaGFyYWN0ZXJzLCBzdWNoIGFzIGh5cGhlbnMgYW5kIGRvdHMsIGFyZSBub3QgYWxsb3dlZC4gSWYgeW91IHdpc2ggdG8gbmFtZXNwYWNlXG4gICAqICAgIHlvdXIgZmlsdGVycywgdGhlbiB5b3UgY2FuIHVzZSBjYXBpdGFsaXphdGlvbiAoYG15YXBwU3Vic2VjdGlvbkZpbHRlcnhgKSBvciB1bmRlcnNjb3Jlc1xuICAgKiAgICAoYG15YXBwX3N1YnNlY3Rpb25fZmlsdGVyeGApLlxuICAgKiAgICA8L2Rpdj5cbiAgICogQHJldHVybnMge09iamVjdH0gUmVnaXN0ZXJlZCBmaWx0ZXIgaW5zdGFuY2UsIG9yIGlmIGEgbWFwIG9mIGZpbHRlcnMgd2FzIHByb3ZpZGVkIHRoZW4gYSBtYXBcbiAgICogICAgb2YgdGhlIHJlZ2lzdGVyZWQgZmlsdGVyIGluc3RhbmNlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyKG5hbWUsIGZhY3RvcnkpIHtcbiAgICBpZiAoaXNPYmplY3QobmFtZSkpIHtcbiAgICAgIHZhciBmaWx0ZXJzID0ge307XG4gICAgICBmb3JFYWNoKG5hbWUsIGZ1bmN0aW9uKGZpbHRlciwga2V5KSB7XG4gICAgICAgIGZpbHRlcnNba2V5XSA9IHJlZ2lzdGVyKGtleSwgZmlsdGVyKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZpbHRlcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAkcHJvdmlkZS5mYWN0b3J5KG5hbWUgKyBzdWZmaXgsIGZhY3RvcnkpO1xuICAgIH1cbiAgfVxuICB0aGlzLnJlZ2lzdGVyID0gcmVnaXN0ZXI7XG5cbiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCBmdW5jdGlvbigkaW5qZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuICRpbmplY3Rvci5nZXQobmFtZSArIHN1ZmZpeCk7XG4gICAgfTtcbiAgfV07XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIC8qIGdsb2JhbFxuICAgIGN1cnJlbmN5RmlsdGVyOiBmYWxzZSxcbiAgICBkYXRlRmlsdGVyOiBmYWxzZSxcbiAgICBmaWx0ZXJGaWx0ZXI6IGZhbHNlLFxuICAgIGpzb25GaWx0ZXI6IGZhbHNlLFxuICAgIGxpbWl0VG9GaWx0ZXI6IGZhbHNlLFxuICAgIGxvd2VyY2FzZUZpbHRlcjogZmFsc2UsXG4gICAgbnVtYmVyRmlsdGVyOiBmYWxzZSxcbiAgICBvcmRlckJ5RmlsdGVyOiBmYWxzZSxcbiAgICB1cHBlcmNhc2VGaWx0ZXI6IGZhbHNlLFxuICAqL1xuXG4gIHJlZ2lzdGVyKCdjdXJyZW5jeScsIGN1cnJlbmN5RmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ2RhdGUnLCBkYXRlRmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ2ZpbHRlcicsIGZpbHRlckZpbHRlcik7XG4gIHJlZ2lzdGVyKCdqc29uJywganNvbkZpbHRlcik7XG4gIHJlZ2lzdGVyKCdsaW1pdFRvJywgbGltaXRUb0ZpbHRlcik7XG4gIHJlZ2lzdGVyKCdsb3dlcmNhc2UnLCBsb3dlcmNhc2VGaWx0ZXIpO1xuICByZWdpc3RlcignbnVtYmVyJywgbnVtYmVyRmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ29yZGVyQnknLCBvcmRlckJ5RmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ3VwcGVyY2FzZScsIHVwcGVyY2FzZUZpbHRlcik7XG59XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgZmlsdGVyXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2VsZWN0cyBhIHN1YnNldCBvZiBpdGVtcyBmcm9tIGBhcnJheWAgYW5kIHJldHVybnMgaXQgYXMgYSBuZXcgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvdXJjZSBhcnJheS5cbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdHxmdW5jdGlvbigpfSBleHByZXNzaW9uIFRoZSBwcmVkaWNhdGUgdG8gYmUgdXNlZCBmb3Igc2VsZWN0aW5nIGl0ZW1zIGZyb21cbiAqICAgYGFycmF5YC5cbiAqXG4gKiAgIENhbiBiZSBvbmUgb2Y6XG4gKlxuICogICAtIGBzdHJpbmdgOiBUaGUgc3RyaW5nIGlzIHVzZWQgZm9yIG1hdGNoaW5nIGFnYWluc3QgdGhlIGNvbnRlbnRzIG9mIHRoZSBgYXJyYXlgLiBBbGwgc3RyaW5ncyBvclxuICogICAgIG9iamVjdHMgd2l0aCBzdHJpbmcgcHJvcGVydGllcyBpbiBgYXJyYXlgIHRoYXQgbWF0Y2ggdGhpcyBzdHJpbmcgd2lsbCBiZSByZXR1cm5lZC4gVGhpcyBhbHNvXG4gKiAgICAgYXBwbGllcyB0byBuZXN0ZWQgb2JqZWN0IHByb3BlcnRpZXMuXG4gKiAgICAgVGhlIHByZWRpY2F0ZSBjYW4gYmUgbmVnYXRlZCBieSBwcmVmaXhpbmcgdGhlIHN0cmluZyB3aXRoIGAhYC5cbiAqXG4gKiAgIC0gYE9iamVjdGA6IEEgcGF0dGVybiBvYmplY3QgY2FuIGJlIHVzZWQgdG8gZmlsdGVyIHNwZWNpZmljIHByb3BlcnRpZXMgb24gb2JqZWN0cyBjb250YWluZWRcbiAqICAgICBieSBgYXJyYXlgLiBGb3IgZXhhbXBsZSBge25hbWU6XCJNXCIsIHBob25lOlwiMVwifWAgcHJlZGljYXRlIHdpbGwgcmV0dXJuIGFuIGFycmF5IG9mIGl0ZW1zXG4gKiAgICAgd2hpY2ggaGF2ZSBwcm9wZXJ0eSBgbmFtZWAgY29udGFpbmluZyBcIk1cIiBhbmQgcHJvcGVydHkgYHBob25lYCBjb250YWluaW5nIFwiMVwiLiBBIHNwZWNpYWxcbiAqICAgICBwcm9wZXJ0eSBuYW1lIGAkYCBjYW4gYmUgdXNlZCAoYXMgaW4gYHskOlwidGV4dFwifWApIHRvIGFjY2VwdCBhIG1hdGNoIGFnYWluc3QgYW55XG4gKiAgICAgcHJvcGVydHkgb2YgdGhlIG9iamVjdCBvciBpdHMgbmVzdGVkIG9iamVjdCBwcm9wZXJ0aWVzLiBUaGF0J3MgZXF1aXZhbGVudCB0byB0aGUgc2ltcGxlXG4gKiAgICAgc3Vic3RyaW5nIG1hdGNoIHdpdGggYSBgc3RyaW5nYCBhcyBkZXNjcmliZWQgYWJvdmUuIFRoZSBwcmVkaWNhdGUgY2FuIGJlIG5lZ2F0ZWQgYnkgcHJlZml4aW5nXG4gKiAgICAgdGhlIHN0cmluZyB3aXRoIGAhYC5cbiAqICAgICBGb3IgZXhhbXBsZSBge25hbWU6IFwiIU1cIn1gIHByZWRpY2F0ZSB3aWxsIHJldHVybiBhbiBhcnJheSBvZiBpdGVtcyB3aGljaCBoYXZlIHByb3BlcnR5IGBuYW1lYFxuICogICAgIG5vdCBjb250YWluaW5nIFwiTVwiLlxuICpcbiAqICAgICBOb3RlIHRoYXQgYSBuYW1lZCBwcm9wZXJ0eSB3aWxsIG1hdGNoIHByb3BlcnRpZXMgb24gdGhlIHNhbWUgbGV2ZWwgb25seSwgd2hpbGUgdGhlIHNwZWNpYWxcbiAqICAgICBgJGAgcHJvcGVydHkgd2lsbCBtYXRjaCBwcm9wZXJ0aWVzIG9uIHRoZSBzYW1lIGxldmVsIG9yIGRlZXBlci4gRS5nLiBhbiBhcnJheSBpdGVtIGxpa2VcbiAqICAgICBge25hbWU6IHtmaXJzdDogJ0pvaG4nLCBsYXN0OiAnRG9lJ319YCB3aWxsICoqbm90KiogYmUgbWF0Y2hlZCBieSBge25hbWU6ICdKb2huJ31gLCBidXRcbiAqICAgICAqKndpbGwqKiBiZSBtYXRjaGVkIGJ5IGB7JDogJ0pvaG4nfWAuXG4gKlxuICogICAtIGBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGFycmF5KWA6IEEgcHJlZGljYXRlIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIHdyaXRlIGFyYml0cmFyeSBmaWx0ZXJzLlxuICogICAgIFRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgZm9yIGVhY2ggZWxlbWVudCBvZiB0aGUgYXJyYXksIHdpdGggdGhlIGVsZW1lbnQsIGl0cyBpbmRleCwgYW5kXG4gKiAgICAgdGhlIGVudGlyZSBhcnJheSBpdHNlbGYgYXMgYXJndW1lbnRzLlxuICpcbiAqICAgICBUaGUgZmluYWwgcmVzdWx0IGlzIGFuIGFycmF5IG9mIHRob3NlIGVsZW1lbnRzIHRoYXQgdGhlIHByZWRpY2F0ZSByZXR1cm5lZCB0cnVlIGZvci5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpfHRydWV8dW5kZWZpbmVkfSBjb21wYXJhdG9yIENvbXBhcmF0b3Igd2hpY2ggaXMgdXNlZCBpblxuICogICAgIGRldGVybWluaW5nIGlmIHRoZSBleHBlY3RlZCB2YWx1ZSAoZnJvbSB0aGUgZmlsdGVyIGV4cHJlc3Npb24pIGFuZCBhY3R1YWwgdmFsdWUgKGZyb21cbiAqICAgICB0aGUgb2JqZWN0IGluIHRoZSBhcnJheSkgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYSBtYXRjaC5cbiAqXG4gKiAgIENhbiBiZSBvbmUgb2Y6XG4gKlxuICogICAtIGBmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkKWA6XG4gKiAgICAgVGhlIGZ1bmN0aW9uIHdpbGwgYmUgZ2l2ZW4gdGhlIG9iamVjdCB2YWx1ZSBhbmQgdGhlIHByZWRpY2F0ZSB2YWx1ZSB0byBjb21wYXJlIGFuZFxuICogICAgIHNob3VsZCByZXR1cm4gdHJ1ZSBpZiBib3RoIHZhbHVlcyBzaG91bGQgYmUgY29uc2lkZXJlZCBlcXVhbC5cbiAqXG4gKiAgIC0gYHRydWVgOiBBIHNob3J0aGFuZCBmb3IgYGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpIHsgcmV0dXJuIGFuZ3VsYXIuZXF1YWxzKGFjdHVhbCwgZXhwZWN0ZWQpfWAuXG4gKiAgICAgVGhpcyBpcyBlc3NlbnRpYWxseSBzdHJpY3QgY29tcGFyaXNvbiBvZiBleHBlY3RlZCBhbmQgYWN0dWFsLlxuICpcbiAqICAgLSBgZmFsc2V8dW5kZWZpbmVkYDogQSBzaG9ydCBoYW5kIGZvciBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgbG9vayBmb3IgYSBzdWJzdHJpbmcgbWF0Y2ggaW4gY2FzZVxuICogICAgIGluc2Vuc2l0aXZlIHdheS5cbiAqXG4gKiAgICAgUHJpbWl0aXZlIHZhbHVlcyBhcmUgY29udmVydGVkIHRvIHN0cmluZ3MuIE9iamVjdHMgYXJlIG5vdCBjb21wYXJlZCBhZ2FpbnN0IHByaW1pdGl2ZXMsXG4gKiAgICAgdW5sZXNzIHRoZXkgaGF2ZSBhIGN1c3RvbSBgdG9TdHJpbmdgIG1ldGhvZCAoZS5nLiBgRGF0ZWAgb2JqZWN0cykuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctaW5pdD1cImZyaWVuZHMgPSBbe25hbWU6J0pvaG4nLCBwaG9uZTonNTU1LTEyNzYnfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J01hcnknLCBwaG9uZTonODAwLUJJRy1NQVJZJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidNaWtlJywgcGhvbmU6JzU1NS00MzIxJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidBZGFtJywgcGhvbmU6JzU1NS01Njc4J30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidKdWxpZScsIHBob25lOic1NTUtODc2NSd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWV0dGUnLCBwaG9uZTonNTU1LTU2NzgnfV1cIj48L2Rpdj5cblxuICAgICAgIDxsYWJlbD5TZWFyY2g6IDxpbnB1dCBuZy1tb2RlbD1cInNlYXJjaFRleHRcIj48L2xhYmVsPlxuICAgICAgIDx0YWJsZSBpZD1cInNlYXJjaFRleHRSZXN1bHRzXCI+XG4gICAgICAgICA8dHI+PHRoPk5hbWU8L3RoPjx0aD5QaG9uZTwvdGg+PC90cj5cbiAgICAgICAgIDx0ciBuZy1yZXBlYXQ9XCJmcmllbmQgaW4gZnJpZW5kcyB8IGZpbHRlcjpzZWFyY2hUZXh0XCI+XG4gICAgICAgICAgIDx0ZD57e2ZyaWVuZC5uYW1lfX08L3RkPlxuICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XG4gICAgICAgICA8L3RyPlxuICAgICAgIDwvdGFibGU+XG4gICAgICAgPGhyPlxuICAgICAgIDxsYWJlbD5Bbnk6IDxpbnB1dCBuZy1tb2RlbD1cInNlYXJjaC4kXCI+PC9sYWJlbD4gPGJyPlxuICAgICAgIDxsYWJlbD5OYW1lIG9ubHkgPGlucHV0IG5nLW1vZGVsPVwic2VhcmNoLm5hbWVcIj48L2xhYmVsPjxicj5cbiAgICAgICA8bGFiZWw+UGhvbmUgb25seSA8aW5wdXQgbmctbW9kZWw9XCJzZWFyY2gucGhvbmVcIj48L2xhYmVsPjxicj5cbiAgICAgICA8bGFiZWw+RXF1YWxpdHkgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwic3RyaWN0XCI+PC9sYWJlbD48YnI+XG4gICAgICAgPHRhYmxlIGlkPVwic2VhcmNoT2JqUmVzdWx0c1wiPlxuICAgICAgICAgPHRyPjx0aD5OYW1lPC90aD48dGg+UGhvbmU8L3RoPjwvdHI+XG4gICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kT2JqIGluIGZyaWVuZHMgfCBmaWx0ZXI6c2VhcmNoOnN0cmljdFwiPlxuICAgICAgICAgICA8dGQ+e3tmcmllbmRPYmoubmFtZX19PC90ZD5cbiAgICAgICAgICAgPHRkPnt7ZnJpZW5kT2JqLnBob25lfX08L3RkPlxuICAgICAgICAgPC90cj5cbiAgICAgICA8L3RhYmxlPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgZXhwZWN0RnJpZW5kTmFtZXMgPSBmdW5jdGlvbihleHBlY3RlZE5hbWVzLCBrZXkpIHtcbiAgICAgICAgIGVsZW1lbnQuYWxsKGJ5LnJlcGVhdGVyKGtleSArICcgaW4gZnJpZW5kcycpLmNvbHVtbihrZXkgKyAnLm5hbWUnKSkudGhlbihmdW5jdGlvbihhcnIpIHtcbiAgICAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24od2QsIGkpIHtcbiAgICAgICAgICAgICBleHBlY3Qod2QuZ2V0VGV4dCgpKS50b01hdGNoKGV4cGVjdGVkTmFtZXNbaV0pO1xuICAgICAgICAgICB9KTtcbiAgICAgICAgIH0pO1xuICAgICAgIH07XG5cbiAgICAgICBpdCgnc2hvdWxkIHNlYXJjaCBhY3Jvc3MgYWxsIGZpZWxkcyB3aGVuIGZpbHRlcmluZyB3aXRoIGEgc3RyaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgc2VhcmNoVGV4dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3NlYXJjaFRleHQnKSk7XG4gICAgICAgICBzZWFyY2hUZXh0LmNsZWFyKCk7XG4gICAgICAgICBzZWFyY2hUZXh0LnNlbmRLZXlzKCdtJyk7XG4gICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ01hcnknLCAnTWlrZScsICdBZGFtJ10sICdmcmllbmQnKTtcblxuICAgICAgICAgc2VhcmNoVGV4dC5jbGVhcigpO1xuICAgICAgICAgc2VhcmNoVGV4dC5zZW5kS2V5cygnNzYnKTtcbiAgICAgICAgIGV4cGVjdEZyaWVuZE5hbWVzKFsnSm9obicsICdKdWxpZSddLCAnZnJpZW5kJyk7XG4gICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHNlYXJjaCBpbiBzcGVjaWZpYyBmaWVsZHMgd2hlbiBmaWx0ZXJpbmcgd2l0aCBhIHByZWRpY2F0ZSBvYmplY3QnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBzZWFyY2hBbnkgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzZWFyY2guJCcpKTtcbiAgICAgICAgIHNlYXJjaEFueS5jbGVhcigpO1xuICAgICAgICAgc2VhcmNoQW55LnNlbmRLZXlzKCdpJyk7XG4gICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ01hcnknLCAnTWlrZScsICdKdWxpZScsICdKdWxpZXR0ZSddLCAnZnJpZW5kT2JqJyk7XG4gICAgICAgfSk7XG4gICAgICAgaXQoJ3Nob3VsZCB1c2UgYSBlcXVhbCBjb21wYXJpc29uIHdoZW4gY29tcGFyYXRvciBpcyB0cnVlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgc2VhcmNoTmFtZSA9IGVsZW1lbnQoYnkubW9kZWwoJ3NlYXJjaC5uYW1lJykpO1xuICAgICAgICAgdmFyIHN0cmljdCA9IGVsZW1lbnQoYnkubW9kZWwoJ3N0cmljdCcpKTtcbiAgICAgICAgIHNlYXJjaE5hbWUuY2xlYXIoKTtcbiAgICAgICAgIHNlYXJjaE5hbWUuc2VuZEtleXMoJ0p1bGllJyk7XG4gICAgICAgICBzdHJpY3QuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdEZyaWVuZE5hbWVzKFsnSnVsaWUnXSwgJ2ZyaWVuZE9iaicpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uIGZpbHRlckZpbHRlcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBleHByZXNzaW9uLCBjb21wYXJhdG9yKSB7XG4gICAgaWYgKCFpc0FycmF5TGlrZShhcnJheSkpIHtcbiAgICAgIGlmIChhcnJheSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG1pbkVycignZmlsdGVyJykoJ25vdGFycmF5JywgJ0V4cGVjdGVkIGFycmF5IGJ1dCByZWNlaXZlZDogezB9JywgYXJyYXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBleHByZXNzaW9uVHlwZSA9IGdldFR5cGVGb3JGaWx0ZXIoZXhwcmVzc2lvbik7XG4gICAgdmFyIHByZWRpY2F0ZUZuO1xuICAgIHZhciBtYXRjaEFnYWluc3RBbnlQcm9wO1xuXG4gICAgc3dpdGNoIChleHByZXNzaW9uVHlwZSkge1xuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICBwcmVkaWNhdGVGbiA9IGV4cHJlc3Npb247XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICBjYXNlICdudWxsJzpcbiAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBtYXRjaEFnYWluc3RBbnlQcm9wID0gdHJ1ZTtcbiAgICAgICAgLy9qc2hpbnQgLVcwODZcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIC8vanNoaW50ICtXMDg2XG4gICAgICAgIHByZWRpY2F0ZUZuID0gY3JlYXRlUHJlZGljYXRlRm4oZXhwcmVzc2lvbiwgY29tcGFyYXRvciwgbWF0Y2hBZ2FpbnN0QW55UHJvcCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoYXJyYXksIHByZWRpY2F0ZUZuKTtcbiAgfTtcbn1cblxuLy8gSGVscGVyIGZ1bmN0aW9ucyBmb3IgYGZpbHRlckZpbHRlcmBcbmZ1bmN0aW9uIGNyZWF0ZVByZWRpY2F0ZUZuKGV4cHJlc3Npb24sIGNvbXBhcmF0b3IsIG1hdGNoQWdhaW5zdEFueVByb3ApIHtcbiAgdmFyIHNob3VsZE1hdGNoUHJpbWl0aXZlcyA9IGlzT2JqZWN0KGV4cHJlc3Npb24pICYmICgnJCcgaW4gZXhwcmVzc2lvbik7XG4gIHZhciBwcmVkaWNhdGVGbjtcblxuICBpZiAoY29tcGFyYXRvciA9PT0gdHJ1ZSkge1xuICAgIGNvbXBhcmF0b3IgPSBlcXVhbHM7XG4gIH0gZWxzZSBpZiAoIWlzRnVuY3Rpb24oY29tcGFyYXRvcikpIHtcbiAgICBjb21wYXJhdG9yID0gZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCkge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKGFjdHVhbCkpIHtcbiAgICAgICAgLy8gTm8gc3Vic3RyaW5nIG1hdGNoaW5nIGFnYWluc3QgYHVuZGVmaW5lZGBcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKChhY3R1YWwgPT09IG51bGwpIHx8IChleHBlY3RlZCA9PT0gbnVsbCkpIHtcbiAgICAgICAgLy8gTm8gc3Vic3RyaW5nIG1hdGNoaW5nIGFnYWluc3QgYG51bGxgOyBvbmx5IG1hdGNoIGFnYWluc3QgYG51bGxgXG4gICAgICAgIHJldHVybiBhY3R1YWwgPT09IGV4cGVjdGVkO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KGV4cGVjdGVkKSB8fCAoaXNPYmplY3QoYWN0dWFsKSAmJiAhaGFzQ3VzdG9tVG9TdHJpbmcoYWN0dWFsKSkpIHtcbiAgICAgICAgLy8gU2hvdWxkIG5vdCBjb21wYXJlIHByaW1pdGl2ZXMgYWdhaW5zdCBvYmplY3RzLCB1bmxlc3MgdGhleSBoYXZlIGN1c3RvbSBgdG9TdHJpbmdgIG1ldGhvZFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGFjdHVhbCA9IGxvd2VyY2FzZSgnJyArIGFjdHVhbCk7XG4gICAgICBleHBlY3RlZCA9IGxvd2VyY2FzZSgnJyArIGV4cGVjdGVkKTtcbiAgICAgIHJldHVybiBhY3R1YWwuaW5kZXhPZihleHBlY3RlZCkgIT09IC0xO1xuICAgIH07XG4gIH1cblxuICBwcmVkaWNhdGVGbiA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBpZiAoc2hvdWxkTWF0Y2hQcmltaXRpdmVzICYmICFpc09iamVjdChpdGVtKSkge1xuICAgICAgcmV0dXJuIGRlZXBDb21wYXJlKGl0ZW0sIGV4cHJlc3Npb24uJCwgY29tcGFyYXRvciwgZmFsc2UpO1xuICAgIH1cbiAgICByZXR1cm4gZGVlcENvbXBhcmUoaXRlbSwgZXhwcmVzc2lvbiwgY29tcGFyYXRvciwgbWF0Y2hBZ2FpbnN0QW55UHJvcCk7XG4gIH07XG5cbiAgcmV0dXJuIHByZWRpY2F0ZUZuO1xufVxuXG5mdW5jdGlvbiBkZWVwQ29tcGFyZShhY3R1YWwsIGV4cGVjdGVkLCBjb21wYXJhdG9yLCBtYXRjaEFnYWluc3RBbnlQcm9wLCBkb250TWF0Y2hXaG9sZU9iamVjdCkge1xuICB2YXIgYWN0dWFsVHlwZSA9IGdldFR5cGVGb3JGaWx0ZXIoYWN0dWFsKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGVGb3JGaWx0ZXIoZXhwZWN0ZWQpO1xuXG4gIGlmICgoZXhwZWN0ZWRUeXBlID09PSAnc3RyaW5nJykgJiYgKGV4cGVjdGVkLmNoYXJBdCgwKSA9PT0gJyEnKSkge1xuICAgIHJldHVybiAhZGVlcENvbXBhcmUoYWN0dWFsLCBleHBlY3RlZC5zdWJzdHJpbmcoMSksIGNvbXBhcmF0b3IsIG1hdGNoQWdhaW5zdEFueVByb3ApO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkoYWN0dWFsKSkge1xuICAgIC8vIEluIGNhc2UgYGFjdHVhbGAgaXMgYW4gYXJyYXksIGNvbnNpZGVyIGl0IGEgbWF0Y2hcbiAgICAvLyBpZiBBTlkgb2YgaXQncyBpdGVtcyBtYXRjaGVzIGBleHBlY3RlZGBcbiAgICByZXR1cm4gYWN0dWFsLnNvbWUoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgcmV0dXJuIGRlZXBDb21wYXJlKGl0ZW0sIGV4cGVjdGVkLCBjb21wYXJhdG9yLCBtYXRjaEFnYWluc3RBbnlQcm9wKTtcbiAgICB9KTtcbiAgfVxuXG4gIHN3aXRjaCAoYWN0dWFsVHlwZSkge1xuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICB2YXIga2V5O1xuICAgICAgaWYgKG1hdGNoQWdhaW5zdEFueVByb3ApIHtcbiAgICAgICAgZm9yIChrZXkgaW4gYWN0dWFsKSB7XG4gICAgICAgICAgaWYgKChrZXkuY2hhckF0KDApICE9PSAnJCcpICYmIGRlZXBDb21wYXJlKGFjdHVhbFtrZXldLCBleHBlY3RlZCwgY29tcGFyYXRvciwgdHJ1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9udE1hdGNoV2hvbGVPYmplY3QgPyBmYWxzZSA6IGRlZXBDb21wYXJlKGFjdHVhbCwgZXhwZWN0ZWQsIGNvbXBhcmF0b3IsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3IgKGtleSBpbiBleHBlY3RlZCkge1xuICAgICAgICAgIHZhciBleHBlY3RlZFZhbCA9IGV4cGVjdGVkW2tleV07XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZXhwZWN0ZWRWYWwpIHx8IGlzVW5kZWZpbmVkKGV4cGVjdGVkVmFsKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIG1hdGNoQW55UHJvcGVydHkgPSBrZXkgPT09ICckJztcbiAgICAgICAgICB2YXIgYWN0dWFsVmFsID0gbWF0Y2hBbnlQcm9wZXJ0eSA/IGFjdHVhbCA6IGFjdHVhbFtrZXldO1xuICAgICAgICAgIGlmICghZGVlcENvbXBhcmUoYWN0dWFsVmFsLCBleHBlY3RlZFZhbCwgY29tcGFyYXRvciwgbWF0Y2hBbnlQcm9wZXJ0eSwgbWF0Y2hBbnlQcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29tcGFyYXRvcihhY3R1YWwsIGV4cGVjdGVkKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGNvbXBhcmF0b3IoYWN0dWFsLCBleHBlY3RlZCk7XG4gIH1cbn1cblxuLy8gVXNlZCBmb3IgZWFzaWx5IGRpZmZlcmVudGlhdGluZyBiZXR3ZWVuIGBudWxsYCBhbmQgYWN0dWFsIGBvYmplY3RgXG5mdW5jdGlvbiBnZXRUeXBlRm9yRmlsdGVyKHZhbCkge1xuICByZXR1cm4gKHZhbCA9PT0gbnVsbCkgPyAnbnVsbCcgOiB0eXBlb2YgdmFsO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGN1cnJlbmN5XG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRm9ybWF0cyBhIG51bWJlciBhcyBhIGN1cnJlbmN5IChpZSAkMSwyMzQuNTYpLiBXaGVuIG5vIGN1cnJlbmN5IHN5bWJvbCBpcyBwcm92aWRlZCwgZGVmYXVsdFxuICogc3ltYm9sIGZvciBjdXJyZW50IGxvY2FsZSBpcyB1c2VkLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnQgSW5wdXQgdG8gZmlsdGVyLlxuICogQHBhcmFtIHtzdHJpbmc9fSBzeW1ib2wgQ3VycmVuY3kgc3ltYm9sIG9yIGlkZW50aWZpZXIgdG8gYmUgZGlzcGxheWVkLlxuICogQHBhcmFtIHtudW1iZXI9fSBmcmFjdGlvblNpemUgTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRvIHJvdW5kIHRoZSBhbW91bnQgdG8sIGRlZmF1bHRzIHRvIGRlZmF1bHQgbWF4IGZyYWN0aW9uIHNpemUgZm9yIGN1cnJlbnQgbG9jYWxlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBGb3JtYXR0ZWQgbnVtYmVyLlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwiY3VycmVuY3lFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjdXJyZW5jeUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUuYW1vdW50ID0gMTIzNC41NjtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwiYW1vdW50XCIgYXJpYS1sYWJlbD1cImFtb3VudFwiPiA8YnI+XG4gICAgICAgICBkZWZhdWx0IGN1cnJlbmN5IHN5bWJvbCAoJCk6IDxzcGFuIGlkPVwiY3VycmVuY3ktZGVmYXVsdFwiPnt7YW1vdW50IHwgY3VycmVuY3l9fTwvc3Bhbj48YnI+XG4gICAgICAgICBjdXN0b20gY3VycmVuY3kgaWRlbnRpZmllciAoVVNEJCk6IDxzcGFuIGlkPVwiY3VycmVuY3ktY3VzdG9tXCI+e3thbW91bnQgfCBjdXJyZW5jeTpcIlVTRCRcIn19PC9zcGFuPlxuICAgICAgICAgbm8gZnJhY3Rpb25zICgwKTogPHNwYW4gaWQ9XCJjdXJyZW5jeS1uby1mcmFjdGlvbnNcIj57e2Ftb3VudCB8IGN1cnJlbmN5OlwiVVNEJFwiOjB9fTwvc3Bhbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBpbml0IHdpdGggMTIzNC41NicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWRlZmF1bHQnKSkuZ2V0VGV4dCgpKS50b0JlKCckMSwyMzQuNTYnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1jdXN0b20nKSkuZ2V0VGV4dCgpKS50b0JlKCdVU0QkMSwyMzQuNTYnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1uby1mcmFjdGlvbnMnKSkuZ2V0VGV4dCgpKS50b0JlKCdVU0QkMSwyMzUnKTtcbiAgICAgICB9KTtcbiAgICAgICBpdCgnc2hvdWxkIHVwZGF0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT0gJ3NhZmFyaScpIHtcbiAgICAgICAgICAgLy8gU2FmYXJpIGRvZXMgbm90IHVuZGVyc3RhbmQgdGhlIG1pbnVzIGtleS4gU2VlXG4gICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzQ4MVxuICAgICAgICAgICByZXR1cm47XG4gICAgICAgICB9XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdhbW91bnQnKSkuY2xlYXIoKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2Ftb3VudCcpKS5zZW5kS2V5cygnLTEyMzQnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1kZWZhdWx0JykpLmdldFRleHQoKSkudG9CZSgnKCQxLDIzNC4wMCknKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1jdXN0b20nKSkuZ2V0VGV4dCgpKS50b0JlKCcoVVNEJDEsMjM0LjAwKScpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LW5vLWZyYWN0aW9ucycpKS5nZXRUZXh0KCkpLnRvQmUoJyhVU0QkMSwyMzQpJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuY3VycmVuY3lGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddO1xuZnVuY3Rpb24gY3VycmVuY3lGaWx0ZXIoJGxvY2FsZSkge1xuICB2YXIgZm9ybWF0cyA9ICRsb2NhbGUuTlVNQkVSX0ZPUk1BVFM7XG4gIHJldHVybiBmdW5jdGlvbihhbW91bnQsIGN1cnJlbmN5U3ltYm9sLCBmcmFjdGlvblNpemUpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQoY3VycmVuY3lTeW1ib2wpKSB7XG4gICAgICBjdXJyZW5jeVN5bWJvbCA9IGZvcm1hdHMuQ1VSUkVOQ1lfU1lNO1xuICAgIH1cblxuICAgIGlmIChpc1VuZGVmaW5lZChmcmFjdGlvblNpemUpKSB7XG4gICAgICBmcmFjdGlvblNpemUgPSBmb3JtYXRzLlBBVFRFUk5TWzFdLm1heEZyYWM7XG4gICAgfVxuXG4gICAgLy8gaWYgbnVsbCBvciB1bmRlZmluZWQgcGFzcyBpdCB0aHJvdWdoXG4gICAgcmV0dXJuIChhbW91bnQgPT0gbnVsbClcbiAgICAgICAgPyBhbW91bnRcbiAgICAgICAgOiBmb3JtYXROdW1iZXIoYW1vdW50LCBmb3JtYXRzLlBBVFRFUk5TWzFdLCBmb3JtYXRzLkdST1VQX1NFUCwgZm9ybWF0cy5ERUNJTUFMX1NFUCwgZnJhY3Rpb25TaXplKS5cbiAgICAgICAgICAgIHJlcGxhY2UoL1xcdTAwQTQvZywgY3VycmVuY3lTeW1ib2wpO1xuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIG51bWJlclxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZvcm1hdHMgYSBudW1iZXIgYXMgdGV4dC5cbiAqXG4gKiBJZiB0aGUgaW5wdXQgaXMgbnVsbCBvciB1bmRlZmluZWQsIGl0IHdpbGwganVzdCBiZSByZXR1cm5lZC5cbiAqIElmIHRoZSBpbnB1dCBpcyBpbmZpbml0ZSAoSW5maW5pdHkvLUluZmluaXR5KSB0aGUgSW5maW5pdHkgc3ltYm9sICfiiJ4nIGlzIHJldHVybmVkLlxuICogSWYgdGhlIGlucHV0IGlzIG5vdCBhIG51bWJlciBhbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQuXG4gKlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gbnVtYmVyIE51bWJlciB0byBmb3JtYXQuXG4gKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKT19IGZyYWN0aW9uU2l6ZSBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdG8gcm91bmQgdGhlIG51bWJlciB0by5cbiAqIElmIHRoaXMgaXMgbm90IHByb3ZpZGVkIHRoZW4gdGhlIGZyYWN0aW9uIHNpemUgaXMgY29tcHV0ZWQgZnJvbSB0aGUgY3VycmVudCBsb2NhbGUncyBudW1iZXJcbiAqIGZvcm1hdHRpbmcgcGF0dGVybi4gSW4gdGhlIGNhc2Ugb2YgdGhlIGRlZmF1bHQgbG9jYWxlLCBpdCB3aWxsIGJlIDMuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBOdW1iZXIgcm91bmRlZCB0byBkZWNpbWFsUGxhY2VzIGFuZCBwbGFjZXMgYSDigJws4oCdIGFmdGVyIGVhY2ggdGhpcmQgZGlnaXQuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cIm51bWJlckZpbHRlckV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ251bWJlckZpbHRlckV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUudmFsID0gMTIzNC41Njc4OTtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8bGFiZWw+RW50ZXIgbnVtYmVyOiA8aW5wdXQgbmctbW9kZWw9J3ZhbCc+PC9sYWJlbD48YnI+XG4gICAgICAgICBEZWZhdWx0IGZvcm1hdHRpbmc6IDxzcGFuIGlkPSdudW1iZXItZGVmYXVsdCc+e3t2YWwgfCBudW1iZXJ9fTwvc3Bhbj48YnI+XG4gICAgICAgICBObyBmcmFjdGlvbnM6IDxzcGFuPnt7dmFsIHwgbnVtYmVyOjB9fTwvc3Bhbj48YnI+XG4gICAgICAgICBOZWdhdGl2ZSBudW1iZXI6IDxzcGFuPnt7LXZhbCB8IG51bWJlcjo0fX08L3NwYW4+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgZm9ybWF0IG51bWJlcnMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdudW1iZXItZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJzEsMjM0LjU2OCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndmFsIHwgbnVtYmVyOjAnKSkuZ2V0VGV4dCgpKS50b0JlKCcxLDIzNScpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnLXZhbCB8IG51bWJlcjo0JykpLmdldFRleHQoKSkudG9CZSgnLTEsMjM0LjU2NzknKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgdXBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd2YWwnKSkuY2xlYXIoKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbCcpKS5zZW5kS2V5cygnMzM3NC4zMzMnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdudW1iZXItZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJzMsMzc0LjMzMycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndmFsIHwgbnVtYmVyOjAnKSkuZ2V0VGV4dCgpKS50b0JlKCczLDM3NCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnLXZhbCB8IG51bWJlcjo0JykpLmdldFRleHQoKSkudG9CZSgnLTMsMzc0LjMzMzAnKTtcbiAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG5udW1iZXJGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddO1xuZnVuY3Rpb24gbnVtYmVyRmlsdGVyKCRsb2NhbGUpIHtcbiAgdmFyIGZvcm1hdHMgPSAkbG9jYWxlLk5VTUJFUl9GT1JNQVRTO1xuICByZXR1cm4gZnVuY3Rpb24obnVtYmVyLCBmcmFjdGlvblNpemUpIHtcblxuICAgIC8vIGlmIG51bGwgb3IgdW5kZWZpbmVkIHBhc3MgaXQgdGhyb3VnaFxuICAgIHJldHVybiAobnVtYmVyID09IG51bGwpXG4gICAgICAgID8gbnVtYmVyXG4gICAgICAgIDogZm9ybWF0TnVtYmVyKG51bWJlciwgZm9ybWF0cy5QQVRURVJOU1swXSwgZm9ybWF0cy5HUk9VUF9TRVAsIGZvcm1hdHMuREVDSU1BTF9TRVAsXG4gICAgICAgICAgICAgICAgICAgICAgIGZyYWN0aW9uU2l6ZSk7XG4gIH07XG59XG5cbnZhciBERUNJTUFMX1NFUCA9ICcuJztcbmZ1bmN0aW9uIGZvcm1hdE51bWJlcihudW1iZXIsIHBhdHRlcm4sIGdyb3VwU2VwLCBkZWNpbWFsU2VwLCBmcmFjdGlvblNpemUpIHtcbiAgaWYgKGlzT2JqZWN0KG51bWJlcikpIHJldHVybiAnJztcblxuICB2YXIgaXNOZWdhdGl2ZSA9IG51bWJlciA8IDA7XG4gIG51bWJlciA9IE1hdGguYWJzKG51bWJlcik7XG5cbiAgdmFyIGlzSW5maW5pdHkgPSBudW1iZXIgPT09IEluZmluaXR5O1xuICBpZiAoIWlzSW5maW5pdHkgJiYgIWlzRmluaXRlKG51bWJlcikpIHJldHVybiAnJztcblxuICB2YXIgbnVtU3RyID0gbnVtYmVyICsgJycsXG4gICAgICBmb3JtYXRlZFRleHQgPSAnJyxcbiAgICAgIGhhc0V4cG9uZW50ID0gZmFsc2UsXG4gICAgICBwYXJ0cyA9IFtdO1xuXG4gIGlmIChpc0luZmluaXR5KSBmb3JtYXRlZFRleHQgPSAnXFx1MjIxZSc7XG5cbiAgaWYgKCFpc0luZmluaXR5ICYmIG51bVN0ci5pbmRleE9mKCdlJykgIT09IC0xKSB7XG4gICAgdmFyIG1hdGNoID0gbnVtU3RyLm1hdGNoKC8oW1xcZFxcLl0rKWUoLT8pKFxcZCspLyk7XG4gICAgaWYgKG1hdGNoICYmIG1hdGNoWzJdID09ICctJyAmJiBtYXRjaFszXSA+IGZyYWN0aW9uU2l6ZSArIDEpIHtcbiAgICAgIG51bWJlciA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcm1hdGVkVGV4dCA9IG51bVN0cjtcbiAgICAgIGhhc0V4cG9uZW50ID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWlzSW5maW5pdHkgJiYgIWhhc0V4cG9uZW50KSB7XG4gICAgdmFyIGZyYWN0aW9uTGVuID0gKG51bVN0ci5zcGxpdChERUNJTUFMX1NFUClbMV0gfHwgJycpLmxlbmd0aDtcblxuICAgIC8vIGRldGVybWluZSBmcmFjdGlvblNpemUgaWYgaXQgaXMgbm90IHNwZWNpZmllZFxuICAgIGlmIChpc1VuZGVmaW5lZChmcmFjdGlvblNpemUpKSB7XG4gICAgICBmcmFjdGlvblNpemUgPSBNYXRoLm1pbihNYXRoLm1heChwYXR0ZXJuLm1pbkZyYWMsIGZyYWN0aW9uTGVuKSwgcGF0dGVybi5tYXhGcmFjKTtcbiAgICB9XG5cbiAgICAvLyBzYWZlbHkgcm91bmQgbnVtYmVycyBpbiBKUyB3aXRob3V0IGhpdHRpbmcgaW1wcmVjaXNpb25zIG9mIGZsb2F0aW5nLXBvaW50IGFyaXRobWV0aWNzXG4gICAgLy8gaW5zcGlyZWQgYnk6XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9yb3VuZFxuICAgIG51bWJlciA9ICsoTWF0aC5yb3VuZCgrKG51bWJlci50b1N0cmluZygpICsgJ2UnICsgZnJhY3Rpb25TaXplKSkudG9TdHJpbmcoKSArICdlJyArIC1mcmFjdGlvblNpemUpO1xuXG4gICAgdmFyIGZyYWN0aW9uID0gKCcnICsgbnVtYmVyKS5zcGxpdChERUNJTUFMX1NFUCk7XG4gICAgdmFyIHdob2xlID0gZnJhY3Rpb25bMF07XG4gICAgZnJhY3Rpb24gPSBmcmFjdGlvblsxXSB8fCAnJztcblxuICAgIHZhciBpLCBwb3MgPSAwLFxuICAgICAgICBsZ3JvdXAgPSBwYXR0ZXJuLmxnU2l6ZSxcbiAgICAgICAgZ3JvdXAgPSBwYXR0ZXJuLmdTaXplO1xuXG4gICAgaWYgKHdob2xlLmxlbmd0aCA+PSAobGdyb3VwICsgZ3JvdXApKSB7XG4gICAgICBwb3MgPSB3aG9sZS5sZW5ndGggLSBsZ3JvdXA7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgcG9zOyBpKyspIHtcbiAgICAgICAgaWYgKChwb3MgLSBpKSAlIGdyb3VwID09PSAwICYmIGkgIT09IDApIHtcbiAgICAgICAgICBmb3JtYXRlZFRleHQgKz0gZ3JvdXBTZXA7XG4gICAgICAgIH1cbiAgICAgICAgZm9ybWF0ZWRUZXh0ICs9IHdob2xlLmNoYXJBdChpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSBwb3M7IGkgPCB3aG9sZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCh3aG9sZS5sZW5ndGggLSBpKSAlIGxncm91cCA9PT0gMCAmJiBpICE9PSAwKSB7XG4gICAgICAgIGZvcm1hdGVkVGV4dCArPSBncm91cFNlcDtcbiAgICAgIH1cbiAgICAgIGZvcm1hdGVkVGV4dCArPSB3aG9sZS5jaGFyQXQoaSk7XG4gICAgfVxuXG4gICAgLy8gZm9ybWF0IGZyYWN0aW9uIHBhcnQuXG4gICAgd2hpbGUgKGZyYWN0aW9uLmxlbmd0aCA8IGZyYWN0aW9uU2l6ZSkge1xuICAgICAgZnJhY3Rpb24gKz0gJzAnO1xuICAgIH1cblxuICAgIGlmIChmcmFjdGlvblNpemUgJiYgZnJhY3Rpb25TaXplICE9PSBcIjBcIikgZm9ybWF0ZWRUZXh0ICs9IGRlY2ltYWxTZXAgKyBmcmFjdGlvbi5zdWJzdHIoMCwgZnJhY3Rpb25TaXplKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZnJhY3Rpb25TaXplID4gMCAmJiBudW1iZXIgPCAxKSB7XG4gICAgICBmb3JtYXRlZFRleHQgPSBudW1iZXIudG9GaXhlZChmcmFjdGlvblNpemUpO1xuICAgICAgbnVtYmVyID0gcGFyc2VGbG9hdChmb3JtYXRlZFRleHQpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChudW1iZXIgPT09IDApIHtcbiAgICBpc05lZ2F0aXZlID0gZmFsc2U7XG4gIH1cblxuICBwYXJ0cy5wdXNoKGlzTmVnYXRpdmUgPyBwYXR0ZXJuLm5lZ1ByZSA6IHBhdHRlcm4ucG9zUHJlLFxuICAgICAgICAgICAgIGZvcm1hdGVkVGV4dCxcbiAgICAgICAgICAgICBpc05lZ2F0aXZlID8gcGF0dGVybi5uZWdTdWYgOiBwYXR0ZXJuLnBvc1N1Zik7XG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKTtcbn1cblxuZnVuY3Rpb24gcGFkTnVtYmVyKG51bSwgZGlnaXRzLCB0cmltKSB7XG4gIHZhciBuZWcgPSAnJztcbiAgaWYgKG51bSA8IDApIHtcbiAgICBuZWcgPSAgJy0nO1xuICAgIG51bSA9IC1udW07XG4gIH1cbiAgbnVtID0gJycgKyBudW07XG4gIHdoaWxlIChudW0ubGVuZ3RoIDwgZGlnaXRzKSBudW0gPSAnMCcgKyBudW07XG4gIGlmICh0cmltKSB7XG4gICAgbnVtID0gbnVtLnN1YnN0cihudW0ubGVuZ3RoIC0gZGlnaXRzKTtcbiAgfVxuICByZXR1cm4gbmVnICsgbnVtO1xufVxuXG5cbmZ1bmN0aW9uIGRhdGVHZXR0ZXIobmFtZSwgc2l6ZSwgb2Zmc2V0LCB0cmltKSB7XG4gIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHZhciB2YWx1ZSA9IGRhdGVbJ2dldCcgKyBuYW1lXSgpO1xuICAgIGlmIChvZmZzZXQgPiAwIHx8IHZhbHVlID4gLW9mZnNldCkge1xuICAgICAgdmFsdWUgKz0gb2Zmc2V0O1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IDAgJiYgb2Zmc2V0ID09IC0xMikgdmFsdWUgPSAxMjtcbiAgICByZXR1cm4gcGFkTnVtYmVyKHZhbHVlLCBzaXplLCB0cmltKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGF0ZVN0ckdldHRlcihuYW1lLCBzaG9ydEZvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUsIGZvcm1hdHMpIHtcbiAgICB2YXIgdmFsdWUgPSBkYXRlWydnZXQnICsgbmFtZV0oKTtcbiAgICB2YXIgZ2V0ID0gdXBwZXJjYXNlKHNob3J0Rm9ybSA/ICgnU0hPUlQnICsgbmFtZSkgOiBuYW1lKTtcblxuICAgIHJldHVybiBmb3JtYXRzW2dldF1bdmFsdWVdO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0aW1lWm9uZUdldHRlcihkYXRlLCBmb3JtYXRzLCBvZmZzZXQpIHtcbiAgdmFyIHpvbmUgPSAtMSAqIG9mZnNldDtcbiAgdmFyIHBhZGRlZFpvbmUgPSAoem9uZSA+PSAwKSA/IFwiK1wiIDogXCJcIjtcblxuICBwYWRkZWRab25lICs9IHBhZE51bWJlcihNYXRoW3pvbmUgPiAwID8gJ2Zsb29yJyA6ICdjZWlsJ10oem9uZSAvIDYwKSwgMikgK1xuICAgICAgICAgICAgICAgIHBhZE51bWJlcihNYXRoLmFicyh6b25lICUgNjApLCAyKTtcblxuICByZXR1cm4gcGFkZGVkWm9uZTtcbn1cblxuZnVuY3Rpb24gZ2V0Rmlyc3RUaHVyc2RheU9mWWVhcih5ZWFyKSB7XG4gICAgLy8gMCA9IGluZGV4IG9mIEphbnVhcnlcbiAgICB2YXIgZGF5T2ZXZWVrT25GaXJzdCA9IChuZXcgRGF0ZSh5ZWFyLCAwLCAxKSkuZ2V0RGF5KCk7XG4gICAgLy8gNCA9IGluZGV4IG9mIFRodXJzZGF5ICgrMSB0byBhY2NvdW50IGZvciAxc3QgPSA1KVxuICAgIC8vIDExID0gaW5kZXggb2YgKm5leHQqIFRodXJzZGF5ICgrMSBhY2NvdW50IGZvciAxc3QgPSAxMilcbiAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgMCwgKChkYXlPZldlZWtPbkZpcnN0IDw9IDQpID8gNSA6IDEyKSAtIGRheU9mV2Vla09uRmlyc3QpO1xufVxuXG5mdW5jdGlvbiBnZXRUaHVyc2RheVRoaXNXZWVrKGRhdGV0aW1lKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGRhdGV0aW1lLmdldEZ1bGxZZWFyKCksIGRhdGV0aW1lLmdldE1vbnRoKCksXG4gICAgICAvLyA0ID0gaW5kZXggb2YgVGh1cnNkYXlcbiAgICAgIGRhdGV0aW1lLmdldERhdGUoKSArICg0IC0gZGF0ZXRpbWUuZ2V0RGF5KCkpKTtcbn1cblxuZnVuY3Rpb24gd2Vla0dldHRlcihzaXplKSB7XG4gICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgdmFyIGZpcnN0VGh1cnMgPSBnZXRGaXJzdFRodXJzZGF5T2ZZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSksXG4gICAgICAgICB0aGlzVGh1cnMgPSBnZXRUaHVyc2RheVRoaXNXZWVrKGRhdGUpO1xuXG4gICAgICB2YXIgZGlmZiA9ICt0aGlzVGh1cnMgLSArZmlyc3RUaHVycyxcbiAgICAgICAgIHJlc3VsdCA9IDEgKyBNYXRoLnJvdW5kKGRpZmYgLyA2LjA0OGU4KTsgLy8gNi4wNDhlOCBtcyBwZXIgd2Vla1xuXG4gICAgICByZXR1cm4gcGFkTnVtYmVyKHJlc3VsdCwgc2l6ZSk7XG4gICB9O1xufVxuXG5mdW5jdGlvbiBhbXBtR2V0dGVyKGRhdGUsIGZvcm1hdHMpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKSA8IDEyID8gZm9ybWF0cy5BTVBNU1swXSA6IGZvcm1hdHMuQU1QTVNbMV07XG59XG5cbmZ1bmN0aW9uIGVyYUdldHRlcihkYXRlLCBmb3JtYXRzKSB7XG4gIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCkgPD0gMCA/IGZvcm1hdHMuRVJBU1swXSA6IGZvcm1hdHMuRVJBU1sxXTtcbn1cblxuZnVuY3Rpb24gbG9uZ0VyYUdldHRlcihkYXRlLCBmb3JtYXRzKSB7XG4gIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCkgPD0gMCA/IGZvcm1hdHMuRVJBTkFNRVNbMF0gOiBmb3JtYXRzLkVSQU5BTUVTWzFdO1xufVxuXG52YXIgREFURV9GT1JNQVRTID0ge1xuICB5eXl5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDQpLFxuICAgIHl5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDIsIDAsIHRydWUpLFxuICAgICB5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDEpLFxuICBNTU1NOiBkYXRlU3RyR2V0dGVyKCdNb250aCcpLFxuICAgTU1NOiBkYXRlU3RyR2V0dGVyKCdNb250aCcsIHRydWUpLFxuICAgIE1NOiBkYXRlR2V0dGVyKCdNb250aCcsIDIsIDEpLFxuICAgICBNOiBkYXRlR2V0dGVyKCdNb250aCcsIDEsIDEpLFxuICAgIGRkOiBkYXRlR2V0dGVyKCdEYXRlJywgMiksXG4gICAgIGQ6IGRhdGVHZXR0ZXIoJ0RhdGUnLCAxKSxcbiAgICBISDogZGF0ZUdldHRlcignSG91cnMnLCAyKSxcbiAgICAgSDogZGF0ZUdldHRlcignSG91cnMnLCAxKSxcbiAgICBoaDogZGF0ZUdldHRlcignSG91cnMnLCAyLCAtMTIpLFxuICAgICBoOiBkYXRlR2V0dGVyKCdIb3VycycsIDEsIC0xMiksXG4gICAgbW06IGRhdGVHZXR0ZXIoJ01pbnV0ZXMnLCAyKSxcbiAgICAgbTogZGF0ZUdldHRlcignTWludXRlcycsIDEpLFxuICAgIHNzOiBkYXRlR2V0dGVyKCdTZWNvbmRzJywgMiksXG4gICAgIHM6IGRhdGVHZXR0ZXIoJ1NlY29uZHMnLCAxKSxcbiAgICAgLy8gd2hpbGUgSVNPIDg2MDEgcmVxdWlyZXMgZnJhY3Rpb25zIHRvIGJlIHByZWZpeGVkIHdpdGggYC5gIG9yIGAsYFxuICAgICAvLyB3ZSBjYW4gYmUganVzdCBzYWZlbHkgcmVseSBvbiB1c2luZyBgc3NzYCBzaW5jZSB3ZSBjdXJyZW50bHkgZG9uJ3Qgc3VwcG9ydCBzaW5nbGUgb3IgdHdvIGRpZ2l0IGZyYWN0aW9uc1xuICAgc3NzOiBkYXRlR2V0dGVyKCdNaWxsaXNlY29uZHMnLCAzKSxcbiAgRUVFRTogZGF0ZVN0ckdldHRlcignRGF5JyksXG4gICBFRUU6IGRhdGVTdHJHZXR0ZXIoJ0RheScsIHRydWUpLFxuICAgICBhOiBhbXBtR2V0dGVyLFxuICAgICBaOiB0aW1lWm9uZUdldHRlcixcbiAgICB3dzogd2Vla0dldHRlcigyKSxcbiAgICAgdzogd2Vla0dldHRlcigxKSxcbiAgICAgRzogZXJhR2V0dGVyLFxuICAgICBHRzogZXJhR2V0dGVyLFxuICAgICBHR0c6IGVyYUdldHRlcixcbiAgICAgR0dHRzogbG9uZ0VyYUdldHRlclxufTtcblxudmFyIERBVEVfRk9STUFUU19TUExJVCA9IC8oKD86W155TWRIaG1zYVpFd0cnXSspfCg/OicoPzpbXiddfCcnKSonKXwoPzpFK3x5K3xNK3xkK3xIK3xoK3xtK3xzK3xhfFp8Ryt8dyspKSguKikvLFxuICAgIE5VTUJFUl9TVFJJTkcgPSAvXlxcLT9cXGQrJC87XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgZGF0ZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqICAgRm9ybWF0cyBgZGF0ZWAgdG8gYSBzdHJpbmcgYmFzZWQgb24gdGhlIHJlcXVlc3RlZCBgZm9ybWF0YC5cbiAqXG4gKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gYmUgY29tcG9zZWQgb2YgdGhlIGZvbGxvd2luZyBlbGVtZW50czpcbiAqXG4gKiAgICogYCd5eXl5J2A6IDQgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciAoZS5nLiBBRCAxID0+IDAwMDEsIEFEIDIwMTAgPT4gMjAxMClcbiAqICAgKiBgJ3l5J2A6IDIgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciwgcGFkZGVkICgwMC05OSkuIChlLmcuIEFEIDIwMDEgPT4gMDEsIEFEIDIwMTAgPT4gMTApXG4gKiAgICogYCd5J2A6IDEgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciwgZS5nLiAoQUQgMSA9PiAxLCBBRCAxOTkgPT4gMTk5KVxuICogICAqIGAnTU1NTSdgOiBNb250aCBpbiB5ZWFyIChKYW51YXJ5LURlY2VtYmVyKVxuICogICAqIGAnTU1NJ2A6IE1vbnRoIGluIHllYXIgKEphbi1EZWMpXG4gKiAgICogYCdNTSdgOiBNb250aCBpbiB5ZWFyLCBwYWRkZWQgKDAxLTEyKVxuICogICAqIGAnTSdgOiBNb250aCBpbiB5ZWFyICgxLTEyKVxuICogICAqIGAnZGQnYDogRGF5IGluIG1vbnRoLCBwYWRkZWQgKDAxLTMxKVxuICogICAqIGAnZCdgOiBEYXkgaW4gbW9udGggKDEtMzEpXG4gKiAgICogYCdFRUVFJ2A6IERheSBpbiBXZWVrLChTdW5kYXktU2F0dXJkYXkpXG4gKiAgICogYCdFRUUnYDogRGF5IGluIFdlZWssIChTdW4tU2F0KVxuICogICAqIGAnSEgnYDogSG91ciBpbiBkYXksIHBhZGRlZCAoMDAtMjMpXG4gKiAgICogYCdIJ2A6IEhvdXIgaW4gZGF5ICgwLTIzKVxuICogICAqIGAnaGgnYDogSG91ciBpbiBBTS9QTSwgcGFkZGVkICgwMS0xMilcbiAqICAgKiBgJ2gnYDogSG91ciBpbiBBTS9QTSwgKDEtMTIpXG4gKiAgICogYCdtbSdgOiBNaW51dGUgaW4gaG91ciwgcGFkZGVkICgwMC01OSlcbiAqICAgKiBgJ20nYDogTWludXRlIGluIGhvdXIgKDAtNTkpXG4gKiAgICogYCdzcydgOiBTZWNvbmQgaW4gbWludXRlLCBwYWRkZWQgKDAwLTU5KVxuICogICAqIGAncydgOiBTZWNvbmQgaW4gbWludXRlICgwLTU5KVxuICogICAqIGAnc3NzJ2A6IE1pbGxpc2Vjb25kIGluIHNlY29uZCwgcGFkZGVkICgwMDAtOTk5KVxuICogICAqIGAnYSdgOiBBTS9QTSBtYXJrZXJcbiAqICAgKiBgJ1onYDogNCBkaWdpdCAoK3NpZ24pIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB0aW1lem9uZSBvZmZzZXQgKC0xMjAwLSsxMjAwKVxuICogICAqIGAnd3cnYDogV2VlayBvZiB5ZWFyLCBwYWRkZWQgKDAwLTUzKS4gV2VlayAwMSBpcyB0aGUgd2VlayB3aXRoIHRoZSBmaXJzdCBUaHVyc2RheSBvZiB0aGUgeWVhclxuICogICAqIGAndydgOiBXZWVrIG9mIHllYXIgKDAtNTMpLiBXZWVrIDEgaXMgdGhlIHdlZWsgd2l0aCB0aGUgZmlyc3QgVGh1cnNkYXkgb2YgdGhlIHllYXJcbiAqICAgKiBgJ0cnYCwgYCdHRydgLCBgJ0dHRydgOiBUaGUgYWJicmV2aWF0ZWQgZm9ybSBvZiB0aGUgZXJhIHN0cmluZyAoZS5nLiAnQUQnKVxuICogICAqIGAnR0dHRydgOiBUaGUgbG9uZyBmb3JtIG9mIHRoZSBlcmEgc3RyaW5nIChlLmcuICdBbm5vIERvbWluaScpXG4gKlxuICogICBgZm9ybWF0YCBzdHJpbmcgY2FuIGFsc28gYmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgcHJlZGVmaW5lZFxuICogICB7QGxpbmsgZ3VpZGUvaTE4biBsb2NhbGl6YWJsZSBmb3JtYXRzfTpcbiAqXG4gKiAgICogYCdtZWRpdW0nYDogZXF1aXZhbGVudCB0byBgJ01NTSBkLCB5IGg6bW06c3MgYSdgIGZvciBlbl9VUyBsb2NhbGVcbiAqICAgICAoZS5nLiBTZXAgMywgMjAxMCAxMjowNTowOCBQTSlcbiAqICAgKiBgJ3Nob3J0J2A6IGVxdWl2YWxlbnQgdG8gYCdNL2QveXkgaDptbSBhJ2AgZm9yIGVuX1VTICBsb2NhbGUgKGUuZy4gOS8zLzEwIDEyOjA1IFBNKVxuICogICAqIGAnZnVsbERhdGUnYDogZXF1aXZhbGVudCB0byBgJ0VFRUUsIE1NTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlXG4gKiAgICAgKGUuZy4gRnJpZGF5LCBTZXB0ZW1iZXIgMywgMjAxMClcbiAqICAgKiBgJ2xvbmdEYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdNTU1NIGQsIHknYCBmb3IgZW5fVVMgIGxvY2FsZSAoZS5nLiBTZXB0ZW1iZXIgMywgMjAxMClcbiAqICAgKiBgJ21lZGl1bURhdGUnYDogZXF1aXZhbGVudCB0byBgJ01NTSBkLCB5J2AgZm9yIGVuX1VTICBsb2NhbGUgKGUuZy4gU2VwIDMsIDIwMTApXG4gKiAgICogYCdzaG9ydERhdGUnYDogZXF1aXZhbGVudCB0byBgJ00vZC95eSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gOS8zLzEwKVxuICogICAqIGAnbWVkaXVtVGltZSdgOiBlcXVpdmFsZW50IHRvIGAnaDptbTpzcyBhJ2AgZm9yIGVuX1VTIGxvY2FsZSAoZS5nLiAxMjowNTowOCBQTSlcbiAqICAgKiBgJ3Nob3J0VGltZSdgOiBlcXVpdmFsZW50IHRvIGAnaDptbSBhJ2AgZm9yIGVuX1VTIGxvY2FsZSAoZS5nLiAxMjowNSBQTSlcbiAqXG4gKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gY29udGFpbiBsaXRlcmFsIHZhbHVlcy4gVGhlc2UgbmVlZCB0byBiZSBlc2NhcGVkIGJ5IHN1cnJvdW5kaW5nIHdpdGggc2luZ2xlIHF1b3RlcyAoZS5nLlxuICogICBgXCJoICdpbiB0aGUgbW9ybmluZydcImApLiBJbiBvcmRlciB0byBvdXRwdXQgYSBzaW5nbGUgcXVvdGUsIGVzY2FwZSBpdCAtIGkuZS4sIHR3byBzaW5nbGUgcXVvdGVzIGluIGEgc2VxdWVuY2VcbiAqICAgKGUuZy4gYFwiaCAnbycnY2xvY2snXCJgKS5cbiAqXG4gKiBAcGFyYW0geyhEYXRlfG51bWJlcnxzdHJpbmcpfSBkYXRlIERhdGUgdG8gZm9ybWF0IGVpdGhlciBhcyBEYXRlIG9iamVjdCwgbWlsbGlzZWNvbmRzIChzdHJpbmcgb3JcbiAqICAgIG51bWJlcikgb3IgdmFyaW91cyBJU08gODYwMSBkYXRldGltZSBzdHJpbmcgZm9ybWF0cyAoZS5nLiB5eXl5LU1NLWRkVEhIOm1tOnNzLnNzc1ogYW5kIGl0c1xuICogICAgc2hvcnRlciB2ZXJzaW9ucyBsaWtlIHl5eXktTU0tZGRUSEg6bW1aLCB5eXl5LU1NLWRkIG9yIHl5eXlNTWRkVEhIbW1zc1opLiBJZiBubyB0aW1lem9uZSBpc1xuICogICAgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaW5wdXQsIHRoZSB0aW1lIGlzIGNvbnNpZGVyZWQgdG8gYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICogQHBhcmFtIHtzdHJpbmc9fSBmb3JtYXQgRm9ybWF0dGluZyBydWxlcyAoc2VlIERlc2NyaXB0aW9uKS4gSWYgbm90IHNwZWNpZmllZCxcbiAqICAgIGBtZWRpdW1EYXRlYCBpcyB1c2VkLlxuICogQHBhcmFtIHtzdHJpbmc9fSB0aW1lem9uZSBUaW1lem9uZSB0byBiZSB1c2VkIGZvciBmb3JtYXR0aW5nLiBJdCB1bmRlcnN0YW5kcyBVVEMvR01UIGFuZCB0aGVcbiAqICAgIGNvbnRpbmVudGFsIFVTIHRpbWUgem9uZSBhYmJyZXZpYXRpb25zLCBidXQgZm9yIGdlbmVyYWwgdXNlLCB1c2UgYSB0aW1lIHpvbmUgb2Zmc2V0LCBmb3JcbiAqICAgIGV4YW1wbGUsIGAnKzA0MzAnYCAoNCBob3VycywgMzAgbWludXRlcyBlYXN0IG9mIHRoZSBHcmVlbndpY2ggbWVyaWRpYW4pXG4gKiAgICBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIgd2lsbCBiZSB1c2VkLlxuICogQHJldHVybnMge3N0cmluZ30gRm9ybWF0dGVkIHN0cmluZyBvciB0aGUgaW5wdXQgaWYgaW5wdXQgaXMgbm90IHJlY29nbml6ZWQgYXMgZGF0ZS9taWxsaXMuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOidtZWRpdW0nfX08L3NwYW4+OlxuICAgICAgICAgICA8c3Bhbj57ezEyODgzMjM2MjMwMDYgfCBkYXRlOidtZWRpdW0nfX08L3NwYW4+PGJyPlxuICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOid5eXl5LU1NLWRkIEhIOm1tOnNzIFonfX08L3NwYW4+OlxuICAgICAgICAgIDxzcGFuPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J3l5eXktTU0tZGQgSEg6bW06c3MgWid9fTwvc3Bhbj48YnI+XG4gICAgICAgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J01NL2RkL3l5eXkgQCBoOm1tYSd9fTwvc3Bhbj46XG4gICAgICAgICAgPHNwYW4+e3snMTI4ODMyMzYyMzAwNicgfCBkYXRlOidNTS9kZC95eXl5IEAgaDptbWEnfX08L3NwYW4+PGJyPlxuICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOlwiTU0vZGQveXl5eSAnYXQnIGg6bW1hXCJ9fTwvc3Bhbj46XG4gICAgICAgICAgPHNwYW4+e3snMTI4ODMyMzYyMzAwNicgfCBkYXRlOlwiTU0vZGQveXl5eSAnYXQnIGg6bW1hXCJ9fTwvc3Bhbj48YnI+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgZm9ybWF0IGRhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoXCIxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJ1wiKSkuZ2V0VGV4dCgpKS5cbiAgICAgICAgICAgIHRvTWF0Y2goL09jdCAyXFxkLCAyMDEwIFxcZHsxLDJ9OlxcZHsyfTpcXGR7Mn0gKEFNfFBNKS8pO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZyhcIjEyODgzMjM2MjMwMDYgfCBkYXRlOid5eXl5LU1NLWRkIEhIOm1tOnNzIFonXCIpKS5nZXRUZXh0KCkpLlxuICAgICAgICAgICAgdG9NYXRjaCgvMjAxMFxcLTEwXFwtMlxcZCBcXGR7Mn06XFxkezJ9OlxcZHsyfSAoXFwtfFxcKyk/XFxkezR9Lyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKFwiJzEyODgzMjM2MjMwMDYnIHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJ1wiKSkuZ2V0VGV4dCgpKS5cbiAgICAgICAgICAgIHRvTWF0Y2goLzEwXFwvMlxcZFxcLzIwMTAgQCBcXGR7MSwyfTpcXGR7Mn0oQU18UE0pLyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKFwiJzEyODgzMjM2MjMwMDYnIHwgZGF0ZTpcXFwiTU0vZGQveXl5eSAnYXQnIGg6bW1hXFxcIlwiKSkuZ2V0VGV4dCgpKS5cbiAgICAgICAgICAgIHRvTWF0Y2goLzEwXFwvMlxcZFxcLzIwMTAgYXQgXFxkezEsMn06XFxkezJ9KEFNfFBNKS8pO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbmRhdGVGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddO1xuZnVuY3Rpb24gZGF0ZUZpbHRlcigkbG9jYWxlKSB7XG5cblxuICB2YXIgUl9JU084NjAxX1NUUiA9IC9eKFxcZHs0fSktPyhcXGRcXGQpLT8oXFxkXFxkKSg/OlQoXFxkXFxkKSg/Ojo/KFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86XFwuKFxcZCspKT8pPyk/KFp8KFsrLV0pKFxcZFxcZCk6PyhcXGRcXGQpKT8pPyQvO1xuICAgICAgICAgICAgICAgICAgICAgLy8gMSAgICAgICAgMiAgICAgICAzICAgICAgICAgNCAgICAgICAgICA1ICAgICAgICAgIDYgICAgICAgICAgNyAgICAgICAgICA4ICA5ICAgICAxMCAgICAgIDExXG4gIGZ1bmN0aW9uIGpzb25TdHJpbmdUb0RhdGUoc3RyaW5nKSB7XG4gICAgdmFyIG1hdGNoO1xuICAgIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChSX0lTTzg2MDFfU1RSKSkge1xuICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgwKSxcbiAgICAgICAgICB0ekhvdXIgPSAwLFxuICAgICAgICAgIHR6TWluICA9IDAsXG4gICAgICAgICAgZGF0ZVNldHRlciA9IG1hdGNoWzhdID8gZGF0ZS5zZXRVVENGdWxsWWVhciA6IGRhdGUuc2V0RnVsbFllYXIsXG4gICAgICAgICAgdGltZVNldHRlciA9IG1hdGNoWzhdID8gZGF0ZS5zZXRVVENIb3VycyA6IGRhdGUuc2V0SG91cnM7XG5cbiAgICAgIGlmIChtYXRjaFs5XSkge1xuICAgICAgICB0ekhvdXIgPSB0b0ludChtYXRjaFs5XSArIG1hdGNoWzEwXSk7XG4gICAgICAgIHR6TWluID0gdG9JbnQobWF0Y2hbOV0gKyBtYXRjaFsxMV0pO1xuICAgICAgfVxuICAgICAgZGF0ZVNldHRlci5jYWxsKGRhdGUsIHRvSW50KG1hdGNoWzFdKSwgdG9JbnQobWF0Y2hbMl0pIC0gMSwgdG9JbnQobWF0Y2hbM10pKTtcbiAgICAgIHZhciBoID0gdG9JbnQobWF0Y2hbNF0gfHwgMCkgLSB0ekhvdXI7XG4gICAgICB2YXIgbSA9IHRvSW50KG1hdGNoWzVdIHx8IDApIC0gdHpNaW47XG4gICAgICB2YXIgcyA9IHRvSW50KG1hdGNoWzZdIHx8IDApO1xuICAgICAgdmFyIG1zID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KCcwLicgKyAobWF0Y2hbN10gfHwgMCkpICogMTAwMCk7XG4gICAgICB0aW1lU2V0dGVyLmNhbGwoZGF0ZSwgaCwgbSwgcywgbXMpO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cblxuXG4gIHJldHVybiBmdW5jdGlvbihkYXRlLCBmb3JtYXQsIHRpbWV6b25lKSB7XG4gICAgdmFyIHRleHQgPSAnJyxcbiAgICAgICAgcGFydHMgPSBbXSxcbiAgICAgICAgZm4sIG1hdGNoO1xuXG4gICAgZm9ybWF0ID0gZm9ybWF0IHx8ICdtZWRpdW1EYXRlJztcbiAgICBmb3JtYXQgPSAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFNbZm9ybWF0XSB8fCBmb3JtYXQ7XG4gICAgaWYgKGlzU3RyaW5nKGRhdGUpKSB7XG4gICAgICBkYXRlID0gTlVNQkVSX1NUUklORy50ZXN0KGRhdGUpID8gdG9JbnQoZGF0ZSkgOiBqc29uU3RyaW5nVG9EYXRlKGRhdGUpO1xuICAgIH1cblxuICAgIGlmIChpc051bWJlcihkYXRlKSkge1xuICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgIH1cblxuICAgIGlmICghaXNEYXRlKGRhdGUpIHx8ICFpc0Zpbml0ZShkYXRlLmdldFRpbWUoKSkpIHtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIHdoaWxlIChmb3JtYXQpIHtcbiAgICAgIG1hdGNoID0gREFURV9GT1JNQVRTX1NQTElULmV4ZWMoZm9ybWF0KTtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBwYXJ0cyA9IGNvbmNhdChwYXJ0cywgbWF0Y2gsIDEpO1xuICAgICAgICBmb3JtYXQgPSBwYXJ0cy5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnRzLnB1c2goZm9ybWF0KTtcbiAgICAgICAgZm9ybWF0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGF0ZVRpbWV6b25lT2Zmc2V0ID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIGlmICh0aW1lem9uZSkge1xuICAgICAgZGF0ZVRpbWV6b25lT2Zmc2V0ID0gdGltZXpvbmVUb09mZnNldCh0aW1lem9uZSwgZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKTtcbiAgICAgIGRhdGUgPSBjb252ZXJ0VGltZXpvbmVUb0xvY2FsKGRhdGUsIHRpbWV6b25lLCB0cnVlKTtcbiAgICB9XG4gICAgZm9yRWFjaChwYXJ0cywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGZuID0gREFURV9GT1JNQVRTW3ZhbHVlXTtcbiAgICAgIHRleHQgKz0gZm4gPyBmbihkYXRlLCAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMsIGRhdGVUaW1lem9uZU9mZnNldClcbiAgICAgICAgICAgICAgICAgOiB2YWx1ZS5yZXBsYWNlKC8oXid8JyQpL2csICcnKS5yZXBsYWNlKC8nJy9nLCBcIidcIik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGV4dDtcbiAgfTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGpzb25cbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiAgIEFsbG93cyB5b3UgdG8gY29udmVydCBhIEphdmFTY3JpcHQgb2JqZWN0IGludG8gSlNPTiBzdHJpbmcuXG4gKlxuICogICBUaGlzIGZpbHRlciBpcyBtb3N0bHkgdXNlZnVsIGZvciBkZWJ1Z2dpbmcuIFdoZW4gdXNpbmcgdGhlIGRvdWJsZSBjdXJseSB7e3ZhbHVlfX0gbm90YXRpb25cbiAqICAgdGhlIGJpbmRpbmcgaXMgYXV0b21hdGljYWxseSBjb252ZXJ0ZWQgdG8gSlNPTi5cbiAqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBBbnkgSmF2YVNjcmlwdCBvYmplY3QgKGluY2x1ZGluZyBhcnJheXMgYW5kIHByaW1pdGl2ZSB0eXBlcykgdG8gZmlsdGVyLlxuICogQHBhcmFtIHtudW1iZXI9fSBzcGFjaW5nIFRoZSBudW1iZXIgb2Ygc3BhY2VzIHRvIHVzZSBwZXIgaW5kZW50YXRpb24sIGRlZmF1bHRzIHRvIDIuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBKU09OIHN0cmluZy5cbiAqXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxwcmUgaWQ9XCJkZWZhdWx0LXNwYWNpbmdcIj57eyB7J25hbWUnOid2YWx1ZSd9IHwganNvbiB9fTwvcHJlPlxuICAgICAgIDxwcmUgaWQ9XCJjdXN0b20tc3BhY2luZ1wiPnt7IHsnbmFtZSc6J3ZhbHVlJ30gfCBqc29uOjQgfX08L3ByZT5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBqc29uaWZ5IGZpbHRlcmVkIG9iamVjdHMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdkZWZhdWx0LXNwYWNpbmcnKSkuZ2V0VGV4dCgpKS50b01hdGNoKC9cXHtcXG4gIFwibmFtZVwiOiA/XCJ2YWx1ZVwiXFxufS8pO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1c3RvbS1zcGFjaW5nJykpLmdldFRleHQoKSkudG9NYXRjaCgvXFx7XFxuICAgIFwibmFtZVwiOiA/XCJ2YWx1ZVwiXFxufS8pO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKlxuICovXG5mdW5jdGlvbiBqc29uRmlsdGVyKCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBzcGFjaW5nKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHNwYWNpbmcpKSB7XG4gICAgICAgIHNwYWNpbmcgPSAyO1xuICAgIH1cbiAgICByZXR1cm4gdG9Kc29uKG9iamVjdCwgc3BhY2luZyk7XG4gIH07XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSBsb3dlcmNhc2VcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnRzIHN0cmluZyB0byBsb3dlcmNhc2UuXG4gKiBAc2VlIGFuZ3VsYXIubG93ZXJjYXNlXG4gKi9cbnZhciBsb3dlcmNhc2VGaWx0ZXIgPSB2YWx1ZUZuKGxvd2VyY2FzZSk7XG5cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSB1cHBlcmNhc2VcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnRzIHN0cmluZyB0byB1cHBlcmNhc2UuXG4gKiBAc2VlIGFuZ3VsYXIudXBwZXJjYXNlXG4gKi9cbnZhciB1cHBlcmNhc2VGaWx0ZXIgPSB2YWx1ZUZuKHVwcGVyY2FzZSk7XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgbGltaXRUb1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgb3Igc3RyaW5nIGNvbnRhaW5pbmcgb25seSBhIHNwZWNpZmllZCBudW1iZXIgb2YgZWxlbWVudHMuIFRoZSBlbGVtZW50c1xuICogYXJlIHRha2VuIGZyb20gZWl0aGVyIHRoZSBiZWdpbm5pbmcgb3IgdGhlIGVuZCBvZiB0aGUgc291cmNlIGFycmF5LCBzdHJpbmcgb3IgbnVtYmVyLCBhcyBzcGVjaWZpZWQgYnlcbiAqIHRoZSB2YWx1ZSBhbmQgc2lnbiAocG9zaXRpdmUgb3IgbmVnYXRpdmUpIG9mIGBsaW1pdGAuIElmIGEgbnVtYmVyIGlzIHVzZWQgYXMgaW5wdXQsIGl0IGlzXG4gKiBjb252ZXJ0ZWQgdG8gYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd8bnVtYmVyfSBpbnB1dCBTb3VyY2UgYXJyYXksIHN0cmluZyBvciBudW1iZXIgdG8gYmUgbGltaXRlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbGltaXQgVGhlIGxlbmd0aCBvZiB0aGUgcmV0dXJuZWQgYXJyYXkgb3Igc3RyaW5nLiBJZiB0aGUgYGxpbWl0YCBudW1iZXJcbiAqICAgICBpcyBwb3NpdGl2ZSwgYGxpbWl0YCBudW1iZXIgb2YgaXRlbXMgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzb3VyY2UgYXJyYXkvc3RyaW5nIGFyZSBjb3BpZWQuXG4gKiAgICAgSWYgdGhlIG51bWJlciBpcyBuZWdhdGl2ZSwgYGxpbWl0YCBudW1iZXIgIG9mIGl0ZW1zIGZyb20gdGhlIGVuZCBvZiB0aGUgc291cmNlIGFycmF5L3N0cmluZ1xuICogICAgIGFyZSBjb3BpZWQuIFRoZSBgbGltaXRgIHdpbGwgYmUgdHJpbW1lZCBpZiBpdCBleGNlZWRzIGBhcnJheS5sZW5ndGhgLiBJZiBgbGltaXRgIGlzIHVuZGVmaW5lZCxcbiAqICAgICB0aGUgaW5wdXQgd2lsbCBiZSByZXR1cm5lZCB1bmNoYW5nZWQuXG4gKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKT19IGJlZ2luIEluZGV4IGF0IHdoaWNoIHRvIGJlZ2luIGxpbWl0YXRpb24uIEFzIGEgbmVnYXRpdmUgaW5kZXgsIGBiZWdpbmBcbiAqICAgICBpbmRpY2F0ZXMgYW4gb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgaW5wdXRgLiBEZWZhdWx0cyB0byBgMGAuXG4gKiBAcmV0dXJucyB7QXJyYXl8c3RyaW5nfSBBIG5ldyBzdWItYXJyYXkgb3Igc3Vic3RyaW5nIG9mIGxlbmd0aCBgbGltaXRgIG9yIGxlc3MgaWYgaW5wdXQgYXJyYXlcbiAqICAgICBoYWQgbGVzcyB0aGFuIGBsaW1pdGAgZWxlbWVudHMuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImxpbWl0VG9FeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdsaW1pdFRvRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS5udW1iZXJzID0gWzEsMiwzLDQsNSw2LDcsOCw5XTtcbiAgICAgICAgICAgICAkc2NvcGUubGV0dGVycyA9IFwiYWJjZGVmZ2hpXCI7XG4gICAgICAgICAgICAgJHNjb3BlLmxvbmdOdW1iZXIgPSAyMzQ1NDMyMzQyO1xuICAgICAgICAgICAgICRzY29wZS5udW1MaW1pdCA9IDM7XG4gICAgICAgICAgICAgJHNjb3BlLmxldHRlckxpbWl0ID0gMztcbiAgICAgICAgICAgICAkc2NvcGUubG9uZ051bWJlckxpbWl0ID0gMztcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICBMaW1pdCB7e251bWJlcnN9fSB0bzpcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgc3RlcD1cIjFcIiBuZy1tb2RlbD1cIm51bUxpbWl0XCI+XG4gICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgPHA+T3V0cHV0IG51bWJlcnM6IHt7IG51bWJlcnMgfCBsaW1pdFRvOm51bUxpbWl0IH19PC9wPlxuICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgTGltaXQge3tsZXR0ZXJzfX0gdG86XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIHN0ZXA9XCIxXCIgbmctbW9kZWw9XCJsZXR0ZXJMaW1pdFwiPlxuICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgIDxwPk91dHB1dCBsZXR0ZXJzOiB7eyBsZXR0ZXJzIHwgbGltaXRUbzpsZXR0ZXJMaW1pdCB9fTwvcD5cbiAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgIExpbWl0IHt7bG9uZ051bWJlcn19IHRvOlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBzdGVwPVwiMVwiIG5nLW1vZGVsPVwibG9uZ051bWJlckxpbWl0XCI+XG4gICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgPHA+T3V0cHV0IGxvbmcgbnVtYmVyOiB7eyBsb25nTnVtYmVyIHwgbGltaXRUbzpsb25nTnVtYmVyTGltaXQgfX08L3A+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciBudW1MaW1pdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbnVtTGltaXQnKSk7XG4gICAgICAgdmFyIGxldHRlckxpbWl0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdsZXR0ZXJMaW1pdCcpKTtcbiAgICAgICB2YXIgbG9uZ051bWJlckxpbWl0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdsb25nTnVtYmVyTGltaXQnKSk7XG4gICAgICAgdmFyIGxpbWl0ZWROdW1iZXJzID0gZWxlbWVudChieS5iaW5kaW5nKCdudW1iZXJzIHwgbGltaXRUbzpudW1MaW1pdCcpKTtcbiAgICAgICB2YXIgbGltaXRlZExldHRlcnMgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2xldHRlcnMgfCBsaW1pdFRvOmxldHRlckxpbWl0JykpO1xuICAgICAgIHZhciBsaW1pdGVkTG9uZ051bWJlciA9IGVsZW1lbnQoYnkuYmluZGluZygnbG9uZ051bWJlciB8IGxpbWl0VG86bG9uZ051bWJlckxpbWl0JykpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBsaW1pdCB0aGUgbnVtYmVyIGFycmF5IHRvIGZpcnN0IHRocmVlIGl0ZW1zJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QobnVtTGltaXRJbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJzMnKTtcbiAgICAgICAgIGV4cGVjdChsZXR0ZXJMaW1pdElucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnMycpO1xuICAgICAgICAgZXhwZWN0KGxvbmdOdW1iZXJMaW1pdElucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnMycpO1xuICAgICAgICAgZXhwZWN0KGxpbWl0ZWROdW1iZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IG51bWJlcnM6IFsxLDIsM10nKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTGV0dGVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsZXR0ZXJzOiBhYmMnKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTG9uZ051bWJlci5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsb25nIG51bWJlcjogMjM0Jyk7XG4gICAgICAgfSk7XG5cbiAgICAgICAvLyBUaGVyZSBpcyBhIGJ1ZyBpbiBzYWZhcmkgYW5kIHByb3RyYWN0b3IgdGhhdCBkb2Vzbid0IGxpa2UgdGhlIG1pbnVzIGtleVxuICAgICAgIC8vIGl0KCdzaG91bGQgdXBkYXRlIHRoZSBvdXRwdXQgd2hlbiAtMyBpcyBlbnRlcmVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgLy8gICBudW1MaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgLy8gICBudW1MaW1pdElucHV0LnNlbmRLZXlzKCctMycpO1xuICAgICAgIC8vICAgbGV0dGVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgIC8vICAgbGV0dGVyTGltaXRJbnB1dC5zZW5kS2V5cygnLTMnKTtcbiAgICAgICAvLyAgIGxvbmdOdW1iZXJMaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgLy8gICBsb25nTnVtYmVyTGltaXRJbnB1dC5zZW5kS2V5cygnLTMnKTtcbiAgICAgICAvLyAgIGV4cGVjdChsaW1pdGVkTnVtYmVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBudW1iZXJzOiBbNyw4LDldJyk7XG4gICAgICAgLy8gICBleHBlY3QobGltaXRlZExldHRlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbGV0dGVyczogZ2hpJyk7XG4gICAgICAgLy8gICBleHBlY3QobGltaXRlZExvbmdOdW1iZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbG9uZyBudW1iZXI6IDM0MicpO1xuICAgICAgIC8vIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBub3QgZXhjZWVkIHRoZSBtYXhpbXVtIHNpemUgb2YgaW5wdXQgYXJyYXknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIG51bUxpbWl0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIG51bUxpbWl0SW5wdXQuc2VuZEtleXMoJzEwMCcpO1xuICAgICAgICAgbGV0dGVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbGV0dGVyTGltaXRJbnB1dC5zZW5kS2V5cygnMTAwJyk7XG4gICAgICAgICBsb25nTnVtYmVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbG9uZ051bWJlckxpbWl0SW5wdXQuc2VuZEtleXMoJzEwMCcpO1xuICAgICAgICAgZXhwZWN0KGxpbWl0ZWROdW1iZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IG51bWJlcnM6IFsxLDIsMyw0LDUsNiw3LDgsOV0nKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTGV0dGVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsZXR0ZXJzOiBhYmNkZWZnaGknKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTG9uZ051bWJlci5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsb25nIG51bWJlcjogMjM0NTQzMjM0MicpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4qL1xuZnVuY3Rpb24gbGltaXRUb0ZpbHRlcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBsaW1pdCwgYmVnaW4pIHtcbiAgICBpZiAoTWF0aC5hYnMoTnVtYmVyKGxpbWl0KSkgPT09IEluZmluaXR5KSB7XG4gICAgICBsaW1pdCA9IE51bWJlcihsaW1pdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbWl0ID0gdG9JbnQobGltaXQpO1xuICAgIH1cbiAgICBpZiAoaXNOYU4obGltaXQpKSByZXR1cm4gaW5wdXQ7XG5cbiAgICBpZiAoaXNOdW1iZXIoaW5wdXQpKSBpbnB1dCA9IGlucHV0LnRvU3RyaW5nKCk7XG4gICAgaWYgKCFpc0FycmF5KGlucHV0KSAmJiAhaXNTdHJpbmcoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG5cbiAgICBiZWdpbiA9ICghYmVnaW4gfHwgaXNOYU4oYmVnaW4pKSA/IDAgOiB0b0ludChiZWdpbik7XG4gICAgYmVnaW4gPSAoYmVnaW4gPCAwICYmIGJlZ2luID49IC1pbnB1dC5sZW5ndGgpID8gaW5wdXQubGVuZ3RoICsgYmVnaW4gOiBiZWdpbjtcblxuICAgIGlmIChsaW1pdCA+PSAwKSB7XG4gICAgICByZXR1cm4gaW5wdXQuc2xpY2UoYmVnaW4sIGJlZ2luICsgbGltaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYmVnaW4gPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnNsaWNlKGxpbWl0LCBpbnB1dC5sZW5ndGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnNsaWNlKE1hdGgubWF4KDAsIGJlZ2luICsgbGltaXQpLCBiZWdpbik7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIG9yZGVyQnlcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBPcmRlcnMgYSBzcGVjaWZpZWQgYGFycmF5YCBieSB0aGUgYGV4cHJlc3Npb25gIHByZWRpY2F0ZS4gSXQgaXMgb3JkZXJlZCBhbHBoYWJldGljYWxseVxuICogZm9yIHN0cmluZ3MgYW5kIG51bWVyaWNhbGx5IGZvciBudW1iZXJzLiBOb3RlOiBpZiB5b3Ugbm90aWNlIG51bWJlcnMgYXJlIG5vdCBiZWluZyBzb3J0ZWRcbiAqIGFzIGV4cGVjdGVkLCBtYWtlIHN1cmUgdGhleSBhcmUgYWN0dWFsbHkgYmVpbmcgc2F2ZWQgYXMgbnVtYmVycyBhbmQgbm90IHN0cmluZ3MuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNvcnQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCopfHN0cmluZ3xBcnJheS48KGZ1bmN0aW9uKCopfHN0cmluZyk+PX0gZXhwcmVzc2lvbiBBIHByZWRpY2F0ZSB0byBiZVxuICogICAgdXNlZCBieSB0aGUgY29tcGFyYXRvciB0byBkZXRlcm1pbmUgdGhlIG9yZGVyIG9mIGVsZW1lbnRzLlxuICpcbiAqICAgIENhbiBiZSBvbmUgb2Y6XG4gKlxuICogICAgLSBgZnVuY3Rpb25gOiBHZXR0ZXIgZnVuY3Rpb24uIFRoZSByZXN1bHQgb2YgdGhpcyBmdW5jdGlvbiB3aWxsIGJlIHNvcnRlZCB1c2luZyB0aGVcbiAqICAgICAgYDxgLCBgPT09YCwgYD5gIG9wZXJhdG9yLlxuICogICAgLSBgc3RyaW5nYDogQW4gQW5ndWxhciBleHByZXNzaW9uLiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiBpcyB1c2VkIHRvIGNvbXBhcmUgZWxlbWVudHNcbiAqICAgICAgKGZvciBleGFtcGxlIGBuYW1lYCB0byBzb3J0IGJ5IGEgcHJvcGVydHkgY2FsbGVkIGBuYW1lYCBvciBgbmFtZS5zdWJzdHIoMCwgMylgIHRvIHNvcnQgYnlcbiAqICAgICAgMyBmaXJzdCBjaGFyYWN0ZXJzIG9mIGEgcHJvcGVydHkgY2FsbGVkIGBuYW1lYCkuIFRoZSByZXN1bHQgb2YgYSBjb25zdGFudCBleHByZXNzaW9uXG4gKiAgICAgIGlzIGludGVycHJldGVkIGFzIGEgcHJvcGVydHkgbmFtZSB0byBiZSB1c2VkIGluIGNvbXBhcmlzb25zIChmb3IgZXhhbXBsZSBgXCJzcGVjaWFsIG5hbWVcImBcbiAqICAgICAgdG8gc29ydCBvYmplY3QgYnkgdGhlIHZhbHVlIG9mIHRoZWlyIGBzcGVjaWFsIG5hbWVgIHByb3BlcnR5KS4gQW4gZXhwcmVzc2lvbiBjYW4gYmVcbiAqICAgICAgb3B0aW9uYWxseSBwcmVmaXhlZCB3aXRoIGArYCBvciBgLWAgdG8gY29udHJvbCBhc2NlbmRpbmcgb3IgZGVzY2VuZGluZyBzb3J0IG9yZGVyXG4gKiAgICAgIChmb3IgZXhhbXBsZSwgYCtuYW1lYCBvciBgLW5hbWVgKS4gSWYgbm8gcHJvcGVydHkgaXMgcHJvdmlkZWQsIChlLmcuIGAnKydgKSB0aGVuIHRoZSBhcnJheVxuICogICAgICBlbGVtZW50IGl0c2VsZiBpcyB1c2VkIHRvIGNvbXBhcmUgd2hlcmUgc29ydGluZy5cbiAqICAgIC0gYEFycmF5YDogQW4gYXJyYXkgb2YgZnVuY3Rpb24gb3Igc3RyaW5nIHByZWRpY2F0ZXMuIFRoZSBmaXJzdCBwcmVkaWNhdGUgaW4gdGhlIGFycmF5XG4gKiAgICAgIGlzIHVzZWQgZm9yIHNvcnRpbmcsIGJ1dCB3aGVuIHR3byBpdGVtcyBhcmUgZXF1aXZhbGVudCwgdGhlIG5leHQgcHJlZGljYXRlIGlzIHVzZWQuXG4gKlxuICogICAgSWYgdGhlIHByZWRpY2F0ZSBpcyBtaXNzaW5nIG9yIGVtcHR5IHRoZW4gaXQgZGVmYXVsdHMgdG8gYCcrJ2AuXG4gKlxuICogQHBhcmFtIHtib29sZWFuPX0gcmV2ZXJzZSBSZXZlcnNlIHRoZSBvcmRlciBvZiB0aGUgYXJyYXkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFNvcnRlZCBjb3B5IG9mIHRoZSBzb3VyY2UgYXJyYXkuXG4gKlxuICpcbiAqIEBleGFtcGxlXG4gKiBUaGUgZXhhbXBsZSBiZWxvdyBkZW1vbnN0cmF0ZXMgYSBzaW1wbGUgbmdSZXBlYXQsIHdoZXJlIHRoZSBkYXRhIGlzIHNvcnRlZFxuICogYnkgYWdlIGluIGRlc2NlbmRpbmcgb3JkZXIgKHByZWRpY2F0ZSBpcyBzZXQgdG8gYCctYWdlJ2ApLlxuICogYHJldmVyc2VgIGlzIG5vdCBzZXQsIHdoaWNoIG1lYW5zIGl0IGRlZmF1bHRzIHRvIGBmYWxzZWAuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJvcmRlckJ5RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnb3JkZXJCeUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9XG4gICAgICAgICAgICAgICAgIFt7bmFtZTonSm9obicsIHBob25lOic1NTUtMTIxMicsIGFnZToxMH0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonTWFyeScsIHBob25lOic1NTUtOTg3NicsIGFnZToxOX0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonTWlrZScsIHBob25lOic1NTUtNDMyMScsIGFnZToyMX0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonQWRhbScsIHBob25lOic1NTUtNTY3OCcsIGFnZTozNX0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWUnLCBwaG9uZTonNTU1LTg3NjUnLCBhZ2U6Mjl9XTtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8dGFibGUgY2xhc3M9XCJmcmllbmRcIj5cbiAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgIDx0aD5OYW1lPC90aD5cbiAgICAgICAgICAgICA8dGg+UGhvbmUgTnVtYmVyPC90aD5cbiAgICAgICAgICAgICA8dGg+QWdlPC90aD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzIHwgb3JkZXJCeTonLWFnZSdcIj5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLmFnZX19PC90ZD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgIDwvdGFibGU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqXG4gKiBUaGUgcHJlZGljYXRlIGFuZCByZXZlcnNlIHBhcmFtZXRlcnMgY2FuIGJlIGNvbnRyb2xsZWQgZHluYW1pY2FsbHkgdGhyb3VnaCBzY29wZSBwcm9wZXJ0aWVzLFxuICogYXMgc2hvd24gaW4gdGhlIG5leHQgZXhhbXBsZS5cbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJvcmRlckJ5RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnb3JkZXJCeUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9XG4gICAgICAgICAgICAgICAgIFt7bmFtZTonSm9obicsIHBob25lOic1NTUtMTIxMicsIGFnZToxMH0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonTWFyeScsIHBob25lOic1NTUtOTg3NicsIGFnZToxOX0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonTWlrZScsIHBob25lOic1NTUtNDMyMScsIGFnZToyMX0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonQWRhbScsIHBob25lOic1NTUtNTY3OCcsIGFnZTozNX0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWUnLCBwaG9uZTonNTU1LTg3NjUnLCBhZ2U6Mjl9XTtcbiAgICAgICAgICAgICAkc2NvcGUucHJlZGljYXRlID0gJ2FnZSc7XG4gICAgICAgICAgICAgJHNjb3BlLnJldmVyc2UgPSB0cnVlO1xuICAgICAgICAgICAgICRzY29wZS5vcmRlciA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLnJldmVyc2UgPSAoJHNjb3BlLnByZWRpY2F0ZSA9PT0gcHJlZGljYXRlKSA/ICEkc2NvcGUucmV2ZXJzZSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgJHNjb3BlLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPlxuICAgICAgICAgLnNvcnRvcmRlcjphZnRlciB7XG4gICAgICAgICAgIGNvbnRlbnQ6ICdcXDI1YjInO1xuICAgICAgICAgfVxuICAgICAgICAgLnNvcnRvcmRlci5yZXZlcnNlOmFmdGVyIHtcbiAgICAgICAgICAgY29udGVudDogJ1xcMjViYyc7XG4gICAgICAgICB9XG4gICAgICAgPC9zdHlsZT5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPHByZT5Tb3J0aW5nIHByZWRpY2F0ZSA9IHt7cHJlZGljYXRlfX07IHJldmVyc2UgPSB7e3JldmVyc2V9fTwvcHJlPlxuICAgICAgICAgPGhyLz5cbiAgICAgICAgIFsgPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwicHJlZGljYXRlPScnXCI+dW5zb3J0ZWQ8L2E+IF1cbiAgICAgICAgIDx0YWJsZSBjbGFzcz1cImZyaWVuZFwiPlxuICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgPHRoPlxuICAgICAgICAgICAgICAgPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwib3JkZXIoJ25hbWUnKVwiPk5hbWU8L2E+XG4gICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNvcnRvcmRlclwiIG5nLXNob3c9XCJwcmVkaWNhdGUgPT09ICduYW1lJ1wiIG5nLWNsYXNzPVwie3JldmVyc2U6cmV2ZXJzZX1cIj48L3NwYW4+XG4gICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICAgICA8dGg+XG4gICAgICAgICAgICAgICA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJvcmRlcigncGhvbmUnKVwiPlBob25lIE51bWJlcjwvYT5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic29ydG9yZGVyXCIgbmctc2hvdz1cInByZWRpY2F0ZSA9PT0gJ3Bob25lJ1wiIG5nLWNsYXNzPVwie3JldmVyc2U6cmV2ZXJzZX1cIj48L3NwYW4+XG4gICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICAgICA8dGg+XG4gICAgICAgICAgICAgICA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJvcmRlcignYWdlJylcIj5BZ2U8L2E+XG4gICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNvcnRvcmRlclwiIG5nLXNob3c9XCJwcmVkaWNhdGUgPT09ICdhZ2UnXCIgbmctY2xhc3M9XCJ7cmV2ZXJzZTpyZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBvcmRlckJ5OnByZWRpY2F0ZTpyZXZlcnNlXCI+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLnBob25lfX08L3RkPlxuICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5hZ2V9fTwvdGQ+XG4gICAgICAgICAgIDwvdHI+XG4gICAgICAgICA8L3RhYmxlPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKlxuICogSXQncyBhbHNvIHBvc3NpYmxlIHRvIGNhbGwgdGhlIG9yZGVyQnkgZmlsdGVyIG1hbnVhbGx5LCBieSBpbmplY3RpbmcgYCRmaWx0ZXJgLCByZXRyaWV2aW5nIHRoZVxuICogZmlsdGVyIHJvdXRpbmUgd2l0aCBgJGZpbHRlcignb3JkZXJCeScpYCwgYW5kIGNhbGxpbmcgdGhlIHJldHVybmVkIGZpbHRlciByb3V0aW5lIHdpdGggdGhlXG4gKiBkZXNpcmVkIHBhcmFtZXRlcnMuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJvcmRlckJ5RXhhbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8dGFibGUgY2xhc3M9XCJmcmllbmRcIj5cbiAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGg+PGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwicmV2ZXJzZT1mYWxzZTtvcmRlcignbmFtZScsIGZhbHNlKVwiPk5hbWU8L2E+XG4gICAgICAgICAgICAgICg8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJvcmRlcignLW5hbWUnLGZhbHNlKVwiPl48L2E+KTwvdGg+XG4gICAgICAgICAgICA8dGg+PGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwicmV2ZXJzZT0hcmV2ZXJzZTtvcmRlcigncGhvbmUnLCByZXZlcnNlKVwiPlBob25lIE51bWJlcjwvYT48L3RoPlxuICAgICAgICAgICAgPHRoPjxhIGhyZWY9XCJcIiBuZy1jbGljaz1cInJldmVyc2U9IXJldmVyc2U7b3JkZXIoJ2FnZScscmV2ZXJzZSlcIj5BZ2U8L2E+PC90aD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9XCJmcmllbmQgaW4gZnJpZW5kc1wiPlxuICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+XG4gICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XG4gICAgICAgICAgICA8dGQ+e3tmcmllbmQuYWdlfX08L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG5cbiAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnb3JkZXJCeUV4YW1wbGUnLCBbXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGZpbHRlcicsIGZ1bmN0aW9uKCRzY29wZSwgJGZpbHRlcikge1xuICAgICAgICAgIHZhciBvcmRlckJ5ID0gJGZpbHRlcignb3JkZXJCeScpO1xuICAgICAgICAgICRzY29wZS5mcmllbmRzID0gW1xuICAgICAgICAgICAgeyBuYW1lOiAnSm9obicsICAgIHBob25lOiAnNTU1LTEyMTInLCAgICBhZ2U6IDEwIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdNYXJ5JywgICAgcGhvbmU6ICc1NTUtOTg3NicsICAgIGFnZTogMTkgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ01pa2UnLCAgICBwaG9uZTogJzU1NS00MzIxJywgICAgYWdlOiAyMSB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnQWRhbScsICAgIHBob25lOiAnNTU1LTU2NzgnLCAgICBhZ2U6IDM1IH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdKdWxpZScsICAgcGhvbmU6ICc1NTUtODc2NScsICAgIGFnZTogMjkgfVxuICAgICAgICAgIF07XG4gICAgICAgICAgJHNjb3BlLm9yZGVyID0gZnVuY3Rpb24ocHJlZGljYXRlLCByZXZlcnNlKSB7XG4gICAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9IG9yZGVyQnkoJHNjb3BlLmZyaWVuZHMsIHByZWRpY2F0ZSwgcmV2ZXJzZSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICAkc2NvcGUub3JkZXIoJy1hZ2UnLGZhbHNlKTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbjwvZXhhbXBsZT5cbiAqL1xub3JkZXJCeUZpbHRlci4kaW5qZWN0ID0gWyckcGFyc2UnXTtcbmZ1bmN0aW9uIG9yZGVyQnlGaWx0ZXIoJHBhcnNlKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcnJheSwgc29ydFByZWRpY2F0ZSwgcmV2ZXJzZU9yZGVyKSB7XG5cbiAgICBpZiAoIShpc0FycmF5TGlrZShhcnJheSkpKSByZXR1cm4gYXJyYXk7XG5cbiAgICBpZiAoIWlzQXJyYXkoc29ydFByZWRpY2F0ZSkpIHsgc29ydFByZWRpY2F0ZSA9IFtzb3J0UHJlZGljYXRlXTsgfVxuICAgIGlmIChzb3J0UHJlZGljYXRlLmxlbmd0aCA9PT0gMCkgeyBzb3J0UHJlZGljYXRlID0gWycrJ107IH1cblxuICAgIHZhciBwcmVkaWNhdGVzID0gcHJvY2Vzc1ByZWRpY2F0ZXMoc29ydFByZWRpY2F0ZSwgcmV2ZXJzZU9yZGVyKTtcblxuICAgIC8vIFRoZSBuZXh0IHRocmVlIGxpbmVzIGFyZSBhIHZlcnNpb24gb2YgYSBTd2FydHppYW4gVHJhbnNmb3JtIGlkaW9tIGZyb20gUGVybFxuICAgIC8vIChzb21ldGltZXMgY2FsbGVkIHRoZSBEZWNvcmF0ZS1Tb3J0LVVuZGVjb3JhdGUgaWRpb20pXG4gICAgLy8gU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NjaHdhcnR6aWFuX3RyYW5zZm9ybVxuICAgIHZhciBjb21wYXJlVmFsdWVzID0gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGFycmF5LCBnZXRDb21wYXJpc29uT2JqZWN0KTtcbiAgICBjb21wYXJlVmFsdWVzLnNvcnQoZG9Db21wYXJpc29uKTtcbiAgICBhcnJheSA9IGNvbXBhcmVWYWx1ZXMubWFwKGZ1bmN0aW9uKGl0ZW0pIHsgcmV0dXJuIGl0ZW0udmFsdWU7IH0pO1xuXG4gICAgcmV0dXJuIGFycmF5O1xuXG4gICAgZnVuY3Rpb24gZ2V0Q29tcGFyaXNvbk9iamVjdCh2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgcHJlZGljYXRlVmFsdWVzOiBwcmVkaWNhdGVzLm1hcChmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0UHJlZGljYXRlVmFsdWUocHJlZGljYXRlLmdldCh2YWx1ZSksIGluZGV4KTtcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZG9Db21wYXJpc29uKHYxLCB2Mikge1xuICAgICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgICBmb3IgKHZhciBpbmRleD0wLCBsZW5ndGggPSBwcmVkaWNhdGVzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgcmVzdWx0ID0gY29tcGFyZSh2MS5wcmVkaWNhdGVWYWx1ZXNbaW5kZXhdLCB2Mi5wcmVkaWNhdGVWYWx1ZXNbaW5kZXhdKSAqIHByZWRpY2F0ZXNbaW5kZXhdLmRlc2NlbmRpbmc7XG4gICAgICAgIGlmIChyZXN1bHQpIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc1ByZWRpY2F0ZXMoc29ydFByZWRpY2F0ZSwgcmV2ZXJzZU9yZGVyKSB7XG4gICAgcmV2ZXJzZU9yZGVyID0gcmV2ZXJzZU9yZGVyID8gLTEgOiAxO1xuICAgIHJldHVybiBzb3J0UHJlZGljYXRlLm1hcChmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBkZXNjZW5kaW5nID0gMSwgZ2V0ID0gaWRlbnRpdHk7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKHByZWRpY2F0ZSkpIHtcbiAgICAgICAgZ2V0ID0gcHJlZGljYXRlO1xuICAgICAgfSBlbHNlIGlmIChpc1N0cmluZyhwcmVkaWNhdGUpKSB7XG4gICAgICAgIGlmICgocHJlZGljYXRlLmNoYXJBdCgwKSA9PSAnKycgfHwgcHJlZGljYXRlLmNoYXJBdCgwKSA9PSAnLScpKSB7XG4gICAgICAgICAgZGVzY2VuZGluZyA9IHByZWRpY2F0ZS5jaGFyQXQoMCkgPT0gJy0nID8gLTEgOiAxO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IHByZWRpY2F0ZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZWRpY2F0ZSAhPT0gJycpIHtcbiAgICAgICAgICBnZXQgPSAkcGFyc2UocHJlZGljYXRlKTtcbiAgICAgICAgICBpZiAoZ2V0LmNvbnN0YW50KSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gZ2V0KCk7XG4gICAgICAgICAgICBnZXQgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGdldDogZ2V0LCBkZXNjZW5kaW5nOiBkZXNjZW5kaW5nICogcmV2ZXJzZU9yZGVyIH07XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICBjYXNlICdudW1iZXInOiAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlICdib29sZWFuJzogLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb2JqZWN0VmFsdWUodmFsdWUsIGluZGV4KSB7XG4gICAgLy8gSWYgYHZhbHVlT2ZgIGlzIGEgdmFsaWQgZnVuY3Rpb24gdXNlIHRoYXRcbiAgICBpZiAodHlwZW9mIHZhbHVlLnZhbHVlT2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUudmFsdWVPZigpO1xuICAgICAgaWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICAvLyBJZiBgdG9TdHJpbmdgIGlzIGEgdmFsaWQgZnVuY3Rpb24gYW5kIG5vdCB0aGUgb25lIGZyb20gYE9iamVjdC5wcm90b3R5cGVgIHVzZSB0aGF0XG4gICAgaWYgKGhhc0N1c3RvbVRvU3RyaW5nKHZhbHVlKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgaWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICAvLyBXZSBoYXZlIGEgYmFzaWMgb2JqZWN0IHNvIHdlIHVzZSB0aGUgcG9zaXRpb24gb2YgdGhlIG9iamVjdCBpbiB0aGUgY29sbGVjdGlvblxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFByZWRpY2F0ZVZhbHVlKHZhbHVlLCBpbmRleCkge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgdHlwZSA9ICdzdHJpbmcnO1xuICAgICAgdmFsdWUgPSAnbnVsbCc7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhbHVlID0gb2JqZWN0VmFsdWUodmFsdWUsIGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCB0eXBlOiB0eXBlIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb21wYXJlKHYxLCB2Mikge1xuICAgIHZhciByZXN1bHQgPSAwO1xuICAgIGlmICh2MS50eXBlID09PSB2Mi50eXBlKSB7XG4gICAgICBpZiAodjEudmFsdWUgIT09IHYyLnZhbHVlKSB7XG4gICAgICAgIHJlc3VsdCA9IHYxLnZhbHVlIDwgdjIudmFsdWUgPyAtMSA6IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IHYxLnR5cGUgPCB2Mi50eXBlID8gLTEgOiAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG5cbmZ1bmN0aW9uIG5nRGlyZWN0aXZlKGRpcmVjdGl2ZSkge1xuICBpZiAoaXNGdW5jdGlvbihkaXJlY3RpdmUpKSB7XG4gICAgZGlyZWN0aXZlID0ge1xuICAgICAgbGluazogZGlyZWN0aXZlXG4gICAgfTtcbiAgfVxuICBkaXJlY3RpdmUucmVzdHJpY3QgPSBkaXJlY3RpdmUucmVzdHJpY3QgfHwgJ0FDJztcbiAgcmV0dXJuIHZhbHVlRm4oZGlyZWN0aXZlKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBhXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogTW9kaWZpZXMgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgdGhlIGh0bWwgQSB0YWcgc28gdGhhdCB0aGUgZGVmYXVsdCBhY3Rpb24gaXMgcHJldmVudGVkIHdoZW5cbiAqIHRoZSBocmVmIGF0dHJpYnV0ZSBpcyBlbXB0eS5cbiAqXG4gKiBUaGlzIGNoYW5nZSBwZXJtaXRzIHRoZSBlYXN5IGNyZWF0aW9uIG9mIGFjdGlvbiBsaW5rcyB3aXRoIHRoZSBgbmdDbGlja2AgZGlyZWN0aXZlXG4gKiB3aXRob3V0IGNoYW5naW5nIHRoZSBsb2NhdGlvbiBvciBjYXVzaW5nIHBhZ2UgcmVsb2FkcywgZS5nLjpcbiAqIGA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJsaXN0LmFkZEl0ZW0oKVwiPkFkZCBJdGVtPC9hPmBcbiAqL1xudmFyIGh0bWxBbmNob3JEaXJlY3RpdmUgPSB2YWx1ZUZuKHtcbiAgcmVzdHJpY3Q6ICdFJyxcbiAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikge1xuICAgIGlmICghYXR0ci5ocmVmICYmICFhdHRyLnhsaW5rSHJlZikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICAgIC8vIElmIHRoZSBsaW5rZWQgZWxlbWVudCBpcyBub3QgYW4gYW5jaG9yIHRhZyBhbnltb3JlLCBkbyBub3RoaW5nXG4gICAgICAgIGlmIChlbGVtZW50WzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdhJykgcmV0dXJuO1xuXG4gICAgICAgIC8vIFNWR0FFbGVtZW50IGRvZXMgbm90IHVzZSB0aGUgaHJlZiBhdHRyaWJ1dGUsIGJ1dCByYXRoZXIgdGhlICd4bGlua0hyZWYnIGF0dHJpYnV0ZS5cbiAgICAgICAgdmFyIGhyZWYgPSB0b1N0cmluZy5jYWxsKGVsZW1lbnQucHJvcCgnaHJlZicpKSA9PT0gJ1tvYmplY3QgU1ZHQW5pbWF0ZWRTdHJpbmddJyA/XG4gICAgICAgICAgICAgICAgICAgJ3hsaW5rOmhyZWYnIDogJ2hyZWYnO1xuICAgICAgICBlbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgLy8gaWYgd2UgaGF2ZSBubyBocmVmIHVybCwgdGhlbiBkb24ndCBuYXZpZ2F0ZSBhbnl3aGVyZS5cbiAgICAgICAgICBpZiAoIWVsZW1lbnQuYXR0cihocmVmKSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH1cbn0pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nSHJlZlxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSA5OVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVXNpbmcgQW5ndWxhciBtYXJrdXAgbGlrZSBge3toYXNofX1gIGluIGFuIGhyZWYgYXR0cmlidXRlIHdpbGxcbiAqIG1ha2UgdGhlIGxpbmsgZ28gdG8gdGhlIHdyb25nIFVSTCBpZiB0aGUgdXNlciBjbGlja3MgaXQgYmVmb3JlXG4gKiBBbmd1bGFyIGhhcyBhIGNoYW5jZSB0byByZXBsYWNlIHRoZSBge3toYXNofX1gIG1hcmt1cCB3aXRoIGl0c1xuICogdmFsdWUuIFVudGlsIEFuZ3VsYXIgcmVwbGFjZXMgdGhlIG1hcmt1cCB0aGUgbGluayB3aWxsIGJlIGJyb2tlblxuICogYW5kIHdpbGwgbW9zdCBsaWtlbHkgcmV0dXJuIGEgNDA0IGVycm9yLiBUaGUgYG5nSHJlZmAgZGlyZWN0aXZlXG4gKiBzb2x2ZXMgdGhpcyBwcm9ibGVtLlxuICpcbiAqIFRoZSB3cm9uZyB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8YSBocmVmPVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19XCI+bGluazE8L2E+XG4gKiBgYGBcbiAqXG4gKiBUaGUgY29ycmVjdCB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8YSBuZy1ocmVmPVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19XCI+bGluazE8L2E+XG4gKiBgYGBcbiAqXG4gKiBAZWxlbWVudCBBXG4gKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ0hyZWYgYW55IHN0cmluZyB3aGljaCBjYW4gY29udGFpbiBge3t9fWAgbWFya3VwLlxuICpcbiAqIEBleGFtcGxlXG4gKiBUaGlzIGV4YW1wbGUgc2hvd3MgdmFyaW91cyBjb21iaW5hdGlvbnMgb2YgYGhyZWZgLCBgbmctaHJlZmAgYW5kIGBuZy1jbGlja2AgYXR0cmlidXRlc1xuICogaW4gbGlua3MgYW5kIHRoZWlyIGRpZmZlcmVudCBiZWhhdmlvcnM6XG4gICAgPGV4YW1wbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJ2YWx1ZVwiIC8+PGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay0xXCIgaHJlZiBuZy1jbGljaz1cInZhbHVlID0gMVwiPmxpbmsgMTwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTJcIiBocmVmPVwiXCIgbmctY2xpY2s9XCJ2YWx1ZSA9IDJcIj5saW5rIDI8L2E+IChsaW5rLCBkb24ndCByZWxvYWQpPGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay0zXCIgbmctaHJlZj1cIi97eycxMjMnfX1cIj5saW5rIDM8L2E+IChsaW5rLCByZWxvYWQhKTxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstNFwiIGhyZWY9XCJcIiBuYW1lPVwieHhcIiBuZy1jbGljaz1cInZhbHVlID0gNFwiPmFuY2hvcjwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTVcIiBuYW1lPVwieHh4XCIgbmctY2xpY2s9XCJ2YWx1ZSA9IDVcIj5hbmNob3I8L2E+IChubyBsaW5rKTxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstNlwiIG5nLWhyZWY9XCJ7e3ZhbHVlfX1cIj5saW5rPC9hPiAobGluaywgY2hhbmdlIGxvY2F0aW9uKVxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIHdpdGhvdXQgdmFsdWUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTEnKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCcxJyk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstMScpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9CZSgnJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIGhyZWYgZW1wdHkgc3RyaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay0yJykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnMicpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTInKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUoJycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYW5kIGNoYW5nZSB1cmwgd2hlbiBuZy1ocmVmIHNwZWNpZmllZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTMnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvTWF0Y2goL1xcLzEyMyQvKTtcblxuICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstMycpKS5jbGljaygpO1xuXG4gICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgd2UgbmF2aWdhdGUgYXdheSBmcm9tIGFuIEFuZ3VsYXIgcGFnZSwgc28gd2UgbmVlZFxuICAgICAgICAgIC8vIHRvIHVzZSBicm93c2VyLmRyaXZlciB0byBnZXQgdGhlIGJhc2Ugd2ViZHJpdmVyLlxuXG4gICAgICAgICAgYnJvd3Nlci53YWl0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIuZHJpdmVyLmdldEN1cnJlbnRVcmwoKS50aGVuKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgICByZXR1cm4gdXJsLm1hdGNoKC9cXC8xMjMkLyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCA1MDAwLCAncGFnZSBzaG91bGQgbmF2aWdhdGUgdG8gLzEyMycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIGVtcHR5IHN0cmluZyBhbmQgbmFtZSBzcGVjaWZpZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTQnKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCc0Jyk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstNCcpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9CZSgnJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIG5vIGhyZWYgYnV0IG5hbWUgc3BlY2lmaWVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay01JykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnNScpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTUnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUobnVsbCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgb25seSBjaGFuZ2UgdXJsIHdoZW4gb25seSBuZy1ocmVmJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuY2xlYXIoKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5zZW5kS2V5cygnNicpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTYnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvTWF0Y2goL1xcLzYkLyk7XG5cbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTYnKSkuY2xpY2soKTtcblxuICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIG5hdmlnYXRlIGF3YXkgZnJvbSBhbiBBbmd1bGFyIHBhZ2UsIHNvIHdlIG5lZWRcbiAgICAgICAgICAvLyB0byB1c2UgYnJvd3Nlci5kcml2ZXIgdG8gZ2V0IHRoZSBiYXNlIHdlYmRyaXZlci5cbiAgICAgICAgICBicm93c2VyLndhaXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gYnJvd3Nlci5kcml2ZXIuZ2V0Q3VycmVudFVybCgpLnRoZW4oZnVuY3Rpb24odXJsKSB7XG4gICAgICAgICAgICAgIHJldHVybiB1cmwubWF0Y2goL1xcLzYkLyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCA1MDAwLCAncGFnZSBzaG91bGQgbmF2aWdhdGUgdG8gLzYnKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTcmNcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgOTlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzaW5nIEFuZ3VsYXIgbWFya3VwIGxpa2UgYHt7aGFzaH19YCBpbiBhIGBzcmNgIGF0dHJpYnV0ZSBkb2Vzbid0XG4gKiB3b3JrIHJpZ2h0OiBUaGUgYnJvd3NlciB3aWxsIGZldGNoIGZyb20gdGhlIFVSTCB3aXRoIHRoZSBsaXRlcmFsXG4gKiB0ZXh0IGB7e2hhc2h9fWAgdW50aWwgQW5ndWxhciByZXBsYWNlcyB0aGUgZXhwcmVzc2lvbiBpbnNpZGVcbiAqIGB7e2hhc2h9fWAuIFRoZSBgbmdTcmNgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtLlxuICpcbiAqIFRoZSBidWdneSB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8aW1nIHNyYz1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fVwiIGFsdD1cIkRlc2NyaXB0aW9uXCIvPlxuICogYGBgXG4gKlxuICogVGhlIGNvcnJlY3Qgd2F5IHRvIHdyaXRlIGl0OlxuICogYGBgaHRtbFxuICogPGltZyBuZy1zcmM9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX1cIiBhbHQ9XCJEZXNjcmlwdGlvblwiIC8+XG4gKiBgYGBcbiAqXG4gKiBAZWxlbWVudCBJTUdcbiAqIEBwYXJhbSB7dGVtcGxhdGV9IG5nU3JjIGFueSBzdHJpbmcgd2hpY2ggY2FuIGNvbnRhaW4gYHt7fX1gIG1hcmt1cC5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU3Jjc2V0XG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDk5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIGB7e2hhc2h9fWAgaW4gYSBgc3Jjc2V0YCBhdHRyaWJ1dGUgZG9lc24ndFxuICogd29yayByaWdodDogVGhlIGJyb3dzZXIgd2lsbCBmZXRjaCBmcm9tIHRoZSBVUkwgd2l0aCB0aGUgbGl0ZXJhbFxuICogdGV4dCBge3toYXNofX1gIHVudGlsIEFuZ3VsYXIgcmVwbGFjZXMgdGhlIGV4cHJlc3Npb24gaW5zaWRlXG4gKiBge3toYXNofX1gLiBUaGUgYG5nU3Jjc2V0YCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbS5cbiAqXG4gKiBUaGUgYnVnZ3kgd2F5IHRvIHdyaXRlIGl0OlxuICogYGBgaHRtbFxuICogPGltZyBzcmNzZXQ9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX0gMnhcIiBhbHQ9XCJEZXNjcmlwdGlvblwiLz5cbiAqIGBgYFxuICpcbiAqIFRoZSBjb3JyZWN0IHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxpbWcgbmctc3Jjc2V0PVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19IDJ4XCIgYWx0PVwiRGVzY3JpcHRpb25cIiAvPlxuICogYGBgXG4gKlxuICogQGVsZW1lbnQgSU1HXG4gKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ1NyY3NldCBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0Rpc2FibGVkXG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDEwMFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoaXMgZGlyZWN0aXZlIHNldHMgdGhlIGBkaXNhYmxlZGAgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IGlmIHRoZVxuICoge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaW5zaWRlIGBuZ0Rpc2FibGVkYCBldmFsdWF0ZXMgdG8gdHJ1dGh5LlxuICpcbiAqIEEgc3BlY2lhbCBkaXJlY3RpdmUgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2UgY2Fubm90IHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGUgYGRpc2FibGVkYFxuICogYXR0cmlidXRlLiAgVGhlIGZvbGxvd2luZyBleGFtcGxlIHdvdWxkIG1ha2UgdGhlIGJ1dHRvbiBlbmFibGVkIG9uIENocm9tZS9GaXJlZm94XG4gKiBidXQgbm90IG9uIG9sZGVyIElFczpcbiAqXG4gKiBgYGBodG1sXG4gKiA8IS0tIFNlZSBiZWxvdyBmb3IgYW4gZXhhbXBsZSBvZiBuZy1kaXNhYmxlZCBiZWluZyB1c2VkIGNvcnJlY3RseSAtLT5cbiAqIDxkaXYgbmctaW5pdD1cImlzRGlzYWJsZWQgPSBmYWxzZVwiPlxuICogIDxidXR0b24gZGlzYWJsZWQ9XCJ7e2lzRGlzYWJsZWR9fVwiPkRpc2FibGVkPC9idXR0b24+XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFRoaXMgaXMgYmVjYXVzZSB0aGUgSFRNTCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IHJlcXVpcmUgYnJvd3NlcnMgdG8gcHJlc2VydmUgdGhlIHZhbHVlcyBvZlxuICogYm9vbGVhbiBhdHRyaWJ1dGVzIHN1Y2ggYXMgYGRpc2FibGVkYCAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pXG4gKiBJZiB3ZSBwdXQgYW4gQW5ndWxhciBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24gaW50byBzdWNoIGFuIGF0dHJpYnV0ZSB0aGVuIHRoZVxuICogYmluZGluZyBpbmZvcm1hdGlvbiB3b3VsZCBiZSBsb3N0IHdoZW4gdGhlIGJyb3dzZXIgcmVtb3ZlcyB0aGUgYXR0cmlidXRlLlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8bGFiZWw+Q2xpY2sgbWUgdG8gdG9nZ2xlOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCI+PC9sYWJlbD48YnIvPlxuICAgICAgICA8YnV0dG9uIG5nLW1vZGVsPVwiYnV0dG9uXCIgbmctZGlzYWJsZWQ9XCJjaGVja2VkXCI+QnV0dG9uPC9idXR0b24+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgdG9nZ2xlIGJ1dHRvbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnYnV0dG9uJykpLmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKSkudG9CZUZhbHN5KCk7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnYnV0dG9uJykpLmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgSU5QVVRcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdEaXNhYmxlZCBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LFxuICogICAgIHRoZW4gdGhlIGBkaXNhYmxlZGAgYXR0cmlidXRlIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ2hlY2tlZFxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNldHMgdGhlIGBjaGVja2VkYCBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQsIGlmIHRoZSBleHByZXNzaW9uIGluc2lkZSBgbmdDaGVja2VkYCBpcyB0cnV0aHkuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgZGlyZWN0aXZlIHNob3VsZCBub3QgYmUgdXNlZCB0b2dldGhlciB3aXRoIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0sXG4gKiBhcyB0aGlzIGNhbiBsZWFkIHRvIHVuZXhwZWN0ZWQgYmVoYXZpb3IuXG4gKlxuICogIyMjIFdoeSBkbyB3ZSBuZWVkIGBuZ0NoZWNrZWRgP1xuICpcbiAqIFRoZSBIVE1MIHNwZWNpZmljYXRpb24gZG9lcyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgdmFsdWVzIG9mIGJvb2xlYW4gYXR0cmlidXRlc1xuICogc3VjaCBhcyBjaGVja2VkLiAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pXG4gKiBJZiB3ZSBwdXQgYW4gQW5ndWxhciBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24gaW50byBzdWNoIGFuIGF0dHJpYnV0ZSB0aGVuIHRoZVxuICogYmluZGluZyBpbmZvcm1hdGlvbiB3b3VsZCBiZSBsb3N0IHdoZW4gdGhlIGJyb3dzZXIgcmVtb3ZlcyB0aGUgYXR0cmlidXRlLlxuICogVGhlIGBuZ0NoZWNrZWRgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtIGZvciB0aGUgYGNoZWNrZWRgIGF0dHJpYnV0ZS5cbiAqIFRoaXMgY29tcGxlbWVudGFyeSBkaXJlY3RpdmUgaXMgbm90IHJlbW92ZWQgYnkgdGhlIGJyb3dzZXIgYW5kIHNvIHByb3ZpZGVzXG4gKiBhIHBlcm1hbmVudCByZWxpYWJsZSBwbGFjZSB0byBzdG9yZSB0aGUgYmluZGluZyBpbmZvcm1hdGlvbi5cbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8bGFiZWw+Q2hlY2sgbWUgdG8gY2hlY2sgYm90aDogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwibWFzdGVyXCI+PC9sYWJlbD48YnIvPlxuICAgICAgICA8aW5wdXQgaWQ9XCJjaGVja1NsYXZlXCIgdHlwZT1cImNoZWNrYm94XCIgbmctY2hlY2tlZD1cIm1hc3RlclwiIGFyaWEtbGFiZWw9XCJTbGF2ZSBpbnB1dFwiPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIGJvdGggY2hlY2tCb3hlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjaGVja1NsYXZlJykpLmdldEF0dHJpYnV0ZSgnY2hlY2tlZCcpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdtYXN0ZXInKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY2hlY2tTbGF2ZScpKS5nZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgSU5QVVRcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDaGVja2VkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiB0aGUgYGNoZWNrZWRgIGF0dHJpYnV0ZSB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1JlYWRvbmx5XG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDEwMFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIEhUTUwgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdCByZXF1aXJlIGJyb3dzZXJzIHRvIHByZXNlcnZlIHRoZSB2YWx1ZXMgb2YgYm9vbGVhbiBhdHRyaWJ1dGVzXG4gKiBzdWNoIGFzIHJlYWRvbmx5LiAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pXG4gKiBJZiB3ZSBwdXQgYW4gQW5ndWxhciBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24gaW50byBzdWNoIGFuIGF0dHJpYnV0ZSB0aGVuIHRoZVxuICogYmluZGluZyBpbmZvcm1hdGlvbiB3b3VsZCBiZSBsb3N0IHdoZW4gdGhlIGJyb3dzZXIgcmVtb3ZlcyB0aGUgYXR0cmlidXRlLlxuICogVGhlIGBuZ1JlYWRvbmx5YCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbSBmb3IgdGhlIGByZWFkb25seWAgYXR0cmlidXRlLlxuICogVGhpcyBjb21wbGVtZW50YXJ5IGRpcmVjdGl2ZSBpcyBub3QgcmVtb3ZlZCBieSB0aGUgYnJvd3NlciBhbmQgc28gcHJvdmlkZXNcbiAqIGEgcGVybWFuZW50IHJlbGlhYmxlIHBsYWNlIHRvIHN0b3JlIHRoZSBiaW5kaW5nIGluZm9ybWF0aW9uLlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxsYWJlbD5DaGVjayBtZSB0byBtYWtlIHRleHQgcmVhZG9ubHk6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIj48L2xhYmVsPjxici8+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLXJlYWRvbmx5PVwiY2hlY2tlZFwiIHZhbHVlPVwiSSdtIEFuZ3VsYXJcIiBhcmlhLWxhYmVsPVwiUmVhZG9ubHkgZmllbGRcIiAvPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSByZWFkb25seSBhdHRyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdbdHlwZT1cInRleHRcIl0nKSkuZ2V0QXR0cmlidXRlKCdyZWFkb25seScpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdbdHlwZT1cInRleHRcIl0nKSkuZ2V0QXR0cmlidXRlKCdyZWFkb25seScpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAZWxlbWVudCBJTlBVVFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1JlYWRvbmx5IElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSBcInJlYWRvbmx5XCIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTZWxlY3RlZFxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBIVE1MIHNwZWNpZmljYXRpb24gZG9lcyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgdmFsdWVzIG9mIGJvb2xlYW4gYXR0cmlidXRlc1xuICogc3VjaCBhcyBzZWxlY3RlZC4gKFRoZWlyIHByZXNlbmNlIG1lYW5zIHRydWUgYW5kIHRoZWlyIGFic2VuY2UgbWVhbnMgZmFsc2UuKVxuICogSWYgd2UgcHV0IGFuIEFuZ3VsYXIgaW50ZXJwb2xhdGlvbiBleHByZXNzaW9uIGludG8gc3VjaCBhbiBhdHRyaWJ1dGUgdGhlbiB0aGVcbiAqIGJpbmRpbmcgaW5mb3JtYXRpb24gd291bGQgYmUgbG9zdCB3aGVuIHRoZSBicm93c2VyIHJlbW92ZXMgdGhlIGF0dHJpYnV0ZS5cbiAqIFRoZSBgbmdTZWxlY3RlZGAgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0gZm9yIHRoZSBgc2VsZWN0ZWRgIGF0dHJpYnV0ZS5cbiAqIFRoaXMgY29tcGxlbWVudGFyeSBkaXJlY3RpdmUgaXMgbm90IHJlbW92ZWQgYnkgdGhlIGJyb3dzZXIgYW5kIHNvIHByb3ZpZGVzXG4gKiBhIHBlcm1hbmVudCByZWxpYWJsZSBwbGFjZSB0byBzdG9yZSB0aGUgYmluZGluZyBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGxhYmVsPkNoZWNrIG1lIHRvIHNlbGVjdDogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwic2VsZWN0ZWRcIj48L2xhYmVsPjxici8+XG4gICAgICAgIDxzZWxlY3QgYXJpYS1sYWJlbD1cIm5nU2VsZWN0ZWQgZGVtb1wiPlxuICAgICAgICAgIDxvcHRpb24+SGVsbG8hPC9vcHRpb24+XG4gICAgICAgICAgPG9wdGlvbiBpZD1cImdyZWV0XCIgbmctc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiPkdyZWV0aW5ncyE8L29wdGlvbj5cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgc2VsZWN0IEdyZWV0aW5ncyEnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZ3JlZXQnKSkuZ2V0QXR0cmlidXRlKCdzZWxlY3RlZCcpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzZWxlY3RlZCcpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdncmVldCcpKS5nZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IE9QVElPTlxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1NlbGVjdGVkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSBcInNlbGVjdGVkXCIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nT3BlblxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBIVE1MIHNwZWNpZmljYXRpb24gZG9lcyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgdmFsdWVzIG9mIGJvb2xlYW4gYXR0cmlidXRlc1xuICogc3VjaCBhcyBvcGVuLiAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pXG4gKiBJZiB3ZSBwdXQgYW4gQW5ndWxhciBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24gaW50byBzdWNoIGFuIGF0dHJpYnV0ZSB0aGVuIHRoZVxuICogYmluZGluZyBpbmZvcm1hdGlvbiB3b3VsZCBiZSBsb3N0IHdoZW4gdGhlIGJyb3dzZXIgcmVtb3ZlcyB0aGUgYXR0cmlidXRlLlxuICogVGhlIGBuZ09wZW5gIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtIGZvciB0aGUgYG9wZW5gIGF0dHJpYnV0ZS5cbiAqIFRoaXMgY29tcGxlbWVudGFyeSBkaXJlY3RpdmUgaXMgbm90IHJlbW92ZWQgYnkgdGhlIGJyb3dzZXIgYW5kIHNvIHByb3ZpZGVzXG4gKiBhIHBlcm1hbmVudCByZWxpYWJsZSBwbGFjZSB0byBzdG9yZSB0aGUgYmluZGluZyBpbmZvcm1hdGlvbi5cbiAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8bGFiZWw+Q2hlY2sgbWUgY2hlY2sgbXVsdGlwbGU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cIm9wZW5cIj48L2xhYmVsPjxici8+XG4gICAgICAgICA8ZGV0YWlscyBpZD1cImRldGFpbHNcIiBuZy1vcGVuPVwib3BlblwiPlxuICAgICAgICAgICAgPHN1bW1hcnk+U2hvdy9IaWRlIG1lPC9zdW1tYXJ5PlxuICAgICAgICAgPC9kZXRhaWxzPlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSBvcGVuJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdkZXRhaWxzJykpLmdldEF0dHJpYnV0ZSgnb3BlbicpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnb3BlbicpKS5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZGV0YWlscycpKS5nZXRBdHRyaWJ1dGUoJ29wZW4nKSkudG9CZVRydXRoeSgpO1xuICAgICAgICAgfSk7XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgREVUQUlMU1xuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ09wZW4gSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSxcbiAqICAgICB0aGVuIHNwZWNpYWwgYXR0cmlidXRlIFwib3BlblwiIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gKi9cblxudmFyIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzID0ge307XG5cbi8vIGJvb2xlYW4gYXR0cnMgYXJlIGV2YWx1YXRlZFxuZm9yRWFjaChCT09MRUFOX0FUVFIsIGZ1bmN0aW9uKHByb3BOYW1lLCBhdHRyTmFtZSkge1xuICAvLyBiaW5kaW5nIHRvIG11bHRpcGxlIGlzIG5vdCBzdXBwb3J0ZWRcbiAgaWYgKHByb3BOYW1lID09IFwibXVsdGlwbGVcIikgcmV0dXJuO1xuXG4gIGZ1bmN0aW9uIGRlZmF1bHRMaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICBzY29wZS4kd2F0Y2goYXR0cltub3JtYWxpemVkXSwgZnVuY3Rpb24gbmdCb29sZWFuQXR0cldhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICBhdHRyLiRzZXQoYXR0ck5hbWUsICEhdmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIG5vcm1hbGl6ZWQgPSBkaXJlY3RpdmVOb3JtYWxpemUoJ25nLScgKyBhdHRyTmFtZSk7XG4gIHZhciBsaW5rRm4gPSBkZWZhdWx0TGlua0ZuO1xuXG4gIGlmIChwcm9wTmFtZSA9PT0gJ2NoZWNrZWQnKSB7XG4gICAgbGlua0ZuID0gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIC8vIGVuc3VyaW5nIG5nQ2hlY2tlZCBkb2Vzbid0IGludGVyZmVyZSB3aXRoIG5nTW9kZWwgd2hlbiBib3RoIGFyZSBzZXQgb24gdGhlIHNhbWUgaW5wdXRcbiAgICAgIGlmIChhdHRyLm5nTW9kZWwgIT09IGF0dHJbbm9ybWFsaXplZF0pIHtcbiAgICAgICAgZGVmYXVsdExpbmtGbihzY29wZSwgZWxlbWVudCwgYXR0cik7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzW25vcm1hbGl6ZWRdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBwcmlvcml0eTogMTAwLFxuICAgICAgbGluazogbGlua0ZuXG4gICAgfTtcbiAgfTtcbn0pO1xuXG4vLyBhbGlhc2VkIGlucHV0IGF0dHJzIGFyZSBldmFsdWF0ZWRcbmZvckVhY2goQUxJQVNFRF9BVFRSLCBmdW5jdGlvbihodG1sQXR0ciwgbmdBdHRyKSB7XG4gIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzW25nQXR0cl0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJpb3JpdHk6IDEwMCxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIC8vc3BlY2lhbCBjYXNlIG5nUGF0dGVybiB3aGVuIGEgbGl0ZXJhbCByZWd1bGFyIGV4cHJlc3Npb24gdmFsdWVcbiAgICAgICAgLy9pcyB1c2VkIGFzIHRoZSBleHByZXNzaW9uICh0aGlzIHdheSB3ZSBkb24ndCBoYXZlIHRvIHdhdGNoIGFueXRoaW5nKS5cbiAgICAgICAgaWYgKG5nQXR0ciA9PT0gXCJuZ1BhdHRlcm5cIiAmJiBhdHRyLm5nUGF0dGVybi5jaGFyQXQoMCkgPT0gXCIvXCIpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBhdHRyLm5nUGF0dGVybi5tYXRjaChSRUdFWF9TVFJJTkdfUkVHRVhQKTtcbiAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGF0dHIuJHNldChcIm5nUGF0dGVyblwiLCBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNjb3BlLiR3YXRjaChhdHRyW25nQXR0cl0sIGZ1bmN0aW9uIG5nQXR0ckFsaWFzV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBhdHRyLiRzZXQobmdBdHRyLCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59KTtcblxuLy8gbmctc3JjLCBuZy1zcmNzZXQsIG5nLWhyZWYgYXJlIGludGVycG9sYXRlZFxuZm9yRWFjaChbJ3NyYycsICdzcmNzZXQnLCAnaHJlZiddLCBmdW5jdGlvbihhdHRyTmFtZSkge1xuICB2YXIgbm9ybWFsaXplZCA9IGRpcmVjdGl2ZU5vcm1hbGl6ZSgnbmctJyArIGF0dHJOYW1lKTtcbiAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXNbbm9ybWFsaXplZF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJpb3JpdHk6IDk5LCAvLyBpdCBuZWVkcyB0byBydW4gYWZ0ZXIgdGhlIGF0dHJpYnV0ZXMgYXJlIGludGVycG9sYXRlZFxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgdmFyIHByb3BOYW1lID0gYXR0ck5hbWUsXG4gICAgICAgICAgICBuYW1lID0gYXR0ck5hbWU7XG5cbiAgICAgICAgaWYgKGF0dHJOYW1lID09PSAnaHJlZicgJiZcbiAgICAgICAgICAgIHRvU3RyaW5nLmNhbGwoZWxlbWVudC5wcm9wKCdocmVmJykpID09PSAnW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ10nKSB7XG4gICAgICAgICAgbmFtZSA9ICd4bGlua0hyZWYnO1xuICAgICAgICAgIGF0dHIuJGF0dHJbbmFtZV0gPSAneGxpbms6aHJlZic7XG4gICAgICAgICAgcHJvcE5hbWUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgYXR0ci4kb2JzZXJ2ZShub3JtYWxpemVkLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChhdHRyTmFtZSA9PT0gJ2hyZWYnKSB7XG4gICAgICAgICAgICAgIGF0dHIuJHNldChuYW1lLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhdHRyLiRzZXQobmFtZSwgdmFsdWUpO1xuXG4gICAgICAgICAgLy8gb24gSUUsIGlmIFwibmc6c3JjXCIgZGlyZWN0aXZlIGRlY2xhcmF0aW9uIGlzIHVzZWQgYW5kIFwic3JjXCIgYXR0cmlidXRlIGRvZXNuJ3QgZXhpc3RcbiAgICAgICAgICAvLyB0aGVuIGNhbGxpbmcgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3NyYycsICdmb28nKSBkb2Vzbid0IGRvIGFueXRoaW5nLCBzbyB3ZSBuZWVkXG4gICAgICAgICAgLy8gdG8gc2V0IHRoZSBwcm9wZXJ0eSBhcyB3ZWxsIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgZWZmZWN0LlxuICAgICAgICAgIC8vIHdlIHVzZSBhdHRyW2F0dHJOYW1lXSB2YWx1ZSBzaW5jZSAkc2V0IGNhbiBzYW5pdGl6ZSB0aGUgdXJsLlxuICAgICAgICAgIGlmIChtc2llICYmIHByb3BOYW1lKSBlbGVtZW50LnByb3AocHJvcE5hbWUsIGF0dHJbbmFtZV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufSk7XG5cbi8qIGdsb2JhbCAtbnVsbEZvcm1DdHJsLCAtU1VCTUlUVEVEX0NMQVNTLCBhZGRTZXRWYWxpZGl0eU1ldGhvZDogdHJ1ZVxuICovXG52YXIgbnVsbEZvcm1DdHJsID0ge1xuICAkYWRkQ29udHJvbDogbm9vcCxcbiAgJCRyZW5hbWVDb250cm9sOiBudWxsRm9ybVJlbmFtZUNvbnRyb2wsXG4gICRyZW1vdmVDb250cm9sOiBub29wLFxuICAkc2V0VmFsaWRpdHk6IG5vb3AsXG4gICRzZXREaXJ0eTogbm9vcCxcbiAgJHNldFByaXN0aW5lOiBub29wLFxuICAkc2V0U3VibWl0dGVkOiBub29wXG59LFxuU1VCTUlUVEVEX0NMQVNTID0gJ25nLXN1Ym1pdHRlZCc7XG5cbmZ1bmN0aW9uIG51bGxGb3JtUmVuYW1lQ29udHJvbChjb250cm9sLCBuYW1lKSB7XG4gIGNvbnRyb2wuJG5hbWUgPSBuYW1lO1xufVxuXG4vKipcbiAqIEBuZ2RvYyB0eXBlXG4gKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSAkcHJpc3RpbmUgVHJ1ZSBpZiB1c2VyIGhhcyBub3QgaW50ZXJhY3RlZCB3aXRoIHRoZSBmb3JtIHlldC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGRpcnR5IFRydWUgaWYgdXNlciBoYXMgYWxyZWFkeSBpbnRlcmFjdGVkIHdpdGggdGhlIGZvcm0uXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICR2YWxpZCBUcnVlIGlmIGFsbCBvZiB0aGUgY29udGFpbmluZyBmb3JtcyBhbmQgY29udHJvbHMgYXJlIHZhbGlkLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkaW52YWxpZCBUcnVlIGlmIGF0IGxlYXN0IG9uZSBjb250YWluaW5nIGNvbnRyb2wgb3IgZm9ybSBpcyBpbnZhbGlkLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkc3VibWl0dGVkIFRydWUgaWYgdXNlciBoYXMgc3VibWl0dGVkIHRoZSBmb3JtIGV2ZW4gaWYgaXRzIGludmFsaWQuXG4gKlxuICogQHByb3BlcnR5IHtPYmplY3R9ICRlcnJvciBJcyBhbiBvYmplY3QgaGFzaCwgY29udGFpbmluZyByZWZlcmVuY2VzIHRvIGNvbnRyb2xzIG9yXG4gKiAgZm9ybXMgd2l0aCBmYWlsaW5nIHZhbGlkYXRvcnMsIHdoZXJlOlxuICpcbiAqICAtIGtleXMgYXJlIHZhbGlkYXRpb24gdG9rZW5zIChlcnJvciBuYW1lcyksXG4gKiAgLSB2YWx1ZXMgYXJlIGFycmF5cyBvZiBjb250cm9scyBvciBmb3JtcyB0aGF0IGhhdmUgYSBmYWlsaW5nIHZhbGlkYXRvciBmb3IgZ2l2ZW4gZXJyb3IgbmFtZS5cbiAqXG4gKiAgQnVpbHQtaW4gdmFsaWRhdGlvbiB0b2tlbnM6XG4gKlxuICogIC0gYGVtYWlsYFxuICogIC0gYG1heGBcbiAqICAtIGBtYXhsZW5ndGhgXG4gKiAgLSBgbWluYFxuICogIC0gYG1pbmxlbmd0aGBcbiAqICAtIGBudW1iZXJgXG4gKiAgLSBgcGF0dGVybmBcbiAqICAtIGByZXF1aXJlZGBcbiAqICAtIGB1cmxgXG4gKiAgLSBgZGF0ZWBcbiAqICAtIGBkYXRldGltZWxvY2FsYFxuICogIC0gYHRpbWVgXG4gKiAgLSBgd2Vla2BcbiAqICAtIGBtb250aGBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGBGb3JtQ29udHJvbGxlcmAga2VlcHMgdHJhY2sgb2YgYWxsIGl0cyBjb250cm9scyBhbmQgbmVzdGVkIGZvcm1zIGFzIHdlbGwgYXMgdGhlIHN0YXRlIG9mIHRoZW0sXG4gKiBzdWNoIGFzIGJlaW5nIHZhbGlkL2ludmFsaWQgb3IgZGlydHkvcHJpc3RpbmUuXG4gKlxuICogRWFjaCB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0gZm9ybX0gZGlyZWN0aXZlIGNyZWF0ZXMgYW4gaW5zdGFuY2VcbiAqIG9mIGBGb3JtQ29udHJvbGxlcmAuXG4gKlxuICovXG4vL2Fza3MgZm9yICRzY29wZSB0byBmb29sIHRoZSBCQyBjb250cm9sbGVyIG1vZHVsZVxuRm9ybUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJGVsZW1lbnQnLCAnJGF0dHJzJywgJyRzY29wZScsICckYW5pbWF0ZScsICckaW50ZXJwb2xhdGUnXTtcbmZ1bmN0aW9uIEZvcm1Db250cm9sbGVyKGVsZW1lbnQsIGF0dHJzLCAkc2NvcGUsICRhbmltYXRlLCAkaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGZvcm0gPSB0aGlzLFxuICAgICAgY29udHJvbHMgPSBbXTtcblxuICB2YXIgcGFyZW50Rm9ybSA9IGZvcm0uJCRwYXJlbnRGb3JtID0gZWxlbWVudC5wYXJlbnQoKS5jb250cm9sbGVyKCdmb3JtJykgfHwgbnVsbEZvcm1DdHJsO1xuXG4gIC8vIGluaXQgc3RhdGVcbiAgZm9ybS4kZXJyb3IgPSB7fTtcbiAgZm9ybS4kJHN1Y2Nlc3MgPSB7fTtcbiAgZm9ybS4kcGVuZGluZyA9IHVuZGVmaW5lZDtcbiAgZm9ybS4kbmFtZSA9ICRpbnRlcnBvbGF0ZShhdHRycy5uYW1lIHx8IGF0dHJzLm5nRm9ybSB8fCAnJykoJHNjb3BlKTtcbiAgZm9ybS4kZGlydHkgPSBmYWxzZTtcbiAgZm9ybS4kcHJpc3RpbmUgPSB0cnVlO1xuICBmb3JtLiR2YWxpZCA9IHRydWU7XG4gIGZvcm0uJGludmFsaWQgPSBmYWxzZTtcbiAgZm9ybS4kc3VibWl0dGVkID0gZmFsc2U7XG5cbiAgcGFyZW50Rm9ybS4kYWRkQ29udHJvbChmb3JtKTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRyb2xsYmFja1ZpZXdWYWx1ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUm9sbGJhY2sgYWxsIGZvcm0gY29udHJvbHMgcGVuZGluZyB1cGRhdGVzIHRvIHRoZSBgJG1vZGVsVmFsdWVgLlxuICAgKlxuICAgKiBVcGRhdGVzIG1heSBiZSBwZW5kaW5nIGJ5IGEgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIGEgc29tZSBmdXR1cmVcbiAgICogZXZlbnQgZGVmaW5lZCBpbiBgbmctbW9kZWwtb3B0aW9uc2AuIFRoaXMgbWV0aG9kIGlzIHR5cGljYWxseSBuZWVkZWQgYnkgdGhlIHJlc2V0IGJ1dHRvbiBvZlxuICAgKiBhIGZvcm0gdGhhdCB1c2VzIGBuZy1tb2RlbC1vcHRpb25zYCB0byBwZW5kIHVwZGF0ZXMuXG4gICAqL1xuICBmb3JtLiRyb2xsYmFja1ZpZXdWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgIGZvckVhY2goY29udHJvbHMsIGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICAgIGNvbnRyb2wuJHJvbGxiYWNrVmlld1ZhbHVlKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkY29tbWl0Vmlld1ZhbHVlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDb21taXQgYWxsIGZvcm0gY29udHJvbHMgcGVuZGluZyB1cGRhdGVzIHRvIHRoZSBgJG1vZGVsVmFsdWVgLlxuICAgKlxuICAgKiBVcGRhdGVzIG1heSBiZSBwZW5kaW5nIGJ5IGEgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIGEgc29tZSBmdXR1cmVcbiAgICogZXZlbnQgZGVmaW5lZCBpbiBgbmctbW9kZWwtb3B0aW9uc2AuIFRoaXMgbWV0aG9kIGlzIHJhcmVseSBuZWVkZWQgYXMgYE5nTW9kZWxDb250cm9sbGVyYFxuICAgKiB1c3VhbGx5IGhhbmRsZXMgY2FsbGluZyB0aGlzIGluIHJlc3BvbnNlIHRvIGlucHV0IGV2ZW50cy5cbiAgICovXG4gIGZvcm0uJGNvbW1pdFZpZXdWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgIGZvckVhY2goY29udHJvbHMsIGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICAgIGNvbnRyb2wuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJGFkZENvbnRyb2xcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVyIGEgY29udHJvbCB3aXRoIHRoZSBmb3JtLlxuICAgKlxuICAgKiBJbnB1dCBlbGVtZW50cyB1c2luZyBuZ01vZGVsQ29udHJvbGxlciBkbyB0aGlzIGF1dG9tYXRpY2FsbHkgd2hlbiB0aGV5IGFyZSBsaW5rZWQuXG4gICAqL1xuICBmb3JtLiRhZGRDb250cm9sID0gZnVuY3Rpb24oY29udHJvbCkge1xuICAgIC8vIEJyZWFraW5nIGNoYW5nZSAtIGJlZm9yZSwgaW5wdXRzIHdob3NlIG5hbWUgd2FzIFwiaGFzT3duUHJvcGVydHlcIiB3ZXJlIHF1aWV0bHkgaWdub3JlZFxuICAgIC8vIGFuZCBub3QgYWRkZWQgdG8gdGhlIHNjb3BlLiAgTm93IHdlIHRocm93IGFuIGVycm9yLlxuICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KGNvbnRyb2wuJG5hbWUsICdpbnB1dCcpO1xuICAgIGNvbnRyb2xzLnB1c2goY29udHJvbCk7XG5cbiAgICBpZiAoY29udHJvbC4kbmFtZSkge1xuICAgICAgZm9ybVtjb250cm9sLiRuYW1lXSA9IGNvbnRyb2w7XG4gICAgfVxuICB9O1xuXG4gIC8vIFByaXZhdGUgQVBJOiByZW5hbWUgYSBmb3JtIGNvbnRyb2xcbiAgZm9ybS4kJHJlbmFtZUNvbnRyb2wgPSBmdW5jdGlvbihjb250cm9sLCBuZXdOYW1lKSB7XG4gICAgdmFyIG9sZE5hbWUgPSBjb250cm9sLiRuYW1lO1xuXG4gICAgaWYgKGZvcm1bb2xkTmFtZV0gPT09IGNvbnRyb2wpIHtcbiAgICAgIGRlbGV0ZSBmb3JtW29sZE5hbWVdO1xuICAgIH1cbiAgICBmb3JtW25ld05hbWVdID0gY29udHJvbDtcbiAgICBjb250cm9sLiRuYW1lID0gbmV3TmFtZTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRyZW1vdmVDb250cm9sXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBEZXJlZ2lzdGVyIGEgY29udHJvbCBmcm9tIHRoZSBmb3JtLlxuICAgKlxuICAgKiBJbnB1dCBlbGVtZW50cyB1c2luZyBuZ01vZGVsQ29udHJvbGxlciBkbyB0aGlzIGF1dG9tYXRpY2FsbHkgd2hlbiB0aGV5IGFyZSBkZXN0cm95ZWQuXG4gICAqL1xuICBmb3JtLiRyZW1vdmVDb250cm9sID0gZnVuY3Rpb24oY29udHJvbCkge1xuICAgIGlmIChjb250cm9sLiRuYW1lICYmIGZvcm1bY29udHJvbC4kbmFtZV0gPT09IGNvbnRyb2wpIHtcbiAgICAgIGRlbGV0ZSBmb3JtW2NvbnRyb2wuJG5hbWVdO1xuICAgIH1cbiAgICBmb3JFYWNoKGZvcm0uJHBlbmRpbmcsIGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICBmb3JtLiRzZXRWYWxpZGl0eShuYW1lLCBudWxsLCBjb250cm9sKTtcbiAgICB9KTtcbiAgICBmb3JFYWNoKGZvcm0uJGVycm9yLCBmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgZm9ybS4kc2V0VmFsaWRpdHkobmFtZSwgbnVsbCwgY29udHJvbCk7XG4gICAgfSk7XG4gICAgZm9yRWFjaChmb3JtLiQkc3VjY2VzcywgZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIGZvcm0uJHNldFZhbGlkaXR5KG5hbWUsIG51bGwsIGNvbnRyb2wpO1xuICAgIH0pO1xuXG4gICAgYXJyYXlSZW1vdmUoY29udHJvbHMsIGNvbnRyb2wpO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0VmFsaWRpdHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIHZhbGlkaXR5IG9mIGEgZm9ybSBjb250cm9sLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCB3aWxsIGFsc28gcHJvcGFnYXRlIHRvIHBhcmVudCBmb3Jtcy5cbiAgICovXG4gIGFkZFNldFZhbGlkaXR5TWV0aG9kKHtcbiAgICBjdHJsOiB0aGlzLFxuICAgICRlbGVtZW50OiBlbGVtZW50LFxuICAgIHNldDogZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSwgY29udHJvbGxlcikge1xuICAgICAgdmFyIGxpc3QgPSBvYmplY3RbcHJvcGVydHldO1xuICAgICAgaWYgKCFsaXN0KSB7XG4gICAgICAgIG9iamVjdFtwcm9wZXJ0eV0gPSBbY29udHJvbGxlcl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaW5kZXggPSBsaXN0LmluZGV4T2YoY29udHJvbGxlcik7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICBsaXN0LnB1c2goY29udHJvbGxlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHVuc2V0OiBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5LCBjb250cm9sbGVyKSB7XG4gICAgICB2YXIgbGlzdCA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgICBpZiAoIWxpc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXJyYXlSZW1vdmUobGlzdCwgY29udHJvbGxlcik7XG4gICAgICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZGVsZXRlIG9iamVjdFtwcm9wZXJ0eV07XG4gICAgICB9XG4gICAgfSxcbiAgICBwYXJlbnRGb3JtOiBwYXJlbnRGb3JtLFxuICAgICRhbmltYXRlOiAkYW5pbWF0ZVxuICB9KTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRzZXREaXJ0eVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgZm9ybSB0byBhIGRpcnR5IHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIGFkZCB0aGUgJ25nLWRpcnR5JyBjbGFzcyBhbmQgc2V0IHRoZSBmb3JtIHRvIGEgZGlydHlcbiAgICogc3RhdGUgKG5nLWRpcnR5IGNsYXNzKS4gVGhpcyBtZXRob2Qgd2lsbCBhbHNvIHByb3BhZ2F0ZSB0byBwYXJlbnQgZm9ybXMuXG4gICAqL1xuICBmb3JtLiRzZXREaXJ0eSA9IGZ1bmN0aW9uKCkge1xuICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKGVsZW1lbnQsIFBSSVNUSU5FX0NMQVNTKTtcbiAgICAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCBESVJUWV9DTEFTUyk7XG4gICAgZm9ybS4kZGlydHkgPSB0cnVlO1xuICAgIGZvcm0uJHByaXN0aW5lID0gZmFsc2U7XG4gICAgcGFyZW50Rm9ybS4kc2V0RGlydHkoKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRzZXRQcmlzdGluZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgZm9ybSB0byBpdHMgcHJpc3RpbmUgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSAnbmctZGlydHknIGNsYXNzIGFuZCBzZXQgdGhlIGZvcm0gdG8gaXRzIHByaXN0aW5lXG4gICAqIHN0YXRlIChuZy1wcmlzdGluZSBjbGFzcykuIFRoaXMgbWV0aG9kIHdpbGwgYWxzbyBwcm9wYWdhdGUgdG8gYWxsIHRoZSBjb250cm9scyBjb250YWluZWRcbiAgICogaW4gdGhpcyBmb3JtLlxuICAgKlxuICAgKiBTZXR0aW5nIGEgZm9ybSBiYWNrIHRvIGEgcHJpc3RpbmUgc3RhdGUgaXMgb2Z0ZW4gdXNlZnVsIHdoZW4gd2Ugd2FudCB0byAncmV1c2UnIGEgZm9ybSBhZnRlclxuICAgKiBzYXZpbmcgb3IgcmVzZXR0aW5nIGl0LlxuICAgKi9cbiAgZm9ybS4kc2V0UHJpc3RpbmUgPSBmdW5jdGlvbigpIHtcbiAgICAkYW5pbWF0ZS5zZXRDbGFzcyhlbGVtZW50LCBQUklTVElORV9DTEFTUywgRElSVFlfQ0xBU1MgKyAnICcgKyBTVUJNSVRURURfQ0xBU1MpO1xuICAgIGZvcm0uJGRpcnR5ID0gZmFsc2U7XG4gICAgZm9ybS4kcHJpc3RpbmUgPSB0cnVlO1xuICAgIGZvcm0uJHN1Ym1pdHRlZCA9IGZhbHNlO1xuICAgIGZvckVhY2goY29udHJvbHMsIGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICAgIGNvbnRyb2wuJHNldFByaXN0aW5lKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0VW50b3VjaGVkXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBmb3JtIHRvIGl0cyB1bnRvdWNoZWQgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSAnbmctdG91Y2hlZCcgY2xhc3MgYW5kIHNldCB0aGUgZm9ybSBjb250cm9scyB0byB0aGVpclxuICAgKiB1bnRvdWNoZWQgc3RhdGUgKG5nLXVudG91Y2hlZCBjbGFzcykuXG4gICAqXG4gICAqIFNldHRpbmcgYSBmb3JtIGNvbnRyb2xzIGJhY2sgdG8gdGhlaXIgdW50b3VjaGVkIHN0YXRlIGlzIG9mdGVuIHVzZWZ1bCB3aGVuIHNldHRpbmcgdGhlIGZvcm1cbiAgICogYmFjayB0byBpdHMgcHJpc3RpbmUgc3RhdGUuXG4gICAqL1xuICBmb3JtLiRzZXRVbnRvdWNoZWQgPSBmdW5jdGlvbigpIHtcbiAgICBmb3JFYWNoKGNvbnRyb2xzLCBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgICBjb250cm9sLiRzZXRVbnRvdWNoZWQoKTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRzZXRTdWJtaXR0ZWRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGZvcm0gdG8gaXRzIHN1Ym1pdHRlZCBzdGF0ZS5cbiAgICovXG4gIGZvcm0uJHNldFN1Ym1pdHRlZCA9IGZ1bmN0aW9uKCkge1xuICAgICRhbmltYXRlLmFkZENsYXNzKGVsZW1lbnQsIFNVQk1JVFRFRF9DTEFTUyk7XG4gICAgZm9ybS4kc3VibWl0dGVkID0gdHJ1ZTtcbiAgICBwYXJlbnRGb3JtLiRzZXRTdWJtaXR0ZWQoKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0Zvcm1cbiAqIEByZXN0cmljdCBFQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE5lc3RhYmxlIGFsaWFzIG9mIHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSBgZm9ybWB9IGRpcmVjdGl2ZS4gSFRNTFxuICogZG9lcyBub3QgYWxsb3cgbmVzdGluZyBvZiBmb3JtIGVsZW1lbnRzLiBJdCBpcyB1c2VmdWwgdG8gbmVzdCBmb3JtcywgZm9yIGV4YW1wbGUgaWYgdGhlIHZhbGlkaXR5IG9mIGFcbiAqIHN1Yi1ncm91cCBvZiBjb250cm9scyBuZWVkcyB0byBiZSBkZXRlcm1pbmVkLlxuICpcbiAqIE5vdGU6IHRoZSBwdXJwb3NlIG9mIGBuZ0Zvcm1gIGlzIHRvIGdyb3VwIGNvbnRyb2xzLFxuICogYnV0IG5vdCB0byBiZSBhIHJlcGxhY2VtZW50IGZvciB0aGUgYDxmb3JtPmAgdGFnIHdpdGggYWxsIG9mIGl0cyBjYXBhYmlsaXRpZXNcbiAqIChlLmcuIHBvc3RpbmcgdG8gdGhlIHNlcnZlciwgLi4uKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nRm9ybXxuYW1lIE5hbWUgb2YgdGhlIGZvcm0uIElmIHNwZWNpZmllZCwgdGhlIGZvcm0gY29udHJvbGxlciB3aWxsIGJlIHB1Ymxpc2hlZCBpbnRvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZCBzY29wZSwgdW5kZXIgdGhpcyBuYW1lLlxuICpcbiAqL1xuXG4gLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBmb3JtXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGlyZWN0aXZlIHRoYXQgaW5zdGFudGlhdGVzXG4gKiB7QGxpbmsgZm9ybS5Gb3JtQ29udHJvbGxlciBGb3JtQ29udHJvbGxlcn0uXG4gKlxuICogSWYgdGhlIGBuYW1lYCBhdHRyaWJ1dGUgaXMgc3BlY2lmaWVkLCB0aGUgZm9ybSBjb250cm9sbGVyIGlzIHB1Ymxpc2hlZCBvbnRvIHRoZSBjdXJyZW50IHNjb3BlIHVuZGVyXG4gKiB0aGlzIG5hbWUuXG4gKlxuICogIyBBbGlhczoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0gYG5nRm9ybWB9XG4gKlxuICogSW4gQW5ndWxhciwgZm9ybXMgY2FuIGJlIG5lc3RlZC4gVGhpcyBtZWFucyB0aGF0IHRoZSBvdXRlciBmb3JtIGlzIHZhbGlkIHdoZW4gYWxsIG9mIHRoZSBjaGlsZFxuICogZm9ybXMgYXJlIHZhbGlkIGFzIHdlbGwuIEhvd2V2ZXIsIGJyb3dzZXJzIGRvIG5vdCBhbGxvdyBuZXN0aW5nIG9mIGA8Zm9ybT5gIGVsZW1lbnRzLCBzb1xuICogQW5ndWxhciBwcm92aWRlcyB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0gYG5nRm9ybWB9IGRpcmVjdGl2ZSB3aGljaCBiZWhhdmVzIGlkZW50aWNhbGx5IHRvXG4gKiBgPGZvcm0+YCBidXQgY2FuIGJlIG5lc3RlZC4gIFRoaXMgYWxsb3dzIHlvdSB0byBoYXZlIG5lc3RlZCBmb3Jtcywgd2hpY2ggaXMgdmVyeSB1c2VmdWwgd2hlblxuICogdXNpbmcgQW5ndWxhciB2YWxpZGF0aW9uIGRpcmVjdGl2ZXMgaW4gZm9ybXMgdGhhdCBhcmUgZHluYW1pY2FsbHkgZ2VuZXJhdGVkIHVzaW5nIHRoZVxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBgbmdSZXBlYXRgfSBkaXJlY3RpdmUuIFNpbmNlIHlvdSBjYW5ub3QgZHluYW1pY2FsbHkgZ2VuZXJhdGUgdGhlIGBuYW1lYFxuICogYXR0cmlidXRlIG9mIGlucHV0IGVsZW1lbnRzIHVzaW5nIGludGVycG9sYXRpb24sIHlvdSBoYXZlIHRvIHdyYXAgZWFjaCBzZXQgb2YgcmVwZWF0ZWQgaW5wdXRzIGluIGFuXG4gKiBgbmdGb3JtYCBkaXJlY3RpdmUgYW5kIG5lc3QgdGhlc2UgaW4gYW4gb3V0ZXIgYGZvcm1gIGVsZW1lbnQuXG4gKlxuICpcbiAqICMgQ1NTIGNsYXNzZXNcbiAqICAtIGBuZy12YWxpZGAgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIHZhbGlkLlxuICogIC0gYG5nLWludmFsaWRgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyBpbnZhbGlkLlxuICogIC0gYG5nLXByaXN0aW5lYCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgcHJpc3RpbmUuXG4gKiAgLSBgbmctZGlydHlgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyBkaXJ0eS5cbiAqICAtIGBuZy1zdWJtaXR0ZWRgIGlzIHNldCBpZiB0aGUgZm9ybSB3YXMgc3VibWl0dGVkLlxuICpcbiAqIEtlZXAgaW4gbWluZCB0aGF0IG5nQW5pbWF0ZSBjYW4gZGV0ZWN0IGVhY2ggb2YgdGhlc2UgY2xhc3NlcyB3aGVuIGFkZGVkIGFuZCByZW1vdmVkLlxuICpcbiAqXG4gKiAjIFN1Ym1pdHRpbmcgYSBmb3JtIGFuZCBwcmV2ZW50aW5nIHRoZSBkZWZhdWx0IGFjdGlvblxuICpcbiAqIFNpbmNlIHRoZSByb2xlIG9mIGZvcm1zIGluIGNsaWVudC1zaWRlIEFuZ3VsYXIgYXBwbGljYXRpb25zIGlzIGRpZmZlcmVudCB0aGFuIGluIGNsYXNzaWNhbFxuICogcm91bmR0cmlwIGFwcHMsIGl0IGlzIGRlc2lyYWJsZSBmb3IgdGhlIGJyb3dzZXIgbm90IHRvIHRyYW5zbGF0ZSB0aGUgZm9ybSBzdWJtaXNzaW9uIGludG8gYSBmdWxsXG4gKiBwYWdlIHJlbG9hZCB0aGF0IHNlbmRzIHRoZSBkYXRhIHRvIHRoZSBzZXJ2ZXIuIEluc3RlYWQgc29tZSBqYXZhc2NyaXB0IGxvZ2ljIHNob3VsZCBiZSB0cmlnZ2VyZWRcbiAqIHRvIGhhbmRsZSB0aGUgZm9ybSBzdWJtaXNzaW9uIGluIGFuIGFwcGxpY2F0aW9uLXNwZWNpZmljIHdheS5cbiAqXG4gKiBGb3IgdGhpcyByZWFzb24sIEFuZ3VsYXIgcHJldmVudHMgdGhlIGRlZmF1bHQgYWN0aW9uIChmb3JtIHN1Ym1pc3Npb24gdG8gdGhlIHNlcnZlcikgdW5sZXNzIHRoZVxuICogYDxmb3JtPmAgZWxlbWVudCBoYXMgYW4gYGFjdGlvbmAgYXR0cmlidXRlIHNwZWNpZmllZC5cbiAqXG4gKiBZb3UgY2FuIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyB0d28gd2F5cyB0byBzcGVjaWZ5IHdoYXQgamF2YXNjcmlwdCBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCB3aGVuXG4gKiBhIGZvcm0gaXMgc3VibWl0dGVkOlxuICpcbiAqIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1N1Ym1pdCBuZ1N1Ym1pdH0gZGlyZWN0aXZlIG9uIHRoZSBmb3JtIGVsZW1lbnRcbiAqIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9IGRpcmVjdGl2ZSBvbiB0aGUgZmlyc3RcbiAgKiAgYnV0dG9uIG9yIGlucHV0IGZpZWxkIG9mIHR5cGUgc3VibWl0IChpbnB1dFt0eXBlPXN1Ym1pdF0pXG4gKlxuICogVG8gcHJldmVudCBkb3VibGUgZXhlY3V0aW9uIG9mIHRoZSBoYW5kbGVyLCB1c2Ugb25seSBvbmUgb2YgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdTdWJtaXQgbmdTdWJtaXR9XG4gKiBvciB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30gZGlyZWN0aXZlcy5cbiAqIFRoaXMgaXMgYmVjYXVzZSBvZiB0aGUgZm9sbG93aW5nIGZvcm0gc3VibWlzc2lvbiBydWxlcyBpbiB0aGUgSFRNTCBzcGVjaWZpY2F0aW9uOlxuICpcbiAqIC0gSWYgYSBmb3JtIGhhcyBvbmx5IG9uZSBpbnB1dCBmaWVsZCB0aGVuIGhpdHRpbmcgZW50ZXIgaW4gdGhpcyBmaWVsZCB0cmlnZ2VycyBmb3JtIHN1Ym1pdFxuICogKGBuZ1N1Ym1pdGApXG4gKiAtIGlmIGEgZm9ybSBoYXMgMisgaW5wdXQgZmllbGRzIGFuZCBubyBidXR0b25zIG9yIGlucHV0W3R5cGU9c3VibWl0XSB0aGVuIGhpdHRpbmcgZW50ZXJcbiAqIGRvZXNuJ3QgdHJpZ2dlciBzdWJtaXRcbiAqIC0gaWYgYSBmb3JtIGhhcyBvbmUgb3IgbW9yZSBpbnB1dCBmaWVsZHMgYW5kIG9uZSBvciBtb3JlIGJ1dHRvbnMgb3IgaW5wdXRbdHlwZT1zdWJtaXRdIHRoZW5cbiAqIGhpdHRpbmcgZW50ZXIgaW4gYW55IG9mIHRoZSBpbnB1dCBmaWVsZHMgd2lsbCB0cmlnZ2VyIHRoZSBjbGljayBoYW5kbGVyIG9uIHRoZSAqZmlyc3QqIGJ1dHRvbiBvclxuICogaW5wdXRbdHlwZT1zdWJtaXRdIChgbmdDbGlja2ApICphbmQqIGEgc3VibWl0IGhhbmRsZXIgb24gdGhlIGVuY2xvc2luZyBmb3JtIChgbmdTdWJtaXRgKVxuICpcbiAqIEFueSBwZW5kaW5nIGBuZ01vZGVsT3B0aW9uc2AgY2hhbmdlcyB3aWxsIHRha2UgcGxhY2UgaW1tZWRpYXRlbHkgd2hlbiBhbiBlbmNsb3NpbmcgZm9ybSBpc1xuICogc3VibWl0dGVkLiBOb3RlIHRoYXQgYG5nQ2xpY2tgIGV2ZW50cyB3aWxsIG9jY3VyIGJlZm9yZSB0aGUgbW9kZWwgaXMgdXBkYXRlZC4gVXNlIGBuZ1N1Ym1pdGBcbiAqIHRvIGhhdmUgYWNjZXNzIHRvIHRoZSB1cGRhdGVkIG1vZGVsLlxuICpcbiAqICMjIEFuaW1hdGlvbiBIb29rc1xuICpcbiAqIEFuaW1hdGlvbnMgaW4gbmdGb3JtIGFyZSB0cmlnZ2VyZWQgd2hlbiBhbnkgb2YgdGhlIGFzc29jaWF0ZWQgQ1NTIGNsYXNzZXMgYXJlIGFkZGVkIGFuZCByZW1vdmVkLlxuICogVGhlc2UgY2xhc3NlcyBhcmU6IGAubmctcHJpc3RpbmVgLCBgLm5nLWRpcnR5YCwgYC5uZy1pbnZhbGlkYCBhbmQgYC5uZy12YWxpZGAgYXMgd2VsbCBhcyBhbnlcbiAqIG90aGVyIHZhbGlkYXRpb25zIHRoYXQgYXJlIHBlcmZvcm1lZCB3aXRoaW4gdGhlIGZvcm0uIEFuaW1hdGlvbnMgaW4gbmdGb3JtIGFyZSBzaW1pbGFyIHRvIGhvd1xuICogdGhleSB3b3JrIGluIG5nQ2xhc3MgYW5kIGFuaW1hdGlvbnMgY2FuIGJlIGhvb2tlZCBpbnRvIHVzaW5nIENTUyB0cmFuc2l0aW9ucywga2V5ZnJhbWVzIGFzIHdlbGxcbiAqIGFzIEpTIGFuaW1hdGlvbnMuXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGEgc2ltcGxlIHdheSB0byB1dGlsaXplIENTUyB0cmFuc2l0aW9ucyB0byBzdHlsZSBhIGZvcm0gZWxlbWVudFxuICogdGhhdCBoYXMgYmVlbiByZW5kZXJlZCBhcyBpbnZhbGlkIGFmdGVyIGl0IGhhcyBiZWVuIHZhbGlkYXRlZDpcbiAqXG4gKiA8cHJlPlxuICogLy9iZSBzdXJlIHRvIGluY2x1ZGUgbmdBbmltYXRlIGFzIGEgbW9kdWxlIHRvIGhvb2sgaW50byBtb3JlXG4gKiAvL2FkdmFuY2VkIGFuaW1hdGlvbnNcbiAqIC5teS1mb3JtIHtcbiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XG4gKiAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICogfVxuICogLm15LWZvcm0ubmctaW52YWxpZCB7XG4gKiAgIGJhY2tncm91bmQ6IHJlZDtcbiAqICAgY29sb3I6d2hpdGU7XG4gKiB9XG4gKiA8L3ByZT5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIGZpeEJhc2U9XCJ0cnVlXCIgbW9kdWxlPVwiZm9ybUV4YW1wbGVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdmb3JtRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRm9ybUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS51c2VyVHlwZSA9ICdndWVzdCc7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8c3R5bGU+XG4gICAgICAgIC5teS1mb3JtIHtcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgICAgIHRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIC5teS1mb3JtLm5nLWludmFsaWQge1xuICAgICAgICAgIGJhY2tncm91bmQ6IHJlZDtcbiAgICAgICAgfVxuICAgICAgIDwvc3R5bGU+XG4gICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJGb3JtQ29udHJvbGxlclwiIGNsYXNzPVwibXktZm9ybVwiPlxuICAgICAgICAgdXNlclR5cGU6IDxpbnB1dCBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cInVzZXJUeXBlXCIgcmVxdWlyZWQ+XG4gICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5SZXF1aXJlZCE8L3NwYW4+PGJyPlxuICAgICAgICAgPGNvZGU+dXNlclR5cGUgPSB7e3VzZXJUeXBlfX08L2NvZGU+PGJyPlxuICAgICAgICAgPGNvZGU+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC9jb2RlPjxicj5cbiAgICAgICAgIDxjb2RlPm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvY29kZT48YnI+XG4gICAgICAgICA8Y29kZT5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L2NvZGU+PGJyPlxuICAgICAgICAgPGNvZGU+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L2NvZGU+PGJyPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB1c2VyVHlwZSA9IGVsZW1lbnQoYnkuYmluZGluZygndXNlclR5cGUnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXJUeXBlLmdldFRleHQoKSkudG9Db250YWluKCdndWVzdCcpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdXNlclR5cGUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3VzZXJUeXBlJykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgICB2YXIgdXNlcklucHV0ID0gZWxlbWVudChieS5tb2RlbCgndXNlclR5cGUnKSk7XG5cbiAgICAgICAgICB1c2VySW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICB1c2VySW5wdXQuc2VuZEtleXMoJycpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXJUeXBlLmdldFRleHQoKSkudG9FcXVhbCgndXNlclR5cGUgPScpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBOYW1lIG9mIHRoZSBmb3JtLiBJZiBzcGVjaWZpZWQsIHRoZSBmb3JtIGNvbnRyb2xsZXIgd2lsbCBiZSBwdWJsaXNoZWQgaW50b1xuICogICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWQgc2NvcGUsIHVuZGVyIHRoaXMgbmFtZS5cbiAqL1xudmFyIGZvcm1EaXJlY3RpdmVGYWN0b3J5ID0gZnVuY3Rpb24oaXNOZ0Zvcm0pIHtcbiAgcmV0dXJuIFsnJHRpbWVvdXQnLCBmdW5jdGlvbigkdGltZW91dCkge1xuICAgIHZhciBmb3JtRGlyZWN0aXZlID0ge1xuICAgICAgbmFtZTogJ2Zvcm0nLFxuICAgICAgcmVzdHJpY3Q6IGlzTmdGb3JtID8gJ0VBQycgOiAnRScsXG4gICAgICBjb250cm9sbGVyOiBGb3JtQ29udHJvbGxlcixcbiAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nRm9ybUNvbXBpbGUoZm9ybUVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgLy8gU2V0dXAgaW5pdGlhbCBzdGF0ZSBvZiB0aGUgY29udHJvbFxuICAgICAgICBmb3JtRWxlbWVudC5hZGRDbGFzcyhQUklTVElORV9DTEFTUykuYWRkQ2xhc3MoVkFMSURfQ0xBU1MpO1xuXG4gICAgICAgIHZhciBuYW1lQXR0ciA9IGF0dHIubmFtZSA/ICduYW1lJyA6IChpc05nRm9ybSAmJiBhdHRyLm5nRm9ybSA/ICduZ0Zvcm0nIDogZmFsc2UpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcHJlOiBmdW5jdGlvbiBuZ0Zvcm1QcmVMaW5rKHNjb3BlLCBmb3JtRWxlbWVudCwgYXR0ciwgY29udHJvbGxlcikge1xuICAgICAgICAgICAgLy8gaWYgYGFjdGlvbmAgYXR0ciBpcyBub3QgcHJlc2VudCBvbiB0aGUgZm9ybSwgcHJldmVudCB0aGUgZGVmYXVsdCBhY3Rpb24gKHN1Ym1pc3Npb24pXG4gICAgICAgICAgICBpZiAoISgnYWN0aW9uJyBpbiBhdHRyKSkge1xuICAgICAgICAgICAgICAvLyB3ZSBjYW4ndCB1c2UganEgZXZlbnRzIGJlY2F1c2UgaWYgYSBmb3JtIGlzIGRlc3Ryb3llZCBkdXJpbmcgc3VibWlzc2lvbiB0aGUgZGVmYXVsdFxuICAgICAgICAgICAgICAvLyBhY3Rpb24gaXMgbm90IHByZXZlbnRlZC4gc2VlICMxMjM4XG4gICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgIC8vIElFIDkgaXMgbm90IGFmZmVjdGVkIGJlY2F1c2UgaXQgZG9lc24ndCBmaXJlIGEgc3VibWl0IGV2ZW50IGFuZCB0cnkgdG8gZG8gYSBmdWxsXG4gICAgICAgICAgICAgIC8vIHBhZ2UgcmVsb2FkIGlmIHRoZSBmb3JtIHdhcyBkZXN0cm95ZWQgYnkgc3VibWlzc2lvbiBvZiB0aGUgZm9ybSB2aWEgYSBjbGljayBoYW5kbGVyXG4gICAgICAgICAgICAgIC8vIG9uIGEgYnV0dG9uIGluIHRoZSBmb3JtLiBMb29rcyBsaWtlIGFuIElFOSBzcGVjaWZpYyBidWcuXG4gICAgICAgICAgICAgIHZhciBoYW5kbGVGb3JtU3VibWlzc2lvbiA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgY29udHJvbGxlci4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICBjb250cm9sbGVyLiRzZXRTdWJtaXR0ZWQoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lckZuKGZvcm1FbGVtZW50WzBdLCAnc3VibWl0JywgaGFuZGxlRm9ybVN1Ym1pc3Npb24pO1xuXG4gICAgICAgICAgICAgIC8vIHVucmVnaXN0ZXIgdGhlIHByZXZlbnREZWZhdWx0IGxpc3RlbmVyIHNvIHRoYXQgd2UgZG9uJ3Qgbm90IGxlYWsgbWVtb3J5IGJ1dCBpbiBhXG4gICAgICAgICAgICAgIC8vIHdheSB0aGF0IHdpbGwgYWNoaWV2ZSB0aGUgcHJldmVudGlvbiBvZiB0aGUgZGVmYXVsdCBhY3Rpb24uXG4gICAgICAgICAgICAgIGZvcm1FbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuKGZvcm1FbGVtZW50WzBdLCAnc3VibWl0JywgaGFuZGxlRm9ybVN1Ym1pc3Npb24pO1xuICAgICAgICAgICAgICAgIH0sIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwYXJlbnRGb3JtQ3RybCA9IGNvbnRyb2xsZXIuJCRwYXJlbnRGb3JtO1xuXG4gICAgICAgICAgICBpZiAobmFtZUF0dHIpIHtcbiAgICAgICAgICAgICAgc2V0dGVyKHNjb3BlLCBjb250cm9sbGVyLiRuYW1lLCBjb250cm9sbGVyLCBjb250cm9sbGVyLiRuYW1lKTtcbiAgICAgICAgICAgICAgYXR0ci4kb2JzZXJ2ZShuYW1lQXR0ciwgZnVuY3Rpb24obmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbGxlci4kbmFtZSA9PT0gbmV3VmFsdWUpIHJldHVybjtcbiAgICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIGNvbnRyb2xsZXIuJG5hbWUsIHVuZGVmaW5lZCwgY29udHJvbGxlci4kbmFtZSk7XG4gICAgICAgICAgICAgICAgcGFyZW50Rm9ybUN0cmwuJCRyZW5hbWVDb250cm9sKGNvbnRyb2xsZXIsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIGNvbnRyb2xsZXIuJG5hbWUsIGNvbnRyb2xsZXIsIGNvbnRyb2xsZXIuJG5hbWUpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcm1FbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBwYXJlbnRGb3JtQ3RybC4kcmVtb3ZlQ29udHJvbChjb250cm9sbGVyKTtcbiAgICAgICAgICAgICAgaWYgKG5hbWVBdHRyKSB7XG4gICAgICAgICAgICAgICAgc2V0dGVyKHNjb3BlLCBhdHRyW25hbWVBdHRyXSwgdW5kZWZpbmVkLCBjb250cm9sbGVyLiRuYW1lKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBleHRlbmQoY29udHJvbGxlciwgbnVsbEZvcm1DdHJsKTsgLy9zdG9wIHByb3BhZ2F0aW5nIGNoaWxkIGRlc3RydWN0aW9uIGhhbmRsZXJzIHVwd2FyZHNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcm1EaXJlY3RpdmU7XG4gIH1dO1xufTtcblxudmFyIGZvcm1EaXJlY3RpdmUgPSBmb3JtRGlyZWN0aXZlRmFjdG9yeSgpO1xudmFyIG5nRm9ybURpcmVjdGl2ZSA9IGZvcm1EaXJlY3RpdmVGYWN0b3J5KHRydWUpO1xuXG4vKiBnbG9iYWwgVkFMSURfQ0xBU1M6IGZhbHNlLFxuICBJTlZBTElEX0NMQVNTOiBmYWxzZSxcbiAgUFJJU1RJTkVfQ0xBU1M6IGZhbHNlLFxuICBESVJUWV9DTEFTUzogZmFsc2UsXG4gIFVOVE9VQ0hFRF9DTEFTUzogZmFsc2UsXG4gIFRPVUNIRURfQ0xBU1M6IGZhbHNlLFxuICAkbmdNb2RlbE1pbkVycjogZmFsc2UsXG4qL1xuXG4vLyBSZWdleCBjb2RlIGlzIG9idGFpbmVkIGZyb20gU086IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMxNDMwNzAvamF2YXNjcmlwdC1yZWdleC1pc28tZGF0ZXRpbWUjYW5zd2VyLTMxNDMyMzFcbnZhciBJU09fREFURV9SRUdFWFAgPSAvXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGRcXC5cXGQrKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKS87XG52YXIgVVJMX1JFR0VYUCA9IC9eKGZ0cHxodHRwfGh0dHBzKTpcXC9cXC8oXFx3Kzp7MCwxfVxcdypAKT8oXFxTKykoOlswLTldKyk/KFxcL3xcXC8oW1xcdyMhOi4/Kz0mJUAhXFwtXFwvXSkpPyQvO1xudmFyIEVNQUlMX1JFR0VYUCA9IC9eW2EtejAtOSEjJCUmJyorXFwvPT9eX2B7fH1+Li1dK0BbYS16MC05XShbYS16MC05LV0qW2EtejAtOV0pPyhcXC5bYS16MC05XShbYS16MC05LV0qW2EtejAtOV0pPykqJC9pO1xudmFyIE5VTUJFUl9SRUdFWFAgPSAvXlxccyooXFwtfFxcKyk/KFxcZCt8KFxcZCooXFwuXFxkKikpKShbZUVdWystXT9cXGQrKT9cXHMqJC87XG52YXIgREFURV9SRUdFWFAgPSAvXihcXGR7NH0pLShcXGR7Mn0pLShcXGR7Mn0pJC87XG52YXIgREFURVRJTUVMT0NBTF9SRUdFWFAgPSAvXihcXGR7NH0pLShcXGRcXGQpLShcXGRcXGQpVChcXGRcXGQpOihcXGRcXGQpKD86OihcXGRcXGQpKFxcLlxcZHsxLDN9KT8pPyQvO1xudmFyIFdFRUtfUkVHRVhQID0gL14oXFxkezR9KS1XKFxcZFxcZCkkLztcbnZhciBNT05USF9SRUdFWFAgPSAvXihcXGR7NH0pLShcXGRcXGQpJC87XG52YXIgVElNRV9SRUdFWFAgPSAvXihcXGRcXGQpOihcXGRcXGQpKD86OihcXGRcXGQpKFxcLlxcZHsxLDN9KT8pPyQvO1xuXG52YXIgaW5wdXRUeXBlID0ge1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbdGV4dF1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFN0YW5kYXJkIEhUTUwgdGV4dCBpbnB1dCB3aXRoIGFuZ3VsYXIgZGF0YSBiaW5kaW5nLCBpbmhlcml0ZWQgYnkgbW9zdCBvZiB0aGUgYGlucHV0YCBlbGVtZW50cy5cbiAgICpcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICAgKiAgICBtaW5sZW5ndGguXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAgICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mXG4gICAqICAgIGFueSBsZW5ndGguXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcGF0dGVybiBTaW1pbGFyIHRvIGBuZ1BhdHRlcm5gIGV4Y2VwdCB0aGF0IHRoZSBhdHRyaWJ1dGUgdmFsdWUgaXMgdGhlIGFjdHVhbCBzdHJpbmdcbiAgICogICAgdGhhdCBjb250YWlucyB0aGUgcmVndWxhciBleHByZXNzaW9uIGJvZHkgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgKiAgICBhcyBpbiB0aGUgbmdQYXR0ZXJuIGRpcmVjdGl2ZS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIG5nTW9kZWwgdmFsdWUgZG9lcyBub3QgbWF0Y2hcbiAgICogICAgYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAgICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAgICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICAgKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICAgKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICAgKiAgICBhY2NvdW50LlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICogQHBhcmFtIHtib29sZWFuPX0gW25nVHJpbT10cnVlXSBJZiBzZXQgdG8gZmFsc2UgQW5ndWxhciB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHRyaW0gdGhlIGlucHV0LlxuICAgKiAgICBUaGlzIHBhcmFtZXRlciBpcyBpZ25vcmVkIGZvciBpbnB1dFt0eXBlPXBhc3N3b3JkXSBjb250cm9scywgd2hpY2ggd2lsbCBuZXZlciB0cmltIHRoZVxuICAgKiAgICBpbnB1dC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJ0ZXh0LWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cInRleHRJbnB1dEV4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd0ZXh0SW5wdXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5leGFtcGxlID0ge1xuICAgICAgICAgICAgICAgICB0ZXh0OiAnZ3Vlc3QnLFxuICAgICAgICAgICAgICAgICB3b3JkOiAvXlxccypcXHcqXFxzKiQvXG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICA8bGFiZWw+U2luZ2xlIHdvcmQ6XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnRleHRcIlxuICAgICAgICAgICAgICAgICAgICBuZy1wYXR0ZXJuPVwiZXhhbXBsZS53b3JkXCIgcmVxdWlyZWQgbmctdHJpbT1cImZhbHNlXCI+XG4gICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnBhdHRlcm5cIj5cbiAgICAgICAgICAgICAgIFNpbmdsZSB3b3JkIG9ubHkhPC9zcGFuPlxuICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgPHR0PnRleHQgPSB7e2V4YW1wbGUudGV4dH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgICB2YXIgdGV4dCA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS50ZXh0JykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdleGFtcGxlLnRleHQnKSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9Db250YWluKCdndWVzdCcpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9FcXVhbCgndGV4dCA9Jyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbXVsdGkgd29yZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCdoZWxsbyB3b3JsZCcpO1xuXG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICovXG4gICd0ZXh0JzogdGV4dElucHV0VHlwZSxcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBpbnB1dFxuICAgICAqIEBuYW1lIGlucHV0W2RhdGVdXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBJbnB1dCB3aXRoIGRhdGUgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0XG4gICAgICogdGhlIEhUTUw1IGRhdGUgaW5wdXQsIGEgdGV4dCBlbGVtZW50IHdpbGwgYmUgdXNlZC4gSW4gdGhhdCBjYXNlLCB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAgICogZGF0ZSBmb3JtYXQgKHl5eXktTU0tZGQpLCBmb3IgZXhhbXBsZTogYDIwMDktMDEtMDZgLiBTaW5jZSBtYW55XG4gICAgICogbW9kZXJuIGJyb3dzZXJzIGRvIG5vdCB5ZXQgc3VwcG9ydCB0aGlzIGlucHV0IHR5cGUsIGl0IGlzIGltcG9ydGFudCB0byBwcm92aWRlIGN1ZXMgdG8gdXNlcnMgb24gdGhlXG4gICAgICogZXhwZWN0ZWQgaW5wdXQgZm9ybWF0IHZpYSBhIHBsYWNlaG9sZGVyIG9yIGxhYmVsLlxuICAgICAqXG4gICAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QsIG90aGVyd2lzZSBBbmd1bGFyIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogVGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBjYW4gYmUgZGVmaW5lZCB1c2luZ1xuICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLiBUaGlzIG11c3QgYmUgYVxuICAgICAqIHZhbGlkIElTTyBkYXRlIHN0cmluZyAoeXl5eS1NTS1kZCkuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLiBUaGlzIG11c3QgYmVcbiAgICAgKiBhIHZhbGlkIElTTyBkYXRlIHN0cmluZyAoeXl5eS1NTS1kZCkuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG5hbWU9XCJkYXRlLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImRhdGVJbnB1dEV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdkYXRlSW5wdXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAuY29udHJvbGxlcignRGF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMjAxMywgOSwgMjIpXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybFwiPlxuICAgICAgICAgIDxsYWJlbCBmb3I9XCJleGFtcGxlSW5wdXRcIj5QaWNrIGEgZGF0ZSBpbiAyMDEzOjwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJkYXRlXCIgaWQ9XCJleGFtcGxlSW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cInl5eXktTU0tZGRcIiBtaW49XCIyMDEzLTAxLTAxXCIgbWF4PVwiMjAxMy0xMi0zMVwiIHJlcXVpcmVkIC8+XG4gICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5kYXRlXCI+XG4gICAgICAgICAgICAgICAgTm90IGEgdmFsaWQgZGF0ZSE8L3NwYW4+XG4gICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU0tZGRcIn19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICAgPC9mb3JtPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NLWRkXCInKSk7XG4gICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnZXhhbXBsZS52YWx1ZScpKTtcblxuICAgICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAgIC8vIGZvciB2YXJpb3VzIGJyb3dzZXJzIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgICAgZnVuY3Rpb24gc2V0SW5wdXQodmFsKSB7XG4gICAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgICAgXCJpcHQudmFsdWUgPSAnXCIgKyB2YWwgKyBcIic7XCIgK1xuICAgICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMy0xMC0yMicpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2V0SW5wdXQoJycpO1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMS0wMScpO1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgICAqL1xuICAnZGF0ZSc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ2RhdGUnLCBEQVRFX1JFR0VYUCxcbiAgICAgICAgIGNyZWF0ZURhdGVQYXJzZXIoREFURV9SRUdFWFAsIFsneXl5eScsICdNTScsICdkZCddKSxcbiAgICAgICAgICd5eXl5LU1NLWRkJyksXG5cbiAgIC8qKlxuICAgICogQG5nZG9jIGlucHV0XG4gICAgKiBAbmFtZSBpbnB1dFtkYXRldGltZS1sb2NhbF1cbiAgICAqXG4gICAgKiBAZGVzY3JpcHRpb25cbiAgICAqIElucHV0IHdpdGggZGF0ZXRpbWUgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0XG4gICAgKiB0aGUgSFRNTDUgZGF0ZSBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAgKiBsb2NhbCBkYXRldGltZSBmb3JtYXQgKHl5eXktTU0tZGRUSEg6bW06c3MpLCBmb3IgZXhhbXBsZTogYDIwMTAtMTItMjhUMTQ6NTc6MDBgLlxuICAgICpcbiAgICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICpcbiAgICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICAqXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuIFRoaXMgbXVzdCBiZSBhXG4gICAgKiB2YWxpZCBJU08gZGF0ZXRpbWUgZm9ybWF0ICh5eXl5LU1NLWRkVEhIOm1tOnNzKS5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC4gVGhpcyBtdXN0IGJlXG4gICAgKiBhIHZhbGlkIElTTyBkYXRldGltZSBmb3JtYXQgKHl5eXktTU0tZGRUSEg6bW06c3MpLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAgKlxuICAgICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwiZGF0ZXRpbWVsb2NhbC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJkYXRlRXhhbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8c2NyaXB0PlxuICAgICAgICBhbmd1bGFyLm1vZHVsZSgnZGF0ZUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAuY29udHJvbGxlcignRGF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZSgyMDEwLCAxMSwgMjgsIDE0LCA1NylcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfV0pO1xuICAgICAgPC9zY3JpcHQ+XG4gICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkRhdGVDb250cm9sbGVyIGFzIGRhdGVDdHJsXCI+XG4gICAgICAgIDxsYWJlbCBmb3I9XCJleGFtcGxlSW5wdXRcIj5QaWNrIGEgZGF0ZSBiZXR3ZWVuIGluIDIwMTM6PC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIGlkPVwiZXhhbXBsZUlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnZhbHVlXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwieXl5eS1NTS1kZFRISDptbTpzc1wiIG1pbj1cIjIwMDEtMDEtMDFUMDA6MDA6MDBcIiBtYXg9XCIyMDEzLTEyLTMxVDAwOjAwOjAwXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5kYXRldGltZWxvY2FsXCI+XG4gICAgICAgICAgICAgIE5vdCBhIHZhbGlkIGRhdGUhPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NLWRkVEhIOm1tOnNzXCJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgPC9mb3JtPlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU0tZGRUSEg6bW06c3NcIicpKTtcbiAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2V4YW1wbGUudmFsdWUnKSk7XG5cbiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLlxuICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgXCJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCdcIiArIHZhbCArIFwiJyk7IH0pO1wiO1xuICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgIH1cblxuICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMC0xMi0yOFQxNDo1NzowMCcpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMS0wMVQyMzo1OTowMCcpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAgICAqL1xuICAnZGF0ZXRpbWUtbG9jYWwnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCdkYXRldGltZWxvY2FsJywgREFURVRJTUVMT0NBTF9SRUdFWFAsXG4gICAgICBjcmVhdGVEYXRlUGFyc2VyKERBVEVUSU1FTE9DQUxfUkVHRVhQLCBbJ3l5eXknLCAnTU0nLCAnZGQnLCAnSEgnLCAnbW0nLCAnc3MnLCAnc3NzJ10pLFxuICAgICAgJ3l5eXktTU0tZGRUSEg6bW06c3Muc3NzJyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFt0aW1lXVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSW5wdXQgd2l0aCB0aW1lIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgKiB0aGUgSFRNTDUgZGF0ZSBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAqIGxvY2FsIHRpbWUgZm9ybWF0IChISDptbTpzcyksIGZvciBleGFtcGxlOiBgMTQ6NTc6MDBgLiBNb2RlbCBtdXN0IGJlIGEgRGF0ZSBvYmplY3QuIFRoaXMgYmluZGluZyB3aWxsIGFsd2F5cyBvdXRwdXQgYVxuICAgKiBEYXRlIG9iamVjdCB0byB0aGUgbW9kZWwgb2YgSmFudWFyeSAxLCAxOTcwLCBvciBsb2NhbCBkYXRlIGBuZXcgRGF0ZSgxOTcwLCAwLCAxLCBISCwgbW0sIHNzKWAuXG4gICAqXG4gICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAqXG4gICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLiBUaGlzIG11c3QgYmUgYVxuICAgKiB2YWxpZCBJU08gdGltZSBmb3JtYXQgKEhIOm1tOnNzKS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLiBUaGlzIG11c3QgYmUgYVxuICAgKiB2YWxpZCBJU08gdGltZSBmb3JtYXQgKEhIOm1tOnNzKS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cInRpbWUtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwidGltZUV4YW1wbGVcIj5cbiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgIDxzY3JpcHQ+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgndGltZUV4YW1wbGUnLCBbXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZSgxOTcwLCAwLCAxLCAxNCwgNTcsIDApXG4gICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuICAgICA8L3NjcmlwdD5cbiAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybFwiPlxuICAgICAgICA8bGFiZWwgZm9yPVwiZXhhbXBsZUlucHV0XCI+UGljayBhIGJldHdlZW4gOGFtIGFuZCA1cG06PC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0aW1lXCIgaWQ9XCJleGFtcGxlSW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJISDptbTpzc1wiIG1pbj1cIjA4OjAwOjAwXCIgbWF4PVwiMTc6MDA6MDBcIiByZXF1aXJlZCAvPlxuICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnRpbWVcIj5cbiAgICAgICAgICAgICAgTm90IGEgdmFsaWQgZGF0ZSE8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcIkhIOm1tOnNzXCJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICA8L2Zvcm0+XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcIkhIOm1tOnNzXCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdleGFtcGxlLnZhbHVlJykpO1xuXG4gICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHtcbiAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICBcImlwdC52YWx1ZSA9ICdcIiArIHZhbCArIFwiJztcIiArXG4gICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICB9XG5cbiAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzE0OjU3OjAwJyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJycpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcyMzo1OTowMCcpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG4gICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gICAqL1xuICAndGltZSc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ3RpbWUnLCBUSU1FX1JFR0VYUCxcbiAgICAgIGNyZWF0ZURhdGVQYXJzZXIoVElNRV9SRUdFWFAsIFsnSEgnLCAnbW0nLCAnc3MnLCAnc3NzJ10pLFxuICAgICAnSEg6bW06c3Muc3NzJyksXG5cbiAgIC8qKlxuICAgICogQG5nZG9jIGlucHV0XG4gICAgKiBAbmFtZSBpbnB1dFt3ZWVrXVxuICAgICpcbiAgICAqIEBkZXNjcmlwdGlvblxuICAgICogSW5wdXQgd2l0aCB3ZWVrLW9mLXRoZS15ZWFyIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uIHRvIERhdGUuIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0XG4gICAgKiB0aGUgSFRNTDUgd2VlayBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAgKiB3ZWVrIGZvcm1hdCAoeXl5eS1XIyMpLCBmb3IgZXhhbXBsZTogYDIwMTMtVzAyYC5cbiAgICAqXG4gICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgYSBEYXRlIG9iamVjdCwgb3RoZXJ3aXNlIEFuZ3VsYXIgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICAqIEludmFsaWQgYERhdGVgIG9iamVjdHMgKGRhdGVzIHdob3NlIGBnZXRUaW1lKClgIGlzIGBOYU5gKSB3aWxsIGJlIHJlbmRlcmVkIGFzIGFuIGVtcHR5IHN0cmluZy5cbiAgICAqXG4gICAgKiBUaGUgdGltZXpvbmUgdG8gYmUgdXNlZCB0byByZWFkL3dyaXRlIHRoZSBgRGF0ZWAgaW5zdGFuY2UgaW4gdGhlIG1vZGVsIGNhbiBiZSBkZWZpbmVkIHVzaW5nXG4gICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfS4gQnkgZGVmYXVsdCwgdGhpcyBpcyB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIuXG4gICAgKlxuICAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLiBUaGlzIG11c3QgYmUgYVxuICAgICogdmFsaWQgSVNPIHdlZWsgZm9ybWF0ICh5eXl5LVcjIykuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuIFRoaXMgbXVzdCBiZVxuICAgICogYSB2YWxpZCBJU08gd2VlayBmb3JtYXQgKHl5eXktVyMjKS5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgICpcbiAgICAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cIndlZWstaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwid2Vla0V4YW1wbGVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPHNjcmlwdD5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCd3ZWVrRXhhbXBsZScsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignRGF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS5leGFtcGxlID0ge1xuICAgICAgICAgICAgdmFsdWU6IG5ldyBEYXRlKDIwMTMsIDAsIDMpXG4gICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuICAgICAgPC9zY3JpcHQ+XG4gICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkRhdGVDb250cm9sbGVyIGFzIGRhdGVDdHJsXCI+XG4gICAgICAgIDxsYWJlbD5QaWNrIGEgZGF0ZSBiZXR3ZWVuIGluIDIwMTM6XG4gICAgICAgICAgPGlucHV0IGlkPVwiZXhhbXBsZUlucHV0XCIgdHlwZT1cIndlZWtcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIllZWVktVyMjXCIgbWluPVwiMjAxMi1XMzJcIlxuICAgICAgICAgICAgICAgICBtYXg9XCIyMDEzLVc1MlwiIHJlcXVpcmVkIC8+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3Iud2Vla1wiPlxuICAgICAgICAgICAgICBOb3QgYSB2YWxpZCBkYXRlITwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDx0dD52YWx1ZSA9IHt7ZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1Xd3dcIn19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICA8L2Zvcm0+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1Xd3dcIicpKTtcbiAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2V4YW1wbGUudmFsdWUnKSk7XG5cbiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLlxuICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgXCJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCdcIiArIHZhbCArIFwiJyk7IH0pO1wiO1xuICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgIH1cblxuICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMy1XMDEnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gdHJ1ZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnJyk7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJzIwMTUtVzAxJyk7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICAgICovXG4gICd3ZWVrJzogY3JlYXRlRGF0ZUlucHV0VHlwZSgnd2VlaycsIFdFRUtfUkVHRVhQLCB3ZWVrUGFyc2VyLCAneXl5eS1Xd3cnKSxcblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W21vbnRoXVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSW5wdXQgd2l0aCBtb250aCB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbi4gSW4gYnJvd3NlcnMgdGhhdCBkbyBub3QgeWV0IHN1cHBvcnRcbiAgICogdGhlIEhUTUw1IG1vbnRoIGlucHV0LCBhIHRleHQgZWxlbWVudCB3aWxsIGJlIHVzZWQuIEluIHRoYXQgY2FzZSwgdGhlIHRleHQgbXVzdCBiZSBlbnRlcmVkIGluIGEgdmFsaWQgSVNPLTg2MDFcbiAgICogbW9udGggZm9ybWF0ICh5eXl5LU1NKSwgZm9yIGV4YW1wbGU6IGAyMDA5LTAxYC5cbiAgICpcbiAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QsIG90aGVyd2lzZSBBbmd1bGFyIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAqIEludmFsaWQgYERhdGVgIG9iamVjdHMgKGRhdGVzIHdob3NlIGBnZXRUaW1lKClgIGlzIGBOYU5gKSB3aWxsIGJlIHJlbmRlcmVkIGFzIGFuIGVtcHR5IHN0cmluZy5cbiAgICogSWYgdGhlIG1vZGVsIGlzIG5vdCBzZXQgdG8gdGhlIGZpcnN0IG9mIHRoZSBtb250aCwgdGhlIG5leHQgdmlldyB0byBtb2RlbCB1cGRhdGUgd2lsbCBzZXQgaXRcbiAgICogdG8gdGhlIGZpcnN0IG9mIHRoZSBtb250aC5cbiAgICpcbiAgICogVGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBjYW4gYmUgZGVmaW5lZCB1c2luZ1xuICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfS4gQnkgZGVmYXVsdCwgdGhpcyBpcyB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuIFRoaXMgbXVzdCBiZVxuICAgKiBhIHZhbGlkIElTTyBtb250aCBmb3JtYXQgKHl5eXktTU0pLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuIFRoaXMgbXVzdFxuICAgKiBiZSBhIHZhbGlkIElTTyBtb250aCBmb3JtYXQgKHl5eXktTU0pLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwibW9udGgtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwibW9udGhFeGFtcGxlXCI+XG4gICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICA8c2NyaXB0PlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ21vbnRoRXhhbXBsZScsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignRGF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS5leGFtcGxlID0ge1xuICAgICAgICAgICAgdmFsdWU6IG5ldyBEYXRlKDIwMTMsIDksIDEpXG4gICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuICAgICA8L3NjcmlwdD5cbiAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybFwiPlxuICAgICAgIDxsYWJlbCBmb3I9XCJleGFtcGxlSW5wdXRcIj5QaWNrIGEgbW9udGggaW4gMjAxMzo8L2xhYmVsPlxuICAgICAgIDxpbnB1dCBpZD1cImV4YW1wbGVJbnB1dFwiIHR5cGU9XCJtb250aFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS52YWx1ZVwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJ5eXl5LU1NXCIgbWluPVwiMjAxMy0wMVwiIG1heD1cIjIwMTMtMTJcIiByZXF1aXJlZCAvPlxuICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5tb250aFwiPlxuICAgICAgICAgICAgTm90IGEgdmFsaWQgbW9udGghPC9zcGFuPlxuICAgICAgIDwvZGl2PlxuICAgICAgIDx0dD52YWx1ZSA9IHt7ZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1NTVwifX08L3R0Pjxici8+XG4gICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICA8L2Zvcm0+XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU1cIicpKTtcbiAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2V4YW1wbGUudmFsdWUnKSk7XG5cbiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLlxuICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgXCJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCdcIiArIHZhbCArIFwiJyk7IH0pO1wiO1xuICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgIH1cblxuICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMy0xMCcpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMScpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG4gICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gICAqL1xuICAnbW9udGgnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCdtb250aCcsIE1PTlRIX1JFR0VYUCxcbiAgICAgY3JlYXRlRGF0ZVBhcnNlcihNT05USF9SRUdFWFAsIFsneXl5eScsICdNTSddKSxcbiAgICAgJ3l5eXktTU0nKSxcblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W251bWJlcl1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRleHQgaW5wdXQgd2l0aCBudW1iZXIgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIFNldHMgdGhlIGBudW1iZXJgIHZhbGlkYXRpb25cbiAgICogZXJyb3IgaWYgbm90IGEgdmFsaWQgbnVtYmVyLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgb2YgdHlwZSBgbnVtYmVyYCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgKiBCZSBhd2FyZSB0aGF0IGEgc3RyaW5nIGNvbnRhaW5pbmcgYSBudW1iZXIgaXMgbm90IGVub3VnaC4gU2VlIHRoZSB7QGxpbmsgbmdNb2RlbDpudW1mbXR9XG4gICAqIGVycm9yIGRvY3MgZm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIGFuIGV4YW1wbGUgb2YgaG93IHRvIGNvbnZlcnQgeW91ciBtb2RlbCBpZiBuZWNlc3NhcnkuXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiAjIyBJc3N1ZXMgd2l0aCBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb25cbiAgICpcbiAgICogSW4gYnJvd3NlcnMgdGhhdCBmb2xsb3cgdGhlXG4gICAqIFtIVE1MNSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI251bWJlci1zdGF0ZS0lMjh0eXBlPW51bWJlciUyOSksXG4gICAqIGBpbnB1dFtudW1iZXJdYCBkb2VzIG5vdCB3b3JrIGFzIGV4cGVjdGVkIHdpdGgge0BsaW5rIG5nTW9kZWxPcHRpb25zIGBuZ01vZGVsT3B0aW9ucy5hbGxvd0ludmFsaWRgfS5cbiAgICogSWYgYSBub24tbnVtYmVyIGlzIGVudGVyZWQgaW4gdGhlIGlucHV0LCB0aGUgYnJvd3NlciB3aWxsIHJlcG9ydCB0aGUgdmFsdWUgYXMgYW4gZW1wdHkgc3RyaW5nLFxuICAgKiB3aGljaCBtZWFucyB0aGUgdmlldyAvIG1vZGVsIHZhbHVlcyBpbiBgbmdNb2RlbGAgYW5kIHN1YnNlcXVlbnRseSB0aGUgc2NvcGUgdmFsdWVcbiAgICogd2lsbCBhbHNvIGJlIGFuIGVtcHR5IHN0cmluZy5cbiAgICpcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW5cbiAgICogICAgbWlubGVuZ3RoLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gICAqICAgIG1heGxlbmd0aC4gU2V0dGluZyB0aGUgYXR0cmlidXRlIHRvIGEgbmVnYXRpdmUgb3Igbm9uLW51bWVyaWMgdmFsdWUsIGFsbG93cyB2aWV3IHZhbHVlcyBvZlxuICAgKiAgICBhbnkgbGVuZ3RoLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHBhdHRlcm4gU2ltaWxhciB0byBgbmdQYXR0ZXJuYCBleGNlcHQgdGhhdCB0aGUgYXR0cmlidXRlIHZhbHVlIGlzIHRoZSBhY3R1YWwgc3RyaW5nXG4gICAqICAgIHRoYXQgY29udGFpbnMgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBib2R5IHRoYXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSByZWd1bGFyIGV4cHJlc3Npb25cbiAgICogICAgYXMgaW4gdGhlIG5nUGF0dGVybiBkaXJlY3RpdmUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHZhbHVlIGRvZXMgbm90IG1hdGNoXG4gICAqICAgIGEgUmVnRXhwIGZvdW5kIGJ5IGV2YWx1YXRpbmcgdGhlIEFuZ3VsYXIgZXhwcmVzc2lvbiBnaXZlbiBpbiB0aGUgYXR0cmlidXRlIHZhbHVlLlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBSZWdFeHAgb2JqZWN0LCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGVuIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgUmVnRXhwXG4gICAqICAgIGFmdGVyIHdyYXBwaW5nIGl0IGluIGBeYCBhbmQgYCRgIGNoYXJhY3RlcnMuIEZvciBpbnN0YW5jZSwgYFwiYWJjXCJgIHdpbGwgYmUgY29udmVydGVkIHRvXG4gICAqICAgIGBuZXcgUmVnRXhwKCdeYWJjJCcpYC48YnIgLz5cbiAgICogICAgKipOb3RlOioqIEF2b2lkIHVzaW5nIHRoZSBgZ2AgZmxhZyBvbiB0aGUgUmVnRXhwLCBhcyBpdCB3aWxsIGNhdXNlIGVhY2ggc3VjY2Vzc2l2ZSBzZWFyY2ggdG9cbiAgICogICAgc3RhcnQgYXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHNlYXJjaCdzIG1hdGNoLCB0aHVzIG5vdCB0YWtpbmcgdGhlIHdob2xlIGlucHV0IHZhbHVlIGludG9cbiAgICogICAgYWNjb3VudC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwibnVtYmVyLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cIm51bWJlckV4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdudW1iZXJFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5leGFtcGxlID0ge1xuICAgICAgICAgICAgICAgICB2YWx1ZTogMTJcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxsYWJlbD5OdW1iZXI6XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgICAgICAgICAgICBtaW49XCIwXCIgbWF4PVwiOTlcIiByZXF1aXJlZD5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5udW1iZXJcIj5cbiAgICAgICAgICAgICAgIE5vdCB2YWxpZCBudW1iZXIhPC9zcGFuPlxuICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS52YWx1ZScpKTtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnZXhhbXBsZS52YWx1ZScpKTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcxMicpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnMTIzJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICovXG4gICdudW1iZXInOiBudW1iZXJJbnB1dFR5cGUsXG5cblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W3VybF1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRleHQgaW5wdXQgd2l0aCBVUkwgdmFsaWRhdGlvbi4gU2V0cyB0aGUgYHVybGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIGNvbnRlbnQgaXMgbm90IGFcbiAgICogdmFsaWQgVVJMLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAqKk5vdGU6KiogYGlucHV0W3VybF1gIHVzZXMgYSByZWdleCB0byB2YWxpZGF0ZSB1cmxzIHRoYXQgaXMgZGVyaXZlZCBmcm9tIHRoZSByZWdleFxuICAgKiB1c2VkIGluIENocm9taXVtLiBJZiB5b3UgbmVlZCBzdHJpY3RlciB2YWxpZGF0aW9uLCB5b3UgY2FuIHVzZSBgbmctcGF0dGVybmAgb3IgbW9kaWZ5XG4gICAqIHRoZSBidWlsdC1pbiB2YWxpZGF0b3JzIChzZWUgdGhlIHtAbGluayBndWlkZS9mb3JtcyBGb3JtcyBndWlkZX0pXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gICAqICAgIG1pbmxlbmd0aC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICAgKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2ZcbiAgICogICAgYW55IGxlbmd0aC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXR0ZXJuIFNpbWlsYXIgdG8gYG5nUGF0dGVybmAgZXhjZXB0IHRoYXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpcyB0aGUgYWN0dWFsIHN0cmluZ1xuICAgKiAgICB0aGF0IGNvbnRhaW5zIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYm9keSB0aGF0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgcmVndWxhciBleHByZXNzaW9uXG4gICAqICAgIGFzIGluIHRoZSBuZ1BhdHRlcm4gZGlyZWN0aXZlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB2YWx1ZSBkb2VzIG5vdCBtYXRjaFxuICAgKiAgICBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cFxuICAgKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICAgKiAgICBgbmV3IFJlZ0V4cCgnXmFiYyQnKWAuPGJyIC8+XG4gICAqICAgICoqTm90ZToqKiBBdm9pZCB1c2luZyB0aGUgYGdgIGZsYWcgb24gdGhlIFJlZ0V4cCwgYXMgaXQgd2lsbCBjYXVzZSBlYWNoIHN1Y2Nlc3NpdmUgc2VhcmNoIHRvXG4gICAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gICAqICAgIGFjY291bnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cInVybC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJ1cmxFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgndXJsRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUudXJsID0ge1xuICAgICAgICAgICAgICAgICB0ZXh0OiAnaHR0cDovL2dvb2dsZS5jb20nXG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICA8bGFiZWw+VVJMOlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidXJsXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJ1cmwudGV4dFwiIHJlcXVpcmVkPlxuICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnVybFwiPlxuICAgICAgICAgICAgICAgTm90IHZhbGlkIHVybCE8L3NwYW4+XG4gICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICA8dHQ+dGV4dCA9IHt7dXJsLnRleHR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci51cmwgPSB7eyEhbXlGb3JtLiRlcnJvci51cmx9fTwvdHQ+PGJyLz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIHZhciB0ZXh0ID0gZWxlbWVudChieS5iaW5kaW5nKCd1cmwudGV4dCcpKTtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgndXJsLnRleHQnKSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9Db250YWluKCdodHRwOi8vZ29vZ2xlLmNvbScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9FcXVhbCgndGV4dCA9Jyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbm90IHVybCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCdib3gnKTtcblxuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAndXJsJzogdXJsSW5wdXRUeXBlLFxuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFtlbWFpbF1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRleHQgaW5wdXQgd2l0aCBlbWFpbCB2YWxpZGF0aW9uLiBTZXRzIHRoZSBgZW1haWxgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIG5vdCBhIHZhbGlkIGVtYWlsXG4gICAqIGFkZHJlc3MuXG4gICAqXG4gICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAqICoqTm90ZToqKiBgaW5wdXRbZW1haWxdYCB1c2VzIGEgcmVnZXggdG8gdmFsaWRhdGUgZW1haWwgYWRkcmVzc2VzIHRoYXQgaXMgZGVyaXZlZCBmcm9tIHRoZSByZWdleFxuICAgKiB1c2VkIGluIENocm9taXVtLiBJZiB5b3UgbmVlZCBzdHJpY3RlciB2YWxpZGF0aW9uIChlLmcuIHJlcXVpcmluZyBhIHRvcC1sZXZlbCBkb21haW4pLCB5b3UgY2FuXG4gICAqIHVzZSBgbmctcGF0dGVybmAgb3IgbW9kaWZ5IHRoZSBidWlsdC1pbiB2YWxpZGF0b3JzIChzZWUgdGhlIHtAbGluayBndWlkZS9mb3JtcyBGb3JtcyBndWlkZX0pXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gICAqICAgIG1pbmxlbmd0aC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICAgKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2ZcbiAgICogICAgYW55IGxlbmd0aC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXR0ZXJuIFNpbWlsYXIgdG8gYG5nUGF0dGVybmAgZXhjZXB0IHRoYXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpcyB0aGUgYWN0dWFsIHN0cmluZ1xuICAgKiAgICB0aGF0IGNvbnRhaW5zIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYm9keSB0aGF0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgcmVndWxhciBleHByZXNzaW9uXG4gICAqICAgIGFzIGluIHRoZSBuZ1BhdHRlcm4gZGlyZWN0aXZlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB2YWx1ZSBkb2VzIG5vdCBtYXRjaFxuICAgKiAgICBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cFxuICAgKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICAgKiAgICBgbmV3IFJlZ0V4cCgnXmFiYyQnKWAuPGJyIC8+XG4gICAqICAgICoqTm90ZToqKiBBdm9pZCB1c2luZyB0aGUgYGdgIGZsYWcgb24gdGhlIFJlZ0V4cCwgYXMgaXQgd2lsbCBjYXVzZSBlYWNoIHN1Y2Nlc3NpdmUgc2VhcmNoIHRvXG4gICAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gICAqICAgIGFjY291bnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cImVtYWlsLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImVtYWlsRXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2VtYWlsRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUuZW1haWwgPSB7XG4gICAgICAgICAgICAgICAgIHRleHQ6ICdtZUBleGFtcGxlLmNvbSdcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgICA8bGFiZWw+RW1haWw6XG4gICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImVtYWlsXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJlbWFpbC50ZXh0XCIgcmVxdWlyZWQ+XG4gICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5lbWFpbFwiPlxuICAgICAgICAgICAgICAgICBOb3QgdmFsaWQgZW1haWwhPC9zcGFuPlxuICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgIDx0dD50ZXh0ID0ge3tlbWFpbC50ZXh0fX08L3R0Pjxici8+XG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLmVtYWlsID0ge3shIW15Rm9ybS4kZXJyb3IuZW1haWx9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgdmFyIHRleHQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2VtYWlsLnRleHQnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2VtYWlsLnRleHQnKSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9Db250YWluKCdtZUBleGFtcGxlLmNvbScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7XG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG5vdCBlbWFpbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCd4eHgnKTtcblxuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAnZW1haWwnOiBlbWFpbElucHV0VHlwZSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbcmFkaW9dXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBIVE1MIHJhZGlvIGJ1dHRvbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBgbmdNb2RlbGAgZXhwcmVzc2lvbiBzaG91bGQgYmUgc2V0IHdoZW4gc2VsZWN0ZWQuXG4gICAqICAgIE5vdGUgdGhhdCBgdmFsdWVgIG9ubHkgc3VwcG9ydHMgYHN0cmluZ2AgdmFsdWVzLCBpLmUuIHRoZSBzY29wZSBtb2RlbCBuZWVkcyB0byBiZSBhIHN0cmluZyxcbiAgICogICAgdG9vLiBVc2UgYG5nVmFsdWVgIGlmIHlvdSBuZWVkIGNvbXBsZXggbW9kZWxzIChgbnVtYmVyYCwgYG9iamVjdGAsIC4uLikuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ1ZhbHVlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byB3aGljaCBgbmdNb2RlbGAgd2lsbCBiZSBiZSBzZXQgd2hlbiB0aGUgcmFkaW9cbiAgICogICAgaXMgc2VsZWN0ZWQuIFNob3VsZCBiZSB1c2VkIGluc3RlYWQgb2YgdGhlIGB2YWx1ZWAgYXR0cmlidXRlIGlmIHlvdSBuZWVkXG4gICAqICAgIGEgbm9uLXN0cmluZyBgbmdNb2RlbGAgKGBib29sZWFuYCwgYGFycmF5YCwgLi4uKS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJyYWRpby1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJyYWRpb0V4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdyYWRpb0V4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmNvbG9yID0ge1xuICAgICAgICAgICAgICAgICBuYW1lOiAnYmx1ZSdcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAkc2NvcGUuc3BlY2lhbFZhbHVlID0ge1xuICAgICAgICAgICAgICAgICBcImlkXCI6IFwiMTIzNDVcIixcbiAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcImdyZWVuXCJcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmctbW9kZWw9XCJjb2xvci5uYW1lXCIgdmFsdWU9XCJyZWRcIj5cbiAgICAgICAgICAgICBSZWRcbiAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwiY29sb3IubmFtZVwiIG5nLXZhbHVlPVwic3BlY2lhbFZhbHVlXCI+XG4gICAgICAgICAgICAgR3JlZW5cbiAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwiY29sb3IubmFtZVwiIHZhbHVlPVwiYmx1ZVwiPlxuICAgICAgICAgICAgIEJsdWVcbiAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgICA8dHQ+Y29sb3IgPSB7e2NvbG9yLm5hbWUgfCBqc29ufX08L3R0Pjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgIE5vdGUgdGhhdCBgbmctdmFsdWU9XCJzcGVjaWFsVmFsdWVcImAgc2V0cyByYWRpbyBpdGVtJ3MgdmFsdWUgdG8gYmUgdGhlIHZhbHVlIG9mIGAkc2NvcGUuc3BlY2lhbFZhbHVlYC5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2Ugc3RhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjb2xvciA9IGVsZW1lbnQoYnkuYmluZGluZygnY29sb3IubmFtZScpKTtcblxuICAgICAgICAgICAgZXhwZWN0KGNvbG9yLmdldFRleHQoKSkudG9Db250YWluKCdibHVlJyk7XG5cbiAgICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5Lm1vZGVsKCdjb2xvci5uYW1lJykpLmdldCgwKS5jbGljaygpO1xuXG4gICAgICAgICAgICBleHBlY3QoY29sb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3JlZCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAncmFkaW8nOiByYWRpb0lucHV0VHlwZSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbY2hlY2tib3hdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBIVE1MIGNoZWNrYm94LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtleHByZXNzaW9uPX0gbmdUcnVlVmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBzZXQgd2hlbiBzZWxlY3RlZC5cbiAgICogQHBhcmFtIHtleHByZXNzaW9uPX0gbmdGYWxzZVZhbHVlIFRoZSB2YWx1ZSB0byB3aGljaCB0aGUgZXhwcmVzc2lvbiBzaG91bGQgYmUgc2V0IHdoZW4gbm90IHNlbGVjdGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJjaGVja2JveC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJjaGVja2JveEV4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjaGVja2JveEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmNoZWNrYm94TW9kZWwgPSB7XG4gICAgICAgICAgICAgICAgdmFsdWUxIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTIgOiAnWUVTJ1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICA8bGFiZWw+VmFsdWUxOlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrYm94TW9kZWwudmFsdWUxXCI+XG4gICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICAgPGxhYmVsPlZhbHVlMjpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2JveE1vZGVsLnZhbHVlMlwiXG4gICAgICAgICAgICAgICAgICAgIG5nLXRydWUtdmFsdWU9XCInWUVTJ1wiIG5nLWZhbHNlLXZhbHVlPVwiJ05PJ1wiPlxuICAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgICA8dHQ+dmFsdWUxID0ge3tjaGVja2JveE1vZGVsLnZhbHVlMX19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+dmFsdWUyID0ge3tjaGVja2JveE1vZGVsLnZhbHVlMn19PC90dD48YnIvPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2Ugc3RhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZTEgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2NoZWNrYm94TW9kZWwudmFsdWUxJykpO1xuICAgICAgICAgICAgdmFyIHZhbHVlMiA9IGVsZW1lbnQoYnkuYmluZGluZygnY2hlY2tib3hNb2RlbC52YWx1ZTInKSk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZTEuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZTIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ1lFUycpO1xuXG4gICAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2JveE1vZGVsLnZhbHVlMScpKS5jbGljaygpO1xuICAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tib3hNb2RlbC52YWx1ZTInKSkuY2xpY2soKTtcblxuICAgICAgICAgICAgZXhwZWN0KHZhbHVlMS5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZTIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ05PJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICovXG4gICdjaGVja2JveCc6IGNoZWNrYm94SW5wdXRUeXBlLFxuXG4gICdoaWRkZW4nOiBub29wLFxuICAnYnV0dG9uJzogbm9vcCxcbiAgJ3N1Ym1pdCc6IG5vb3AsXG4gICdyZXNldCc6IG5vb3AsXG4gICdmaWxlJzogbm9vcFxufTtcblxuZnVuY3Rpb24gc3RyaW5nQmFzZWRJbnB1dFR5cGUoY3RybCkge1xuICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgPyB2YWx1ZSA6IHZhbHVlLnRvU3RyaW5nKCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0ZXh0SW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcbiAgc3RyaW5nQmFzZWRJbnB1dFR5cGUoY3RybCk7XG59XG5cbmZ1bmN0aW9uIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcikge1xuICB2YXIgdHlwZSA9IGxvd2VyY2FzZShlbGVtZW50WzBdLnR5cGUpO1xuXG4gIC8vIEluIGNvbXBvc2l0aW9uIG1vZGUsIHVzZXJzIGFyZSBzdGlsbCBpbnB1dGluZyBpbnRlcm1lZGlhdGUgdGV4dCBidWZmZXIsXG4gIC8vIGhvbGQgdGhlIGxpc3RlbmVyIHVudGlsIGNvbXBvc2l0aW9uIGlzIGRvbmUuXG4gIC8vIE1vcmUgYWJvdXQgY29tcG9zaXRpb24gZXZlbnRzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ29tcG9zaXRpb25FdmVudFxuICBpZiAoISRzbmlmZmVyLmFuZHJvaWQpIHtcbiAgICB2YXIgY29tcG9zaW5nID0gZmFsc2U7XG5cbiAgICBlbGVtZW50Lm9uKCdjb21wb3NpdGlvbnN0YXJ0JywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgY29tcG9zaW5nID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIGVsZW1lbnQub24oJ2NvbXBvc2l0aW9uZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICBjb21wb3NpbmcgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbihldikge1xuICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAkYnJvd3Nlci5kZWZlci5jYW5jZWwodGltZW91dCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGNvbXBvc2luZykgcmV0dXJuO1xuICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsKCksXG4gICAgICAgIGV2ZW50ID0gZXYgJiYgZXYudHlwZTtcblxuICAgIC8vIEJ5IGRlZmF1bHQgd2Ugd2lsbCB0cmltIHRoZSB2YWx1ZVxuICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgbmctdHJpbSBleGlzdHMgd2Ugd2lsbCBhdm9pZCB0cmltbWluZ1xuICAgIC8vIElmIGlucHV0IHR5cGUgaXMgJ3Bhc3N3b3JkJywgdGhlIHZhbHVlIGlzIG5ldmVyIHRyaW1tZWRcbiAgICBpZiAodHlwZSAhPT0gJ3Bhc3N3b3JkJyAmJiAoIWF0dHIubmdUcmltIHx8IGF0dHIubmdUcmltICE9PSAnZmFsc2UnKSkge1xuICAgICAgdmFsdWUgPSB0cmltKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBJZiBhIGNvbnRyb2wgaXMgc3VmZmVyaW5nIGZyb20gYmFkIGlucHV0IChkdWUgdG8gbmF0aXZlIHZhbGlkYXRvcnMpLCBicm93c2VycyBkaXNjYXJkIGl0c1xuICAgIC8vIHZhbHVlLCBzbyBpdCBtYXkgYmUgbmVjZXNzYXJ5IHRvIHJldmFsaWRhdGUgKGJ5IGNhbGxpbmcgJHNldFZpZXdWYWx1ZSBhZ2FpbikgZXZlbiBpZiB0aGVcbiAgICAvLyBjb250cm9sJ3MgdmFsdWUgaXMgdGhlIHNhbWUgZW1wdHkgdmFsdWUgdHdpY2UgaW4gYSByb3cuXG4gICAgaWYgKGN0cmwuJHZpZXdWYWx1ZSAhPT0gdmFsdWUgfHwgKHZhbHVlID09PSAnJyAmJiBjdHJsLiQkaGFzTmF0aXZlVmFsaWRhdG9ycykpIHtcbiAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZSh2YWx1ZSwgZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICAvLyBpZiB0aGUgYnJvd3NlciBkb2VzIHN1cHBvcnQgXCJpbnB1dFwiIGV2ZW50LCB3ZSBhcmUgZmluZSAtIGV4Y2VwdCBvbiBJRTkgd2hpY2ggZG9lc24ndCBmaXJlIHRoZVxuICAvLyBpbnB1dCBldmVudCBvbiBiYWNrc3BhY2UsIGRlbGV0ZSBvciBjdXRcbiAgaWYgKCRzbmlmZmVyLmhhc0V2ZW50KCdpbnB1dCcpKSB7XG4gICAgZWxlbWVudC5vbignaW5wdXQnLCBsaXN0ZW5lcik7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRpbWVvdXQ7XG5cbiAgICB2YXIgZGVmZXJMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2LCBpbnB1dCwgb3JpZ1ZhbHVlKSB7XG4gICAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgICAgdGltZW91dCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgIGlmICghaW5wdXQgfHwgaW5wdXQudmFsdWUgIT09IG9yaWdWYWx1ZSkge1xuICAgICAgICAgICAgbGlzdGVuZXIoZXYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGVsZW1lbnQub24oJ2tleWRvd24nLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgdmFyIGtleSA9IGV2ZW50LmtleUNvZGU7XG5cbiAgICAgIC8vIGlnbm9yZVxuICAgICAgLy8gICAgY29tbWFuZCAgICAgICAgICAgIG1vZGlmaWVycyAgICAgICAgICAgICAgICAgICBhcnJvd3NcbiAgICAgIGlmIChrZXkgPT09IDkxIHx8ICgxNSA8IGtleSAmJiBrZXkgPCAxOSkgfHwgKDM3IDw9IGtleSAmJiBrZXkgPD0gNDApKSByZXR1cm47XG5cbiAgICAgIGRlZmVyTGlzdGVuZXIoZXZlbnQsIHRoaXMsIHRoaXMudmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLy8gaWYgdXNlciBtb2RpZmllcyBpbnB1dCB2YWx1ZSB1c2luZyBjb250ZXh0IG1lbnUgaW4gSUUsIHdlIG5lZWQgXCJwYXN0ZVwiIGFuZCBcImN1dFwiIGV2ZW50cyB0byBjYXRjaCBpdFxuICAgIGlmICgkc25pZmZlci5oYXNFdmVudCgncGFzdGUnKSkge1xuICAgICAgZWxlbWVudC5vbigncGFzdGUgY3V0JywgZGVmZXJMaXN0ZW5lcik7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdXNlciBwYXN0ZSBpbnRvIGlucHV0IHVzaW5nIG1vdXNlIG9uIG9sZGVyIGJyb3dzZXJcbiAgLy8gb3IgZm9ybSBhdXRvY29tcGxldGUgb24gbmV3ZXIgYnJvd3Nlciwgd2UgbmVlZCBcImNoYW5nZVwiIGV2ZW50IHRvIGNhdGNoIGl0XG4gIGVsZW1lbnQub24oJ2NoYW5nZScsIGxpc3RlbmVyKTtcblxuICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50LnZhbChjdHJsLiRpc0VtcHR5KGN0cmwuJHZpZXdWYWx1ZSkgPyAnJyA6IGN0cmwuJHZpZXdWYWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHdlZWtQYXJzZXIoaXNvV2VlaywgZXhpc3RpbmdEYXRlKSB7XG4gIGlmIChpc0RhdGUoaXNvV2VlaykpIHtcbiAgICByZXR1cm4gaXNvV2VlaztcbiAgfVxuXG4gIGlmIChpc1N0cmluZyhpc29XZWVrKSkge1xuICAgIFdFRUtfUkVHRVhQLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIHBhcnRzID0gV0VFS19SRUdFWFAuZXhlYyhpc29XZWVrKTtcbiAgICBpZiAocGFydHMpIHtcbiAgICAgIHZhciB5ZWFyID0gK3BhcnRzWzFdLFxuICAgICAgICAgIHdlZWsgPSArcGFydHNbMl0sXG4gICAgICAgICAgaG91cnMgPSAwLFxuICAgICAgICAgIG1pbnV0ZXMgPSAwLFxuICAgICAgICAgIHNlY29uZHMgPSAwLFxuICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IDAsXG4gICAgICAgICAgZmlyc3RUaHVycyA9IGdldEZpcnN0VGh1cnNkYXlPZlllYXIoeWVhciksXG4gICAgICAgICAgYWRkRGF5cyA9ICh3ZWVrIC0gMSkgKiA3O1xuXG4gICAgICBpZiAoZXhpc3RpbmdEYXRlKSB7XG4gICAgICAgIGhvdXJzID0gZXhpc3RpbmdEYXRlLmdldEhvdXJzKCk7XG4gICAgICAgIG1pbnV0ZXMgPSBleGlzdGluZ0RhdGUuZ2V0TWludXRlcygpO1xuICAgICAgICBzZWNvbmRzID0gZXhpc3RpbmdEYXRlLmdldFNlY29uZHMoKTtcbiAgICAgICAgbWlsbGlzZWNvbmRzID0gZXhpc3RpbmdEYXRlLmdldE1pbGxpc2Vjb25kcygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgMCwgZmlyc3RUaHVycy5nZXREYXRlKCkgKyBhZGREYXlzLCBob3VycywgbWludXRlcywgc2Vjb25kcywgbWlsbGlzZWNvbmRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gTmFOO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEYXRlUGFyc2VyKHJlZ2V4cCwgbWFwcGluZykge1xuICByZXR1cm4gZnVuY3Rpb24oaXNvLCBkYXRlKSB7XG4gICAgdmFyIHBhcnRzLCBtYXA7XG5cbiAgICBpZiAoaXNEYXRlKGlzbykpIHtcbiAgICAgIHJldHVybiBpc287XG4gICAgfVxuXG4gICAgaWYgKGlzU3RyaW5nKGlzbykpIHtcbiAgICAgIC8vIFdoZW4gYSBkYXRlIGlzIEpTT04naWZpZWQgdG8gd3JhcHMgaXRzZWxmIGluc2lkZSBvZiBhbiBleHRyYVxuICAgICAgLy8gc2V0IG9mIGRvdWJsZSBxdW90ZXMuIFRoaXMgbWFrZXMgdGhlIGRhdGUgcGFyc2luZyBjb2RlIHVuYWJsZVxuICAgICAgLy8gdG8gbWF0Y2ggdGhlIGRhdGUgc3RyaW5nIGFuZCBwYXJzZSBpdCBhcyBhIGRhdGUuXG4gICAgICBpZiAoaXNvLmNoYXJBdCgwKSA9PSAnXCInICYmIGlzby5jaGFyQXQoaXNvLmxlbmd0aCAtIDEpID09ICdcIicpIHtcbiAgICAgICAgaXNvID0gaXNvLnN1YnN0cmluZygxLCBpc28ubGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoSVNPX0RBVEVfUkVHRVhQLnRlc3QoaXNvKSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoaXNvKTtcbiAgICAgIH1cbiAgICAgIHJlZ2V4cC5sYXN0SW5kZXggPSAwO1xuICAgICAgcGFydHMgPSByZWdleHAuZXhlYyhpc28pO1xuXG4gICAgICBpZiAocGFydHMpIHtcbiAgICAgICAgcGFydHMuc2hpZnQoKTtcbiAgICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgICBtYXAgPSB7XG4gICAgICAgICAgICB5eXl5OiBkYXRlLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICBNTTogZGF0ZS5nZXRNb250aCgpICsgMSxcbiAgICAgICAgICAgIGRkOiBkYXRlLmdldERhdGUoKSxcbiAgICAgICAgICAgIEhIOiBkYXRlLmdldEhvdXJzKCksXG4gICAgICAgICAgICBtbTogZGF0ZS5nZXRNaW51dGVzKCksXG4gICAgICAgICAgICBzczogZGF0ZS5nZXRTZWNvbmRzKCksXG4gICAgICAgICAgICBzc3M6IGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgLyAxMDAwXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXAgPSB7IHl5eXk6IDE5NzAsIE1NOiAxLCBkZDogMSwgSEg6IDAsIG1tOiAwLCBzczogMCwgc3NzOiAwIH07XG4gICAgICAgIH1cblxuICAgICAgICBmb3JFYWNoKHBhcnRzLCBmdW5jdGlvbihwYXJ0LCBpbmRleCkge1xuICAgICAgICAgIGlmIChpbmRleCA8IG1hcHBpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICBtYXBbbWFwcGluZ1tpbmRleF1dID0gK3BhcnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKG1hcC55eXl5LCBtYXAuTU0gLSAxLCBtYXAuZGQsIG1hcC5ISCwgbWFwLm1tLCBtYXAuc3MgfHwgMCwgbWFwLnNzcyAqIDEwMDAgfHwgMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIE5hTjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGF0ZUlucHV0VHlwZSh0eXBlLCByZWdleHAsIHBhcnNlRGF0ZSwgZm9ybWF0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBkeW5hbWljRGF0ZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyLCAkZmlsdGVyKSB7XG4gICAgYmFkSW5wdXRDaGVja2VyKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKTtcbiAgICBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpO1xuICAgIHZhciB0aW1lem9uZSA9IGN0cmwgJiYgY3RybC4kb3B0aW9ucyAmJiBjdHJsLiRvcHRpb25zLnRpbWV6b25lO1xuICAgIHZhciBwcmV2aW91c0RhdGU7XG5cbiAgICBjdHJsLiQkcGFyc2VyTmFtZSA9IHR5cGU7XG4gICAgY3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoY3RybC4kaXNFbXB0eSh2YWx1ZSkpIHJldHVybiBudWxsO1xuICAgICAgaWYgKHJlZ2V4cC50ZXN0KHZhbHVlKSkge1xuICAgICAgICAvLyBOb3RlOiBXZSBjYW5ub3QgcmVhZCBjdHJsLiRtb2RlbFZhbHVlLCBhcyB0aGVyZSBtaWdodCBiZSBhIGRpZmZlcmVudFxuICAgICAgICAvLyBwYXJzZXIvZm9ybWF0dGVyIGluIHRoZSBwcm9jZXNzaW5nIGNoYWluIHNvIHRoYXQgdGhlIG1vZGVsXG4gICAgICAgIC8vIGNvbnRhaW5zIHNvbWUgZGlmZmVyZW50IGRhdGEgZm9ybWF0IVxuICAgICAgICB2YXIgcGFyc2VkRGF0ZSA9IHBhcnNlRGF0ZSh2YWx1ZSwgcHJldmlvdXNEYXRlKTtcbiAgICAgICAgaWYgKHRpbWV6b25lKSB7XG4gICAgICAgICAgcGFyc2VkRGF0ZSA9IGNvbnZlcnRUaW1lem9uZVRvTG9jYWwocGFyc2VkRGF0ZSwgdGltZXpvbmUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWREYXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9KTtcblxuICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlICYmICFpc0RhdGUodmFsdWUpKSB7XG4gICAgICAgIHRocm93ICRuZ01vZGVsTWluRXJyKCdkYXRlZm10JywgJ0V4cGVjdGVkIGB7MH1gIHRvIGJlIGEgZGF0ZScsIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1ZhbGlkRGF0ZSh2YWx1ZSkpIHtcbiAgICAgICAgcHJldmlvdXNEYXRlID0gdmFsdWU7XG4gICAgICAgIGlmIChwcmV2aW91c0RhdGUgJiYgdGltZXpvbmUpIHtcbiAgICAgICAgICBwcmV2aW91c0RhdGUgPSBjb252ZXJ0VGltZXpvbmVUb0xvY2FsKHByZXZpb3VzRGF0ZSwgdGltZXpvbmUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkZmlsdGVyKCdkYXRlJykodmFsdWUsIGZvcm1hdCwgdGltZXpvbmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJldmlvdXNEYXRlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGlzRGVmaW5lZChhdHRyLm1pbikgfHwgYXR0ci5uZ01pbikge1xuICAgICAgdmFyIG1pblZhbDtcbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMubWluID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICFpc1ZhbGlkRGF0ZSh2YWx1ZSkgfHwgaXNVbmRlZmluZWQobWluVmFsKSB8fCBwYXJzZURhdGUodmFsdWUpID49IG1pblZhbDtcbiAgICAgIH07XG4gICAgICBhdHRyLiRvYnNlcnZlKCdtaW4nLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgbWluVmFsID0gcGFyc2VPYnNlcnZlZERhdGVWYWx1ZSh2YWwpO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGVmaW5lZChhdHRyLm1heCkgfHwgYXR0ci5uZ01heCkge1xuICAgICAgdmFyIG1heFZhbDtcbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMubWF4ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICFpc1ZhbGlkRGF0ZSh2YWx1ZSkgfHwgaXNVbmRlZmluZWQobWF4VmFsKSB8fCBwYXJzZURhdGUodmFsdWUpIDw9IG1heFZhbDtcbiAgICAgIH07XG4gICAgICBhdHRyLiRvYnNlcnZlKCdtYXgnLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgbWF4VmFsID0gcGFyc2VPYnNlcnZlZERhdGVWYWx1ZSh2YWwpO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZERhdGUodmFsdWUpIHtcbiAgICAgIC8vIEludmFsaWQgRGF0ZTogZ2V0VGltZSgpIHJldHVybnMgTmFOXG4gICAgICByZXR1cm4gdmFsdWUgJiYgISh2YWx1ZS5nZXRUaW1lICYmIHZhbHVlLmdldFRpbWUoKSAhPT0gdmFsdWUuZ2V0VGltZSgpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU9ic2VydmVkRGF0ZVZhbHVlKHZhbCkge1xuICAgICAgcmV0dXJuIGlzRGVmaW5lZCh2YWwpID8gKGlzRGF0ZSh2YWwpID8gdmFsIDogcGFyc2VEYXRlKHZhbCkpIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gYmFkSW5wdXRDaGVja2VyKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gIHZhciBub2RlID0gZWxlbWVudFswXTtcbiAgdmFyIG5hdGl2ZVZhbGlkYXRpb24gPSBjdHJsLiQkaGFzTmF0aXZlVmFsaWRhdG9ycyA9IGlzT2JqZWN0KG5vZGUudmFsaWRpdHkpO1xuICBpZiAobmF0aXZlVmFsaWRhdGlvbikge1xuICAgIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIHZhbGlkaXR5ID0gZWxlbWVudC5wcm9wKFZBTElESVRZX1NUQVRFX1BST1BFUlRZKSB8fCB7fTtcbiAgICAgIC8vIERldGVjdCBidWcgaW4gRkYzNSBmb3IgaW5wdXRbZW1haWxdIChodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDY0NDMwKTpcbiAgICAgIC8vIC0gYWxzbyBzZXRzIHZhbGlkaXR5LmJhZElucHV0IChzaG91bGQgb25seSBiZSB2YWxpZGl0eS50eXBlTWlzbWF0Y2gpLlxuICAgICAgLy8gLSBzZWUgaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNlLW1haWwtc3RhdGUtKHR5cGU9ZW1haWwpXG4gICAgICAvLyAtIGNhbiBpZ25vcmUgdGhpcyBjYXNlIGFzIHdlIGNhbiBzdGlsbCByZWFkIG91dCB0aGUgZXJyb25lb3VzIGVtYWlsLi4uXG4gICAgICByZXR1cm4gdmFsaWRpdHkuYmFkSW5wdXQgJiYgIXZhbGlkaXR5LnR5cGVNaXNtYXRjaCA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIG51bWJlcklucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIGJhZElucHV0Q2hlY2tlcihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCk7XG4gIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG5cbiAgY3RybC4kJHBhcnNlck5hbWUgPSAnbnVtYmVyJztcbiAgY3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGN0cmwuJGlzRW1wdHkodmFsdWUpKSAgICAgIHJldHVybiBudWxsO1xuICAgIGlmIChOVU1CRVJfUkVHRVhQLnRlc3QodmFsdWUpKSByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSk7XG5cbiAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCFjdHJsLiRpc0VtcHR5KHZhbHVlKSkge1xuICAgICAgaWYgKCFpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgJG5nTW9kZWxNaW5FcnIoJ251bWZtdCcsICdFeHBlY3RlZCBgezB9YCB0byBiZSBhIG51bWJlcicsIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9KTtcblxuICBpZiAoaXNEZWZpbmVkKGF0dHIubWluKSB8fCBhdHRyLm5nTWluKSB7XG4gICAgdmFyIG1pblZhbDtcbiAgICBjdHJsLiR2YWxpZGF0b3JzLm1pbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgaXNVbmRlZmluZWQobWluVmFsKSB8fCB2YWx1ZSA+PSBtaW5WYWw7XG4gICAgfTtcblxuICAgIGF0dHIuJG9ic2VydmUoJ21pbicsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKGlzRGVmaW5lZCh2YWwpICYmICFpc051bWJlcih2YWwpKSB7XG4gICAgICAgIHZhbCA9IHBhcnNlRmxvYXQodmFsLCAxMCk7XG4gICAgICB9XG4gICAgICBtaW5WYWwgPSBpc051bWJlcih2YWwpICYmICFpc05hTih2YWwpID8gdmFsIDogdW5kZWZpbmVkO1xuICAgICAgLy8gVE9ETyhtYXRza28pOiBpbXBsZW1lbnQgdmFsaWRhdGVMYXRlciB0byByZWR1Y2UgbnVtYmVyIG9mIHZhbGlkYXRpb25zXG4gICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKGlzRGVmaW5lZChhdHRyLm1heCkgfHwgYXR0ci5uZ01heCkge1xuICAgIHZhciBtYXhWYWw7XG4gICAgY3RybC4kdmFsaWRhdG9ycy5tYXggPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IGlzVW5kZWZpbmVkKG1heFZhbCkgfHwgdmFsdWUgPD0gbWF4VmFsO1xuICAgIH07XG5cbiAgICBhdHRyLiRvYnNlcnZlKCdtYXgnLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmIChpc0RlZmluZWQodmFsKSAmJiAhaXNOdW1iZXIodmFsKSkge1xuICAgICAgICB2YWwgPSBwYXJzZUZsb2F0KHZhbCwgMTApO1xuICAgICAgfVxuICAgICAgbWF4VmFsID0gaXNOdW1iZXIodmFsKSAmJiAhaXNOYU4odmFsKSA/IHZhbCA6IHVuZGVmaW5lZDtcbiAgICAgIC8vIFRPRE8obWF0c2tvKTogaW1wbGVtZW50IHZhbGlkYXRlTGF0ZXIgdG8gcmVkdWNlIG51bWJlciBvZiB2YWxpZGF0aW9uc1xuICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cmxJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcikge1xuICAvLyBOb3RlOiBubyBiYWRJbnB1dENoZWNrZXIgaGVyZSBieSBwdXJwb3NlIGFzIGB1cmxgIGlzIG9ubHkgYSB2YWxpZGF0aW9uXG4gIC8vIGluIGJyb3dzZXJzLCBpLmUuIHdlIGNhbiBhbHdheXMgcmVhZCBvdXQgaW5wdXQudmFsdWUgZXZlbiBpZiBpdCBpcyBub3QgdmFsaWQhXG4gIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG4gIHN0cmluZ0Jhc2VkSW5wdXRUeXBlKGN0cmwpO1xuXG4gIGN0cmwuJCRwYXJzZXJOYW1lID0gJ3VybCc7XG4gIGN0cmwuJHZhbGlkYXRvcnMudXJsID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgdmFyIHZhbHVlID0gbW9kZWxWYWx1ZSB8fCB2aWV3VmFsdWU7XG4gICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IFVSTF9SRUdFWFAudGVzdCh2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVtYWlsSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgLy8gTm90ZTogbm8gYmFkSW5wdXRDaGVja2VyIGhlcmUgYnkgcHVycG9zZSBhcyBgdXJsYCBpcyBvbmx5IGEgdmFsaWRhdGlvblxuICAvLyBpbiBicm93c2VycywgaS5lLiB3ZSBjYW4gYWx3YXlzIHJlYWQgb3V0IGlucHV0LnZhbHVlIGV2ZW4gaWYgaXQgaXMgbm90IHZhbGlkIVxuICBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpO1xuICBzdHJpbmdCYXNlZElucHV0VHlwZShjdHJsKTtcblxuICBjdHJsLiQkcGFyc2VyTmFtZSA9ICdlbWFpbCc7XG4gIGN0cmwuJHZhbGlkYXRvcnMuZW1haWwgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICB2YXIgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcbiAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgRU1BSUxfUkVHRVhQLnRlc3QodmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiByYWRpb0lucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xuICAvLyBtYWtlIHRoZSBuYW1lIHVuaXF1ZSwgaWYgbm90IGRlZmluZWRcbiAgaWYgKGlzVW5kZWZpbmVkKGF0dHIubmFtZSkpIHtcbiAgICBlbGVtZW50LmF0dHIoJ25hbWUnLCBuZXh0VWlkKCkpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICBpZiAoZWxlbWVudFswXS5jaGVja2VkKSB7XG4gICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoYXR0ci52YWx1ZSwgZXYgJiYgZXYudHlwZSk7XG4gICAgfVxuICB9O1xuXG4gIGVsZW1lbnQub24oJ2NsaWNrJywgbGlzdGVuZXIpO1xuXG4gIGN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGF0dHIudmFsdWU7XG4gICAgZWxlbWVudFswXS5jaGVja2VkID0gKHZhbHVlID09IGN0cmwuJHZpZXdWYWx1ZSk7XG4gIH07XG5cbiAgYXR0ci4kb2JzZXJ2ZSgndmFsdWUnLCBjdHJsLiRyZW5kZXIpO1xufVxuXG5mdW5jdGlvbiBwYXJzZUNvbnN0YW50RXhwcigkcGFyc2UsIGNvbnRleHQsIG5hbWUsIGV4cHJlc3Npb24sIGZhbGxiYWNrKSB7XG4gIHZhciBwYXJzZUZuO1xuICBpZiAoaXNEZWZpbmVkKGV4cHJlc3Npb24pKSB7XG4gICAgcGFyc2VGbiA9ICRwYXJzZShleHByZXNzaW9uKTtcbiAgICBpZiAoIXBhcnNlRm4uY29uc3RhbnQpIHtcbiAgICAgIHRocm93IG1pbkVycignbmdNb2RlbCcpKCdjb25zdGV4cHInLCAnRXhwZWN0ZWQgY29uc3RhbnQgZXhwcmVzc2lvbiBmb3IgYHswfWAsIGJ1dCBzYXcgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdgezF9YC4nLCBuYW1lLCBleHByZXNzaW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlRm4oY29udGV4dCk7XG4gIH1cbiAgcmV0dXJuIGZhbGxiYWNrO1xufVxuXG5mdW5jdGlvbiBjaGVja2JveElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyLCAkZmlsdGVyLCAkcGFyc2UpIHtcbiAgdmFyIHRydWVWYWx1ZSA9IHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgc2NvcGUsICduZ1RydWVWYWx1ZScsIGF0dHIubmdUcnVlVmFsdWUsIHRydWUpO1xuICB2YXIgZmFsc2VWYWx1ZSA9IHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgc2NvcGUsICduZ0ZhbHNlVmFsdWUnLCBhdHRyLm5nRmFsc2VWYWx1ZSwgZmFsc2UpO1xuXG4gIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgY3RybC4kc2V0Vmlld1ZhbHVlKGVsZW1lbnRbMF0uY2hlY2tlZCwgZXYgJiYgZXYudHlwZSk7XG4gIH07XG5cbiAgZWxlbWVudC5vbignY2xpY2snLCBsaXN0ZW5lcik7XG5cbiAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudFswXS5jaGVja2VkID0gY3RybC4kdmlld1ZhbHVlO1xuICB9O1xuXG4gIC8vIE92ZXJyaWRlIHRoZSBzdGFuZGFyZCBgJGlzRW1wdHlgIGJlY2F1c2UgdGhlICR2aWV3VmFsdWUgb2YgYW4gZW1wdHkgY2hlY2tib3ggaXMgYWx3YXlzIHNldCB0byBgZmFsc2VgXG4gIC8vIFRoaXMgaXMgYmVjYXVzZSBvZiB0aGUgcGFyc2VyIGJlbG93LCB3aGljaCBjb21wYXJlcyB0aGUgYCRtb2RlbFZhbHVlYCB3aXRoIGB0cnVlVmFsdWVgIHRvIGNvbnZlcnRcbiAgLy8gaXQgdG8gYSBib29sZWFuLlxuICBjdHJsLiRpc0VtcHR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IGZhbHNlO1xuICB9O1xuXG4gIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBlcXVhbHModmFsdWUsIHRydWVWYWx1ZSk7XG4gIH0pO1xuXG4gIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA/IHRydWVWYWx1ZSA6IGZhbHNlVmFsdWU7XG4gIH0pO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgdGV4dGFyZWFcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIVE1MIHRleHRhcmVhIGVsZW1lbnQgY29udHJvbCB3aXRoIGFuZ3VsYXIgZGF0YS1iaW5kaW5nLiBUaGUgZGF0YS1iaW5kaW5nIGFuZCB2YWxpZGF0aW9uXG4gKiBwcm9wZXJ0aWVzIG9mIHRoaXMgZWxlbWVudCBhcmUgZXhhY3RseSB0aGUgc2FtZSBhcyB0aG9zZSBvZiB0aGVcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQgaW5wdXQgZWxlbWVudH0uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICogICAgbWlubGVuZ3RoLlxuICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mIGFueVxuICogICAgbGVuZ3RoLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIG5nTW9kZWwgdmFsdWUgZG9lcyBub3QgbWF0Y2hcbiAqICAgIGEgUmVnRXhwIGZvdW5kIGJ5IGV2YWx1YXRpbmcgdGhlIEFuZ3VsYXIgZXhwcmVzc2lvbiBnaXZlbiBpbiB0aGUgYXR0cmlidXRlIHZhbHVlLlxuICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAqICAgIGFmdGVyIHdyYXBwaW5nIGl0IGluIGBeYCBhbmQgYCRgIGNoYXJhY3RlcnMuIEZvciBpbnN0YW5jZSwgYFwiYWJjXCJgIHdpbGwgYmUgY29udmVydGVkIHRvXG4gKiAgICBgbmV3IFJlZ0V4cCgnXmFiYyQnKWAuPGJyIC8+XG4gKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICogICAgc3RhcnQgYXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHNlYXJjaCdzIG1hdGNoLCB0aHVzIG5vdCB0YWtpbmcgdGhlIHdob2xlIGlucHV0IHZhbHVlIGludG9cbiAqICAgIGFjY291bnQuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBbbmdUcmltPXRydWVdIElmIHNldCB0byBmYWxzZSBBbmd1bGFyIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgdHJpbSB0aGUgaW5wdXQuXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIGlucHV0XG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSFRNTCBpbnB1dCBlbGVtZW50IGNvbnRyb2wuIFdoZW4gdXNlZCB0b2dldGhlciB3aXRoIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0sIGl0IHByb3ZpZGVzIGRhdGEtYmluZGluZyxcbiAqIGlucHV0IHN0YXRlIGNvbnRyb2wsIGFuZCB2YWxpZGF0aW9uLlxuICogSW5wdXQgY29udHJvbCBmb2xsb3dzIEhUTUw1IGlucHV0IHR5cGVzIGFuZCBwb2x5ZmlsbHMgdGhlIEhUTUw1IHZhbGlkYXRpb24gYmVoYXZpb3IgZm9yIG9sZGVyIGJyb3dzZXJzLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogTm90IGV2ZXJ5IGZlYXR1cmUgb2ZmZXJlZCBpcyBhdmFpbGFibGUgZm9yIGFsbCBpbnB1dCB0eXBlcy5cbiAqIFNwZWNpZmljYWxseSwgZGF0YSBiaW5kaW5nIGFuZCBldmVudCBoYW5kbGluZyB2aWEgYG5nLW1vZGVsYCBpcyB1bnN1cHBvcnRlZCBmb3IgYGlucHV0W2ZpbGVdYC5cbiAqIDwvZGl2PlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG5nUmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBpZiBzZXQgdG8gdHJ1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW5cbiAqICAgIG1pbmxlbmd0aC5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAqICAgIG1heGxlbmd0aC4gU2V0dGluZyB0aGUgYXR0cmlidXRlIHRvIGEgbmVnYXRpdmUgb3Igbm9uLW51bWVyaWMgdmFsdWUsIGFsbG93cyB2aWV3IHZhbHVlcyBvZiBhbnlcbiAqICAgIGxlbmd0aC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHZhbHVlIGRvZXMgbm90IG1hdGNoXG4gKiAgICBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGVuIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgUmVnRXhwXG4gKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICogICAgKipOb3RlOioqIEF2b2lkIHVzaW5nIHRoZSBgZ2AgZmxhZyBvbiB0aGUgUmVnRXhwLCBhcyBpdCB3aWxsIGNhdXNlIGVhY2ggc3VjY2Vzc2l2ZSBzZWFyY2ggdG9cbiAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gKiAgICBhY2NvdW50LlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICogQHBhcmFtIHtib29sZWFuPX0gW25nVHJpbT10cnVlXSBJZiBzZXQgdG8gZmFsc2UgQW5ndWxhciB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHRyaW0gdGhlIGlucHV0LlxuICogICAgVGhpcyBwYXJhbWV0ZXIgaXMgaWdub3JlZCBmb3IgaW5wdXRbdHlwZT1wYXNzd29yZF0gY29udHJvbHMsIHdoaWNoIHdpbGwgbmV2ZXIgdHJpbSB0aGVcbiAqICAgIGlucHV0LlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cImlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImlucHV0RXhhbXBsZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdpbnB1dEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICRzY29wZS51c2VyID0ge25hbWU6ICdndWVzdCcsIGxhc3Q6ICd2aXNpdG9yJ307XG4gICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICBVc2VyIG5hbWU6XG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiIG5nLW1vZGVsPVwidXNlci5uYW1lXCIgcmVxdWlyZWQ+XG4gICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0udXNlck5hbWUuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgTGFzdCBuYW1lOlxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwibGFzdE5hbWVcIiBuZy1tb2RlbD1cInVzZXIubGFzdFwiXG4gICAgICAgICAgICAgIG5nLW1pbmxlbmd0aD1cIjNcIiBuZy1tYXhsZW5ndGg9XCIxMFwiPlxuICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmxhc3ROYW1lLiRlcnJvci5taW5sZW5ndGhcIj5cbiAgICAgICAgICAgICAgIFRvbyBzaG9ydCE8L3NwYW4+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0ubGFzdE5hbWUuJGVycm9yLm1heGxlbmd0aFwiPlxuICAgICAgICAgICAgICAgVG9vIGxvbmchPC9zcGFuPlxuICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgIDxocj5cbiAgICAgICAgIDx0dD51c2VyID0ge3t1c2VyfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLnVzZXJOYW1lLiR2YWxpZCA9IHt7bXlGb3JtLnVzZXJOYW1lLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS51c2VyTmFtZS4kZXJyb3IgPSB7e215Rm9ybS51c2VyTmFtZS4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0ubGFzdE5hbWUuJHZhbGlkID0ge3tteUZvcm0ubGFzdE5hbWUuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLmxhc3ROYW1lLiRlcnJvciA9IHt7bXlGb3JtLmxhc3ROYW1lLiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLm1pbmxlbmd0aCA9IHt7ISFteUZvcm0uJGVycm9yLm1pbmxlbmd0aH19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IubWF4bGVuZ3RoID0ge3shIW15Rm9ybS4kZXJyb3IubWF4bGVuZ3RofX08L3R0Pjxici8+XG4gICAgICAgPC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIHZhciB1c2VyID0gZWxlbWVudChieS5leGFjdEJpbmRpbmcoJ3VzZXInKSk7XG4gICAgICAgIHZhciB1c2VyTmFtZVZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0udXNlck5hbWUuJHZhbGlkJykpO1xuICAgICAgICB2YXIgbGFzdE5hbWVWYWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmxhc3ROYW1lLiR2YWxpZCcpKTtcbiAgICAgICAgdmFyIGxhc3ROYW1lRXJyb3IgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5sYXN0TmFtZS4kZXJyb3InKSk7XG4gICAgICAgIHZhciBmb3JtVmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS4kdmFsaWQnKSk7XG4gICAgICAgIHZhciB1c2VyTmFtZUlucHV0ID0gZWxlbWVudChieS5tb2RlbCgndXNlci5uYW1lJykpO1xuICAgICAgICB2YXIgdXNlckxhc3RJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIubGFzdCcpKTtcblxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigne1wibmFtZVwiOlwiZ3Vlc3RcIixcImxhc3RcIjpcInZpc2l0b3JcIn0nKTtcbiAgICAgICAgICBleHBlY3QodXNlck5hbWVWYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5IHdoZW4gcmVxdWlyZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1c2VyTmFtZUlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlck5hbWVJbnB1dC5zZW5kS2V5cygnJyk7XG5cbiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigne1wibGFzdFwiOlwidmlzaXRvclwifScpO1xuICAgICAgICAgIGV4cGVjdCh1c2VyTmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgdmFsaWQgaWYgZW1wdHkgd2hlbiBtaW4gbGVuZ3RoIGlzIHNldCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LnNlbmRLZXlzKCcnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyLmdldFRleHQoKSkudG9Db250YWluKCd7XCJuYW1lXCI6XCJndWVzdFwiLFwibGFzdFwiOlwiXCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBsZXNzIHRoYW4gcmVxdWlyZWQgbWluIGxlbmd0aCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LnNlbmRLZXlzKCd4eCcpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcIm5hbWVcIjpcImd1ZXN0XCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lRXJyb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ21pbmxlbmd0aCcpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBsb25nZXIgdGhhbiBtYXggbGVuZ3RoJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdXNlckxhc3RJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuc2VuZEtleXMoJ3NvbWUgcmlkaWN1bG91c2x5IGxvbmcgbmFtZScpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcIm5hbWVcIjpcImd1ZXN0XCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lRXJyb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ21heGxlbmd0aCcpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIGlucHV0RGlyZWN0aXZlID0gWyckYnJvd3NlcicsICckc25pZmZlcicsICckZmlsdGVyJywgJyRwYXJzZScsXG4gICAgZnVuY3Rpb24oJGJyb3dzZXIsICRzbmlmZmVyLCAkZmlsdGVyLCAkcGFyc2UpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6IFsnP25nTW9kZWwnXSxcbiAgICBsaW5rOiB7XG4gICAgICBwcmU6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICBpZiAoY3RybHNbMF0pIHtcbiAgICAgICAgICAoaW5wdXRUeXBlW2xvd2VyY2FzZShhdHRyLnR5cGUpXSB8fCBpbnB1dFR5cGUudGV4dCkoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzWzBdLCAkc25pZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGJyb3dzZXIsICRmaWx0ZXIsICRwYXJzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XTtcblxuXG5cbnZhciBDT05TVEFOVF9WQUxVRV9SRUdFWFAgPSAvXih0cnVlfGZhbHNlfFxcZCspJC87XG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nVmFsdWVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEJpbmRzIHRoZSBnaXZlbiBleHByZXNzaW9uIHRvIHRoZSB2YWx1ZSBvZiBgPG9wdGlvbj5gIG9yIHtAbGluayBpbnB1dFtyYWRpb10gYGlucHV0W3JhZGlvXWB9LFxuICogc28gdGhhdCB3aGVuIHRoZSBlbGVtZW50IGlzIHNlbGVjdGVkLCB0aGUge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfSBvZiB0aGF0IGVsZW1lbnQgaXMgc2V0IHRvXG4gKiB0aGUgYm91bmQgdmFsdWUuXG4gKlxuICogYG5nVmFsdWVgIGlzIHVzZWZ1bCB3aGVuIGR5bmFtaWNhbGx5IGdlbmVyYXRpbmcgbGlzdHMgb2YgcmFkaW8gYnV0dG9ucyB1c2luZ1xuICoge0BsaW5rIG5nUmVwZWF0IGBuZ1JlcGVhdGB9LCBhcyBzaG93biBiZWxvdy5cbiAqXG4gKiBMaWtld2lzZSwgYG5nVmFsdWVgIGNhbiBiZSB1c2VkIHRvIGdlbmVyYXRlIGA8b3B0aW9uPmAgZWxlbWVudHMgZm9yXG4gKiB0aGUge0BsaW5rIHNlbGVjdCBgc2VsZWN0YH0gZWxlbWVudC4gSW4gdGhhdCBjYXNlIGhvd2V2ZXIsIG9ubHkgc3RyaW5ncyBhcmUgc3VwcG9ydGVkXG4gKiBmb3IgdGhlIGB2YWx1ZSBgYXR0cmlidXRlLCBzbyB0aGUgcmVzdWx0aW5nIGBuZ01vZGVsYCB3aWxsIGFsd2F5cyBiZSBhIHN0cmluZy5cbiAqIFN1cHBvcnQgZm9yIGBzZWxlY3RgIG1vZGVscyB3aXRoIG5vbi1zdHJpbmcgdmFsdWVzIGlzIGF2YWlsYWJsZSB2aWEgYG5nT3B0aW9uc2AuXG4gKlxuICogQGVsZW1lbnQgaW5wdXRcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdWYWx1ZSBhbmd1bGFyIGV4cHJlc3Npb24sIHdob3NlIHZhbHVlIHdpbGwgYmUgYm91bmQgdG8gdGhlIGB2YWx1ZWAgYXR0cmlidXRlXG4gKiAgIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnRcbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJuZ1ZhbHVlLWRpcmVjdGl2ZVwiIG1vZHVsZT1cInZhbHVlRXhhbXBsZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd2YWx1ZUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICRzY29wZS5uYW1lcyA9IFsncGl6emEnLCAndW5pY29ybnMnLCAncm9ib3RzJ107XG4gICAgICAgICAgICAgICRzY29wZS5teSA9IHsgZmF2b3JpdGU6ICd1bmljb3JucycgfTtcbiAgICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPGZvcm0gbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgPGgyPldoaWNoIGlzIHlvdXIgZmF2b3JpdGU/PC9oMj5cbiAgICAgICAgICAgIDxsYWJlbCBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCIgZm9yPVwie3tuYW1lfX1cIj5cbiAgICAgICAgICAgICAge3tuYW1lfX1cbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cIm15LmZhdm9yaXRlXCJcbiAgICAgICAgICAgICAgICAgICAgIG5nLXZhbHVlPVwibmFtZVwiXG4gICAgICAgICAgICAgICAgICAgICBpZD1cInt7bmFtZX19XCJcbiAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJmYXZvcml0ZVwiPlxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2PllvdSBjaG9zZSB7e215LmZhdm9yaXRlfX08L2Rpdj5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICB2YXIgZmF2b3JpdGUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215LmZhdm9yaXRlJykpO1xuXG4gICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChmYXZvcml0ZS5nZXRUZXh0KCkpLnRvQ29udGFpbigndW5pY29ybnMnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgYmluZCB0aGUgdmFsdWVzIHRvIHRoZSBpbnB1dHMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50LmFsbChieS5tb2RlbCgnbXkuZmF2b3JpdGUnKSkuZ2V0KDApLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGZhdm9yaXRlLmdldFRleHQoKSkudG9Db250YWluKCdwaXp6YScpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1ZhbHVlRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBwcmlvcml0eTogMTAwLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKHRwbCwgdHBsQXR0cikge1xuICAgICAgaWYgKENPTlNUQU5UX1ZBTFVFX1JFR0VYUC50ZXN0KHRwbEF0dHIubmdWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nVmFsdWVDb25zdGFudExpbmsoc2NvcGUsIGVsbSwgYXR0cikge1xuICAgICAgICAgIGF0dHIuJHNldCgndmFsdWUnLCBzY29wZS4kZXZhbChhdHRyLm5nVmFsdWUpKTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1ZhbHVlTGluayhzY29wZSwgZWxtLCBhdHRyKSB7XG4gICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdWYWx1ZSwgZnVuY3Rpb24gdmFsdWVXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIHZhbHVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmluZFxuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQmluZGAgYXR0cmlidXRlIHRlbGxzIEFuZ3VsYXIgdG8gcmVwbGFjZSB0aGUgdGV4dCBjb250ZW50IG9mIHRoZSBzcGVjaWZpZWQgSFRNTCBlbGVtZW50XG4gKiB3aXRoIHRoZSB2YWx1ZSBvZiBhIGdpdmVuIGV4cHJlc3Npb24sIGFuZCB0byB1cGRhdGUgdGhlIHRleHQgY29udGVudCB3aGVuIHRoZSB2YWx1ZSBvZiB0aGF0XG4gKiBleHByZXNzaW9uIGNoYW5nZXMuXG4gKlxuICogVHlwaWNhbGx5LCB5b3UgZG9uJ3QgdXNlIGBuZ0JpbmRgIGRpcmVjdGx5LCBidXQgaW5zdGVhZCB5b3UgdXNlIHRoZSBkb3VibGUgY3VybHkgbWFya3VwIGxpa2VcbiAqIGB7eyBleHByZXNzaW9uIH19YCB3aGljaCBpcyBzaW1pbGFyIGJ1dCBsZXNzIHZlcmJvc2UuXG4gKlxuICogSXQgaXMgcHJlZmVyYWJsZSB0byB1c2UgYG5nQmluZGAgaW5zdGVhZCBvZiBge3sgZXhwcmVzc2lvbiB9fWAgaWYgYSB0ZW1wbGF0ZSBpcyBtb21lbnRhcmlseVxuICogZGlzcGxheWVkIGJ5IHRoZSBicm93c2VyIGluIGl0cyByYXcgc3RhdGUgYmVmb3JlIEFuZ3VsYXIgY29tcGlsZXMgaXQuIFNpbmNlIGBuZ0JpbmRgIGlzIGFuXG4gKiBlbGVtZW50IGF0dHJpYnV0ZSwgaXQgbWFrZXMgdGhlIGJpbmRpbmdzIGludmlzaWJsZSB0byB0aGUgdXNlciB3aGlsZSB0aGUgcGFnZSBpcyBsb2FkaW5nLlxuICpcbiAqIEFuIGFsdGVybmF0aXZlIHNvbHV0aW9uIHRvIHRoaXMgcHJvYmxlbSB3b3VsZCBiZSB1c2luZyB0aGVcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbG9hayBuZ0Nsb2FrfSBkaXJlY3RpdmUuXG4gKlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0JpbmQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUuXG4gKlxuICogQGV4YW1wbGVcbiAqIEVudGVyIGEgbmFtZSBpbiB0aGUgTGl2ZSBQcmV2aWV3IHRleHQgYm94OyB0aGUgZ3JlZXRpbmcgYmVsb3cgdGhlIHRleHQgYm94IGNoYW5nZXMgaW5zdGFudGx5LlxuICAgPGV4YW1wbGUgbW9kdWxlPVwiYmluZEV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2JpbmRFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLm5hbWUgPSAnV2hpcmxlZCc7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGxhYmVsPkVudGVyIG5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibmFtZVwiPjwvbGFiZWw+PGJyPlxuICAgICAgICAgSGVsbG8gPHNwYW4gbmctYmluZD1cIm5hbWVcIj48L3NwYW4+IVxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWJpbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBuYW1lSW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCduYW1lJykpO1xuXG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCduYW1lJykpLmdldFRleHQoKSkudG9CZSgnV2hpcmxlZCcpO1xuICAgICAgICAgbmFtZUlucHV0LmNsZWFyKCk7XG4gICAgICAgICBuYW1lSW5wdXQuc2VuZEtleXMoJ3dvcmxkJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCduYW1lJykpLmdldFRleHQoKSkudG9CZSgnd29ybGQnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdCaW5kRGlyZWN0aXZlID0gWyckY29tcGlsZScsIGZ1bmN0aW9uKCRjb21waWxlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBQycsXG4gICAgY29tcGlsZTogZnVuY3Rpb24gbmdCaW5kQ29tcGlsZSh0ZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0NsYXNzKHRlbXBsYXRlRWxlbWVudCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gbmdCaW5kTGluayhzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKGVsZW1lbnQsIGF0dHIubmdCaW5kKTtcbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnRbMF07XG4gICAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nQmluZCwgZnVuY3Rpb24gbmdCaW5kV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdmFsdWUgPT09IHVuZGVmaW5lZCA/ICcnIDogdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmluZFRlbXBsYXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQmluZFRlbXBsYXRlYCBkaXJlY3RpdmUgc3BlY2lmaWVzIHRoYXQgdGhlIGVsZW1lbnRcbiAqIHRleHQgY29udGVudCBzaG91bGQgYmUgcmVwbGFjZWQgd2l0aCB0aGUgaW50ZXJwb2xhdGlvbiBvZiB0aGUgdGVtcGxhdGVcbiAqIGluIHRoZSBgbmdCaW5kVGVtcGxhdGVgIGF0dHJpYnV0ZS5cbiAqIFVubGlrZSBgbmdCaW5kYCwgdGhlIGBuZ0JpbmRUZW1wbGF0ZWAgY2FuIGNvbnRhaW4gbXVsdGlwbGUgYHt7YCBgfX1gXG4gKiBleHByZXNzaW9ucy4gVGhpcyBkaXJlY3RpdmUgaXMgbmVlZGVkIHNpbmNlIHNvbWUgSFRNTCBlbGVtZW50c1xuICogKHN1Y2ggYXMgVElUTEUgYW5kIE9QVElPTikgY2Fubm90IGNvbnRhaW4gU1BBTiBlbGVtZW50cy5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ0JpbmRUZW1wbGF0ZSB0ZW1wbGF0ZSBvZiBmb3JtXG4gKiAgIDx0dD57ezwvdHQ+IDx0dD5leHByZXNzaW9uPC90dD4gPHR0Pn19PC90dD4gdG8gZXZhbC5cbiAqXG4gKiBAZXhhbXBsZVxuICogVHJ5IGl0IGhlcmU6IGVudGVyIHRleHQgaW4gdGV4dCBib3ggYW5kIHdhdGNoIHRoZSBncmVldGluZyBjaGFuZ2UuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJiaW5kRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnYmluZEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUuc2FsdXRhdGlvbiA9ICdIZWxsbyc7XG4gICAgICAgICAgICAgJHNjb3BlLm5hbWUgPSAnV29ybGQnO1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgPGxhYmVsPlNhbHV0YXRpb246IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwic2FsdXRhdGlvblwiPjwvbGFiZWw+PGJyPlxuICAgICAgICA8bGFiZWw+TmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJuYW1lXCI+PC9sYWJlbD48YnI+XG4gICAgICAgIDxwcmUgbmctYmluZC10ZW1wbGF0ZT1cInt7c2FsdXRhdGlvbn19IHt7bmFtZX19IVwiPjwvcHJlPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWJpbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBzYWx1dGF0aW9uRWxlbSA9IGVsZW1lbnQoYnkuYmluZGluZygnc2FsdXRhdGlvbicpKTtcbiAgICAgICAgIHZhciBzYWx1dGF0aW9uSW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzYWx1dGF0aW9uJykpO1xuICAgICAgICAgdmFyIG5hbWVJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ25hbWUnKSk7XG5cbiAgICAgICAgIGV4cGVjdChzYWx1dGF0aW9uRWxlbS5nZXRUZXh0KCkpLnRvQmUoJ0hlbGxvIFdvcmxkIScpO1xuXG4gICAgICAgICBzYWx1dGF0aW9uSW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIHNhbHV0YXRpb25JbnB1dC5zZW5kS2V5cygnR3JlZXRpbmdzJyk7XG4gICAgICAgICBuYW1lSW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIG5hbWVJbnB1dC5zZW5kS2V5cygndXNlcicpO1xuXG4gICAgICAgICBleHBlY3Qoc2FsdXRhdGlvbkVsZW0uZ2V0VGV4dCgpKS50b0JlKCdHcmVldGluZ3MgdXNlciEnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUgPSBbJyRpbnRlcnBvbGF0ZScsICckY29tcGlsZScsIGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZSwgJGNvbXBpbGUpIHtcbiAgcmV0dXJuIHtcbiAgICBjb21waWxlOiBmdW5jdGlvbiBuZ0JpbmRUZW1wbGF0ZUNvbXBpbGUodGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZUVsZW1lbnQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nQmluZFRlbXBsYXRlTGluayhzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZShlbGVtZW50LmF0dHIoYXR0ci4kYXR0ci5uZ0JpbmRUZW1wbGF0ZSkpO1xuICAgICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKGVsZW1lbnQsIGludGVycG9sYXRlRm4uZXhwcmVzc2lvbnMpO1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudFswXTtcbiAgICAgICAgYXR0ci4kb2JzZXJ2ZSgnbmdCaW5kVGVtcGxhdGUnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gJycgOiB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dO1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdCaW5kSHRtbFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRXZhbHVhdGVzIHRoZSBleHByZXNzaW9uIGFuZCBpbnNlcnRzIHRoZSByZXN1bHRpbmcgSFRNTCBpbnRvIHRoZSBlbGVtZW50IGluIGEgc2VjdXJlIHdheS4gQnkgZGVmYXVsdCxcbiAqIHRoZSByZXN1bHRpbmcgSFRNTCBjb250ZW50IHdpbGwgYmUgc2FuaXRpemVkIHVzaW5nIHRoZSB7QGxpbmsgbmdTYW5pdGl6ZS4kc2FuaXRpemUgJHNhbml0aXplfSBzZXJ2aWNlLlxuICogVG8gdXRpbGl6ZSB0aGlzIGZ1bmN0aW9uYWxpdHksIGVuc3VyZSB0aGF0IGAkc2FuaXRpemVgIGlzIGF2YWlsYWJsZSwgZm9yIGV4YW1wbGUsIGJ5IGluY2x1ZGluZyB7QGxpbmtcbiAqIG5nU2FuaXRpemV9IGluIHlvdXIgbW9kdWxlJ3MgZGVwZW5kZW5jaWVzIChub3QgaW4gY29yZSBBbmd1bGFyKS4gSW4gb3JkZXIgdG8gdXNlIHtAbGluayBuZ1Nhbml0aXplfVxuICogaW4geW91ciBtb2R1bGUncyBkZXBlbmRlbmNpZXMsIHlvdSBuZWVkIHRvIGluY2x1ZGUgXCJhbmd1bGFyLXNhbml0aXplLmpzXCIgaW4geW91ciBhcHBsaWNhdGlvbi5cbiAqXG4gKiBZb3UgbWF5IGFsc28gYnlwYXNzIHNhbml0aXphdGlvbiBmb3IgdmFsdWVzIHlvdSBrbm93IGFyZSBzYWZlLiBUbyBkbyBzbywgYmluZCB0b1xuICogYW4gZXhwbGljaXRseSB0cnVzdGVkIHZhbHVlIHZpYSB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzSHRtbCAkc2NlLnRydXN0QXNIdG1sfS4gIFNlZSB0aGUgZXhhbXBsZVxuICogdW5kZXIge0BsaW5rIG5nLiRzY2Ujc2hvdy1tZS1hbi1leGFtcGxlLXVzaW5nLXNjZS0gU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSl9LlxuICpcbiAqIE5vdGU6IElmIGEgYCRzYW5pdGl6ZWAgc2VydmljZSBpcyB1bmF2YWlsYWJsZSBhbmQgdGhlIGJvdW5kIHZhbHVlIGlzbid0IGV4cGxpY2l0bHkgdHJ1c3RlZCwgeW91XG4gKiB3aWxsIGhhdmUgYW4gZXhjZXB0aW9uIChpbnN0ZWFkIG9mIGFuIGV4cGxvaXQuKVxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0JpbmRIdG1sIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlLlxuICpcbiAqIEBleGFtcGxlXG5cbiAgIDxleGFtcGxlIG1vZHVsZT1cImJpbmRIdG1sRXhhbXBsZVwiIGRlcHM9XCJhbmd1bGFyLXNhbml0aXplLmpzXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgPHAgbmctYmluZC1odG1sPVwibXlIVE1MXCI+PC9wPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdiaW5kSHRtbEV4YW1wbGUnLCBbJ25nU2FuaXRpemUnXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICRzY29wZS5teUhUTUwgPVxuICAgICAgICAgICAgICAnSSBhbSBhbiA8Y29kZT5IVE1MPC9jb2RlPnN0cmluZyB3aXRoICcgK1xuICAgICAgICAgICAgICAnPGEgaHJlZj1cIiNcIj5saW5rcyE8L2E+IGFuZCBvdGhlciA8ZW0+c3R1ZmY8L2VtPic7XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cblxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1iaW5kLWh0bWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ215SFRNTCcpKS5nZXRUZXh0KCkpLnRvQmUoXG4gICAgICAgICAgICAgJ0kgYW0gYW4gSFRNTHN0cmluZyB3aXRoIGxpbmtzISBhbmQgb3RoZXIgc3R1ZmYnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdCaW5kSHRtbERpcmVjdGl2ZSA9IFsnJHNjZScsICckcGFyc2UnLCAnJGNvbXBpbGUnLCBmdW5jdGlvbigkc2NlLCAkcGFyc2UsICRjb21waWxlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb21waWxlOiBmdW5jdGlvbiBuZ0JpbmRIdG1sQ29tcGlsZSh0RWxlbWVudCwgdEF0dHJzKSB7XG4gICAgICB2YXIgbmdCaW5kSHRtbEdldHRlciA9ICRwYXJzZSh0QXR0cnMubmdCaW5kSHRtbCk7XG4gICAgICB2YXIgbmdCaW5kSHRtbFdhdGNoID0gJHBhcnNlKHRBdHRycy5uZ0JpbmRIdG1sLCBmdW5jdGlvbiBnZXRTdHJpbmdWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlIHx8ICcnKS50b1N0cmluZygpO1xuICAgICAgfSk7XG4gICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0RWxlbWVudCk7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiBuZ0JpbmRIdG1sTGluayhzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKGVsZW1lbnQsIGF0dHIubmdCaW5kSHRtbCk7XG5cbiAgICAgICAgc2NvcGUuJHdhdGNoKG5nQmluZEh0bWxXYXRjaCwgZnVuY3Rpb24gbmdCaW5kSHRtbFdhdGNoQWN0aW9uKCkge1xuICAgICAgICAgIC8vIHdlIHJlLWV2YWx1YXRlIHRoZSBleHByIGJlY2F1c2Ugd2Ugd2FudCBhIFRydXN0ZWRWYWx1ZUhvbGRlclR5cGVcbiAgICAgICAgICAvLyBmb3IgJHNjZSwgbm90IGEgc3RyaW5nXG4gICAgICAgICAgZWxlbWVudC5odG1sKCRzY2UuZ2V0VHJ1c3RlZEh0bWwobmdCaW5kSHRtbEdldHRlcihzY29wZSkpIHx8ICcnKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ2hhbmdlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBFdmFsdWF0ZSB0aGUgZ2l2ZW4gZXhwcmVzc2lvbiB3aGVuIHRoZSB1c2VyIGNoYW5nZXMgdGhlIGlucHV0LlxuICogVGhlIGV4cHJlc3Npb24gaXMgZXZhbHVhdGVkIGltbWVkaWF0ZWx5LCB1bmxpa2UgdGhlIEphdmFTY3JpcHQgb25jaGFuZ2UgZXZlbnRcbiAqIHdoaWNoIG9ubHkgdHJpZ2dlcnMgYXQgdGhlIGVuZCBvZiBhIGNoYW5nZSAodXN1YWxseSwgd2hlbiB0aGUgdXNlciBsZWF2ZXMgdGhlXG4gKiBmb3JtIGVsZW1lbnQgb3IgcHJlc3NlcyB0aGUgcmV0dXJuIGtleSkuXG4gKlxuICogVGhlIGBuZ0NoYW5nZWAgZXhwcmVzc2lvbiBpcyBvbmx5IGV2YWx1YXRlZCB3aGVuIGEgY2hhbmdlIGluIHRoZSBpbnB1dCB2YWx1ZSBjYXVzZXNcbiAqIGEgbmV3IHZhbHVlIHRvIGJlIGNvbW1pdHRlZCB0byB0aGUgbW9kZWwuXG4gKlxuICogSXQgd2lsbCBub3QgYmUgZXZhbHVhdGVkOlxuICogKiBpZiB0aGUgdmFsdWUgcmV0dXJuZWQgZnJvbSB0aGUgYCRwYXJzZXJzYCB0cmFuc2Zvcm1hdGlvbiBwaXBlbGluZSBoYXMgbm90IGNoYW5nZWRcbiAqICogaWYgdGhlIGlucHV0IGhhcyBjb250aW51ZWQgdG8gYmUgaW52YWxpZCBzaW5jZSB0aGUgbW9kZWwgd2lsbCBzdGF5IGBudWxsYFxuICogKiBpZiB0aGUgbW9kZWwgaXMgY2hhbmdlZCBwcm9ncmFtbWF0aWNhbGx5IGFuZCBub3QgYnkgYSBjaGFuZ2UgdG8gdGhlIGlucHV0IHZhbHVlXG4gKlxuICpcbiAqIE5vdGUsIHRoaXMgZGlyZWN0aXZlIHJlcXVpcmVzIGBuZ01vZGVsYCB0byBiZSBwcmVzZW50LlxuICpcbiAqIEBlbGVtZW50IGlucHV0XG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2hhbmdlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24gY2hhbmdlXG4gKiBpbiBpbnB1dCB2YWx1ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogPGV4YW1wbGUgbmFtZT1cIm5nQ2hhbmdlLWRpcmVjdGl2ZVwiIG1vZHVsZT1cImNoYW5nZUV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8c2NyaXB0PlxuICogICAgICAgYW5ndWxhci5tb2R1bGUoJ2NoYW5nZUV4YW1wbGUnLCBbXSlcbiAqICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICAgICAkc2NvcGUuY291bnRlciA9IDA7XG4gKiAgICAgICAgICAgJHNjb3BlLmNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgJHNjb3BlLmNvdW50ZXIrKztcbiAqICAgICAgICAgICB9O1xuICogICAgICAgICB9XSk7XG4gKiAgICAgPC9zY3JpcHQ+XG4gKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNvbmZpcm1lZFwiIG5nLWNoYW5nZT1cImNoYW5nZSgpXCIgaWQ9XCJuZy1jaGFuZ2UtZXhhbXBsZTFcIiAvPlxuICogICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY29uZmlybWVkXCIgaWQ9XCJuZy1jaGFuZ2UtZXhhbXBsZTJcIiAvPlxuICogICAgICAgPGxhYmVsIGZvcj1cIm5nLWNoYW5nZS1leGFtcGxlMlwiPkNvbmZpcm1lZDwvbGFiZWw+PGJyIC8+XG4gKiAgICAgICA8dHQ+ZGVidWcgPSB7e2NvbmZpcm1lZH19PC90dD48YnIvPlxuICogICAgICAgPHR0PmNvdW50ZXIgPSB7e2NvdW50ZXJ9fTwvdHQ+PGJyLz5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgdmFyIGNvdW50ZXIgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvdW50ZXInKSk7XG4gKiAgICAgdmFyIGRlYnVnID0gZWxlbWVudChieS5iaW5kaW5nKCdjb25maXJtZWQnKSk7XG4gKlxuICogICAgIGl0KCdzaG91bGQgZXZhbHVhdGUgdGhlIGV4cHJlc3Npb24gaWYgY2hhbmdpbmcgZnJvbSB2aWV3JywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvQ29udGFpbignMCcpO1xuICpcbiAqICAgICAgIGVsZW1lbnQoYnkuaWQoJ25nLWNoYW5nZS1leGFtcGxlMScpKS5jbGljaygpO1xuICpcbiAqICAgICAgIGV4cGVjdChjb3VudGVyLmdldFRleHQoKSkudG9Db250YWluKCcxJyk7XG4gKiAgICAgICBleHBlY3QoZGVidWcuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgaXQoJ3Nob3VsZCBub3QgZXZhbHVhdGUgdGhlIGV4cHJlc3Npb24gaWYgY2hhbmdpbmcgZnJvbSBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZWxlbWVudChieS5pZCgnbmctY2hhbmdlLWV4YW1wbGUyJykpLmNsaWNrKCk7XG5cbiAqICAgICAgIGV4cGVjdChjb3VudGVyLmdldFRleHQoKSkudG9Db250YWluKCcwJyk7XG4gKiAgICAgICBleHBlY3QoZGVidWcuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAqICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG52YXIgbmdDaGFuZ2VEaXJlY3RpdmUgPSB2YWx1ZUZuKHtcbiAgcmVzdHJpY3Q6ICdBJyxcbiAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xuICAgIGN0cmwuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMucHVzaChmdW5jdGlvbigpIHtcbiAgICAgIHNjb3BlLiRldmFsKGF0dHIubmdDaGFuZ2UpO1xuICAgIH0pO1xuICB9XG59KTtcblxuZnVuY3Rpb24gY2xhc3NEaXJlY3RpdmUobmFtZSwgc2VsZWN0b3IpIHtcbiAgbmFtZSA9ICduZ0NsYXNzJyArIG5hbWU7XG4gIHJldHVybiBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBQycsXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICB2YXIgb2xkVmFsO1xuXG4gICAgICAgIHNjb3BlLiR3YXRjaChhdHRyW25hbWVdLCBuZ0NsYXNzV2F0Y2hBY3Rpb24sIHRydWUpO1xuXG4gICAgICAgIGF0dHIuJG9ic2VydmUoJ2NsYXNzJywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBuZ0NsYXNzV2F0Y2hBY3Rpb24oc2NvcGUuJGV2YWwoYXR0cltuYW1lXSkpO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIGlmIChuYW1lICE9PSAnbmdDbGFzcycpIHtcbiAgICAgICAgICBzY29wZS4kd2F0Y2goJyRpbmRleCcsIGZ1bmN0aW9uKCRpbmRleCwgb2xkJGluZGV4KSB7XG4gICAgICAgICAgICAvLyBqc2hpbnQgYml0d2lzZTogZmFsc2VcbiAgICAgICAgICAgIHZhciBtb2QgPSAkaW5kZXggJiAxO1xuICAgICAgICAgICAgaWYgKG1vZCAhPT0gKG9sZCRpbmRleCAmIDEpKSB7XG4gICAgICAgICAgICAgIHZhciBjbGFzc2VzID0gYXJyYXlDbGFzc2VzKHNjb3BlLiRldmFsKGF0dHJbbmFtZV0pKTtcbiAgICAgICAgICAgICAgbW9kID09PSBzZWxlY3RvciA/XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3NlcyhjbGFzc2VzKSA6XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3NlcyhjbGFzc2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFkZENsYXNzZXMoY2xhc3Nlcykge1xuICAgICAgICAgIHZhciBuZXdDbGFzc2VzID0gZGlnZXN0Q2xhc3NDb3VudHMoY2xhc3NlcywgMSk7XG4gICAgICAgICAgYXR0ci4kYWRkQ2xhc3MobmV3Q2xhc3Nlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKGNsYXNzZXMpIHtcbiAgICAgICAgICB2YXIgbmV3Q2xhc3NlcyA9IGRpZ2VzdENsYXNzQ291bnRzKGNsYXNzZXMsIC0xKTtcbiAgICAgICAgICBhdHRyLiRyZW1vdmVDbGFzcyhuZXdDbGFzc2VzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRpZ2VzdENsYXNzQ291bnRzKGNsYXNzZXMsIGNvdW50KSB7XG4gICAgICAgICAgLy8gVXNlIGNyZWF0ZU1hcCgpIHRvIHByZXZlbnQgY2xhc3MgYXNzdW1wdGlvbnMgaW52b2x2aW5nIHByb3BlcnR5XG4gICAgICAgICAgLy8gbmFtZXMgaW4gT2JqZWN0LnByb3RvdHlwZVxuICAgICAgICAgIHZhciBjbGFzc0NvdW50cyA9IGVsZW1lbnQuZGF0YSgnJGNsYXNzQ291bnRzJykgfHwgY3JlYXRlTWFwKCk7XG4gICAgICAgICAgdmFyIGNsYXNzZXNUb1VwZGF0ZSA9IFtdO1xuICAgICAgICAgIGZvckVhY2goY2xhc3NlcywgZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBpZiAoY291bnQgPiAwIHx8IGNsYXNzQ291bnRzW2NsYXNzTmFtZV0pIHtcbiAgICAgICAgICAgICAgY2xhc3NDb3VudHNbY2xhc3NOYW1lXSA9IChjbGFzc0NvdW50c1tjbGFzc05hbWVdIHx8IDApICsgY291bnQ7XG4gICAgICAgICAgICAgIGlmIChjbGFzc0NvdW50c1tjbGFzc05hbWVdID09PSArKGNvdW50ID4gMCkpIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzVG9VcGRhdGUucHVzaChjbGFzc05hbWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZWxlbWVudC5kYXRhKCckY2xhc3NDb3VudHMnLCBjbGFzc0NvdW50cyk7XG4gICAgICAgICAgcmV0dXJuIGNsYXNzZXNUb1VwZGF0ZS5qb2luKCcgJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVDbGFzc2VzKG9sZENsYXNzZXMsIG5ld0NsYXNzZXMpIHtcbiAgICAgICAgICB2YXIgdG9BZGQgPSBhcnJheURpZmZlcmVuY2UobmV3Q2xhc3Nlcywgb2xkQ2xhc3Nlcyk7XG4gICAgICAgICAgdmFyIHRvUmVtb3ZlID0gYXJyYXlEaWZmZXJlbmNlKG9sZENsYXNzZXMsIG5ld0NsYXNzZXMpO1xuICAgICAgICAgIHRvQWRkID0gZGlnZXN0Q2xhc3NDb3VudHModG9BZGQsIDEpO1xuICAgICAgICAgIHRvUmVtb3ZlID0gZGlnZXN0Q2xhc3NDb3VudHModG9SZW1vdmUsIC0xKTtcbiAgICAgICAgICBpZiAodG9BZGQgJiYgdG9BZGQubGVuZ3RoKSB7XG4gICAgICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCB0b0FkZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0b1JlbW92ZSAmJiB0b1JlbW92ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKGVsZW1lbnQsIHRvUmVtb3ZlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBuZ0NsYXNzV2F0Y2hBY3Rpb24obmV3VmFsKSB7XG4gICAgICAgICAgaWYgKHNlbGVjdG9yID09PSB0cnVlIHx8IHNjb3BlLiRpbmRleCAlIDIgPT09IHNlbGVjdG9yKSB7XG4gICAgICAgICAgICB2YXIgbmV3Q2xhc3NlcyA9IGFycmF5Q2xhc3NlcyhuZXdWYWwgfHwgW10pO1xuICAgICAgICAgICAgaWYgKCFvbGRWYWwpIHtcbiAgICAgICAgICAgICAgYWRkQ2xhc3NlcyhuZXdDbGFzc2VzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWVxdWFscyhuZXdWYWwsb2xkVmFsKSkge1xuICAgICAgICAgICAgICB2YXIgb2xkQ2xhc3NlcyA9IGFycmF5Q2xhc3NlcyhvbGRWYWwpO1xuICAgICAgICAgICAgICB1cGRhdGVDbGFzc2VzKG9sZENsYXNzZXMsIG5ld0NsYXNzZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBvbGRWYWwgPSBzaGFsbG93Q29weShuZXdWYWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGFycmF5RGlmZmVyZW5jZSh0b2tlbnMxLCB0b2tlbnMyKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG5cbiAgICAgIG91dGVyOlxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IHRva2VuczFbaV07XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdG9rZW5zMi5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGlmICh0b2tlbiA9PSB0b2tlbnMyW2pdKSBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZXMucHVzaCh0b2tlbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFycmF5Q2xhc3NlcyhjbGFzc1ZhbCkge1xuICAgICAgdmFyIGNsYXNzZXMgPSBbXTtcbiAgICAgIGlmIChpc0FycmF5KGNsYXNzVmFsKSkge1xuICAgICAgICBmb3JFYWNoKGNsYXNzVmFsLCBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgY2xhc3NlcyA9IGNsYXNzZXMuY29uY2F0KGFycmF5Q2xhc3Nlcyh2KSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2xhc3NlcztcbiAgICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcoY2xhc3NWYWwpKSB7XG4gICAgICAgIHJldHVybiBjbGFzc1ZhbC5zcGxpdCgnICcpO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChjbGFzc1ZhbCkpIHtcbiAgICAgICAgZm9yRWFjaChjbGFzc1ZhbCwgZnVuY3Rpb24odiwgaykge1xuICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICBjbGFzc2VzID0gY2xhc3Nlcy5jb25jYXQoay5zcGxpdCgnICcpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2xhc3NlcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjbGFzc1ZhbDtcbiAgICB9XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ2xhc3NcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NsYXNzYCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBkeW5hbWljYWxseSBzZXQgQ1NTIGNsYXNzZXMgb24gYW4gSFRNTCBlbGVtZW50IGJ5IGRhdGFiaW5kaW5nXG4gKiBhbiBleHByZXNzaW9uIHRoYXQgcmVwcmVzZW50cyBhbGwgY2xhc3NlcyB0byBiZSBhZGRlZC5cbiAqXG4gKiBUaGUgZGlyZWN0aXZlIG9wZXJhdGVzIGluIHRocmVlIGRpZmZlcmVudCB3YXlzLCBkZXBlbmRpbmcgb24gd2hpY2ggb2YgdGhyZWUgdHlwZXMgdGhlIGV4cHJlc3Npb25cbiAqIGV2YWx1YXRlcyB0bzpcbiAqXG4gKiAxLiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZSBzdHJpbmcgc2hvdWxkIGJlIG9uZSBvciBtb3JlIHNwYWNlLWRlbGltaXRlZCBjbGFzc1xuICogbmFtZXMuXG4gKlxuICogMi4gSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGFuIG9iamVjdCwgdGhlbiBmb3IgZWFjaCBrZXktdmFsdWUgcGFpciBvZiB0aGVcbiAqIG9iamVjdCB3aXRoIGEgdHJ1dGh5IHZhbHVlIHRoZSBjb3JyZXNwb25kaW5nIGtleSBpcyB1c2VkIGFzIGEgY2xhc3MgbmFtZS5cbiAqXG4gKiAzLiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYW4gYXJyYXksIGVhY2ggZWxlbWVudCBvZiB0aGUgYXJyYXkgc2hvdWxkIGVpdGhlciBiZSBhIHN0cmluZyBhcyBpblxuICogdHlwZSAxIG9yIGFuIG9iamVjdCBhcyBpbiB0eXBlIDIuIFRoaXMgbWVhbnMgdGhhdCB5b3UgY2FuIG1peCBzdHJpbmdzIGFuZCBvYmplY3RzIHRvZ2V0aGVyIGluIGFuIGFycmF5XG4gKiB0byBnaXZlIHlvdSBtb3JlIGNvbnRyb2wgb3ZlciB3aGF0IENTUyBjbGFzc2VzIGFwcGVhci4gU2VlIHRoZSBjb2RlIGJlbG93IGZvciBhbiBleGFtcGxlIG9mIHRoaXMuXG4gKlxuICpcbiAqIFRoZSBkaXJlY3RpdmUgd29uJ3QgYWRkIGR1cGxpY2F0ZSBjbGFzc2VzIGlmIGEgcGFydGljdWxhciBjbGFzcyB3YXMgYWxyZWFkeSBzZXQuXG4gKlxuICogV2hlbiB0aGUgZXhwcmVzc2lvbiBjaGFuZ2VzLCB0aGUgcHJldmlvdXNseSBhZGRlZCBjbGFzc2VzIGFyZSByZW1vdmVkIGFuZCBvbmx5IHRoZW4gYXJlIHRoZVxuICogbmV3IGNsYXNzZXMgYWRkZWQuXG4gKlxuICogQGFuaW1hdGlvbnNcbiAqICoqYWRkKiogLSBoYXBwZW5zIGp1c3QgYmVmb3JlIHRoZSBjbGFzcyBpcyBhcHBsaWVkIHRvIHRoZSBlbGVtZW50c1xuICpcbiAqICoqcmVtb3ZlKiogLSBoYXBwZW5zIGp1c3QgYmVmb3JlIHRoZSBjbGFzcyBpcyByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnRcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGFzcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLiBUaGUgcmVzdWx0XG4gKiAgIG9mIHRoZSBldmFsdWF0aW9uIGNhbiBiZSBhIHN0cmluZyByZXByZXNlbnRpbmcgc3BhY2UgZGVsaW1pdGVkIGNsYXNzXG4gKiAgIG5hbWVzLCBhbiBhcnJheSwgb3IgYSBtYXAgb2YgY2xhc3MgbmFtZXMgdG8gYm9vbGVhbiB2YWx1ZXMuIEluIHRoZSBjYXNlIG9mIGEgbWFwLCB0aGVcbiAqICAgbmFtZXMgb2YgdGhlIHByb3BlcnRpZXMgd2hvc2UgdmFsdWVzIGFyZSB0cnV0aHkgd2lsbCBiZSBhZGRlZCBhcyBjc3MgY2xhc3NlcyB0byB0aGVcbiAqICAgZWxlbWVudC5cbiAqXG4gKiBAZXhhbXBsZSBFeGFtcGxlIHRoYXQgZGVtb25zdHJhdGVzIGJhc2ljIGJpbmRpbmdzIHZpYSBuZ0NsYXNzIGRpcmVjdGl2ZS5cbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxwIG5nLWNsYXNzPVwie3N0cmlrZTogZGVsZXRlZCwgYm9sZDogaW1wb3J0YW50LCAnaGFzLWVycm9yJzogZXJyb3J9XCI+TWFwIFN5bnRheCBFeGFtcGxlPC9wPlxuICAgICAgIDxsYWJlbD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJkZWxldGVkXCI+XG4gICAgICAgICAgZGVsZXRlZCAoYXBwbHkgXCJzdHJpa2VcIiBjbGFzcylcbiAgICAgICA8L2xhYmVsPjxicj5cbiAgICAgICA8bGFiZWw+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiaW1wb3J0YW50XCI+XG4gICAgICAgICAgaW1wb3J0YW50IChhcHBseSBcImJvbGRcIiBjbGFzcylcbiAgICAgICA8L2xhYmVsPjxicj5cbiAgICAgICA8bGFiZWw+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiZXJyb3JcIj5cbiAgICAgICAgICBlcnJvciAoYXBwbHkgXCJoYXMtZXJyb3JcIiBjbGFzcylcbiAgICAgICA8L2xhYmVsPlxuICAgICAgIDxocj5cbiAgICAgICA8cCBuZy1jbGFzcz1cInN0eWxlXCI+VXNpbmcgU3RyaW5nIFN5bnRheDwvcD5cbiAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInN0eWxlXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUeXBlOiBib2xkIHN0cmlrZSByZWRcIiBhcmlhLWxhYmVsPVwiVHlwZTogYm9sZCBzdHJpa2UgcmVkXCI+XG4gICAgICAgPGhyPlxuICAgICAgIDxwIG5nLWNsYXNzPVwiW3N0eWxlMSwgc3R5bGUyLCBzdHlsZTNdXCI+VXNpbmcgQXJyYXkgU3ludGF4PC9wPlxuICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInN0eWxlMVwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZFwiIGFyaWEtbGFiZWw9XCJUeXBlOiBib2xkLCBzdHJpa2Ugb3IgcmVkXCI+PGJyPlxuICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInN0eWxlMlwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZFwiIGFyaWEtbGFiZWw9XCJUeXBlOiBib2xkLCBzdHJpa2Ugb3IgcmVkIDJcIj48YnI+XG4gICAgICAgPGlucHV0IG5nLW1vZGVsPVwic3R5bGUzXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUeXBlOiBib2xkLCBzdHJpa2Ugb3IgcmVkXCIgYXJpYS1sYWJlbD1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWQgM1wiPjxicj5cbiAgICAgICA8aHI+XG4gICAgICAgPHAgbmctY2xhc3M9XCJbc3R5bGU0LCB7b3JhbmdlOiB3YXJuaW5nfV1cIj5Vc2luZyBBcnJheSBhbmQgTWFwIFN5bnRheDwvcD5cbiAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJzdHlsZTRcIiBwbGFjZWhvbGRlcj1cIlR5cGU6IGJvbGQsIHN0cmlrZVwiIGFyaWEtbGFiZWw9XCJUeXBlOiBib2xkLCBzdHJpa2VcIj48YnI+XG4gICAgICAgPGxhYmVsPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cIndhcm5pbmdcIj4gd2FybmluZyAoYXBwbHkgXCJvcmFuZ2VcIiBjbGFzcyk8L2xhYmVsPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAuc3RyaWtlIHtcbiAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7XG4gICAgICAgfVxuICAgICAgIC5ib2xkIHtcbiAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgfVxuICAgICAgIC5yZWQge1xuICAgICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgIH1cbiAgICAgICAuaGFzLWVycm9yIHtcbiAgICAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogeWVsbG93O1xuICAgICAgIH1cbiAgICAgICAub3JhbmdlIHtcbiAgICAgICAgICAgY29sb3I6IG9yYW5nZTtcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciBwcyA9IGVsZW1lbnQuYWxsKGJ5LmNzcygncCcpKTtcblxuICAgICAgIGl0KCdzaG91bGQgbGV0IHlvdSB0b2dnbGUgdGhlIGNsYXNzJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgIGV4cGVjdChwcy5maXJzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkubm90LnRvTWF0Y2goL2JvbGQvKTtcbiAgICAgICAgIGV4cGVjdChwcy5maXJzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkubm90LnRvTWF0Y2goL2hhcy1lcnJvci8pO1xuXG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdpbXBvcnRhbnQnKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChwcy5maXJzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9NYXRjaCgvYm9sZC8pO1xuXG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdlcnJvcicpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KHBzLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b01hdGNoKC9oYXMtZXJyb3IvKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgbGV0IHlvdSB0b2dnbGUgc3RyaW5nIGV4YW1wbGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChwcy5nZXQoMSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCcnKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlJykpLmNsZWFyKCk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZScpKS5zZW5kS2V5cygncmVkJyk7XG4gICAgICAgICBleHBlY3QocHMuZ2V0KDEpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgncmVkJyk7XG4gICAgICAgfSk7XG5cbiAgICAgICBpdCgnYXJyYXkgZXhhbXBsZSBzaG91bGQgaGF2ZSAzIGNsYXNzZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChwcy5nZXQoMikuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCcnKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlMScpKS5zZW5kS2V5cygnYm9sZCcpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUyJykpLnNlbmRLZXlzKCdzdHJpa2UnKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlMycpKS5zZW5kS2V5cygncmVkJyk7XG4gICAgICAgICBleHBlY3QocHMuZ2V0KDIpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnYm9sZCBzdHJpa2UgcmVkJyk7XG4gICAgICAgfSk7XG5cbiAgICAgICBpdCgnYXJyYXkgd2l0aCBtYXAgZXhhbXBsZSBzaG91bGQgaGF2ZSAyIGNsYXNzZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChwcy5sYXN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCcnKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlNCcpKS5zZW5kS2V5cygnYm9sZCcpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnd2FybmluZycpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KHBzLmxhc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJ2JvbGQgb3JhbmdlJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cblxuICAgIyMgQW5pbWF0aW9uc1xuXG4gICBUaGUgZXhhbXBsZSBiZWxvdyBkZW1vbnN0cmF0ZXMgaG93IHRvIHBlcmZvcm0gYW5pbWF0aW9ucyB1c2luZyBuZ0NsYXNzLlxuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBpZD1cInNldGJ0blwiIHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cInNldFwiIG5nLWNsaWNrPVwibXlWYXI9J215LWNsYXNzJ1wiPlxuICAgICAgPGlucHV0IGlkPVwiY2xlYXJidG5cIiB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJjbGVhclwiIG5nLWNsaWNrPVwibXlWYXI9JydcIj5cbiAgICAgIDxicj5cbiAgICAgIDxzcGFuIGNsYXNzPVwiYmFzZS1jbGFzc1wiIG5nLWNsYXNzPVwibXlWYXJcIj5TYW1wbGUgVGV4dDwvc3Bhbj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLmJhc2UtY2xhc3Mge1xuICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG4gICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG4gICAgICAgfVxuXG4gICAgICAgLmJhc2UtY2xhc3MubXktY2xhc3Mge1xuICAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICAgIGZvbnQtc2l6ZTozZW07XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWNsYXNzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5iYXNlLWNsYXNzJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkubm90LlxuICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pO1xuXG4gICAgICAgICBlbGVtZW50KGJ5LmlkKCdzZXRidG4nKSkuY2xpY2soKTtcblxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCcuYmFzZS1jbGFzcycpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pO1xuXG4gICAgICAgICBlbGVtZW50KGJ5LmlkKCdjbGVhcmJ0bicpKS5jbGljaygpO1xuXG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5iYXNlLWNsYXNzJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkubm90LlxuICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG5cblxuICAgIyMgbmdDbGFzcyBhbmQgcHJlLWV4aXN0aW5nIENTUzMgVHJhbnNpdGlvbnMvQW5pbWF0aW9uc1xuICAgVGhlIG5nQ2xhc3MgZGlyZWN0aXZlIHN0aWxsIHN1cHBvcnRzIENTUzMgVHJhbnNpdGlvbnMvQW5pbWF0aW9ucyBldmVuIGlmIHRoZXkgZG8gbm90IGZvbGxvdyB0aGUgbmdBbmltYXRlIENTUyBuYW1pbmcgc3RydWN0dXJlLlxuICAgVXBvbiBhbmltYXRpb24gbmdBbmltYXRlIHdpbGwgYXBwbHkgc3VwcGxlbWVudGFyeSBDU1MgY2xhc3NlcyB0byB0cmFjayB0aGUgc3RhcnQgYW5kIGVuZCBvZiBhbiBhbmltYXRpb24sIGJ1dCB0aGlzIHdpbGwgbm90IGhpbmRlclxuICAgYW55IHByZS1leGlzdGluZyBDU1MgdHJhbnNpdGlvbnMgYWxyZWFkeSBvbiB0aGUgZWxlbWVudC4gVG8gZ2V0IGFuIGlkZWEgb2Ygd2hhdCBoYXBwZW5zIGR1cmluZyBhIGNsYXNzLWJhc2VkIGFuaW1hdGlvbiwgYmUgc3VyZVxuICAgdG8gdmlldyB0aGUgc3RlcCBieSBzdGVwIGRldGFpbHMgb2Yge0BsaW5rICRhbmltYXRlI2FkZENsYXNzICRhbmltYXRlLmFkZENsYXNzfSBhbmRcbiAgIHtAbGluayAkYW5pbWF0ZSNyZW1vdmVDbGFzcyAkYW5pbWF0ZS5yZW1vdmVDbGFzc30uXG4gKi9cbnZhciBuZ0NsYXNzRGlyZWN0aXZlID0gY2xhc3NEaXJlY3RpdmUoJycsIHRydWUpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ2xhc3NPZGRcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NsYXNzT2RkYCBhbmQgYG5nQ2xhc3NFdmVuYCBkaXJlY3RpdmVzIHdvcmsgZXhhY3RseSBhc1xuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzIG5nQ2xhc3N9LCBleGNlcHQgdGhleSB3b3JrIGluXG4gKiBjb25qdW5jdGlvbiB3aXRoIGBuZ1JlcGVhdGAgYW5kIHRha2UgZWZmZWN0IG9ubHkgb24gb2RkIChldmVuKSByb3dzLlxuICpcbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIG9ubHkgd2l0aGluIHRoZSBzY29wZSBvZiBhblxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0uXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3NPZGQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC4gVGhlIHJlc3VsdFxuICogICBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcyBuYW1lcyBvciBhbiBhcnJheS5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxvbCBuZy1pbml0PVwibmFtZXM9WydKb2huJywgJ01hcnknLCAnQ2F0ZScsICdTdXonXVwiPlxuICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCI+XG4gICAgICAgICAgIDxzcGFuIG5nLWNsYXNzLW9kZD1cIidvZGQnXCIgbmctY2xhc3MtZXZlbj1cIidldmVuJ1wiPlxuICAgICAgICAgICAgIHt7bmFtZX19XG4gICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L29sPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAub2RkIHtcbiAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgfVxuICAgICAgIC5ldmVuIHtcbiAgICAgICAgIGNvbG9yOiBibHVlO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGFzcy1vZGQgYW5kIG5nLWNsYXNzLWV2ZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDApLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9vZGQvKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDEpLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9ldmVuLyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQ2xhc3NPZGREaXJlY3RpdmUgPSBjbGFzc0RpcmVjdGl2ZSgnT2RkJywgMCk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGFzc0V2ZW5cbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NsYXNzT2RkYCBhbmQgYG5nQ2xhc3NFdmVuYCBkaXJlY3RpdmVzIHdvcmsgZXhhY3RseSBhc1xuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzIG5nQ2xhc3N9LCBleGNlcHQgdGhleSB3b3JrIGluXG4gKiBjb25qdW5jdGlvbiB3aXRoIGBuZ1JlcGVhdGAgYW5kIHRha2UgZWZmZWN0IG9ubHkgb24gb2RkIChldmVuKSByb3dzLlxuICpcbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIG9ubHkgd2l0aGluIHRoZSBzY29wZSBvZiBhblxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0uXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3NFdmVuIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZVxuICogICByZXN1bHQgb2YgdGhlIGV2YWx1YXRpb24gY2FuIGJlIGEgc3RyaW5nIHJlcHJlc2VudGluZyBzcGFjZSBkZWxpbWl0ZWQgY2xhc3MgbmFtZXMgb3IgYW4gYXJyYXkuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8b2wgbmctaW5pdD1cIm5hbWVzPVsnSm9obicsICdNYXJ5JywgJ0NhdGUnLCAnU3V6J11cIj5cbiAgICAgICAgICA8bGkgbmctcmVwZWF0PVwibmFtZSBpbiBuYW1lc1wiPlxuICAgICAgICAgICA8c3BhbiBuZy1jbGFzcy1vZGQ9XCInb2RkJ1wiIG5nLWNsYXNzLWV2ZW49XCInZXZlbidcIj5cbiAgICAgICAgICAgICB7e25hbWV9fSAmbmJzcDsgJm5ic3A7ICZuYnNwO1xuICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgPC9vbD5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLm9kZCB7XG4gICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgIH1cbiAgICAgICAuZXZlbiB7XG4gICAgICAgICBjb2xvcjogYmx1ZTtcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3Mtb2RkIGFuZCBuZy1jbGFzcy1ldmVuJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5yZXBlYXRlcignbmFtZSBpbiBuYW1lcycpLnJvdygwKS5jb2x1bW4oJ25hbWUnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5cbiAgICAgICAgICAgdG9NYXRjaCgvb2RkLyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5yZXBlYXRlcignbmFtZSBpbiBuYW1lcycpLnJvdygxKS5jb2x1bW4oJ25hbWUnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5cbiAgICAgICAgICAgdG9NYXRjaCgvZXZlbi8pO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0NsYXNzRXZlbkRpcmVjdGl2ZSA9IGNsYXNzRGlyZWN0aXZlKCdFdmVuJywgMSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbG9ha1xuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZSBpcyB1c2VkIHRvIHByZXZlbnQgdGhlIEFuZ3VsYXIgaHRtbCB0ZW1wbGF0ZSBmcm9tIGJlaW5nIGJyaWVmbHlcbiAqIGRpc3BsYXllZCBieSB0aGUgYnJvd3NlciBpbiBpdHMgcmF3ICh1bmNvbXBpbGVkKSBmb3JtIHdoaWxlIHlvdXIgYXBwbGljYXRpb24gaXMgbG9hZGluZy4gVXNlIHRoaXNcbiAqIGRpcmVjdGl2ZSB0byBhdm9pZCB0aGUgdW5kZXNpcmFibGUgZmxpY2tlciBlZmZlY3QgY2F1c2VkIGJ5IHRoZSBodG1sIHRlbXBsYXRlIGRpc3BsYXkuXG4gKlxuICogVGhlIGRpcmVjdGl2ZSBjYW4gYmUgYXBwbGllZCB0byB0aGUgYDxib2R5PmAgZWxlbWVudCwgYnV0IHRoZSBwcmVmZXJyZWQgdXNhZ2UgaXMgdG8gYXBwbHlcbiAqIG11bHRpcGxlIGBuZ0Nsb2FrYCBkaXJlY3RpdmVzIHRvIHNtYWxsIHBvcnRpb25zIG9mIHRoZSBwYWdlIHRvIHBlcm1pdCBwcm9ncmVzc2l2ZSByZW5kZXJpbmdcbiAqIG9mIHRoZSBicm93c2VyIHZpZXcuXG4gKlxuICogYG5nQ2xvYWtgIHdvcmtzIGluIGNvb3BlcmF0aW9uIHdpdGggdGhlIGZvbGxvd2luZyBjc3MgcnVsZSBlbWJlZGRlZCB3aXRoaW4gYGFuZ3VsYXIuanNgIGFuZFxuICogYGFuZ3VsYXIubWluLmpzYC5cbiAqIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgaHRtbCBmaWxlIChzZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NzcCBuZ0NzcH0pLlxuICpcbiAqIGBgYGNzc1xuICogW25nXFw6Y2xvYWtdLCBbbmctY2xvYWtdLCBbZGF0YS1uZy1jbG9ha10sIFt4LW5nLWNsb2FrXSwgLm5nLWNsb2FrLCAueC1uZy1jbG9hayB7XG4gKiAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhpcyBjc3MgcnVsZSBpcyBsb2FkZWQgYnkgdGhlIGJyb3dzZXIsIGFsbCBodG1sIGVsZW1lbnRzIChpbmNsdWRpbmcgdGhlaXIgY2hpbGRyZW4pIHRoYXRcbiAqIGFyZSB0YWdnZWQgd2l0aCB0aGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZSBhcmUgaGlkZGVuLiBXaGVuIEFuZ3VsYXIgZW5jb3VudGVycyB0aGlzIGRpcmVjdGl2ZVxuICogZHVyaW5nIHRoZSBjb21waWxhdGlvbiBvZiB0aGUgdGVtcGxhdGUgaXQgZGVsZXRlcyB0aGUgYG5nQ2xvYWtgIGVsZW1lbnQgYXR0cmlidXRlLCBtYWtpbmdcbiAqIHRoZSBjb21waWxlZCBlbGVtZW50IHZpc2libGUuXG4gKlxuICogRm9yIHRoZSBiZXN0IHJlc3VsdCwgdGhlIGBhbmd1bGFyLmpzYCBzY3JpcHQgbXVzdCBiZSBsb2FkZWQgaW4gdGhlIGhlYWQgc2VjdGlvbiBvZiB0aGUgaHRtbFxuICogZG9jdW1lbnQ7IGFsdGVybmF0aXZlbHksIHRoZSBjc3MgcnVsZSBhYm92ZSBtdXN0IGJlIGluY2x1ZGVkIGluIHRoZSBleHRlcm5hbCBzdHlsZXNoZWV0IG9mIHRoZVxuICogYXBwbGljYXRpb24uXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8ZGl2IGlkPVwidGVtcGxhdGUxXCIgbmctY2xvYWs+e3sgJ2hlbGxvJyB9fTwvZGl2PlxuICAgICAgICA8ZGl2IGlkPVwidGVtcGxhdGUyXCIgY2xhc3M9XCJuZy1jbG9ha1wiPnt7ICd3b3JsZCcgfX08L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCByZW1vdmUgdGhlIHRlbXBsYXRlIGRpcmVjdGl2ZSBhbmQgY3NzIGNsYXNzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoJCgnI3RlbXBsYXRlMScpLmdldEF0dHJpYnV0ZSgnbmctY2xvYWsnKSkuXG4gICAgICAgICAgIHRvQmVOdWxsKCk7XG4gICAgICAgICBleHBlY3QoJCgnI3RlbXBsYXRlMicpLmdldEF0dHJpYnV0ZSgnbmctY2xvYWsnKSkuXG4gICAgICAgICAgIHRvQmVOdWxsKCk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqXG4gKi9cbnZhciBuZ0Nsb2FrRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG4gICAgYXR0ci4kc2V0KCduZ0Nsb2FrJywgdW5kZWZpbmVkKTtcbiAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCduZy1jbG9haycpO1xuICB9XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NvbnRyb2xsZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUgYXR0YWNoZXMgYSBjb250cm9sbGVyIGNsYXNzIHRvIHRoZSB2aWV3LiBUaGlzIGlzIGEga2V5IGFzcGVjdCBvZiBob3cgYW5ndWxhclxuICogc3VwcG9ydHMgdGhlIHByaW5jaXBsZXMgYmVoaW5kIHRoZSBNb2RlbC1WaWV3LUNvbnRyb2xsZXIgZGVzaWduIHBhdHRlcm4uXG4gKlxuICogTVZDIGNvbXBvbmVudHMgaW4gYW5ndWxhcjpcbiAqXG4gKiAqIE1vZGVsIOKAlCBNb2RlbHMgYXJlIHRoZSBwcm9wZXJ0aWVzIG9mIGEgc2NvcGU7IHNjb3BlcyBhcmUgYXR0YWNoZWQgdG8gdGhlIERPTSB3aGVyZSBzY29wZSBwcm9wZXJ0aWVzXG4gKiAgIGFyZSBhY2Nlc3NlZCB0aHJvdWdoIGJpbmRpbmdzLlxuICogKiBWaWV3IOKAlCBUaGUgdGVtcGxhdGUgKEhUTUwgd2l0aCBkYXRhIGJpbmRpbmdzKSB0aGF0IGlzIHJlbmRlcmVkIGludG8gdGhlIFZpZXcuXG4gKiAqIENvbnRyb2xsZXIg4oCUIFRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUgc3BlY2lmaWVzIGEgQ29udHJvbGxlciBjbGFzczsgdGhlIGNsYXNzIGNvbnRhaW5zIGJ1c2luZXNzXG4gKiAgIGxvZ2ljIGJlaGluZCB0aGUgYXBwbGljYXRpb24gdG8gZGVjb3JhdGUgdGhlIHNjb3BlIHdpdGggZnVuY3Rpb25zIGFuZCB2YWx1ZXNcbiAqXG4gKiBOb3RlIHRoYXQgeW91IGNhbiBhbHNvIGF0dGFjaCBjb250cm9sbGVycyB0byB0aGUgRE9NIGJ5IGRlY2xhcmluZyBpdCBpbiBhIHJvdXRlIGRlZmluaXRpb25cbiAqIHZpYSB0aGUge0BsaW5rIG5nUm91dGUuJHJvdXRlICRyb3V0ZX0gc2VydmljZS4gQSBjb21tb24gbWlzdGFrZSBpcyB0byBkZWNsYXJlIHRoZSBjb250cm9sbGVyXG4gKiBhZ2FpbiB1c2luZyBgbmctY29udHJvbGxlcmAgaW4gdGhlIHRlbXBsYXRlIGl0c2VsZi4gIFRoaXMgd2lsbCBjYXVzZSB0aGUgY29udHJvbGxlciB0byBiZSBhdHRhY2hlZFxuICogYW5kIGV4ZWN1dGVkIHR3aWNlLlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHNjb3BlXG4gKiBAcHJpb3JpdHkgNTAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ29udHJvbGxlciBOYW1lIG9mIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gcmVnaXN0ZXJlZCB3aXRoIHRoZSBjdXJyZW50XG4gKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciAkY29udHJvbGxlclByb3ZpZGVyfSBvciBhbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufVxuICogdGhhdCBvbiB0aGUgY3VycmVudCBzY29wZSBldmFsdWF0ZXMgdG8gYSBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqXG4gKiBUaGUgY29udHJvbGxlciBpbnN0YW5jZSBjYW4gYmUgcHVibGlzaGVkIGludG8gYSBzY29wZSBwcm9wZXJ0eSBieSBzcGVjaWZ5aW5nXG4gKiBgbmctY29udHJvbGxlcj1cImFzIHByb3BlcnR5TmFtZVwiYC5cbiAqXG4gKiBJZiB0aGUgY3VycmVudCBgJGNvbnRyb2xsZXJQcm92aWRlcmAgaXMgY29uZmlndXJlZCB0byB1c2UgZ2xvYmFscyAodmlhXG4gKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNhbGxvd0dsb2JhbHMgYCRjb250cm9sbGVyUHJvdmlkZXIuYWxsb3dHbG9iYWxzKClgIH0pLCB0aGlzIG1heVxuICogYWxzbyBiZSB0aGUgbmFtZSBvZiBhIGdsb2JhbGx5IGFjY2Vzc2libGUgY29uc3RydWN0b3IgZnVuY3Rpb24gKG5vdCByZWNvbW1lbmRlZCkuXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgaXMgYSBzaW1wbGUgZm9ybSBmb3IgZWRpdGluZyB1c2VyIGNvbnRhY3QgaW5mb3JtYXRpb24uIEFkZGluZywgcmVtb3ZpbmcsIGNsZWFyaW5nLCBhbmRcbiAqIGdyZWV0aW5nIGFyZSBtZXRob2RzIGRlY2xhcmVkIG9uIHRoZSBjb250cm9sbGVyIChzZWUgc291cmNlIHRhYikuIFRoZXNlIG1ldGhvZHMgY2FuXG4gKiBlYXNpbHkgYmUgY2FsbGVkIGZyb20gdGhlIGFuZ3VsYXIgbWFya3VwLiBBbnkgY2hhbmdlcyB0byB0aGUgZGF0YSBhcmUgYXV0b21hdGljYWxseSByZWZsZWN0ZWRcbiAqIGluIHRoZSBWaWV3IHdpdGhvdXQgdGhlIG5lZWQgZm9yIGEgbWFudWFsIHVwZGF0ZS5cbiAqXG4gKiBUd28gZGlmZmVyZW50IGRlY2xhcmF0aW9uIHN0eWxlcyBhcmUgaW5jbHVkZWQgYmVsb3c6XG4gKlxuICogKiBvbmUgYmluZHMgbWV0aG9kcyBhbmQgcHJvcGVydGllcyBkaXJlY3RseSBvbnRvIHRoZSBjb250cm9sbGVyIHVzaW5nIGB0aGlzYDpcbiAqIGBuZy1jb250cm9sbGVyPVwiU2V0dGluZ3NDb250cm9sbGVyMSBhcyBzZXR0aW5nc1wiYFxuICogKiBvbmUgaW5qZWN0cyBgJHNjb3BlYCBpbnRvIHRoZSBjb250cm9sbGVyOlxuICogYG5nLWNvbnRyb2xsZXI9XCJTZXR0aW5nc0NvbnRyb2xsZXIyXCJgXG4gKlxuICogVGhlIHNlY29uZCBvcHRpb24gaXMgbW9yZSBjb21tb24gaW4gdGhlIEFuZ3VsYXIgY29tbXVuaXR5LCBhbmQgaXMgZ2VuZXJhbGx5IHVzZWQgaW4gYm9pbGVycGxhdGVzXG4gKiBhbmQgaW4gdGhpcyBndWlkZS4gSG93ZXZlciwgdGhlcmUgYXJlIGFkdmFudGFnZXMgdG8gYmluZGluZyBwcm9wZXJ0aWVzIGRpcmVjdGx5IHRvIHRoZSBjb250cm9sbGVyXG4gKiBhbmQgYXZvaWRpbmcgc2NvcGUuXG4gKlxuICogKiBVc2luZyBgY29udHJvbGxlciBhc2AgbWFrZXMgaXQgb2J2aW91cyB3aGljaCBjb250cm9sbGVyIHlvdSBhcmUgYWNjZXNzaW5nIGluIHRoZSB0ZW1wbGF0ZSB3aGVuXG4gKiBtdWx0aXBsZSBjb250cm9sbGVycyBhcHBseSB0byBhbiBlbGVtZW50LlxuICogKiBJZiB5b3UgYXJlIHdyaXRpbmcgeW91ciBjb250cm9sbGVycyBhcyBjbGFzc2VzIHlvdSBoYXZlIGVhc2llciBhY2Nlc3MgdG8gdGhlIHByb3BlcnRpZXMgYW5kXG4gKiBtZXRob2RzLCB3aGljaCB3aWxsIGFwcGVhciBvbiB0aGUgc2NvcGUsIGZyb20gaW5zaWRlIHRoZSBjb250cm9sbGVyIGNvZGUuXG4gKiAqIFNpbmNlIHRoZXJlIGlzIGFsd2F5cyBhIGAuYCBpbiB0aGUgYmluZGluZ3MsIHlvdSBkb24ndCBoYXZlIHRvIHdvcnJ5IGFib3V0IHByb3RvdHlwYWxcbiAqIGluaGVyaXRhbmNlIG1hc2tpbmcgcHJpbWl0aXZlcy5cbiAqXG4gKiBUaGlzIGV4YW1wbGUgZGVtb25zdHJhdGVzIHRoZSBgY29udHJvbGxlciBhc2Agc3ludGF4LlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ0NvbnRyb2xsZXJBc1wiIG1vZHVsZT1cImNvbnRyb2xsZXJBc0V4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgIDxkaXYgaWQ9XCJjdHJsLWFzLWV4bXBsXCIgbmctY29udHJvbGxlcj1cIlNldHRpbmdzQ29udHJvbGxlcjEgYXMgc2V0dGluZ3NcIj5cbiAqICAgICAgPGxhYmVsPk5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwic2V0dGluZ3MubmFtZVwiLz48L2xhYmVsPlxuICogICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic2V0dGluZ3MuZ3JlZXQoKVwiPmdyZWV0PC9idXR0b24+PGJyLz5cbiAqICAgICAgQ29udGFjdDpcbiAqICAgICAgPHVsPlxuICogICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJjb250YWN0IGluIHNldHRpbmdzLmNvbnRhY3RzXCI+XG4gKiAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwiY29udGFjdC50eXBlXCIgYXJpYS1sYWJlbD1cIkNvbnRhY3QgbWV0aG9kXCIgaWQ9XCJzZWxlY3Rfe3skaW5kZXh9fVwiPlxuICogICAgICAgICAgICAgPG9wdGlvbj5waG9uZTwvb3B0aW9uPlxuICogICAgICAgICAgICAgPG9wdGlvbj5lbWFpbDwvb3B0aW9uPlxuICogICAgICAgICAgPC9zZWxlY3Q+XG4gKiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cImNvbnRhY3QudmFsdWVcIiBhcmlhLWxhYmVsbGVkYnk9XCJzZWxlY3Rfe3skaW5kZXh9fVwiIC8+XG4gKiAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic2V0dGluZ3MuY2xlYXJDb250YWN0KGNvbnRhY3QpXCI+Y2xlYXI8L2J1dHRvbj5cbiAqICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzZXR0aW5ncy5yZW1vdmVDb250YWN0KGNvbnRhY3QpXCIgYXJpYS1sYWJlbD1cIlJlbW92ZVwiPlg8L2J1dHRvbj5cbiAqICAgICAgICA8L2xpPlxuICogICAgICAgIDxsaT48YnV0dG9uIG5nLWNsaWNrPVwic2V0dGluZ3MuYWRkQ29udGFjdCgpXCI+YWRkPC9idXR0b24+PC9saT5cbiAqICAgICA8L3VsPlxuICogICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgYW5ndWxhci5tb2R1bGUoJ2NvbnRyb2xsZXJBc0V4YW1wbGUnLCBbXSlcbiAqICAgICAgLmNvbnRyb2xsZXIoJ1NldHRpbmdzQ29udHJvbGxlcjEnLCBTZXR0aW5nc0NvbnRyb2xsZXIxKTtcbiAqXG4gKiAgICBmdW5jdGlvbiBTZXR0aW5nc0NvbnRyb2xsZXIxKCkge1xuICogICAgICB0aGlzLm5hbWUgPSBcIkpvaG4gU21pdGhcIjtcbiAqICAgICAgdGhpcy5jb250YWN0cyA9IFtcbiAqICAgICAgICB7dHlwZTogJ3Bob25lJywgdmFsdWU6ICc0MDggNTU1IDEyMTInfSxcbiAqICAgICAgICB7dHlwZTogJ2VtYWlsJywgdmFsdWU6ICdqb2huLnNtaXRoQGV4YW1wbGUub3JnJ30gXTtcbiAqICAgIH1cbiAqXG4gKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5ncmVldCA9IGZ1bmN0aW9uKCkge1xuICogICAgICBhbGVydCh0aGlzLm5hbWUpO1xuICogICAgfTtcbiAqXG4gKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5hZGRDb250YWN0ID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgIHRoaXMuY29udGFjdHMucHVzaCh7dHlwZTogJ2VtYWlsJywgdmFsdWU6ICd5b3VybmFtZUBleGFtcGxlLm9yZyd9KTtcbiAqICAgIH07XG4gKlxuICogICAgU2V0dGluZ3NDb250cm9sbGVyMS5wcm90b3R5cGUucmVtb3ZlQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3RUb1JlbW92ZSkge1xuICogICAgIHZhciBpbmRleCA9IHRoaXMuY29udGFjdHMuaW5kZXhPZihjb250YWN0VG9SZW1vdmUpO1xuICogICAgICB0aGlzLmNvbnRhY3RzLnNwbGljZShpbmRleCwgMSk7XG4gKiAgICB9O1xuICpcbiAqICAgIFNldHRpbmdzQ29udHJvbGxlcjEucHJvdG90eXBlLmNsZWFyQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QpIHtcbiAqICAgICAgY29udGFjdC50eXBlID0gJ3Bob25lJztcbiAqICAgICAgY29udGFjdC52YWx1ZSA9ICcnO1xuICogICAgfTtcbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgaXQoJ3Nob3VsZCBjaGVjayBjb250cm9sbGVyIGFzJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICB2YXIgY29udGFpbmVyID0gZWxlbWVudChieS5pZCgnY3RybC1hcy1leG1wbCcpKTtcbiAqICAgICAgICAgZXhwZWN0KGNvbnRhaW5lci5lbGVtZW50KGJ5Lm1vZGVsKCdzZXR0aW5ncy5uYW1lJykpXG4gKiAgICAgICAgICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnSm9obiBTbWl0aCcpO1xuICpcbiAqICAgICAgIHZhciBmaXJzdFJlcGVhdCA9XG4gKiAgICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMnKS5yb3coMCkpO1xuICogICAgICAgdmFyIHNlY29uZFJlcGVhdCA9XG4gKiAgICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMnKS5yb3coMSkpO1xuICpcbiAqICAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgICAudG9CZSgnNDA4IDU1NSAxMjEyJyk7XG4gKlxuICogICAgICAgZXhwZWN0KHNlY29uZFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgICAudG9CZSgnam9obi5zbWl0aEBleGFtcGxlLm9yZycpO1xuICpcbiAqICAgICAgIGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkuYnV0dG9uVGV4dCgnY2xlYXInKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgICBleHBlY3QoZmlyc3RSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAgLnRvQmUoJycpO1xuICpcbiAqICAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LmJ1dHRvblRleHQoJ2FkZCcpKS5jbGljaygpO1xuICpcbiAqICAgICAgIGV4cGVjdChjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBzZXR0aW5ncy5jb250YWN0cycpLnJvdygyKSlcbiAqICAgICAgICAgICAuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKVxuICogICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAgLnRvQmUoJ3lvdXJuYW1lQGV4YW1wbGUub3JnJyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBUaGlzIGV4YW1wbGUgZGVtb25zdHJhdGVzIHRoZSBcImF0dGFjaCB0byBgJHNjb3BlYFwiIHN0eWxlIG9mIGNvbnRyb2xsZXIuXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIm5nQ29udHJvbGxlclwiIG1vZHVsZT1cImNvbnRyb2xsZXJFeGFtcGxlXCI+XG4gKiAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgPGRpdiBpZD1cImN0cmwtZXhtcGxcIiBuZy1jb250cm9sbGVyPVwiU2V0dGluZ3NDb250cm9sbGVyMlwiPlxuICogICAgIDxsYWJlbD5OYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm5hbWVcIi8+PC9sYWJlbD5cbiAqICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiZ3JlZXQoKVwiPmdyZWV0PC9idXR0b24+PGJyLz5cbiAqICAgICBDb250YWN0OlxuICogICAgIDx1bD5cbiAqICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJjb250YWN0IGluIGNvbnRhY3RzXCI+XG4gKiAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJjb250YWN0LnR5cGVcIiBpZD1cInNlbGVjdF97eyRpbmRleH19XCI+XG4gKiAgICAgICAgICAgIDxvcHRpb24+cGhvbmU8L29wdGlvbj5cbiAqICAgICAgICAgICAgPG9wdGlvbj5lbWFpbDwvb3B0aW9uPlxuICogICAgICAgICA8L3NlbGVjdD5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJjb250YWN0LnZhbHVlXCIgYXJpYS1sYWJlbGxlZGJ5PVwic2VsZWN0X3t7JGluZGV4fX1cIiAvPlxuICogICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY2xlYXJDb250YWN0KGNvbnRhY3QpXCI+Y2xlYXI8L2J1dHRvbj5cbiAqICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInJlbW92ZUNvbnRhY3QoY29udGFjdClcIj5YPC9idXR0b24+XG4gKiAgICAgICA8L2xpPlxuICogICAgICAgPGxpPlsgPGJ1dHRvbiBuZy1jbGljaz1cImFkZENvbnRhY3QoKVwiPmFkZDwvYnV0dG9uPiBdPC9saT5cbiAqICAgIDwvdWw+XG4gKiAgIDwvZGl2PlxuICogIDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgIGFuZ3VsYXIubW9kdWxlKCdjb250cm9sbGVyRXhhbXBsZScsIFtdKVxuICogICAgIC5jb250cm9sbGVyKCdTZXR0aW5nc0NvbnRyb2xsZXIyJywgWyckc2NvcGUnLCBTZXR0aW5nc0NvbnRyb2xsZXIyXSk7XG4gKlxuICogICBmdW5jdGlvbiBTZXR0aW5nc0NvbnRyb2xsZXIyKCRzY29wZSkge1xuICogICAgICRzY29wZS5uYW1lID0gXCJKb2huIFNtaXRoXCI7XG4gKiAgICAgJHNjb3BlLmNvbnRhY3RzID0gW1xuICogICAgICAge3R5cGU6J3Bob25lJywgdmFsdWU6JzQwOCA1NTUgMTIxMid9LFxuICogICAgICAge3R5cGU6J2VtYWlsJywgdmFsdWU6J2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnfSBdO1xuICpcbiAqICAgICAkc2NvcGUuZ3JlZXQgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgIGFsZXJ0KCRzY29wZS5uYW1lKTtcbiAqICAgICB9O1xuICpcbiAqICAgICAkc2NvcGUuYWRkQ29udGFjdCA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgJHNjb3BlLmNvbnRhY3RzLnB1c2goe3R5cGU6J2VtYWlsJywgdmFsdWU6J3lvdXJuYW1lQGV4YW1wbGUub3JnJ30pO1xuICogICAgIH07XG4gKlxuICogICAgICRzY29wZS5yZW1vdmVDb250YWN0ID0gZnVuY3Rpb24oY29udGFjdFRvUmVtb3ZlKSB7XG4gKiAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuY29udGFjdHMuaW5kZXhPZihjb250YWN0VG9SZW1vdmUpO1xuICogICAgICAgJHNjb3BlLmNvbnRhY3RzLnNwbGljZShpbmRleCwgMSk7XG4gKiAgICAgfTtcbiAqXG4gKiAgICAgJHNjb3BlLmNsZWFyQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QpIHtcbiAqICAgICAgIGNvbnRhY3QudHlwZSA9ICdwaG9uZSc7XG4gKiAgICAgICBjb250YWN0LnZhbHVlID0gJyc7XG4gKiAgICAgfTtcbiAqICAgfVxuICogIDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICBpdCgnc2hvdWxkIGNoZWNrIGNvbnRyb2xsZXInLCBmdW5jdGlvbigpIHtcbiAqICAgICAgdmFyIGNvbnRhaW5lciA9IGVsZW1lbnQoYnkuaWQoJ2N0cmwtZXhtcGwnKSk7XG4gKlxuICogICAgICBleHBlY3QoY29udGFpbmVyLmVsZW1lbnQoYnkubW9kZWwoJ25hbWUnKSlcbiAqICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJ0pvaG4gU21pdGgnKTtcbiAqXG4gKiAgICAgIHZhciBmaXJzdFJlcGVhdCA9XG4gKiAgICAgICAgICBjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBjb250YWN0cycpLnJvdygwKSk7XG4gKiAgICAgIHZhciBzZWNvbmRSZXBlYXQgPVxuICogICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gY29udGFjdHMnKS5yb3coMSkpO1xuICpcbiAqICAgICAgZXhwZWN0KGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgLnRvQmUoJzQwOCA1NTUgMTIxMicpO1xuICogICAgICBleHBlY3Qoc2Vjb25kUmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgLnRvQmUoJ2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnKTtcbiAqXG4gKiAgICAgIGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkuYnV0dG9uVGV4dCgnY2xlYXInKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgIC50b0JlKCcnKTtcbiAqXG4gKiAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LmJ1dHRvblRleHQoJ2FkZCcpKS5jbGljaygpO1xuICpcbiAqICAgICAgZXhwZWN0KGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIGNvbnRhY3RzJykucm93KDIpKVxuICogICAgICAgICAgLmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSlcbiAqICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAudG9CZSgneW91cm5hbWVAZXhhbXBsZS5vcmcnKTtcbiAqICAgIH0pO1xuICogIDwvZmlsZT5cbiAqPC9leGFtcGxlPlxuXG4gKi9cbnZhciBuZ0NvbnRyb2xsZXJEaXJlY3RpdmUgPSBbZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZTogdHJ1ZSxcbiAgICBjb250cm9sbGVyOiAnQCcsXG4gICAgcHJpb3JpdHk6IDUwMFxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDc3BcbiAqXG4gKiBAZWxlbWVudCBodG1sXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVuYWJsZXMgW0NTUCAoQ29udGVudCBTZWN1cml0eSBQb2xpY3kpXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9TZWN1cml0eS9DU1ApIHN1cHBvcnQuXG4gKlxuICogVGhpcyBpcyBuZWNlc3Nhcnkgd2hlbiBkZXZlbG9waW5nIHRoaW5ncyBsaWtlIEdvb2dsZSBDaHJvbWUgRXh0ZW5zaW9ucyBvciBVbml2ZXJzYWwgV2luZG93cyBBcHBzLlxuICpcbiAqIENTUCBmb3JiaWRzIGFwcHMgdG8gdXNlIGBldmFsYCBvciBgRnVuY3Rpb24oc3RyaW5nKWAgZ2VuZXJhdGVkIGZ1bmN0aW9ucyAoYW1vbmcgb3RoZXIgdGhpbmdzKS5cbiAqIEZvciBBbmd1bGFyIHRvIGJlIENTUCBjb21wYXRpYmxlIHRoZXJlIGFyZSBvbmx5IHR3byB0aGluZ3MgdGhhdCB3ZSBuZWVkIHRvIGRvIGRpZmZlcmVudGx5OlxuICpcbiAqIC0gZG9uJ3QgdXNlIGBGdW5jdGlvbmAgY29uc3RydWN0b3IgdG8gZ2VuZXJhdGUgb3B0aW1pemVkIHZhbHVlIGdldHRlcnNcbiAqIC0gZG9uJ3QgaW5qZWN0IGN1c3RvbSBzdHlsZXNoZWV0IGludG8gdGhlIGRvY3VtZW50XG4gKlxuICogQW5ndWxhckpTIHVzZXMgYEZ1bmN0aW9uKHN0cmluZylgIGdlbmVyYXRlZCBmdW5jdGlvbnMgYXMgYSBzcGVlZCBvcHRpbWl6YXRpb24uIEFwcGx5aW5nIHRoZSBgbmdDc3BgXG4gKiBkaXJlY3RpdmUgd2lsbCBjYXVzZSBBbmd1bGFyIHRvIHVzZSBDU1AgY29tcGF0aWJpbGl0eSBtb2RlLiBXaGVuIHRoaXMgbW9kZSBpcyBvbiBBbmd1bGFySlMgd2lsbFxuICogZXZhbHVhdGUgYWxsIGV4cHJlc3Npb25zIHVwIHRvIDMwJSBzbG93ZXIgdGhhbiBpbiBub24tQ1NQIG1vZGUsIGJ1dCBubyBzZWN1cml0eSB2aW9sYXRpb25zIHdpbGxcbiAqIGJlIHJhaXNlZC5cbiAqXG4gKiBDU1AgZm9yYmlkcyBKYXZhU2NyaXB0IHRvIGlubGluZSBzdHlsZXNoZWV0IHJ1bGVzLiBJbiBub24gQ1NQIG1vZGUgQW5ndWxhciBhdXRvbWF0aWNhbGx5XG4gKiBpbmNsdWRlcyBzb21lIENTUyBydWxlcyAoZS5nLiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xvYWsgbmdDbG9ha30pLlxuICogVG8gbWFrZSB0aG9zZSBkaXJlY3RpdmVzIHdvcmsgaW4gQ1NQIG1vZGUsIGluY2x1ZGUgdGhlIGBhbmd1bGFyLWNzcC5jc3NgIG1hbnVhbGx5LlxuICpcbiAqIEFuZ3VsYXIgdHJpZXMgdG8gYXV0b2RldGVjdCBpZiBDU1AgaXMgYWN0aXZlIGFuZCBhdXRvbWF0aWNhbGx5IHR1cm4gb24gdGhlIENTUC1zYWZlIG1vZGUuIFRoaXNcbiAqIGF1dG9kZXRlY3Rpb24gaG93ZXZlciB0cmlnZ2VycyBhIENTUCBlcnJvciB0byBiZSBsb2dnZWQgaW4gdGhlIGNvbnNvbGU6XG4gKlxuICogYGBgXG4gKiBSZWZ1c2VkIHRvIGV2YWx1YXRlIGEgc3RyaW5nIGFzIEphdmFTY3JpcHQgYmVjYXVzZSAndW5zYWZlLWV2YWwnIGlzIG5vdCBhbiBhbGxvd2VkIHNvdXJjZSBvZlxuICogc2NyaXB0IGluIHRoZSBmb2xsb3dpbmcgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZGlyZWN0aXZlOiBcImRlZmF1bHQtc3JjICdzZWxmJ1wiLiBOb3RlIHRoYXRcbiAqICdzY3JpcHQtc3JjJyB3YXMgbm90IGV4cGxpY2l0bHkgc2V0LCBzbyAnZGVmYXVsdC1zcmMnIGlzIHVzZWQgYXMgYSBmYWxsYmFjay5cbiAqIGBgYFxuICpcbiAqIFRoaXMgZXJyb3IgaXMgaGFybWxlc3MgYnV0IGFubm95aW5nLiBUbyBwcmV2ZW50IHRoZSBlcnJvciBmcm9tIHNob3dpbmcgdXAsIHB1dCB0aGUgYG5nQ3NwYFxuICogZGlyZWN0aXZlIG9uIHRoZSByb290IGVsZW1lbnQgb2YgdGhlIGFwcGxpY2F0aW9uIG9yIG9uIHRoZSBgYW5ndWxhci5qc2Agc2NyaXB0IHRhZywgd2hpY2hldmVyXG4gKiBhcHBlYXJzIGZpcnN0IGluIHRoZSBodG1sIGRvY3VtZW50LlxuICpcbiAqICpOb3RlOiBUaGlzIGRpcmVjdGl2ZSBpcyBvbmx5IGF2YWlsYWJsZSBpbiB0aGUgYG5nLWNzcGAgYW5kIGBkYXRhLW5nLWNzcGAgYXR0cmlidXRlIGZvcm0uKlxuICpcbiAqIEBleGFtcGxlXG4gKiBUaGlzIGV4YW1wbGUgc2hvd3MgaG93IHRvIGFwcGx5IHRoZSBgbmdDc3BgIGRpcmVjdGl2ZSB0byB0aGUgYGh0bWxgIHRhZy5cbiAgIGBgYGh0bWxcbiAgICAgPCFkb2N0eXBlIGh0bWw+XG4gICAgIDxodG1sIG5nLWFwcCBuZy1jc3A+XG4gICAgIC4uLlxuICAgICAuLi5cbiAgICAgPC9odG1sPlxuICAgYGBgXG4gICogQGV4YW1wbGVcbiAgICAgIC8vIE5vdGU6IHRoZSBzdWZmaXggYC5jc3BgIGluIHRoZSBleGFtcGxlIG5hbWUgdHJpZ2dlcnNcbiAgICAgIC8vIGNzcCBtb2RlIGluIG91ciBodHRwIHNlcnZlciFcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJleGFtcGxlLmNzcFwiIG1vZHVsZT1cImNzcEV4YW1wbGVcIiBuZy1jc3A9XCJ0cnVlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiTWFpbkNvbnRyb2xsZXIgYXMgY3RybFwiPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImN0cmwuaW5jKClcIiBpZD1cImluY1wiPkluY3JlbWVudDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8c3BhbiBpZD1cImNvdW50ZXJcIj5cbiAgICAgICAgICAgICAgICB7e2N0cmwuY291bnRlcn19XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY3RybC5ldmlsKClcIiBpZD1cImV2aWxcIj5FdmlsPC9idXR0b24+XG4gICAgICAgICAgICAgIDxzcGFuIGlkPVwiZXZpbEVycm9yXCI+XG4gICAgICAgICAgICAgICAge3tjdHJsLmV2aWxFcnJvcn19XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2NzcEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignTWFpbkNvbnRyb2xsZXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ZXIgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5jID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmNvdW50ZXIrKztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMuZXZpbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgLy8ganNoaW50IGV2aWw6dHJ1ZVxuICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZXZhbCgnMSsyJyk7XG4gICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZpbEVycm9yID0gZS5tZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgICB2YXIgdXRpbCwgd2ViZHJpdmVyO1xuXG4gICAgICAgICAgdmFyIGluY0J0biA9IGVsZW1lbnQoYnkuaWQoJ2luYycpKTtcbiAgICAgICAgICB2YXIgY291bnRlciA9IGVsZW1lbnQoYnkuaWQoJ2NvdW50ZXInKSk7XG4gICAgICAgICAgdmFyIGV2aWxCdG4gPSBlbGVtZW50KGJ5LmlkKCdldmlsJykpO1xuICAgICAgICAgIHZhciBldmlsRXJyb3IgPSBlbGVtZW50KGJ5LmlkKCdldmlsRXJyb3InKSk7XG5cbiAgICAgICAgICBmdW5jdGlvbiBnZXRBbmRDbGVhclNldmVyZUVycm9ycygpIHtcbiAgICAgICAgICAgIHJldHVybiBicm93c2VyLm1hbmFnZSgpLmxvZ3MoKS5nZXQoJ2Jyb3dzZXInKS50aGVuKGZ1bmN0aW9uKGJyb3dzZXJMb2cpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXJMb2cuZmlsdGVyKGZ1bmN0aW9uKGxvZ0VudHJ5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvZ0VudHJ5LmxldmVsLnZhbHVlID4gd2ViZHJpdmVyLmxvZ2dpbmcuTGV2ZWwuV0FSTklORy52YWx1ZTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBjbGVhckVycm9ycygpIHtcbiAgICAgICAgICAgIGdldEFuZENsZWFyU2V2ZXJlRXJyb3JzKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnVuY3Rpb24gZXhwZWN0Tm9FcnJvcnMoKSB7XG4gICAgICAgICAgICBnZXRBbmRDbGVhclNldmVyZUVycm9ycygpLnRoZW4oZnVuY3Rpb24oZmlsdGVyZWRMb2cpIHtcbiAgICAgICAgICAgICAgZXhwZWN0KGZpbHRlcmVkTG9nLmxlbmd0aCkudG9FcXVhbCgwKTtcbiAgICAgICAgICAgICAgaWYgKGZpbHRlcmVkTG9nLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdicm93c2VyIGNvbnNvbGUgZXJyb3JzOiAnICsgdXRpbC5pbnNwZWN0KGZpbHRlcmVkTG9nKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIGV4cGVjdEVycm9yKHJlZ2V4KSB7XG4gICAgICAgICAgICBnZXRBbmRDbGVhclNldmVyZUVycm9ycygpLnRoZW4oZnVuY3Rpb24oZmlsdGVyZWRMb2cpIHtcbiAgICAgICAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICAgIGZpbHRlcmVkTG9nLmZvckVhY2goZnVuY3Rpb24obG9nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvZy5tZXNzYWdlLm1hdGNoKHJlZ2V4KSkge1xuICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2V4cGVjdGVkIGFuIGVycm9yIHRoYXQgbWF0Y2hlcyAnICsgcmVnZXgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbiAgICAgICAgICAgIHdlYmRyaXZlciA9IHJlcXVpcmUoJ3Byb3RyYWN0b3Ivbm9kZV9tb2R1bGVzL3NlbGVuaXVtLXdlYmRyaXZlcicpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gRm9yIG5vdywgd2Ugb25seSB0ZXN0IG9uIENocm9tZSxcbiAgICAgICAgICAvLyBhcyBTYWZhcmkgZG9lcyBub3QgbG9hZCB0aGUgcGFnZSB3aXRoIFByb3RyYWN0b3IncyBpbmplY3RlZCBzY3JpcHRzLFxuICAgICAgICAgIC8vIGFuZCBGaXJlZm94IHdlYmRyaXZlciBhbHdheXMgZGlzYWJsZXMgY29udGVudCBzZWN1cml0eSBwb2xpY3kgKCM2MzU4KVxuICAgICAgICAgIGlmIChicm93c2VyLnBhcmFtcy5icm93c2VyICE9PSAnY2hyb21lJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGl0KCdzaG91bGQgbm90IHJlcG9ydCBlcnJvcnMgd2hlbiB0aGUgcGFnZSBpcyBsb2FkZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIGNsZWFyIGVycm9ycyBzbyB3ZSBhcmUgbm90IGRlcGVuZGVudCBvbiBwcmV2aW91cyB0ZXN0c1xuICAgICAgICAgICAgY2xlYXJFcnJvcnMoKTtcbiAgICAgICAgICAgIC8vIE5lZWQgdG8gcmVsb2FkIHRoZSBwYWdlIGFzIHRoZSBwYWdlIGlzIGFscmVhZHkgbG9hZGVkIHdoZW5cbiAgICAgICAgICAgIC8vIHdlIGNvbWUgaGVyZVxuICAgICAgICAgICAgYnJvd3Nlci5kcml2ZXIuZ2V0Q3VycmVudFVybCgpLnRoZW4oZnVuY3Rpb24odXJsKSB7XG4gICAgICAgICAgICAgIGJyb3dzZXIuZ2V0KHVybCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGV4cGVjdE5vRXJyb3JzKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGV2YWx1YXRlIGV4cHJlc3Npb25zJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvRXF1YWwoJzAnKTtcbiAgICAgICAgICAgIGluY0J0bi5jbGljaygpO1xuICAgICAgICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCcxJyk7XG4gICAgICAgICAgICBleHBlY3ROb0Vycm9ycygpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCB0aHJvdyBhbmQgcmVwb3J0IGFuIGVycm9yIHdoZW4gdXNpbmcgXCJldmFsXCInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV2aWxCdG4uY2xpY2soKTtcbiAgICAgICAgICAgIGV4cGVjdChldmlsRXJyb3IuZ2V0VGV4dCgpKS50b01hdGNoKC9Db250ZW50IFNlY3VyaXR5IFBvbGljeS8pO1xuICAgICAgICAgICAgZXhwZWN0RXJyb3IoL0NvbnRlbnQgU2VjdXJpdHkgUG9saWN5Lyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgKi9cblxuLy8gbmdDc3AgaXMgbm90IGltcGxlbWVudGVkIGFzIGEgcHJvcGVyIGRpcmVjdGl2ZSBhbnkgbW9yZSwgYmVjYXVzZSB3ZSBuZWVkIGl0IGJlIHByb2Nlc3NlZCB3aGlsZSB3ZVxuLy8gYm9vdHN0cmFwIHRoZSBzeXN0ZW0gKGJlZm9yZSAkcGFyc2UgaXMgaW5zdGFudGlhdGVkKSwgZm9yIHRoaXMgcmVhc29uIHdlIGp1c3QgaGF2ZVxuLy8gdGhlIGNzcC5pc0FjdGl2ZSgpIGZuIHRoYXQgbG9va3MgZm9yIG5nLWNzcCBhdHRyaWJ1dGUgYW55d2hlcmUgaW4gdGhlIGN1cnJlbnQgZG9jXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGlja1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIG5nQ2xpY2sgZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igd2hlblxuICogYW4gZWxlbWVudCBpcyBjbGlja2VkLlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGljayB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBjbGljay4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgSW5jcmVtZW50XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDxzcGFuPlxuICAgICAgICBjb3VudDoge3tjb3VudH19XG4gICAgICA8L3NwYW4+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvdW50JykpLmdldFRleHQoKSkudG9NYXRjaCgnMCcpO1xuICAgICAgICAgZWxlbWVudChieS5jc3MoJ2J1dHRvbicpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnY291bnQnKSkuZ2V0VGV4dCgpKS50b01hdGNoKCcxJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuLypcbiAqIEEgY29sbGVjdGlvbiBvZiBkaXJlY3RpdmVzIHRoYXQgYWxsb3dzIGNyZWF0aW9uIG9mIGN1c3RvbSBldmVudCBoYW5kbGVycyB0aGF0IGFyZSBkZWZpbmVkIGFzXG4gKiBhbmd1bGFyIGV4cHJlc3Npb25zIGFuZCBhcmUgY29tcGlsZWQgYW5kIGV4ZWN1dGVkIHdpdGhpbiB0aGUgY3VycmVudCBzY29wZS5cbiAqL1xudmFyIG5nRXZlbnREaXJlY3RpdmVzID0ge307XG5cbi8vIEZvciBldmVudHMgdGhhdCBtaWdodCBmaXJlIHN5bmNocm9ub3VzbHkgZHVyaW5nIERPTSBtYW5pcHVsYXRpb25cbi8vIHdlIG5lZWQgdG8gZXhlY3V0ZSB0aGVpciBldmVudCBoYW5kbGVycyBhc3luY2hyb25vdXNseSB1c2luZyAkZXZhbEFzeW5jLFxuLy8gc28gdGhhdCB0aGV5IGFyZSBub3QgZXhlY3V0ZWQgaW4gYW4gaW5jb25zaXN0ZW50IHN0YXRlLlxudmFyIGZvcmNlQXN5bmNFdmVudHMgPSB7XG4gICdibHVyJzogdHJ1ZSxcbiAgJ2ZvY3VzJzogdHJ1ZVxufTtcbmZvckVhY2goXG4gICdjbGljayBkYmxjbGljayBtb3VzZWRvd24gbW91c2V1cCBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2Vtb3ZlIG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBrZXlkb3duIGtleXVwIGtleXByZXNzIHN1Ym1pdCBmb2N1cyBibHVyIGNvcHkgY3V0IHBhc3RlJy5zcGxpdCgnICcpLFxuICBmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgICB2YXIgZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZSgnbmctJyArIGV2ZW50TmFtZSk7XG4gICAgbmdFdmVudERpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0gPSBbJyRwYXJzZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24oJHBhcnNlLCAkcm9vdFNjb3BlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICBjb21waWxlOiBmdW5jdGlvbigkZWxlbWVudCwgYXR0cikge1xuICAgICAgICAgIC8vIFdlIGV4cG9zZSB0aGUgcG93ZXJmdWwgJGV2ZW50IG9iamVjdCBvbiB0aGUgc2NvcGUgdGhhdCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIFdpbmRvdyxcbiAgICAgICAgICAvLyBldGMuIHRoYXQgaXNuJ3QgcHJvdGVjdGVkIGJ5IHRoZSBmYXN0IHBhdGhzIGluICRwYXJzZS4gIFdlIGV4cGxpY2l0bHkgcmVxdWVzdCBiZXR0ZXJcbiAgICAgICAgICAvLyBjaGVja3MgYXQgdGhlIGNvc3Qgb2Ygc3BlZWQgc2luY2UgZXZlbnQgaGFuZGxlciBleHByZXNzaW9ucyBhcmUgbm90IGV4ZWN1dGVkIGFzXG4gICAgICAgICAgLy8gZnJlcXVlbnRseSBhcyByZWd1bGFyIGNoYW5nZSBkZXRlY3Rpb24uXG4gICAgICAgICAgdmFyIGZuID0gJHBhcnNlKGF0dHJbZGlyZWN0aXZlTmFtZV0sIC8qIGludGVyY2VwdG9yRm4gKi8gbnVsbCwgLyogZXhwZW5zaXZlQ2hlY2tzICovIHRydWUpO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBuZ0V2ZW50SGFuZGxlcihzY29wZSwgZWxlbWVudCkge1xuICAgICAgICAgICAgZWxlbWVudC5vbihldmVudE5hbWUsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGZuKHNjb3BlLCB7JGV2ZW50OmV2ZW50fSk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGlmIChmb3JjZUFzeW5jRXZlbnRzW2V2ZW50TmFtZV0gJiYgJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGV2YWxBc3luYyhjYWxsYmFjayk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XTtcbiAgfVxuKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0RibGNsaWNrXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nRGJsY2xpY2tgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGEgZGJsY2xpY2sgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0RibGNsaWNrIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGEgZGJsY2xpY2suIChUaGUgRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YClcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8YnV0dG9uIG5nLWRibGNsaWNrPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKG9uIGRvdWJsZSBjbGljaylcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2Vkb3duXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgbmdNb3VzZWRvd24gZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2Vkb3duIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZWRvd24ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogbW91c2Vkb3duLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8YnV0dG9uIG5nLW1vdXNlZG93bj1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgSW5jcmVtZW50IChvbiBtb3VzZSBkb3duKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZXVwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZXVwIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZXVwIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNldXAuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2V1cD1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgSW5jcmVtZW50IChvbiBtb3VzZSB1cClcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vdXNlb3ZlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2VvdmVyIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZW92ZXIge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogbW91c2VvdmVyLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8YnV0dG9uIG5nLW1vdXNlb3Zlcj1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgSW5jcmVtZW50ICh3aGVuIG1vdXNlIGlzIG92ZXIpXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vdXNlZW50ZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlZW50ZXIgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlZW50ZXIge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogbW91c2VlbnRlci4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZWVudGVyPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgZW50ZXJzKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZWxlYXZlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZWxlYXZlIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZWxlYXZlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNlbGVhdmUuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2VsZWF2ZT1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgSW5jcmVtZW50ICh3aGVuIG1vdXNlIGxlYXZlcylcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2Vtb3ZlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZW1vdmUgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlbW92ZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZW1vdmUuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2Vtb3ZlPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgbW92ZXMpXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0tleWRvd25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGtleWRvd24gZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0tleWRvd24ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICoga2V5ZG93bi4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGAgYW5kIGNhbiBiZSBpbnRlcnJvZ2F0ZWQgZm9yIGtleUNvZGUsIGFsdEtleSwgZXRjLilcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8aW5wdXQgbmcta2V5ZG93bj1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgIGtleSBkb3duIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0tleXVwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBrZXl1cCBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nS2V5dXAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICoga2V5dXAuIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgIGFuZCBjYW4gYmUgaW50ZXJyb2dhdGVkIGZvciBrZXlDb2RlLCBhbHRLZXksIGV0Yy4pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxwPlR5cGluZyBpbiB0aGUgaW5wdXQgYm94IGJlbG93IHVwZGF0ZXMgdGhlIGtleSBjb3VudDwvcD5cbiAgICAgICA8aW5wdXQgbmcta2V5dXA9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+IGtleSB1cCBjb3VudDoge3tjb3VudH19XG5cbiAgICAgICA8cD5UeXBpbmcgaW4gdGhlIGlucHV0IGJveCBiZWxvdyB1cGRhdGVzIHRoZSBrZXljb2RlPC9wPlxuICAgICAgIDxpbnB1dCBuZy1rZXl1cD1cImV2ZW50PSRldmVudFwiPlxuICAgICAgIDxwPmV2ZW50IGtleUNvZGU6IHt7IGV2ZW50LmtleUNvZGUgfX08L3A+XG4gICAgICAgPHA+ZXZlbnQgYWx0S2V5OiB7eyBldmVudC5hbHRLZXkgfX08L3A+XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdLZXlwcmVzc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24ga2V5cHJlc3MgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nS2V5cHJlc3Mge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICoga2V5cHJlc3MuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9XG4gKiBhbmQgY2FuIGJlIGludGVycm9nYXRlZCBmb3Iga2V5Q29kZSwgYWx0S2V5LCBldGMuKVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1rZXlwcmVzcz1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgIGtleSBwcmVzcyBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTdWJtaXRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVuYWJsZXMgYmluZGluZyBhbmd1bGFyIGV4cHJlc3Npb25zIHRvIG9uc3VibWl0IGV2ZW50cy5cbiAqXG4gKiBBZGRpdGlvbmFsbHkgaXQgcHJldmVudHMgdGhlIGRlZmF1bHQgYWN0aW9uICh3aGljaCBmb3IgZm9ybSBtZWFucyBzZW5kaW5nIHRoZSByZXF1ZXN0IHRvIHRoZVxuICogc2VydmVyIGFuZCByZWxvYWRpbmcgdGhlIGN1cnJlbnQgcGFnZSksIGJ1dCBvbmx5IGlmIHRoZSBmb3JtIGRvZXMgbm90IGNvbnRhaW4gYGFjdGlvbmAsXG4gKiBgZGF0YS1hY3Rpb25gLCBvciBgeC1hY3Rpb25gIGF0dHJpYnV0ZXMuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqV2FybmluZzoqKiBCZSBjYXJlZnVsIG5vdCB0byBjYXVzZSBcImRvdWJsZS1zdWJtaXNzaW9uXCIgYnkgdXNpbmcgYm90aCB0aGUgYG5nQ2xpY2tgIGFuZFxuICogYG5nU3VibWl0YCBoYW5kbGVycyB0b2dldGhlci4gU2VlIHRoZVxuICoge0BsaW5rIGZvcm0jc3VibWl0dGluZy1hLWZvcm0tYW5kLXByZXZlbnRpbmctdGhlLWRlZmF1bHQtYWN0aW9uIGBmb3JtYCBkaXJlY3RpdmUgZG9jdW1lbnRhdGlvbn1cbiAqIGZvciBhIGRldGFpbGVkIGRpc2N1c3Npb24gb2Ygd2hlbiBgbmdTdWJtaXRgIG1heSBiZSB0cmlnZ2VyZWQuXG4gKiA8L2Rpdj5cbiAqXG4gKiBAZWxlbWVudCBmb3JtXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1N1Ym1pdCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLlxuICogKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cInN1Ym1pdEV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxzY3JpcHQ+XG4gICAgICAgIGFuZ3VsYXIubW9kdWxlKCdzdWJtaXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICRzY29wZS5saXN0ID0gW107XG4gICAgICAgICAgICAkc2NvcGUudGV4dCA9ICdoZWxsbyc7XG4gICAgICAgICAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmICgkc2NvcGUudGV4dCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnB1c2godGhpcy50ZXh0KTtcbiAgICAgICAgICAgICAgICAkc2NvcGUudGV4dCA9ICcnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1dKTtcbiAgICAgIDwvc2NyaXB0PlxuICAgICAgPGZvcm0gbmctc3VibWl0PVwic3VibWl0KClcIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgRW50ZXIgdGV4dCBhbmQgaGl0IGVudGVyOlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInRleHRcIiBuYW1lPVwidGV4dFwiIC8+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIgaWQ9XCJzdWJtaXRcIiB2YWx1ZT1cIlN1Ym1pdFwiIC8+XG4gICAgICAgIDxwcmU+bGlzdD17e2xpc3R9fTwvcHJlPlxuICAgICAgPC9mb3JtPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXN1Ym1pdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbGlzdCcpKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3Q9W10nKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCcjc3VibWl0JykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9Db250YWluKCdoZWxsbycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3RleHQnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0JlKCcnKTtcbiAgICAgICB9KTtcbiAgICAgICBpdCgnc2hvdWxkIGlnbm9yZSBlbXB0eSBzdHJpbmdzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9CZSgnbGlzdD1bXScpO1xuICAgICAgICAgZWxlbWVudChieS5jc3MoJyNzdWJtaXQnKSkuY2xpY2soKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCcjc3VibWl0JykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9Db250YWluKCdoZWxsbycpO1xuICAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdGb2N1c1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gZm9jdXMgZXZlbnQuXG4gKlxuICogTm90ZTogQXMgdGhlIGBmb2N1c2AgZXZlbnQgaXMgZXhlY3V0ZWQgc3luY2hyb25vdXNseSB3aGVuIGNhbGxpbmcgYGlucHV0LmZvY3VzKClgXG4gKiBBbmd1bGFySlMgZXhlY3V0ZXMgdGhlIGV4cHJlc3Npb24gdXNpbmcgYHNjb3BlLiRldmFsQXN5bmNgIGlmIHRoZSBldmVudCBpcyBmaXJlZFxuICogZHVyaW5nIGFuIGAkYXBwbHlgIHRvIGVuc3VyZSBhIGNvbnNpc3RlbnQgc3RhdGUuXG4gKlxuICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdGb2N1cyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBmb2N1cy4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAqIFNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja31cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmx1clxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gYmx1ciBldmVudC5cbiAqXG4gKiBBIFtibHVyIGV2ZW50XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9FdmVudHMvYmx1cikgZmlyZXMgd2hlblxuICogYW4gZWxlbWVudCBoYXMgbG9zdCBmb2N1cy5cbiAqXG4gKiBOb3RlOiBBcyB0aGUgYGJsdXJgIGV2ZW50IGlzIGV4ZWN1dGVkIHN5bmNocm9ub3VzbHkgYWxzbyBkdXJpbmcgRE9NIG1hbmlwdWxhdGlvbnNcbiAqIChlLmcuIHJlbW92aW5nIGEgZm9jdXNzZWQgaW5wdXQpLFxuICogQW5ndWxhckpTIGV4ZWN1dGVzIHRoZSBleHByZXNzaW9uIHVzaW5nIGBzY29wZS4kZXZhbEFzeW5jYCBpZiB0aGUgZXZlbnQgaXMgZmlyZWRcbiAqIGR1cmluZyBhbiBgJGFwcGx5YCB0byBlbnN1cmUgYSBjb25zaXN0ZW50IHN0YXRlLlxuICpcbiAqIEBlbGVtZW50IHdpbmRvdywgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGFcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmx1ciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBibHVyLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICogU2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfVxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDb3B5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBjb3B5IGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IHdpbmRvdywgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGFcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ29weSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBjb3B5LiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8aW5wdXQgbmctY29weT1cImNvcGllZD10cnVlXCIgbmctaW5pdD1cImNvcGllZD1mYWxzZTsgdmFsdWU9J2NvcHkgbWUnXCIgbmctbW9kZWw9XCJ2YWx1ZVwiPlxuICAgICAgY29waWVkOiB7e2NvcGllZH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ3V0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBjdXQgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDdXQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogY3V0LiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8aW5wdXQgbmctY3V0PVwiY3V0PXRydWVcIiBuZy1pbml0PVwiY3V0PWZhbHNlOyB2YWx1ZT0nY3V0IG1lJ1wiIG5nLW1vZGVsPVwidmFsdWVcIj5cbiAgICAgIGN1dDoge3tjdXR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1Bhc3RlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBwYXN0ZSBldmVudC5cbiAqXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1Bhc3RlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIHBhc3RlLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8aW5wdXQgbmctcGFzdGU9XCJwYXN0ZT10cnVlXCIgbmctaW5pdD1cInBhc3RlPWZhbHNlXCIgcGxhY2Vob2xkZXI9J3Bhc3RlIGhlcmUnPlxuICAgICAgcGFzdGVkOiB7e3Bhc3RlfX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdJZlxuICogQHJlc3RyaWN0IEFcbiAqIEBtdWx0aUVsZW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdJZmAgZGlyZWN0aXZlIHJlbW92ZXMgb3IgcmVjcmVhdGVzIGEgcG9ydGlvbiBvZiB0aGUgRE9NIHRyZWUgYmFzZWQgb24gYW5cbiAqIHtleHByZXNzaW9ufS4gSWYgdGhlIGV4cHJlc3Npb24gYXNzaWduZWQgdG8gYG5nSWZgIGV2YWx1YXRlcyB0byBhIGZhbHNlXG4gKiB2YWx1ZSB0aGVuIHRoZSBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NLCBvdGhlcndpc2UgYSBjbG9uZSBvZiB0aGVcbiAqIGVsZW1lbnQgaXMgcmVpbnNlcnRlZCBpbnRvIHRoZSBET00uXG4gKlxuICogYG5nSWZgIGRpZmZlcnMgZnJvbSBgbmdTaG93YCBhbmQgYG5nSGlkZWAgaW4gdGhhdCBgbmdJZmAgY29tcGxldGVseSByZW1vdmVzIGFuZCByZWNyZWF0ZXMgdGhlXG4gKiBlbGVtZW50IGluIHRoZSBET00gcmF0aGVyIHRoYW4gY2hhbmdpbmcgaXRzIHZpc2liaWxpdHkgdmlhIHRoZSBgZGlzcGxheWAgY3NzIHByb3BlcnR5LiAgQSBjb21tb25cbiAqIGNhc2Ugd2hlbiB0aGlzIGRpZmZlcmVuY2UgaXMgc2lnbmlmaWNhbnQgaXMgd2hlbiB1c2luZyBjc3Mgc2VsZWN0b3JzIHRoYXQgcmVseSBvbiBhbiBlbGVtZW50J3NcbiAqIHBvc2l0aW9uIHdpdGhpbiB0aGUgRE9NLCBzdWNoIGFzIHRoZSBgOmZpcnN0LWNoaWxkYCBvciBgOmxhc3QtY2hpbGRgIHBzZXVkby1jbGFzc2VzLlxuICpcbiAqIE5vdGUgdGhhdCB3aGVuIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCB1c2luZyBgbmdJZmAgaXRzIHNjb3BlIGlzIGRlc3Ryb3llZCBhbmQgYSBuZXcgc2NvcGVcbiAqIGlzIGNyZWF0ZWQgd2hlbiB0aGUgZWxlbWVudCBpcyByZXN0b3JlZC4gIFRoZSBzY29wZSBjcmVhdGVkIHdpdGhpbiBgbmdJZmAgaW5oZXJpdHMgZnJvbVxuICogaXRzIHBhcmVudCBzY29wZSB1c2luZ1xuICogW3Byb3RvdHlwYWwgaW5oZXJpdGFuY2VdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvd2lraS9VbmRlcnN0YW5kaW5nLVNjb3BlcyNqYXZhc2NyaXB0LXByb3RvdHlwYWwtaW5oZXJpdGFuY2UpLlxuICogQW4gaW1wb3J0YW50IGltcGxpY2F0aW9uIG9mIHRoaXMgaXMgaWYgYG5nTW9kZWxgIGlzIHVzZWQgd2l0aGluIGBuZ0lmYCB0byBiaW5kIHRvXG4gKiBhIGphdmFzY3JpcHQgcHJpbWl0aXZlIGRlZmluZWQgaW4gdGhlIHBhcmVudCBzY29wZS4gSW4gdGhpcyBjYXNlIGFueSBtb2RpZmljYXRpb25zIG1hZGUgdG8gdGhlXG4gKiB2YXJpYWJsZSB3aXRoaW4gdGhlIGNoaWxkIHNjb3BlIHdpbGwgb3ZlcnJpZGUgKGhpZGUpIHRoZSB2YWx1ZSBpbiB0aGUgcGFyZW50IHNjb3BlLlxuICpcbiAqIEFsc28sIGBuZ0lmYCByZWNyZWF0ZXMgZWxlbWVudHMgdXNpbmcgdGhlaXIgY29tcGlsZWQgc3RhdGUuIEFuIGV4YW1wbGUgb2YgdGhpcyBiZWhhdmlvclxuICogaXMgaWYgYW4gZWxlbWVudCdzIGNsYXNzIGF0dHJpYnV0ZSBpcyBkaXJlY3RseSBtb2RpZmllZCBhZnRlciBpdCdzIGNvbXBpbGVkLCB1c2luZyBzb21ldGhpbmcgbGlrZVxuICogalF1ZXJ5J3MgYC5hZGRDbGFzcygpYCBtZXRob2QsIGFuZCB0aGUgZWxlbWVudCBpcyBsYXRlciByZW1vdmVkLiBXaGVuIGBuZ0lmYCByZWNyZWF0ZXMgdGhlIGVsZW1lbnRcbiAqIHRoZSBhZGRlZCBjbGFzcyB3aWxsIGJlIGxvc3QgYmVjYXVzZSB0aGUgb3JpZ2luYWwgY29tcGlsZWQgc3RhdGUgaXMgdXNlZCB0byByZWdlbmVyYXRlIHRoZSBlbGVtZW50LlxuICpcbiAqIEFkZGl0aW9uYWxseSwgeW91IGNhbiBwcm92aWRlIGFuaW1hdGlvbnMgdmlhIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgdG8gYW5pbWF0ZSB0aGUgYGVudGVyYFxuICogYW5kIGBsZWF2ZWAgZWZmZWN0cy5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogZW50ZXIgLSBoYXBwZW5zIGp1c3QgYWZ0ZXIgdGhlIGBuZ0lmYCBjb250ZW50cyBjaGFuZ2UgYW5kIGEgbmV3IERPTSBlbGVtZW50IGlzIGNyZWF0ZWQgYW5kIGluamVjdGVkIGludG8gdGhlIGBuZ0lmYCBjb250YWluZXJcbiAqIGxlYXZlIC0gaGFwcGVucyBqdXN0IGJlZm9yZSB0aGUgYG5nSWZgIGNvbnRlbnRzIGFyZSByZW1vdmVkIGZyb20gdGhlIERPTVxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHNjb3BlXG4gKiBAcHJpb3JpdHkgNjAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nSWYgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIGZhbHN5IHRoZW5cbiAqICAgICB0aGUgZWxlbWVudCBpcyByZW1vdmVkIGZyb20gdGhlIERPTSB0cmVlLiBJZiBpdCBpcyB0cnV0aHkgYSBjb3B5IG9mIHRoZSBjb21waWxlZFxuICogICAgIGVsZW1lbnQgaXMgYWRkZWQgdG8gdGhlIERPTSB0cmVlLlxuICpcbiAqIEBleGFtcGxlXG4gIDxleGFtcGxlIG1vZHVsZT1cIm5nQW5pbWF0ZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8bGFiZWw+Q2xpY2sgbWU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIiBuZy1pbml0PVwiY2hlY2tlZD10cnVlXCIgLz48L2xhYmVsPjxici8+XG4gICAgICBTaG93IHdoZW4gY2hlY2tlZDpcbiAgICAgIDxzcGFuIG5nLWlmPVwiY2hlY2tlZFwiIGNsYXNzPVwiYW5pbWF0ZS1pZlwiPlxuICAgICAgICBUaGlzIGlzIHJlbW92ZWQgd2hlbiB0aGUgY2hlY2tib3ggaXMgdW5jaGVja2VkLlxuICAgICAgPC9zcGFuPlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5hbmltYXRlLWlmIHtcbiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTtcbiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcbiAgICAgICAgcGFkZGluZzoxMHB4O1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1pZi5uZy1lbnRlciwgLmFuaW1hdGUtaWYubmctbGVhdmUge1xuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcbiAgICAgICAgdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1pZi5uZy1lbnRlcixcbiAgICAgIC5hbmltYXRlLWlmLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSB7XG4gICAgICAgIG9wYWNpdHk6MDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtaWYubmctbGVhdmUsXG4gICAgICAuYW5pbWF0ZS1pZi5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICAgICAgICBvcGFjaXR5OjE7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0lmRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gIHJldHVybiB7XG4gICAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICAgIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyxcbiAgICBwcmlvcml0eTogNjAwLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgJCR0bGI6IHRydWUsXG4gICAgbGluazogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHIsIGN0cmwsICR0cmFuc2NsdWRlKSB7XG4gICAgICAgIHZhciBibG9jaywgY2hpbGRTY29wZSwgcHJldmlvdXNFbGVtZW50cztcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgkYXR0ci5uZ0lmLCBmdW5jdGlvbiBuZ0lmV2F0Y2hBY3Rpb24odmFsdWUpIHtcblxuICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFjaGlsZFNjb3BlKSB7XG4gICAgICAgICAgICAgICR0cmFuc2NsdWRlKGZ1bmN0aW9uKGNsb25lLCBuZXdTY29wZSkge1xuICAgICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBuZXdTY29wZTtcbiAgICAgICAgICAgICAgICBjbG9uZVtjbG9uZS5sZW5ndGgrK10gPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCcgZW5kIG5nSWY6ICcgKyAkYXR0ci5uZ0lmICsgJyAnKTtcbiAgICAgICAgICAgICAgICAvLyBOb3RlOiBXZSBvbmx5IG5lZWQgdGhlIGZpcnN0L2xhc3Qgbm9kZSBvZiB0aGUgY2xvbmVkIG5vZGVzLlxuICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHdlIG5lZWQgdG8ga2VlcCB0aGUgcmVmZXJlbmNlIHRvIHRoZSBqcWxpdGUgd3JhcHBlciBhcyBpdCBtaWdodCBiZSBjaGFuZ2VkIGxhdGVyXG4gICAgICAgICAgICAgICAgLy8gYnkgYSBkaXJlY3RpdmUgd2l0aCB0ZW1wbGF0ZVVybCB3aGVuIGl0cyB0ZW1wbGF0ZSBhcnJpdmVzLlxuICAgICAgICAgICAgICAgIGJsb2NrID0ge1xuICAgICAgICAgICAgICAgICAgY2xvbmU6IGNsb25lXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjbG9uZSwgJGVsZW1lbnQucGFyZW50KCksICRlbGVtZW50KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwcmV2aW91c0VsZW1lbnRzKSB7XG4gICAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudHMucmVtb3ZlKCk7XG4gICAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudHMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoaWxkU2NvcGUpIHtcbiAgICAgICAgICAgICAgY2hpbGRTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnRzID0gZ2V0QmxvY2tOb2RlcyhibG9jay5jbG9uZSk7XG4gICAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKHByZXZpb3VzRWxlbWVudHMpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50cyA9IG51bGw7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBibG9jayA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0luY2x1ZGVcbiAqIEByZXN0cmljdCBFQ0FcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZldGNoZXMsIGNvbXBpbGVzIGFuZCBpbmNsdWRlcyBhbiBleHRlcm5hbCBIVE1MIGZyYWdtZW50LlxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBVUkwgaXMgcmVzdHJpY3RlZCB0byB0aGUgc2FtZSBkb21haW4gYW5kIHByb3RvY29sIGFzIHRoZVxuICogYXBwbGljYXRpb24gZG9jdW1lbnQuIFRoaXMgaXMgZG9uZSBieSBjYWxsaW5nIHtAbGluayAkc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybFxuICogJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmx9IG9uIGl0LiBUbyBsb2FkIHRlbXBsYXRlcyBmcm9tIG90aGVyIGRvbWFpbnMgb3IgcHJvdG9jb2xzXG4gKiB5b3UgbWF5IGVpdGhlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3Qgd2hpdGVsaXN0IHRoZW19IG9yXG4gKiB7QGxpbmsgJHNjZSN0cnVzdEFzUmVzb3VyY2VVcmwgd3JhcCB0aGVtfSBhcyB0cnVzdGVkIHZhbHVlcy4gUmVmZXIgdG8gQW5ndWxhcidzIHtAbGlua1xuICogbmcuJHNjZSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZ30uXG4gKlxuICogSW4gYWRkaXRpb24sIHRoZSBicm93c2VyJ3NcbiAqIFtTYW1lIE9yaWdpbiBQb2xpY3ldKGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvYnJvd3NlcnNlYy93aWtpL1BhcnQyI1NhbWUtb3JpZ2luX3BvbGljeV9mb3JfWE1MSHR0cFJlcXVlc3QpXG4gKiBhbmQgW0Nyb3NzLU9yaWdpbiBSZXNvdXJjZSBTaGFyaW5nIChDT1JTKV0oaHR0cDovL3d3dy53My5vcmcvVFIvY29ycy8pXG4gKiBwb2xpY3kgbWF5IGZ1cnRoZXIgcmVzdHJpY3Qgd2hldGhlciB0aGUgdGVtcGxhdGUgaXMgc3VjY2Vzc2Z1bGx5IGxvYWRlZC5cbiAqIEZvciBleGFtcGxlLCBgbmdJbmNsdWRlYCB3b24ndCB3b3JrIGZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMgb24gYWxsIGJyb3dzZXJzIGFuZCBmb3IgYGZpbGU6Ly9gXG4gKiBhY2Nlc3Mgb24gc29tZSBicm93c2Vycy5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogZW50ZXIgLSBhbmltYXRpb24gaXMgdXNlZCB0byBicmluZyBuZXcgY29udGVudCBpbnRvIHRoZSBicm93c2VyLlxuICogbGVhdmUgLSBhbmltYXRpb24gaXMgdXNlZCB0byBhbmltYXRlIGV4aXN0aW5nIGNvbnRlbnQgYXdheS5cbiAqXG4gKiBUaGUgZW50ZXIgYW5kIGxlYXZlIGFuaW1hdGlvbiBvY2N1ciBjb25jdXJyZW50bHkuXG4gKlxuICogQHNjb3BlXG4gKiBAcHJpb3JpdHkgNDAwXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nSW5jbHVkZXxzcmMgYW5ndWxhciBleHByZXNzaW9uIGV2YWx1YXRpbmcgdG8gVVJMLiBJZiB0aGUgc291cmNlIGlzIGEgc3RyaW5nIGNvbnN0YW50LFxuICogICAgICAgICAgICAgICAgIG1ha2Ugc3VyZSB5b3Ugd3JhcCBpdCBpbiAqKnNpbmdsZSoqIHF1b3RlcywgZS5nLiBgc3JjPVwiJ215UGFydGlhbFRlbXBsYXRlLmh0bWwnXCJgLlxuICogQHBhcmFtIHtzdHJpbmc9fSBvbmxvYWQgRXhwcmVzc2lvbiB0byBldmFsdWF0ZSB3aGVuIGEgbmV3IHBhcnRpYWwgaXMgbG9hZGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gYXV0b3Njcm9sbCBXaGV0aGVyIGBuZ0luY2x1ZGVgIHNob3VsZCBjYWxsIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsXG4gKiAgICAgICAgICAgICAgICAgICRhbmNob3JTY3JvbGx9IHRvIHNjcm9sbCB0aGUgdmlld3BvcnQgYWZ0ZXIgdGhlIGNvbnRlbnQgaXMgbG9hZGVkLlxuICpcbiAqICAgICAgICAgICAgICAgICAgLSBJZiB0aGUgYXR0cmlidXRlIGlzIG5vdCBzZXQsIGRpc2FibGUgc2Nyb2xsaW5nLlxuICogICAgICAgICAgICAgICAgICAtIElmIHRoZSBhdHRyaWJ1dGUgaXMgc2V0IHdpdGhvdXQgdmFsdWUsIGVuYWJsZSBzY3JvbGxpbmcuXG4gKiAgICAgICAgICAgICAgICAgIC0gT3RoZXJ3aXNlIGVuYWJsZSBzY3JvbGxpbmcgb25seSBpZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1dGh5IHZhbHVlLlxuICpcbiAqIEBleGFtcGxlXG4gIDxleGFtcGxlIG1vZHVsZT1cImluY2x1ZGVFeGFtcGxlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwidGVtcGxhdGVcIiBuZy1vcHRpb25zPVwidC5uYW1lIGZvciB0IGluIHRlbXBsYXRlc1wiPlxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+KGJsYW5rKTwvb3B0aW9uPlxuICAgICAgIDwvc2VsZWN0PlxuICAgICAgIHVybCBvZiB0aGUgdGVtcGxhdGU6IDxjb2RlPnt7dGVtcGxhdGUudXJsfX08L2NvZGU+XG4gICAgICAgPGhyLz5cbiAgICAgICA8ZGl2IGNsYXNzPVwic2xpZGUtYW5pbWF0ZS1jb250YWluZXJcIj5cbiAgICAgICAgIDxkaXYgY2xhc3M9XCJzbGlkZS1hbmltYXRlXCIgbmctaW5jbHVkZT1cInRlbXBsYXRlLnVybFwiPjwvZGl2PlxuICAgICAgIDwvZGl2PlxuICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ2luY2x1ZGVFeGFtcGxlJywgWyduZ0FuaW1hdGUnXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUudGVtcGxhdGVzID1cbiAgICAgICAgICAgIFsgeyBuYW1lOiAndGVtcGxhdGUxLmh0bWwnLCB1cmw6ICd0ZW1wbGF0ZTEuaHRtbCd9LFxuICAgICAgICAgICAgICB7IG5hbWU6ICd0ZW1wbGF0ZTIuaHRtbCcsIHVybDogJ3RlbXBsYXRlMi5odG1sJ30gXTtcbiAgICAgICAgICAkc2NvcGUudGVtcGxhdGUgPSAkc2NvcGUudGVtcGxhdGVzWzBdO1xuICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwidGVtcGxhdGUxLmh0bWxcIj5cbiAgICAgIENvbnRlbnQgb2YgdGVtcGxhdGUxLmh0bWxcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInRlbXBsYXRlMi5odG1sXCI+XG4gICAgICBDb250ZW50IG9mIHRlbXBsYXRlMi5odG1sXG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLnNsaWRlLWFuaW1hdGUtY29udGFpbmVyIHtcbiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7XG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGhlaWdodDo0MHB4O1xuICAgICAgICBvdmVyZmxvdzpoaWRkZW47XG4gICAgICB9XG5cbiAgICAgIC5zbGlkZS1hbmltYXRlIHtcbiAgICAgICAgcGFkZGluZzoxMHB4O1xuICAgICAgfVxuXG4gICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1lbnRlciwgLnNsaWRlLWFuaW1hdGUubmctbGVhdmUge1xuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcbiAgICAgICAgdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xuXG4gICAgICAgIHBvc2l0aW9uOmFic29sdXRlO1xuICAgICAgICB0b3A6MDtcbiAgICAgICAgbGVmdDowO1xuICAgICAgICByaWdodDowO1xuICAgICAgICBib3R0b206MDtcbiAgICAgICAgZGlzcGxheTpibG9jaztcbiAgICAgICAgcGFkZGluZzoxMHB4O1xuICAgICAgfVxuXG4gICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1lbnRlciB7XG4gICAgICAgIHRvcDotNTBweDtcbiAgICAgIH1cbiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7XG4gICAgICAgIHRvcDowO1xuICAgICAgfVxuXG4gICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1sZWF2ZSB7XG4gICAgICAgIHRvcDowO1xuICAgICAgfVxuICAgICAgLnNsaWRlLWFuaW1hdGUubmctbGVhdmUubmctbGVhdmUtYWN0aXZlIHtcbiAgICAgICAgdG9wOjUwcHg7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciB0ZW1wbGF0ZVNlbGVjdCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RlbXBsYXRlJykpO1xuICAgICAgdmFyIGluY2x1ZGVFbGVtID0gZWxlbWVudChieS5jc3MoJ1tuZy1pbmNsdWRlXScpKTtcblxuICAgICAgaXQoJ3Nob3VsZCBsb2FkIHRlbXBsYXRlMS5odG1sJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdChpbmNsdWRlRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL0NvbnRlbnQgb2YgdGVtcGxhdGUxLmh0bWwvKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGxvYWQgdGVtcGxhdGUyLmh0bWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT0gJ2ZpcmVmb3gnKSB7XG4gICAgICAgICAgLy8gRmlyZWZveCBjYW4ndCBoYW5kbGUgdXNpbmcgc2VsZWN0c1xuICAgICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy80ODBcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuY2xpY2soKTtcbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgyKS5jbGljaygpO1xuICAgICAgICBleHBlY3QoaW5jbHVkZUVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9Db250ZW50IG9mIHRlbXBsYXRlMi5odG1sLyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2UgdG8gYmxhbmsnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT0gJ2ZpcmVmb3gnKSB7XG4gICAgICAgICAgLy8gRmlyZWZveCBjYW4ndCBoYW5kbGUgdXNpbmcgc2VsZWN0c1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0ZW1wbGF0ZVNlbGVjdC5jbGljaygpO1xuICAgICAgICB0ZW1wbGF0ZVNlbGVjdC5hbGwoYnkuY3NzKCdvcHRpb24nKSkuZ2V0KDApLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChpbmNsdWRlRWxlbS5pc1ByZXNlbnQoKSkudG9CZShmYWxzZSk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGV2ZW50XG4gKiBAbmFtZSBuZ0luY2x1ZGUjJGluY2x1ZGVDb250ZW50UmVxdWVzdGVkXG4gKiBAZXZlbnRUeXBlIGVtaXQgb24gdGhlIHNjb3BlIG5nSW5jbHVkZSB3YXMgZGVjbGFyZWQgaW5cbiAqIEBkZXNjcmlwdGlvblxuICogRW1pdHRlZCBldmVyeSB0aW1lIHRoZSBuZ0luY2x1ZGUgY29udGVudCBpcyByZXF1ZXN0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFuZ3VsYXJFdmVudCBTeW50aGV0aWMgZXZlbnQgb2JqZWN0LlxuICogQHBhcmFtIHtTdHJpbmd9IHNyYyBVUkwgb2YgY29udGVudCB0byBsb2FkLlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZXZlbnRcbiAqIEBuYW1lIG5nSW5jbHVkZSMkaW5jbHVkZUNvbnRlbnRMb2FkZWRcbiAqIEBldmVudFR5cGUgZW1pdCBvbiB0aGUgY3VycmVudCBuZ0luY2x1ZGUgc2NvcGVcbiAqIEBkZXNjcmlwdGlvblxuICogRW1pdHRlZCBldmVyeSB0aW1lIHRoZSBuZ0luY2x1ZGUgY29udGVudCBpcyByZWxvYWRlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gKiBAcGFyYW0ge1N0cmluZ30gc3JjIFVSTCBvZiBjb250ZW50IHRvIGxvYWQuXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBldmVudFxuICogQG5hbWUgbmdJbmNsdWRlIyRpbmNsdWRlQ29udGVudEVycm9yXG4gKiBAZXZlbnRUeXBlIGVtaXQgb24gdGhlIHNjb3BlIG5nSW5jbHVkZSB3YXMgZGVjbGFyZWQgaW5cbiAqIEBkZXNjcmlwdGlvblxuICogRW1pdHRlZCB3aGVuIGEgdGVtcGxhdGUgSFRUUCByZXF1ZXN0IHlpZWxkcyBhbiBlcnJvbmVvdXMgcmVzcG9uc2UgKHN0YXR1cyA8IDIwMCB8fCBzdGF0dXMgPiAyOTkpXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFuZ3VsYXJFdmVudCBTeW50aGV0aWMgZXZlbnQgb2JqZWN0LlxuICogQHBhcmFtIHtTdHJpbmd9IHNyYyBVUkwgb2YgY29udGVudCB0byBsb2FkLlxuICovXG52YXIgbmdJbmNsdWRlRGlyZWN0aXZlID0gWyckdGVtcGxhdGVSZXF1ZXN0JywgJyRhbmNob3JTY3JvbGwnLCAnJGFuaW1hdGUnLFxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oJHRlbXBsYXRlUmVxdWVzdCwgICAkYW5jaG9yU2Nyb2xsLCAgICRhbmltYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFQ0EnLFxuICAgIHByaW9yaXR5OiA0MDAsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICAgIGNvbnRyb2xsZXI6IGFuZ3VsYXIubm9vcCxcbiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG4gICAgICB2YXIgc3JjRXhwID0gYXR0ci5uZ0luY2x1ZGUgfHwgYXR0ci5zcmMsXG4gICAgICAgICAgb25sb2FkRXhwID0gYXR0ci5vbmxvYWQgfHwgJycsXG4gICAgICAgICAgYXV0b1Njcm9sbEV4cCA9IGF0dHIuYXV0b3Njcm9sbDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCAkZWxlbWVudCwgJGF0dHIsIGN0cmwsICR0cmFuc2NsdWRlKSB7XG4gICAgICAgIHZhciBjaGFuZ2VDb3VudGVyID0gMCxcbiAgICAgICAgICAgIGN1cnJlbnRTY29wZSxcbiAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudCxcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50O1xuXG4gICAgICAgIHZhciBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHByZXZpb3VzRWxlbWVudCkge1xuICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGN1cnJlbnRTY29wZSkge1xuICAgICAgICAgICAgY3VycmVudFNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgICBjdXJyZW50U2NvcGUgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKGN1cnJlbnRFbGVtZW50KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBjdXJyZW50RWxlbWVudDtcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuJHdhdGNoKHNyY0V4cCwgZnVuY3Rpb24gbmdJbmNsdWRlV2F0Y2hBY3Rpb24oc3JjKSB7XG4gICAgICAgICAgdmFyIGFmdGVyQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoaXNEZWZpbmVkKGF1dG9TY3JvbGxFeHApICYmICghYXV0b1Njcm9sbEV4cCB8fCBzY29wZS4kZXZhbChhdXRvU2Nyb2xsRXhwKSkpIHtcbiAgICAgICAgICAgICAgJGFuY2hvclNjcm9sbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIHRoaXNDaGFuZ2VJZCA9ICsrY2hhbmdlQ291bnRlcjtcblxuICAgICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgIC8vc2V0IHRoZSAybmQgcGFyYW0gdG8gdHJ1ZSB0byBpZ25vcmUgdGhlIHRlbXBsYXRlIHJlcXVlc3QgZXJyb3Igc28gdGhhdCB0aGUgaW5uZXJcbiAgICAgICAgICAgIC8vY29udGVudHMgYW5kIHNjb3BlIGNhbiBiZSBjbGVhbmVkIHVwLlxuICAgICAgICAgICAgJHRlbXBsYXRlUmVxdWVzdChzcmMsIHRydWUpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXNDaGFuZ2VJZCAhPT0gY2hhbmdlQ291bnRlcikgcmV0dXJuO1xuICAgICAgICAgICAgICB2YXIgbmV3U2NvcGUgPSBzY29wZS4kbmV3KCk7XG4gICAgICAgICAgICAgIGN0cmwudGVtcGxhdGUgPSByZXNwb25zZTtcblxuICAgICAgICAgICAgICAvLyBOb3RlOiBUaGlzIHdpbGwgYWxzbyBsaW5rIGFsbCBjaGlsZHJlbiBvZiBuZy1pbmNsdWRlIHRoYXQgd2VyZSBjb250YWluZWQgaW4gdGhlIG9yaWdpbmFsXG4gICAgICAgICAgICAgIC8vIGh0bWwuIElmIHRoYXQgY29udGVudCBjb250YWlucyBjb250cm9sbGVycywgLi4uIHRoZXkgY291bGQgcG9sbHV0ZS9jaGFuZ2UgdGhlIHNjb3BlLlxuICAgICAgICAgICAgICAvLyBIb3dldmVyLCB1c2luZyBuZy1pbmNsdWRlIG9uIGFuIGVsZW1lbnQgd2l0aCBhZGRpdGlvbmFsIGNvbnRlbnQgZG9lcyBub3QgbWFrZSBzZW5zZS4uLlxuICAgICAgICAgICAgICAvLyBOb3RlOiBXZSBjYW4ndCByZW1vdmUgdGhlbSBpbiB0aGUgY2xvbmVBdHRjaEZuIG9mICR0cmFuc2NsdWRlIGFzIHRoYXRcbiAgICAgICAgICAgICAgLy8gZnVuY3Rpb24gaXMgY2FsbGVkIGJlZm9yZSBsaW5raW5nIHRoZSBjb250ZW50LCB3aGljaCB3b3VsZCBhcHBseSBjaGlsZFxuICAgICAgICAgICAgICAvLyBkaXJlY3RpdmVzIHRvIG5vbiBleGlzdGluZyBlbGVtZW50cy5cbiAgICAgICAgICAgICAgdmFyIGNsb25lID0gJHRyYW5zY2x1ZGUobmV3U2NvcGUsIGZ1bmN0aW9uKGNsb25lKSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCBudWxsLCAkZWxlbWVudCkudGhlbihhZnRlckFuaW1hdGlvbik7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGN1cnJlbnRTY29wZSA9IG5ld1Njb3BlO1xuICAgICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IGNsb25lO1xuXG4gICAgICAgICAgICAgIGN1cnJlbnRTY29wZS4kZW1pdCgnJGluY2x1ZGVDb250ZW50TG9hZGVkJywgc3JjKTtcbiAgICAgICAgICAgICAgc2NvcGUuJGV2YWwob25sb2FkRXhwKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpZiAodGhpc0NoYW5nZUlkID09PSBjaGFuZ2VDb3VudGVyKSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICAgICAgICAgIHNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRFcnJvcicsIHNyYyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudFJlcXVlc3RlZCcsIHNyYyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQoKTtcbiAgICAgICAgICAgIGN0cmwudGVtcGxhdGUgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vLyBUaGlzIGRpcmVjdGl2ZSBpcyBjYWxsZWQgZHVyaW5nIHRoZSAkdHJhbnNjbHVkZSBjYWxsIG9mIHRoZSBmaXJzdCBgbmdJbmNsdWRlYCBkaXJlY3RpdmUuXG4vLyBJdCB3aWxsIHJlcGxhY2UgYW5kIGNvbXBpbGUgdGhlIGNvbnRlbnQgb2YgdGhlIGVsZW1lbnQgd2l0aCB0aGUgbG9hZGVkIHRlbXBsYXRlLlxuLy8gV2UgbmVlZCB0aGlzIGRpcmVjdGl2ZSBzbyB0aGF0IHRoZSBlbGVtZW50IGNvbnRlbnQgaXMgYWxyZWFkeSBmaWxsZWQgd2hlblxuLy8gdGhlIGxpbmsgZnVuY3Rpb24gb2YgYW5vdGhlciBkaXJlY3RpdmUgb24gdGhlIHNhbWUgZWxlbWVudCBhcyBuZ0luY2x1ZGVcbi8vIGlzIGNhbGxlZC5cbnZhciBuZ0luY2x1ZGVGaWxsQ29udGVudERpcmVjdGl2ZSA9IFsnJGNvbXBpbGUnLFxuICBmdW5jdGlvbigkY29tcGlsZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0VDQScsXG4gICAgICBwcmlvcml0eTogLTQwMCxcbiAgICAgIHJlcXVpcmU6ICduZ0luY2x1ZGUnLFxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsICRlbGVtZW50LCAkYXR0ciwgY3RybCkge1xuICAgICAgICBpZiAoL1NWRy8udGVzdCgkZWxlbWVudFswXS50b1N0cmluZygpKSkge1xuICAgICAgICAgIC8vIFdlYktpdDogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNTY5OCAtLS0gU1ZHIGVsZW1lbnRzIGRvIG5vdFxuICAgICAgICAgIC8vIHN1cHBvcnQgaW5uZXJIVE1MLCBzbyBkZXRlY3QgdGhpcyBoZXJlIGFuZCB0cnkgdG8gZ2VuZXJhdGUgdGhlIGNvbnRlbnRzXG4gICAgICAgICAgLy8gc3BlY2lhbGx5LlxuICAgICAgICAgICRlbGVtZW50LmVtcHR5KCk7XG4gICAgICAgICAgJGNvbXBpbGUoanFMaXRlQnVpbGRGcmFnbWVudChjdHJsLnRlbXBsYXRlLCBkb2N1bWVudCkuY2hpbGROb2Rlcykoc2NvcGUsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIG5hbWVzcGFjZUFkYXB0ZWRDbG9uZShjbG9uZSkge1xuICAgICAgICAgICAgJGVsZW1lbnQuYXBwZW5kKGNsb25lKTtcbiAgICAgICAgICB9LCB7ZnV0dXJlUGFyZW50RWxlbWVudDogJGVsZW1lbnR9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAkZWxlbWVudC5odG1sKGN0cmwudGVtcGxhdGUpO1xuICAgICAgICAkY29tcGlsZSgkZWxlbWVudC5jb250ZW50cygpKShzY29wZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdJbml0XG4gKiBAcmVzdHJpY3QgQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdJbml0YCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBldmFsdWF0ZSBhbiBleHByZXNzaW9uIGluIHRoZVxuICogY3VycmVudCBzY29wZS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gKiBUaGUgb25seSBhcHByb3ByaWF0ZSB1c2Ugb2YgYG5nSW5pdGAgaXMgZm9yIGFsaWFzaW5nIHNwZWNpYWwgcHJvcGVydGllcyBvZlxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBgbmdSZXBlYXRgfSwgYXMgc2VlbiBpbiB0aGUgZGVtbyBiZWxvdy4gQmVzaWRlcyB0aGlzIGNhc2UsIHlvdVxuICogc2hvdWxkIHVzZSB7QGxpbmsgZ3VpZGUvY29udHJvbGxlciBjb250cm9sbGVyc30gcmF0aGVyIHRoYW4gYG5nSW5pdGBcbiAqIHRvIGluaXRpYWxpemUgdmFsdWVzIG9uIGEgc2NvcGUuXG4gKiA8L2Rpdj5cbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGUqKjogSWYgeW91IGhhdmUgYXNzaWdubWVudCBpbiBgbmdJbml0YCBhbG9uZyB3aXRoIHtAbGluayBuZy4kZmlsdGVyIGAkZmlsdGVyYH0sIG1ha2VcbiAqIHN1cmUgeW91IGhhdmUgcGFyZW50aGVzaXMgZm9yIGNvcnJlY3QgcHJlY2VkZW5jZTpcbiAqIDxwcmUgY2xhc3M9XCJwcmV0dHlwcmludFwiPlxuICogYDxkaXYgbmctaW5pdD1cInRlc3QxID0gKGRhdGEgfCBvcmRlckJ5OiduYW1lJylcIj48L2Rpdj5gXG4gKiA8L3ByZT5cbiAqIDwvZGl2PlxuICpcbiAqIEBwcmlvcml0eSA0NTBcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdJbml0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImluaXRFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICA8c2NyaXB0PlxuICAgICBhbmd1bGFyLm1vZHVsZSgnaW5pdEV4YW1wbGUnLCBbXSlcbiAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgJHNjb3BlLmxpc3QgPSBbWydhJywgJ2InXSwgWydjJywgJ2QnXV07XG4gICAgICAgfV0pO1xuICAgPC9zY3JpcHQ+XG4gICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICA8ZGl2IG5nLXJlcGVhdD1cImlubmVyTGlzdCBpbiBsaXN0XCIgbmctaW5pdD1cIm91dGVySW5kZXggPSAkaW5kZXhcIj5cbiAgICAgICA8ZGl2IG5nLXJlcGVhdD1cInZhbHVlIGluIGlubmVyTGlzdFwiIG5nLWluaXQ9XCJpbm5lckluZGV4ID0gJGluZGV4XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJleGFtcGxlLWluaXRcIj5saXN0WyB7e291dGVySW5kZXh9fSBdWyB7e2lubmVySW5kZXh9fSBdID0ge3t2YWx1ZX19Ozwvc3Bhbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9kaXY+XG4gICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBhbGlhcyBpbmRleCBwb3NpdGlvbnMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBlbGVtZW50cyA9IGVsZW1lbnQuYWxsKGJ5LmNzcygnLmV4YW1wbGUtaW5pdCcpKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50cy5nZXQoMCkuZ2V0VGV4dCgpKS50b0JlKCdsaXN0WyAwIF1bIDAgXSA9IGE7Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDEpLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMCBdWyAxIF0gPSBiOycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnRzLmdldCgyKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3RbIDEgXVsgMCBdID0gYzsnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50cy5nZXQoMykuZ2V0VGV4dCgpKS50b0JlKCdsaXN0WyAxIF1bIDEgXSA9IGQ7Jyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nSW5pdERpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHtcbiAgcHJpb3JpdHk6IDQ1MCxcbiAgY29tcGlsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByZTogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIHNjb3BlLiRldmFsKGF0dHJzLm5nSW5pdCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdMaXN0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUZXh0IGlucHV0IHRoYXQgY29udmVydHMgYmV0d2VlbiBhIGRlbGltaXRlZCBzdHJpbmcgYW5kIGFuIGFycmF5IG9mIHN0cmluZ3MuIFRoZSBkZWZhdWx0XG4gKiBkZWxpbWl0ZXIgaXMgYSBjb21tYSBmb2xsb3dlZCBieSBhIHNwYWNlIC0gZXF1aXZhbGVudCB0byBgbmctbGlzdD1cIiwgXCJgLiBZb3UgY2FuIHNwZWNpZnkgYSBjdXN0b21cbiAqIGRlbGltaXRlciBhcyB0aGUgdmFsdWUgb2YgdGhlIGBuZ0xpc3RgIGF0dHJpYnV0ZSAtIGZvciBleGFtcGxlLCBgbmctbGlzdD1cIiB8IFwiYC5cbiAqXG4gKiBUaGUgYmVoYXZpb3VyIG9mIHRoZSBkaXJlY3RpdmUgaXMgYWZmZWN0ZWQgYnkgdGhlIHVzZSBvZiB0aGUgYG5nVHJpbWAgYXR0cmlidXRlLlxuICogKiBJZiBgbmdUcmltYCBpcyBzZXQgdG8gYFwiZmFsc2VcImAgdGhlbiB3aGl0ZXNwYWNlIGFyb3VuZCBib3RoIHRoZSBzZXBhcmF0b3IgYW5kIGVhY2hcbiAqICAgbGlzdCBpdGVtIGlzIHJlc3BlY3RlZC4gVGhpcyBpbXBsaWVzIHRoYXQgdGhlIHVzZXIgb2YgdGhlIGRpcmVjdGl2ZSBpcyByZXNwb25zaWJsZSBmb3JcbiAqICAgZGVhbGluZyB3aXRoIHdoaXRlc3BhY2UgYnV0IGFsc28gYWxsb3dzIHlvdSB0byB1c2Ugd2hpdGVzcGFjZSBhcyBhIGRlbGltaXRlciwgc3VjaCBhcyBhXG4gKiAgIHRhYiBvciBuZXdsaW5lIGNoYXJhY3Rlci5cbiAqICogT3RoZXJ3aXNlIHdoaXRlc3BhY2UgYXJvdW5kIHRoZSBkZWxpbWl0ZXIgaXMgaWdub3JlZCB3aGVuIHNwbGl0dGluZyAoYWx0aG91Z2ggaXQgaXMgcmVzcGVjdGVkXG4gKiAgIHdoZW4gam9pbmluZyB0aGUgbGlzdCBpdGVtcyBiYWNrIHRvZ2V0aGVyKSBhbmQgd2hpdGVzcGFjZSBhcm91bmQgZWFjaCBsaXN0IGl0ZW0gaXMgc3RyaXBwZWRcbiAqICAgYmVmb3JlIGl0IGlzIGFkZGVkIHRvIHRoZSBtb2RlbC5cbiAqXG4gKiAjIyMgRXhhbXBsZSB3aXRoIFZhbGlkYXRpb25cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdMaXN0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImxpc3RFeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICAgICAgYW5ndWxhci5tb2R1bGUoJ2xpc3RFeGFtcGxlJywgW10pXG4gKiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICAgICRzY29wZS5uYW1lcyA9IFsnbW9ycGhldXMnLCAnbmVvJywgJ3RyaW5pdHknXTtcbiAqICAgICAgICB9XSk7XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgICAgPGxhYmVsPkxpc3Q6IDxpbnB1dCBuYW1lPVwibmFtZXNJbnB1dFwiIG5nLW1vZGVsPVwibmFtZXNcIiBuZy1saXN0IHJlcXVpcmVkPjwvbGFiZWw+XG4gKiAgICAgIDxzcGFuIHJvbGU9XCJhbGVydFwiPlxuICogICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLm5hbWVzSW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gKiAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICogICAgICA8L3NwYW4+XG4gKiAgICAgIDxicj5cbiAqICAgICAgPHR0Pm5hbWVzID0ge3tuYW1lc319PC90dD48YnIvPlxuICogICAgICA8dHQ+bXlGb3JtLm5hbWVzSW5wdXQuJHZhbGlkID0ge3tteUZvcm0ubmFtZXNJbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAqICAgICAgPHR0Pm15Rm9ybS5uYW1lc0lucHV0LiRlcnJvciA9IHt7bXlGb3JtLm5hbWVzSW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gKiAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gKiAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAqICAgICA8L2Zvcm0+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgIHZhciBsaXN0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCduYW1lcycpKTtcbiAqICAgICB2YXIgbmFtZXMgPSBlbGVtZW50KGJ5LmV4YWN0QmluZGluZygnbmFtZXMnKSk7XG4gKiAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0ubmFtZXNJbnB1dC4kdmFsaWQnKSk7XG4gKiAgICAgdmFyIGVycm9yID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZXJyb3InKSk7XG4gKlxuICogICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KG5hbWVzLmdldFRleHQoKSkudG9Db250YWluKCdbXCJtb3JwaGV1c1wiLFwibmVvXCIsXCJ0cmluaXR5XCJdJyk7XG4gKiAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAqICAgICAgIGV4cGVjdChlcnJvci5nZXRDc3NWYWx1ZSgnZGlzcGxheScpKS50b0JlKCdub25lJyk7XG4gKiAgICAgfSk7XG4gKlxuICogICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICogICAgICAgbGlzdElucHV0LmNsZWFyKCk7XG4gKiAgICAgICBsaXN0SW5wdXQuc2VuZEtleXMoJycpO1xuICpcbiAqICAgICAgIGV4cGVjdChuYW1lcy5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gKiAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gKiAgICAgICBleHBlY3QoZXJyb3IuZ2V0Q3NzVmFsdWUoJ2Rpc3BsYXknKSkubm90LnRvQmUoJ25vbmUnKTtcbiAqICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqICMjIyBFeGFtcGxlIC0gc3BsaXR0aW5nIG9uIHdoaXRlc3BhY2VcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ0xpc3QtZGlyZWN0aXZlLW5ld2xpbmVzXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICA8dGV4dGFyZWEgbmctbW9kZWw9XCJsaXN0XCIgbmctbGlzdD1cIiYjMTA7XCIgbmctdHJpbT1cImZhbHNlXCI+PC90ZXh0YXJlYT5cbiAqICAgIDxwcmU+e3sgbGlzdCB8IGpzb24gfX08L3ByZT5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgaXQoXCJzaG91bGQgc3BsaXQgdGhlIHRleHQgYnkgbmV3bGluZXNcIiwgZnVuY3Rpb24oKSB7XG4gKiAgICAgICB2YXIgbGlzdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbGlzdCcpKTtcbiAqICAgICAgIHZhciBvdXRwdXQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QgfCBqc29uJykpO1xuICogICAgICAgbGlzdElucHV0LnNlbmRLZXlzKCdhYmNcXG5kZWZcXG5naGknKTtcbiAqICAgICAgIGV4cGVjdChvdXRwdXQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ1tcXG4gIFwiYWJjXCIsXFxuICBcImRlZlwiLFxcbiAgXCJnaGlcIlxcbl0nKTtcbiAqICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IGlucHV0XG4gKiBAcGFyYW0ge3N0cmluZz19IG5nTGlzdCBvcHRpb25hbCBkZWxpbWl0ZXIgdGhhdCBzaG91bGQgYmUgdXNlZCB0byBzcGxpdCB0aGUgdmFsdWUuXG4gKi9cbnZhciBuZ0xpc3REaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHByaW9yaXR5OiAxMDAsXG4gICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gICAgICAvLyBXZSB3YW50IHRvIGNvbnRyb2wgd2hpdGVzcGFjZSB0cmltbWluZyBzbyB3ZSB1c2UgdGhpcyBjb252b2x1dGVkIGFwcHJvYWNoXG4gICAgICAvLyB0byBhY2Nlc3MgdGhlIG5nTGlzdCBhdHRyaWJ1dGUsIHdoaWNoIGRvZXNuJ3QgcHJlLXRyaW0gdGhlIGF0dHJpYnV0ZVxuICAgICAgdmFyIG5nTGlzdCA9IGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyLm5nTGlzdCkgfHwgJywgJztcbiAgICAgIHZhciB0cmltVmFsdWVzID0gYXR0ci5uZ1RyaW0gIT09ICdmYWxzZSc7XG4gICAgICB2YXIgc2VwYXJhdG9yID0gdHJpbVZhbHVlcyA/IHRyaW0obmdMaXN0KSA6IG5nTGlzdDtcblxuICAgICAgdmFyIHBhcnNlID0gZnVuY3Rpb24odmlld1ZhbHVlKSB7XG4gICAgICAgIC8vIElmIHRoZSB2aWV3VmFsdWUgaXMgaW52YWxpZCAoc2F5IHJlcXVpcmVkIGJ1dCBlbXB0eSkgaXQgd2lsbCBiZSBgdW5kZWZpbmVkYFxuICAgICAgICBpZiAoaXNVbmRlZmluZWQodmlld1ZhbHVlKSkgcmV0dXJuO1xuXG4gICAgICAgIHZhciBsaXN0ID0gW107XG5cbiAgICAgICAgaWYgKHZpZXdWYWx1ZSkge1xuICAgICAgICAgIGZvckVhY2godmlld1ZhbHVlLnNwbGl0KHNlcGFyYXRvciksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUpIGxpc3QucHVzaCh0cmltVmFsdWVzID8gdHJpbSh2YWx1ZSkgOiB2YWx1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICAgIH07XG5cbiAgICAgIGN0cmwuJHBhcnNlcnMucHVzaChwYXJzZSk7XG4gICAgICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlLmpvaW4obmdMaXN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9KTtcblxuICAgICAgLy8gT3ZlcnJpZGUgdGhlIHN0YW5kYXJkICRpc0VtcHR5IGJlY2F1c2UgYW4gZW1wdHkgYXJyYXkgbWVhbnMgdGhlIGlucHV0IGlzIGVtcHR5LlxuICAgICAgY3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUgfHwgIXZhbHVlLmxlbmd0aDtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcblxuLyogZ2xvYmFsIFZBTElEX0NMQVNTOiB0cnVlLFxuICBJTlZBTElEX0NMQVNTOiB0cnVlLFxuICBQUklTVElORV9DTEFTUzogdHJ1ZSxcbiAgRElSVFlfQ0xBU1M6IHRydWUsXG4gIFVOVE9VQ0hFRF9DTEFTUzogdHJ1ZSxcbiAgVE9VQ0hFRF9DTEFTUzogdHJ1ZSxcbiovXG5cbnZhciBWQUxJRF9DTEFTUyA9ICduZy12YWxpZCcsXG4gICAgSU5WQUxJRF9DTEFTUyA9ICduZy1pbnZhbGlkJyxcbiAgICBQUklTVElORV9DTEFTUyA9ICduZy1wcmlzdGluZScsXG4gICAgRElSVFlfQ0xBU1MgPSAnbmctZGlydHknLFxuICAgIFVOVE9VQ0hFRF9DTEFTUyA9ICduZy11bnRvdWNoZWQnLFxuICAgIFRPVUNIRURfQ0xBU1MgPSAnbmctdG91Y2hlZCcsXG4gICAgUEVORElOR19DTEFTUyA9ICduZy1wZW5kaW5nJztcblxuXG52YXIgJG5nTW9kZWxNaW5FcnIgPSBuZXcgbWluRXJyKCduZ01vZGVsJyk7XG5cbi8qKlxuICogQG5nZG9jIHR5cGVcbiAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXJcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gJHZpZXdWYWx1ZSBBY3R1YWwgc3RyaW5nIHZhbHVlIGluIHRoZSB2aWV3LlxuICogQHByb3BlcnR5IHsqfSAkbW9kZWxWYWx1ZSBUaGUgdmFsdWUgaW4gdGhlIG1vZGVsIHRoYXQgdGhlIGNvbnRyb2wgaXMgYm91bmQgdG8uXG4gKiBAcHJvcGVydHkge0FycmF5LjxGdW5jdGlvbj59ICRwYXJzZXJzIEFycmF5IG9mIGZ1bmN0aW9ucyB0byBleGVjdXRlLCBhcyBhIHBpcGVsaW5lLCB3aGVuZXZlclxuICAgICAgIHRoZSBjb250cm9sIHJlYWRzIHZhbHVlIGZyb20gdGhlIERPTS4gVGhlIGZ1bmN0aW9ucyBhcmUgY2FsbGVkIGluIGFycmF5IG9yZGVyLCBlYWNoIHBhc3NpbmdcbiAgICAgICBpdHMgcmV0dXJuIHZhbHVlIHRocm91Z2ggdG8gdGhlIG5leHQuIFRoZSBsYXN0IHJldHVybiB2YWx1ZSBpcyBmb3J3YXJkZWQgdG8gdGhlXG4gICAgICAge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZhbGlkYXRvcnMgYCR2YWxpZGF0b3JzYH0gY29sbGVjdGlvbi5cblxuUGFyc2VycyBhcmUgdXNlZCB0byBzYW5pdGl6ZSAvIGNvbnZlcnQgdGhlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWVcbmAkdmlld1ZhbHVlYH0uXG5cblJldHVybmluZyBgdW5kZWZpbmVkYCBmcm9tIGEgcGFyc2VyIG1lYW5zIGEgcGFyc2UgZXJyb3Igb2NjdXJyZWQuIEluIHRoYXQgY2FzZSxcbm5vIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGAkdmFsaWRhdG9yc2B9IHdpbGwgcnVuIGFuZCB0aGUgYG5nTW9kZWxgXG53aWxsIGJlIHNldCB0byBgdW5kZWZpbmVkYCB1bmxlc3Mge0BsaW5rIG5nTW9kZWxPcHRpb25zIGBuZ01vZGVsT3B0aW9ucy5hbGxvd0ludmFsaWRgfVxuaXMgc2V0IHRvIGB0cnVlYC4gVGhlIHBhcnNlIGVycm9yIGlzIHN0b3JlZCBpbiBgbmdNb2RlbC4kZXJyb3IucGFyc2VgLlxuXG4gKlxuICogQHByb3BlcnR5IHtBcnJheS48RnVuY3Rpb24+fSAkZm9ybWF0dGVycyBBcnJheSBvZiBmdW5jdGlvbnMgdG8gZXhlY3V0ZSwgYXMgYSBwaXBlbGluZSwgd2hlbmV2ZXJcbiAgICAgICB0aGUgbW9kZWwgdmFsdWUgY2hhbmdlcy4gVGhlIGZ1bmN0aW9ucyBhcmUgY2FsbGVkIGluIHJldmVyc2UgYXJyYXkgb3JkZXIsIGVhY2ggcGFzc2luZyB0aGUgdmFsdWUgdGhyb3VnaCB0byB0aGVcbiAgICAgICBuZXh0LiBUaGUgbGFzdCByZXR1cm4gdmFsdWUgaXMgdXNlZCBhcyB0aGUgYWN0dWFsIERPTSB2YWx1ZS5cbiAgICAgICBVc2VkIHRvIGZvcm1hdCAvIGNvbnZlcnQgdmFsdWVzIGZvciBkaXNwbGF5IGluIHRoZSBjb250cm9sLlxuICogYGBganNcbiAqIGZ1bmN0aW9uIGZvcm1hdHRlcih2YWx1ZSkge1xuICogICBpZiAodmFsdWUpIHtcbiAqICAgICByZXR1cm4gdmFsdWUudG9VcHBlckNhc2UoKTtcbiAqICAgfVxuICogfVxuICogbmdNb2RlbC4kZm9ybWF0dGVycy5wdXNoKGZvcm1hdHRlcik7XG4gKiBgYGBcbiAqXG4gKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLCBmdW5jdGlvbj59ICR2YWxpZGF0b3JzIEEgY29sbGVjdGlvbiBvZiB2YWxpZGF0b3JzIHRoYXQgYXJlIGFwcGxpZWRcbiAqICAgICAgd2hlbmV2ZXIgdGhlIG1vZGVsIHZhbHVlIGNoYW5nZXMuIFRoZSBrZXkgdmFsdWUgd2l0aGluIHRoZSBvYmplY3QgcmVmZXJzIHRvIHRoZSBuYW1lIG9mIHRoZVxuICogICAgICB2YWxpZGF0b3Igd2hpbGUgdGhlIGZ1bmN0aW9uIHJlZmVycyB0byB0aGUgdmFsaWRhdGlvbiBvcGVyYXRpb24uIFRoZSB2YWxpZGF0aW9uIG9wZXJhdGlvbiBpc1xuICogICAgICBwcm92aWRlZCB3aXRoIHRoZSBtb2RlbCB2YWx1ZSBhcyBhbiBhcmd1bWVudCBhbmQgbXVzdCByZXR1cm4gYSB0cnVlIG9yIGZhbHNlIHZhbHVlIGRlcGVuZGluZ1xuICogICAgICBvbiB0aGUgcmVzcG9uc2Ugb2YgdGhhdCB2YWxpZGF0aW9uLlxuICpcbiAqIGBgYGpzXG4gKiBuZ01vZGVsLiR2YWxpZGF0b3JzLnZhbGlkQ2hhcmFjdGVycyA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICogICB2YXIgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcbiAqICAgcmV0dXJuIC9bMC05XSsvLnRlc3QodmFsdWUpICYmXG4gKiAgICAgICAgICAvW2Etel0rLy50ZXN0KHZhbHVlKSAmJlxuICogICAgICAgICAgL1tBLVpdKy8udGVzdCh2YWx1ZSkgJiZcbiAqICAgICAgICAgIC9cXFcrLy50ZXN0KHZhbHVlKTtcbiAqIH07XG4gKiBgYGBcbiAqXG4gKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLCBmdW5jdGlvbj59ICRhc3luY1ZhbGlkYXRvcnMgQSBjb2xsZWN0aW9uIG9mIHZhbGlkYXRpb25zIHRoYXQgYXJlIGV4cGVjdGVkIHRvXG4gKiAgICAgIHBlcmZvcm0gYW4gYXN5bmNocm9ub3VzIHZhbGlkYXRpb24gKGUuZy4gYSBIVFRQIHJlcXVlc3QpLiBUaGUgdmFsaWRhdGlvbiBmdW5jdGlvbiB0aGF0IGlzIHByb3ZpZGVkXG4gKiAgICAgIGlzIGV4cGVjdGVkIHRvIHJldHVybiBhIHByb21pc2Ugd2hlbiBpdCBpcyBydW4gZHVyaW5nIHRoZSBtb2RlbCB2YWxpZGF0aW9uIHByb2Nlc3MuIE9uY2UgdGhlIHByb21pc2VcbiAqICAgICAgaXMgZGVsaXZlcmVkIHRoZW4gdGhlIHZhbGlkYXRpb24gc3RhdHVzIHdpbGwgYmUgc2V0IHRvIHRydWUgd2hlbiBmdWxmaWxsZWQgYW5kIGZhbHNlIHdoZW4gcmVqZWN0ZWQuXG4gKiAgICAgIFdoZW4gdGhlIGFzeW5jaHJvbm91cyB2YWxpZGF0b3JzIGFyZSB0cmlnZ2VyZWQsIGVhY2ggb2YgdGhlIHZhbGlkYXRvcnMgd2lsbCBydW4gaW4gcGFyYWxsZWwgYW5kIHRoZSBtb2RlbFxuICogICAgICB2YWx1ZSB3aWxsIG9ubHkgYmUgdXBkYXRlZCBvbmNlIGFsbCB2YWxpZGF0b3JzIGhhdmUgYmVlbiBmdWxmaWxsZWQuIEFzIGxvbmcgYXMgYW4gYXN5bmNocm9ub3VzIHZhbGlkYXRvclxuICogICAgICBpcyB1bmZ1bGZpbGxlZCwgaXRzIGtleSB3aWxsIGJlIGFkZGVkIHRvIHRoZSBjb250cm9sbGVycyBgJHBlbmRpbmdgIHByb3BlcnR5LiBBbHNvLCBhbGwgYXN5bmNocm9ub3VzIHZhbGlkYXRvcnNcbiAqICAgICAgd2lsbCBvbmx5IHJ1biBvbmNlIGFsbCBzeW5jaHJvbm91cyB2YWxpZGF0b3JzIGhhdmUgcGFzc2VkLlxuICpcbiAqIFBsZWFzZSBub3RlIHRoYXQgaWYgJGh0dHAgaXMgdXNlZCB0aGVuIGl0IGlzIGltcG9ydGFudCB0aGF0IHRoZSBzZXJ2ZXIgcmV0dXJucyBhIHN1Y2Nlc3MgSFRUUCByZXNwb25zZSBjb2RlXG4gKiBpbiBvcmRlciB0byBmdWxmaWxsIHRoZSB2YWxpZGF0aW9uIGFuZCBhIHN0YXR1cyBsZXZlbCBvZiBgNHh4YCBpbiBvcmRlciB0byByZWplY3QgdGhlIHZhbGlkYXRpb24uXG4gKlxuICogYGBganNcbiAqIG5nTW9kZWwuJGFzeW5jVmFsaWRhdG9ycy51bmlxdWVVc2VybmFtZSA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICogICB2YXIgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcbiAqXG4gKiAgIC8vIExvb2t1cCB1c2VyIGJ5IHVzZXJuYW1lXG4gKiAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMvJyArIHZhbHVlKS5cbiAqICAgICAgdGhlbihmdW5jdGlvbiByZXNvbHZlZCgpIHtcbiAqICAgICAgICAvL3VzZXJuYW1lIGV4aXN0cywgdGhpcyBtZWFucyB2YWxpZGF0aW9uIGZhaWxzXG4gKiAgICAgICAgcmV0dXJuICRxLnJlamVjdCgnZXhpc3RzJyk7XG4gKiAgICAgIH0sIGZ1bmN0aW9uIHJlamVjdGVkKCkge1xuICogICAgICAgIC8vdXNlcm5hbWUgZG9lcyBub3QgZXhpc3QsIHRoZXJlZm9yZSB0aGlzIHZhbGlkYXRpb24gcGFzc2VzXG4gKiAgICAgICAgcmV0dXJuIHRydWU7XG4gKiAgICAgIH0pO1xuICogfTtcbiAqIGBgYFxuICpcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPEZ1bmN0aW9uPn0gJHZpZXdDaGFuZ2VMaXN0ZW5lcnMgQXJyYXkgb2YgZnVuY3Rpb25zIHRvIGV4ZWN1dGUgd2hlbmV2ZXIgdGhlXG4gKiAgICAgdmlldyB2YWx1ZSBoYXMgY2hhbmdlZC4gSXQgaXMgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzLCBhbmQgaXRzIHJldHVybiB2YWx1ZSBpcyBpZ25vcmVkLlxuICogICAgIFRoaXMgY2FuIGJlIHVzZWQgaW4gcGxhY2Ugb2YgYWRkaXRpb25hbCAkd2F0Y2hlcyBhZ2FpbnN0IHRoZSBtb2RlbCB2YWx1ZS5cbiAqXG4gKiBAcHJvcGVydHkge09iamVjdH0gJGVycm9yIEFuIG9iamVjdCBoYXNoIHdpdGggYWxsIGZhaWxpbmcgdmFsaWRhdG9yIGlkcyBhcyBrZXlzLlxuICogQHByb3BlcnR5IHtPYmplY3R9ICRwZW5kaW5nIEFuIG9iamVjdCBoYXNoIHdpdGggYWxsIHBlbmRpbmcgdmFsaWRhdG9yIGlkcyBhcyBrZXlzLlxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHVudG91Y2hlZCBUcnVlIGlmIGNvbnRyb2wgaGFzIG5vdCBsb3N0IGZvY3VzIHlldC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHRvdWNoZWQgVHJ1ZSBpZiBjb250cm9sIGhhcyBsb3N0IGZvY3VzLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkcHJpc3RpbmUgVHJ1ZSBpZiB1c2VyIGhhcyBub3QgaW50ZXJhY3RlZCB3aXRoIHRoZSBjb250cm9sIHlldC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGRpcnR5IFRydWUgaWYgdXNlciBoYXMgYWxyZWFkeSBpbnRlcmFjdGVkIHdpdGggdGhlIGNvbnRyb2wuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICR2YWxpZCBUcnVlIGlmIHRoZXJlIGlzIG5vIGVycm9yLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkaW52YWxpZCBUcnVlIGlmIGF0IGxlYXN0IG9uZSBlcnJvciBvbiB0aGUgY29udHJvbC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSAkbmFtZSBUaGUgbmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGNvbnRyb2wuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogYE5nTW9kZWxDb250cm9sbGVyYCBwcm92aWRlcyBBUEkgZm9yIHRoZSB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9IGRpcmVjdGl2ZS5cbiAqIFRoZSBjb250cm9sbGVyIGNvbnRhaW5zIHNlcnZpY2VzIGZvciBkYXRhLWJpbmRpbmcsIHZhbGlkYXRpb24sIENTUyB1cGRhdGVzLCBhbmQgdmFsdWUgZm9ybWF0dGluZ1xuICogYW5kIHBhcnNpbmcuIEl0IHB1cnBvc2VmdWxseSBkb2VzIG5vdCBjb250YWluIGFueSBsb2dpYyB3aGljaCBkZWFscyB3aXRoIERPTSByZW5kZXJpbmcgb3JcbiAqIGxpc3RlbmluZyB0byBET00gZXZlbnRzLlxuICogU3VjaCBET00gcmVsYXRlZCBsb2dpYyBzaG91bGQgYmUgcHJvdmlkZWQgYnkgb3RoZXIgZGlyZWN0aXZlcyB3aGljaCBtYWtlIHVzZSBvZlxuICogYE5nTW9kZWxDb250cm9sbGVyYCBmb3IgZGF0YS1iaW5kaW5nIHRvIGNvbnRyb2wgZWxlbWVudHMuXG4gKiBBbmd1bGFyIHByb3ZpZGVzIHRoaXMgRE9NIGxvZ2ljIGZvciBtb3N0IHtAbGluayBpbnB1dCBgaW5wdXRgfSBlbGVtZW50cy5cbiAqIEF0IHRoZSBlbmQgb2YgdGhpcyBwYWdlIHlvdSBjYW4gZmluZCBhIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyI2N1c3RvbS1jb250cm9sLWV4YW1wbGVcbiAqIGN1c3RvbSBjb250cm9sIGV4YW1wbGV9IHRoYXQgdXNlcyBgbmdNb2RlbENvbnRyb2xsZXJgIHRvIGJpbmQgdG8gYGNvbnRlbnRlZGl0YWJsZWAgZWxlbWVudHMuXG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBDdXN0b20gQ29udHJvbCBFeGFtcGxlXG4gKiBUaGlzIGV4YW1wbGUgc2hvd3MgaG93IHRvIHVzZSBgTmdNb2RlbENvbnRyb2xsZXJgIHdpdGggYSBjdXN0b20gY29udHJvbCB0byBhY2hpZXZlXG4gKiBkYXRhLWJpbmRpbmcuIE5vdGljZSBob3cgZGlmZmVyZW50IGRpcmVjdGl2ZXMgKGBjb250ZW50ZWRpdGFibGVgLCBgbmctbW9kZWxgLCBhbmQgYHJlcXVpcmVkYClcbiAqIGNvbGxhYm9yYXRlIHRvZ2V0aGVyIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgcmVzdWx0LlxuICpcbiAqIGBjb250ZW50ZWRpdGFibGVgIGlzIGFuIEhUTUw1IGF0dHJpYnV0ZSwgd2hpY2ggdGVsbHMgdGhlIGJyb3dzZXIgdG8gbGV0IHRoZSBlbGVtZW50XG4gKiBjb250ZW50cyBiZSBlZGl0ZWQgaW4gcGxhY2UgYnkgdGhlIHVzZXIuXG4gKlxuICogV2UgYXJlIHVzaW5nIHRoZSB7QGxpbmsgbmcuc2VydmljZTokc2NlICRzY2V9IHNlcnZpY2UgaGVyZSBhbmQgaW5jbHVkZSB0aGUge0BsaW5rIG5nU2FuaXRpemUgJHNhbml0aXplfVxuICogbW9kdWxlIHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIFwiYmFkXCIgY29udGVudCBsaWtlIGlubGluZSBldmVudCBsaXN0ZW5lciAoZS5nLiBgPHNwYW4gb25jbGljaz1cIi4uLlwiPmApLlxuICogSG93ZXZlciwgYXMgd2UgYXJlIHVzaW5nIGAkc2NlYCB0aGUgbW9kZWwgY2FuIHN0aWxsIGRlY2lkZSB0byBwcm92aWRlIHVuc2FmZSBjb250ZW50IGlmIGl0IG1hcmtzXG4gKiB0aGF0IGNvbnRlbnQgdXNpbmcgdGhlIGAkc2NlYCBzZXJ2aWNlLlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJOZ01vZGVsQ29udHJvbGxlclwiIG1vZHVsZT1cImN1c3RvbUNvbnRyb2xcIiBkZXBzPVwiYW5ndWxhci1zYW5pdGl6ZS5qc1wiPlxuICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgIFtjb250ZW50ZWRpdGFibGVdIHtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgICBtaW4taGVpZ2h0OiAyMHB4O1xuICAgICAgfVxuXG4gICAgICAubmctaW52YWxpZCB7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJlZDtcbiAgICAgIH1cblxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnY3VzdG9tQ29udHJvbCcsIFsnbmdTYW5pdGl6ZSddKS5cbiAgICAgICAgZGlyZWN0aXZlKCdjb250ZW50ZWRpdGFibGUnLCBbJyRzY2UnLCBmdW5jdGlvbigkc2NlKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsIC8vIG9ubHkgYWN0aXZhdGUgb24gZWxlbWVudCBhdHRyaWJ1dGVcbiAgICAgICAgICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsIC8vIGdldCBhIGhvbGQgb2YgTmdNb2RlbENvbnRyb2xsZXJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xuICAgICAgICAgICAgICBpZiAoIW5nTW9kZWwpIHJldHVybjsgLy8gZG8gbm90aGluZyBpZiBubyBuZy1tb2RlbFxuXG4gICAgICAgICAgICAgIC8vIFNwZWNpZnkgaG93IFVJIHNob3VsZCBiZSB1cGRhdGVkXG4gICAgICAgICAgICAgIG5nTW9kZWwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbCgkc2NlLmdldFRydXN0ZWRIdG1sKG5nTW9kZWwuJHZpZXdWYWx1ZSB8fCAnJykpO1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgY2hhbmdlIGV2ZW50cyB0byBlbmFibGUgYmluZGluZ1xuICAgICAgICAgICAgICBlbGVtZW50Lm9uKCdibHVyIGtleXVwIGNoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHNjb3BlLiRldmFsQXN5bmMocmVhZCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZWFkKCk7IC8vIGluaXRpYWxpemVcblxuICAgICAgICAgICAgICAvLyBXcml0ZSBkYXRhIHRvIHRoZSBtb2RlbFxuICAgICAgICAgICAgICBmdW5jdGlvbiByZWFkKCkge1xuICAgICAgICAgICAgICAgIHZhciBodG1sID0gZWxlbWVudC5odG1sKCk7XG4gICAgICAgICAgICAgICAgLy8gV2hlbiB3ZSBjbGVhciB0aGUgY29udGVudCBlZGl0YWJsZSB0aGUgYnJvd3NlciBsZWF2ZXMgYSA8YnI+IGJlaGluZFxuICAgICAgICAgICAgICAgIC8vIElmIHN0cmlwLWJyIGF0dHJpYnV0ZSBpcyBwcm92aWRlZCB0aGVuIHdlIHN0cmlwIHRoaXMgb3V0XG4gICAgICAgICAgICAgICAgaWYgKCBhdHRycy5zdHJpcEJyICYmIGh0bWwgPT0gJzxicj4nICkge1xuICAgICAgICAgICAgICAgICAgaHRtbCA9ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZ01vZGVsLiRzZXRWaWV3VmFsdWUoaHRtbCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XSk7XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gICAgICAgPGRpdiBjb250ZW50ZWRpdGFibGVcbiAgICAgICAgICAgIG5hbWU9XCJteVdpZGdldFwiIG5nLW1vZGVsPVwidXNlckNvbnRlbnRcIlxuICAgICAgICAgICAgc3RyaXAtYnI9XCJ0cnVlXCJcbiAgICAgICAgICAgIHJlcXVpcmVkPkNoYW5nZSBtZSE8L2Rpdj5cbiAgICAgICAgPHNwYW4gbmctc2hvdz1cIm15Rm9ybS5teVdpZGdldC4kZXJyb3IucmVxdWlyZWRcIj5SZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgPGhyPlxuICAgICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD1cInVzZXJDb250ZW50XCIgYXJpYS1sYWJlbD1cIkR5bmFtaWMgdGV4dGFyZWFcIj48L3RleHRhcmVhPlxuICAgICAgPC9mb3JtPlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgaXQoJ3Nob3VsZCBkYXRhLWJpbmQgYW5kIGJlY29tZSBpbnZhbGlkJywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PSAnc2FmYXJpJyB8fCBicm93c2VyLnBhcmFtcy5icm93c2VyID09ICdmaXJlZm94Jykge1xuICAgICAgICAvLyBTYWZhcmlEcml2ZXIgY2FuJ3QgaGFuZGxlIGNvbnRlbnRlZGl0YWJsZVxuICAgICAgICAvLyBhbmQgRmlyZWZveCBkcml2ZXIgY2FuJ3QgY2xlYXIgY29udGVudGVkaXRhYmxlcyB2ZXJ5IHdlbGxcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGNvbnRlbnRFZGl0YWJsZSA9IGVsZW1lbnQoYnkuY3NzKCdbY29udGVudGVkaXRhYmxlXScpKTtcbiAgICAgIHZhciBjb250ZW50ID0gJ0NoYW5nZSBtZSEnO1xuXG4gICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldFRleHQoKSkudG9FcXVhbChjb250ZW50KTtcblxuICAgICAgY29udGVudEVkaXRhYmxlLmNsZWFyKCk7XG4gICAgICBjb250ZW50RWRpdGFibGUuc2VuZEtleXMocHJvdHJhY3Rvci5LZXkuQkFDS19TUEFDRSk7XG4gICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldFRleHQoKSkudG9FcXVhbCgnJyk7XG4gICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9NYXRjaCgvbmctaW52YWxpZC1yZXF1aXJlZC8pO1xuICAgIH0pO1xuICAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKlxuICovXG52YXIgTmdNb2RlbENvbnRyb2xsZXIgPSBbJyRzY29wZScsICckZXhjZXB0aW9uSGFuZGxlcicsICckYXR0cnMnLCAnJGVsZW1lbnQnLCAnJHBhcnNlJywgJyRhbmltYXRlJywgJyR0aW1lb3V0JywgJyRyb290U2NvcGUnLCAnJHEnLCAnJGludGVycG9sYXRlJyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRleGNlcHRpb25IYW5kbGVyLCAkYXR0ciwgJGVsZW1lbnQsICRwYXJzZSwgJGFuaW1hdGUsICR0aW1lb3V0LCAkcm9vdFNjb3BlLCAkcSwgJGludGVycG9sYXRlKSB7XG4gIHRoaXMuJHZpZXdWYWx1ZSA9IE51bWJlci5OYU47XG4gIHRoaXMuJG1vZGVsVmFsdWUgPSBOdW1iZXIuTmFOO1xuICB0aGlzLiQkcmF3TW9kZWxWYWx1ZSA9IHVuZGVmaW5lZDsgLy8gc3RvcmVzIHRoZSBwYXJzZWQgbW9kZWxWYWx1ZSAvIG1vZGVsIHNldCBmcm9tIHNjb3BlIHJlZ2FyZGxlc3Mgb2YgdmFsaWRpdHkuXG4gIHRoaXMuJHZhbGlkYXRvcnMgPSB7fTtcbiAgdGhpcy4kYXN5bmNWYWxpZGF0b3JzID0ge307XG4gIHRoaXMuJHBhcnNlcnMgPSBbXTtcbiAgdGhpcy4kZm9ybWF0dGVycyA9IFtdO1xuICB0aGlzLiR2aWV3Q2hhbmdlTGlzdGVuZXJzID0gW107XG4gIHRoaXMuJHVudG91Y2hlZCA9IHRydWU7XG4gIHRoaXMuJHRvdWNoZWQgPSBmYWxzZTtcbiAgdGhpcy4kcHJpc3RpbmUgPSB0cnVlO1xuICB0aGlzLiRkaXJ0eSA9IGZhbHNlO1xuICB0aGlzLiR2YWxpZCA9IHRydWU7XG4gIHRoaXMuJGludmFsaWQgPSBmYWxzZTtcbiAgdGhpcy4kZXJyb3IgPSB7fTsgLy8ga2VlcCBpbnZhbGlkIGtleXMgaGVyZVxuICB0aGlzLiQkc3VjY2VzcyA9IHt9OyAvLyBrZWVwIHZhbGlkIGtleXMgaGVyZVxuICB0aGlzLiRwZW5kaW5nID0gdW5kZWZpbmVkOyAvLyBrZWVwIHBlbmRpbmcga2V5cyBoZXJlXG4gIHRoaXMuJG5hbWUgPSAkaW50ZXJwb2xhdGUoJGF0dHIubmFtZSB8fCAnJywgZmFsc2UpKCRzY29wZSk7XG5cblxuICB2YXIgcGFyc2VkTmdNb2RlbCA9ICRwYXJzZSgkYXR0ci5uZ01vZGVsKSxcbiAgICAgIHBhcnNlZE5nTW9kZWxBc3NpZ24gPSBwYXJzZWROZ01vZGVsLmFzc2lnbixcbiAgICAgIG5nTW9kZWxHZXQgPSBwYXJzZWROZ01vZGVsLFxuICAgICAgbmdNb2RlbFNldCA9IHBhcnNlZE5nTW9kZWxBc3NpZ24sXG4gICAgICBwZW5kaW5nRGVib3VuY2UgPSBudWxsLFxuICAgICAgcGFyc2VyVmFsaWQsXG4gICAgICBjdHJsID0gdGhpcztcblxuICB0aGlzLiQkc2V0T3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBjdHJsLiRvcHRpb25zID0gb3B0aW9ucztcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmdldHRlclNldHRlcikge1xuICAgICAgdmFyIGludm9rZU1vZGVsR2V0dGVyID0gJHBhcnNlKCRhdHRyLm5nTW9kZWwgKyAnKCknKSxcbiAgICAgICAgICBpbnZva2VNb2RlbFNldHRlciA9ICRwYXJzZSgkYXR0ci5uZ01vZGVsICsgJygkJCRwKScpO1xuXG4gICAgICBuZ01vZGVsR2V0ID0gZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgIHZhciBtb2RlbFZhbHVlID0gcGFyc2VkTmdNb2RlbCgkc2NvcGUpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihtb2RlbFZhbHVlKSkge1xuICAgICAgICAgIG1vZGVsVmFsdWUgPSBpbnZva2VNb2RlbEdldHRlcigkc2NvcGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtb2RlbFZhbHVlO1xuICAgICAgfTtcbiAgICAgIG5nTW9kZWxTZXQgPSBmdW5jdGlvbigkc2NvcGUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHBhcnNlZE5nTW9kZWwoJHNjb3BlKSkpIHtcbiAgICAgICAgICBpbnZva2VNb2RlbFNldHRlcigkc2NvcGUsIHskJCRwOiBjdHJsLiRtb2RlbFZhbHVlfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyc2VkTmdNb2RlbEFzc2lnbigkc2NvcGUsIGN0cmwuJG1vZGVsVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoIXBhcnNlZE5nTW9kZWwuYXNzaWduKSB7XG4gICAgICB0aHJvdyAkbmdNb2RlbE1pbkVycignbm9uYXNzaWduJywgXCJFeHByZXNzaW9uICd7MH0nIGlzIG5vbi1hc3NpZ25hYmxlLiBFbGVtZW50OiB7MX1cIixcbiAgICAgICAgICAkYXR0ci5uZ01vZGVsLCBzdGFydGluZ1RhZygkZWxlbWVudCkpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRyZW5kZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENhbGxlZCB3aGVuIHRoZSB2aWV3IG5lZWRzIHRvIGJlIHVwZGF0ZWQuIEl0IGlzIGV4cGVjdGVkIHRoYXQgdGhlIHVzZXIgb2YgdGhlIG5nLW1vZGVsXG4gICAqIGRpcmVjdGl2ZSB3aWxsIGltcGxlbWVudCB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogVGhlIGAkcmVuZGVyKClgIG1ldGhvZCBpcyBpbnZva2VkIGluIHRoZSBmb2xsb3dpbmcgc2l0dWF0aW9uczpcbiAgICpcbiAgICogKiBgJHJvbGxiYWNrVmlld1ZhbHVlKClgIGlzIGNhbGxlZC4gIElmIHdlIGFyZSByb2xsaW5nIGJhY2sgdGhlIHZpZXcgdmFsdWUgdG8gdGhlIGxhc3RcbiAgICogICBjb21taXR0ZWQgdmFsdWUgdGhlbiBgJHJlbmRlcigpYCBpcyBjYWxsZWQgdG8gdXBkYXRlIHRoZSBpbnB1dCBjb250cm9sLlxuICAgKiAqIFRoZSB2YWx1ZSByZWZlcmVuY2VkIGJ5IGBuZy1tb2RlbGAgaXMgY2hhbmdlZCBwcm9ncmFtbWF0aWNhbGx5IGFuZCBib3RoIHRoZSBgJG1vZGVsVmFsdWVgIGFuZFxuICAgKiAgIHRoZSBgJHZpZXdWYWx1ZWAgYXJlIGRpZmZlcmVudCBmcm9tIGxhc3QgdGltZS5cbiAgICpcbiAgICogU2luY2UgYG5nLW1vZGVsYCBkb2VzIG5vdCBkbyBhIGRlZXAgd2F0Y2gsIGAkcmVuZGVyKClgIGlzIG9ubHkgaW52b2tlZCBpZiB0aGUgdmFsdWVzIG9mXG4gICAqIGAkbW9kZWxWYWx1ZWAgYW5kIGAkdmlld1ZhbHVlYCBhcmUgYWN0dWFsbHkgZGlmZmVyZW50IGZyb20gdGhlaXIgcHJldmlvdXMgdmFsdWUuIElmIGAkbW9kZWxWYWx1ZWBcbiAgICogb3IgYCR2aWV3VmFsdWVgIGFyZSBvYmplY3RzIChyYXRoZXIgdGhhbiBhIHN0cmluZyBvciBudW1iZXIpIHRoZW4gYCRyZW5kZXIoKWAgd2lsbCBub3QgYmVcbiAgICogaW52b2tlZCBpZiB5b3Ugb25seSBjaGFuZ2UgYSBwcm9wZXJ0eSBvbiB0aGUgb2JqZWN0cy5cbiAgICovXG4gIHRoaXMuJHJlbmRlciA9IG5vb3A7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkaXNFbXB0eVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBpcyBjYWxsZWQgd2hlbiB3ZSBuZWVkIHRvIGRldGVybWluZSBpZiB0aGUgdmFsdWUgb2YgYW4gaW5wdXQgaXMgZW1wdHkuXG4gICAqXG4gICAqIEZvciBpbnN0YW5jZSwgdGhlIHJlcXVpcmVkIGRpcmVjdGl2ZSBkb2VzIHRoaXMgdG8gd29yayBvdXQgaWYgdGhlIGlucHV0IGhhcyBkYXRhIG9yIG5vdC5cbiAgICpcbiAgICogVGhlIGRlZmF1bHQgYCRpc0VtcHR5YCBmdW5jdGlvbiBjaGVja3Mgd2hldGhlciB0aGUgdmFsdWUgaXMgYHVuZGVmaW5lZGAsIGAnJ2AsIGBudWxsYCBvciBgTmFOYC5cbiAgICpcbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGlzIGZvciBpbnB1dCBkaXJlY3RpdmVzIHdob3NlIGNvbmNlcHQgb2YgYmVpbmcgZW1wdHkgaXMgZGlmZmVyZW50IGZyb20gdGhlXG4gICAqIGRlZmF1bHQuIFRoZSBgY2hlY2tib3hJbnB1dFR5cGVgIGRpcmVjdGl2ZSBkb2VzIHRoaXMgYmVjYXVzZSBpbiBpdHMgY2FzZSBhIHZhbHVlIG9mIGBmYWxzZWBcbiAgICogaW1wbGllcyBlbXB0eS5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGlucHV0IHRvIGNoZWNrIGZvciBlbXB0aW5lc3MuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgXCJlbXB0eVwiLlxuICAgKi9cbiAgdGhpcy4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzVW5kZWZpbmVkKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlO1xuICB9O1xuXG4gIHZhciBwYXJlbnRGb3JtID0gJGVsZW1lbnQuaW5oZXJpdGVkRGF0YSgnJGZvcm1Db250cm9sbGVyJykgfHwgbnVsbEZvcm1DdHJsLFxuICAgICAgY3VycmVudFZhbGlkYXRpb25SdW5JZCA9IDA7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0VmFsaWRpdHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENoYW5nZSB0aGUgdmFsaWRpdHkgc3RhdGUsIGFuZCBub3RpZnkgdGhlIGZvcm0uXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgd2l0aGluICRwYXJzZXJzLyRmb3JtYXR0ZXJzIG9yIGEgY3VzdG9tIHZhbGlkYXRpb24gaW1wbGVtZW50YXRpb24uXG4gICAqIEhvd2V2ZXIsIGluIG1vc3QgY2FzZXMgaXQgc2hvdWxkIGJlIHN1ZmZpY2llbnQgdG8gdXNlIHRoZSBgbmdNb2RlbC4kdmFsaWRhdG9yc2AgYW5kXG4gICAqIGBuZ01vZGVsLiRhc3luY1ZhbGlkYXRvcnNgIGNvbGxlY3Rpb25zIHdoaWNoIHdpbGwgY2FsbCBgJHNldFZhbGlkaXR5YCBhdXRvbWF0aWNhbGx5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsaWRhdGlvbkVycm9yS2V5IE5hbWUgb2YgdGhlIHZhbGlkYXRvci4gVGhlIGB2YWxpZGF0aW9uRXJyb3JLZXlgIHdpbGwgYmUgYXNzaWduZWRcbiAgICogICAgICAgIHRvIGVpdGhlciBgJGVycm9yW3ZhbGlkYXRpb25FcnJvcktleV1gIG9yIGAkcGVuZGluZ1t2YWxpZGF0aW9uRXJyb3JLZXldYFxuICAgKiAgICAgICAgKGZvciB1bmZ1bGZpbGxlZCBgJGFzeW5jVmFsaWRhdG9yc2ApLCBzbyB0aGF0IGl0IGlzIGF2YWlsYWJsZSBmb3IgZGF0YS1iaW5kaW5nLlxuICAgKiAgICAgICAgVGhlIGB2YWxpZGF0aW9uRXJyb3JLZXlgIHNob3VsZCBiZSBpbiBjYW1lbENhc2UgYW5kIHdpbGwgZ2V0IGNvbnZlcnRlZCBpbnRvIGRhc2gtY2FzZVxuICAgKiAgICAgICAgZm9yIGNsYXNzIG5hbWUuIEV4YW1wbGU6IGBteUVycm9yYCB3aWxsIHJlc3VsdCBpbiBgbmctdmFsaWQtbXktZXJyb3JgIGFuZCBgbmctaW52YWxpZC1teS1lcnJvcmBcbiAgICogICAgICAgIGNsYXNzIGFuZCBjYW4gYmUgYm91bmQgdG8gYXMgIGB7e3NvbWVGb3JtLnNvbWVDb250cm9sLiRlcnJvci5teUVycm9yfX1gIC5cbiAgICogQHBhcmFtIHtib29sZWFufSBpc1ZhbGlkIFdoZXRoZXIgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdmFsaWQgKHRydWUpLCBpbnZhbGlkIChmYWxzZSksIHBlbmRpbmcgKHVuZGVmaW5lZCksXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBvciBza2lwcGVkIChudWxsKS4gUGVuZGluZyBpcyB1c2VkIGZvciB1bmZ1bGZpbGxlZCBgJGFzeW5jVmFsaWRhdG9yc2AuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBTa2lwcGVkIGlzIHVzZWQgYnkgQW5ndWxhciB3aGVuIHZhbGlkYXRvcnMgZG8gbm90IHJ1biBiZWNhdXNlIG9mIHBhcnNlIGVycm9ycyBhbmRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gYCRhc3luY1ZhbGlkYXRvcnNgIGRvIG5vdCBydW4gYmVjYXVzZSBhbnkgb2YgdGhlIGAkdmFsaWRhdG9yc2AgZmFpbGVkLlxuICAgKi9cbiAgYWRkU2V0VmFsaWRpdHlNZXRob2Qoe1xuICAgIGN0cmw6IHRoaXMsXG4gICAgJGVsZW1lbnQ6ICRlbGVtZW50LFxuICAgIHNldDogZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgICAgb2JqZWN0W3Byb3BlcnR5XSA9IHRydWU7XG4gICAgfSxcbiAgICB1bnNldDogZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgICAgZGVsZXRlIG9iamVjdFtwcm9wZXJ0eV07XG4gICAgfSxcbiAgICBwYXJlbnRGb3JtOiBwYXJlbnRGb3JtLFxuICAgICRhbmltYXRlOiAkYW5pbWF0ZVxuICB9KTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRQcmlzdGluZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgY29udHJvbCB0byBpdHMgcHJpc3RpbmUgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSBgbmctZGlydHlgIGNsYXNzIGFuZCBzZXQgdGhlIGNvbnRyb2wgdG8gaXRzIHByaXN0aW5lXG4gICAqIHN0YXRlIChgbmctcHJpc3RpbmVgIGNsYXNzKS4gQSBtb2RlbCBpcyBjb25zaWRlcmVkIHRvIGJlIHByaXN0aW5lIHdoZW4gdGhlIGNvbnRyb2xcbiAgICogaGFzIG5vdCBiZWVuIGNoYW5nZWQgZnJvbSB3aGVuIGZpcnN0IGNvbXBpbGVkLlxuICAgKi9cbiAgdGhpcy4kc2V0UHJpc3RpbmUgPSBmdW5jdGlvbigpIHtcbiAgICBjdHJsLiRkaXJ0eSA9IGZhbHNlO1xuICAgIGN0cmwuJHByaXN0aW5lID0gdHJ1ZTtcbiAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcygkZWxlbWVudCwgRElSVFlfQ0xBU1MpO1xuICAgICRhbmltYXRlLmFkZENsYXNzKCRlbGVtZW50LCBQUklTVElORV9DTEFTUyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0RGlydHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIGRpcnR5IHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgYG5nLXByaXN0aW5lYCBjbGFzcyBhbmQgc2V0IHRoZSBjb250cm9sIHRvIGl0cyBkaXJ0eVxuICAgKiBzdGF0ZSAoYG5nLWRpcnR5YCBjbGFzcykuIEEgbW9kZWwgaXMgY29uc2lkZXJlZCB0byBiZSBkaXJ0eSB3aGVuIHRoZSBjb250cm9sIGhhcyBiZWVuIGNoYW5nZWRcbiAgICogZnJvbSB3aGVuIGZpcnN0IGNvbXBpbGVkLlxuICAgKi9cbiAgdGhpcy4kc2V0RGlydHkgPSBmdW5jdGlvbigpIHtcbiAgICBjdHJsLiRkaXJ0eSA9IHRydWU7XG4gICAgY3RybC4kcHJpc3RpbmUgPSBmYWxzZTtcbiAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcygkZWxlbWVudCwgUFJJU1RJTkVfQ0xBU1MpO1xuICAgICRhbmltYXRlLmFkZENsYXNzKCRlbGVtZW50LCBESVJUWV9DTEFTUyk7XG4gICAgcGFyZW50Rm9ybS4kc2V0RGlydHkoKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRVbnRvdWNoZWRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIHVudG91Y2hlZCBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlIGBuZy10b3VjaGVkYCBjbGFzcyBhbmQgc2V0IHRoZSBjb250cm9sIHRvIGl0c1xuICAgKiB1bnRvdWNoZWQgc3RhdGUgKGBuZy11bnRvdWNoZWRgIGNsYXNzKS4gVXBvbiBjb21waWxhdGlvbiwgYSBtb2RlbCBpcyBzZXQgYXMgdW50b3VjaGVkXG4gICAqIGJ5IGRlZmF1bHQsIGhvd2V2ZXIgdGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byByZXN0b3JlIHRoYXQgc3RhdGUgaWYgdGhlIG1vZGVsIGhhc1xuICAgKiBhbHJlYWR5IGJlZW4gdG91Y2hlZCBieSB0aGUgdXNlci5cbiAgICovXG4gIHRoaXMuJHNldFVudG91Y2hlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGN0cmwuJHRvdWNoZWQgPSBmYWxzZTtcbiAgICBjdHJsLiR1bnRvdWNoZWQgPSB0cnVlO1xuICAgICRhbmltYXRlLnNldENsYXNzKCRlbGVtZW50LCBVTlRPVUNIRURfQ0xBU1MsIFRPVUNIRURfQ0xBU1MpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFRvdWNoZWRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIHRvdWNoZWQgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSBgbmctdW50b3VjaGVkYCBjbGFzcyBhbmQgc2V0IHRoZSBjb250cm9sIHRvIGl0c1xuICAgKiB0b3VjaGVkIHN0YXRlIChgbmctdG91Y2hlZGAgY2xhc3MpLiBBIG1vZGVsIGlzIGNvbnNpZGVyZWQgdG8gYmUgdG91Y2hlZCB3aGVuIHRoZSB1c2VyIGhhc1xuICAgKiBmaXJzdCBmb2N1c2VkIHRoZSBjb250cm9sIGVsZW1lbnQgYW5kIHRoZW4gc2hpZnRlZCBmb2N1cyBhd2F5IGZyb20gdGhlIGNvbnRyb2wgKGJsdXIgZXZlbnQpLlxuICAgKi9cbiAgdGhpcy4kc2V0VG91Y2hlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGN0cmwuJHRvdWNoZWQgPSB0cnVlO1xuICAgIGN0cmwuJHVudG91Y2hlZCA9IGZhbHNlO1xuICAgICRhbmltYXRlLnNldENsYXNzKCRlbGVtZW50LCBUT1VDSEVEX0NMQVNTLCBVTlRPVUNIRURfQ0xBU1MpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHJvbGxiYWNrVmlld1ZhbHVlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDYW5jZWwgYW4gdXBkYXRlIGFuZCByZXNldCB0aGUgaW5wdXQgZWxlbWVudCdzIHZhbHVlIHRvIHByZXZlbnQgYW4gdXBkYXRlIHRvIHRoZSBgJG1vZGVsVmFsdWVgLFxuICAgKiB3aGljaCBtYXkgYmUgY2F1c2VkIGJ5IGEgcGVuZGluZyBkZWJvdW5jZWQgZXZlbnQgb3IgYmVjYXVzZSB0aGUgaW5wdXQgaXMgd2FpdGluZyBmb3IgYSBzb21lXG4gICAqIGZ1dHVyZSBldmVudC5cbiAgICpcbiAgICogSWYgeW91IGhhdmUgYW4gaW5wdXQgdGhhdCB1c2VzIGBuZy1tb2RlbC1vcHRpb25zYCB0byBzZXQgdXAgZGVib3VuY2VkIGV2ZW50cyBvciBldmVudHMgc3VjaFxuICAgKiBhcyBibHVyIHlvdSBjYW4gaGF2ZSBhIHNpdHVhdGlvbiB3aGVyZSB0aGVyZSBpcyBhIHBlcmlvZCB3aGVuIHRoZSBgJHZpZXdWYWx1ZWBcbiAgICogaXMgb3V0IG9mIHN5bmNoIHdpdGggdGhlIG5nTW9kZWwncyBgJG1vZGVsVmFsdWVgLlxuICAgKlxuICAgKiBJbiB0aGlzIGNhc2UsIHlvdSBjYW4gcnVuIGludG8gZGlmZmljdWx0aWVzIGlmIHlvdSB0cnkgdG8gdXBkYXRlIHRoZSBuZ01vZGVsJ3MgYCRtb2RlbFZhbHVlYFxuICAgKiBwcm9ncmFtbWF0aWNhbGx5IGJlZm9yZSB0aGVzZSBkZWJvdW5jZWQvZnV0dXJlIGV2ZW50cyBoYXZlIHJlc29sdmVkL29jY3VycmVkLCBiZWNhdXNlIEFuZ3VsYXInc1xuICAgKiBkaXJ0eSBjaGVja2luZyBtZWNoYW5pc20gaXMgbm90IGFibGUgdG8gdGVsbCB3aGV0aGVyIHRoZSBtb2RlbCBoYXMgYWN0dWFsbHkgY2hhbmdlZCBvciBub3QuXG4gICAqXG4gICAqIFRoZSBgJHJvbGxiYWNrVmlld1ZhbHVlKClgIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIGJlZm9yZSBwcm9ncmFtbWF0aWNhbGx5IGNoYW5naW5nIHRoZSBtb2RlbCBvZiBhblxuICAgKiBpbnB1dCB3aGljaCBtYXkgaGF2ZSBzdWNoIGV2ZW50cyBwZW5kaW5nLiBUaGlzIGlzIGltcG9ydGFudCBpbiBvcmRlciB0byBtYWtlIHN1cmUgdGhhdCB0aGVcbiAgICogaW5wdXQgZmllbGQgd2lsbCBiZSB1cGRhdGVkIHdpdGggdGhlIG5ldyBtb2RlbCB2YWx1ZSBhbmQgYW55IHBlbmRpbmcgb3BlcmF0aW9ucyBhcmUgY2FuY2VsbGVkLlxuICAgKlxuICAgKiA8ZXhhbXBsZSBuYW1lPVwibmctbW9kZWwtY2FuY2VsLXVwZGF0ZVwiIG1vZHVsZT1cImNhbmNlbC11cGRhdGUtZXhhbXBsZVwiPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICogICAgIGFuZ3VsYXIubW9kdWxlKCdjYW5jZWwtdXBkYXRlLWV4YW1wbGUnLCBbXSlcbiAgICpcbiAgICogICAgIC5jb250cm9sbGVyKCdDYW5jZWxVcGRhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICogICAgICAgJHNjb3BlLnJlc2V0V2l0aENhbmNlbCA9IGZ1bmN0aW9uKGUpIHtcbiAgICogICAgICAgICBpZiAoZS5rZXlDb2RlID09IDI3KSB7XG4gICAqICAgICAgICAgICAkc2NvcGUubXlGb3JtLm15SW5wdXQxLiRyb2xsYmFja1ZpZXdWYWx1ZSgpO1xuICAgKiAgICAgICAgICAgJHNjb3BlLm15VmFsdWUgPSAnJztcbiAgICogICAgICAgICB9XG4gICAqICAgICAgIH07XG4gICAqICAgICAgICRzY29wZS5yZXNldFdpdGhvdXRDYW5jZWwgPSBmdW5jdGlvbihlKSB7XG4gICAqICAgICAgICAgaWYgKGUua2V5Q29kZSA9PSAyNykge1xuICAgKiAgICAgICAgICAgJHNjb3BlLm15VmFsdWUgPSAnJztcbiAgICogICAgICAgICB9XG4gICAqICAgICAgIH07XG4gICAqICAgICB9XSk7XG4gICAqICAgPC9maWxlPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJDYW5jZWxVcGRhdGVDb250cm9sbGVyXCI+XG4gICAqICAgICAgIDxwPlRyeSB0eXBpbmcgc29tZXRoaW5nIGluIGVhY2ggaW5wdXQuICBTZWUgdGhhdCB0aGUgbW9kZWwgb25seSB1cGRhdGVzIHdoZW4geW91XG4gICAqICAgICAgICAgIGJsdXIgb2ZmIHRoZSBpbnB1dC5cbiAgICogICAgICAgIDwvcD5cbiAgICogICAgICAgIDxwPk5vdyBzZWUgd2hhdCBoYXBwZW5zIGlmIHlvdSBzdGFydCB0eXBpbmcgdGhlbiBwcmVzcyB0aGUgRXNjYXBlIGtleTwvcD5cbiAgICpcbiAgICogICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IHVwZGF0ZU9uOiAnYmx1cicgfVwiPlxuICAgKiAgICAgICAgIDxwIGlkPVwiaW5wdXREZXNjcmlwdGlvbjFcIj5XaXRoICRyb2xsYmFja1ZpZXdWYWx1ZSgpPC9wPlxuICAgKiAgICAgICAgIDxpbnB1dCBuYW1lPVwibXlJbnB1dDFcIiBhcmlhLWRlc2NyaWJlZGJ5PVwiaW5wdXREZXNjcmlwdGlvbjFcIiBuZy1tb2RlbD1cIm15VmFsdWVcIlxuICAgKiAgICAgICAgICAgICAgICBuZy1rZXlkb3duPVwicmVzZXRXaXRoQ2FuY2VsKCRldmVudClcIj48YnIvPlxuICAgKiAgICAgICAgIG15VmFsdWU6IFwie3sgbXlWYWx1ZSB9fVwiXG4gICAqXG4gICAqICAgICAgICAgPHAgaWQ9XCJpbnB1dERlc2NyaXB0aW9uMlwiPldpdGhvdXQgJHJvbGxiYWNrVmlld1ZhbHVlKCk8L3A+XG4gICAqICAgICAgICAgPGlucHV0IG5hbWU9XCJteUlucHV0MlwiIGFyaWEtZGVzY3JpYmVkYnk9XCJpbnB1dERlc2NyaXB0aW9uMlwiIG5nLW1vZGVsPVwibXlWYWx1ZVwiXG4gICAqICAgICAgICAgICAgICAgIG5nLWtleWRvd249XCJyZXNldFdpdGhvdXRDYW5jZWwoJGV2ZW50KVwiPjxici8+XG4gICAqICAgICAgICAgbXlWYWx1ZTogXCJ7eyBteVZhbHVlIH19XCJcbiAgICogICAgICAgPC9mb3JtPlxuICAgKiAgICAgPC9kaXY+XG4gICAqICAgPC9maWxlPlxuICAgKiA8L2V4YW1wbGU+XG4gICAqL1xuICB0aGlzLiRyb2xsYmFja1ZpZXdWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgICR0aW1lb3V0LmNhbmNlbChwZW5kaW5nRGVib3VuY2UpO1xuICAgIGN0cmwuJHZpZXdWYWx1ZSA9IGN0cmwuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlO1xuICAgIGN0cmwuJHJlbmRlcigpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZhbGlkYXRlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSdW5zIGVhY2ggb2YgdGhlIHJlZ2lzdGVyZWQgdmFsaWRhdG9ycyAoZmlyc3Qgc3luY2hyb25vdXMgdmFsaWRhdG9ycyBhbmQgdGhlblxuICAgKiBhc3luY2hyb25vdXMgdmFsaWRhdG9ycykuXG4gICAqIElmIHRoZSB2YWxpZGl0eSBjaGFuZ2VzIHRvIGludmFsaWQsIHRoZSBtb2RlbCB3aWxsIGJlIHNldCB0byBgdW5kZWZpbmVkYCxcbiAgICogdW5sZXNzIHtAbGluayBuZ01vZGVsT3B0aW9ucyBgbmdNb2RlbE9wdGlvbnMuYWxsb3dJbnZhbGlkYH0gaXMgYHRydWVgLlxuICAgKiBJZiB0aGUgdmFsaWRpdHkgY2hhbmdlcyB0byB2YWxpZCwgaXQgd2lsbCBzZXQgdGhlIG1vZGVsIHRvIHRoZSBsYXN0IGF2YWlsYWJsZSB2YWxpZFxuICAgKiBgJG1vZGVsVmFsdWVgLCBpLmUuIGVpdGhlciB0aGUgbGFzdCBwYXJzZWQgdmFsdWUgb3IgdGhlIGxhc3QgdmFsdWUgc2V0IGZyb20gdGhlIHNjb3BlLlxuICAgKi9cbiAgdGhpcy4kdmFsaWRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBpZ25vcmUgJHZhbGlkYXRlIGJlZm9yZSBtb2RlbCBpcyBpbml0aWFsaXplZFxuICAgIGlmIChpc051bWJlcihjdHJsLiRtb2RlbFZhbHVlKSAmJiBpc05hTihjdHJsLiRtb2RlbFZhbHVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB2aWV3VmFsdWUgPSBjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZTtcbiAgICAvLyBOb3RlOiB3ZSB1c2UgdGhlICQkcmF3TW9kZWxWYWx1ZSBhcyAkbW9kZWxWYWx1ZSBtaWdodCBoYXZlIGJlZW5cbiAgICAvLyBzZXQgdG8gdW5kZWZpbmVkIGR1cmluZyBhIHZpZXcgLT4gbW9kZWwgdXBkYXRlIHRoYXQgZm91bmQgdmFsaWRhdGlvblxuICAgIC8vIGVycm9ycy4gV2UgY2FuJ3QgcGFyc2UgdGhlIHZpZXcgaGVyZSwgc2luY2UgdGhhdCBjb3VsZCBjaGFuZ2VcbiAgICAvLyB0aGUgbW9kZWwgYWx0aG91Z2ggbmVpdGhlciB2aWV3VmFsdWUgbm9yIHRoZSBtb2RlbCBvbiB0aGUgc2NvcGUgY2hhbmdlZFxuICAgIHZhciBtb2RlbFZhbHVlID0gY3RybC4kJHJhd01vZGVsVmFsdWU7XG5cbiAgICB2YXIgcHJldlZhbGlkID0gY3RybC4kdmFsaWQ7XG4gICAgdmFyIHByZXZNb2RlbFZhbHVlID0gY3RybC4kbW9kZWxWYWx1ZTtcblxuICAgIHZhciBhbGxvd0ludmFsaWQgPSBjdHJsLiRvcHRpb25zICYmIGN0cmwuJG9wdGlvbnMuYWxsb3dJbnZhbGlkO1xuXG4gICAgY3RybC4kJHJ1blZhbGlkYXRvcnMobW9kZWxWYWx1ZSwgdmlld1ZhbHVlLCBmdW5jdGlvbihhbGxWYWxpZCkge1xuICAgICAgLy8gSWYgdGhlcmUgd2FzIG5vIGNoYW5nZSBpbiB2YWxpZGl0eSwgZG9uJ3QgdXBkYXRlIHRoZSBtb2RlbFxuICAgICAgLy8gVGhpcyBwcmV2ZW50cyBjaGFuZ2luZyBhbiBpbnZhbGlkIG1vZGVsVmFsdWUgdG8gdW5kZWZpbmVkXG4gICAgICBpZiAoIWFsbG93SW52YWxpZCAmJiBwcmV2VmFsaWQgIT09IGFsbFZhbGlkKSB7XG4gICAgICAgIC8vIE5vdGU6IERvbid0IGNoZWNrIGN0cmwuJHZhbGlkIGhlcmUsIGFzIHdlIGNvdWxkIGhhdmVcbiAgICAgICAgLy8gZXh0ZXJuYWwgdmFsaWRhdG9ycyAoZS5nLiBjYWxjdWxhdGVkIG9uIHRoZSBzZXJ2ZXIpLFxuICAgICAgICAvLyB0aGF0IGp1c3QgY2FsbCAkc2V0VmFsaWRpdHkgYW5kIG5lZWQgdGhlIG1vZGVsIHZhbHVlXG4gICAgICAgIC8vIHRvIGNhbGN1bGF0ZSB0aGVpciB2YWxpZGl0eS5cbiAgICAgICAgY3RybC4kbW9kZWxWYWx1ZSA9IGFsbFZhbGlkID8gbW9kZWxWYWx1ZSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoY3RybC4kbW9kZWxWYWx1ZSAhPT0gcHJldk1vZGVsVmFsdWUpIHtcbiAgICAgICAgICBjdHJsLiQkd3JpdGVNb2RlbFRvU2NvcGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gIH07XG5cbiAgdGhpcy4kJHJ1blZhbGlkYXRvcnMgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUsIGRvbmVDYWxsYmFjaykge1xuICAgIGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQrKztcbiAgICB2YXIgbG9jYWxWYWxpZGF0aW9uUnVuSWQgPSBjdXJyZW50VmFsaWRhdGlvblJ1bklkO1xuXG4gICAgLy8gY2hlY2sgcGFyc2VyIGVycm9yXG4gICAgaWYgKCFwcm9jZXNzUGFyc2VFcnJvcnMoKSkge1xuICAgICAgdmFsaWRhdGlvbkRvbmUoZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXByb2Nlc3NTeW5jVmFsaWRhdG9ycygpKSB7XG4gICAgICB2YWxpZGF0aW9uRG9uZShmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHByb2Nlc3NBc3luY1ZhbGlkYXRvcnMoKTtcblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NQYXJzZUVycm9ycygpIHtcbiAgICAgIHZhciBlcnJvcktleSA9IGN0cmwuJCRwYXJzZXJOYW1lIHx8ICdwYXJzZSc7XG4gICAgICBpZiAocGFyc2VyVmFsaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzZXRWYWxpZGl0eShlcnJvcktleSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXBhcnNlclZhbGlkKSB7XG4gICAgICAgICAgZm9yRWFjaChjdHJsLiR2YWxpZGF0b3JzLCBmdW5jdGlvbih2LCBuYW1lKSB7XG4gICAgICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCBudWxsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb3JFYWNoKGN0cmwuJGFzeW5jVmFsaWRhdG9ycywgZnVuY3Rpb24odiwgbmFtZSkge1xuICAgICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgbnVsbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IHRoZSBwYXJzZSBlcnJvciBsYXN0LCB0byBwcmV2ZW50IHVuc2V0dGluZyBpdCwgc2hvdWxkIGEgJHZhbGlkYXRvcnMga2V5ID09IHBhcnNlck5hbWVcbiAgICAgICAgc2V0VmFsaWRpdHkoZXJyb3JLZXksIHBhcnNlclZhbGlkKTtcbiAgICAgICAgcmV0dXJuIHBhcnNlclZhbGlkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1N5bmNWYWxpZGF0b3JzKCkge1xuICAgICAgdmFyIHN5bmNWYWxpZGF0b3JzVmFsaWQgPSB0cnVlO1xuICAgICAgZm9yRWFjaChjdHJsLiR2YWxpZGF0b3JzLCBmdW5jdGlvbih2YWxpZGF0b3IsIG5hbWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHZhbGlkYXRvcihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpO1xuICAgICAgICBzeW5jVmFsaWRhdG9yc1ZhbGlkID0gc3luY1ZhbGlkYXRvcnNWYWxpZCAmJiByZXN1bHQ7XG4gICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICAgIGlmICghc3luY1ZhbGlkYXRvcnNWYWxpZCkge1xuICAgICAgICBmb3JFYWNoKGN0cmwuJGFzeW5jVmFsaWRhdG9ycywgZnVuY3Rpb24odiwgbmFtZSkge1xuICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIG51bGwpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0FzeW5jVmFsaWRhdG9ycygpIHtcbiAgICAgIHZhciB2YWxpZGF0b3JQcm9taXNlcyA9IFtdO1xuICAgICAgdmFyIGFsbFZhbGlkID0gdHJ1ZTtcbiAgICAgIGZvckVhY2goY3RybC4kYXN5bmNWYWxpZGF0b3JzLCBmdW5jdGlvbih2YWxpZGF0b3IsIG5hbWUpIHtcbiAgICAgICAgdmFyIHByb21pc2UgPSB2YWxpZGF0b3IobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKTtcbiAgICAgICAgaWYgKCFpc1Byb21pc2VMaWtlKHByb21pc2UpKSB7XG4gICAgICAgICAgdGhyb3cgJG5nTW9kZWxNaW5FcnIoXCIkYXN5bmNWYWxpZGF0b3JzXCIsXG4gICAgICAgICAgICBcIkV4cGVjdGVkIGFzeW5jaHJvbm91cyB2YWxpZGF0b3IgdG8gcmV0dXJuIGEgcHJvbWlzZSBidXQgZ290ICd7MH0nIGluc3RlYWQuXCIsIHByb21pc2UpO1xuICAgICAgICB9XG4gICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIHVuZGVmaW5lZCk7XG4gICAgICAgIHZhbGlkYXRvclByb21pc2VzLnB1c2gocHJvbWlzZS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIHRydWUpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIGFsbFZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgZmFsc2UpO1xuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICAgIGlmICghdmFsaWRhdG9yUHJvbWlzZXMubGVuZ3RoKSB7XG4gICAgICAgIHZhbGlkYXRpb25Eb25lKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHEuYWxsKHZhbGlkYXRvclByb21pc2VzKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhbGlkYXRpb25Eb25lKGFsbFZhbGlkKTtcbiAgICAgICAgfSwgbm9vcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0VmFsaWRpdHkobmFtZSwgaXNWYWxpZCkge1xuICAgICAgaWYgKGxvY2FsVmFsaWRhdGlvblJ1bklkID09PSBjdXJyZW50VmFsaWRhdGlvblJ1bklkKSB7XG4gICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KG5hbWUsIGlzVmFsaWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRpb25Eb25lKGFsbFZhbGlkKSB7XG4gICAgICBpZiAobG9jYWxWYWxpZGF0aW9uUnVuSWQgPT09IGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQpIHtcblxuICAgICAgICBkb25lQ2FsbGJhY2soYWxsVmFsaWQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRjb21taXRWaWV3VmFsdWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENvbW1pdCBhIHBlbmRpbmcgdXBkYXRlIHRvIHRoZSBgJG1vZGVsVmFsdWVgLlxuICAgKlxuICAgKiBVcGRhdGVzIG1heSBiZSBwZW5kaW5nIGJ5IGEgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIGEgc29tZSBmdXR1cmVcbiAgICogZXZlbnQgZGVmaW5lZCBpbiBgbmctbW9kZWwtb3B0aW9uc2AuIHRoaXMgbWV0aG9kIGlzIHJhcmVseSBuZWVkZWQgYXMgYE5nTW9kZWxDb250cm9sbGVyYFxuICAgKiB1c3VhbGx5IGhhbmRsZXMgY2FsbGluZyB0aGlzIGluIHJlc3BvbnNlIHRvIGlucHV0IGV2ZW50cy5cbiAgICovXG4gIHRoaXMuJGNvbW1pdFZpZXdWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWV3VmFsdWUgPSBjdHJsLiR2aWV3VmFsdWU7XG5cbiAgICAkdGltZW91dC5jYW5jZWwocGVuZGluZ0RlYm91bmNlKTtcblxuICAgIC8vIElmIHRoZSB2aWV3IHZhbHVlIGhhcyBub3QgY2hhbmdlZCB0aGVuIHdlIHNob3VsZCBqdXN0IGV4aXQsIGV4Y2VwdCBpbiB0aGUgY2FzZSB3aGVyZSB0aGVyZSBpc1xuICAgIC8vIGEgbmF0aXZlIHZhbGlkYXRvciBvbiB0aGUgZWxlbWVudC4gSW4gdGhpcyBjYXNlIHRoZSB2YWxpZGF0aW9uIHN0YXRlIG1heSBoYXZlIGNoYW5nZWQgZXZlbiB0aG91Z2hcbiAgICAvLyB0aGUgdmlld1ZhbHVlIGhhcyBzdGF5ZWQgZW1wdHkuXG4gICAgaWYgKGN0cmwuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlID09PSB2aWV3VmFsdWUgJiYgKHZpZXdWYWx1ZSAhPT0gJycgfHwgIWN0cmwuJCRoYXNOYXRpdmVWYWxpZGF0b3JzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSA9IHZpZXdWYWx1ZTtcblxuICAgIC8vIGNoYW5nZSB0byBkaXJ0eVxuICAgIGlmIChjdHJsLiRwcmlzdGluZSkge1xuICAgICAgdGhpcy4kc2V0RGlydHkoKTtcbiAgICB9XG4gICAgdGhpcy4kJHBhcnNlQW5kVmFsaWRhdGUoKTtcbiAgfTtcblxuICB0aGlzLiQkcGFyc2VBbmRWYWxpZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWV3VmFsdWUgPSBjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZTtcbiAgICB2YXIgbW9kZWxWYWx1ZSA9IHZpZXdWYWx1ZTtcbiAgICBwYXJzZXJWYWxpZCA9IGlzVW5kZWZpbmVkKG1vZGVsVmFsdWUpID8gdW5kZWZpbmVkIDogdHJ1ZTtcblxuICAgIGlmIChwYXJzZXJWYWxpZCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdHJsLiRwYXJzZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1vZGVsVmFsdWUgPSBjdHJsLiRwYXJzZXJzW2ldKG1vZGVsVmFsdWUpO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQobW9kZWxWYWx1ZSkpIHtcbiAgICAgICAgICBwYXJzZXJWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc051bWJlcihjdHJsLiRtb2RlbFZhbHVlKSAmJiBpc05hTihjdHJsLiRtb2RlbFZhbHVlKSkge1xuICAgICAgLy8gY3RybC4kbW9kZWxWYWx1ZSBoYXMgbm90IGJlZW4gdG91Y2hlZCB5ZXQuLi5cbiAgICAgIGN0cmwuJG1vZGVsVmFsdWUgPSBuZ01vZGVsR2V0KCRzY29wZSk7XG4gICAgfVxuICAgIHZhciBwcmV2TW9kZWxWYWx1ZSA9IGN0cmwuJG1vZGVsVmFsdWU7XG4gICAgdmFyIGFsbG93SW52YWxpZCA9IGN0cmwuJG9wdGlvbnMgJiYgY3RybC4kb3B0aW9ucy5hbGxvd0ludmFsaWQ7XG4gICAgY3RybC4kJHJhd01vZGVsVmFsdWUgPSBtb2RlbFZhbHVlO1xuXG4gICAgaWYgKGFsbG93SW52YWxpZCkge1xuICAgICAgY3RybC4kbW9kZWxWYWx1ZSA9IG1vZGVsVmFsdWU7XG4gICAgICB3cml0ZVRvTW9kZWxJZk5lZWRlZCgpO1xuICAgIH1cblxuICAgIC8vIFBhc3MgdGhlICQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSBoZXJlLCBiZWNhdXNlIHRoZSBjYWNoZWQgdmlld1ZhbHVlIG1pZ2h0IGJlIG91dCBvZiBkYXRlLlxuICAgIC8vIFRoaXMgY2FuIGhhcHBlbiBpZiBlLmcuICRzZXRWaWV3VmFsdWUgaXMgY2FsbGVkIGZyb20gaW5zaWRlIGEgcGFyc2VyXG4gICAgY3RybC4kJHJ1blZhbGlkYXRvcnMobW9kZWxWYWx1ZSwgY3RybC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUsIGZ1bmN0aW9uKGFsbFZhbGlkKSB7XG4gICAgICBpZiAoIWFsbG93SW52YWxpZCkge1xuICAgICAgICAvLyBOb3RlOiBEb24ndCBjaGVjayBjdHJsLiR2YWxpZCBoZXJlLCBhcyB3ZSBjb3VsZCBoYXZlXG4gICAgICAgIC8vIGV4dGVybmFsIHZhbGlkYXRvcnMgKGUuZy4gY2FsY3VsYXRlZCBvbiB0aGUgc2VydmVyKSxcbiAgICAgICAgLy8gdGhhdCBqdXN0IGNhbGwgJHNldFZhbGlkaXR5IGFuZCBuZWVkIHRoZSBtb2RlbCB2YWx1ZVxuICAgICAgICAvLyB0byBjYWxjdWxhdGUgdGhlaXIgdmFsaWRpdHkuXG4gICAgICAgIGN0cmwuJG1vZGVsVmFsdWUgPSBhbGxWYWxpZCA/IG1vZGVsVmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgICAgIHdyaXRlVG9Nb2RlbElmTmVlZGVkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiB3cml0ZVRvTW9kZWxJZk5lZWRlZCgpIHtcbiAgICAgIGlmIChjdHJsLiRtb2RlbFZhbHVlICE9PSBwcmV2TW9kZWxWYWx1ZSkge1xuICAgICAgICBjdHJsLiQkd3JpdGVNb2RlbFRvU2NvcGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy4kJHdyaXRlTW9kZWxUb1Njb3BlID0gZnVuY3Rpb24oKSB7XG4gICAgbmdNb2RlbFNldCgkc2NvcGUsIGN0cmwuJG1vZGVsVmFsdWUpO1xuICAgIGZvckVhY2goY3RybC4kdmlld0NoYW5nZUxpc3RlbmVycywgZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZpZXdWYWx1ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVXBkYXRlIHRoZSB2aWV3IHZhbHVlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYW4gaW5wdXQgZGlyZWN0aXZlIHdhbnQgdG8gY2hhbmdlIHRoZSB2aWV3IHZhbHVlOyB0eXBpY2FsbHksXG4gICAqIHRoaXMgaXMgZG9uZSBmcm9tIHdpdGhpbiBhIERPTSBldmVudCBoYW5kbGVyLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0fSBjYWxscyBpdCB3aGVuIHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQgY2hhbmdlcyBhbmRcbiAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpzZWxlY3Qgc2VsZWN0fSBjYWxscyBpdCB3aGVuIGFuIG9wdGlvbiBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogSWYgdGhlIG5ldyBgdmFsdWVgIGlzIGFuIG9iamVjdCAocmF0aGVyIHRoYW4gYSBzdHJpbmcgb3IgYSBudW1iZXIpLCB3ZSBzaG91bGQgbWFrZSBhIGNvcHkgb2YgdGhlXG4gICAqIG9iamVjdCBiZWZvcmUgcGFzc2luZyBpdCB0byBgJHNldFZpZXdWYWx1ZWAuICBUaGlzIGlzIGJlY2F1c2UgYG5nTW9kZWxgIGRvZXMgbm90IHBlcmZvcm0gYSBkZWVwXG4gICAqIHdhdGNoIG9mIG9iamVjdHMsIGl0IG9ubHkgbG9va3MgZm9yIGEgY2hhbmdlIG9mIGlkZW50aXR5LiBJZiB5b3Ugb25seSBjaGFuZ2UgdGhlIHByb3BlcnR5IG9mXG4gICAqIHRoZSBvYmplY3QgdGhlbiBuZ01vZGVsIHdpbGwgbm90IHJlYWxpc2UgdGhhdCB0aGUgb2JqZWN0IGhhcyBjaGFuZ2VkIGFuZCB3aWxsIG5vdCBpbnZva2UgdGhlXG4gICAqIGAkcGFyc2Vyc2AgYW5kIGAkdmFsaWRhdG9yc2AgcGlwZWxpbmVzLlxuICAgKlxuICAgKiBGb3IgdGhpcyByZWFzb24sIHlvdSBzaG91bGQgbm90IGNoYW5nZSBwcm9wZXJ0aWVzIG9mIHRoZSBjb3B5IG9uY2UgaXQgaGFzIGJlZW4gcGFzc2VkIHRvXG4gICAqIGAkc2V0Vmlld1ZhbHVlYC4gT3RoZXJ3aXNlIHlvdSBtYXkgY2F1c2UgdGhlIG1vZGVsIHZhbHVlIG9uIHRoZSBzY29wZSB0byBjaGFuZ2UgaW5jb3JyZWN0bHkuXG4gICAqXG4gICAqIFdoZW4gdGhpcyBtZXRob2QgaXMgY2FsbGVkLCB0aGUgbmV3IGB2YWx1ZWAgd2lsbCBiZSBzdGFnZWQgZm9yIGNvbW1pdHRpbmcgdGhyb3VnaCB0aGUgYCRwYXJzZXJzYFxuICAgKiBhbmQgYCR2YWxpZGF0b3JzYCBwaXBlbGluZXMuIElmIHRoZXJlIGFyZSBubyBzcGVjaWFsIHtAbGluayBuZ01vZGVsT3B0aW9uc30gc3BlY2lmaWVkIHRoZW4gdGhlIHN0YWdlZFxuICAgKiB2YWx1ZSBzZW50IGRpcmVjdGx5IGZvciBwcm9jZXNzaW5nLCBmaW5hbGx5IHRvIGJlIGFwcGxpZWQgdG8gYCRtb2RlbFZhbHVlYCBhbmQgdGhlbiB0aGVcbiAgICogKipleHByZXNzaW9uKiogc3BlY2lmaWVkIGluIHRoZSBgbmctbW9kZWxgIGF0dHJpYnV0ZS5cbiAgICpcbiAgICogTGFzdGx5LCBhbGwgdGhlIHJlZ2lzdGVyZWQgY2hhbmdlIGxpc3RlbmVycywgaW4gdGhlIGAkdmlld0NoYW5nZUxpc3RlbmVyc2AgbGlzdCwgYXJlIGNhbGxlZC5cbiAgICpcbiAgICogSW4gY2FzZSB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30gZGlyZWN0aXZlIGlzIHVzZWQgd2l0aCBgdXBkYXRlT25gXG4gICAqIGFuZCB0aGUgYGRlZmF1bHRgIHRyaWdnZXIgaXMgbm90IGxpc3RlZCwgYWxsIHRob3NlIGFjdGlvbnMgd2lsbCByZW1haW4gcGVuZGluZyB1bnRpbCBvbmUgb2YgdGhlXG4gICAqIGB1cGRhdGVPbmAgZXZlbnRzIGlzIHRyaWdnZXJlZCBvbiB0aGUgRE9NIGVsZW1lbnQuXG4gICAqIEFsbCB0aGVzZSBhY3Rpb25zIHdpbGwgYmUgZGVib3VuY2VkIGlmIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfVxuICAgKiBkaXJlY3RpdmUgaXMgdXNlZCB3aXRoIGEgY3VzdG9tIGRlYm91bmNlIGZvciB0aGlzIHBhcnRpY3VsYXIgZXZlbnQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gZG9lcyBub3QgdHJpZ2dlciBhIGAkZGlnZXN0YC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFZhbHVlIGZyb20gdGhlIHZpZXcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0cmlnZ2VyIEV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSB1cGRhdGUuXG4gICAqL1xuICB0aGlzLiRzZXRWaWV3VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSwgdHJpZ2dlcikge1xuICAgIGN0cmwuJHZpZXdWYWx1ZSA9IHZhbHVlO1xuICAgIGlmICghY3RybC4kb3B0aW9ucyB8fCBjdHJsLiRvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdCkge1xuICAgICAgY3RybC4kJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0KHRyaWdnZXIpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLiQkZGVib3VuY2VWaWV3VmFsdWVDb21taXQgPSBmdW5jdGlvbih0cmlnZ2VyKSB7XG4gICAgdmFyIGRlYm91bmNlRGVsYXkgPSAwLFxuICAgICAgICBvcHRpb25zID0gY3RybC4kb3B0aW9ucyxcbiAgICAgICAgZGVib3VuY2U7XG5cbiAgICBpZiAob3B0aW9ucyAmJiBpc0RlZmluZWQob3B0aW9ucy5kZWJvdW5jZSkpIHtcbiAgICAgIGRlYm91bmNlID0gb3B0aW9ucy5kZWJvdW5jZTtcbiAgICAgIGlmIChpc051bWJlcihkZWJvdW5jZSkpIHtcbiAgICAgICAgZGVib3VuY2VEZWxheSA9IGRlYm91bmNlO1xuICAgICAgfSBlbHNlIGlmIChpc051bWJlcihkZWJvdW5jZVt0cmlnZ2VyXSkpIHtcbiAgICAgICAgZGVib3VuY2VEZWxheSA9IGRlYm91bmNlW3RyaWdnZXJdO1xuICAgICAgfSBlbHNlIGlmIChpc051bWJlcihkZWJvdW5jZVsnZGVmYXVsdCddKSkge1xuICAgICAgICBkZWJvdW5jZURlbGF5ID0gZGVib3VuY2VbJ2RlZmF1bHQnXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkdGltZW91dC5jYW5jZWwocGVuZGluZ0RlYm91bmNlKTtcbiAgICBpZiAoZGVib3VuY2VEZWxheSkge1xuICAgICAgcGVuZGluZ0RlYm91bmNlID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGN0cmwuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgICAgfSwgZGVib3VuY2VEZWxheSk7XG4gICAgfSBlbHNlIGlmICgkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgIGN0cmwuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICBjdHJsLiRjb21taXRWaWV3VmFsdWUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAvLyBtb2RlbCAtPiB2YWx1ZVxuICAvLyBOb3RlOiB3ZSBjYW5ub3QgdXNlIGEgbm9ybWFsIHNjb3BlLiR3YXRjaCBhcyB3ZSB3YW50IHRvIGRldGVjdCB0aGUgZm9sbG93aW5nOlxuICAvLyAxLiBzY29wZSB2YWx1ZSBpcyAnYSdcbiAgLy8gMi4gdXNlciBlbnRlcnMgJ2InXG4gIC8vIDMuIG5nLWNoYW5nZSBraWNrcyBpbiBhbmQgcmV2ZXJ0cyBzY29wZSB2YWx1ZSB0byAnYSdcbiAgLy8gICAgLT4gc2NvcGUgdmFsdWUgZGlkIG5vdCBjaGFuZ2Ugc2luY2UgdGhlIGxhc3QgZGlnZXN0IGFzXG4gIC8vICAgICAgIG5nLWNoYW5nZSBleGVjdXRlcyBpbiBhcHBseSBwaGFzZVxuICAvLyA0LiB2aWV3IHNob3VsZCBiZSBjaGFuZ2VkIGJhY2sgdG8gJ2EnXG4gICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gbmdNb2RlbFdhdGNoKCkge1xuICAgIHZhciBtb2RlbFZhbHVlID0gbmdNb2RlbEdldCgkc2NvcGUpO1xuXG4gICAgLy8gaWYgc2NvcGUgbW9kZWwgdmFsdWUgYW5kIG5nTW9kZWwgdmFsdWUgYXJlIG91dCBvZiBzeW5jXG4gICAgLy8gVE9ETyhwZXJmKTogd2h5IG5vdCBtb3ZlIHRoaXMgdG8gdGhlIGFjdGlvbiBmbj9cbiAgICBpZiAobW9kZWxWYWx1ZSAhPT0gY3RybC4kbW9kZWxWYWx1ZSAmJlxuICAgICAgIC8vIGNoZWNrcyBmb3IgTmFOIGlzIG5lZWRlZCB0byBhbGxvdyBzZXR0aW5nIHRoZSBtb2RlbCB0byBOYU4gd2hlbiB0aGVyZSdzIGFuIGFzeW5jVmFsaWRhdG9yXG4gICAgICAgKGN0cmwuJG1vZGVsVmFsdWUgPT09IGN0cmwuJG1vZGVsVmFsdWUgfHwgbW9kZWxWYWx1ZSA9PT0gbW9kZWxWYWx1ZSlcbiAgICApIHtcbiAgICAgIGN0cmwuJG1vZGVsVmFsdWUgPSBjdHJsLiQkcmF3TW9kZWxWYWx1ZSA9IG1vZGVsVmFsdWU7XG4gICAgICBwYXJzZXJWYWxpZCA9IHVuZGVmaW5lZDtcblxuICAgICAgdmFyIGZvcm1hdHRlcnMgPSBjdHJsLiRmb3JtYXR0ZXJzLFxuICAgICAgICAgIGlkeCA9IGZvcm1hdHRlcnMubGVuZ3RoO1xuXG4gICAgICB2YXIgdmlld1ZhbHVlID0gbW9kZWxWYWx1ZTtcbiAgICAgIHdoaWxlIChpZHgtLSkge1xuICAgICAgICB2aWV3VmFsdWUgPSBmb3JtYXR0ZXJzW2lkeF0odmlld1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChjdHJsLiR2aWV3VmFsdWUgIT09IHZpZXdWYWx1ZSkge1xuICAgICAgICBjdHJsLiR2aWV3VmFsdWUgPSBjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSA9IHZpZXdWYWx1ZTtcbiAgICAgICAgY3RybC4kcmVuZGVyKCk7XG5cbiAgICAgICAgY3RybC4kJHJ1blZhbGlkYXRvcnMobW9kZWxWYWx1ZSwgdmlld1ZhbHVlLCBub29wKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbW9kZWxWYWx1ZTtcbiAgfSk7XG59XTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW9kZWxcbiAqXG4gKiBAZWxlbWVudCBpbnB1dFxuICogQHByaW9yaXR5IDFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdNb2RlbGAgZGlyZWN0aXZlIGJpbmRzIGFuIGBpbnB1dGAsYHNlbGVjdGAsIGB0ZXh0YXJlYWAgKG9yIGN1c3RvbSBmb3JtIGNvbnRyb2wpIHRvIGFcbiAqIHByb3BlcnR5IG9uIHRoZSBzY29wZSB1c2luZyB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciBOZ01vZGVsQ29udHJvbGxlcn0sXG4gKiB3aGljaCBpcyBjcmVhdGVkIGFuZCBleHBvc2VkIGJ5IHRoaXMgZGlyZWN0aXZlLlxuICpcbiAqIGBuZ01vZGVsYCBpcyByZXNwb25zaWJsZSBmb3I6XG4gKlxuICogLSBCaW5kaW5nIHRoZSB2aWV3IGludG8gdGhlIG1vZGVsLCB3aGljaCBvdGhlciBkaXJlY3RpdmVzIHN1Y2ggYXMgYGlucHV0YCwgYHRleHRhcmVhYCBvciBgc2VsZWN0YFxuICogICByZXF1aXJlLlxuICogLSBQcm92aWRpbmcgdmFsaWRhdGlvbiBiZWhhdmlvciAoaS5lLiByZXF1aXJlZCwgbnVtYmVyLCBlbWFpbCwgdXJsKS5cbiAqIC0gS2VlcGluZyB0aGUgc3RhdGUgb2YgdGhlIGNvbnRyb2wgKHZhbGlkL2ludmFsaWQsIGRpcnR5L3ByaXN0aW5lLCB0b3VjaGVkL3VudG91Y2hlZCwgdmFsaWRhdGlvbiBlcnJvcnMpLlxuICogLSBTZXR0aW5nIHJlbGF0ZWQgY3NzIGNsYXNzZXMgb24gdGhlIGVsZW1lbnQgKGBuZy12YWxpZGAsIGBuZy1pbnZhbGlkYCwgYG5nLWRpcnR5YCwgYG5nLXByaXN0aW5lYCwgYG5nLXRvdWNoZWRgLCBgbmctdW50b3VjaGVkYCkgaW5jbHVkaW5nIGFuaW1hdGlvbnMuXG4gKiAtIFJlZ2lzdGVyaW5nIHRoZSBjb250cm9sIHdpdGggaXRzIHBhcmVudCB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0gZm9ybX0uXG4gKlxuICogTm90ZTogYG5nTW9kZWxgIHdpbGwgdHJ5IHRvIGJpbmQgdG8gdGhlIHByb3BlcnR5IGdpdmVuIGJ5IGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24gb24gdGhlXG4gKiBjdXJyZW50IHNjb3BlLiBJZiB0aGUgcHJvcGVydHkgZG9lc24ndCBhbHJlYWR5IGV4aXN0IG9uIHRoaXMgc2NvcGUsIGl0IHdpbGwgYmUgY3JlYXRlZFxuICogaW1wbGljaXRseSBhbmQgYWRkZWQgdG8gdGhlIHNjb3BlLlxuICpcbiAqIEZvciBiZXN0IHByYWN0aWNlcyBvbiB1c2luZyBgbmdNb2RlbGAsIHNlZTpcbiAqXG4gKiAgLSBbVW5kZXJzdGFuZGluZyBTY29wZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvd2lraS9VbmRlcnN0YW5kaW5nLVNjb3BlcylcbiAqXG4gKiBGb3IgYmFzaWMgZXhhbXBsZXMsIGhvdyB0byB1c2UgYG5nTW9kZWxgLCBzZWU6XG4gKlxuICogIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dCBpbnB1dH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W3RleHRdIHRleHR9XG4gKiAgICAtIHtAbGluayBpbnB1dFtjaGVja2JveF0gY2hlY2tib3h9XG4gKiAgICAtIHtAbGluayBpbnB1dFtyYWRpb10gcmFkaW99XG4gKiAgICAtIHtAbGluayBpbnB1dFtudW1iZXJdIG51bWJlcn1cbiAqICAgIC0ge0BsaW5rIGlucHV0W2VtYWlsXSBlbWFpbH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W3VybF0gdXJsfVxuICogICAgLSB7QGxpbmsgaW5wdXRbZGF0ZV0gZGF0ZX1cbiAqICAgIC0ge0BsaW5rIGlucHV0W2RhdGV0aW1lLWxvY2FsXSBkYXRldGltZS1sb2NhbH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W3RpbWVdIHRpbWV9XG4gKiAgICAtIHtAbGluayBpbnB1dFttb250aF0gbW9udGh9XG4gKiAgICAtIHtAbGluayBpbnB1dFt3ZWVrXSB3ZWVrfVxuICogIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTpzZWxlY3Qgc2VsZWN0fVxuICogIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTp0ZXh0YXJlYSB0ZXh0YXJlYX1cbiAqXG4gKiAjIENTUyBjbGFzc2VzXG4gKiBUaGUgZm9sbG93aW5nIENTUyBjbGFzc2VzIGFyZSBhZGRlZCBhbmQgcmVtb3ZlZCBvbiB0aGUgYXNzb2NpYXRlZCBpbnB1dC9zZWxlY3QvdGV4dGFyZWEgZWxlbWVudFxuICogZGVwZW5kaW5nIG9uIHRoZSB2YWxpZGl0eSBvZiB0aGUgbW9kZWwuXG4gKlxuICogIC0gYG5nLXZhbGlkYDogdGhlIG1vZGVsIGlzIHZhbGlkXG4gKiAgLSBgbmctaW52YWxpZGA6IHRoZSBtb2RlbCBpcyBpbnZhbGlkXG4gKiAgLSBgbmctdmFsaWQtW2tleV1gOiBmb3IgZWFjaCB2YWxpZCBrZXkgYWRkZWQgYnkgYCRzZXRWYWxpZGl0eWBcbiAqICAtIGBuZy1pbnZhbGlkLVtrZXldYDogZm9yIGVhY2ggaW52YWxpZCBrZXkgYWRkZWQgYnkgYCRzZXRWYWxpZGl0eWBcbiAqICAtIGBuZy1wcmlzdGluZWA6IHRoZSBjb250cm9sIGhhc24ndCBiZWVuIGludGVyYWN0ZWQgd2l0aCB5ZXRcbiAqICAtIGBuZy1kaXJ0eWA6IHRoZSBjb250cm9sIGhhcyBiZWVuIGludGVyYWN0ZWQgd2l0aFxuICogIC0gYG5nLXRvdWNoZWRgOiB0aGUgY29udHJvbCBoYXMgYmVlbiBibHVycmVkXG4gKiAgLSBgbmctdW50b3VjaGVkYDogdGhlIGNvbnRyb2wgaGFzbid0IGJlZW4gYmx1cnJlZFxuICogIC0gYG5nLXBlbmRpbmdgOiBhbnkgYCRhc3luY1ZhbGlkYXRvcnNgIGFyZSB1bmZ1bGZpbGxlZFxuICpcbiAqIEtlZXAgaW4gbWluZCB0aGF0IG5nQW5pbWF0ZSBjYW4gZGV0ZWN0IGVhY2ggb2YgdGhlc2UgY2xhc3NlcyB3aGVuIGFkZGVkIGFuZCByZW1vdmVkLlxuICpcbiAqICMjIEFuaW1hdGlvbiBIb29rc1xuICpcbiAqIEFuaW1hdGlvbnMgd2l0aGluIG1vZGVscyBhcmUgdHJpZ2dlcmVkIHdoZW4gYW55IG9mIHRoZSBhc3NvY2lhdGVkIENTUyBjbGFzc2VzIGFyZSBhZGRlZCBhbmQgcmVtb3ZlZFxuICogb24gdGhlIGlucHV0IGVsZW1lbnQgd2hpY2ggaXMgYXR0YWNoZWQgdG8gdGhlIG1vZGVsLiBUaGVzZSBjbGFzc2VzIGFyZTogYC5uZy1wcmlzdGluZWAsIGAubmctZGlydHlgLFxuICogYC5uZy1pbnZhbGlkYCBhbmQgYC5uZy12YWxpZGAgYXMgd2VsbCBhcyBhbnkgb3RoZXIgdmFsaWRhdGlvbnMgdGhhdCBhcmUgcGVyZm9ybWVkIG9uIHRoZSBtb2RlbCBpdHNlbGYuXG4gKiBUaGUgYW5pbWF0aW9ucyB0aGF0IGFyZSB0cmlnZ2VyZWQgd2l0aGluIG5nTW9kZWwgYXJlIHNpbWlsYXIgdG8gaG93IHRoZXkgd29yayBpbiBuZ0NsYXNzIGFuZFxuICogYW5pbWF0aW9ucyBjYW4gYmUgaG9va2VkIGludG8gdXNpbmcgQ1NTIHRyYW5zaXRpb25zLCBrZXlmcmFtZXMgYXMgd2VsbCBhcyBKUyBhbmltYXRpb25zLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBhIHNpbXBsZSB3YXkgdG8gdXRpbGl6ZSBDU1MgdHJhbnNpdGlvbnMgdG8gc3R5bGUgYW4gaW5wdXQgZWxlbWVudFxuICogdGhhdCBoYXMgYmVlbiByZW5kZXJlZCBhcyBpbnZhbGlkIGFmdGVyIGl0IGhhcyBiZWVuIHZhbGlkYXRlZDpcbiAqXG4gKiA8cHJlPlxuICogLy9iZSBzdXJlIHRvIGluY2x1ZGUgbmdBbmltYXRlIGFzIGEgbW9kdWxlIHRvIGhvb2sgaW50byBtb3JlXG4gKiAvL2FkdmFuY2VkIGFuaW1hdGlvbnNcbiAqIC5teS1pbnB1dCB7XG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xuICogICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAqIH1cbiAqIC5teS1pbnB1dC5uZy1pbnZhbGlkIHtcbiAqICAgYmFja2dyb3VuZDogcmVkO1xuICogICBjb2xvcjp3aGl0ZTtcbiAqIH1cbiAqIDwvcHJlPlxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZXhhbXBsZSBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBmaXhCYXNlPVwidHJ1ZVwiIG1vZHVsZT1cImlucHV0RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgIGFuZ3VsYXIubW9kdWxlKCdpbnB1dEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgJHNjb3BlLnZhbCA9ICcxJztcbiAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPHN0eWxlPlxuICAgICAgICAgLm15LWlucHV0IHtcbiAgICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcbiAgICAgICAgICAgdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7XG4gICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICAgfVxuICAgICAgICAgLm15LWlucHV0Lm5nLWludmFsaWQge1xuICAgICAgICAgICBjb2xvcjp3aGl0ZTtcbiAgICAgICAgICAgYmFja2dyb3VuZDogcmVkO1xuICAgICAgICAgfVxuICAgICAgIDwvc3R5bGU+XG4gICAgICAgPHAgaWQ9XCJpbnB1dERlc2NyaXB0aW9uXCI+XG4gICAgICAgIFVwZGF0ZSBpbnB1dCB0byBzZWUgdHJhbnNpdGlvbnMgd2hlbiB2YWxpZC9pbnZhbGlkLlxuICAgICAgICBJbnRlZ2VyIGlzIGEgdmFsaWQgdmFsdWUuXG4gICAgICAgPC9wPlxuICAgICAgIDxmb3JtIG5hbWU9XCJ0ZXN0Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwidmFsXCIgbmctcGF0dGVybj1cIi9eXFxkKyQvXCIgbmFtZT1cImFuaW1cIiBjbGFzcz1cIm15LWlucHV0XCJcbiAgICAgICAgICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PVwiaW5wdXREZXNjcmlwdGlvblwiIC8+XG4gICAgICAgPC9mb3JtPlxuICAgICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogIyMgQmluZGluZyB0byBhIGdldHRlci9zZXR0ZXJcbiAqXG4gKiBTb21ldGltZXMgaXQncyBoZWxwZnVsIHRvIGJpbmQgYG5nTW9kZWxgIHRvIGEgZ2V0dGVyL3NldHRlciBmdW5jdGlvbi4gIEEgZ2V0dGVyL3NldHRlciBpcyBhXG4gKiBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSByZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgd2hlbiBjYWxsZWQgd2l0aCB6ZXJvIGFyZ3VtZW50cywgYW5kIHNldHNcbiAqIHRoZSBpbnRlcm5hbCBzdGF0ZSBvZiBhIG1vZGVsIHdoZW4gY2FsbGVkIHdpdGggYW4gYXJndW1lbnQuIEl0J3Mgc29tZXRpbWVzIHVzZWZ1bCB0byB1c2UgdGhpc1xuICogZm9yIG1vZGVscyB0aGF0IGhhdmUgYW4gaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gdGhhdCdzIGRpZmZlcmVudCBmcm9tIHdoYXQgdGhlIG1vZGVsIGV4cG9zZXNcbiAqIHRvIHRoZSB2aWV3LlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1zdWNjZXNzXCI+XG4gKiAqKkJlc3QgUHJhY3RpY2U6KiogSXQncyBiZXN0IHRvIGtlZXAgZ2V0dGVycyBmYXN0IGJlY2F1c2UgQW5ndWxhciBpcyBsaWtlbHkgdG8gY2FsbCB0aGVtIG1vcmVcbiAqIGZyZXF1ZW50bHkgdGhhbiBvdGhlciBwYXJ0cyBvZiB5b3VyIGNvZGUuXG4gKiA8L2Rpdj5cbiAqXG4gKiBZb3UgdXNlIHRoaXMgYmVoYXZpb3IgYnkgYWRkaW5nIGBuZy1tb2RlbC1vcHRpb25zPVwieyBnZXR0ZXJTZXR0ZXI6IHRydWUgfVwiYCB0byBhbiBlbGVtZW50IHRoYXRcbiAqIGhhcyBgbmctbW9kZWxgIGF0dGFjaGVkIHRvIGl0LiBZb3UgY2FuIGFsc28gYWRkIGBuZy1tb2RlbC1vcHRpb25zPVwieyBnZXR0ZXJTZXR0ZXI6IHRydWUgfVwiYCB0b1xuICogYSBgPGZvcm0+YCwgd2hpY2ggd2lsbCBlbmFibGUgdGhpcyBiZWhhdmlvciBmb3IgYWxsIGA8aW5wdXQ+YHMgd2l0aGluIGl0LiBTZWVcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgYG5nTW9kZWxPcHRpb25zYH0gZm9yIG1vcmUuXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byB1c2UgYG5nTW9kZWxgIHdpdGggYSBnZXR0ZXIvc2V0dGVyOlxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdNb2RlbC1nZXR0ZXItc2V0dGVyXCIgbW9kdWxlPVwiZ2V0dGVyU2V0dGVyRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwidXNlckZvcm1cIj5cbiAgICAgICAgICAgPGxhYmVsPk5hbWU6XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJOYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgbmctbW9kZWw9XCJ1c2VyLm5hbWVcIlxuICAgICAgICAgICAgICAgICAgICBuZy1tb2RlbC1vcHRpb25zPVwieyBnZXR0ZXJTZXR0ZXI6IHRydWUgfVwiIC8+XG4gICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICA8L2Zvcm0+XG4gICAgICAgICA8cHJlPnVzZXIubmFtZSA9IDxzcGFuIG5nLWJpbmQ9XCJ1c2VyLm5hbWUoKVwiPjwvc3Bhbj48L3ByZT5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2dldHRlclNldHRlckV4YW1wbGUnLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgIHZhciBfbmFtZSA9ICdCcmlhbic7XG4gICAgICAgICAgICRzY29wZS51c2VyID0ge1xuICAgICAgICAgICAgIG5hbWU6IGZ1bmN0aW9uKG5ld05hbWUpIHtcbiAgICAgICAgICAgICAgLy8gTm90ZSB0aGF0IG5ld05hbWUgY2FuIGJlIHVuZGVmaW5lZCBmb3IgdHdvIHJlYXNvbnM6XG4gICAgICAgICAgICAgIC8vIDEuIEJlY2F1c2UgaXQgaXMgY2FsbGVkIGFzIGEgZ2V0dGVyIGFuZCB0aHVzIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50c1xuICAgICAgICAgICAgICAvLyAyLiBCZWNhdXNlIHRoZSBwcm9wZXJ0eSBzaG91bGQgYWN0dWFsbHkgYmUgc2V0IHRvIHVuZGVmaW5lZC4gVGhpcyBoYXBwZW5zIGUuZy4gaWYgdGhlXG4gICAgICAgICAgICAgIC8vICAgIGlucHV0IGlzIGludmFsaWRcbiAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoX25hbWUgPSBuZXdOYW1lKSA6IF9uYW1lO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG52YXIgbmdNb2RlbERpcmVjdGl2ZSA9IFsnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCRyb290U2NvcGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6IFsnbmdNb2RlbCcsICdeP2Zvcm0nLCAnXj9uZ01vZGVsT3B0aW9ucyddLFxuICAgIGNvbnRyb2xsZXI6IE5nTW9kZWxDb250cm9sbGVyLFxuICAgIC8vIFByZWxpbmsgbmVlZHMgdG8gcnVuIGJlZm9yZSBhbnkgaW5wdXQgZGlyZWN0aXZlXG4gICAgLy8gc28gdGhhdCB3ZSBjYW4gc2V0IHRoZSBOZ01vZGVsT3B0aW9ucyBpbiBOZ01vZGVsQ29udHJvbGxlclxuICAgIC8vIGJlZm9yZSBhbnlvbmUgZWxzZSB1c2VzIGl0LlxuICAgIHByaW9yaXR5OiAxLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nTW9kZWxDb21waWxlKGVsZW1lbnQpIHtcbiAgICAgIC8vIFNldHVwIGluaXRpYWwgc3RhdGUgb2YgdGhlIGNvbnRyb2xcbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoUFJJU1RJTkVfQ0xBU1MpLmFkZENsYXNzKFVOVE9VQ0hFRF9DTEFTUykuYWRkQ2xhc3MoVkFMSURfQ0xBU1MpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmU6IGZ1bmN0aW9uIG5nTW9kZWxQcmVMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICAgIHZhciBtb2RlbEN0cmwgPSBjdHJsc1swXSxcbiAgICAgICAgICAgICAgZm9ybUN0cmwgPSBjdHJsc1sxXSB8fCBudWxsRm9ybUN0cmw7XG5cbiAgICAgICAgICBtb2RlbEN0cmwuJCRzZXRPcHRpb25zKGN0cmxzWzJdICYmIGN0cmxzWzJdLiRvcHRpb25zKTtcblxuICAgICAgICAgIC8vIG5vdGlmeSBvdGhlcnMsIGVzcGVjaWFsbHkgcGFyZW50IGZvcm1zXG4gICAgICAgICAgZm9ybUN0cmwuJGFkZENvbnRyb2wobW9kZWxDdHJsKTtcblxuICAgICAgICAgIGF0dHIuJG9ic2VydmUoJ25hbWUnLCBmdW5jdGlvbihuZXdWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKG1vZGVsQ3RybC4kbmFtZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgZm9ybUN0cmwuJCRyZW5hbWVDb250cm9sKG1vZGVsQ3RybCwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZm9ybUN0cmwuJHJlbW92ZUNvbnRyb2wobW9kZWxDdHJsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdDogZnVuY3Rpb24gbmdNb2RlbFBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICAgIHZhciBtb2RlbEN0cmwgPSBjdHJsc1swXTtcbiAgICAgICAgICBpZiAobW9kZWxDdHJsLiRvcHRpb25zICYmIG1vZGVsQ3RybC4kb3B0aW9ucy51cGRhdGVPbikge1xuICAgICAgICAgICAgZWxlbWVudC5vbihtb2RlbEN0cmwuJG9wdGlvbnMudXBkYXRlT24sIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICAgIG1vZGVsQ3RybC4kJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0KGV2ICYmIGV2LnR5cGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZWxlbWVudC5vbignYmx1cicsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICBpZiAobW9kZWxDdHJsLiR0b3VjaGVkKSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmICgkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgICAgICAgc2NvcGUuJGV2YWxBc3luYyhtb2RlbEN0cmwuJHNldFRvdWNoZWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KG1vZGVsQ3RybC4kc2V0VG91Y2hlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cbnZhciBERUZBVUxUX1JFR0VYUCA9IC8oXFxzK3xeKWRlZmF1bHQoXFxzK3wkKS87XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb2RlbE9wdGlvbnNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFsbG93cyB0dW5pbmcgaG93IG1vZGVsIHVwZGF0ZXMgYXJlIGRvbmUuIFVzaW5nIGBuZ01vZGVsT3B0aW9uc2AgeW91IGNhbiBzcGVjaWZ5IGEgY3VzdG9tIGxpc3Qgb2ZcbiAqIGV2ZW50cyB0aGF0IHdpbGwgdHJpZ2dlciBhIG1vZGVsIHVwZGF0ZSBhbmQvb3IgYSBkZWJvdW5jaW5nIGRlbGF5IHNvIHRoYXQgdGhlIGFjdHVhbCB1cGRhdGUgb25seVxuICogdGFrZXMgcGxhY2Ugd2hlbiBhIHRpbWVyIGV4cGlyZXM7IHRoaXMgdGltZXIgd2lsbCBiZSByZXNldCBhZnRlciBhbm90aGVyIGNoYW5nZSB0YWtlcyBwbGFjZS5cbiAqXG4gKiBHaXZlbiB0aGUgbmF0dXJlIG9mIGBuZ01vZGVsT3B0aW9uc2AsIHRoZSB2YWx1ZSBkaXNwbGF5ZWQgaW5zaWRlIGlucHV0IGZpZWxkcyBpbiB0aGUgdmlldyBtaWdodFxuICogYmUgZGlmZmVyZW50IGZyb20gdGhlIHZhbHVlIGluIHRoZSBhY3R1YWwgbW9kZWwuIFRoaXMgbWVhbnMgdGhhdCBpZiB5b3UgdXBkYXRlIHRoZSBtb2RlbCB5b3VcbiAqIHNob3VsZCBhbHNvIGludm9rZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciBgJHJvbGxiYWNrVmlld1ZhbHVlYH0gb24gdGhlIHJlbGV2YW50IGlucHV0IGZpZWxkIGluXG4gKiBvcmRlciB0byBtYWtlIHN1cmUgaXQgaXMgc3luY2hyb25pemVkIHdpdGggdGhlIG1vZGVsIGFuZCB0aGF0IGFueSBkZWJvdW5jZWQgYWN0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIFRoZSBlYXNpZXN0IHdheSB0byByZWZlcmVuY2UgdGhlIGNvbnRyb2wncyB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciBgJHJvbGxiYWNrVmlld1ZhbHVlYH1cbiAqIG1ldGhvZCBpcyBieSBtYWtpbmcgc3VyZSB0aGUgaW5wdXQgaXMgcGxhY2VkIGluc2lkZSBhIGZvcm0gdGhhdCBoYXMgYSBgbmFtZWAgYXR0cmlidXRlLiBUaGlzIGlzXG4gKiBpbXBvcnRhbnQgYmVjYXVzZSBgZm9ybWAgY29udHJvbGxlcnMgYXJlIHB1Ymxpc2hlZCB0byB0aGUgcmVsYXRlZCBzY29wZSB1bmRlciB0aGUgbmFtZSBpbiB0aGVpclxuICogYG5hbWVgIGF0dHJpYnV0ZS5cbiAqXG4gKiBBbnkgcGVuZGluZyBjaGFuZ2VzIHdpbGwgdGFrZSBwbGFjZSBpbW1lZGlhdGVseSB3aGVuIGFuIGVuY2xvc2luZyBmb3JtIGlzIHN1Ym1pdHRlZCB2aWEgdGhlXG4gKiBgc3VibWl0YCBldmVudC4gTm90ZSB0aGF0IGBuZ0NsaWNrYCBldmVudHMgd2lsbCBvY2N1ciBiZWZvcmUgdGhlIG1vZGVsIGlzIHVwZGF0ZWQuIFVzZSBgbmdTdWJtaXRgXG4gKiB0byBoYXZlIGFjY2VzcyB0byB0aGUgdXBkYXRlZCBtb2RlbC5cbiAqXG4gKiBgbmdNb2RlbE9wdGlvbnNgIGhhcyBhbiBlZmZlY3Qgb24gdGhlIGVsZW1lbnQgaXQncyBkZWNsYXJlZCBvbiBhbmQgaXRzIGRlc2NlbmRhbnRzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBuZ01vZGVsT3B0aW9ucyBvcHRpb25zIHRvIGFwcGx5IHRvIHRoZSBjdXJyZW50IG1vZGVsLiBWYWxpZCBrZXlzIGFyZTpcbiAqICAgLSBgdXBkYXRlT25gOiBzdHJpbmcgc3BlY2lmeWluZyB3aGljaCBldmVudCBzaG91bGQgdGhlIGlucHV0IGJlIGJvdW5kIHRvLiBZb3UgY2FuIHNldCBzZXZlcmFsXG4gKiAgICAgZXZlbnRzIHVzaW5nIGFuIHNwYWNlIGRlbGltaXRlZCBsaXN0LiBUaGVyZSBpcyBhIHNwZWNpYWwgZXZlbnQgY2FsbGVkIGBkZWZhdWx0YCB0aGF0XG4gKiAgICAgbWF0Y2hlcyB0aGUgZGVmYXVsdCBldmVudHMgYmVsb25naW5nIG9mIHRoZSBjb250cm9sLlxuICogICAtIGBkZWJvdW5jZWA6IGludGVnZXIgdmFsdWUgd2hpY2ggY29udGFpbnMgdGhlIGRlYm91bmNlIG1vZGVsIHVwZGF0ZSB2YWx1ZSBpbiBtaWxsaXNlY29uZHMuIEFcbiAqICAgICB2YWx1ZSBvZiAwIHRyaWdnZXJzIGFuIGltbWVkaWF0ZSB1cGRhdGUuIElmIGFuIG9iamVjdCBpcyBzdXBwbGllZCBpbnN0ZWFkLCB5b3UgY2FuIHNwZWNpZnkgYVxuICogICAgIGN1c3RvbSB2YWx1ZSBmb3IgZWFjaCBldmVudC4gRm9yIGV4YW1wbGU6XG4gKiAgICAgYG5nLW1vZGVsLW9wdGlvbnM9XCJ7IHVwZGF0ZU9uOiAnZGVmYXVsdCBibHVyJywgZGVib3VuY2U6IHsgJ2RlZmF1bHQnOiA1MDAsICdibHVyJzogMCB9IH1cImBcbiAqICAgLSBgYWxsb3dJbnZhbGlkYDogYm9vbGVhbiB2YWx1ZSB3aGljaCBpbmRpY2F0ZXMgdGhhdCB0aGUgbW9kZWwgY2FuIGJlIHNldCB3aXRoIHZhbHVlcyB0aGF0IGRpZFxuICogICAgIG5vdCB2YWxpZGF0ZSBjb3JyZWN0bHkgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiBzZXR0aW5nIHRoZSBtb2RlbCB0byB1bmRlZmluZWQuXG4gKiAgIC0gYGdldHRlclNldHRlcmA6IGJvb2xlYW4gdmFsdWUgd2hpY2ggZGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byB0cmVhdCBmdW5jdGlvbnMgYm91bmQgdG9cbiAgICAgICBgbmdNb2RlbGAgYXMgZ2V0dGVycy9zZXR0ZXJzLlxuICogICAtIGB0aW1lem9uZWA6IERlZmluZXMgdGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBmb3JcbiAqICAgICBgPGlucHV0IHR5cGU9XCJkYXRlXCI+YCwgYDxpbnB1dCB0eXBlPVwidGltZVwiPmAsIC4uLiAuIEl0IHVuZGVyc3RhbmRzIFVUQy9HTVQgYW5kIHRoZVxuICogICAgIGNvbnRpbmVudGFsIFVTIHRpbWUgem9uZSBhYmJyZXZpYXRpb25zLCBidXQgZm9yIGdlbmVyYWwgdXNlLCB1c2UgYSB0aW1lIHpvbmUgb2Zmc2V0LCBmb3JcbiAqICAgICBleGFtcGxlLCBgJyswNDMwJ2AgKDQgaG91cnMsIDMwIG1pbnV0ZXMgZWFzdCBvZiB0aGUgR3JlZW53aWNoIG1lcmlkaWFuKVxuICogICAgIElmIG5vdCBzcGVjaWZpZWQsIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3NlciB3aWxsIGJlIHVzZWQuXG4gKlxuICogQGV4YW1wbGVcblxuICBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIG92ZXJyaWRlIGltbWVkaWF0ZSB1cGRhdGVzLiBDaGFuZ2VzIG9uIHRoZSBpbnB1dHMgd2l0aGluIHRoZVxuICBmb3JtIHdpbGwgdXBkYXRlIHRoZSBtb2RlbCBvbmx5IHdoZW4gdGhlIGNvbnRyb2wgbG9zZXMgZm9jdXMgKGJsdXIgZXZlbnQpLiBJZiBgZXNjYXBlYCBrZXkgaXNcbiAgcHJlc3NlZCB3aGlsZSB0aGUgaW5wdXQgZmllbGQgaXMgZm9jdXNlZCwgdGhlIHZhbHVlIGlzIHJlc2V0IHRvIHRoZSB2YWx1ZSBpbiB0aGUgY3VycmVudCBtb2RlbC5cblxuICA8ZXhhbXBsZSBuYW1lPVwibmdNb2RlbE9wdGlvbnMtZGlyZWN0aXZlLWJsdXJcIiBtb2R1bGU9XCJvcHRpb25zRXhhbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8Zm9ybSBuYW1lPVwidXNlckZvcm1cIj5cbiAgICAgICAgICA8bGFiZWw+TmFtZTpcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiXG4gICAgICAgICAgICAgICAgICAgbmctbW9kZWw9XCJ1c2VyLm5hbWVcIlxuICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IHVwZGF0ZU9uOiAnYmx1cicgfVwiXG4gICAgICAgICAgICAgICAgICAgbmcta2V5dXA9XCJjYW5jZWwoJGV2ZW50KVwiIC8+XG4gICAgICAgICAgPC9sYWJlbD48YnIgLz5cbiAgICAgICAgICA8bGFiZWw+T3RoZXIgZGF0YTpcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXNlci5kYXRhXCIgLz5cbiAgICAgICAgICA8L2xhYmVsPjxiciAvPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDxwcmU+dXNlci5uYW1lID0gPHNwYW4gbmctYmluZD1cInVzZXIubmFtZVwiPjwvc3Bhbj48L3ByZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnb3B0aW9uc0V4YW1wbGUnLCBbXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUudXNlciA9IHsgbmFtZTogJ3NheScsIGRhdGE6ICcnIH07XG5cbiAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PSAyNykge1xuICAgICAgICAgICAgICAkc2NvcGUudXNlckZvcm0udXNlck5hbWUuJHJvbGxiYWNrVmlld1ZhbHVlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgbW9kZWwgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3VzZXIubmFtZScpKTtcbiAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIubmFtZScpKTtcbiAgICAgIHZhciBvdGhlciA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIuZGF0YScpKTtcblxuICAgICAgaXQoJ3Nob3VsZCBhbGxvdyBjdXN0b20gZXZlbnRzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlucHV0LnNlbmRLZXlzKCcgaGVsbG8nKTtcbiAgICAgICAgaW5wdXQuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9FcXVhbCgnc2F5Jyk7XG4gICAgICAgIG90aGVyLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3NheSBoZWxsbycpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgJHJvbGxiYWNrVmlld1ZhbHVlIHdoZW4gbW9kZWwgY2hhbmdlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpbnB1dC5zZW5kS2V5cygnIGhlbGxvJyk7XG4gICAgICAgIGV4cGVjdChpbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJ3NheSBoZWxsbycpO1xuICAgICAgICBpbnB1dC5zZW5kS2V5cyhwcm90cmFjdG9yLktleS5FU0NBUEUpO1xuICAgICAgICBleHBlY3QoaW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCdzYXknKTtcbiAgICAgICAgb3RoZXIuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9FcXVhbCgnc2F5Jyk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cblxuICBUaGlzIG9uZSBzaG93cyBob3cgdG8gZGVib3VuY2UgbW9kZWwgY2hhbmdlcy4gTW9kZWwgd2lsbCBiZSB1cGRhdGVkIG9ubHkgMSBzZWMgYWZ0ZXIgbGFzdCBjaGFuZ2UuXG4gIElmIHRoZSBgQ2xlYXJgIGJ1dHRvbiBpcyBwcmVzc2VkLCBhbnkgZGVib3VuY2VkIGFjdGlvbiBpcyBjYW5jZWxlZCBhbmQgdGhlIHZhbHVlIGJlY29tZXMgZW1wdHkuXG5cbiAgPGV4YW1wbGUgbmFtZT1cIm5nTW9kZWxPcHRpb25zLWRpcmVjdGl2ZS1kZWJvdW5jZVwiIG1vZHVsZT1cIm9wdGlvbnNFeGFtcGxlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIDxmb3JtIG5hbWU9XCJ1c2VyRm9ybVwiPlxuICAgICAgICAgIDxsYWJlbD5OYW1lOlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJOYW1lXCJcbiAgICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cInVzZXIubmFtZVwiXG4gICAgICAgICAgICAgICAgICAgbmctbW9kZWwtb3B0aW9ucz1cInsgZGVib3VuY2U6IDEwMDAgfVwiIC8+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwidXNlckZvcm0udXNlck5hbWUuJHJvbGxiYWNrVmlld1ZhbHVlKCk7IHVzZXIubmFtZT0nJ1wiPkNsZWFyPC9idXR0b24+XG4gICAgICAgICAgPGJyIC8+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgICAgPHByZT51c2VyLm5hbWUgPSA8c3BhbiBuZy1iaW5kPVwidXNlci5uYW1lXCI+PC9zcGFuPjwvcHJlPlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcHRpb25zRXhhbXBsZScsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS51c2VyID0geyBuYW1lOiAnc2F5JyB9O1xuICAgICAgICB9XSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG5cbiAgVGhpcyBvbmUgc2hvd3MgaG93IHRvIGJpbmQgdG8gZ2V0dGVyL3NldHRlcnM6XG5cbiAgPGV4YW1wbGUgbmFtZT1cIm5nTW9kZWxPcHRpb25zLWRpcmVjdGl2ZS1nZXR0ZXItc2V0dGVyXCIgbW9kdWxlPVwiZ2V0dGVyU2V0dGVyRXhhbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8Zm9ybSBuYW1lPVwidXNlckZvcm1cIj5cbiAgICAgICAgICA8bGFiZWw+TmFtZTpcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiXG4gICAgICAgICAgICAgICAgICAgbmctbW9kZWw9XCJ1c2VyLm5hbWVcIlxuICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGdldHRlclNldHRlcjogdHJ1ZSB9XCIgLz5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDxwcmU+dXNlci5uYW1lID0gPHNwYW4gbmctYmluZD1cInVzZXIubmFtZSgpXCI+PC9zcGFuPjwvcHJlPlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdnZXR0ZXJTZXR0ZXJFeGFtcGxlJywgW10pXG4gICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgdmFyIF9uYW1lID0gJ0JyaWFuJztcbiAgICAgICAgICAkc2NvcGUudXNlciA9IHtcbiAgICAgICAgICAgIG5hbWU6IGZ1bmN0aW9uKG5ld05hbWUpIHtcbiAgICAgICAgICAgICAgLy8gTm90ZSB0aGF0IG5ld05hbWUgY2FuIGJlIHVuZGVmaW5lZCBmb3IgdHdvIHJlYXNvbnM6XG4gICAgICAgICAgICAgIC8vIDEuIEJlY2F1c2UgaXQgaXMgY2FsbGVkIGFzIGEgZ2V0dGVyIGFuZCB0aHVzIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50c1xuICAgICAgICAgICAgICAvLyAyLiBCZWNhdXNlIHRoZSBwcm9wZXJ0eSBzaG91bGQgYWN0dWFsbHkgYmUgc2V0IHRvIHVuZGVmaW5lZC4gVGhpcyBoYXBwZW5zIGUuZy4gaWYgdGhlXG4gICAgICAgICAgICAgIC8vICAgIGlucHV0IGlzIGludmFsaWRcbiAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoX25hbWUgPSBuZXdOYW1lKSA6IF9uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nTW9kZWxPcHRpb25zRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckYXR0cnMnLCBmdW5jdGlvbigkc2NvcGUsICRhdHRycykge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdGhpcy4kb3B0aW9ucyA9IGNvcHkoJHNjb3BlLiRldmFsKCRhdHRycy5uZ01vZGVsT3B0aW9ucykpO1xuICAgICAgLy8gQWxsb3cgYWRkaW5nL292ZXJyaWRpbmcgYm91bmQgZXZlbnRzXG4gICAgICBpZiAodGhpcy4kb3B0aW9ucy51cGRhdGVPbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuJG9wdGlvbnMudXBkYXRlT25EZWZhdWx0ID0gZmFsc2U7XG4gICAgICAgIC8vIGV4dHJhY3QgXCJkZWZhdWx0XCIgcHNldWRvLWV2ZW50IGZyb20gbGlzdCBvZiBldmVudHMgdGhhdCBjYW4gdHJpZ2dlciBhIG1vZGVsIHVwZGF0ZVxuICAgICAgICB0aGlzLiRvcHRpb25zLnVwZGF0ZU9uID0gdHJpbSh0aGlzLiRvcHRpb25zLnVwZGF0ZU9uLnJlcGxhY2UoREVGQVVMVF9SRUdFWFAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRoYXQuJG9wdGlvbnMudXBkYXRlT25EZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gJyAnO1xuICAgICAgICB9KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdCA9IHRydWU7XG4gICAgICB9XG4gICAgfV1cbiAgfTtcbn07XG5cblxuXG4vLyBoZWxwZXIgbWV0aG9kc1xuZnVuY3Rpb24gYWRkU2V0VmFsaWRpdHlNZXRob2QoY29udGV4dCkge1xuICB2YXIgY3RybCA9IGNvbnRleHQuY3RybCxcbiAgICAgICRlbGVtZW50ID0gY29udGV4dC4kZWxlbWVudCxcbiAgICAgIGNsYXNzQ2FjaGUgPSB7fSxcbiAgICAgIHNldCA9IGNvbnRleHQuc2V0LFxuICAgICAgdW5zZXQgPSBjb250ZXh0LnVuc2V0LFxuICAgICAgcGFyZW50Rm9ybSA9IGNvbnRleHQucGFyZW50Rm9ybSxcbiAgICAgICRhbmltYXRlID0gY29udGV4dC4kYW5pbWF0ZTtcblxuICBjbGFzc0NhY2hlW0lOVkFMSURfQ0xBU1NdID0gIShjbGFzc0NhY2hlW1ZBTElEX0NMQVNTXSA9ICRlbGVtZW50Lmhhc0NsYXNzKFZBTElEX0NMQVNTKSk7XG5cbiAgY3RybC4kc2V0VmFsaWRpdHkgPSBzZXRWYWxpZGl0eTtcblxuICBmdW5jdGlvbiBzZXRWYWxpZGl0eSh2YWxpZGF0aW9uRXJyb3JLZXksIHN0YXRlLCBjb250cm9sbGVyKSB7XG4gICAgaWYgKHN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNyZWF0ZUFuZFNldCgnJHBlbmRpbmcnLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1bnNldEFuZENsZWFudXAoJyRwZW5kaW5nJywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICB9XG4gICAgaWYgKCFpc0Jvb2xlYW4oc3RhdGUpKSB7XG4gICAgICB1bnNldChjdHJsLiRlcnJvciwgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgIHVuc2V0KGN0cmwuJCRzdWNjZXNzLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgdW5zZXQoY3RybC4kZXJyb3IsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgICAgIHNldChjdHJsLiQkc3VjY2VzcywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldChjdHJsLiRlcnJvciwgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgICAgdW5zZXQoY3RybC4kJHN1Y2Nlc3MsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjdHJsLiRwZW5kaW5nKSB7XG4gICAgICBjYWNoZWRUb2dnbGVDbGFzcyhQRU5ESU5HX0NMQVNTLCB0cnVlKTtcbiAgICAgIGN0cmwuJHZhbGlkID0gY3RybC4kaW52YWxpZCA9IHVuZGVmaW5lZDtcbiAgICAgIHRvZ2dsZVZhbGlkYXRpb25Dc3MoJycsIG51bGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWNoZWRUb2dnbGVDbGFzcyhQRU5ESU5HX0NMQVNTLCBmYWxzZSk7XG4gICAgICBjdHJsLiR2YWxpZCA9IGlzT2JqZWN0RW1wdHkoY3RybC4kZXJyb3IpO1xuICAgICAgY3RybC4kaW52YWxpZCA9ICFjdHJsLiR2YWxpZDtcbiAgICAgIHRvZ2dsZVZhbGlkYXRpb25Dc3MoJycsIGN0cmwuJHZhbGlkKTtcbiAgICB9XG5cbiAgICAvLyByZS1yZWFkIHRoZSBzdGF0ZSBhcyB0aGUgc2V0L3Vuc2V0IG1ldGhvZHMgY291bGQgaGF2ZVxuICAgIC8vIGNvbWJpbmVkIHN0YXRlIGluIGN0cmwuJGVycm9yW3ZhbGlkYXRpb25FcnJvcl0gKHVzZWQgZm9yIGZvcm1zKSxcbiAgICAvLyB3aGVyZSBzZXR0aW5nL3Vuc2V0dGluZyBvbmx5IGluY3JlbWVudHMvZGVjcmVtZW50cyB0aGUgdmFsdWUsXG4gICAgLy8gYW5kIGRvZXMgbm90IHJlcGxhY2UgaXQuXG4gICAgdmFyIGNvbWJpbmVkU3RhdGU7XG4gICAgaWYgKGN0cmwuJHBlbmRpbmcgJiYgY3RybC4kcGVuZGluZ1t2YWxpZGF0aW9uRXJyb3JLZXldKSB7XG4gICAgICBjb21iaW5lZFN0YXRlID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSBpZiAoY3RybC4kZXJyb3JbdmFsaWRhdGlvbkVycm9yS2V5XSkge1xuICAgICAgY29tYmluZWRTdGF0ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoY3RybC4kJHN1Y2Nlc3NbdmFsaWRhdGlvbkVycm9yS2V5XSkge1xuICAgICAgY29tYmluZWRTdGF0ZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbWJpbmVkU3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIHRvZ2dsZVZhbGlkYXRpb25Dc3ModmFsaWRhdGlvbkVycm9yS2V5LCBjb21iaW5lZFN0YXRlKTtcbiAgICBwYXJlbnRGb3JtLiRzZXRWYWxpZGl0eSh2YWxpZGF0aW9uRXJyb3JLZXksIGNvbWJpbmVkU3RhdGUsIGN0cmwpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQW5kU2V0KG5hbWUsIHZhbHVlLCBjb250cm9sbGVyKSB7XG4gICAgaWYgKCFjdHJsW25hbWVdKSB7XG4gICAgICBjdHJsW25hbWVdID0ge307XG4gICAgfVxuICAgIHNldChjdHJsW25hbWVdLCB2YWx1ZSwgY29udHJvbGxlcik7XG4gIH1cblxuICBmdW5jdGlvbiB1bnNldEFuZENsZWFudXAobmFtZSwgdmFsdWUsIGNvbnRyb2xsZXIpIHtcbiAgICBpZiAoY3RybFtuYW1lXSkge1xuICAgICAgdW5zZXQoY3RybFtuYW1lXSwgdmFsdWUsIGNvbnRyb2xsZXIpO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3RFbXB0eShjdHJsW25hbWVdKSkge1xuICAgICAgY3RybFtuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjYWNoZWRUb2dnbGVDbGFzcyhjbGFzc05hbWUsIHN3aXRjaFZhbHVlKSB7XG4gICAgaWYgKHN3aXRjaFZhbHVlICYmICFjbGFzc0NhY2hlW2NsYXNzTmFtZV0pIHtcbiAgICAgICRhbmltYXRlLmFkZENsYXNzKCRlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgY2xhc3NDYWNoZVtjbGFzc05hbWVdID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKCFzd2l0Y2hWYWx1ZSAmJiBjbGFzc0NhY2hlW2NsYXNzTmFtZV0pIHtcbiAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKCRlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgY2xhc3NDYWNoZVtjbGFzc05hbWVdID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG9nZ2xlVmFsaWRhdGlvbkNzcyh2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQpIHtcbiAgICB2YWxpZGF0aW9uRXJyb3JLZXkgPSB2YWxpZGF0aW9uRXJyb3JLZXkgPyAnLScgKyBzbmFrZV9jYXNlKHZhbGlkYXRpb25FcnJvcktleSwgJy0nKSA6ICcnO1xuXG4gICAgY2FjaGVkVG9nZ2xlQ2xhc3MoVkFMSURfQ0xBU1MgKyB2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQgPT09IHRydWUpO1xuICAgIGNhY2hlZFRvZ2dsZUNsYXNzKElOVkFMSURfQ0xBU1MgKyB2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQgPT09IGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICBpZiAob2JqKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ05vbkJpbmRhYmxlXG4gKiBAcmVzdHJpY3QgQUNcbiAqIEBwcmlvcml0eSAxMDAwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nTm9uQmluZGFibGVgIGRpcmVjdGl2ZSB0ZWxscyBBbmd1bGFyIG5vdCB0byBjb21waWxlIG9yIGJpbmQgdGhlIGNvbnRlbnRzIG9mIHRoZSBjdXJyZW50XG4gKiBET00gZWxlbWVudC4gVGhpcyBpcyB1c2VmdWwgaWYgdGhlIGVsZW1lbnQgY29udGFpbnMgd2hhdCBhcHBlYXJzIHRvIGJlIEFuZ3VsYXIgZGlyZWN0aXZlcyBhbmRcbiAqIGJpbmRpbmdzIGJ1dCB3aGljaCBzaG91bGQgYmUgaWdub3JlZCBieSBBbmd1bGFyLiBUaGlzIGNvdWxkIGJlIHRoZSBjYXNlIGlmIHlvdSBoYXZlIGEgc2l0ZSB0aGF0XG4gKiBkaXNwbGF5cyBzbmlwcGV0cyBvZiBjb2RlLCBmb3IgaW5zdGFuY2UuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKlxuICogQGV4YW1wbGVcbiAqIEluIHRoaXMgZXhhbXBsZSB0aGVyZSBhcmUgdHdvIGxvY2F0aW9ucyB3aGVyZSBhIHNpbXBsZSBpbnRlcnBvbGF0aW9uIGJpbmRpbmcgKGB7e319YCkgaXMgcHJlc2VudCxcbiAqIGJ1dCB0aGUgb25lIHdyYXBwZWQgaW4gYG5nTm9uQmluZGFibGVgIGlzIGxlZnQgYWxvbmUuXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxkaXY+Tm9ybWFsOiB7ezEgKyAyfX08L2Rpdj5cbiAgICAgICAgPGRpdiBuZy1ub24tYmluZGFibGU+SWdub3JlZDoge3sxICsgMn19PC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1ub24tYmluZGFibGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJzEgKyAyJykpLmdldFRleHQoKSkudG9Db250YWluKCczJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudC5hbGwoYnkuY3NzKCdkaXYnKSkubGFzdCgpLmdldFRleHQoKSkudG9NYXRjaCgvMSBcXCsgMi8pO1xuICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nTm9uQmluZGFibGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7IHRlcm1pbmFsOiB0cnVlLCBwcmlvcml0eTogMTAwMCB9KTtcblxuLyogZ2xvYmFsIGpxTGl0ZVJlbW92ZSAqL1xuXG52YXIgbmdPcHRpb25zTWluRXJyID0gbWluRXJyKCduZ09wdGlvbnMnKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ09wdGlvbnNcbiAqIEByZXN0cmljdCBBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhlIGBuZ09wdGlvbnNgIGF0dHJpYnV0ZSBjYW4gYmUgdXNlZCB0byBkeW5hbWljYWxseSBnZW5lcmF0ZSBhIGxpc3Qgb2YgYDxvcHRpb24+YFxuICogZWxlbWVudHMgZm9yIHRoZSBgPHNlbGVjdD5gIGVsZW1lbnQgdXNpbmcgdGhlIGFycmF5IG9yIG9iamVjdCBvYnRhaW5lZCBieSBldmFsdWF0aW5nIHRoZVxuICogYG5nT3B0aW9uc2AgY29tcHJlaGVuc2lvbiBleHByZXNzaW9uLlxuICpcbiAqIEluIG1hbnkgY2FzZXMsIGBuZ1JlcGVhdGAgY2FuIGJlIHVzZWQgb24gYDxvcHRpb24+YCBlbGVtZW50cyBpbnN0ZWFkIG9mIGBuZ09wdGlvbnNgIHRvIGFjaGlldmUgYVxuICogc2ltaWxhciByZXN1bHQuIEhvd2V2ZXIsIGBuZ09wdGlvbnNgIHByb3ZpZGVzIHNvbWUgYmVuZWZpdHMgc3VjaCBhcyByZWR1Y2luZyBtZW1vcnkgYW5kXG4gKiBpbmNyZWFzaW5nIHNwZWVkIGJ5IG5vdCBjcmVhdGluZyBhIG5ldyBzY29wZSBmb3IgZWFjaCByZXBlYXRlZCBpbnN0YW5jZSwgYXMgd2VsbCBhcyBwcm92aWRpbmdcbiAqIG1vcmUgZmxleGliaWxpdHkgaW4gaG93IHRoZSBgPHNlbGVjdD5gJ3MgbW9kZWwgaXMgYXNzaWduZWQgdmlhIHRoZSBgc2VsZWN0YCAqKmBhc2AqKiBwYXJ0IG9mIHRoZVxuICogY29tcHJlaGVuc2lvbiBleHByZXNzaW9uLiBgbmdPcHRpb25zYCBzaG91bGQgYmUgdXNlZCB3aGVuIHRoZSBgPHNlbGVjdD5gIG1vZGVsIG5lZWRzIHRvIGJlIGJvdW5kXG4gKiAgdG8gYSBub24tc3RyaW5nIHZhbHVlLiBUaGlzIGlzIGJlY2F1c2UgYW4gb3B0aW9uIGVsZW1lbnQgY2FuIG9ubHkgYmUgYm91bmQgdG8gc3RyaW5nIHZhbHVlcyBhdFxuICogcHJlc2VudC5cbiAqXG4gKiBXaGVuIGFuIGl0ZW0gaW4gdGhlIGA8c2VsZWN0PmAgbWVudSBpcyBzZWxlY3RlZCwgdGhlIGFycmF5IGVsZW1lbnQgb3Igb2JqZWN0IHByb3BlcnR5XG4gKiByZXByZXNlbnRlZCBieSB0aGUgc2VsZWN0ZWQgb3B0aW9uIHdpbGwgYmUgYm91bmQgdG8gdGhlIG1vZGVsIGlkZW50aWZpZWQgYnkgdGhlIGBuZ01vZGVsYFxuICogZGlyZWN0aXZlLlxuICpcbiAqIE9wdGlvbmFsbHksIGEgc2luZ2xlIGhhcmQtY29kZWQgYDxvcHRpb24+YCBlbGVtZW50LCB3aXRoIHRoZSB2YWx1ZSBzZXQgdG8gYW4gZW1wdHkgc3RyaW5nLCBjYW5cbiAqIGJlIG5lc3RlZCBpbnRvIHRoZSBgPHNlbGVjdD5gIGVsZW1lbnQuIFRoaXMgZWxlbWVudCB3aWxsIHRoZW4gcmVwcmVzZW50IHRoZSBgbnVsbGAgb3IgXCJub3Qgc2VsZWN0ZWRcIlxuICogb3B0aW9uLiBTZWUgZXhhbXBsZSBiZWxvdyBmb3IgZGVtb25zdHJhdGlvbi5cbiAqXG4gKiAjIyBDb21wbGV4IE1vZGVscyAob2JqZWN0cyBvciBjb2xsZWN0aW9ucylcbiAqXG4gKiAqKk5vdGU6KiogQnkgZGVmYXVsdCwgYG5nTW9kZWxgIHdhdGNoZXMgdGhlIG1vZGVsIGJ5IHJlZmVyZW5jZSwgbm90IHZhbHVlLiBUaGlzIGlzIGltcG9ydGFudCB3aGVuXG4gKiBiaW5kaW5nIGFueSBpbnB1dCBkaXJlY3RpdmUgdG8gYSBtb2RlbCB0aGF0IGlzIGFuIG9iamVjdCBvciBhIGNvbGxlY3Rpb24uXG4gKlxuICogU2luY2UgdGhpcyBpcyBhIGNvbW1vbiBzaXR1YXRpb24gZm9yIGBuZ09wdGlvbnNgIHRoZSBkaXJlY3RpdmUgYWRkaXRpb25hbGx5IHdhdGNoZXMgdGhlIG1vZGVsIHVzaW5nXG4gKiBgJHdhdGNoQ29sbGVjdGlvbmAgd2hlbiB0aGUgc2VsZWN0IGhhcyB0aGUgYG11bHRpcGxlYCBhdHRyaWJ1dGUgb3Igd2hlbiB0aGVyZSBpcyBhIGB0cmFjayBieWAgY2xhdXNlIGluXG4gKiB0aGUgb3B0aW9ucyBleHByZXNzaW9uLiBUaGlzIGFsbG93cyBuZ09wdGlvbnMgdG8gdHJpZ2dlciBhIHJlLXJlbmRlcmluZyBvZiB0aGUgb3B0aW9ucyBldmVuIGlmIHRoZSBhY3R1YWxcbiAqIG9iamVjdC9jb2xsZWN0aW9uIGhhcyBub3QgY2hhbmdlZCBpZGVudGl0eSBidXQgb25seSBhIHByb3BlcnR5IG9uIHRoZSBvYmplY3Qgb3IgYW4gaXRlbSBpbiB0aGUgY29sbGVjdGlvblxuICogY2hhbmdlcy5cbiAqXG4gKiBOb3RlIHRoYXQgYCR3YXRjaENvbGxlY3Rpb25gIGRvZXMgYSBzaGFsbG93IGNvbXBhcmlzb24gb2YgdGhlIHByb3BlcnRpZXMgb2YgdGhlIG9iamVjdCAob3IgdGhlIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uXG4gKiBpZiB0aGUgbW9kZWwgaXMgYW4gYXJyYXkpLiBUaGlzIG1lYW5zIHRoYXQgY2hhbmdpbmcgYSBwcm9wZXJ0eSBkZWVwZXIgaW5zaWRlIHRoZSBvYmplY3QvY29sbGVjdGlvbiB0aGF0IHRoZVxuICogZmlyc3QgbGV2ZWwgd2lsbCBub3QgdHJpZ2dlciBhIHJlLXJlbmRlcmluZy5cbiAqXG4gKlxuICogIyMgYHNlbGVjdGAgKipgYXNgKipcbiAqXG4gKiBVc2luZyBgc2VsZWN0YCAqKmBhc2AqKiB3aWxsIGJpbmQgdGhlIHJlc3VsdCBvZiB0aGUgYHNlbGVjdGAgZXhwcmVzc2lvbiB0byB0aGUgbW9kZWwsIGJ1dFxuICogdGhlIHZhbHVlIG9mIHRoZSBgPHNlbGVjdD5gIGFuZCBgPG9wdGlvbj5gIGh0bWwgZWxlbWVudHMgd2lsbCBiZSBlaXRoZXIgdGhlIGluZGV4IChmb3IgYXJyYXkgZGF0YSBzb3VyY2VzKVxuICogb3IgcHJvcGVydHkgbmFtZSAoZm9yIG9iamVjdCBkYXRhIHNvdXJjZXMpIG9mIHRoZSB2YWx1ZSB3aXRoaW4gdGhlIGNvbGxlY3Rpb24uIElmIGEgKipgdHJhY2sgYnlgKiogZXhwcmVzc2lvblxuICogaXMgdXNlZCwgdGhlIHJlc3VsdCBvZiB0aGF0IGV4cHJlc3Npb24gd2lsbCBiZSBzZXQgYXMgdGhlIHZhbHVlIG9mIHRoZSBgb3B0aW9uYCBhbmQgYHNlbGVjdGAgZWxlbWVudHMuXG4gKlxuICpcbiAqICMjIyBgc2VsZWN0YCAqKmBhc2AqKiBhbmQgKipgdHJhY2sgYnlgKipcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogRG8gbm90IHVzZSBgc2VsZWN0YCAqKmBhc2AqKiBhbmQgKipgdHJhY2sgYnlgKiogaW4gdGhlIHNhbWUgZXhwcmVzc2lvbi4gVGhleSBhcmUgbm90IGRlc2lnbmVkIHRvIHdvcmsgdG9nZXRoZXIuXG4gKiA8L2Rpdj5cbiAqXG4gKiBDb25zaWRlciB0aGUgZm9sbG93aW5nIGV4YW1wbGU6XG4gKlxuICogYGBgaHRtbFxuICogPHNlbGVjdCBuZy1vcHRpb25zPVwiaXRlbS5zdWJJdGVtIGFzIGl0ZW0ubGFiZWwgZm9yIGl0ZW0gaW4gdmFsdWVzIHRyYWNrIGJ5IGl0ZW0uaWRcIiBuZy1tb2RlbD1cInNlbGVjdGVkXCI+XG4gKiBgYGBcbiAqXG4gKiBgYGBqc1xuICogJHNjb3BlLnZhbHVlcyA9IFt7XG4gKiAgIGlkOiAxLFxuICogICBsYWJlbDogJ2FMYWJlbCcsXG4gKiAgIHN1Ykl0ZW06IHsgbmFtZTogJ2FTdWJJdGVtJyB9XG4gKiB9LCB7XG4gKiAgIGlkOiAyLFxuICogICBsYWJlbDogJ2JMYWJlbCcsXG4gKiAgIHN1Ykl0ZW06IHsgbmFtZTogJ2JTdWJJdGVtJyB9XG4gKiB9XTtcbiAqXG4gKiAkc2NvcGUuc2VsZWN0ZWQgPSB7IG5hbWU6ICdhU3ViSXRlbScgfTtcbiAqIGBgYFxuICpcbiAqIFdpdGggdGhlIHB1cnBvc2Ugb2YgcHJlc2VydmluZyB0aGUgc2VsZWN0aW9uLCB0aGUgKipgdHJhY2sgYnlgKiogZXhwcmVzc2lvbiBpcyBhbHdheXMgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICogb2YgdGhlIGRhdGEgc291cmNlICh0byBgaXRlbWAgaW4gdGhpcyBleGFtcGxlKS4gVG8gY2FsY3VsYXRlIHdoZXRoZXIgYW4gZWxlbWVudCBpcyBzZWxlY3RlZCwgd2UgZG8gdGhlXG4gKiBmb2xsb3dpbmc6XG4gKlxuICogMS4gQXBwbHkgKipgdHJhY2sgYnlgKiogdG8gdGhlIGVsZW1lbnRzIGluIHRoZSBhcnJheS4gSW4gdGhlIGV4YW1wbGU6IGBbMSwgMl1gXG4gKiAyLiBBcHBseSAqKmB0cmFjayBieWAqKiB0byB0aGUgYWxyZWFkeSBzZWxlY3RlZCB2YWx1ZSBpbiBgbmdNb2RlbGAuXG4gKiAgICBJbiB0aGUgZXhhbXBsZTogdGhpcyBpcyBub3QgcG9zc2libGUgYXMgKipgdHJhY2sgYnlgKiogcmVmZXJzIHRvIGBpdGVtLmlkYCwgYnV0IHRoZSBzZWxlY3RlZFxuICogICAgdmFsdWUgZnJvbSBgbmdNb2RlbGAgaXMgYHtuYW1lOiAnYVN1Ykl0ZW0nfWAsIHNvIHRoZSAqKmB0cmFjayBieWAqKiBleHByZXNzaW9uIGlzIGFwcGxpZWQgdG9cbiAqICAgIGEgd3Jvbmcgb2JqZWN0LCB0aGUgc2VsZWN0ZWQgZWxlbWVudCBjYW4ndCBiZSBmb3VuZCwgYDxzZWxlY3Q+YCBpcyBhbHdheXMgcmVzZXQgdG8gdGhlIFwibm90XG4gKiAgICBzZWxlY3RlZFwiIG9wdGlvbi5cbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBUaGUgY29udHJvbCBpcyBjb25zaWRlcmVkIHZhbGlkIG9ubHkgaWYgdmFsdWUgaXMgZW50ZXJlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICogQHBhcmFtIHtjb21wcmVoZW5zaW9uX2V4cHJlc3Npb249fSBuZ09wdGlvbnMgaW4gb25lIG9mIHRoZSBmb2xsb3dpbmcgZm9ybXM6XG4gKlxuICogICAqIGZvciBhcnJheSBkYXRhIHNvdXJjZXM6XG4gKiAgICAgKiBgbGFiZWxgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWBcbiAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YFxuICogICAgICogYGxhYmVsYCAqKmBncm91cCBieWAqKiBgZ3JvdXBgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWBcbiAqICAgICAqIGBsYWJlbGAgKipgZGlzYWJsZSB3aGVuYCoqIGBkaXNhYmxlYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgXG4gKiAgICAgKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YCAqKmB0cmFjayBieWAqKiBgdHJhY2tleHByYFxuICogICAgICogYGxhYmVsYCAqKmBkaXNhYmxlIHdoZW5gKiogYGRpc2FibGVgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWAgKipgdHJhY2sgYnlgKiogYHRyYWNrZXhwcmBcbiAqICAgICAqIGBsYWJlbGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YCB8IG9yZGVyQnk6YG9yZGVyZXhwcmAgKipgdHJhY2sgYnlgKiogYHRyYWNrZXhwcmBcbiAqICAgICAgICAoZm9yIGluY2x1ZGluZyBhIGZpbHRlciB3aXRoIGB0cmFjayBieWApXG4gKiAgICogZm9yIG9iamVjdCBkYXRhIHNvdXJjZXM6XG4gKiAgICAgKiBgbGFiZWxgICoqYGZvciAoYCoqYGtleWAgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBmb3IgKGAqKmBrZXlgICoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAqICAgICAqIGBsYWJlbGAgKipgZ3JvdXAgYnlgKiogYGdyb3VwYCAqKmBmb3IgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYGxhYmVsYCAqKmBkaXNhYmxlIHdoZW5gKiogYGRpc2FibGVgICoqYGZvciAoYCoqYGtleWAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgXG4gKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGBcbiAqICAgICAgICAgKipgZm9yYCBgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBkaXNhYmxlIHdoZW5gKiogYGRpc2FibGVgXG4gKiAgICAgICAgICoqYGZvcmAgYChgKipga2V5YCoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAqXG4gKiBXaGVyZTpcbiAqXG4gKiAgICogYGFycmF5YCAvIGBvYmplY3RgOiBhbiBleHByZXNzaW9uIHdoaWNoIGV2YWx1YXRlcyB0byBhbiBhcnJheSAvIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiAgICogYHZhbHVlYDogbG9jYWwgdmFyaWFibGUgd2hpY2ggd2lsbCByZWZlciB0byBlYWNoIGl0ZW0gaW4gdGhlIGBhcnJheWAgb3IgZWFjaCBwcm9wZXJ0eSB2YWx1ZVxuICogICAgICBvZiBgb2JqZWN0YCBkdXJpbmcgaXRlcmF0aW9uLlxuICogICAqIGBrZXlgOiBsb2NhbCB2YXJpYWJsZSB3aGljaCB3aWxsIHJlZmVyIHRvIGEgcHJvcGVydHkgbmFtZSBpbiBgb2JqZWN0YCBkdXJpbmcgaXRlcmF0aW9uLlxuICogICAqIGBsYWJlbGA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgdGhlIGxhYmVsIGZvciBgPG9wdGlvbj5gIGVsZW1lbnQuIFRoZVxuICogICAgIGBleHByZXNzaW9uYCB3aWxsIG1vc3QgbGlrZWx5IHJlZmVyIHRvIHRoZSBgdmFsdWVgIHZhcmlhYmxlIChlLmcuIGB2YWx1ZS5wcm9wZXJ0eU5hbWVgKS5cbiAqICAgKiBgc2VsZWN0YDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSBib3VuZCB0byB0aGUgbW9kZWwgb2YgdGhlIHBhcmVudCBgPHNlbGVjdD5gXG4gKiAgICAgIGVsZW1lbnQuIElmIG5vdCBzcGVjaWZpZWQsIGBzZWxlY3RgIGV4cHJlc3Npb24gd2lsbCBkZWZhdWx0IHRvIGB2YWx1ZWAuXG4gKiAgICogYGdyb3VwYDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSB1c2VkIHRvIGdyb3VwIG9wdGlvbnMgdXNpbmcgdGhlIGA8b3B0Z3JvdXA+YFxuICogICAgICBET00gZWxlbWVudC5cbiAqICAgKiBgZGlzYWJsZWA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgdXNlZCB0byBkaXNhYmxlIHRoZSByZW5kZXJlZCBgPG9wdGlvbj5gXG4gKiAgICAgIGVsZW1lbnQuIFJldHVybiBgdHJ1ZWAgdG8gZGlzYWJsZS5cbiAqICAgKiBgdHJhY2tleHByYDogVXNlZCB3aGVuIHdvcmtpbmcgd2l0aCBhbiBhcnJheSBvZiBvYmplY3RzLiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlXG4gKiAgICAgIHVzZWQgdG8gaWRlbnRpZnkgdGhlIG9iamVjdHMgaW4gdGhlIGFycmF5LiBUaGUgYHRyYWNrZXhwcmAgd2lsbCBtb3N0IGxpa2VseSByZWZlciB0byB0aGVcbiAqICAgICBgdmFsdWVgIHZhcmlhYmxlIChlLmcuIGB2YWx1ZS5wcm9wZXJ0eU5hbWVgKS4gV2l0aCB0aGlzIHRoZSBzZWxlY3Rpb24gaXMgcHJlc2VydmVkXG4gKiAgICAgIGV2ZW4gd2hlbiB0aGUgb3B0aW9ucyBhcmUgcmVjcmVhdGVkIChlLmcuIHJlbG9hZGVkIGZyb20gdGhlIHNlcnZlcikuXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBtb2R1bGU9XCJzZWxlY3RFeGFtcGxlXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8c2NyaXB0PlxuICAgICAgICBhbmd1bGFyLm1vZHVsZSgnc2VsZWN0RXhhbXBsZScsIFtdKVxuICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUuY29sb3JzID0gW1xuICAgICAgICAgICAgICB7bmFtZTonYmxhY2snLCBzaGFkZTonZGFyayd9LFxuICAgICAgICAgICAgICB7bmFtZTond2hpdGUnLCBzaGFkZTonbGlnaHQnLCBub3RBbk9wdGlvbjogdHJ1ZX0sXG4gICAgICAgICAgICAgIHtuYW1lOidyZWQnLCBzaGFkZTonZGFyayd9LFxuICAgICAgICAgICAgICB7bmFtZTonYmx1ZScsIHNoYWRlOidkYXJrJywgbm90QW5PcHRpb246IHRydWV9LFxuICAgICAgICAgICAgICB7bmFtZToneWVsbG93Jywgc2hhZGU6J2xpZ2h0Jywgbm90QW5PcHRpb246IGZhbHNlfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICRzY29wZS5teUNvbG9yID0gJHNjb3BlLmNvbG9yc1syXTsgLy8gcmVkXG4gICAgICAgICAgfV0pO1xuICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICA8dWw+XG4gICAgICAgICAgICA8bGkgbmctcmVwZWF0PVwiY29sb3IgaW4gY29sb3JzXCI+XG4gICAgICAgICAgICAgIDxsYWJlbD5OYW1lOiA8aW5wdXQgbmctbW9kZWw9XCJjb2xvci5uYW1lXCI+PC9sYWJlbD5cbiAgICAgICAgICAgICAgPGxhYmVsPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNvbG9yLm5vdEFuT3B0aW9uXCI+IERpc2FibGVkPzwvbGFiZWw+XG4gICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJjb2xvcnMuc3BsaWNlKCRpbmRleCwgMSlcIiBhcmlhLWxhYmVsPVwiUmVtb3ZlXCI+WDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImNvbG9ycy5wdXNoKHt9KVwiPmFkZDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDxoci8+XG4gICAgICAgICAgPGxhYmVsPkNvbG9yIChudWxsIG5vdCBhbGxvd2VkKTpcbiAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJteUNvbG9yXCIgbmctb3B0aW9ucz1cImNvbG9yLm5hbWUgZm9yIGNvbG9yIGluIGNvbG9yc1wiPjwvc2VsZWN0PlxuICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICA8bGFiZWw+Q29sb3IgKG51bGwgYWxsb3dlZCk6XG4gICAgICAgICAgPHNwYW4gIGNsYXNzPVwibnVsbGFibGVcIj5cbiAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJteUNvbG9yXCIgbmctb3B0aW9ucz1cImNvbG9yLm5hbWUgZm9yIGNvbG9yIGluIGNvbG9yc1wiPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+LS0gY2hvb3NlIGNvbG9yIC0tPC9vcHRpb24+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8L3NwYW4+PC9sYWJlbD48YnIvPlxuXG4gICAgICAgICAgPGxhYmVsPkNvbG9yIGdyb3VwZWQgYnkgc2hhZGU6XG4gICAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibXlDb2xvclwiIG5nLW9wdGlvbnM9XCJjb2xvci5uYW1lIGdyb3VwIGJ5IGNvbG9yLnNoYWRlIGZvciBjb2xvciBpbiBjb2xvcnNcIj5cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIDwvbGFiZWw+PGJyLz5cblxuICAgICAgICAgIDxsYWJlbD5Db2xvciBncm91cGVkIGJ5IHNoYWRlLCB3aXRoIHNvbWUgZGlzYWJsZWQ6XG4gICAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibXlDb2xvclwiXG4gICAgICAgICAgICAgICAgICBuZy1vcHRpb25zPVwiY29sb3IubmFtZSBncm91cCBieSBjb2xvci5zaGFkZSBkaXNhYmxlIHdoZW4gY29sb3Iubm90QW5PcHRpb24gZm9yIGNvbG9yIGluIGNvbG9yc1wiPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9sYWJlbD48YnIvPlxuXG5cblxuICAgICAgICAgIFNlbGVjdCA8YnV0dG9uIG5nLWNsaWNrPVwibXlDb2xvciA9IHsgbmFtZTonbm90IGluIGxpc3QnLCBzaGFkZTogJ290aGVyJyB9XCI+Ym9ndXM8L2J1dHRvbj4uXG4gICAgICAgICAgPGJyLz5cbiAgICAgICAgICA8aHIvPlxuICAgICAgICAgIEN1cnJlbnRseSBzZWxlY3RlZDoge3sge3NlbGVjdGVkX2NvbG9yOm15Q29sb3J9IH19XG4gICAgICAgICAgPGRpdiBzdHlsZT1cImJvcmRlcjpzb2xpZCAxcHggYmxhY2s7IGhlaWdodDoyMHB4XCJcbiAgICAgICAgICAgICAgIG5nLXN0eWxlPVwieydiYWNrZ3JvdW5kLWNvbG9yJzpteUNvbG9yLm5hbWV9XCI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1vcHRpb25zJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpteUNvbG9yfScpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJ3JlZCcpO1xuICAgICAgICAgICBlbGVtZW50LmFsbChieS5tb2RlbCgnbXlDb2xvcicpKS5maXJzdCgpLmNsaWNrKCk7XG4gICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5LmNzcygnc2VsZWN0W25nLW1vZGVsPVwibXlDb2xvclwiXSBvcHRpb24nKSkuZmlyc3QoKS5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd7c2VsZWN0ZWRfY29sb3I6bXlDb2xvcn0nKSkuZ2V0VGV4dCgpKS50b01hdGNoKCdibGFjaycpO1xuICAgICAgICAgICBlbGVtZW50KGJ5LmNzcygnLm51bGxhYmxlIHNlbGVjdFtuZy1tb2RlbD1cIm15Q29sb3JcIl0nKSkuY2xpY2soKTtcbiAgICAgICAgICAgZWxlbWVudC5hbGwoYnkuY3NzKCcubnVsbGFibGUgc2VsZWN0W25nLW1vZGVsPVwibXlDb2xvclwiXSBvcHRpb24nKSkuZmlyc3QoKS5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd7c2VsZWN0ZWRfY29sb3I6bXlDb2xvcn0nKSkuZ2V0VGV4dCgpKS50b01hdGNoKCdudWxsJyk7XG4gICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cblxuLy8ganNoaW50IG1heGxlbjogZmFsc2Vcbi8vICAgICAgICAgICAgICAgICAgICAgLy8wMDAwMTExMTExMTExMTAwMDAwMDAwMDAwMjIyMjIyMjIyMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDMzMzMzMzMzMzMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDQ0NDQ0NDQ0NDQwMDAwMDAwMDAwMDAwNTU1NTU1NTU1NTU1NTU1MDAwMDAwMDAwNjY2NjY2NjY2NjY2NjY2MDAwMDAwMDc3Nzc3Nzc3Nzc3Nzc3NzAwMDAwMDAwMDAwMDAwMDg4ODg4ODg4ODgwMDAwMDAwMDAwMDAwMDAwMDAwOTk5OTk5OTk5OVxudmFyIE5HX09QVElPTlNfUkVHRVhQID0gL15cXHMqKFtcXHNcXFNdKz8pKD86XFxzK2FzXFxzKyhbXFxzXFxTXSs/KSk/KD86XFxzK2dyb3VwXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/KD86XFxzK2Rpc2FibGVcXHMrd2hlblxccysoW1xcc1xcU10rPykpP1xccytmb3JcXHMrKD86KFtcXCRcXHddW1xcJFxcd10qKXwoPzpcXChcXHMqKFtcXCRcXHddW1xcJFxcd10qKVxccyosXFxzKihbXFwkXFx3XVtcXCRcXHddKilcXHMqXFwpKSlcXHMraW5cXHMrKFtcXHNcXFNdKz8pKD86XFxzK3RyYWNrXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/JC87XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAxOiB2YWx1ZSBleHByZXNzaW9uICh2YWx1ZUZuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMjogbGFiZWwgZXhwcmVzc2lvbiAoZGlzcGxheUZuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMzogZ3JvdXAgYnkgZXhwcmVzc2lvbiAoZ3JvdXBCeUZuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gNDogZGlzYWJsZSB3aGVuIGV4cHJlc3Npb24gKGRpc2FibGVXaGVuRm4pXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA1OiBhcnJheSBpdGVtIHZhcmlhYmxlIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDY6IG9iamVjdCBpdGVtIGtleSB2YXJpYWJsZSBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA3OiBvYmplY3QgaXRlbSB2YWx1ZSB2YXJpYWJsZSBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA4OiBjb2xsZWN0aW9uIGV4cHJlc3Npb25cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDk6IHRyYWNrIGJ5IGV4cHJlc3Npb25cbi8vIGpzaGludCBtYXhsZW46IDEwMFxuXG5cbnZhciBuZ09wdGlvbnNEaXJlY3RpdmUgPSBbJyRjb21waWxlJywgJyRwYXJzZScsIGZ1bmN0aW9uKCRjb21waWxlLCAkcGFyc2UpIHtcblxuICBmdW5jdGlvbiBwYXJzZU9wdGlvbnNFeHByZXNzaW9uKG9wdGlvbnNFeHAsIHNlbGVjdEVsZW1lbnQsIHNjb3BlKSB7XG5cbiAgICB2YXIgbWF0Y2ggPSBvcHRpb25zRXhwLm1hdGNoKE5HX09QVElPTlNfUkVHRVhQKTtcbiAgICBpZiAoIShtYXRjaCkpIHtcbiAgICAgIHRocm93IG5nT3B0aW9uc01pbkVycignaWV4cCcsXG4gICAgICAgIFwiRXhwZWN0ZWQgZXhwcmVzc2lvbiBpbiBmb3JtIG9mIFwiICtcbiAgICAgICAgXCInX3NlbGVjdF8gKGFzIF9sYWJlbF8pPyBmb3IgKF9rZXlfLCk/X3ZhbHVlXyBpbiBfY29sbGVjdGlvbl8nXCIgK1xuICAgICAgICBcIiBidXQgZ290ICd7MH0nLiBFbGVtZW50OiB7MX1cIixcbiAgICAgICAgb3B0aW9uc0V4cCwgc3RhcnRpbmdUYWcoc2VsZWN0RWxlbWVudCkpO1xuICAgIH1cblxuICAgIC8vIEV4dHJhY3QgdGhlIHBhcnRzIGZyb20gdGhlIG5nT3B0aW9ucyBleHByZXNzaW9uXG5cbiAgICAvLyBUaGUgdmFyaWFibGUgbmFtZSBmb3IgdGhlIHZhbHVlIG9mIHRoZSBpdGVtIGluIHRoZSBjb2xsZWN0aW9uXG4gICAgdmFyIHZhbHVlTmFtZSA9IG1hdGNoWzVdIHx8IG1hdGNoWzddO1xuICAgIC8vIFRoZSB2YXJpYWJsZSBuYW1lIGZvciB0aGUga2V5IG9mIHRoZSBpdGVtIGluIHRoZSBjb2xsZWN0aW9uXG4gICAgdmFyIGtleU5hbWUgPSBtYXRjaFs2XTtcblxuICAgIC8vIEFuIGV4cHJlc3Npb24gdGhhdCBnZW5lcmF0ZXMgdGhlIHZpZXdWYWx1ZSBmb3IgYW4gb3B0aW9uIGlmIHRoZXJlIGlzIGEgbGFiZWwgZXhwcmVzc2lvblxuICAgIHZhciBzZWxlY3RBcyA9IC8gYXMgLy50ZXN0KG1hdGNoWzBdKSAmJiBtYXRjaFsxXTtcbiAgICAvLyBBbiBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCB0byB0cmFjayB0aGUgaWQgb2YgZWFjaCBvYmplY3QgaW4gdGhlIG9wdGlvbnMgY29sbGVjdGlvblxuICAgIHZhciB0cmFja0J5ID0gbWF0Y2hbOV07XG4gICAgLy8gQW4gZXhwcmVzc2lvbiB0aGF0IGdlbmVyYXRlcyB0aGUgdmlld1ZhbHVlIGZvciBhbiBvcHRpb24gaWYgdGhlcmUgaXMgbm8gbGFiZWwgZXhwcmVzc2lvblxuICAgIHZhciB2YWx1ZUZuID0gJHBhcnNlKG1hdGNoWzJdID8gbWF0Y2hbMV0gOiB2YWx1ZU5hbWUpO1xuICAgIHZhciBzZWxlY3RBc0ZuID0gc2VsZWN0QXMgJiYgJHBhcnNlKHNlbGVjdEFzKTtcbiAgICB2YXIgdmlld1ZhbHVlRm4gPSBzZWxlY3RBc0ZuIHx8IHZhbHVlRm47XG4gICAgdmFyIHRyYWNrQnlGbiA9IHRyYWNrQnkgJiYgJHBhcnNlKHRyYWNrQnkpO1xuXG4gICAgLy8gR2V0IHRoZSB2YWx1ZSBieSB3aGljaCB3ZSBhcmUgZ29pbmcgdG8gdHJhY2sgdGhlIG9wdGlvblxuICAgIC8vIGlmIHdlIGhhdmUgYSB0cmFja0ZuIHRoZW4gdXNlIHRoYXQgKHBhc3Npbmcgc2NvcGUgYW5kIGxvY2FscylcbiAgICAvLyBvdGhlcndpc2UganVzdCBoYXNoIHRoZSBnaXZlbiB2aWV3VmFsdWVcbiAgICB2YXIgZ2V0VHJhY2tCeVZhbHVlRm4gPSB0cmFja0J5ID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHZhbHVlLCBsb2NhbHMpIHsgcmV0dXJuIHRyYWNrQnlGbihzY29wZSwgbG9jYWxzKTsgfSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRIYXNoT2ZWYWx1ZSh2YWx1ZSkgeyByZXR1cm4gaGFzaEtleSh2YWx1ZSk7IH07XG4gICAgdmFyIGdldFRyYWNrQnlWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIHJldHVybiBnZXRUcmFja0J5VmFsdWVGbih2YWx1ZSwgZ2V0TG9jYWxzKHZhbHVlLCBrZXkpKTtcbiAgICB9O1xuXG4gICAgdmFyIGRpc3BsYXlGbiA9ICRwYXJzZShtYXRjaFsyXSB8fCBtYXRjaFsxXSk7XG4gICAgdmFyIGdyb3VwQnlGbiA9ICRwYXJzZShtYXRjaFszXSB8fCAnJyk7XG4gICAgdmFyIGRpc2FibGVXaGVuRm4gPSAkcGFyc2UobWF0Y2hbNF0gfHwgJycpO1xuICAgIHZhciB2YWx1ZXNGbiA9ICRwYXJzZShtYXRjaFs4XSk7XG5cbiAgICB2YXIgbG9jYWxzID0ge307XG4gICAgdmFyIGdldExvY2FscyA9IGtleU5hbWUgPyBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICBsb2NhbHNba2V5TmFtZV0gPSBrZXk7XG4gICAgICBsb2NhbHNbdmFsdWVOYW1lXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIGxvY2FscztcbiAgICB9IDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gdmFsdWU7XG4gICAgICByZXR1cm4gbG9jYWxzO1xuICAgIH07XG5cblxuICAgIGZ1bmN0aW9uIE9wdGlvbihzZWxlY3RWYWx1ZSwgdmlld1ZhbHVlLCBsYWJlbCwgZ3JvdXAsIGRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNlbGVjdFZhbHVlID0gc2VsZWN0VmFsdWU7XG4gICAgICB0aGlzLnZpZXdWYWx1ZSA9IHZpZXdWYWx1ZTtcbiAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcbiAgICAgIHRoaXMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRPcHRpb25WYWx1ZXNLZXlzKG9wdGlvblZhbHVlcykge1xuICAgICAgdmFyIG9wdGlvblZhbHVlc0tleXM7XG5cbiAgICAgIGlmICgha2V5TmFtZSAmJiBpc0FycmF5TGlrZShvcHRpb25WYWx1ZXMpKSB7XG4gICAgICAgIG9wdGlvblZhbHVlc0tleXMgPSBvcHRpb25WYWx1ZXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpZiBvYmplY3QsIGV4dHJhY3Qga2V5cywgaW4gZW51bWVyYXRpb24gb3JkZXIsIHVuc29ydGVkXG4gICAgICAgIG9wdGlvblZhbHVlc0tleXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaXRlbUtleSBpbiBvcHRpb25WYWx1ZXMpIHtcbiAgICAgICAgICBpZiAob3B0aW9uVmFsdWVzLmhhc093blByb3BlcnR5KGl0ZW1LZXkpICYmIGl0ZW1LZXkuY2hhckF0KDApICE9PSAnJCcpIHtcbiAgICAgICAgICAgIG9wdGlvblZhbHVlc0tleXMucHVzaChpdGVtS2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvcHRpb25WYWx1ZXNLZXlzO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0cmFja0J5OiB0cmFja0J5LFxuICAgICAgZ2V0VHJhY2tCeVZhbHVlOiBnZXRUcmFja0J5VmFsdWUsXG4gICAgICBnZXRXYXRjaGFibGVzOiAkcGFyc2UodmFsdWVzRm4sIGZ1bmN0aW9uKG9wdGlvblZhbHVlcykge1xuICAgICAgICAvLyBDcmVhdGUgYSBjb2xsZWN0aW9uIG9mIHRoaW5ncyB0aGF0IHdlIHdvdWxkIGxpa2UgdG8gd2F0Y2ggKHdhdGNoZWRBcnJheSlcbiAgICAgICAgLy8gc28gdGhhdCB0aGV5IGNhbiBhbGwgYmUgd2F0Y2hlZCB1c2luZyBhIHNpbmdsZSAkd2F0Y2hDb2xsZWN0aW9uXG4gICAgICAgIC8vIHRoYXQgb25seSBydW5zIHRoZSBoYW5kbGVyIG9uY2UgaWYgYW55dGhpbmcgY2hhbmdlc1xuICAgICAgICB2YXIgd2F0Y2hlZEFycmF5ID0gW107XG4gICAgICAgIG9wdGlvblZhbHVlcyA9IG9wdGlvblZhbHVlcyB8fCBbXTtcblxuICAgICAgICB2YXIgb3B0aW9uVmFsdWVzS2V5cyA9IGdldE9wdGlvblZhbHVlc0tleXMob3B0aW9uVmFsdWVzKTtcbiAgICAgICAgdmFyIG9wdGlvblZhbHVlc0xlbmd0aCA9IG9wdGlvblZhbHVlc0tleXMubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgb3B0aW9uVmFsdWVzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgdmFyIGtleSA9IChvcHRpb25WYWx1ZXMgPT09IG9wdGlvblZhbHVlc0tleXMpID8gaW5kZXggOiBvcHRpb25WYWx1ZXNLZXlzW2luZGV4XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBvcHRpb25WYWx1ZXNba2V5XTtcblxuICAgICAgICAgIHZhciBsb2NhbHMgPSBnZXRMb2NhbHMob3B0aW9uVmFsdWVzW2tleV0sIGtleSk7XG4gICAgICAgICAgdmFyIHNlbGVjdFZhbHVlID0gZ2V0VHJhY2tCeVZhbHVlRm4ob3B0aW9uVmFsdWVzW2tleV0sIGxvY2Fscyk7XG4gICAgICAgICAgd2F0Y2hlZEFycmF5LnB1c2goc2VsZWN0VmFsdWUpO1xuXG4gICAgICAgICAgLy8gT25seSBuZWVkIHRvIHdhdGNoIHRoZSBkaXNwbGF5Rm4gaWYgdGhlcmUgaXMgYSBzcGVjaWZpYyBsYWJlbCBleHByZXNzaW9uXG4gICAgICAgICAgaWYgKG1hdGNoWzJdIHx8IG1hdGNoWzFdKSB7XG4gICAgICAgICAgICB2YXIgbGFiZWwgPSBkaXNwbGF5Rm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgICB3YXRjaGVkQXJyYXkucHVzaChsYWJlbCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gT25seSBuZWVkIHRvIHdhdGNoIHRoZSBkaXNhYmxlV2hlbkZuIGlmIHRoZXJlIGlzIGEgc3BlY2lmaWMgZGlzYWJsZSBleHByZXNzaW9uXG4gICAgICAgICAgaWYgKG1hdGNoWzRdKSB7XG4gICAgICAgICAgICB2YXIgZGlzYWJsZVdoZW4gPSBkaXNhYmxlV2hlbkZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgICAgd2F0Y2hlZEFycmF5LnB1c2goZGlzYWJsZVdoZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2F0Y2hlZEFycmF5O1xuICAgICAgfSksXG5cbiAgICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBvcHRpb25JdGVtcyA9IFtdO1xuICAgICAgICB2YXIgc2VsZWN0VmFsdWVNYXAgPSB7fTtcblxuICAgICAgICAvLyBUaGUgb3B0aW9uIHZhbHVlcyB3ZXJlIGFscmVhZHkgY29tcHV0ZWQgaW4gdGhlIGBnZXRXYXRjaGFibGVzYCBmbixcbiAgICAgICAgLy8gd2hpY2ggbXVzdCBoYXZlIGJlZW4gY2FsbGVkIHRvIHRyaWdnZXIgYGdldE9wdGlvbnNgXG4gICAgICAgIHZhciBvcHRpb25WYWx1ZXMgPSB2YWx1ZXNGbihzY29wZSkgfHwgW107XG4gICAgICAgIHZhciBvcHRpb25WYWx1ZXNLZXlzID0gZ2V0T3B0aW9uVmFsdWVzS2V5cyhvcHRpb25WYWx1ZXMpO1xuICAgICAgICB2YXIgb3B0aW9uVmFsdWVzTGVuZ3RoID0gb3B0aW9uVmFsdWVzS2V5cy5sZW5ndGg7XG5cbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IG9wdGlvblZhbHVlc0xlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIHZhciBrZXkgPSAob3B0aW9uVmFsdWVzID09PSBvcHRpb25WYWx1ZXNLZXlzKSA/IGluZGV4IDogb3B0aW9uVmFsdWVzS2V5c1tpbmRleF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gb3B0aW9uVmFsdWVzW2tleV07XG4gICAgICAgICAgdmFyIGxvY2FscyA9IGdldExvY2Fscyh2YWx1ZSwga2V5KTtcbiAgICAgICAgICB2YXIgdmlld1ZhbHVlID0gdmlld1ZhbHVlRm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgdmFyIHNlbGVjdFZhbHVlID0gZ2V0VHJhY2tCeVZhbHVlRm4odmlld1ZhbHVlLCBsb2NhbHMpO1xuICAgICAgICAgIHZhciBsYWJlbCA9IGRpc3BsYXlGbihzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICB2YXIgZ3JvdXAgPSBncm91cEJ5Rm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgdmFyIGRpc2FibGVkID0gZGlzYWJsZVdoZW5GbihzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICB2YXIgb3B0aW9uSXRlbSA9IG5ldyBPcHRpb24oc2VsZWN0VmFsdWUsIHZpZXdWYWx1ZSwgbGFiZWwsIGdyb3VwLCBkaXNhYmxlZCk7XG5cbiAgICAgICAgICBvcHRpb25JdGVtcy5wdXNoKG9wdGlvbkl0ZW0pO1xuICAgICAgICAgIHNlbGVjdFZhbHVlTWFwW3NlbGVjdFZhbHVlXSA9IG9wdGlvbkl0ZW07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGl0ZW1zOiBvcHRpb25JdGVtcyxcbiAgICAgICAgICBzZWxlY3RWYWx1ZU1hcDogc2VsZWN0VmFsdWVNYXAsXG4gICAgICAgICAgZ2V0T3B0aW9uRnJvbVZpZXdWYWx1ZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3RWYWx1ZU1hcFtnZXRUcmFja0J5VmFsdWUodmFsdWUpXTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGdldFZpZXdWYWx1ZUZyb21PcHRpb246IGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgICAgLy8gSWYgdGhlIHZpZXdWYWx1ZSBjb3VsZCBiZSBhbiBvYmplY3QgdGhhdCBtYXkgYmUgbXV0YXRlZCBieSB0aGUgYXBwbGljYXRpb24sXG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIG1ha2UgYSBjb3B5IGFuZCBub3QgcmV0dXJuIHRoZSByZWZlcmVuY2UgdG8gdGhlIHZhbHVlIG9uIHRoZSBvcHRpb24uXG4gICAgICAgICAgICByZXR1cm4gdHJhY2tCeSA/IGFuZ3VsYXIuY29weShvcHRpb24udmlld1ZhbHVlKSA6IG9wdGlvbi52aWV3VmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuXG4gIC8vIHdlIGNhbid0IGp1c3QganFMaXRlKCc8b3B0aW9uPicpIHNpbmNlIGpxTGl0ZSBpcyBub3Qgc21hcnQgZW5vdWdoXG4gIC8vIHRvIGNyZWF0ZSBpdCBpbiA8c2VsZWN0PiBhbmQgSUUgYmFyZnMgb3RoZXJ3aXNlLlxuICB2YXIgb3B0aW9uVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKSxcbiAgICAgIG9wdEdyb3VwVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRncm91cCcpO1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICByZXF1aXJlOiBbJ3NlbGVjdCcsICc/bmdNb2RlbCddLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBzZWxlY3RFbGVtZW50LCBhdHRyLCBjdHJscykge1xuXG4gICAgICAvLyBpZiBuZ01vZGVsIGlzIG5vdCBkZWZpbmVkLCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nXG4gICAgICB2YXIgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcbiAgICAgIGlmICghbmdNb2RlbEN0cmwpIHJldHVybjtcblxuICAgICAgdmFyIHNlbGVjdEN0cmwgPSBjdHJsc1swXTtcbiAgICAgIHZhciBtdWx0aXBsZSA9IGF0dHIubXVsdGlwbGU7XG5cbiAgICAgIC8vIFRoZSBlbXB0eU9wdGlvbiBhbGxvd3MgdGhlIGFwcGxpY2F0aW9uIGRldmVsb3BlciB0byBwcm92aWRlIHRoZWlyIG93biBjdXN0b20gXCJlbXB0eVwiXG4gICAgICAvLyBvcHRpb24gd2hlbiB0aGUgdmlld1ZhbHVlIGRvZXMgbm90IG1hdGNoIGFueSBvZiB0aGUgb3B0aW9uIHZhbHVlcy5cbiAgICAgIHZhciBlbXB0eU9wdGlvbjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBjaGlsZHJlbiA9IHNlbGVjdEVsZW1lbnQuY2hpbGRyZW4oKSwgaWkgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIGlmIChjaGlsZHJlbltpXS52YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICBlbXB0eU9wdGlvbiA9IGNoaWxkcmVuLmVxKGkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm92aWRlZEVtcHR5T3B0aW9uID0gISFlbXB0eU9wdGlvbjtcblxuICAgICAgdmFyIHVua25vd25PcHRpb24gPSBqcUxpdGUob3B0aW9uVGVtcGxhdGUuY2xvbmVOb2RlKGZhbHNlKSk7XG4gICAgICB1bmtub3duT3B0aW9uLnZhbCgnPycpO1xuXG4gICAgICB2YXIgb3B0aW9ucztcbiAgICAgIHZhciBuZ09wdGlvbnMgPSBwYXJzZU9wdGlvbnNFeHByZXNzaW9uKGF0dHIubmdPcHRpb25zLCBzZWxlY3RFbGVtZW50LCBzY29wZSk7XG5cblxuICAgICAgdmFyIHJlbmRlckVtcHR5T3B0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghcHJvdmlkZWRFbXB0eU9wdGlvbikge1xuICAgICAgICAgIHNlbGVjdEVsZW1lbnQucHJlcGVuZChlbXB0eU9wdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZWN0RWxlbWVudC52YWwoJycpO1xuICAgICAgICBlbXB0eU9wdGlvbi5wcm9wKCdzZWxlY3RlZCcsIHRydWUpOyAvLyBuZWVkZWQgZm9yIElFXG4gICAgICAgIGVtcHR5T3B0aW9uLmF0dHIoJ3NlbGVjdGVkJywgdHJ1ZSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgcmVtb3ZlRW1wdHlPcHRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCFwcm92aWRlZEVtcHR5T3B0aW9uKSB7XG4gICAgICAgICAgZW1wdHlPcHRpb24ucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cblxuICAgICAgdmFyIHJlbmRlclVua25vd25PcHRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZWN0RWxlbWVudC5wcmVwZW5kKHVua25vd25PcHRpb24pO1xuICAgICAgICBzZWxlY3RFbGVtZW50LnZhbCgnPycpO1xuICAgICAgICB1bmtub3duT3B0aW9uLnByb3AoJ3NlbGVjdGVkJywgdHJ1ZSk7IC8vIG5lZWRlZCBmb3IgSUVcbiAgICAgICAgdW5rbm93bk9wdGlvbi5hdHRyKCdzZWxlY3RlZCcsIHRydWUpO1xuICAgICAgfTtcblxuICAgICAgdmFyIHJlbW92ZVVua25vd25PcHRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdW5rbm93bk9wdGlvbi5yZW1vdmUoKTtcbiAgICAgIH07XG5cblxuICAgICAgLy8gVXBkYXRlIHRoZSBjb250cm9sbGVyIG1ldGhvZHMgZm9yIG11bHRpcGxlIHNlbGVjdGFibGUgb3B0aW9uc1xuICAgICAgaWYgKCFtdWx0aXBsZSkge1xuXG4gICAgICAgIHNlbGVjdEN0cmwud3JpdGVWYWx1ZSA9IGZ1bmN0aW9uIHdyaXRlTmdPcHRpb25zVmFsdWUodmFsdWUpIHtcbiAgICAgICAgICB2YXIgb3B0aW9uID0gb3B0aW9ucy5nZXRPcHRpb25Gcm9tVmlld1ZhbHVlKHZhbHVlKTtcblxuICAgICAgICAgIGlmIChvcHRpb24gJiYgIW9wdGlvbi5kaXNhYmxlZCkge1xuICAgICAgICAgICAgaWYgKHNlbGVjdEVsZW1lbnRbMF0udmFsdWUgIT09IG9wdGlvbi5zZWxlY3RWYWx1ZSkge1xuICAgICAgICAgICAgICByZW1vdmVVbmtub3duT3B0aW9uKCk7XG4gICAgICAgICAgICAgIHJlbW92ZUVtcHR5T3B0aW9uKCk7XG5cbiAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudFswXS52YWx1ZSA9IG9wdGlvbi5zZWxlY3RWYWx1ZTtcbiAgICAgICAgICAgICAgb3B0aW9uLmVsZW1lbnQuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBvcHRpb24uZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCBwcm92aWRlZEVtcHR5T3B0aW9uKSB7XG4gICAgICAgICAgICAgIHJlbW92ZVVua25vd25PcHRpb24oKTtcbiAgICAgICAgICAgICAgcmVuZGVyRW1wdHlPcHRpb24oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlbW92ZUVtcHR5T3B0aW9uKCk7XG4gICAgICAgICAgICAgIHJlbmRlclVua25vd25PcHRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZWN0Q3RybC5yZWFkVmFsdWUgPSBmdW5jdGlvbiByZWFkTmdPcHRpb25zVmFsdWUoKSB7XG5cbiAgICAgICAgICB2YXIgc2VsZWN0ZWRPcHRpb24gPSBvcHRpb25zLnNlbGVjdFZhbHVlTWFwW3NlbGVjdEVsZW1lbnQudmFsKCldO1xuXG4gICAgICAgICAgaWYgKHNlbGVjdGVkT3B0aW9uICYmICFzZWxlY3RlZE9wdGlvbi5kaXNhYmxlZCkge1xuICAgICAgICAgICAgcmVtb3ZlRW1wdHlPcHRpb24oKTtcbiAgICAgICAgICAgIHJlbW92ZVVua25vd25PcHRpb24oKTtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmdldFZpZXdWYWx1ZUZyb21PcHRpb24oc2VsZWN0ZWRPcHRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJZiB3ZSBhcmUgdXNpbmcgYHRyYWNrIGJ5YCB0aGVuIHdlIG11c3Qgd2F0Y2ggdGhlIHRyYWNrZWQgdmFsdWUgb24gdGhlIG1vZGVsXG4gICAgICAgIC8vIHNpbmNlIG5nTW9kZWwgb25seSB3YXRjaGVzIGZvciBvYmplY3QgaWRlbnRpdHkgY2hhbmdlXG4gICAgICAgIGlmIChuZ09wdGlvbnMudHJhY2tCeSkge1xuICAgICAgICAgIHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gbmdPcHRpb25zLmdldFRyYWNrQnlWYWx1ZShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKTsgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7IH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgbmdNb2RlbEN0cmwuJGlzRW1wdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiAhdmFsdWUgfHwgdmFsdWUubGVuZ3RoID09PSAwO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgc2VsZWN0Q3RybC53cml0ZVZhbHVlID0gZnVuY3Rpb24gd3JpdGVOZ09wdGlvbnNNdWx0aXBsZSh2YWx1ZSkge1xuICAgICAgICAgIG9wdGlvbnMuaXRlbXMuZm9yRWFjaChmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgIG9wdGlvbi5lbGVtZW50LnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgICB2YXIgb3B0aW9uID0gb3B0aW9ucy5nZXRPcHRpb25Gcm9tVmlld1ZhbHVlKGl0ZW0pO1xuICAgICAgICAgICAgICBpZiAob3B0aW9uICYmICFvcHRpb24uZGlzYWJsZWQpIG9wdGlvbi5lbGVtZW50LnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuXG4gICAgICAgIHNlbGVjdEN0cmwucmVhZFZhbHVlID0gZnVuY3Rpb24gcmVhZE5nT3B0aW9uc011bHRpcGxlKCkge1xuICAgICAgICAgIHZhciBzZWxlY3RlZFZhbHVlcyA9IHNlbGVjdEVsZW1lbnQudmFsKCkgfHwgW10sXG4gICAgICAgICAgICAgIHNlbGVjdGlvbnMgPSBbXTtcblxuICAgICAgICAgIGZvckVhY2goc2VsZWN0ZWRWYWx1ZXMsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9uID0gb3B0aW9ucy5zZWxlY3RWYWx1ZU1hcFt2YWx1ZV07XG4gICAgICAgICAgICBpZiAoIW9wdGlvbi5kaXNhYmxlZCkgc2VsZWN0aW9ucy5wdXNoKG9wdGlvbnMuZ2V0Vmlld1ZhbHVlRnJvbU9wdGlvbihvcHRpb24pKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBzZWxlY3Rpb25zO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIElmIHdlIGFyZSB1c2luZyBgdHJhY2sgYnlgIHRoZW4gd2UgbXVzdCB3YXRjaCB0aGVzZSB0cmFja2VkIHZhbHVlcyBvbiB0aGUgbW9kZWxcbiAgICAgICAgLy8gc2luY2UgbmdNb2RlbCBvbmx5IHdhdGNoZXMgZm9yIG9iamVjdCBpZGVudGl0eSBjaGFuZ2VcbiAgICAgICAgaWYgKG5nT3B0aW9ucy50cmFja0J5KSB7XG5cbiAgICAgICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5nT3B0aW9ucy5nZXRUcmFja0J5VmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgaWYgKHByb3ZpZGVkRW1wdHlPcHRpb24pIHtcblxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHJlbW92ZSBpdCBiZWZvcmUgY2FsbGluZyBzZWxlY3RFbGVtZW50LmVtcHR5KCkgYmVjYXVzZSBvdGhlcndpc2UgSUUgd2lsbFxuICAgICAgICAvLyByZW1vdmUgdGhlIGxhYmVsIGZyb20gdGhlIGVsZW1lbnQuIHd0Zj9cbiAgICAgICAgZW1wdHlPcHRpb24ucmVtb3ZlKCk7XG5cbiAgICAgICAgLy8gY29tcGlsZSB0aGUgZWxlbWVudCBzaW5jZSB0aGVyZSBtaWdodCBiZSBiaW5kaW5ncyBpbiBpdFxuICAgICAgICAkY29tcGlsZShlbXB0eU9wdGlvbikoc2NvcGUpO1xuXG4gICAgICAgIC8vIHJlbW92ZSB0aGUgY2xhc3MsIHdoaWNoIGlzIGFkZGVkIGF1dG9tYXRpY2FsbHkgYmVjYXVzZSB3ZSByZWNvbXBpbGUgdGhlIGVsZW1lbnQgYW5kIGl0XG4gICAgICAgIC8vIGJlY29tZXMgdGhlIGNvbXBpbGF0aW9uIHJvb3RcbiAgICAgICAgZW1wdHlPcHRpb24ucmVtb3ZlQ2xhc3MoJ25nLXNjb3BlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbXB0eU9wdGlvbiA9IGpxTGl0ZShvcHRpb25UZW1wbGF0ZS5jbG9uZU5vZGUoZmFsc2UpKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2UgbmVlZCB0byBkbyB0aGlzIGhlcmUgdG8gZW5zdXJlIHRoYXQgdGhlIG9wdGlvbnMgb2JqZWN0IGlzIGRlZmluZWRcbiAgICAgIC8vIHdoZW4gd2UgZmlyc3QgaGl0IGl0IGluIHdyaXRlTmdPcHRpb25zVmFsdWVcbiAgICAgIHVwZGF0ZU9wdGlvbnMoKTtcblxuICAgICAgLy8gV2Ugd2lsbCByZS1yZW5kZXIgdGhlIG9wdGlvbiBlbGVtZW50cyBpZiB0aGUgb3B0aW9uIHZhbHVlcyBvciBsYWJlbHMgY2hhbmdlXG4gICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKG5nT3B0aW9ucy5nZXRXYXRjaGFibGVzLCB1cGRhdGVPcHRpb25zKTtcblxuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cblxuICAgICAgZnVuY3Rpb24gdXBkYXRlT3B0aW9uRWxlbWVudChvcHRpb24sIGVsZW1lbnQpIHtcbiAgICAgICAgb3B0aW9uLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICBlbGVtZW50LmRpc2FibGVkID0gb3B0aW9uLmRpc2FibGVkO1xuICAgICAgICBpZiAob3B0aW9uLnZhbHVlICE9PSBlbGVtZW50LnZhbHVlKSBlbGVtZW50LnZhbHVlID0gb3B0aW9uLnNlbGVjdFZhbHVlO1xuICAgICAgICBpZiAob3B0aW9uLmxhYmVsICE9PSBlbGVtZW50LmxhYmVsKSB7XG4gICAgICAgICAgZWxlbWVudC5sYWJlbCA9IG9wdGlvbi5sYWJlbDtcbiAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gb3B0aW9uLmxhYmVsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFkZE9yUmV1c2VFbGVtZW50KHBhcmVudCwgY3VycmVudCwgdHlwZSwgdGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAgIHZhciBlbGVtZW50O1xuICAgICAgICAvLyBDaGVjayB3aGV0aGVyIHdlIGNhbiByZXVzZSB0aGUgbmV4dCBlbGVtZW50XG4gICAgICAgIGlmIChjdXJyZW50ICYmIGxvd2VyY2FzZShjdXJyZW50Lm5vZGVOYW1lKSA9PT0gdHlwZSkge1xuICAgICAgICAgIC8vIFRoZSBuZXh0IGVsZW1lbnQgaXMgdGhlIHJpZ2h0IHR5cGUgc28gcmV1c2UgaXRcbiAgICAgICAgICBlbGVtZW50ID0gY3VycmVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUaGUgbmV4dCBlbGVtZW50IGlzIG5vdCB0aGUgcmlnaHQgdHlwZSBzbyBjcmVhdGUgYSBuZXcgb25lXG4gICAgICAgICAgZWxlbWVudCA9IHRlbXBsYXRlRWxlbWVudC5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICAgIGlmICghY3VycmVudCkge1xuICAgICAgICAgICAgLy8gVGhlcmUgYXJlIG5vIG1vcmUgZWxlbWVudHMgc28ganVzdCBhcHBlbmQgaXQgdG8gdGhlIHNlbGVjdFxuICAgICAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGUgbmV4dCBlbGVtZW50IGlzIG5vdCBhIGdyb3VwIHNvIGluc2VydCB0aGUgbmV3IG9uZVxuICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShlbGVtZW50LCBjdXJyZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICB9XG5cblxuICAgICAgZnVuY3Rpb24gcmVtb3ZlRXhjZXNzRWxlbWVudHMoY3VycmVudCkge1xuICAgICAgICB2YXIgbmV4dDtcbiAgICAgICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgICAgICBuZXh0ID0gY3VycmVudC5uZXh0U2libGluZztcbiAgICAgICAgICBqcUxpdGVSZW1vdmUoY3VycmVudCk7XG4gICAgICAgICAgY3VycmVudCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuXG4gICAgICBmdW5jdGlvbiBza2lwRW1wdHlBbmRVbmtub3duT3B0aW9ucyhjdXJyZW50KSB7XG4gICAgICAgIHZhciBlbXB0eU9wdGlvbl8gPSBlbXB0eU9wdGlvbiAmJiBlbXB0eU9wdGlvblswXTtcbiAgICAgICAgdmFyIHVua25vd25PcHRpb25fID0gdW5rbm93bk9wdGlvbiAmJiB1bmtub3duT3B0aW9uWzBdO1xuXG4gICAgICAgIGlmIChlbXB0eU9wdGlvbl8gfHwgdW5rbm93bk9wdGlvbl8pIHtcbiAgICAgICAgICB3aGlsZSAoY3VycmVudCAmJlxuICAgICAgICAgICAgICAgIChjdXJyZW50ID09PSBlbXB0eU9wdGlvbl8gfHxcbiAgICAgICAgICAgICAgICBjdXJyZW50ID09PSB1bmtub3duT3B0aW9uXykpIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHRTaWJsaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3VycmVudDtcbiAgICAgIH1cblxuXG4gICAgICBmdW5jdGlvbiB1cGRhdGVPcHRpb25zKCkge1xuXG4gICAgICAgIHZhciBwcmV2aW91c1ZhbHVlID0gb3B0aW9ucyAmJiBzZWxlY3RDdHJsLnJlYWRWYWx1ZSgpO1xuXG4gICAgICAgIG9wdGlvbnMgPSBuZ09wdGlvbnMuZ2V0T3B0aW9ucygpO1xuXG4gICAgICAgIHZhciBncm91cE1hcCA9IHt9O1xuICAgICAgICB2YXIgY3VycmVudEVsZW1lbnQgPSBzZWxlY3RFbGVtZW50WzBdLmZpcnN0Q2hpbGQ7XG5cbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIGVtcHR5IG9wdGlvbiBpcyBhbHdheXMgdGhlcmUgaWYgaXQgd2FzIGV4cGxpY2l0bHkgcHJvdmlkZWRcbiAgICAgICAgaWYgKHByb3ZpZGVkRW1wdHlPcHRpb24pIHtcbiAgICAgICAgICBzZWxlY3RFbGVtZW50LnByZXBlbmQoZW1wdHlPcHRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudEVsZW1lbnQgPSBza2lwRW1wdHlBbmRVbmtub3duT3B0aW9ucyhjdXJyZW50RWxlbWVudCk7XG5cbiAgICAgICAgb3B0aW9ucy5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbihvcHRpb24pIHtcbiAgICAgICAgICB2YXIgZ3JvdXA7XG4gICAgICAgICAgdmFyIGdyb3VwRWxlbWVudDtcbiAgICAgICAgICB2YXIgb3B0aW9uRWxlbWVudDtcblxuICAgICAgICAgIGlmIChvcHRpb24uZ3JvdXApIHtcblxuICAgICAgICAgICAgLy8gVGhpcyBvcHRpb24gaXMgdG8gbGl2ZSBpbiBhIGdyb3VwXG4gICAgICAgICAgICAvLyBTZWUgaWYgd2UgaGF2ZSBhbHJlYWR5IGNyZWF0ZWQgdGhpcyBncm91cFxuICAgICAgICAgICAgZ3JvdXAgPSBncm91cE1hcFtvcHRpb24uZ3JvdXBdO1xuXG4gICAgICAgICAgICBpZiAoIWdyb3VwKSB7XG5cbiAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBub3QgYWxyZWFkeSBjcmVhdGVkIHRoaXMgZ3JvdXBcbiAgICAgICAgICAgICAgZ3JvdXBFbGVtZW50ID0gYWRkT3JSZXVzZUVsZW1lbnQoc2VsZWN0RWxlbWVudFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcHRncm91cCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdEdyb3VwVGVtcGxhdGUpO1xuICAgICAgICAgICAgICAvLyBNb3ZlIHRvIHRoZSBuZXh0IGVsZW1lbnRcbiAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBncm91cEVsZW1lbnQubmV4dFNpYmxpbmc7XG5cbiAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBsYWJlbCBvbiB0aGUgZ3JvdXAgZWxlbWVudFxuICAgICAgICAgICAgICBncm91cEVsZW1lbnQubGFiZWwgPSBvcHRpb24uZ3JvdXA7XG5cbiAgICAgICAgICAgICAgLy8gU3RvcmUgaXQgZm9yIHVzZSBsYXRlclxuICAgICAgICAgICAgICBncm91cCA9IGdyb3VwTWFwW29wdGlvbi5ncm91cF0gPSB7XG4gICAgICAgICAgICAgICAgZ3JvdXBFbGVtZW50OiBncm91cEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgY3VycmVudE9wdGlvbkVsZW1lbnQ6IGdyb3VwRWxlbWVudC5maXJzdENoaWxkXG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU28gbm93IHdlIGhhdmUgYSBncm91cCBmb3IgdGhpcyBvcHRpb24gd2UgYWRkIHRoZSBvcHRpb24gdG8gdGhlIGdyb3VwXG4gICAgICAgICAgICBvcHRpb25FbGVtZW50ID0gYWRkT3JSZXVzZUVsZW1lbnQoZ3JvdXAuZ3JvdXBFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLmN1cnJlbnRPcHRpb25FbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcHRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvblRlbXBsYXRlKTtcbiAgICAgICAgICAgIHVwZGF0ZU9wdGlvbkVsZW1lbnQob3B0aW9uLCBvcHRpb25FbGVtZW50KTtcbiAgICAgICAgICAgIC8vIE1vdmUgdG8gdGhlIG5leHQgZWxlbWVudFxuICAgICAgICAgICAgZ3JvdXAuY3VycmVudE9wdGlvbkVsZW1lbnQgPSBvcHRpb25FbGVtZW50Lm5leHRTaWJsaW5nO1xuXG4gICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgLy8gVGhpcyBvcHRpb24gaXMgbm90IGluIGEgZ3JvdXBcbiAgICAgICAgICAgIG9wdGlvbkVsZW1lbnQgPSBhZGRPclJldXNlRWxlbWVudChzZWxlY3RFbGVtZW50WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcHRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvblRlbXBsYXRlKTtcbiAgICAgICAgICAgIHVwZGF0ZU9wdGlvbkVsZW1lbnQob3B0aW9uLCBvcHRpb25FbGVtZW50KTtcbiAgICAgICAgICAgIC8vIE1vdmUgdG8gdGhlIG5leHQgZWxlbWVudFxuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBvcHRpb25FbGVtZW50Lm5leHRTaWJsaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxuICAgICAgICAvLyBOb3cgcmVtb3ZlIGFsbCBleGNlc3Mgb3B0aW9ucyBhbmQgZ3JvdXBcbiAgICAgICAgT2JqZWN0LmtleXMoZ3JvdXBNYXApLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgcmVtb3ZlRXhjZXNzRWxlbWVudHMoZ3JvdXBNYXBba2V5XS5jdXJyZW50T3B0aW9uRWxlbWVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZW1vdmVFeGNlc3NFbGVtZW50cyhjdXJyZW50RWxlbWVudCk7XG5cbiAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuXG4gICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgdmFsdWUgaGFzIGNoYW5nZWQgZHVlIHRvIHRoZSB1cGRhdGUgdG8gdGhlIG9wdGlvbnNcbiAgICAgICAgaWYgKCFuZ01vZGVsQ3RybC4kaXNFbXB0eShwcmV2aW91c1ZhbHVlKSkge1xuICAgICAgICAgIHZhciBuZXh0VmFsdWUgPSBzZWxlY3RDdHJsLnJlYWRWYWx1ZSgpO1xuICAgICAgICAgIGlmIChuZ09wdGlvbnMudHJhY2tCeSA/ICFlcXVhbHMocHJldmlvdXNWYWx1ZSwgbmV4dFZhbHVlKSA6IHByZXZpb3VzVmFsdWUgIT09IG5leHRWYWx1ZSkge1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShuZXh0VmFsdWUpO1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICB9XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1BsdXJhbGl6ZVxuICogQHJlc3RyaWN0IEVBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBgbmdQbHVyYWxpemVgIGlzIGEgZGlyZWN0aXZlIHRoYXQgZGlzcGxheXMgbWVzc2FnZXMgYWNjb3JkaW5nIHRvIGVuLVVTIGxvY2FsaXphdGlvbiBydWxlcy5cbiAqIFRoZXNlIHJ1bGVzIGFyZSBidW5kbGVkIHdpdGggYW5ndWxhci5qcywgYnV0IGNhbiBiZSBvdmVycmlkZGVuXG4gKiAoc2VlIHtAbGluayBndWlkZS9pMThuIEFuZ3VsYXIgaTE4bn0gZGV2IGd1aWRlKS4gWW91IGNvbmZpZ3VyZSBuZ1BsdXJhbGl6ZSBkaXJlY3RpdmVcbiAqIGJ5IHNwZWNpZnlpbmcgdGhlIG1hcHBpbmdzIGJldHdlZW5cbiAqIFtwbHVyYWwgY2F0ZWdvcmllc10oaHR0cDovL3VuaWNvZGUub3JnL3JlcG9zL2NsZHItdG1wL3RydW5rL2RpZmYvc3VwcGxlbWVudGFsL2xhbmd1YWdlX3BsdXJhbF9ydWxlcy5odG1sKVxuICogYW5kIHRoZSBzdHJpbmdzIHRvIGJlIGRpc3BsYXllZC5cbiAqXG4gKiAjIFBsdXJhbCBjYXRlZ29yaWVzIGFuZCBleHBsaWNpdCBudW1iZXIgcnVsZXNcbiAqIFRoZXJlIGFyZSB0d29cbiAqIFtwbHVyYWwgY2F0ZWdvcmllc10oaHR0cDovL3VuaWNvZGUub3JnL3JlcG9zL2NsZHItdG1wL3RydW5rL2RpZmYvc3VwcGxlbWVudGFsL2xhbmd1YWdlX3BsdXJhbF9ydWxlcy5odG1sKVxuICogaW4gQW5ndWxhcidzIGRlZmF1bHQgZW4tVVMgbG9jYWxlOiBcIm9uZVwiIGFuZCBcIm90aGVyXCIuXG4gKlxuICogV2hpbGUgYSBwbHVyYWwgY2F0ZWdvcnkgbWF5IG1hdGNoIG1hbnkgbnVtYmVycyAoZm9yIGV4YW1wbGUsIGluIGVuLVVTIGxvY2FsZSwgXCJvdGhlclwiIGNhbiBtYXRjaFxuICogYW55IG51bWJlciB0aGF0IGlzIG5vdCAxKSwgYW4gZXhwbGljaXQgbnVtYmVyIHJ1bGUgY2FuIG9ubHkgbWF0Y2ggb25lIG51bWJlci4gRm9yIGV4YW1wbGUsIHRoZVxuICogZXhwbGljaXQgbnVtYmVyIHJ1bGUgZm9yIFwiM1wiIG1hdGNoZXMgdGhlIG51bWJlciAzLiBUaGVyZSBhcmUgZXhhbXBsZXMgb2YgcGx1cmFsIGNhdGVnb3JpZXNcbiAqIGFuZCBleHBsaWNpdCBudW1iZXIgcnVsZXMgdGhyb3VnaG91dCB0aGUgcmVzdCBvZiB0aGlzIGRvY3VtZW50YXRpb24uXG4gKlxuICogIyBDb25maWd1cmluZyBuZ1BsdXJhbGl6ZVxuICogWW91IGNvbmZpZ3VyZSBuZ1BsdXJhbGl6ZSBieSBwcm92aWRpbmcgMiBhdHRyaWJ1dGVzOiBgY291bnRgIGFuZCBgd2hlbmAuXG4gKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhbiBvcHRpb25hbCBhdHRyaWJ1dGUsIGBvZmZzZXRgLlxuICpcbiAqIFRoZSB2YWx1ZSBvZiB0aGUgYGNvdW50YCBhdHRyaWJ1dGUgY2FuIGJlIGVpdGhlciBhIHN0cmluZyBvciBhbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvblxuICogQW5ndWxhciBleHByZXNzaW9ufTsgdGhlc2UgYXJlIGV2YWx1YXRlZCBvbiB0aGUgY3VycmVudCBzY29wZSBmb3IgaXRzIGJvdW5kIHZhbHVlLlxuICpcbiAqIFRoZSBgd2hlbmAgYXR0cmlidXRlIHNwZWNpZmllcyB0aGUgbWFwcGluZ3MgYmV0d2VlbiBwbHVyYWwgY2F0ZWdvcmllcyBhbmQgdGhlIGFjdHVhbFxuICogc3RyaW5nIHRvIGJlIGRpc3BsYXllZC4gVGhlIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUgc2hvdWxkIGJlIGEgSlNPTiBvYmplY3QuXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBjb25maWd1cmUgbmdQbHVyYWxpemU6XG4gKlxuICogYGBgaHRtbFxuICogPG5nLXBsdXJhbGl6ZSBjb3VudD1cInBlcnNvbkNvdW50XCJcbiAgICAgICAgICAgICAgICAgd2hlbj1cInsnMCc6ICdOb2JvZHkgaXMgdmlld2luZy4nLFxuICogICAgICAgICAgICAgICAgICAgICAgJ29uZSc6ICcxIHBlcnNvbiBpcyB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne30gcGVvcGxlIGFyZSB2aWV3aW5nLid9XCI+XG4gKiA8L25nLXBsdXJhbGl6ZT5cbiAqYGBgXG4gKlxuICogSW4gdGhlIGV4YW1wbGUsIGBcIjA6IE5vYm9keSBpcyB2aWV3aW5nLlwiYCBpcyBhbiBleHBsaWNpdCBudW1iZXIgcnVsZS4gSWYgeW91IGRpZCBub3RcbiAqIHNwZWNpZnkgdGhpcyBydWxlLCAwIHdvdWxkIGJlIG1hdGNoZWQgdG8gdGhlIFwib3RoZXJcIiBjYXRlZ29yeSBhbmQgXCIwIHBlb3BsZSBhcmUgdmlld2luZ1wiXG4gKiB3b3VsZCBiZSBzaG93biBpbnN0ZWFkIG9mIFwiTm9ib2R5IGlzIHZpZXdpbmdcIi4gWW91IGNhbiBzcGVjaWZ5IGFuIGV4cGxpY2l0IG51bWJlciBydWxlIGZvclxuICogb3RoZXIgbnVtYmVycywgZm9yIGV4YW1wbGUgMTIsIHNvIHRoYXQgaW5zdGVhZCBvZiBzaG93aW5nIFwiMTIgcGVvcGxlIGFyZSB2aWV3aW5nXCIsIHlvdSBjYW5cbiAqIHNob3cgXCJhIGRvemVuIHBlb3BsZSBhcmUgdmlld2luZ1wiLlxuICpcbiAqIFlvdSBjYW4gdXNlIGEgc2V0IG9mIGNsb3NlZCBicmFjZXMgKGB7fWApIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHRoZSBudW1iZXIgdGhhdCB5b3Ugd2FudCBzdWJzdGl0dXRlZFxuICogaW50byBwbHVyYWxpemVkIHN0cmluZ3MuIEluIHRoZSBwcmV2aW91cyBleGFtcGxlLCBBbmd1bGFyIHdpbGwgcmVwbGFjZSBge31gIHdpdGhcbiAqIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT5ge3twZXJzb25Db3VudH19YDwvc3Bhbj4uIFRoZSBjbG9zZWQgYnJhY2VzIGB7fWAgaXMgYSBwbGFjZWhvbGRlclxuICogZm9yIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57e251bWJlckV4cHJlc3Npb259fTwvc3Bhbj4uXG4gKlxuICogSWYgbm8gcnVsZSBpcyBkZWZpbmVkIGZvciBhIGNhdGVnb3J5LCB0aGVuIGFuIGVtcHR5IHN0cmluZyBpcyBkaXNwbGF5ZWQgYW5kIGEgd2FybmluZyBpcyBnZW5lcmF0ZWQuXG4gKiBOb3RlIHRoYXQgc29tZSBsb2NhbGVzIGRlZmluZSBtb3JlIGNhdGVnb3JpZXMgdGhhbiBgb25lYCBhbmQgYG90aGVyYC4gRm9yIGV4YW1wbGUsIGZyLWZyIGRlZmluZXMgYGZld2AgYW5kIGBtYW55YC5cbiAqXG4gKiAjIENvbmZpZ3VyaW5nIG5nUGx1cmFsaXplIHdpdGggb2Zmc2V0XG4gKiBUaGUgYG9mZnNldGAgYXR0cmlidXRlIGFsbG93cyBmdXJ0aGVyIGN1c3RvbWl6YXRpb24gb2YgcGx1cmFsaXplZCB0ZXh0LCB3aGljaCBjYW4gcmVzdWx0IGluXG4gKiBhIGJldHRlciB1c2VyIGV4cGVyaWVuY2UuIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mIHRoZSBtZXNzYWdlIFwiNCBwZW9wbGUgYXJlIHZpZXdpbmcgdGhpcyBkb2N1bWVudFwiLFxuICogeW91IG1pZ2h0IGRpc3BsYXkgXCJKb2huLCBLYXRlIGFuZCAyIG90aGVycyBhcmUgdmlld2luZyB0aGlzIGRvY3VtZW50XCIuXG4gKiBUaGUgb2Zmc2V0IGF0dHJpYnV0ZSBhbGxvd3MgeW91IHRvIG9mZnNldCBhIG51bWJlciBieSBhbnkgZGVzaXJlZCB2YWx1ZS5cbiAqIExldCdzIHRha2UgYSBsb29rIGF0IGFuIGV4YW1wbGU6XG4gKlxuICogYGBgaHRtbFxuICogPG5nLXBsdXJhbGl6ZSBjb3VudD1cInBlcnNvbkNvdW50XCIgb2Zmc2V0PTJcbiAqICAgICAgICAgICAgICAgd2hlbj1cInsnMCc6ICdOb2JvZHkgaXMgdmlld2luZy4nLFxuICogICAgICAgICAgICAgICAgICAgICAgJzEnOiAne3twZXJzb24xfX0gaXMgdmlld2luZy4nLFxuICogICAgICAgICAgICAgICAgICAgICAgJzInOiAne3twZXJzb24xfX0gYW5kIHt7cGVyc29uMn19IGFyZSB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZy4nLFxuICogICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQge30gb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLid9XCI+XG4gKiA8L25nLXBsdXJhbGl6ZT5cbiAqIGBgYFxuICpcbiAqIE5vdGljZSB0aGF0IHdlIGFyZSBzdGlsbCB1c2luZyB0d28gcGx1cmFsIGNhdGVnb3JpZXMob25lLCBvdGhlciksIGJ1dCB3ZSBhZGRlZFxuICogdGhyZWUgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIDAsIDEgYW5kIDIuXG4gKiBXaGVuIG9uZSBwZXJzb24sIHBlcmhhcHMgSm9obiwgdmlld3MgdGhlIGRvY3VtZW50LCBcIkpvaG4gaXMgdmlld2luZ1wiIHdpbGwgYmUgc2hvd24uXG4gKiBXaGVuIHRocmVlIHBlb3BsZSB2aWV3IHRoZSBkb2N1bWVudCwgbm8gZXhwbGljaXQgbnVtYmVyIHJ1bGUgaXMgZm91bmQsIHNvXG4gKiBhbiBvZmZzZXQgb2YgMiBpcyB0YWtlbiBvZmYgMywgYW5kIEFuZ3VsYXIgdXNlcyAxIHRvIGRlY2lkZSB0aGUgcGx1cmFsIGNhdGVnb3J5LlxuICogSW4gdGhpcyBjYXNlLCBwbHVyYWwgY2F0ZWdvcnkgJ29uZScgaXMgbWF0Y2hlZCBhbmQgXCJKb2huLCBNYXJ5IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nXCJcbiAqIGlzIHNob3duLlxuICpcbiAqIE5vdGUgdGhhdCB3aGVuIHlvdSBzcGVjaWZ5IG9mZnNldHMsIHlvdSBtdXN0IHByb3ZpZGUgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIGZvclxuICogbnVtYmVycyBmcm9tIDAgdXAgdG8gYW5kIGluY2x1ZGluZyB0aGUgb2Zmc2V0LiBJZiB5b3UgdXNlIGFuIG9mZnNldCBvZiAzLCBmb3IgZXhhbXBsZSxcbiAqIHlvdSBtdXN0IHByb3ZpZGUgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIGZvciAwLCAxLCAyIGFuZCAzLiBZb3UgbXVzdCBhbHNvIHByb3ZpZGUgcGx1cmFsIHN0cmluZ3MgZm9yXG4gKiBwbHVyYWwgY2F0ZWdvcmllcyBcIm9uZVwiIGFuZCBcIm90aGVyXCIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8ZXhwcmVzc2lvbn0gY291bnQgVGhlIHZhcmlhYmxlIHRvIGJlIGJvdW5kIHRvLlxuICogQHBhcmFtIHtzdHJpbmd9IHdoZW4gVGhlIG1hcHBpbmcgYmV0d2VlbiBwbHVyYWwgY2F0ZWdvcnkgdG8gaXRzIGNvcnJlc3BvbmRpbmcgc3RyaW5ncy5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byBkZWR1Y3QgZnJvbSB0aGUgdG90YWwgbnVtYmVyLlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbW9kdWxlPVwicGx1cmFsaXplRXhhbXBsZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgncGx1cmFsaXplRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLnBlcnNvbjEgPSAnSWdvcic7XG4gICAgICAgICAgICAgICRzY29wZS5wZXJzb24yID0gJ01pc2tvJztcbiAgICAgICAgICAgICAgJHNjb3BlLnBlcnNvbkNvdW50ID0gMTtcbiAgICAgICAgICAgIH1dKTtcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgPGxhYmVsPlBlcnNvbiAxOjxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwicGVyc29uMVwiIHZhbHVlPVwiSWdvclwiIC8+PC9sYWJlbD48YnIvPlxuICAgICAgICAgIDxsYWJlbD5QZXJzb24gMjo8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInBlcnNvbjJcIiB2YWx1ZT1cIk1pc2tvXCIgLz48L2xhYmVsPjxici8+XG4gICAgICAgICAgPGxhYmVsPk51bWJlciBvZiBQZW9wbGU6PGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJwZXJzb25Db3VudFwiIHZhbHVlPVwiMVwiIC8+PC9sYWJlbD48YnIvPlxuXG4gICAgICAgICAgPCEtLS0gRXhhbXBsZSB3aXRoIHNpbXBsZSBwbHVyYWxpemF0aW9uIHJ1bGVzIGZvciBlbiBsb2NhbGUgLS0tPlxuICAgICAgICAgIFdpdGhvdXQgT2Zmc2V0OlxuICAgICAgICAgIDxuZy1wbHVyYWxpemUgY291bnQ9XCJwZXJzb25Db3VudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29uZSc6ICcxIHBlcnNvbiBpcyB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t9IHBlb3BsZSBhcmUgdmlld2luZy4nfVwiPlxuICAgICAgICAgIDwvbmctcGx1cmFsaXplPjxicj5cblxuICAgICAgICAgIDwhLS0tIEV4YW1wbGUgd2l0aCBvZmZzZXQgLS0tPlxuICAgICAgICAgIFdpdGggT2Zmc2V0KDIpOlxuICAgICAgICAgIDxuZy1wbHVyYWxpemUgY291bnQ9XCJwZXJzb25Db3VudFwiIG9mZnNldD0yXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzEnOiAne3twZXJzb24xfX0gaXMgdmlld2luZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcyJzogJ3t7cGVyc29uMX19IGFuZCB7e3BlcnNvbjJ9fSBhcmUgdmlld2luZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQge30gb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLid9XCI+XG4gICAgICAgICAgPC9uZy1wbHVyYWxpemU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIHNob3cgY29ycmVjdCBwbHVyYWxpemVkIHN0cmluZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB3aXRob3V0T2Zmc2V0ID0gZWxlbWVudC5hbGwoYnkuY3NzKCduZy1wbHVyYWxpemUnKSkuZ2V0KDApO1xuICAgICAgICAgIHZhciB3aXRoT2Zmc2V0ID0gZWxlbWVudC5hbGwoYnkuY3NzKCduZy1wbHVyYWxpemUnKSkuZ2V0KDEpO1xuICAgICAgICAgIHZhciBjb3VudElucHV0ID0gZWxlbWVudChieS5tb2RlbCgncGVyc29uQ291bnQnKSk7XG5cbiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJzEgcGVyc29uIGlzIHZpZXdpbmcuJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdJZ29yIGlzIHZpZXdpbmcuJyk7XG5cbiAgICAgICAgICBjb3VudElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgY291bnRJbnB1dC5zZW5kS2V5cygnMCcpO1xuXG4gICAgICAgICAgZXhwZWN0KHdpdGhvdXRPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdOb2JvZHkgaXMgdmlld2luZy4nKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ05vYm9keSBpcyB2aWV3aW5nLicpO1xuXG4gICAgICAgICAgY291bnRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIGNvdW50SW5wdXQuc2VuZEtleXMoJzInKTtcblxuICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnMiBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdJZ29yIGFuZCBNaXNrbyBhcmUgdmlld2luZy4nKTtcblxuICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICBjb3VudElucHV0LnNlbmRLZXlzKCczJyk7XG5cbiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJzMgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnSWdvciwgTWlza28gYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmcuJyk7XG5cbiAgICAgICAgICBjb3VudElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgY291bnRJbnB1dC5zZW5kS2V5cygnNCcpO1xuXG4gICAgICAgICAgZXhwZWN0KHdpdGhvdXRPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCc0IHBlb3BsZSBhcmUgdmlld2luZy4nKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0lnb3IsIE1pc2tvIGFuZCAyIG90aGVyIHBlb3BsZSBhcmUgdmlld2luZy4nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgc2hvdyBkYXRhLWJvdW5kIG5hbWVzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHdpdGhPZmZzZXQgPSBlbGVtZW50LmFsbChieS5jc3MoJ25nLXBsdXJhbGl6ZScpKS5nZXQoMSk7XG4gICAgICAgICAgdmFyIHBlcnNvbkNvdW50ID0gZWxlbWVudChieS5tb2RlbCgncGVyc29uQ291bnQnKSk7XG4gICAgICAgICAgdmFyIHBlcnNvbjEgPSBlbGVtZW50KGJ5Lm1vZGVsKCdwZXJzb24xJykpO1xuICAgICAgICAgIHZhciBwZXJzb24yID0gZWxlbWVudChieS5tb2RlbCgncGVyc29uMicpKTtcbiAgICAgICAgICBwZXJzb25Db3VudC5jbGVhcigpO1xuICAgICAgICAgIHBlcnNvbkNvdW50LnNlbmRLZXlzKCc0Jyk7XG4gICAgICAgICAgcGVyc29uMS5jbGVhcigpO1xuICAgICAgICAgIHBlcnNvbjEuc2VuZEtleXMoJ0RpJyk7XG4gICAgICAgICAgcGVyc29uMi5jbGVhcigpO1xuICAgICAgICAgIHBlcnNvbjIuc2VuZEtleXMoJ1ZvanRhJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdEaSwgVm9qdGEgYW5kIDIgb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1BsdXJhbGl6ZURpcmVjdGl2ZSA9IFsnJGxvY2FsZScsICckaW50ZXJwb2xhdGUnLCAnJGxvZycsIGZ1bmN0aW9uKCRsb2NhbGUsICRpbnRlcnBvbGF0ZSwgJGxvZykge1xuICB2YXIgQlJBQ0UgPSAve30vZyxcbiAgICAgIElTX1dIRU4gPSAvXndoZW4oTWludXMpPyguKykkLztcblxuICByZXR1cm4ge1xuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICB2YXIgbnVtYmVyRXhwID0gYXR0ci5jb3VudCxcbiAgICAgICAgICB3aGVuRXhwID0gYXR0ci4kYXR0ci53aGVuICYmIGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyLndoZW4pLCAvLyB3ZSBoYXZlIHt7fX0gaW4gYXR0cnNcbiAgICAgICAgICBvZmZzZXQgPSBhdHRyLm9mZnNldCB8fCAwLFxuICAgICAgICAgIHdoZW5zID0gc2NvcGUuJGV2YWwod2hlbkV4cCkgfHwge30sXG4gICAgICAgICAgd2hlbnNFeHBGbnMgPSB7fSxcbiAgICAgICAgICBzdGFydFN5bWJvbCA9ICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpLFxuICAgICAgICAgIGVuZFN5bWJvbCA9ICRpbnRlcnBvbGF0ZS5lbmRTeW1ib2woKSxcbiAgICAgICAgICBicmFjZVJlcGxhY2VtZW50ID0gc3RhcnRTeW1ib2wgKyBudW1iZXJFeHAgKyAnLScgKyBvZmZzZXQgKyBlbmRTeW1ib2wsXG4gICAgICAgICAgd2F0Y2hSZW1vdmVyID0gYW5ndWxhci5ub29wLFxuICAgICAgICAgIGxhc3RDb3VudDtcblxuICAgICAgZm9yRWFjaChhdHRyLCBmdW5jdGlvbihleHByZXNzaW9uLCBhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgIHZhciB0bXBNYXRjaCA9IElTX1dIRU4uZXhlYyhhdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgaWYgKHRtcE1hdGNoKSB7XG4gICAgICAgICAgdmFyIHdoZW5LZXkgPSAodG1wTWF0Y2hbMV0gPyAnLScgOiAnJykgKyBsb3dlcmNhc2UodG1wTWF0Y2hbMl0pO1xuICAgICAgICAgIHdoZW5zW3doZW5LZXldID0gZWxlbWVudC5hdHRyKGF0dHIuJGF0dHJbYXR0cmlidXRlTmFtZV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGZvckVhY2god2hlbnMsIGZ1bmN0aW9uKGV4cHJlc3Npb24sIGtleSkge1xuICAgICAgICB3aGVuc0V4cEZuc1trZXldID0gJGludGVycG9sYXRlKGV4cHJlc3Npb24ucmVwbGFjZShCUkFDRSwgYnJhY2VSZXBsYWNlbWVudCkpO1xuXG4gICAgICB9KTtcblxuICAgICAgc2NvcGUuJHdhdGNoKG51bWJlckV4cCwgZnVuY3Rpb24gbmdQbHVyYWxpemVXYXRjaEFjdGlvbihuZXdWYWwpIHtcbiAgICAgICAgdmFyIGNvdW50ID0gcGFyc2VGbG9hdChuZXdWYWwpO1xuICAgICAgICB2YXIgY291bnRJc05hTiA9IGlzTmFOKGNvdW50KTtcblxuICAgICAgICBpZiAoIWNvdW50SXNOYU4gJiYgIShjb3VudCBpbiB3aGVucykpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleHBsaWNpdCBudW1iZXIgcnVsZSBzdWNoIGFzIDEsIDIsIDMuLi4gaXMgZGVmaW5lZCwganVzdCB1c2UgaXQuXG4gICAgICAgICAgLy8gT3RoZXJ3aXNlLCBjaGVjayBpdCBhZ2FpbnN0IHBsdXJhbGl6YXRpb24gcnVsZXMgaW4gJGxvY2FsZSBzZXJ2aWNlLlxuICAgICAgICAgIGNvdW50ID0gJGxvY2FsZS5wbHVyYWxDYXQoY291bnQgLSBvZmZzZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgYm90aCBgY291bnRgIGFuZCBgbGFzdENvdW50YCBhcmUgTmFOLCB3ZSBkb24ndCBuZWVkIHRvIHJlLXJlZ2lzdGVyIGEgd2F0Y2guXG4gICAgICAgIC8vIEluIEpTIGBOYU4gIT09IE5hTmAsIHNvIHdlIGhhdmUgdG8gZXhsaWNpdGx5IGNoZWNrLlxuICAgICAgICBpZiAoKGNvdW50ICE9PSBsYXN0Q291bnQpICYmICEoY291bnRJc05hTiAmJiBpc051bWJlcihsYXN0Q291bnQpICYmIGlzTmFOKGxhc3RDb3VudCkpKSB7XG4gICAgICAgICAgd2F0Y2hSZW1vdmVyKCk7XG4gICAgICAgICAgdmFyIHdoZW5FeHBGbiA9IHdoZW5zRXhwRm5zW2NvdW50XTtcbiAgICAgICAgICBpZiAoaXNVbmRlZmluZWQod2hlbkV4cEZuKSkge1xuICAgICAgICAgICAgaWYgKG5ld1ZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICRsb2cuZGVidWcoXCJuZ1BsdXJhbGl6ZTogbm8gcnVsZSBkZWZpbmVkIGZvciAnXCIgKyBjb3VudCArIFwiJyBpbiBcIiArIHdoZW5FeHApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2F0Y2hSZW1vdmVyID0gbm9vcDtcbiAgICAgICAgICAgIHVwZGF0ZUVsZW1lbnRUZXh0KCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdhdGNoUmVtb3ZlciA9IHNjb3BlLiR3YXRjaCh3aGVuRXhwRm4sIHVwZGF0ZUVsZW1lbnRUZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGFzdENvdW50ID0gY291bnQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiB1cGRhdGVFbGVtZW50VGV4dChuZXdUZXh0KSB7XG4gICAgICAgIGVsZW1lbnQudGV4dChuZXdUZXh0IHx8ICcnKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1JlcGVhdFxuICogQG11bHRpRWxlbWVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ1JlcGVhdGAgZGlyZWN0aXZlIGluc3RhbnRpYXRlcyBhIHRlbXBsYXRlIG9uY2UgcGVyIGl0ZW0gZnJvbSBhIGNvbGxlY3Rpb24uIEVhY2ggdGVtcGxhdGVcbiAqIGluc3RhbmNlIGdldHMgaXRzIG93biBzY29wZSwgd2hlcmUgdGhlIGdpdmVuIGxvb3AgdmFyaWFibGUgaXMgc2V0IHRvIHRoZSBjdXJyZW50IGNvbGxlY3Rpb24gaXRlbSxcbiAqIGFuZCBgJGluZGV4YCBpcyBzZXQgdG8gdGhlIGl0ZW0gaW5kZXggb3Iga2V5LlxuICpcbiAqIFNwZWNpYWwgcHJvcGVydGllcyBhcmUgZXhwb3NlZCBvbiB0aGUgbG9jYWwgc2NvcGUgb2YgZWFjaCB0ZW1wbGF0ZSBpbnN0YW5jZSwgaW5jbHVkaW5nOlxuICpcbiAqIHwgVmFyaWFibGUgIHwgVHlwZSAgICAgICAgICAgIHwgRGV0YWlscyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgYCRpbmRleGAgIHwge0B0eXBlIG51bWJlcn0gIHwgaXRlcmF0b3Igb2Zmc2V0IG9mIHRoZSByZXBlYXRlZCBlbGVtZW50ICgwLi5sZW5ndGgtMSkgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgYCRmaXJzdGAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBmaXJzdCBpbiB0aGUgaXRlcmF0b3IuICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgYCRtaWRkbGVgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgbGFzdCBpbiB0aGUgaXRlcmF0b3IuIHxcbiAqIHwgYCRsYXN0YCAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBsYXN0IGluIHRoZSBpdGVyYXRvci4gICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgYCRldmVuYCAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgaXRlcmF0b3IgcG9zaXRpb24gYCRpbmRleGAgaXMgZXZlbiAob3RoZXJ3aXNlIGZhbHNlKS4gICAgICAgICAgIHxcbiAqIHwgYCRvZGRgICAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgaXRlcmF0b3IgcG9zaXRpb24gYCRpbmRleGAgaXMgb2RkIChvdGhlcndpc2UgZmFsc2UpLiAgICAgICAgICAgIHxcbiAqXG4gKiBDcmVhdGluZyBhbGlhc2VzIGZvciB0aGVzZSBwcm9wZXJ0aWVzIGlzIHBvc3NpYmxlIHdpdGgge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0luaXQgYG5nSW5pdGB9LlxuICogVGhpcyBtYXkgYmUgdXNlZnVsIHdoZW4sIGZvciBpbnN0YW5jZSwgbmVzdGluZyBuZ1JlcGVhdHMuXG4gKlxuICpcbiAqICMgSXRlcmF0aW5nIG92ZXIgb2JqZWN0IHByb3BlcnRpZXNcbiAqXG4gKiBJdCBpcyBwb3NzaWJsZSB0byBnZXQgYG5nUmVwZWF0YCB0byBpdGVyYXRlIG92ZXIgdGhlIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IHVzaW5nIHRoZSBmb2xsb3dpbmdcbiAqIHN5bnRheDpcbiAqXG4gKiBgYGBqc1xuICogPGRpdiBuZy1yZXBlYXQ9XCIoa2V5LCB2YWx1ZSkgaW4gbXlPYmpcIj4gLi4uIDwvZGl2PlxuICogYGBgXG4gKlxuICogWW91IG5lZWQgdG8gYmUgYXdhcmUgdGhhdCB0aGUgSmF2YVNjcmlwdCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IGRlZmluZSB0aGUgb3JkZXIgb2Yga2V5c1xuICogcmV0dXJuZWQgZm9yIGFuIG9iamVjdC4gKFRvIG1pdGlnYXRlIHRoaXMgaW4gQW5ndWxhciAxLjMgdGhlIGBuZ1JlcGVhdGAgZGlyZWN0aXZlXG4gKiB1c2VkIHRvIHNvcnQgdGhlIGtleXMgYWxwaGFiZXRpY2FsbHkuKVxuICpcbiAqIFZlcnNpb24gMS40IHJlbW92ZWQgdGhlIGFscGhhYmV0aWMgc29ydGluZy4gV2Ugbm93IHJlbHkgb24gdGhlIG9yZGVyIHJldHVybmVkIGJ5IHRoZSBicm93c2VyXG4gKiB3aGVuIHJ1bm5pbmcgYGZvciBrZXkgaW4gbXlPYmpgLiBJdCBzZWVtcyB0aGF0IGJyb3dzZXJzIGdlbmVyYWxseSBmb2xsb3cgdGhlIHN0cmF0ZWd5IG9mIHByb3ZpZGluZ1xuICoga2V5cyBpbiB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSB3ZXJlIGRlZmluZWQsIGFsdGhvdWdoIHRoZXJlIGFyZSBleGNlcHRpb25zIHdoZW4ga2V5cyBhcmUgZGVsZXRlZFxuICogYW5kIHJlaW5zdGF0ZWQuIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9PcGVyYXRvcnMvZGVsZXRlI0Nyb3NzLWJyb3dzZXJfaXNzdWVzXG4gKlxuICogSWYgdGhpcyBpcyBub3QgZGVzaXJlZCwgdGhlIHJlY29tbWVuZGVkIHdvcmthcm91bmQgaXMgdG8gY29udmVydCB5b3VyIG9iamVjdCBpbnRvIGFuIGFycmF5XG4gKiB0aGF0IGlzIHNvcnRlZCBpbnRvIHRoZSBvcmRlciB0aGF0IHlvdSBwcmVmZXIgYmVmb3JlIHByb3ZpZGluZyBpdCB0byBgbmdSZXBlYXRgLiAgWW91IGNvdWxkXG4gKiBkbyB0aGlzIHdpdGggYSBmaWx0ZXIgc3VjaCBhcyBbdG9BcnJheUZpbHRlcl0oaHR0cDovL25nbW9kdWxlcy5vcmcvbW9kdWxlcy9hbmd1bGFyLXRvQXJyYXlGaWx0ZXIpXG4gKiBvciBpbXBsZW1lbnQgYSBgJHdhdGNoYCBvbiB0aGUgb2JqZWN0IHlvdXJzZWxmLlxuICpcbiAqXG4gKiAjIFRyYWNraW5nIGFuZCBEdXBsaWNhdGVzXG4gKlxuICogV2hlbiB0aGUgY29udGVudHMgb2YgdGhlIGNvbGxlY3Rpb24gY2hhbmdlLCBgbmdSZXBlYXRgIG1ha2VzIHRoZSBjb3JyZXNwb25kaW5nIGNoYW5nZXMgdG8gdGhlIERPTTpcbiAqXG4gKiAqIFdoZW4gYW4gaXRlbSBpcyBhZGRlZCwgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHRlbXBsYXRlIGlzIGFkZGVkIHRvIHRoZSBET00uXG4gKiAqIFdoZW4gYW4gaXRlbSBpcyByZW1vdmVkLCBpdHMgdGVtcGxhdGUgaW5zdGFuY2UgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00uXG4gKiAqIFdoZW4gaXRlbXMgYXJlIHJlb3JkZXJlZCwgdGhlaXIgcmVzcGVjdGl2ZSB0ZW1wbGF0ZXMgYXJlIHJlb3JkZXJlZCBpbiB0aGUgRE9NLlxuICpcbiAqIEJ5IGRlZmF1bHQsIGBuZ1JlcGVhdGAgZG9lcyBub3QgYWxsb3cgZHVwbGljYXRlIGl0ZW1zIGluIGFycmF5cy4gVGhpcyBpcyBiZWNhdXNlIHdoZW5cbiAqIHRoZXJlIGFyZSBkdXBsaWNhdGVzLCBpdCBpcyBub3QgcG9zc2libGUgdG8gbWFpbnRhaW4gYSBvbmUtdG8tb25lIG1hcHBpbmcgYmV0d2VlbiBjb2xsZWN0aW9uXG4gKiBpdGVtcyBhbmQgRE9NIGVsZW1lbnRzLlxuICpcbiAqIElmIHlvdSBkbyBuZWVkIHRvIHJlcGVhdCBkdXBsaWNhdGUgaXRlbXMsIHlvdSBjYW4gc3Vic3RpdHV0ZSB0aGUgZGVmYXVsdCB0cmFja2luZyBiZWhhdmlvclxuICogd2l0aCB5b3VyIG93biB1c2luZyB0aGUgYHRyYWNrIGJ5YCBleHByZXNzaW9uLlxuICpcbiAqIEZvciBleGFtcGxlLCB5b3UgbWF5IHRyYWNrIGl0ZW1zIGJ5IHRoZSBpbmRleCBvZiBlYWNoIGl0ZW0gaW4gdGhlIGNvbGxlY3Rpb24sIHVzaW5nIHRoZVxuICogc3BlY2lhbCBzY29wZSBwcm9wZXJ0eSBgJGluZGV4YDpcbiAqIGBgYGh0bWxcbiAqICAgIDxkaXYgbmctcmVwZWF0PVwibiBpbiBbNDIsIDQyLCA0MywgNDNdIHRyYWNrIGJ5ICRpbmRleFwiPlxuICogICAgICB7e259fVxuICogICAgPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBZb3UgbWF5IHVzZSBhcmJpdHJhcnkgZXhwcmVzc2lvbnMgaW4gYHRyYWNrIGJ5YCwgaW5jbHVkaW5nIHJlZmVyZW5jZXMgdG8gY3VzdG9tIGZ1bmN0aW9uc1xuICogb24gdGhlIHNjb3BlOlxuICogYGBgaHRtbFxuICogICAgPGRpdiBuZy1yZXBlYXQ9XCJuIGluIFs0MiwgNDIsIDQzLCA0M10gdHJhY2sgYnkgbXlUcmFja2luZ0Z1bmN0aW9uKG4pXCI+XG4gKiAgICAgIHt7bn19XG4gKiAgICA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIElmIHlvdSBhcmUgd29ya2luZyB3aXRoIG9iamVjdHMgdGhhdCBoYXZlIGFuIGlkZW50aWZpZXIgcHJvcGVydHksIHlvdSBjYW4gdHJhY2tcbiAqIGJ5IHRoZSBpZGVudGlmaWVyIGluc3RlYWQgb2YgdGhlIHdob2xlIG9iamVjdC4gU2hvdWxkIHlvdSByZWxvYWQgeW91ciBkYXRhIGxhdGVyLCBgbmdSZXBlYXRgXG4gKiB3aWxsIG5vdCBoYXZlIHRvIHJlYnVpbGQgdGhlIERPTSBlbGVtZW50cyBmb3IgaXRlbXMgaXQgaGFzIGFscmVhZHkgcmVuZGVyZWQsIGV2ZW4gaWYgdGhlXG4gKiBKYXZhU2NyaXB0IG9iamVjdHMgaW4gdGhlIGNvbGxlY3Rpb24gaGF2ZSBiZWVuIHN1YnN0aXR1dGVkIGZvciBuZXcgb25lczpcbiAqIGBgYGh0bWxcbiAqICAgIDxkaXYgbmctcmVwZWF0PVwibW9kZWwgaW4gY29sbGVjdGlvbiB0cmFjayBieSBtb2RlbC5pZFwiPlxuICogICAgICB7e21vZGVsLm5hbWV9fVxuICogICAgPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBXaGVuIG5vIGB0cmFjayBieWAgZXhwcmVzc2lvbiBpcyBwcm92aWRlZCwgaXQgaXMgZXF1aXZhbGVudCB0byB0cmFja2luZyBieSB0aGUgYnVpbHQtaW5cbiAqIGAkaWRgIGZ1bmN0aW9uLCB3aGljaCB0cmFja3MgaXRlbXMgYnkgdGhlaXIgaWRlbnRpdHk6XG4gKiBgYGBodG1sXG4gKiAgICA8ZGl2IG5nLXJlcGVhdD1cIm9iaiBpbiBjb2xsZWN0aW9uIHRyYWNrIGJ5ICRpZChvYmopXCI+XG4gKiAgICAgIHt7b2JqLnByb3B9fVxuICogICAgPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIGB0cmFjayBieWAgbXVzdCBhbHdheXMgYmUgdGhlIGxhc3QgZXhwcmVzc2lvbjpcbiAqIDwvZGl2PlxuICogYGBgXG4gKiA8ZGl2IG5nLXJlcGVhdD1cIm1vZGVsIGluIGNvbGxlY3Rpb24gfCBvcmRlckJ5OiAnaWQnIGFzIGZpbHRlcmVkX3Jlc3VsdCB0cmFjayBieSBtb2RlbC5pZFwiPlxuICogICAgIHt7bW9kZWwubmFtZX19XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqICMgU3BlY2lhbCByZXBlYXQgc3RhcnQgYW5kIGVuZCBwb2ludHNcbiAqIFRvIHJlcGVhdCBhIHNlcmllcyBvZiBlbGVtZW50cyBpbnN0ZWFkIG9mIGp1c3Qgb25lIHBhcmVudCBlbGVtZW50LCBuZ1JlcGVhdCAoYXMgd2VsbCBhcyBvdGhlciBuZyBkaXJlY3RpdmVzKSBzdXBwb3J0cyBleHRlbmRpbmdcbiAqIHRoZSByYW5nZSBvZiB0aGUgcmVwZWF0ZXIgYnkgZGVmaW5pbmcgZXhwbGljaXQgc3RhcnQgYW5kIGVuZCBwb2ludHMgYnkgdXNpbmcgKipuZy1yZXBlYXQtc3RhcnQqKiBhbmQgKipuZy1yZXBlYXQtZW5kKiogcmVzcGVjdGl2ZWx5LlxuICogVGhlICoqbmctcmVwZWF0LXN0YXJ0KiogZGlyZWN0aXZlIHdvcmtzIHRoZSBzYW1lIGFzICoqbmctcmVwZWF0KiosIGJ1dCB3aWxsIHJlcGVhdCBhbGwgdGhlIEhUTUwgY29kZSAoaW5jbHVkaW5nIHRoZSB0YWcgaXQncyBkZWZpbmVkIG9uKVxuICogdXAgdG8gYW5kIGluY2x1ZGluZyB0aGUgZW5kaW5nIEhUTUwgdGFnIHdoZXJlICoqbmctcmVwZWF0LWVuZCoqIGlzIHBsYWNlZC5cbiAqXG4gKiBUaGUgZXhhbXBsZSBiZWxvdyBtYWtlcyB1c2Ugb2YgdGhpcyBmZWF0dXJlOlxuICogYGBgaHRtbFxuICogICA8aGVhZGVyIG5nLXJlcGVhdC1zdGFydD1cIml0ZW0gaW4gaXRlbXNcIj5cbiAqICAgICBIZWFkZXIge3sgaXRlbSB9fVxuICogICA8L2hlYWRlcj5cbiAqICAgPGRpdiBjbGFzcz1cImJvZHlcIj5cbiAqICAgICBCb2R5IHt7IGl0ZW0gfX1cbiAqICAgPC9kaXY+XG4gKiAgIDxmb290ZXIgbmctcmVwZWF0LWVuZD5cbiAqICAgICBGb290ZXIge3sgaXRlbSB9fVxuICogICA8L2Zvb3Rlcj5cbiAqIGBgYFxuICpcbiAqIEFuZCB3aXRoIGFuIGlucHV0IG9mIHtAdHlwZSBbJ0EnLCdCJ119IGZvciB0aGUgaXRlbXMgdmFyaWFibGUgaW4gdGhlIGV4YW1wbGUgYWJvdmUsIHRoZSBvdXRwdXQgd2lsbCBldmFsdWF0ZSB0bzpcbiAqIGBgYGh0bWxcbiAqICAgPGhlYWRlcj5cbiAqICAgICBIZWFkZXIgQVxuICogICA8L2hlYWRlcj5cbiAqICAgPGRpdiBjbGFzcz1cImJvZHlcIj5cbiAqICAgICBCb2R5IEFcbiAqICAgPC9kaXY+XG4gKiAgIDxmb290ZXI+XG4gKiAgICAgRm9vdGVyIEFcbiAqICAgPC9mb290ZXI+XG4gKiAgIDxoZWFkZXI+XG4gKiAgICAgSGVhZGVyIEJcbiAqICAgPC9oZWFkZXI+XG4gKiAgIDxkaXYgY2xhc3M9XCJib2R5XCI+XG4gKiAgICAgQm9keSBCXG4gKiAgIDwvZGl2PlxuICogICA8Zm9vdGVyPlxuICogICAgIEZvb3RlciBCXG4gKiAgIDwvZm9vdGVyPlxuICogYGBgXG4gKlxuICogVGhlIGN1c3RvbSBzdGFydCBhbmQgZW5kIHBvaW50cyBmb3IgbmdSZXBlYXQgYWxzbyBzdXBwb3J0IGFsbCBvdGhlciBIVE1MIGRpcmVjdGl2ZSBzeW50YXggZmxhdm9ycyBwcm92aWRlZCBpbiBBbmd1bGFySlMgKHN1Y2hcbiAqIGFzICoqZGF0YS1uZy1yZXBlYXQtc3RhcnQqKiwgKip4LW5nLXJlcGVhdC1zdGFydCoqIGFuZCAqKm5nOnJlcGVhdC1zdGFydCoqKS5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogKiouZW50ZXIqKiAtIHdoZW4gYSBuZXcgaXRlbSBpcyBhZGRlZCB0byB0aGUgbGlzdCBvciB3aGVuIGFuIGl0ZW0gaXMgcmV2ZWFsZWQgYWZ0ZXIgYSBmaWx0ZXJcbiAqXG4gKiAqKi5sZWF2ZSoqIC0gd2hlbiBhbiBpdGVtIGlzIHJlbW92ZWQgZnJvbSB0aGUgbGlzdCBvciB3aGVuIGFuIGl0ZW0gaXMgZmlsdGVyZWQgb3V0XG4gKlxuICogKioubW92ZSoqIC0gd2hlbiBhbiBhZGphY2VudCBpdGVtIGlzIGZpbHRlcmVkIG91dCBjYXVzaW5nIGEgcmVvcmRlciBvciB3aGVuIHRoZSBpdGVtIGNvbnRlbnRzIGFyZSByZW9yZGVyZWRcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBzY29wZVxuICogQHByaW9yaXR5IDEwMDBcbiAqIEBwYXJhbSB7cmVwZWF0X2V4cHJlc3Npb259IG5nUmVwZWF0IFRoZSBleHByZXNzaW9uIGluZGljYXRpbmcgaG93IHRvIGVudW1lcmF0ZSBhIGNvbGxlY3Rpb24uIFRoZXNlXG4gKiAgIGZvcm1hdHMgYXJlIGN1cnJlbnRseSBzdXBwb3J0ZWQ6XG4gKlxuICogICAqIGB2YXJpYWJsZSBpbiBleHByZXNzaW9uYCDigJMgd2hlcmUgdmFyaWFibGUgaXMgdGhlIHVzZXIgZGVmaW5lZCBsb29wIHZhcmlhYmxlIGFuZCBgZXhwcmVzc2lvbmBcbiAqICAgICBpcyBhIHNjb3BlIGV4cHJlc3Npb24gZ2l2aW5nIHRoZSBjb2xsZWN0aW9uIHRvIGVudW1lcmF0ZS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBhbGJ1bSBpbiBhcnRpc3QuYWxidW1zYC5cbiAqXG4gKiAgICogYChrZXksIHZhbHVlKSBpbiBleHByZXNzaW9uYCDigJMgd2hlcmUgYGtleWAgYW5kIGB2YWx1ZWAgY2FuIGJlIGFueSB1c2VyIGRlZmluZWQgaWRlbnRpZmllcnMsXG4gKiAgICAgYW5kIGBleHByZXNzaW9uYCBpcyB0aGUgc2NvcGUgZXhwcmVzc2lvbiBnaXZpbmcgdGhlIGNvbGxlY3Rpb24gdG8gZW51bWVyYXRlLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYChuYW1lLCBhZ2UpIGluIHsnYWRhbSc6MTAsICdhbWFsaWUnOjEyfWAuXG4gKlxuICogICAqIGB2YXJpYWJsZSBpbiBleHByZXNzaW9uIHRyYWNrIGJ5IHRyYWNraW5nX2V4cHJlc3Npb25gIOKAkyBZb3UgY2FuIGFsc28gcHJvdmlkZSBhbiBvcHRpb25hbCB0cmFja2luZyBleHByZXNzaW9uXG4gKiAgICAgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXNzb2NpYXRlIHRoZSBvYmplY3RzIGluIHRoZSBjb2xsZWN0aW9uIHdpdGggdGhlIERPTSBlbGVtZW50cy4gSWYgbm8gdHJhY2tpbmcgZXhwcmVzc2lvblxuICogICAgIGlzIHNwZWNpZmllZCwgbmctcmVwZWF0IGFzc29jaWF0ZXMgZWxlbWVudHMgYnkgaWRlbnRpdHkuIEl0IGlzIGFuIGVycm9yIHRvIGhhdmVcbiAqICAgICBtb3JlIHRoYW4gb25lIHRyYWNraW5nIGV4cHJlc3Npb24gdmFsdWUgcmVzb2x2ZSB0byB0aGUgc2FtZSBrZXkuIChUaGlzIHdvdWxkIG1lYW4gdGhhdCB0d28gZGlzdGluY3Qgb2JqZWN0cyBhcmVcbiAqICAgICBtYXBwZWQgdG8gdGhlIHNhbWUgRE9NIGVsZW1lbnQsIHdoaWNoIGlzIG5vdCBwb3NzaWJsZS4pXG4gKlxuICogICAgIE5vdGUgdGhhdCB0aGUgdHJhY2tpbmcgZXhwcmVzc2lvbiBtdXN0IGNvbWUgbGFzdCwgYWZ0ZXIgYW55IGZpbHRlcnMsIGFuZCB0aGUgYWxpYXMgZXhwcmVzc2lvbi5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zYCBpcyBlcXVpdmFsZW50IHRvIGBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5ICRpZChpdGVtKWAuIFRoaXMgaW1wbGllcyB0aGF0IHRoZSBET00gZWxlbWVudHNcbiAqICAgICB3aWxsIGJlIGFzc29jaWF0ZWQgYnkgaXRlbSBpZGVudGl0eSBpbiB0aGUgYXJyYXkuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB0cmFjayBieSAkaWQoaXRlbSlgLiBBIGJ1aWx0IGluIGAkaWQoKWAgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gYXNzaWduIGEgdW5pcXVlXG4gKiAgICAgYCQkaGFzaEtleWAgcHJvcGVydHkgdG8gZWFjaCBpdGVtIGluIHRoZSBhcnJheS4gVGhpcyBwcm9wZXJ0eSBpcyB0aGVuIHVzZWQgYXMgYSBrZXkgdG8gYXNzb2NpYXRlZCBET00gZWxlbWVudHNcbiAqICAgICB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIGl0ZW0gaW4gdGhlIGFycmF5IGJ5IGlkZW50aXR5LiBNb3ZpbmcgdGhlIHNhbWUgb2JqZWN0IGluIGFycmF5IHdvdWxkIG1vdmUgdGhlIERPTVxuICogICAgIGVsZW1lbnQgaW4gdGhlIHNhbWUgd2F5IGluIHRoZSBET00uXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB0cmFjayBieSBpdGVtLmlkYCBpcyBhIHR5cGljYWwgcGF0dGVybiB3aGVuIHRoZSBpdGVtcyBjb21lIGZyb20gdGhlIGRhdGFiYXNlLiBJbiB0aGlzXG4gKiAgICAgY2FzZSB0aGUgb2JqZWN0IGlkZW50aXR5IGRvZXMgbm90IG1hdHRlci4gVHdvIG9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZXF1aXZhbGVudCBhcyBsb25nIGFzIHRoZWlyIGBpZGBcbiAqICAgICBwcm9wZXJ0eSBpcyBzYW1lLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXMgfCBmaWx0ZXI6c2VhcmNoVGV4dCB0cmFjayBieSBpdGVtLmlkYCBpcyBhIHBhdHRlcm4gdGhhdCBtaWdodCBiZSB1c2VkIHRvIGFwcGx5IGEgZmlsdGVyXG4gKiAgICAgdG8gaXRlbXMgaW4gY29uanVuY3Rpb24gd2l0aCBhIHRyYWNraW5nIGV4cHJlc3Npb24uXG4gKlxuICogICAqIGB2YXJpYWJsZSBpbiBleHByZXNzaW9uIGFzIGFsaWFzX2V4cHJlc3Npb25gIOKAkyBZb3UgY2FuIGFsc28gcHJvdmlkZSBhbiBvcHRpb25hbCBhbGlhcyBleHByZXNzaW9uIHdoaWNoIHdpbGwgdGhlbiBzdG9yZSB0aGVcbiAqICAgICBpbnRlcm1lZGlhdGUgcmVzdWx0cyBvZiB0aGUgcmVwZWF0ZXIgYWZ0ZXIgdGhlIGZpbHRlcnMgaGF2ZSBiZWVuIGFwcGxpZWQuIFR5cGljYWxseSB0aGlzIGlzIHVzZWQgdG8gcmVuZGVyIGEgc3BlY2lhbCBtZXNzYWdlXG4gKiAgICAgd2hlbiBhIGZpbHRlciBpcyBhY3RpdmUgb24gdGhlIHJlcGVhdGVyLCBidXQgdGhlIGZpbHRlcmVkIHJlc3VsdCBzZXQgaXMgZW1wdHkuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB8IGZpbHRlcjp4IGFzIHJlc3VsdHNgIHdpbGwgc3RvcmUgdGhlIGZyYWdtZW50IG9mIHRoZSByZXBlYXRlZCBpdGVtcyBhcyBgcmVzdWx0c2AsIGJ1dCBvbmx5IGFmdGVyXG4gKiAgICAgdGhlIGl0ZW1zIGhhdmUgYmVlbiBwcm9jZXNzZWQgdGhyb3VnaCB0aGUgZmlsdGVyLlxuICpcbiAqICAgICBQbGVhc2Ugbm90ZSB0aGF0IGBhcyBbdmFyaWFibGUgbmFtZV0gaXMgbm90IGFuIG9wZXJhdG9yIGJ1dCByYXRoZXIgYSBwYXJ0IG9mIG5nUmVwZWF0IG1pY3JvLXN5bnRheCBzbyBpdCBjYW4gYmUgdXNlZCBvbmx5IGF0IHRoZSBlbmRcbiAqICAgICAoYW5kIG5vdCBhcyBvcGVyYXRvciwgaW5zaWRlIGFuIGV4cHJlc3Npb24pLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXMgfCBmaWx0ZXIgOiB4IHwgb3JkZXJCeSA6IG9yZGVyIHwgbGltaXRUbyA6IGxpbWl0IGFzIHJlc3VsdHNgIC5cbiAqXG4gKiBAZXhhbXBsZVxuICogVGhpcyBleGFtcGxlIGluaXRpYWxpemVzIHRoZSBzY29wZSB0byBhIGxpc3Qgb2YgbmFtZXMgYW5kXG4gKiB0aGVuIHVzZXMgYG5nUmVwZWF0YCB0byBkaXNwbGF5IGV2ZXJ5IHBlcnNvbjpcbiAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctaW5pdD1cImZyaWVuZHMgPSBbXG4gICAgICAgIHtuYW1lOidKb2huJywgYWdlOjI1LCBnZW5kZXI6J2JveSd9LFxuICAgICAgICB7bmFtZTonSmVzc2llJywgYWdlOjMwLCBnZW5kZXI6J2dpcmwnfSxcbiAgICAgICAge25hbWU6J0pvaGFubmEnLCBhZ2U6MjgsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICB7bmFtZTonSm95JywgYWdlOjE1LCBnZW5kZXI6J2dpcmwnfSxcbiAgICAgICAge25hbWU6J01hcnknLCBhZ2U6MjgsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICB7bmFtZTonUGV0ZXInLCBhZ2U6OTUsIGdlbmRlcjonYm95J30sXG4gICAgICAgIHtuYW1lOidTZWJhc3RpYW4nLCBhZ2U6NTAsIGdlbmRlcjonYm95J30sXG4gICAgICAgIHtuYW1lOidFcmlrYScsIGFnZToyNywgZ2VuZGVyOidnaXJsJ30sXG4gICAgICAgIHtuYW1lOidQYXRyaWNrJywgYWdlOjQwLCBnZW5kZXI6J2JveSd9LFxuICAgICAgICB7bmFtZTonU2FtYW50aGEnLCBhZ2U6NjAsIGdlbmRlcjonZ2lybCd9XG4gICAgICBdXCI+XG4gICAgICAgIEkgaGF2ZSB7e2ZyaWVuZHMubGVuZ3RofX0gZnJpZW5kcy4gVGhleSBhcmU6XG4gICAgICAgIDxpbnB1dCB0eXBlPVwic2VhcmNoXCIgbmctbW9kZWw9XCJxXCIgcGxhY2Vob2xkZXI9XCJmaWx0ZXIgZnJpZW5kcy4uLlwiIGFyaWEtbGFiZWw9XCJmaWx0ZXIgZnJpZW5kc1wiIC8+XG4gICAgICAgIDx1bCBjbGFzcz1cImV4YW1wbGUtYW5pbWF0ZS1jb250YWluZXJcIj5cbiAgICAgICAgICA8bGkgY2xhc3M9XCJhbmltYXRlLXJlcGVhdFwiIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzIHwgZmlsdGVyOnEgYXMgcmVzdWx0c1wiPlxuICAgICAgICAgICAgW3t7JGluZGV4ICsgMX19XSB7e2ZyaWVuZC5uYW1lfX0gd2hvIGlzIHt7ZnJpZW5kLmFnZX19IHllYXJzIG9sZC5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDxsaSBjbGFzcz1cImFuaW1hdGUtcmVwZWF0XCIgbmctaWY9XCJyZXN1bHRzLmxlbmd0aCA9PSAwXCI+XG4gICAgICAgICAgICA8c3Ryb25nPk5vIHJlc3VsdHMgZm91bmQuLi48L3N0cm9uZz5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L3VsPlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLmV4YW1wbGUtYW5pbWF0ZS1jb250YWluZXIge1xuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xuICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBsaXN0LXN0eWxlOm5vbmU7XG4gICAgICAgIG1hcmdpbjowO1xuICAgICAgICBwYWRkaW5nOjAgMTBweDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtcmVwZWF0IHtcbiAgICAgICAgbGluZS1oZWlnaHQ6NDBweDtcbiAgICAgICAgbGlzdC1zdHlsZTpub25lO1xuICAgICAgICBib3gtc2l6aW5nOmJvcmRlci1ib3g7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1tb3ZlLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWVudGVyLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWxlYXZlIHtcbiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcbiAgICAgICAgdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbW92ZSxcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1lbnRlciB7XG4gICAgICAgIG9wYWNpdHk6MDtcbiAgICAgICAgbWF4LWhlaWdodDowO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbGVhdmUsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbW92ZS5uZy1tb3ZlLWFjdGl2ZSxcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICAgICAgICBvcGFjaXR5OjE7XG4gICAgICAgIG1heC1oZWlnaHQ6NDBweDtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIGZyaWVuZHMgPSBlbGVtZW50LmFsbChieS5yZXBlYXRlcignZnJpZW5kIGluIGZyaWVuZHMnKSk7XG5cbiAgICAgIGl0KCdzaG91bGQgcmVuZGVyIGluaXRpYWwgZGF0YSBzZXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KGZyaWVuZHMuY291bnQoKSkudG9CZSgxMCk7XG4gICAgICAgIGV4cGVjdChmcmllbmRzLmdldCgwKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1sxXSBKb2huIHdobyBpcyAyNSB5ZWFycyBvbGQuJyk7XG4gICAgICAgIGV4cGVjdChmcmllbmRzLmdldCgxKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1syXSBKZXNzaWUgd2hvIGlzIDMwIHllYXJzIG9sZC4nKTtcbiAgICAgICAgZXhwZWN0KGZyaWVuZHMubGFzdCgpLmdldFRleHQoKSkudG9FcXVhbCgnWzEwXSBTYW1hbnRoYSB3aG8gaXMgNjAgeWVhcnMgb2xkLicpO1xuICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdmcmllbmRzLmxlbmd0aCcpKS5nZXRUZXh0KCkpXG4gICAgICAgICAgICAudG9NYXRjaChcIkkgaGF2ZSAxMCBmcmllbmRzLiBUaGV5IGFyZTpcIik7XG4gICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgdXBkYXRlIHJlcGVhdGVyIHdoZW4gZmlsdGVyIHByZWRpY2F0ZSBjaGFuZ2VzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZnJpZW5kcy5jb3VudCgpKS50b0JlKDEwKTtcblxuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgncScpKS5zZW5kS2V5cygnbWEnKTtcblxuICAgICAgICAgZXhwZWN0KGZyaWVuZHMuY291bnQoKSkudG9CZSgyKTtcbiAgICAgICAgIGV4cGVjdChmcmllbmRzLmdldCgwKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1sxXSBNYXJ5IHdobyBpcyAyOCB5ZWFycyBvbGQuJyk7XG4gICAgICAgICBleHBlY3QoZnJpZW5kcy5sYXN0KCkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMl0gU2FtYW50aGEgd2hvIGlzIDYwIHllYXJzIG9sZC4nKTtcbiAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1JlcGVhdERpcmVjdGl2ZSA9IFsnJHBhcnNlJywgJyRhbmltYXRlJywgZnVuY3Rpb24oJHBhcnNlLCAkYW5pbWF0ZSkge1xuICB2YXIgTkdfUkVNT1ZFRCA9ICckJE5HX1JFTU9WRUQnO1xuICB2YXIgbmdSZXBlYXRNaW5FcnIgPSBtaW5FcnIoJ25nUmVwZWF0Jyk7XG5cbiAgdmFyIHVwZGF0ZVNjb3BlID0gZnVuY3Rpb24oc2NvcGUsIGluZGV4LCB2YWx1ZUlkZW50aWZpZXIsIHZhbHVlLCBrZXlJZGVudGlmaWVyLCBrZXksIGFycmF5TGVuZ3RoKSB7XG4gICAgLy8gVE9ETyhwZXJmKTogZ2VuZXJhdGUgc2V0dGVycyB0byBzaGF2ZSBvZmYgfjQwbXMgb3IgMS0xLjUlXG4gICAgc2NvcGVbdmFsdWVJZGVudGlmaWVyXSA9IHZhbHVlO1xuICAgIGlmIChrZXlJZGVudGlmaWVyKSBzY29wZVtrZXlJZGVudGlmaWVyXSA9IGtleTtcbiAgICBzY29wZS4kaW5kZXggPSBpbmRleDtcbiAgICBzY29wZS4kZmlyc3QgPSAoaW5kZXggPT09IDApO1xuICAgIHNjb3BlLiRsYXN0ID0gKGluZGV4ID09PSAoYXJyYXlMZW5ndGggLSAxKSk7XG4gICAgc2NvcGUuJG1pZGRsZSA9ICEoc2NvcGUuJGZpcnN0IHx8IHNjb3BlLiRsYXN0KTtcbiAgICAvLyBqc2hpbnQgYml0d2lzZTogZmFsc2VcbiAgICBzY29wZS4kb2RkID0gIShzY29wZS4kZXZlbiA9IChpbmRleCYxKSA9PT0gMCk7XG4gICAgLy8ganNoaW50IGJpdHdpc2U6IHRydWVcbiAgfTtcblxuICB2YXIgZ2V0QmxvY2tTdGFydCA9IGZ1bmN0aW9uKGJsb2NrKSB7XG4gICAgcmV0dXJuIGJsb2NrLmNsb25lWzBdO1xuICB9O1xuXG4gIHZhciBnZXRCbG9ja0VuZCA9IGZ1bmN0aW9uKGJsb2NrKSB7XG4gICAgcmV0dXJuIGJsb2NrLmNsb25lW2Jsb2NrLmNsb25lLmxlbmd0aCAtIDFdO1xuICB9O1xuXG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gICAgcHJpb3JpdHk6IDEwMDAsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgJCR0bGI6IHRydWUsXG4gICAgY29tcGlsZTogZnVuY3Rpb24gbmdSZXBlYXRDb21waWxlKCRlbGVtZW50LCAkYXR0cikge1xuICAgICAgdmFyIGV4cHJlc3Npb24gPSAkYXR0ci5uZ1JlcGVhdDtcbiAgICAgIHZhciBuZ1JlcGVhdEVuZENvbW1lbnQgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCcgZW5kIG5nUmVwZWF0OiAnICsgZXhwcmVzc2lvbiArICcgJyk7XG5cbiAgICAgIHZhciBtYXRjaCA9IGV4cHJlc3Npb24ubWF0Y2goL15cXHMqKFtcXHNcXFNdKz8pXFxzK2luXFxzKyhbXFxzXFxTXSs/KSg/Olxccythc1xccysoW1xcc1xcU10rPykpPyg/Olxccyt0cmFja1xccytieVxccysoW1xcc1xcU10rPykpP1xccyokLyk7XG5cbiAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgdGhyb3cgbmdSZXBlYXRNaW5FcnIoJ2lleHAnLCBcIkV4cGVjdGVkIGV4cHJlc3Npb24gaW4gZm9ybSBvZiAnX2l0ZW1fIGluIF9jb2xsZWN0aW9uX1sgdHJhY2sgYnkgX2lkX10nIGJ1dCBnb3QgJ3swfScuXCIsXG4gICAgICAgICAgICBleHByZXNzaW9uKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxocyA9IG1hdGNoWzFdO1xuICAgICAgdmFyIHJocyA9IG1hdGNoWzJdO1xuICAgICAgdmFyIGFsaWFzQXMgPSBtYXRjaFszXTtcbiAgICAgIHZhciB0cmFja0J5RXhwID0gbWF0Y2hbNF07XG5cbiAgICAgIG1hdGNoID0gbGhzLm1hdGNoKC9eKD86KFxccypbXFwkXFx3XSspfFxcKFxccyooW1xcJFxcd10rKVxccyosXFxzKihbXFwkXFx3XSspXFxzKlxcKSkkLyk7XG5cbiAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgdGhyb3cgbmdSZXBlYXRNaW5FcnIoJ2lpZGV4cCcsIFwiJ19pdGVtXycgaW4gJ19pdGVtXyBpbiBfY29sbGVjdGlvbl8nIHNob3VsZCBiZSBhbiBpZGVudGlmaWVyIG9yICcoX2tleV8sIF92YWx1ZV8pJyBleHByZXNzaW9uLCBidXQgZ290ICd7MH0nLlwiLFxuICAgICAgICAgICAgbGhzKTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZUlkZW50aWZpZXIgPSBtYXRjaFszXSB8fCBtYXRjaFsxXTtcbiAgICAgIHZhciBrZXlJZGVudGlmaWVyID0gbWF0Y2hbMl07XG5cbiAgICAgIGlmIChhbGlhc0FzICYmICghL15bJGEtekEtWl9dWyRhLXpBLVowLTlfXSokLy50ZXN0KGFsaWFzQXMpIHx8XG4gICAgICAgICAgL14obnVsbHx1bmRlZmluZWR8dGhpc3xcXCRpbmRleHxcXCRmaXJzdHxcXCRtaWRkbGV8XFwkbGFzdHxcXCRldmVufFxcJG9kZHxcXCRwYXJlbnR8XFwkcm9vdHxcXCRpZCkkLy50ZXN0KGFsaWFzQXMpKSkge1xuICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignYmFkaWRlbnQnLCBcImFsaWFzICd7MH0nIGlzIGludmFsaWQgLS0tIG11c3QgYmUgYSB2YWxpZCBKUyBpZGVudGlmaWVyIHdoaWNoIGlzIG5vdCBhIHJlc2VydmVkIG5hbWUuXCIsXG4gICAgICAgICAgYWxpYXNBcyk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0cmFja0J5RXhwR2V0dGVyLCB0cmFja0J5SWRFeHBGbiwgdHJhY2tCeUlkQXJyYXlGbiwgdHJhY2tCeUlkT2JqRm47XG4gICAgICB2YXIgaGFzaEZuTG9jYWxzID0geyRpZDogaGFzaEtleX07XG5cbiAgICAgIGlmICh0cmFja0J5RXhwKSB7XG4gICAgICAgIHRyYWNrQnlFeHBHZXR0ZXIgPSAkcGFyc2UodHJhY2tCeUV4cCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFja0J5SWRBcnJheUZuID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBoYXNoS2V5KHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdHJhY2tCeUlkT2JqRm4gPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gbmdSZXBlYXRMaW5rKCRzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuXG4gICAgICAgIGlmICh0cmFja0J5RXhwR2V0dGVyKSB7XG4gICAgICAgICAgdHJhY2tCeUlkRXhwRm4gPSBmdW5jdGlvbihrZXksIHZhbHVlLCBpbmRleCkge1xuICAgICAgICAgICAgLy8gYXNzaWduIGtleSwgdmFsdWUsIGFuZCAkaW5kZXggdG8gdGhlIGxvY2FscyBzbyB0aGF0IHRoZXkgY2FuIGJlIHVzZWQgaW4gaGFzaCBmdW5jdGlvbnNcbiAgICAgICAgICAgIGlmIChrZXlJZGVudGlmaWVyKSBoYXNoRm5Mb2NhbHNba2V5SWRlbnRpZmllcl0gPSBrZXk7XG4gICAgICAgICAgICBoYXNoRm5Mb2NhbHNbdmFsdWVJZGVudGlmaWVyXSA9IHZhbHVlO1xuICAgICAgICAgICAgaGFzaEZuTG9jYWxzLiRpbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgcmV0dXJuIHRyYWNrQnlFeHBHZXR0ZXIoJHNjb3BlLCBoYXNoRm5Mb2NhbHMpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdG9yZSBhIGxpc3Qgb2YgZWxlbWVudHMgZnJvbSBwcmV2aW91cyBydW4uIFRoaXMgaXMgYSBoYXNoIHdoZXJlIGtleSBpcyB0aGUgaXRlbSBmcm9tIHRoZVxuICAgICAgICAvLyBpdGVyYXRvciwgYW5kIHRoZSB2YWx1ZSBpcyBvYmplY3RzIHdpdGggZm9sbG93aW5nIHByb3BlcnRpZXMuXG4gICAgICAgIC8vICAgLSBzY29wZTogYm91bmQgc2NvcGVcbiAgICAgICAgLy8gICAtIGVsZW1lbnQ6IHByZXZpb3VzIGVsZW1lbnQuXG4gICAgICAgIC8vICAgLSBpbmRleDogcG9zaXRpb25cbiAgICAgICAgLy9cbiAgICAgICAgLy8gV2UgYXJlIHVzaW5nIG5vLXByb3RvIG9iamVjdCBzbyB0aGF0IHdlIGRvbid0IG5lZWQgdG8gZ3VhcmQgYWdhaW5zdCBpbmhlcml0ZWQgcHJvcHMgdmlhXG4gICAgICAgIC8vIGhhc093blByb3BlcnR5LlxuICAgICAgICB2YXIgbGFzdEJsb2NrTWFwID0gY3JlYXRlTWFwKCk7XG5cbiAgICAgICAgLy93YXRjaCBwcm9wc1xuICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihyaHMsIGZ1bmN0aW9uIG5nUmVwZWF0QWN0aW9uKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICB2YXIgaW5kZXgsIGxlbmd0aCxcbiAgICAgICAgICAgICAgcHJldmlvdXNOb2RlID0gJGVsZW1lbnRbMF0sICAgICAvLyBub2RlIHRoYXQgY2xvbmVkIG5vZGVzIHNob3VsZCBiZSBpbnNlcnRlZCBhZnRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpemVkIHRvIHRoZSBjb21tZW50IG5vZGUgYW5jaG9yXG4gICAgICAgICAgICAgIG5leHROb2RlLFxuICAgICAgICAgICAgICAvLyBTYW1lIGFzIGxhc3RCbG9ja01hcCBidXQgaXQgaGFzIHRoZSBjdXJyZW50IHN0YXRlLiBJdCB3aWxsIGJlY29tZSB0aGVcbiAgICAgICAgICAgICAgLy8gbGFzdEJsb2NrTWFwIG9uIHRoZSBuZXh0IGl0ZXJhdGlvbi5cbiAgICAgICAgICAgICAgbmV4dEJsb2NrTWFwID0gY3JlYXRlTWFwKCksXG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25MZW5ndGgsXG4gICAgICAgICAgICAgIGtleSwgdmFsdWUsIC8vIGtleS92YWx1ZSBvZiBpdGVyYXRpb25cbiAgICAgICAgICAgICAgdHJhY2tCeUlkLFxuICAgICAgICAgICAgICB0cmFja0J5SWRGbixcbiAgICAgICAgICAgICAgY29sbGVjdGlvbktleXMsXG4gICAgICAgICAgICAgIGJsb2NrLCAgICAgICAvLyBsYXN0IG9iamVjdCBpbmZvcm1hdGlvbiB7c2NvcGUsIGVsZW1lbnQsIGlkfVxuICAgICAgICAgICAgICBuZXh0QmxvY2tPcmRlcixcbiAgICAgICAgICAgICAgZWxlbWVudHNUb1JlbW92ZTtcblxuICAgICAgICAgIGlmIChhbGlhc0FzKSB7XG4gICAgICAgICAgICAkc2NvcGVbYWxpYXNBc10gPSBjb2xsZWN0aW9uO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgICAgY29sbGVjdGlvbktleXMgPSBjb2xsZWN0aW9uO1xuICAgICAgICAgICAgdHJhY2tCeUlkRm4gPSB0cmFja0J5SWRFeHBGbiB8fCB0cmFja0J5SWRBcnJheUZuO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmFja0J5SWRGbiA9IHRyYWNrQnlJZEV4cEZuIHx8IHRyYWNrQnlJZE9iakZuO1xuICAgICAgICAgICAgLy8gaWYgb2JqZWN0LCBleHRyYWN0IGtleXMsIGluIGVudW1lcmF0aW9uIG9yZGVyLCB1bnNvcnRlZFxuICAgICAgICAgICAgY29sbGVjdGlvbktleXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGl0ZW1LZXkgaW4gY29sbGVjdGlvbikge1xuICAgICAgICAgICAgICBpZiAoY29sbGVjdGlvbi5oYXNPd25Qcm9wZXJ0eShpdGVtS2V5KSAmJiBpdGVtS2V5LmNoYXJBdCgwKSAhPT0gJyQnKSB7XG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbktleXMucHVzaChpdGVtS2V5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbGxlY3Rpb25MZW5ndGggPSBjb2xsZWN0aW9uS2V5cy5sZW5ndGg7XG4gICAgICAgICAgbmV4dEJsb2NrT3JkZXIgPSBuZXcgQXJyYXkoY29sbGVjdGlvbkxlbmd0aCk7XG5cbiAgICAgICAgICAvLyBsb2NhdGUgZXhpc3RpbmcgaXRlbXNcbiAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb2xsZWN0aW9uTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBrZXkgPSAoY29sbGVjdGlvbiA9PT0gY29sbGVjdGlvbktleXMpID8gaW5kZXggOiBjb2xsZWN0aW9uS2V5c1tpbmRleF07XG4gICAgICAgICAgICB2YWx1ZSA9IGNvbGxlY3Rpb25ba2V5XTtcbiAgICAgICAgICAgIHRyYWNrQnlJZCA9IHRyYWNrQnlJZEZuKGtleSwgdmFsdWUsIGluZGV4KTtcbiAgICAgICAgICAgIGlmIChsYXN0QmxvY2tNYXBbdHJhY2tCeUlkXSkge1xuICAgICAgICAgICAgICAvLyBmb3VuZCBwcmV2aW91c2x5IHNlZW4gYmxvY2tcbiAgICAgICAgICAgICAgYmxvY2sgPSBsYXN0QmxvY2tNYXBbdHJhY2tCeUlkXTtcbiAgICAgICAgICAgICAgZGVsZXRlIGxhc3RCbG9ja01hcFt0cmFja0J5SWRdO1xuICAgICAgICAgICAgICBuZXh0QmxvY2tNYXBbdHJhY2tCeUlkXSA9IGJsb2NrO1xuICAgICAgICAgICAgICBuZXh0QmxvY2tPcmRlcltpbmRleF0gPSBibG9jaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobmV4dEJsb2NrTWFwW3RyYWNrQnlJZF0pIHtcbiAgICAgICAgICAgICAgLy8gaWYgY29sbGlzaW9uIGRldGVjdGVkLiByZXN0b3JlIGxhc3RCbG9ja01hcCBhbmQgdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgICAgICAgZm9yRWFjaChuZXh0QmxvY2tPcmRlciwgZnVuY3Rpb24oYmxvY2spIHtcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2sgJiYgYmxvY2suc2NvcGUpIGxhc3RCbG9ja01hcFtibG9jay5pZF0gPSBibG9jaztcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdkdXBlcycsXG4gICAgICAgICAgICAgICAgICBcIkR1cGxpY2F0ZXMgaW4gYSByZXBlYXRlciBhcmUgbm90IGFsbG93ZWQuIFVzZSAndHJhY2sgYnknIGV4cHJlc3Npb24gdG8gc3BlY2lmeSB1bmlxdWUga2V5cy4gUmVwZWF0ZXI6IHswfSwgRHVwbGljYXRlIGtleTogezF9LCBEdXBsaWNhdGUgdmFsdWU6IHsyfVwiLFxuICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbiwgdHJhY2tCeUlkLCB2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBuZXcgbmV2ZXIgYmVmb3JlIHNlZW4gYmxvY2tcbiAgICAgICAgICAgICAgbmV4dEJsb2NrT3JkZXJbaW5kZXhdID0ge2lkOiB0cmFja0J5SWQsIHNjb3BlOiB1bmRlZmluZWQsIGNsb25lOiB1bmRlZmluZWR9O1xuICAgICAgICAgICAgICBuZXh0QmxvY2tNYXBbdHJhY2tCeUlkXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gcmVtb3ZlIGxlZnRvdmVyIGl0ZW1zXG4gICAgICAgICAgZm9yICh2YXIgYmxvY2tLZXkgaW4gbGFzdEJsb2NrTWFwKSB7XG4gICAgICAgICAgICBibG9jayA9IGxhc3RCbG9ja01hcFtibG9ja0tleV07XG4gICAgICAgICAgICBlbGVtZW50c1RvUmVtb3ZlID0gZ2V0QmxvY2tOb2RlcyhibG9jay5jbG9uZSk7XG4gICAgICAgICAgICAkYW5pbWF0ZS5sZWF2ZShlbGVtZW50c1RvUmVtb3ZlKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50c1RvUmVtb3ZlWzBdLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgLy8gaWYgdGhlIGVsZW1lbnQgd2FzIG5vdCByZW1vdmVkIHlldCBiZWNhdXNlIG9mIHBlbmRpbmcgYW5pbWF0aW9uLCBtYXJrIGl0IGFzIGRlbGV0ZWRcbiAgICAgICAgICAgICAgLy8gc28gdGhhdCB3ZSBjYW4gaWdub3JlIGl0IGxhdGVyXG4gICAgICAgICAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBlbGVtZW50c1RvUmVtb3ZlLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50c1RvUmVtb3ZlW2luZGV4XVtOR19SRU1PVkVEXSA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJsb2NrLnNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gd2UgYXJlIG5vdCB1c2luZyBmb3JFYWNoIGZvciBwZXJmIHJlYXNvbnMgKHRyeWluZyB0byBhdm9pZCAjY2FsbClcbiAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb2xsZWN0aW9uTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBrZXkgPSAoY29sbGVjdGlvbiA9PT0gY29sbGVjdGlvbktleXMpID8gaW5kZXggOiBjb2xsZWN0aW9uS2V5c1tpbmRleF07XG4gICAgICAgICAgICB2YWx1ZSA9IGNvbGxlY3Rpb25ba2V5XTtcbiAgICAgICAgICAgIGJsb2NrID0gbmV4dEJsb2NrT3JkZXJbaW5kZXhdO1xuXG4gICAgICAgICAgICBpZiAoYmxvY2suc2NvcGUpIHtcbiAgICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBhbHJlYWR5IHNlZW4gdGhpcyBvYmplY3QsIHRoZW4gd2UgbmVlZCB0byByZXVzZSB0aGVcbiAgICAgICAgICAgICAgLy8gYXNzb2NpYXRlZCBzY29wZS9lbGVtZW50XG5cbiAgICAgICAgICAgICAgbmV4dE5vZGUgPSBwcmV2aW91c05vZGU7XG5cbiAgICAgICAgICAgICAgLy8gc2tpcCBub2RlcyB0aGF0IGFyZSBhbHJlYWR5IHBlbmRpbmcgcmVtb3ZhbCB2aWEgbGVhdmUgYW5pbWF0aW9uXG4gICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICB9IHdoaWxlIChuZXh0Tm9kZSAmJiBuZXh0Tm9kZVtOR19SRU1PVkVEXSk7XG5cbiAgICAgICAgICAgICAgaWYgKGdldEJsb2NrU3RhcnQoYmxvY2spICE9IG5leHROb2RlKSB7XG4gICAgICAgICAgICAgICAgLy8gZXhpc3RpbmcgaXRlbSB3aGljaCBnb3QgbW92ZWRcbiAgICAgICAgICAgICAgICAkYW5pbWF0ZS5tb3ZlKGdldEJsb2NrTm9kZXMoYmxvY2suY2xvbmUpLCBudWxsLCBqcUxpdGUocHJldmlvdXNOb2RlKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcHJldmlvdXNOb2RlID0gZ2V0QmxvY2tFbmQoYmxvY2spO1xuICAgICAgICAgICAgICB1cGRhdGVTY29wZShibG9jay5zY29wZSwgaW5kZXgsIHZhbHVlSWRlbnRpZmllciwgdmFsdWUsIGtleUlkZW50aWZpZXIsIGtleSwgY29sbGVjdGlvbkxlbmd0aCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBuZXcgaXRlbSB3aGljaCB3ZSBkb24ndCBrbm93IGFib3V0XG4gICAgICAgICAgICAgICR0cmFuc2NsdWRlKGZ1bmN0aW9uIG5nUmVwZWF0VHJhbnNjbHVkZShjbG9uZSwgc2NvcGUpIHtcbiAgICAgICAgICAgICAgICBibG9jay5zY29wZSA9IHNjb3BlO1xuICAgICAgICAgICAgICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2Nsb25lLXZzLWNyZWF0ZWNvbW1lbnRcbiAgICAgICAgICAgICAgICB2YXIgZW5kTm9kZSA9IG5nUmVwZWF0RW5kQ29tbWVudC5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIGNsb25lW2Nsb25lLmxlbmd0aCsrXSA9IGVuZE5vZGU7XG5cbiAgICAgICAgICAgICAgICAvLyBUT0RPKHBlcmYpOiBzdXBwb3J0IG5ha2VkIHByZXZpb3VzTm9kZSBpbiBgZW50ZXJgIHRvIGF2b2lkIGNyZWF0aW9uIG9mIGpxTGl0ZSB3cmFwcGVyP1xuICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCBudWxsLCBqcUxpdGUocHJldmlvdXNOb2RlKSk7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNOb2RlID0gZW5kTm9kZTtcbiAgICAgICAgICAgICAgICAvLyBOb3RlOiBXZSBvbmx5IG5lZWQgdGhlIGZpcnN0L2xhc3Qgbm9kZSBvZiB0aGUgY2xvbmVkIG5vZGVzLlxuICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHdlIG5lZWQgdG8ga2VlcCB0aGUgcmVmZXJlbmNlIHRvIHRoZSBqcWxpdGUgd3JhcHBlciBhcyBpdCBtaWdodCBiZSBjaGFuZ2VkIGxhdGVyXG4gICAgICAgICAgICAgICAgLy8gYnkgYSBkaXJlY3RpdmUgd2l0aCB0ZW1wbGF0ZVVybCB3aGVuIGl0cyB0ZW1wbGF0ZSBhcnJpdmVzLlxuICAgICAgICAgICAgICAgIGJsb2NrLmNsb25lID0gY2xvbmU7XG4gICAgICAgICAgICAgICAgbmV4dEJsb2NrTWFwW2Jsb2NrLmlkXSA9IGJsb2NrO1xuICAgICAgICAgICAgICAgIHVwZGF0ZVNjb3BlKGJsb2NrLnNjb3BlLCBpbmRleCwgdmFsdWVJZGVudGlmaWVyLCB2YWx1ZSwga2V5SWRlbnRpZmllciwga2V5LCBjb2xsZWN0aW9uTGVuZ3RoKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGxhc3RCbG9ja01hcCA9IG5leHRCbG9ja01hcDtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dO1xuXG52YXIgTkdfSElERV9DTEFTUyA9ICduZy1oaWRlJztcbnZhciBOR19ISURFX0lOX1BST0dSRVNTX0NMQVNTID0gJ25nLWhpZGUtYW5pbWF0ZSc7XG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU2hvd1xuICogQG11bHRpRWxlbWVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ1Nob3dgIGRpcmVjdGl2ZSBzaG93cyBvciBoaWRlcyB0aGUgZ2l2ZW4gSFRNTCBlbGVtZW50IGJhc2VkIG9uIHRoZSBleHByZXNzaW9uXG4gKiBwcm92aWRlZCB0byB0aGUgYG5nU2hvd2AgYXR0cmlidXRlLiBUaGUgZWxlbWVudCBpcyBzaG93biBvciBoaWRkZW4gYnkgcmVtb3Zpbmcgb3IgYWRkaW5nXG4gKiB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3Mgb250byB0aGUgZWxlbWVudC4gVGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIHByZWRlZmluZWRcbiAqIGluIEFuZ3VsYXJKUyBhbmQgc2V0cyB0aGUgZGlzcGxheSBzdHlsZSB0byBub25lICh1c2luZyBhbiAhaW1wb3J0YW50IGZsYWcpLlxuICogRm9yIENTUCBtb2RlIHBsZWFzZSBhZGQgYGFuZ3VsYXItY3NwLmNzc2AgdG8geW91ciBodG1sIGZpbGUgKHNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ3NwIG5nQ3NwfSkuXG4gKlxuICogYGBgaHRtbFxuICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIHRydXRoeSAoZWxlbWVudCBpcyB2aXNpYmxlKSAtLT5cbiAqIDxkaXYgbmctc2hvdz1cIm15VmFsdWVcIj48L2Rpdj5cbiAqXG4gKiA8IS0tIHdoZW4gJHNjb3BlLm15VmFsdWUgaXMgZmFsc3kgKGVsZW1lbnQgaXMgaGlkZGVuKSAtLT5cbiAqIDxkaXYgbmctc2hvdz1cIm15VmFsdWVcIiBjbGFzcz1cIm5nLWhpZGVcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGBuZ1Nob3dgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgZmFsc3kgdmFsdWUgdGhlbiB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgYWRkZWQgdG8gdGhlIGNsYXNzXG4gKiBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgY2F1c2luZyBpdCB0byBiZWNvbWUgaGlkZGVuLiBXaGVuIHRydXRoeSwgdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIHJlbW92ZWRcbiAqIGZyb20gdGhlIGVsZW1lbnQgY2F1c2luZyB0aGUgZWxlbWVudCBub3QgdG8gYXBwZWFyIGhpZGRlbi5cbiAqXG4gKiAjIyBXaHkgaXMgIWltcG9ydGFudCB1c2VkP1xuICpcbiAqIFlvdSBtYXkgYmUgd29uZGVyaW5nIHdoeSAhaW1wb3J0YW50IGlzIHVzZWQgZm9yIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcy4gVGhpcyBpcyBiZWNhdXNlIHRoZSBgLm5nLWhpZGVgIHNlbGVjdG9yXG4gKiBjYW4gYmUgZWFzaWx5IG92ZXJyaWRkZW4gYnkgaGVhdmllciBzZWxlY3RvcnMuIEZvciBleGFtcGxlLCBzb21ldGhpbmcgYXMgc2ltcGxlXG4gKiBhcyBjaGFuZ2luZyB0aGUgZGlzcGxheSBzdHlsZSBvbiBhIEhUTUwgbGlzdCBpdGVtIHdvdWxkIG1ha2UgaGlkZGVuIGVsZW1lbnRzIGFwcGVhciB2aXNpYmxlLlxuICogVGhpcyBhbHNvIGJlY29tZXMgYSBiaWdnZXIgaXNzdWUgd2hlbiBkZWFsaW5nIHdpdGggQ1NTIGZyYW1ld29ya3MuXG4gKlxuICogQnkgdXNpbmcgIWltcG9ydGFudCwgdGhlIHNob3cgYW5kIGhpZGUgYmVoYXZpb3Igd2lsbCB3b3JrIGFzIGV4cGVjdGVkIGRlc3BpdGUgYW55IGNsYXNoIGJldHdlZW4gQ1NTIHNlbGVjdG9yXG4gKiBzcGVjaWZpY2l0eSAod2hlbiAhaW1wb3J0YW50IGlzbid0IHVzZWQgd2l0aCBhbnkgY29uZmxpY3Rpbmcgc3R5bGVzKS4gSWYgYSBkZXZlbG9wZXIgY2hvb3NlcyB0byBvdmVycmlkZSB0aGVcbiAqIHN0eWxpbmcgdG8gY2hhbmdlIGhvdyB0byBoaWRlIGFuIGVsZW1lbnQgdGhlbiBpdCBpcyBqdXN0IGEgbWF0dGVyIG9mIHVzaW5nICFpbXBvcnRhbnQgaW4gdGhlaXIgb3duIENTUyBjb2RlLlxuICpcbiAqICMjIyBPdmVycmlkaW5nIGAubmctaGlkZWBcbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGUgYC5uZy1oaWRlYCBjbGFzcyB3aWxsIHN0eWxlIHRoZSBlbGVtZW50IHdpdGggYGRpc3BsYXk6IG5vbmUhaW1wb3J0YW50YC4gSWYgeW91IHdpc2ggdG8gY2hhbmdlXG4gKiB0aGUgaGlkZSBiZWhhdmlvciB3aXRoIG5nU2hvdy9uZ0hpZGUgdGhlbiB0aGlzIGNhbiBiZSBhY2hpZXZlZCBieSByZXN0YXRpbmcgdGhlIHN0eWxlcyBmb3IgdGhlIGAubmctaGlkZWBcbiAqIGNsYXNzIENTUy4gTm90ZSB0aGF0IHRoZSBzZWxlY3RvciB0aGF0IG5lZWRzIHRvIGJlIHVzZWQgaXMgYWN0dWFsbHkgYC5uZy1oaWRlOm5vdCgubmctaGlkZS1hbmltYXRlKWAgdG8gY29wZVxuICogd2l0aCBleHRyYSBhbmltYXRpb24gY2xhc3NlcyB0aGF0IGNhbiBiZSBhZGRlZC5cbiAqXG4gKiBgYGBjc3NcbiAqIC5uZy1oaWRlOm5vdCgubmctaGlkZS1hbmltYXRlKSB7XG4gKiAgIC8mIzQyOyB0aGlzIGlzIGp1c3QgYW5vdGhlciBmb3JtIG9mIGhpZGluZyBhbiBlbGVtZW50ICYjNDI7L1xuICogICBkaXNwbGF5OiBibG9jayFpbXBvcnRhbnQ7XG4gKiAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAqICAgdG9wOiAtOTk5OXB4O1xuICogICBsZWZ0OiAtOTk5OXB4O1xuICogfVxuICogYGBgXG4gKlxuICogQnkgZGVmYXVsdCB5b3UgZG9uJ3QgbmVlZCB0byBvdmVycmlkZSBpbiBDU1MgYW55dGhpbmcgYW5kIHRoZSBhbmltYXRpb25zIHdpbGwgd29yayBhcm91bmQgdGhlIGRpc3BsYXkgc3R5bGUuXG4gKlxuICogIyMgQSBub3RlIGFib3V0IGFuaW1hdGlvbnMgd2l0aCBgbmdTaG93YFxuICpcbiAqIEFuaW1hdGlvbnMgaW4gbmdTaG93L25nSGlkZSB3b3JrIHdpdGggdGhlIHNob3cgYW5kIGhpZGUgZXZlbnRzIHRoYXQgYXJlIHRyaWdnZXJlZCB3aGVuIHRoZSBkaXJlY3RpdmUgZXhwcmVzc2lvblxuICogaXMgdHJ1ZSBhbmQgZmFsc2UuIFRoaXMgc3lzdGVtIHdvcmtzIGxpa2UgdGhlIGFuaW1hdGlvbiBzeXN0ZW0gcHJlc2VudCB3aXRoIG5nQ2xhc3MgZXhjZXB0IHRoYXRcbiAqIHlvdSBtdXN0IGFsc28gaW5jbHVkZSB0aGUgIWltcG9ydGFudCBmbGFnIHRvIG92ZXJyaWRlIHRoZSBkaXNwbGF5IHByb3BlcnR5XG4gKiBzbyB0aGF0IHlvdSBjYW4gcGVyZm9ybSBhbiBhbmltYXRpb24gd2hlbiB0aGUgZWxlbWVudCBpcyBoaWRkZW4gZHVyaW5nIHRoZSB0aW1lIG9mIHRoZSBhbmltYXRpb24uXG4gKlxuICogYGBgY3NzXG4gKiAvL1xuICogLy9hIHdvcmtpbmcgZXhhbXBsZSBjYW4gYmUgZm91bmQgYXQgdGhlIGJvdHRvbSBvZiB0aGlzIHBhZ2VcbiAqIC8vXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZCwgLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUge1xuICogICAvJiM0MjsgdGhpcyBpcyByZXF1aXJlZCBhcyBvZiAxLjN4IHRvIHByb3Blcmx5XG4gKiAgICAgIGFwcGx5IGFsbCBzdHlsaW5nIGluIGEgc2hvdy9oaWRlIGFuaW1hdGlvbiAmIzQyOy9cbiAqICAgdHJhbnNpdGlvbjogMHMgbGluZWFyIGFsbDtcbiAqIH1cbiAqXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZC1hY3RpdmUsXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZS1hY3RpdmUge1xuICogICAvJiM0MjsgdGhlIHRyYW5zaXRpb24gaXMgZGVmaW5lZCBpbiB0aGUgYWN0aXZlIGNsYXNzICYjNDI7L1xuICogICB0cmFuc2l0aW9uOiAxcyBsaW5lYXIgYWxsO1xuICogfVxuICpcbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkLm5nLWhpZGUtYWRkLWFjdGl2ZSB7IC4uLiB9XG4gKiAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZSB7IC4uLiB9XG4gKiAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZS5uZy1oaWRlLXJlbW92ZS1hY3RpdmUgeyAuLi4gfVxuICogYGBgXG4gKlxuICogS2VlcCBpbiBtaW5kIHRoYXQsIGFzIG9mIEFuZ3VsYXJKUyB2ZXJzaW9uIDEuMy4wLWJldGEuMTEsIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2hhbmdlIHRoZSBkaXNwbGF5XG4gKiBwcm9wZXJ0eSB0byBibG9jayBkdXJpbmcgYW5pbWF0aW9uIHN0YXRlcy0tbmdBbmltYXRlIHdpbGwgaGFuZGxlIHRoZSBzdHlsZSB0b2dnbGluZyBhdXRvbWF0aWNhbGx5IGZvciB5b3UuXG4gKlxuICogQGFuaW1hdGlvbnNcbiAqIGFkZENsYXNzOiBgLm5nLWhpZGVgIC0gaGFwcGVucyBhZnRlciB0aGUgYG5nU2hvd2AgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSB0cnV0aHkgdmFsdWUgYW5kIHRoZSBqdXN0IGJlZm9yZSBjb250ZW50cyBhcmUgc2V0IHRvIHZpc2libGVcbiAqIHJlbW92ZUNsYXNzOiBgLm5nLWhpZGVgIC0gaGFwcGVucyBhZnRlciB0aGUgYG5nU2hvd2AgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBub24gdHJ1dGh5IHZhbHVlIGFuZCBqdXN0IGJlZm9yZSB0aGUgY29udGVudHMgYXJlIHNldCB0byBoaWRkZW5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdTaG93IElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHlcbiAqICAgICB0aGVuIHRoZSBlbGVtZW50IGlzIHNob3duIG9yIGhpZGRlbiByZXNwZWN0aXZlbHkuXG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIENsaWNrIG1lOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCIgYXJpYS1sYWJlbD1cIlRvZ2dsZSBuZ0hpZGVcIj48YnIvPlxuICAgICAgPGRpdj5cbiAgICAgICAgU2hvdzpcbiAgICAgICAgPGRpdiBjbGFzcz1cImNoZWNrLWVsZW1lbnQgYW5pbWF0ZS1zaG93XCIgbmctc2hvdz1cImNoZWNrZWRcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tdGh1bWJzLXVwXCI+PC9zcGFuPiBJIHNob3cgdXAgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICBIaWRlOlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlY2stZWxlbWVudCBhbmltYXRlLXNob3dcIiBuZy1oaWRlPVwiY2hlY2tlZFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10aHVtYnMtZG93blwiPjwvc3Bhbj4gSSBoaWRlIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiZ2x5cGhpY29ucy5jc3NcIj5cbiAgICAgIEBpbXBvcnQgdXJsKC4uLy4uL2NvbXBvbmVudHMvYm9vdHN0cmFwLTMuMS4xL2Nzcy9ib290c3RyYXAuY3NzKTtcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICAuYW5pbWF0ZS1zaG93IHtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtc2hvdy5uZy1oaWRlLWFkZC5uZy1oaWRlLWFkZC1hY3RpdmUsXG4gICAgICAuYW5pbWF0ZS1zaG93Lm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7XG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsIGxpbmVhciAwLjVzO1xuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgbGluZWFyIDAuNXM7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXNob3cubmctaGlkZSB7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAwO1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICBwYWRkaW5nOiAwIDEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5jaGVjay1lbGVtZW50IHtcbiAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgfVxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgdGh1bWJzVXAgPSBlbGVtZW50KGJ5LmNzcygnc3Bhbi5nbHlwaGljb24tdGh1bWJzLXVwJykpO1xuICAgICAgdmFyIHRodW1ic0Rvd24gPSBlbGVtZW50KGJ5LmNzcygnc3Bhbi5nbHlwaGljb24tdGh1bWJzLWRvd24nKSk7XG5cbiAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc2hvdyAvIG5nLWhpZGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KHRodW1ic1VwLmlzRGlzcGxheWVkKCkpLnRvQmVGYWxzeSgpO1xuICAgICAgICBleHBlY3QodGh1bWJzRG93bi5pc0Rpc3BsYXllZCgpKS50b0JlVHJ1dGh5KCk7XG5cbiAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKS5jbGljaygpO1xuXG4gICAgICAgIGV4cGVjdCh0aHVtYnNVcC5pc0Rpc3BsYXllZCgpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdCh0aHVtYnNEb3duLmlzRGlzcGxheWVkKCkpLnRvQmVGYWxzeSgpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1Nob3dEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdTaG93LCBmdW5jdGlvbiBuZ1Nob3dXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAvLyB3ZSdyZSBhZGRpbmcgYSB0ZW1wb3JhcnksIGFuaW1hdGlvbi1zcGVjaWZpYyBjbGFzcyBmb3IgbmctaGlkZSBzaW5jZSB0aGlzIHdheVxuICAgICAgICAvLyB3ZSBjYW4gY29udHJvbCB3aGVuIHRoZSBlbGVtZW50IGlzIGFjdHVhbGx5IGRpc3BsYXllZCBvbiBzY3JlZW4gd2l0aG91dCBoYXZpbmdcbiAgICAgICAgLy8gdG8gaGF2ZSBhIGdsb2JhbC9ncmVlZHkgQ1NTIHNlbGVjdG9yIHRoYXQgYnJlYWtzIHdoZW4gb3RoZXIgYW5pbWF0aW9ucyBhcmUgcnVuLlxuICAgICAgICAvLyBSZWFkOiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy85MTAzI2lzc3VlY29tbWVudC01ODMzNTg0NVxuICAgICAgICAkYW5pbWF0ZVt2YWx1ZSA/ICdyZW1vdmVDbGFzcycgOiAnYWRkQ2xhc3MnXShlbGVtZW50LCBOR19ISURFX0NMQVNTLCB7XG4gICAgICAgICAgdGVtcENsYXNzZXM6IE5HX0hJREVfSU5fUFJPR1JFU1NfQ0xBU1NcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nSGlkZVxuICogQG11bHRpRWxlbWVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0hpZGVgIGRpcmVjdGl2ZSBzaG93cyBvciBoaWRlcyB0aGUgZ2l2ZW4gSFRNTCBlbGVtZW50IGJhc2VkIG9uIHRoZSBleHByZXNzaW9uXG4gKiBwcm92aWRlZCB0byB0aGUgYG5nSGlkZWAgYXR0cmlidXRlLiBUaGUgZWxlbWVudCBpcyBzaG93biBvciBoaWRkZW4gYnkgcmVtb3Zpbmcgb3IgYWRkaW5nXG4gKiB0aGUgYG5nLWhpZGVgIENTUyBjbGFzcyBvbnRvIHRoZSBlbGVtZW50LiBUaGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgcHJlZGVmaW5lZFxuICogaW4gQW5ndWxhckpTIGFuZCBzZXRzIHRoZSBkaXNwbGF5IHN0eWxlIHRvIG5vbmUgKHVzaW5nIGFuICFpbXBvcnRhbnQgZmxhZykuXG4gKiBGb3IgQ1NQIG1vZGUgcGxlYXNlIGFkZCBgYW5ndWxhci1jc3AuY3NzYCB0byB5b3VyIGh0bWwgZmlsZSAoc2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDc3AgbmdDc3B9KS5cbiAqXG4gKiBgYGBodG1sXG4gKiA8IS0tIHdoZW4gJHNjb3BlLm15VmFsdWUgaXMgdHJ1dGh5IChlbGVtZW50IGlzIGhpZGRlbikgLS0+XG4gKiA8ZGl2IG5nLWhpZGU9XCJteVZhbHVlXCIgY2xhc3M9XCJuZy1oaWRlXCI+PC9kaXY+XG4gKlxuICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIGZhbHN5IChlbGVtZW50IGlzIHZpc2libGUpIC0tPlxuICogPGRpdiBuZy1oaWRlPVwibXlWYWx1ZVwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYG5nSGlkZWAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSB0cnV0aHkgdmFsdWUgdGhlbiB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgYWRkZWQgdG8gdGhlIGNsYXNzXG4gKiBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgY2F1c2luZyBpdCB0byBiZWNvbWUgaGlkZGVuLiBXaGVuIGZhbHN5LCB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgcmVtb3ZlZFxuICogZnJvbSB0aGUgZWxlbWVudCBjYXVzaW5nIHRoZSBlbGVtZW50IG5vdCB0byBhcHBlYXIgaGlkZGVuLlxuICpcbiAqICMjIFdoeSBpcyAhaW1wb3J0YW50IHVzZWQ/XG4gKlxuICogWW91IG1heSBiZSB3b25kZXJpbmcgd2h5ICFpbXBvcnRhbnQgaXMgdXNlZCBmb3IgdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzLiBUaGlzIGlzIGJlY2F1c2UgdGhlIGAubmctaGlkZWAgc2VsZWN0b3JcbiAqIGNhbiBiZSBlYXNpbHkgb3ZlcnJpZGRlbiBieSBoZWF2aWVyIHNlbGVjdG9ycy4gRm9yIGV4YW1wbGUsIHNvbWV0aGluZyBhcyBzaW1wbGVcbiAqIGFzIGNoYW5naW5nIHRoZSBkaXNwbGF5IHN0eWxlIG9uIGEgSFRNTCBsaXN0IGl0ZW0gd291bGQgbWFrZSBoaWRkZW4gZWxlbWVudHMgYXBwZWFyIHZpc2libGUuXG4gKiBUaGlzIGFsc28gYmVjb21lcyBhIGJpZ2dlciBpc3N1ZSB3aGVuIGRlYWxpbmcgd2l0aCBDU1MgZnJhbWV3b3Jrcy5cbiAqXG4gKiBCeSB1c2luZyAhaW1wb3J0YW50LCB0aGUgc2hvdyBhbmQgaGlkZSBiZWhhdmlvciB3aWxsIHdvcmsgYXMgZXhwZWN0ZWQgZGVzcGl0ZSBhbnkgY2xhc2ggYmV0d2VlbiBDU1Mgc2VsZWN0b3JcbiAqIHNwZWNpZmljaXR5ICh3aGVuICFpbXBvcnRhbnQgaXNuJ3QgdXNlZCB3aXRoIGFueSBjb25mbGljdGluZyBzdHlsZXMpLiBJZiBhIGRldmVsb3BlciBjaG9vc2VzIHRvIG92ZXJyaWRlIHRoZVxuICogc3R5bGluZyB0byBjaGFuZ2UgaG93IHRvIGhpZGUgYW4gZWxlbWVudCB0aGVuIGl0IGlzIGp1c3QgYSBtYXR0ZXIgb2YgdXNpbmcgIWltcG9ydGFudCBpbiB0aGVpciBvd24gQ1NTIGNvZGUuXG4gKlxuICogIyMjIE92ZXJyaWRpbmcgYC5uZy1oaWRlYFxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoZSBgLm5nLWhpZGVgIGNsYXNzIHdpbGwgc3R5bGUgdGhlIGVsZW1lbnQgd2l0aCBgZGlzcGxheTogbm9uZSFpbXBvcnRhbnRgLiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2VcbiAqIHRoZSBoaWRlIGJlaGF2aW9yIHdpdGggbmdTaG93L25nSGlkZSB0aGVuIHRoaXMgY2FuIGJlIGFjaGlldmVkIGJ5IHJlc3RhdGluZyB0aGUgc3R5bGVzIGZvciB0aGUgYC5uZy1oaWRlYFxuICogY2xhc3MgaW4gQ1NTOlxuICpcbiAqIGBgYGNzc1xuICogLm5nLWhpZGUge1xuICogICAvJiM0MjsgdGhpcyBpcyBqdXN0IGFub3RoZXIgZm9ybSBvZiBoaWRpbmcgYW4gZWxlbWVudCAmIzQyOy9cbiAqICAgZGlzcGxheTogYmxvY2shaW1wb3J0YW50O1xuICogICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gKiAgIHRvcDogLTk5OTlweDtcbiAqICAgbGVmdDogLTk5OTlweDtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEJ5IGRlZmF1bHQgeW91IGRvbid0IG5lZWQgdG8gb3ZlcnJpZGUgaW4gQ1NTIGFueXRoaW5nIGFuZCB0aGUgYW5pbWF0aW9ucyB3aWxsIHdvcmsgYXJvdW5kIHRoZSBkaXNwbGF5IHN0eWxlLlxuICpcbiAqICMjIEEgbm90ZSBhYm91dCBhbmltYXRpb25zIHdpdGggYG5nSGlkZWBcbiAqXG4gKiBBbmltYXRpb25zIGluIG5nU2hvdy9uZ0hpZGUgd29yayB3aXRoIHRoZSBzaG93IGFuZCBoaWRlIGV2ZW50cyB0aGF0IGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGUgZGlyZWN0aXZlIGV4cHJlc3Npb25cbiAqIGlzIHRydWUgYW5kIGZhbHNlLiBUaGlzIHN5c3RlbSB3b3JrcyBsaWtlIHRoZSBhbmltYXRpb24gc3lzdGVtIHByZXNlbnQgd2l0aCBuZ0NsYXNzLCBleGNlcHQgdGhhdCB0aGUgYC5uZy1oaWRlYFxuICogQ1NTIGNsYXNzIGlzIGFkZGVkIGFuZCByZW1vdmVkIGZvciB5b3UgaW5zdGVhZCBvZiB5b3VyIG93biBDU1MgY2xhc3MuXG4gKlxuICogYGBgY3NzXG4gKiAvL1xuICogLy9hIHdvcmtpbmcgZXhhbXBsZSBjYW4gYmUgZm91bmQgYXQgdGhlIGJvdHRvbSBvZiB0aGlzIHBhZ2VcbiAqIC8vXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZCwgLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUge1xuICogICB0cmFuc2l0aW9uOiAwLjVzIGxpbmVhciBhbGw7XG4gKiB9XG4gKlxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQubmctaGlkZS1hZGQtYWN0aXZlIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7IC4uLiB9XG4gKiBgYGBcbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCwgYXMgb2YgQW5ndWxhckpTIHZlcnNpb24gMS4zLjAtYmV0YS4xMSwgdGhlcmUgaXMgbm8gbmVlZCB0byBjaGFuZ2UgdGhlIGRpc3BsYXlcbiAqIHByb3BlcnR5IHRvIGJsb2NrIGR1cmluZyBhbmltYXRpb24gc3RhdGVzLS1uZ0FuaW1hdGUgd2lsbCBoYW5kbGUgdGhlIHN0eWxlIHRvZ2dsaW5nIGF1dG9tYXRpY2FsbHkgZm9yIHlvdS5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogcmVtb3ZlQ2xhc3M6IGAubmctaGlkZWAgLSBoYXBwZW5zIGFmdGVyIHRoZSBgbmdIaWRlYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHRydXRoeSB2YWx1ZSBhbmQganVzdCBiZWZvcmUgdGhlIGNvbnRlbnRzIGFyZSBzZXQgdG8gaGlkZGVuXG4gKiBhZGRDbGFzczogYC5uZy1oaWRlYCAtIGhhcHBlbnMgYWZ0ZXIgdGhlIGBuZ0hpZGVgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgbm9uIHRydXRoeSB2YWx1ZSBhbmQganVzdCBiZWZvcmUgdGhlIGNvbnRlbnRzIGFyZSBzZXQgdG8gdmlzaWJsZVxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0hpZGUgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSB0aGVuXG4gKiAgICAgdGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIHJlc3BlY3RpdmVseS5cbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgQ2xpY2sgbWU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIiBhcmlhLWxhYmVsPVwiVG9nZ2xlIG5nU2hvd1wiPjxici8+XG4gICAgICA8ZGl2PlxuICAgICAgICBTaG93OlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlY2stZWxlbWVudCBhbmltYXRlLWhpZGVcIiBuZy1zaG93PVwiY2hlY2tlZFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10aHVtYnMtdXBcIj48L3NwYW4+IEkgc2hvdyB1cCB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIEhpZGU6XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjaGVjay1lbGVtZW50IGFuaW1hdGUtaGlkZVwiIG5nLWhpZGU9XCJjaGVja2VkXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRodW1icy1kb3duXCI+PC9zcGFuPiBJIGhpZGUgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJnbHlwaGljb25zLmNzc1wiPlxuICAgICAgQGltcG9ydCB1cmwoLi4vLi4vY29tcG9uZW50cy9ib290c3RyYXAtMy4xLjEvY3NzL2Jvb3RzdHJhcC5jc3MpO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5hbmltYXRlLWhpZGUge1xuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IGFsbCBsaW5lYXIgMC41cztcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIGxpbmVhciAwLjVzO1xuICAgICAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1oaWRlLm5nLWhpZGUge1xuICAgICAgICBsaW5lLWhlaWdodDogMDtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgcGFkZGluZzogMCAxMHB4O1xuICAgICAgfVxuXG4gICAgICAuY2hlY2stZWxlbWVudCB7XG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHRodW1ic1VwID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZ2x5cGhpY29uLXRodW1icy11cCcpKTtcbiAgICAgIHZhciB0aHVtYnNEb3duID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZ2x5cGhpY29uLXRodW1icy1kb3duJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXNob3cgLyBuZy1oaWRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh0aHVtYnNVcC5pc0Rpc3BsYXllZCgpKS50b0JlRmFsc3koKTtcbiAgICAgICAgZXhwZWN0KHRodW1ic0Rvd24uaXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpO1xuXG4gICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSkuY2xpY2soKTtcblxuICAgICAgICBleHBlY3QodGh1bWJzVXAuaXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QodGh1bWJzRG93bi5pc0Rpc3BsYXllZCgpKS50b0JlRmFsc3koKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgbmdIaWRlRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nSGlkZSwgZnVuY3Rpb24gbmdIaWRlV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgLy8gVGhlIGNvbW1lbnQgaW5zaWRlIG9mIHRoZSBuZ1Nob3dEaXJlY3RpdmUgZXhwbGFpbnMgd2h5IHdlIGFkZCBhbmRcbiAgICAgICAgLy8gcmVtb3ZlIGEgdGVtcG9yYXJ5IGNsYXNzIGZvciB0aGUgc2hvdy9oaWRlIGFuaW1hdGlvblxuICAgICAgICAkYW5pbWF0ZVt2YWx1ZSA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShlbGVtZW50LE5HX0hJREVfQ0xBU1MsIHtcbiAgICAgICAgICB0ZW1wQ2xhc3NlczogTkdfSElERV9JTl9QUk9HUkVTU19DTEFTU1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU3R5bGVcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ1N0eWxlYCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzZXQgQ1NTIHN0eWxlIG9uIGFuIEhUTUwgZWxlbWVudCBjb25kaXRpb25hbGx5LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1N0eWxlXG4gKlxuICoge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gd2hpY2ggZXZhbHMgdG8gYW5cbiAqIG9iamVjdCB3aG9zZSBrZXlzIGFyZSBDU1Mgc3R5bGUgbmFtZXMgYW5kIHZhbHVlcyBhcmUgY29ycmVzcG9uZGluZyB2YWx1ZXMgZm9yIHRob3NlIENTU1xuICoga2V5cy5cbiAqXG4gKiBTaW5jZSBzb21lIENTUyBzdHlsZSBuYW1lcyBhcmUgbm90IHZhbGlkIGtleXMgZm9yIGFuIG9iamVjdCwgdGhleSBtdXN0IGJlIHF1b3RlZC5cbiAqIFNlZSB0aGUgJ2JhY2tncm91bmQtY29sb3InIHN0eWxlIGluIHRoZSBleGFtcGxlIGJlbG93LlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cInNldCBjb2xvclwiIG5nLWNsaWNrPVwibXlTdHlsZT17Y29sb3I6J3JlZCd9XCI+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJzZXQgYmFja2dyb3VuZFwiIG5nLWNsaWNrPVwibXlTdHlsZT17J2JhY2tncm91bmQtY29sb3InOidibHVlJ31cIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cImNsZWFyXCIgbmctY2xpY2s9XCJteVN0eWxlPXt9XCI+XG4gICAgICAgIDxici8+XG4gICAgICAgIDxzcGFuIG5nLXN0eWxlPVwibXlTdHlsZVwiPlNhbXBsZSBUZXh0PC9zcGFuPlxuICAgICAgICA8cHJlPm15U3R5bGU9e3tteVN0eWxlfX08L3ByZT5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgc3BhbiB7XG4gICAgICAgICBjb2xvcjogYmxhY2s7XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgY29sb3JTcGFuID0gZWxlbWVudChieS5jc3MoJ3NwYW4nKSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXN0eWxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoY29sb3JTcGFuLmdldENzc1ZhbHVlKCdjb2xvcicpKS50b0JlKCdyZ2JhKDAsIDAsIDAsIDEpJyk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnaW5wdXRbdmFsdWU9XFwnc2V0IGNvbG9yXFwnXScpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGNvbG9yU3Bhbi5nZXRDc3NWYWx1ZSgnY29sb3InKSkudG9CZSgncmdiYSgyNTUsIDAsIDAsIDEpJyk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnaW5wdXRbdmFsdWU9Y2xlYXJdJykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoY29sb3JTcGFuLmdldENzc1ZhbHVlKCdjb2xvcicpKS50b0JlKCdyZ2JhKDAsIDAsIDAsIDEpJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nU3R5bGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZShmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICBzY29wZS4kd2F0Y2goYXR0ci5uZ1N0eWxlLCBmdW5jdGlvbiBuZ1N0eWxlV2F0Y2hBY3Rpb24obmV3U3R5bGVzLCBvbGRTdHlsZXMpIHtcbiAgICBpZiAob2xkU3R5bGVzICYmIChuZXdTdHlsZXMgIT09IG9sZFN0eWxlcykpIHtcbiAgICAgIGZvckVhY2gob2xkU3R5bGVzLCBmdW5jdGlvbih2YWwsIHN0eWxlKSB7IGVsZW1lbnQuY3NzKHN0eWxlLCAnJyk7fSk7XG4gICAgfVxuICAgIGlmIChuZXdTdHlsZXMpIGVsZW1lbnQuY3NzKG5ld1N0eWxlcyk7XG4gIH0sIHRydWUpO1xufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTd2l0Y2hcbiAqIEByZXN0cmljdCBFQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ1N3aXRjaGAgZGlyZWN0aXZlIGlzIHVzZWQgdG8gY29uZGl0aW9uYWxseSBzd2FwIERPTSBzdHJ1Y3R1cmUgb24geW91ciB0ZW1wbGF0ZSBiYXNlZCBvbiBhIHNjb3BlIGV4cHJlc3Npb24uXG4gKiBFbGVtZW50cyB3aXRoaW4gYG5nU3dpdGNoYCBidXQgd2l0aG91dCBgbmdTd2l0Y2hXaGVuYCBvciBgbmdTd2l0Y2hEZWZhdWx0YCBkaXJlY3RpdmVzIHdpbGwgYmUgcHJlc2VydmVkIGF0IHRoZSBsb2NhdGlvblxuICogYXMgc3BlY2lmaWVkIGluIHRoZSB0ZW1wbGF0ZS5cbiAqXG4gKiBUaGUgZGlyZWN0aXZlIGl0c2VsZiB3b3JrcyBzaW1pbGFyIHRvIG5nSW5jbHVkZSwgaG93ZXZlciwgaW5zdGVhZCBvZiBkb3dubG9hZGluZyB0ZW1wbGF0ZSBjb2RlIChvciBsb2FkaW5nIGl0XG4gKiBmcm9tIHRoZSB0ZW1wbGF0ZSBjYWNoZSksIGBuZ1N3aXRjaGAgc2ltcGx5IGNob29zZXMgb25lIG9mIHRoZSBuZXN0ZWQgZWxlbWVudHMgYW5kIG1ha2VzIGl0IHZpc2libGUgYmFzZWQgb24gd2hpY2ggZWxlbWVudFxuICogbWF0Y2hlcyB0aGUgdmFsdWUgb2J0YWluZWQgZnJvbSB0aGUgZXZhbHVhdGVkIGV4cHJlc3Npb24uIEluIG90aGVyIHdvcmRzLCB5b3UgZGVmaW5lIGEgY29udGFpbmVyIGVsZW1lbnRcbiAqICh3aGVyZSB5b3UgcGxhY2UgdGhlIGRpcmVjdGl2ZSksIHBsYWNlIGFuIGV4cHJlc3Npb24gb24gdGhlICoqYG9uPVwiLi4uXCJgIGF0dHJpYnV0ZSoqXG4gKiAob3IgdGhlICoqYG5nLXN3aXRjaD1cIi4uLlwiYCBhdHRyaWJ1dGUqKiksIGRlZmluZSBhbnkgaW5uZXIgZWxlbWVudHMgaW5zaWRlIG9mIHRoZSBkaXJlY3RpdmUgYW5kIHBsYWNlXG4gKiBhIHdoZW4gYXR0cmlidXRlIHBlciBlbGVtZW50LiBUaGUgd2hlbiBhdHRyaWJ1dGUgaXMgdXNlZCB0byBpbmZvcm0gbmdTd2l0Y2ggd2hpY2ggZWxlbWVudCB0byBkaXNwbGF5IHdoZW4gdGhlIG9uXG4gKiBleHByZXNzaW9uIGlzIGV2YWx1YXRlZC4gSWYgYSBtYXRjaGluZyBleHByZXNzaW9uIGlzIG5vdCBmb3VuZCB2aWEgYSB3aGVuIGF0dHJpYnV0ZSB0aGVuIGFuIGVsZW1lbnQgd2l0aCB0aGUgZGVmYXVsdFxuICogYXR0cmlidXRlIGlzIGRpc3BsYXllZC5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogQmUgYXdhcmUgdGhhdCB0aGUgYXR0cmlidXRlIHZhbHVlcyB0byBtYXRjaCBhZ2FpbnN0IGNhbm5vdCBiZSBleHByZXNzaW9ucy4gVGhleSBhcmUgaW50ZXJwcmV0ZWRcbiAqIGFzIGxpdGVyYWwgc3RyaW5nIHZhbHVlcyB0byBtYXRjaCBhZ2FpbnN0LlxuICogRm9yIGV4YW1wbGUsICoqYG5nLXN3aXRjaC13aGVuPVwic29tZVZhbFwiYCoqIHdpbGwgbWF0Y2ggYWdhaW5zdCB0aGUgc3RyaW5nIGBcInNvbWVWYWxcImAgbm90IGFnYWluc3QgdGhlXG4gKiB2YWx1ZSBvZiB0aGUgZXhwcmVzc2lvbiBgJHNjb3BlLnNvbWVWYWxgLlxuICogPC9kaXY+XG5cbiAqIEBhbmltYXRpb25zXG4gKiBlbnRlciAtIGhhcHBlbnMgYWZ0ZXIgdGhlIG5nU3dpdGNoIGNvbnRlbnRzIGNoYW5nZSBhbmQgdGhlIG1hdGNoZWQgY2hpbGQgZWxlbWVudCBpcyBwbGFjZWQgaW5zaWRlIHRoZSBjb250YWluZXJcbiAqIGxlYXZlIC0gaGFwcGVucyBqdXN0IGFmdGVyIHRoZSBuZ1N3aXRjaCBjb250ZW50cyBjaGFuZ2UgYW5kIGp1c3QgYmVmb3JlIHRoZSBmb3JtZXIgY29udGVudHMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NXG4gKlxuICogQHVzYWdlXG4gKlxuICogYGBgXG4gKiA8QU5ZIG5nLXN3aXRjaD1cImV4cHJlc3Npb25cIj5cbiAqICAgPEFOWSBuZy1zd2l0Y2gtd2hlbj1cIm1hdGNoVmFsdWUxXCI+Li4uPC9BTlk+XG4gKiAgIDxBTlkgbmctc3dpdGNoLXdoZW49XCJtYXRjaFZhbHVlMlwiPi4uLjwvQU5ZPlxuICogICA8QU5ZIG5nLXN3aXRjaC1kZWZhdWx0Pi4uLjwvQU5ZPlxuICogPC9BTlk+XG4gKiBgYGBcbiAqXG4gKlxuICogQHNjb3BlXG4gKiBAcHJpb3JpdHkgMTIwMFxuICogQHBhcmFtIHsqfSBuZ1N3aXRjaHxvbiBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QgPGNvZGU+bmctc3dpdGNoLXdoZW48L2NvZGU+LlxuICogT24gY2hpbGQgZWxlbWVudHMgYWRkOlxuICpcbiAqICogYG5nU3dpdGNoV2hlbmA6IHRoZSBjYXNlIHN0YXRlbWVudCB0byBtYXRjaCBhZ2FpbnN0LiBJZiBtYXRjaCB0aGVuIHRoaXNcbiAqICAgY2FzZSB3aWxsIGJlIGRpc3BsYXllZC4gSWYgdGhlIHNhbWUgbWF0Y2ggYXBwZWFycyBtdWx0aXBsZSB0aW1lcywgYWxsIHRoZVxuICogICBlbGVtZW50cyB3aWxsIGJlIGRpc3BsYXllZC5cbiAqICogYG5nU3dpdGNoRGVmYXVsdGA6IHRoZSBkZWZhdWx0IGNhc2Ugd2hlbiBubyBvdGhlciBjYXNlIG1hdGNoLiBJZiB0aGVyZVxuICogICBhcmUgbXVsdGlwbGUgZGVmYXVsdCBjYXNlcywgYWxsIG9mIHRoZW0gd2lsbCBiZSBkaXNwbGF5ZWQgd2hlbiBubyBvdGhlclxuICogICBjYXNlIG1hdGNoLlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJzd2l0Y2hFeGFtcGxlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJzZWxlY3Rpb25cIiBuZy1vcHRpb25zPVwiaXRlbSBmb3IgaXRlbSBpbiBpdGVtc1wiPlxuICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPGNvZGU+c2VsZWN0aW9uPXt7c2VsZWN0aW9ufX08L2NvZGU+XG4gICAgICAgIDxoci8+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJhbmltYXRlLXN3aXRjaC1jb250YWluZXJcIlxuICAgICAgICAgIG5nLXN3aXRjaCBvbj1cInNlbGVjdGlvblwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFuaW1hdGUtc3dpdGNoXCIgbmctc3dpdGNoLXdoZW49XCJzZXR0aW5nc1wiPlNldHRpbmdzIERpdjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFuaW1hdGUtc3dpdGNoXCIgbmctc3dpdGNoLXdoZW49XCJob21lXCI+SG9tZSBTcGFuPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYW5pbWF0ZS1zd2l0Y2hcIiBuZy1zd2l0Y2gtZGVmYXVsdD5kZWZhdWx0PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdzd2l0Y2hFeGFtcGxlJywgWyduZ0FuaW1hdGUnXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUuaXRlbXMgPSBbJ3NldHRpbmdzJywgJ2hvbWUnLCAnb3RoZXInXTtcbiAgICAgICAgICAkc2NvcGUuc2VsZWN0aW9uID0gJHNjb3BlLml0ZW1zWzBdO1xuICAgICAgICB9XSk7XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLmFuaW1hdGUtc3dpdGNoLWNvbnRhaW5lciB7XG4gICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xuICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBoZWlnaHQ6NDBweDtcbiAgICAgICAgb3ZlcmZsb3c6aGlkZGVuO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gge1xuICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1hbmltYXRlIHtcbiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG4gICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcblxuICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgICAgICAgdG9wOjA7XG4gICAgICAgIGxlZnQ6MDtcbiAgICAgICAgcmlnaHQ6MDtcbiAgICAgICAgYm90dG9tOjA7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUsXG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctZW50ZXIge1xuICAgICAgICB0b3A6LTUwcHg7XG4gICAgICB9XG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctbGVhdmUsXG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgdG9wOjA7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciBzd2l0Y2hFbGVtID0gZWxlbWVudChieS5jc3MoJ1tuZy1zd2l0Y2hdJykpO1xuICAgICAgdmFyIHNlbGVjdCA9IGVsZW1lbnQoYnkubW9kZWwoJ3NlbGVjdGlvbicpKTtcblxuICAgICAgaXQoJ3Nob3VsZCBzdGFydCBpbiBzZXR0aW5ncycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3Qoc3dpdGNoRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL1NldHRpbmdzIERpdi8pO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIGNoYW5nZSB0byBob21lJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGVjdC5hbGwoYnkuY3NzKCdvcHRpb24nKSkuZ2V0KDEpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChzd2l0Y2hFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvSG9tZSBTcGFuLyk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgc2VsZWN0IGRlZmF1bHQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMikuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KHN3aXRjaEVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9kZWZhdWx0Lyk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nU3dpdGNoRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogJ25nU3dpdGNoJyxcblxuICAgIC8vIGFza3MgZm9yICRzY29wZSB0byBmb29sIHRoZSBCQyBjb250cm9sbGVyIG1vZHVsZVxuICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgZnVuY3Rpb24gbmdTd2l0Y2hDb250cm9sbGVyKCkge1xuICAgICB0aGlzLmNhc2VzID0ge307XG4gICAgfV0sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIG5nU3dpdGNoQ29udHJvbGxlcikge1xuICAgICAgdmFyIHdhdGNoRXhwciA9IGF0dHIubmdTd2l0Y2ggfHwgYXR0ci5vbixcbiAgICAgICAgICBzZWxlY3RlZFRyYW5zY2x1ZGVzID0gW10sXG4gICAgICAgICAgc2VsZWN0ZWRFbGVtZW50cyA9IFtdLFxuICAgICAgICAgIHByZXZpb3VzTGVhdmVBbmltYXRpb25zID0gW10sXG4gICAgICAgICAgc2VsZWN0ZWRTY29wZXMgPSBbXTtcblxuICAgICAgdmFyIHNwbGljZUZhY3RvcnkgPSBmdW5jdGlvbihhcnJheSwgaW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7IGFycmF5LnNwbGljZShpbmRleCwgMSk7IH07XG4gICAgICB9O1xuXG4gICAgICBzY29wZS4kd2F0Y2god2F0Y2hFeHByLCBmdW5jdGlvbiBuZ1N3aXRjaFdhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciBpLCBpaTtcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBwcmV2aW91c0xlYXZlQW5pbWF0aW9ucy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgJGFuaW1hdGUuY2FuY2VsKHByZXZpb3VzTGVhdmVBbmltYXRpb25zW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBwcmV2aW91c0xlYXZlQW5pbWF0aW9ucy5sZW5ndGggPSAwO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gc2VsZWN0ZWRTY29wZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgICAgIHZhciBzZWxlY3RlZCA9IGdldEJsb2NrTm9kZXMoc2VsZWN0ZWRFbGVtZW50c1tpXS5jbG9uZSk7XG4gICAgICAgICAgc2VsZWN0ZWRTY29wZXNbaV0uJGRlc3Ryb3koKTtcbiAgICAgICAgICB2YXIgcHJvbWlzZSA9IHByZXZpb3VzTGVhdmVBbmltYXRpb25zW2ldID0gJGFuaW1hdGUubGVhdmUoc2VsZWN0ZWQpO1xuICAgICAgICAgIHByb21pc2UudGhlbihzcGxpY2VGYWN0b3J5KHByZXZpb3VzTGVhdmVBbmltYXRpb25zLCBpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxlY3RlZEVsZW1lbnRzLmxlbmd0aCA9IDA7XG4gICAgICAgIHNlbGVjdGVkU2NvcGVzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgaWYgKChzZWxlY3RlZFRyYW5zY2x1ZGVzID0gbmdTd2l0Y2hDb250cm9sbGVyLmNhc2VzWychJyArIHZhbHVlXSB8fCBuZ1N3aXRjaENvbnRyb2xsZXIuY2FzZXNbJz8nXSkpIHtcbiAgICAgICAgICBmb3JFYWNoKHNlbGVjdGVkVHJhbnNjbHVkZXMsIGZ1bmN0aW9uKHNlbGVjdGVkVHJhbnNjbHVkZSkge1xuICAgICAgICAgICAgc2VsZWN0ZWRUcmFuc2NsdWRlLnRyYW5zY2x1ZGUoZnVuY3Rpb24oY2FzZUVsZW1lbnQsIHNlbGVjdGVkU2NvcGUpIHtcbiAgICAgICAgICAgICAgc2VsZWN0ZWRTY29wZXMucHVzaChzZWxlY3RlZFNjb3BlKTtcbiAgICAgICAgICAgICAgdmFyIGFuY2hvciA9IHNlbGVjdGVkVHJhbnNjbHVkZS5lbGVtZW50O1xuICAgICAgICAgICAgICBjYXNlRWxlbWVudFtjYXNlRWxlbWVudC5sZW5ndGgrK10gPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCcgZW5kIG5nU3dpdGNoV2hlbjogJyk7XG4gICAgICAgICAgICAgIHZhciBibG9jayA9IHsgY2xvbmU6IGNhc2VFbGVtZW50IH07XG5cbiAgICAgICAgICAgICAgc2VsZWN0ZWRFbGVtZW50cy5wdXNoKGJsb2NrKTtcbiAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2FzZUVsZW1lbnQsIGFuY2hvci5wYXJlbnQoKSwgYW5jaG9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XTtcblxudmFyIG5nU3dpdGNoV2hlbkRpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHtcbiAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICBwcmlvcml0eTogMTIwMCxcbiAgcmVxdWlyZTogJ15uZ1N3aXRjaCcsXG4gIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuICAgIGN0cmwuY2FzZXNbJyEnICsgYXR0cnMubmdTd2l0Y2hXaGVuXSA9IChjdHJsLmNhc2VzWychJyArIGF0dHJzLm5nU3dpdGNoV2hlbl0gfHwgW10pO1xuICAgIGN0cmwuY2FzZXNbJyEnICsgYXR0cnMubmdTd2l0Y2hXaGVuXS5wdXNoKHsgdHJhbnNjbHVkZTogJHRyYW5zY2x1ZGUsIGVsZW1lbnQ6IGVsZW1lbnQgfSk7XG4gIH1cbn0pO1xuXG52YXIgbmdTd2l0Y2hEZWZhdWx0RGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gIHByaW9yaXR5OiAxMjAwLFxuICByZXF1aXJlOiAnXm5nU3dpdGNoJyxcbiAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHRyYW5zY2x1ZGUpIHtcbiAgICBjdHJsLmNhc2VzWyc/J10gPSAoY3RybC5jYXNlc1snPyddIHx8IFtdKTtcbiAgICBjdHJsLmNhc2VzWyc/J10ucHVzaCh7IHRyYW5zY2x1ZGU6ICR0cmFuc2NsdWRlLCBlbGVtZW50OiBlbGVtZW50IH0pO1xuICAgfVxufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdUcmFuc2NsdWRlXG4gKiBAcmVzdHJpY3QgRUFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEaXJlY3RpdmUgdGhhdCBtYXJrcyB0aGUgaW5zZXJ0aW9uIHBvaW50IGZvciB0aGUgdHJhbnNjbHVkZWQgRE9NIG9mIHRoZSBuZWFyZXN0IHBhcmVudCBkaXJlY3RpdmUgdGhhdCB1c2VzIHRyYW5zY2x1c2lvbi5cbiAqXG4gKiBBbnkgZXhpc3RpbmcgY29udGVudCBvZiB0aGUgZWxlbWVudCB0aGF0IHRoaXMgZGlyZWN0aXZlIGlzIHBsYWNlZCBvbiB3aWxsIGJlIHJlbW92ZWQgYmVmb3JlIHRoZSB0cmFuc2NsdWRlZCBjb250ZW50IGlzIGluc2VydGVkLlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJ0cmFuc2NsdWRlRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgndHJhbnNjbHVkZUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAuZGlyZWN0aXZlKCdwYW5lJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgICAgICAgICAgICBzY29wZTogeyB0aXRsZTonQCcgfSxcbiAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBzdHlsZT1cImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1wiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiBncmF5XCI+e3t0aXRsZX19PC9kaXY+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAnPG5nLXRyYW5zY2x1ZGU+PC9uZy10cmFuc2NsdWRlPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nXG4gICAgICAgICAgICAgfTtcbiAgICAgICAgIH0pXG4gICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAkc2NvcGUudGl0bGUgPSAnTG9yZW0gSXBzdW0nO1xuICAgICAgICAgICAkc2NvcGUudGV4dCA9ICdOZXF1ZSBwb3JybyBxdWlzcXVhbSBlc3QgcXVpIGRvbG9yZW0gaXBzdW0gcXVpYSBkb2xvci4uLic7XG4gICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInRpdGxlXCIgYXJpYS1sYWJlbD1cInRpdGxlXCI+IDxici8+XG4gICAgICAgICA8dGV4dGFyZWEgbmctbW9kZWw9XCJ0ZXh0XCIgYXJpYS1sYWJlbD1cInRleHRcIj48L3RleHRhcmVhPiA8YnIvPlxuICAgICAgICAgPHBhbmUgdGl0bGU9XCJ7e3RpdGxlfX1cIj57e3RleHR9fTwvcGFuZT5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgaGF2ZSB0cmFuc2NsdWRlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB0aXRsZUVsZW1lbnQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd0aXRsZScpKTtcbiAgICAgICAgICB0aXRsZUVsZW1lbnQuY2xlYXIoKTtcbiAgICAgICAgICB0aXRsZUVsZW1lbnQuc2VuZEtleXMoJ1RJVExFJyk7XG4gICAgICAgICAgdmFyIHRleHRFbGVtZW50ID0gZWxlbWVudChieS5tb2RlbCgndGV4dCcpKTtcbiAgICAgICAgICB0ZXh0RWxlbWVudC5jbGVhcigpO1xuICAgICAgICAgIHRleHRFbGVtZW50LnNlbmRLZXlzKCdURVhUJyk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndGl0bGUnKSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdUSVRMRScpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3RleHQnKSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdURVhUJyk7XG4gICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKlxuICovXG52YXIgbmdUcmFuc2NsdWRlRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICByZXN0cmljdDogJ0VBQycsXG4gIGxpbms6IGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgY29udHJvbGxlciwgJHRyYW5zY2x1ZGUpIHtcbiAgICBpZiAoISR0cmFuc2NsdWRlKSB7XG4gICAgICB0aHJvdyBtaW5FcnIoJ25nVHJhbnNjbHVkZScpKCdvcnBoYW4nLFxuICAgICAgICdJbGxlZ2FsIHVzZSBvZiBuZ1RyYW5zY2x1ZGUgZGlyZWN0aXZlIGluIHRoZSB0ZW1wbGF0ZSEgJyArXG4gICAgICAgJ05vIHBhcmVudCBkaXJlY3RpdmUgdGhhdCByZXF1aXJlcyBhIHRyYW5zY2x1c2lvbiBmb3VuZC4gJyArXG4gICAgICAgJ0VsZW1lbnQ6IHswfScsXG4gICAgICAgc3RhcnRpbmdUYWcoJGVsZW1lbnQpKTtcbiAgICB9XG5cbiAgICAkdHJhbnNjbHVkZShmdW5jdGlvbihjbG9uZSkge1xuICAgICAgJGVsZW1lbnQuZW1wdHkoKTtcbiAgICAgICRlbGVtZW50LmFwcGVuZChjbG9uZSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIHNjcmlwdFxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIExvYWQgdGhlIGNvbnRlbnQgb2YgYSBgPHNjcmlwdD5gIGVsZW1lbnQgaW50byB7QGxpbmsgbmcuJHRlbXBsYXRlQ2FjaGUgYCR0ZW1wbGF0ZUNhY2hlYH0sIHNvIHRoYXQgdGhlXG4gKiB0ZW1wbGF0ZSBjYW4gYmUgdXNlZCBieSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZSBgbmdJbmNsdWRlYH0sXG4gKiB7QGxpbmsgbmdSb3V0ZS5kaXJlY3RpdmU6bmdWaWV3IGBuZ1ZpZXdgfSwgb3Ige0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS4gVGhlIHR5cGUgb2YgdGhlXG4gKiBgPHNjcmlwdD5gIGVsZW1lbnQgbXVzdCBiZSBzcGVjaWZpZWQgYXMgYHRleHQvbmctdGVtcGxhdGVgLCBhbmQgYSBjYWNoZSBuYW1lIGZvciB0aGUgdGVtcGxhdGUgbXVzdCBiZVxuICogYXNzaWduZWQgdGhyb3VnaCB0aGUgZWxlbWVudCdzIGBpZGAsIHdoaWNoIGNhbiB0aGVuIGJlIHVzZWQgYXMgYSBkaXJlY3RpdmUncyBgdGVtcGxhdGVVcmxgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIE11c3QgYmUgc2V0IHRvIGAndGV4dC9uZy10ZW1wbGF0ZSdgLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIENhY2hlIG5hbWUgb2YgdGhlIHRlbXBsYXRlLlxuICpcbiAqIEBleGFtcGxlXG4gIDxleGFtcGxlPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8c2NyaXB0IHR5cGU9XCJ0ZXh0L25nLXRlbXBsYXRlXCIgaWQ9XCIvdHBsLmh0bWxcIj5cbiAgICAgICAgQ29udGVudCBvZiB0aGUgdGVtcGxhdGUuXG4gICAgICA8L3NjcmlwdD5cblxuICAgICAgPGEgbmctY2xpY2s9XCJjdXJyZW50VHBsPScvdHBsLmh0bWwnXCIgaWQ9XCJ0cGwtbGlua1wiPkxvYWQgaW5saW5lZCB0ZW1wbGF0ZTwvYT5cbiAgICAgIDxkaXYgaWQ9XCJ0cGwtY29udGVudFwiIG5nLWluY2x1ZGUgc3JjPVwiY3VycmVudFRwbFwiPjwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICBpdCgnc2hvdWxkIGxvYWQgdGVtcGxhdGUgZGVmaW5lZCBpbnNpZGUgc2NyaXB0IHRhZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBlbGVtZW50KGJ5LmNzcygnI3RwbC1saW5rJykpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnI3RwbC1jb250ZW50JykpLmdldFRleHQoKSkudG9NYXRjaCgvQ29udGVudCBvZiB0aGUgdGVtcGxhdGUvKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgc2NyaXB0RGlyZWN0aXZlID0gWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG4gICAgICBpZiAoYXR0ci50eXBlID09ICd0ZXh0L25nLXRlbXBsYXRlJykge1xuICAgICAgICB2YXIgdGVtcGxhdGVVcmwgPSBhdHRyLmlkLFxuICAgICAgICAgICAgdGV4dCA9IGVsZW1lbnRbMF0udGV4dDtcblxuICAgICAgICAkdGVtcGxhdGVDYWNoZS5wdXQodGVtcGxhdGVVcmwsIHRleHQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1dO1xuXG52YXIgbm9vcE5nTW9kZWxDb250cm9sbGVyID0geyAkc2V0Vmlld1ZhbHVlOiBub29wLCAkcmVuZGVyOiBub29wIH07XG5cbi8qKlxuICogQG5nZG9jIHR5cGVcbiAqIEBuYW1lICBzZWxlY3QuU2VsZWN0Q29udHJvbGxlclxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgY29udHJvbGxlciBmb3IgdGhlIGA8c2VsZWN0PmAgZGlyZWN0aXZlLiBUaGlzIHByb3ZpZGVzIHN1cHBvcnQgZm9yIHJlYWRpbmdcbiAqIGFuZCB3cml0aW5nIHRoZSBzZWxlY3RlZCB2YWx1ZShzKSBvZiB0aGUgY29udHJvbCBhbmQgYWxzbyBjb29yZGluYXRlcyBkeW5hbWljYWxseVxuICogYWRkZWQgYDxvcHRpb24+YCBlbGVtZW50cywgcGVyaGFwcyBieSBhbiBgbmdSZXBlYXRgIGRpcmVjdGl2ZS5cbiAqL1xudmFyIFNlbGVjdENvbnRyb2xsZXIgPVxuICAgICAgICBbJyRlbGVtZW50JywgJyRzY29wZScsICckYXR0cnMnLCBmdW5jdGlvbigkZWxlbWVudCwgJHNjb3BlLCAkYXR0cnMpIHtcblxuICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICBvcHRpb25zTWFwID0gbmV3IEhhc2hNYXAoKTtcblxuICAvLyBJZiB0aGUgbmdNb2RlbCBkb2Vzbid0IGdldCBwcm92aWRlZCB0aGVuIHByb3ZpZGUgYSBkdW1teSBub29wIHZlcnNpb24gdG8gcHJldmVudCBlcnJvcnNcbiAgc2VsZi5uZ01vZGVsQ3RybCA9IG5vb3BOZ01vZGVsQ29udHJvbGxlcjtcblxuICAvLyBUaGUgXCJ1bmtub3duXCIgb3B0aW9uIGlzIG9uZSB0aGF0IGlzIHByZXBlbmRlZCB0byB0aGUgbGlzdCBpZiB0aGUgdmlld1ZhbHVlXG4gIC8vIGRvZXMgbm90IG1hdGNoIGFueSBvZiB0aGUgb3B0aW9ucy4gV2hlbiBpdCBpcyByZW5kZXJlZCB0aGUgdmFsdWUgb2YgdGhlIHVua25vd25cbiAgLy8gb3B0aW9uIGlzICc/IFhYWCA/JyB3aGVyZSBYWFggaXMgdGhlIGhhc2hLZXkgb2YgdGhlIHZhbHVlIHRoYXQgaXMgbm90IGtub3duLlxuICAvL1xuICAvLyBXZSBjYW4ndCBqdXN0IGpxTGl0ZSgnPG9wdGlvbj4nKSBzaW5jZSBqcUxpdGUgaXMgbm90IHNtYXJ0IGVub3VnaFxuICAvLyB0byBjcmVhdGUgaXQgaW4gPHNlbGVjdD4gYW5kIElFIGJhcmZzIG90aGVyd2lzZS5cbiAgc2VsZi51bmtub3duT3B0aW9uID0ganFMaXRlKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpKTtcbiAgc2VsZi5yZW5kZXJVbmtub3duT3B0aW9uID0gZnVuY3Rpb24odmFsKSB7XG4gICAgdmFyIHVua25vd25WYWwgPSAnPyAnICsgaGFzaEtleSh2YWwpICsgJyA/JztcbiAgICBzZWxmLnVua25vd25PcHRpb24udmFsKHVua25vd25WYWwpO1xuICAgICRlbGVtZW50LnByZXBlbmQoc2VsZi51bmtub3duT3B0aW9uKTtcbiAgICAkZWxlbWVudC52YWwodW5rbm93blZhbCk7XG4gIH07XG5cbiAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAvLyBkaXNhYmxlIHVua25vd24gb3B0aW9uIHNvIHRoYXQgd2UgZG9uJ3QgZG8gd29yayB3aGVuIHRoZSB3aG9sZSBzZWxlY3QgaXMgYmVpbmcgZGVzdHJveWVkXG4gICAgc2VsZi5yZW5kZXJVbmtub3duT3B0aW9uID0gbm9vcDtcbiAgfSk7XG5cbiAgc2VsZi5yZW1vdmVVbmtub3duT3B0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHNlbGYudW5rbm93bk9wdGlvbi5wYXJlbnQoKSkgc2VsZi51bmtub3duT3B0aW9uLnJlbW92ZSgpO1xuICB9O1xuXG5cbiAgLy8gUmVhZCB0aGUgdmFsdWUgb2YgdGhlIHNlbGVjdCBjb250cm9sLCB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBjaGFuZ2VzIGRlcGVuZGluZ1xuICAvLyB1cG9uIHdoZXRoZXIgdGhlIHNlbGVjdCBjYW4gaGF2ZSBtdWx0aXBsZSB2YWx1ZXMgYW5kIHdoZXRoZXIgbmdPcHRpb25zIGlzIGF0IHdvcmsuXG4gIHNlbGYucmVhZFZhbHVlID0gZnVuY3Rpb24gcmVhZFNpbmdsZVZhbHVlKCkge1xuICAgIHNlbGYucmVtb3ZlVW5rbm93bk9wdGlvbigpO1xuICAgIHJldHVybiAkZWxlbWVudC52YWwoKTtcbiAgfTtcblxuXG4gIC8vIFdyaXRlIHRoZSB2YWx1ZSB0byB0aGUgc2VsZWN0IGNvbnRyb2wsIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGNoYW5nZXMgZGVwZW5kaW5nXG4gIC8vIHVwb24gd2hldGhlciB0aGUgc2VsZWN0IGNhbiBoYXZlIG11bHRpcGxlIHZhbHVlcyBhbmQgd2hldGhlciBuZ09wdGlvbnMgaXMgYXQgd29yay5cbiAgc2VsZi53cml0ZVZhbHVlID0gZnVuY3Rpb24gd3JpdGVTaW5nbGVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmIChzZWxmLmhhc09wdGlvbih2YWx1ZSkpIHtcbiAgICAgIHNlbGYucmVtb3ZlVW5rbm93bk9wdGlvbigpO1xuICAgICAgJGVsZW1lbnQudmFsKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gJycpIHNlbGYuZW1wdHlPcHRpb24ucHJvcCgnc2VsZWN0ZWQnLCB0cnVlKTsgLy8gdG8gbWFrZSBJRTkgaGFwcHlcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwgJiYgc2VsZi5lbXB0eU9wdGlvbikge1xuICAgICAgICBzZWxmLnJlbW92ZVVua25vd25PcHRpb24oKTtcbiAgICAgICAgJGVsZW1lbnQudmFsKCcnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYucmVuZGVyVW5rbm93bk9wdGlvbih2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG5cbiAgLy8gVGVsbCB0aGUgc2VsZWN0IGNvbnRyb2wgdGhhdCBhbiBvcHRpb24sIHdpdGggdGhlIGdpdmVuIHZhbHVlLCBoYXMgYmVlbiBhZGRlZFxuICBzZWxmLmFkZE9wdGlvbiA9IGZ1bmN0aW9uKHZhbHVlLCBlbGVtZW50KSB7XG4gICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkodmFsdWUsICdcIm9wdGlvbiB2YWx1ZVwiJyk7XG4gICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgc2VsZi5lbXB0eU9wdGlvbiA9IGVsZW1lbnQ7XG4gICAgfVxuICAgIHZhciBjb3VudCA9IG9wdGlvbnNNYXAuZ2V0KHZhbHVlKSB8fCAwO1xuICAgIG9wdGlvbnNNYXAucHV0KHZhbHVlLCBjb3VudCArIDEpO1xuICB9O1xuXG4gIC8vIFRlbGwgdGhlIHNlbGVjdCBjb250cm9sIHRoYXQgYW4gb3B0aW9uLCB3aXRoIHRoZSBnaXZlbiB2YWx1ZSwgaGFzIGJlZW4gcmVtb3ZlZFxuICBzZWxmLnJlbW92ZU9wdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGNvdW50ID0gb3B0aW9uc01hcC5nZXQodmFsdWUpO1xuICAgIGlmIChjb3VudCkge1xuICAgICAgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgICAgIG9wdGlvbnNNYXAucmVtb3ZlKHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgICAgIHNlbGYuZW1wdHlPcHRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbnNNYXAucHV0KHZhbHVlLCBjb3VudCAtIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBDaGVjayB3aGV0aGVyIHRoZSBzZWxlY3QgY29udHJvbCBoYXMgYW4gb3B0aW9uIG1hdGNoaW5nIHRoZSBnaXZlbiB2YWx1ZVxuICBzZWxmLmhhc09wdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhb3B0aW9uc01hcC5nZXQodmFsdWUpO1xuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgc2VsZWN0XG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSFRNTCBgU0VMRUNUYCBlbGVtZW50IHdpdGggYW5ndWxhciBkYXRhLWJpbmRpbmcuXG4gKlxuICogSW4gbWFueSBjYXNlcywgYG5nUmVwZWF0YCBjYW4gYmUgdXNlZCBvbiBgPG9wdGlvbj5gIGVsZW1lbnRzIGluc3RlYWQgb2Yge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ09wdGlvbnNcbiAqIG5nT3B0aW9uc30gdG8gYWNoaWV2ZSBhIHNpbWlsYXIgcmVzdWx0LiBIb3dldmVyLCBgbmdPcHRpb25zYCBwcm92aWRlcyBzb21lIGJlbmVmaXRzIHN1Y2ggYXMgcmVkdWNpbmdcbiAqIG1lbW9yeSBhbmQgaW5jcmVhc2luZyBzcGVlZCBieSBub3QgY3JlYXRpbmcgYSBuZXcgc2NvcGUgZm9yIGVhY2ggcmVwZWF0ZWQgaW5zdGFuY2UsIGFzIHdlbGwgYXMgcHJvdmlkaW5nXG4gKiBtb3JlIGZsZXhpYmlsaXR5IGluIGhvdyB0aGUgYDxzZWxlY3Q+YCdzIG1vZGVsIGlzIGFzc2lnbmVkIHZpYSB0aGUgYHNlbGVjdGAgKipgYXNgKiogcGFydCBvZiB0aGVcbiAqIGNvbXByZWhlbnNpb24gZXhwcmVzc2lvbi5cbiAqXG4gKiBXaGVuIGFuIGl0ZW0gaW4gdGhlIGA8c2VsZWN0PmAgbWVudSBpcyBzZWxlY3RlZCwgdGhlIGFycmF5IGVsZW1lbnQgb3Igb2JqZWN0IHByb3BlcnR5XG4gKiByZXByZXNlbnRlZCBieSB0aGUgc2VsZWN0ZWQgb3B0aW9uIHdpbGwgYmUgYm91bmQgdG8gdGhlIG1vZGVsIGlkZW50aWZpZWQgYnkgdGhlIGBuZ01vZGVsYFxuICogZGlyZWN0aXZlLlxuICpcbiAqIElmIHRoZSB2aWV3VmFsdWUgY29udGFpbnMgYSB2YWx1ZSB0aGF0IGRvZXNuJ3QgbWF0Y2ggYW55IG9mIHRoZSBvcHRpb25zIHRoZW4gdGhlIGNvbnRyb2xcbiAqIHdpbGwgYXV0b21hdGljYWxseSBhZGQgYW4gXCJ1bmtub3duXCIgb3B0aW9uLCB3aGljaCBpdCB0aGVuIHJlbW92ZXMgd2hlbiB0aGlzIGlzIHJlc29sdmVkLlxuICpcbiAqIE9wdGlvbmFsbHksIGEgc2luZ2xlIGhhcmQtY29kZWQgYDxvcHRpb24+YCBlbGVtZW50LCB3aXRoIHRoZSB2YWx1ZSBzZXQgdG8gYW4gZW1wdHkgc3RyaW5nLCBjYW5cbiAqIGJlIG5lc3RlZCBpbnRvIHRoZSBgPHNlbGVjdD5gIGVsZW1lbnQuIFRoaXMgZWxlbWVudCB3aWxsIHRoZW4gcmVwcmVzZW50IHRoZSBgbnVsbGAgb3IgXCJub3Qgc2VsZWN0ZWRcIlxuICogb3B0aW9uLiBTZWUgZXhhbXBsZSBiZWxvdyBmb3IgZGVtb25zdHJhdGlvbi5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogVGhlIHZhbHVlIG9mIGEgYHNlbGVjdGAgZGlyZWN0aXZlIHVzZWQgd2l0aG91dCBgbmdPcHRpb25zYCBpcyBhbHdheXMgYSBzdHJpbmcuXG4gKiBXaGVuIHRoZSBtb2RlbCBuZWVkcyB0byBiZSBib3VuZCB0byBhIG5vbi1zdHJpbmcgdmFsdWUsIHlvdSBtdXN0IGVpdGhlciBleHBsaWN0bHkgY29udmVydCBpdFxuICogdXNpbmcgYSBkaXJlY3RpdmUgKHNlZSBleGFtcGxlIGJlbG93KSBvciB1c2UgYG5nT3B0aW9uc2AgdG8gc3BlY2lmeSB0aGUgc2V0IG9mIG9wdGlvbnMuXG4gKiBUaGlzIGlzIGJlY2F1c2UgYW4gb3B0aW9uIGVsZW1lbnQgY2FuIG9ubHkgYmUgYm91bmQgdG8gc3RyaW5nIHZhbHVlcyBhdCBwcmVzZW50LlxuICogPC9kaXY+XG4gKlxuICogIyMjIEV4YW1wbGUgKGJpbmRpbmcgYHNlbGVjdGAgdG8gYSBub24tc3RyaW5nIHZhbHVlKVxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJzZWxlY3Qtd2l0aC1ub24tc3RyaW5nLW9wdGlvbnNcIiBtb2R1bGU9XCJub25TdHJpbmdTZWxlY3RcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibW9kZWwuaWRcIiBjb252ZXJ0LXRvLW51bWJlcj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCIwXCI+WmVybzwvb3B0aW9uPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIjFcIj5PbmU8L29wdGlvbj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCIyXCI+VHdvPC9vcHRpb24+XG4gKiAgICAgPC9zZWxlY3Q+XG4gKiAgICAge3sgbW9kZWwgfX1cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgICAgYW5ndWxhci5tb2R1bGUoJ25vblN0cmluZ1NlbGVjdCcsIFtdKVxuICogICAgICAgLnJ1bihmdW5jdGlvbigkcm9vdFNjb3BlKSB7XG4gKiAgICAgICAgICRyb290U2NvcGUubW9kZWwgPSB7IGlkOiAyIH07XG4gKiAgICAgICB9KVxuICogICAgICAgLmRpcmVjdGl2ZSgnY29udmVydFRvTnVtYmVyJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgIHJldHVybiB7XG4gKiAgICAgICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICogICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xuICogICAgICAgICAgICAgbmdNb2RlbC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbCkge1xuICogICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQodmFsLCAxMCk7XG4gKiAgICAgICAgICAgICB9KTtcbiAqICAgICAgICAgICAgIG5nTW9kZWwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWwpIHtcbiAqICAgICAgICAgICAgICAgcmV0dXJuICcnICsgdmFsO1xuICogICAgICAgICAgICAgfSk7XG4gKiAgICAgICAgICAgfVxuICogICAgICAgICB9O1xuICogICAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICogICAgICAgdmFyIHNlbGVjdCA9IGVsZW1lbnQoYnkuY3NzKCdzZWxlY3QnKSk7XG4gKiAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgnbW9kZWwuaWQnKSkuJCgnb3B0aW9uOmNoZWNrZWQnKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1R3bycpO1xuICogICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICovXG52YXIgc2VsZWN0RGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6IFsnc2VsZWN0JywgJz9uZ01vZGVsJ10sXG4gICAgY29udHJvbGxlcjogU2VsZWN0Q29udHJvbGxlcixcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHtcblxuICAgICAgLy8gaWYgbmdNb2RlbCBpcyBub3QgZGVmaW5lZCwgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZ1xuICAgICAgdmFyIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG4gICAgICBpZiAoIW5nTW9kZWxDdHJsKSByZXR1cm47XG5cbiAgICAgIHZhciBzZWxlY3RDdHJsID0gY3RybHNbMF07XG5cbiAgICAgIHNlbGVjdEN0cmwubmdNb2RlbEN0cmwgPSBuZ01vZGVsQ3RybDtcblxuICAgICAgLy8gV2UgZGVsZWdhdGUgcmVuZGVyaW5nIHRvIHRoZSBgd3JpdGVWYWx1ZWAgbWV0aG9kLCB3aGljaCBjYW4gYmUgY2hhbmdlZFxuICAgICAgLy8gaWYgdGhlIHNlbGVjdCBjYW4gaGF2ZSBtdWx0aXBsZSBzZWxlY3RlZCB2YWx1ZXMgb3IgaWYgdGhlIG9wdGlvbnMgYXJlIGJlaW5nXG4gICAgICAvLyBnZW5lcmF0ZWQgYnkgYG5nT3B0aW9uc2BcbiAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZWN0Q3RybC53cml0ZVZhbHVlKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpO1xuICAgICAgfTtcblxuICAgICAgLy8gV2hlbiB0aGUgc2VsZWN0ZWQgaXRlbShzKSBjaGFuZ2VzIHdlIGRlbGVnYXRlIGdldHRpbmcgdGhlIHZhbHVlIG9mIHRoZSBzZWxlY3QgY29udHJvbFxuICAgICAgLy8gdG8gdGhlIGByZWFkVmFsdWVgIG1ldGhvZCwgd2hpY2ggY2FuIGJlIGNoYW5nZWQgaWYgdGhlIHNlbGVjdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICAgICAgLy8gc2VsZWN0ZWQgdmFsdWVzIG9yIGlmIHRoZSBvcHRpb25zIGFyZSBiZWluZyBnZW5lcmF0ZWQgYnkgYG5nT3B0aW9uc2BcbiAgICAgIGVsZW1lbnQub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShzZWxlY3RDdHJsLnJlYWRWYWx1ZSgpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gSWYgdGhlIHNlbGVjdCBhbGxvd3MgbXVsdGlwbGUgdmFsdWVzIHRoZW4gd2UgbmVlZCB0byBtb2RpZnkgaG93IHdlIHJlYWQgYW5kIHdyaXRlXG4gICAgICAvLyB2YWx1ZXMgZnJvbSBhbmQgdG8gdGhlIGNvbnRyb2w7IGFsc28gd2hhdCBpdCBtZWFucyBmb3IgdGhlIHZhbHVlIHRvIGJlIGVtcHR5IGFuZFxuICAgICAgLy8gd2UgaGF2ZSB0byBhZGQgYW4gZXh0cmEgd2F0Y2ggc2luY2UgbmdNb2RlbCBkb2Vzbid0IHdvcmsgd2VsbCB3aXRoIGFycmF5cyAtIGl0XG4gICAgICAvLyBkb2Vzbid0IHRyaWdnZXIgcmVuZGVyaW5nIGlmIG9ubHkgYW4gaXRlbSBpbiB0aGUgYXJyYXkgY2hhbmdlcy5cbiAgICAgIGlmIChhdHRyLm11bHRpcGxlKSB7XG5cbiAgICAgICAgLy8gUmVhZCB2YWx1ZSBub3cgbmVlZHMgdG8gY2hlY2sgZWFjaCBvcHRpb24gdG8gc2VlIGlmIGl0IGlzIHNlbGVjdGVkXG4gICAgICAgIHNlbGVjdEN0cmwucmVhZFZhbHVlID0gZnVuY3Rpb24gcmVhZE11bHRpcGxlVmFsdWUoKSB7XG4gICAgICAgICAgdmFyIGFycmF5ID0gW107XG4gICAgICAgICAgZm9yRWFjaChlbGVtZW50LmZpbmQoJ29wdGlvbicpLCBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgYXJyYXkucHVzaChvcHRpb24udmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBXcml0ZSB2YWx1ZSBub3cgbmVlZHMgdG8gc2V0IHRoZSBzZWxlY3RlZCBwcm9wZXJ0eSBvZiBlYWNoIG1hdGNoaW5nIG9wdGlvblxuICAgICAgICBzZWxlY3RDdHJsLndyaXRlVmFsdWUgPSBmdW5jdGlvbiB3cml0ZU11bHRpcGxlVmFsdWUodmFsdWUpIHtcbiAgICAgICAgICB2YXIgaXRlbXMgPSBuZXcgSGFzaE1hcCh2YWx1ZSk7XG4gICAgICAgICAgZm9yRWFjaChlbGVtZW50LmZpbmQoJ29wdGlvbicpLCBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IGlzRGVmaW5lZChpdGVtcy5nZXQob3B0aW9uLnZhbHVlKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gd2UgaGF2ZSB0byBkbyBpdCBvbiBlYWNoIHdhdGNoIHNpbmNlIG5nTW9kZWwgd2F0Y2hlcyByZWZlcmVuY2UsIGJ1dFxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHdvcmsgb2YgYW4gYXJyYXksIHNvIHdlIG5lZWQgdG8gc2VlIGlmIGFueXRoaW5nIHdhcyBpbnNlcnRlZC9yZW1vdmVkXG4gICAgICAgIHZhciBsYXN0VmlldywgbGFzdFZpZXdSZWYgPSBOYU47XG4gICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbiBzZWxlY3RNdWx0aXBsZVdhdGNoKCkge1xuICAgICAgICAgIGlmIChsYXN0Vmlld1JlZiA9PT0gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSAmJiAhZXF1YWxzKGxhc3RWaWV3LCBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKSkge1xuICAgICAgICAgICAgbGFzdFZpZXcgPSBzaGFsbG93Q29weShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKTtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGFzdFZpZXdSZWYgPSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBJZiB3ZSBhcmUgYSBtdWx0aXBsZSBzZWxlY3QgdGhlbiB2YWx1ZSBpcyBub3cgYSBjb2xsZWN0aW9uXG4gICAgICAgIC8vIHNvIHRoZSBtZWFuaW5nIG9mICRpc0VtcHR5IGNoYW5nZXNcbiAgICAgICAgbmdNb2RlbEN0cmwuJGlzRW1wdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiAhdmFsdWUgfHwgdmFsdWUubGVuZ3RoID09PSAwO1xuICAgICAgICB9O1xuXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuXG4vLyBUaGUgb3B0aW9uIGRpcmVjdGl2ZSBpcyBwdXJlbHkgZGVzaWduZWQgdG8gY29tbXVuaWNhdGUgdGhlIGV4aXN0ZW5jZSAob3IgbGFjayBvZilcbi8vIG9mIGR5bmFtaWNhbGx5IGNyZWF0ZWQgKGFuZCBkZXN0cm95ZWQpIG9wdGlvbiBlbGVtZW50cyB0byB0aGVpciBjb250YWluaW5nIHNlbGVjdFxuLy8gZGlyZWN0aXZlIHZpYSBpdHMgY29udHJvbGxlci5cbnZhciBvcHRpb25EaXJlY3RpdmUgPSBbJyRpbnRlcnBvbGF0ZScsIGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZSkge1xuXG4gIGZ1bmN0aW9uIGNocm9tZUhhY2sob3B0aW9uRWxlbWVudCkge1xuICAgIC8vIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zODE0NTlcbiAgICAvLyBBZGRpbmcgYW4gPG9wdGlvbiBzZWxlY3RlZD1cInNlbGVjdGVkXCI+IGVsZW1lbnQgdG8gYSA8c2VsZWN0IHJlcXVpcmVkPVwicmVxdWlyZWRcIj4gc2hvdWxkXG4gICAgLy8gYXV0b21hdGljYWxseSBzZWxlY3QgdGhlIG5ldyBlbGVtZW50XG4gICAgaWYgKG9wdGlvbkVsZW1lbnRbMF0uaGFzQXR0cmlidXRlKCdzZWxlY3RlZCcpKSB7XG4gICAgICBvcHRpb25FbGVtZW50WzBdLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgcHJpb3JpdHk6IDEwMCxcbiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG5cbiAgICAgIC8vIElmIHRoZSB2YWx1ZSBhdHRyaWJ1dGUgaXMgbm90IGRlZmluZWQgdGhlbiB3ZSBmYWxsIGJhY2sgdG8gdGhlXG4gICAgICAvLyB0ZXh0IGNvbnRlbnQgb2YgdGhlIG9wdGlvbiBlbGVtZW50LCB3aGljaCBtYXkgYmUgaW50ZXJwb2xhdGVkXG4gICAgICBpZiAoaXNVbmRlZmluZWQoYXR0ci52YWx1ZSkpIHtcbiAgICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUoZWxlbWVudC50ZXh0KCksIHRydWUpO1xuICAgICAgICBpZiAoIWludGVycG9sYXRlRm4pIHtcbiAgICAgICAgICBhdHRyLiRzZXQoJ3ZhbHVlJywgZWxlbWVudC50ZXh0KCkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuXG4gICAgICAgIC8vIFRoaXMgaXMgYW4gb3B0aW1pemF0aW9uIG92ZXIgdXNpbmcgXl4gc2luY2Ugd2UgZG9uJ3Qgd2FudCB0byBoYXZlIHRvIHNlYXJjaFxuICAgICAgICAvLyBhbGwgdGhlIHdheSB0byB0aGUgcm9vdCBvZiB0aGUgRE9NIGZvciBldmVyeSBzaW5nbGUgb3B0aW9uIGVsZW1lbnRcbiAgICAgICAgdmFyIHNlbGVjdEN0cmxOYW1lID0gJyRzZWxlY3RDb250cm9sbGVyJyxcbiAgICAgICAgICAgIHBhcmVudCA9IGVsZW1lbnQucGFyZW50KCksXG4gICAgICAgICAgICBzZWxlY3RDdHJsID0gcGFyZW50LmRhdGEoc2VsZWN0Q3RybE5hbWUpIHx8XG4gICAgICAgICAgICAgIHBhcmVudC5wYXJlbnQoKS5kYXRhKHNlbGVjdEN0cmxOYW1lKTsgLy8gaW4gY2FzZSB3ZSBhcmUgaW4gb3B0Z3JvdXBcblxuICAgICAgICAvLyBPbmx5IHVwZGF0ZSB0cmlnZ2VyIG9wdGlvbiB1cGRhdGVzIGlmIHRoaXMgaXMgYW4gb3B0aW9uIHdpdGhpbiBhIGBzZWxlY3RgXG4gICAgICAgIC8vIHRoYXQgYWxzbyBoYXMgYG5nTW9kZWxgIGF0dGFjaGVkXG4gICAgICAgIGlmIChzZWxlY3RDdHJsICYmIHNlbGVjdEN0cmwubmdNb2RlbEN0cmwpIHtcblxuICAgICAgICAgIGlmIChpbnRlcnBvbGF0ZUZuKSB7XG4gICAgICAgICAgICBzY29wZS4kd2F0Y2goaW50ZXJwb2xhdGVGbiwgZnVuY3Rpb24gaW50ZXJwb2xhdGVXYXRjaEFjdGlvbihuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgICAgICAgICBhdHRyLiRzZXQoJ3ZhbHVlJywgbmV3VmFsKTtcbiAgICAgICAgICAgICAgaWYgKG9sZFZhbCAhPT0gbmV3VmFsKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0Q3RybC5yZW1vdmVPcHRpb24ob2xkVmFsKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzZWxlY3RDdHJsLmFkZE9wdGlvbihuZXdWYWwsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICBzZWxlY3RDdHJsLm5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgICAgICAgY2hyb21lSGFjayhlbGVtZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxlY3RDdHJsLmFkZE9wdGlvbihhdHRyLnZhbHVlLCBlbGVtZW50KTtcbiAgICAgICAgICAgIHNlbGVjdEN0cmwubmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICAgICAgY2hyb21lSGFjayhlbGVtZW50KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZWN0Q3RybC5yZW1vdmVPcHRpb24oYXR0ci52YWx1ZSk7XG4gICAgICAgICAgICBzZWxlY3RDdHJsLm5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxudmFyIHN0eWxlRGlyZWN0aXZlID0gdmFsdWVGbih7XG4gIHJlc3RyaWN0OiAnRScsXG4gIHRlcm1pbmFsOiBmYWxzZVxufSk7XG5cbnZhciByZXF1aXJlZERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJz9uZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7XG4gICAgICBpZiAoIWN0cmwpIHJldHVybjtcbiAgICAgIGF0dHIucmVxdWlyZWQgPSB0cnVlOyAvLyBmb3JjZSB0cnV0aHkgaW4gY2FzZSB3ZSBhcmUgb24gbm9uIGlucHV0IGVsZW1lbnRcblxuICAgICAgY3RybC4kdmFsaWRhdG9ycy5yZXF1aXJlZCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm4gIWF0dHIucmVxdWlyZWQgfHwgIWN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKTtcbiAgICAgIH07XG5cbiAgICAgIGF0dHIuJG9ic2VydmUoJ3JlcXVpcmVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59O1xuXG5cbnZhciBwYXR0ZXJuRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgIGlmICghY3RybCkgcmV0dXJuO1xuXG4gICAgICB2YXIgcmVnZXhwLCBwYXR0ZXJuRXhwID0gYXR0ci5uZ1BhdHRlcm4gfHwgYXR0ci5wYXR0ZXJuO1xuICAgICAgYXR0ci4kb2JzZXJ2ZSgncGF0dGVybicsIGZ1bmN0aW9uKHJlZ2V4KSB7XG4gICAgICAgIGlmIChpc1N0cmluZyhyZWdleCkgJiYgcmVnZXgubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnXicgKyByZWdleCArICckJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVnZXggJiYgIXJlZ2V4LnRlc3QpIHtcbiAgICAgICAgICB0aHJvdyBtaW5FcnIoJ25nUGF0dGVybicpKCdub3JlZ2V4cCcsXG4gICAgICAgICAgICAnRXhwZWN0ZWQgezB9IHRvIGJlIGEgUmVnRXhwIGJ1dCB3YXMgezF9LiBFbGVtZW50OiB7Mn0nLCBwYXR0ZXJuRXhwLFxuICAgICAgICAgICAgcmVnZXgsIHN0YXJ0aW5nVGFnKGVsbSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnZXhwID0gcmVnZXggfHwgdW5kZWZpbmVkO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMucGF0dGVybiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBpc1VuZGVmaW5lZChyZWdleHApIHx8IHJlZ2V4cC50ZXN0KHZhbHVlKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcblxuXG52YXIgbWF4bGVuZ3RoRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgIGlmICghY3RybCkgcmV0dXJuO1xuXG4gICAgICB2YXIgbWF4bGVuZ3RoID0gLTE7XG4gICAgICBhdHRyLiRvYnNlcnZlKCdtYXhsZW5ndGgnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgaW50VmFsID0gdG9JbnQodmFsdWUpO1xuICAgICAgICBtYXhsZW5ndGggPSBpc05hTihpbnRWYWwpID8gLTEgOiBpbnRWYWw7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMubWF4bGVuZ3RoID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiAobWF4bGVuZ3RoIDwgMCkgfHwgY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpIHx8ICh2aWV3VmFsdWUubGVuZ3RoIDw9IG1heGxlbmd0aCk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBtaW5sZW5ndGhEaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0ciwgY3RybCkge1xuICAgICAgaWYgKCFjdHJsKSByZXR1cm47XG5cbiAgICAgIHZhciBtaW5sZW5ndGggPSAwO1xuICAgICAgYXR0ci4kb2JzZXJ2ZSgnbWlubGVuZ3RoJywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgbWlubGVuZ3RoID0gdG9JbnQodmFsdWUpIHx8IDA7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMubWlubGVuZ3RoID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZpZXdWYWx1ZSkgfHwgdmlld1ZhbHVlLmxlbmd0aCA+PSBtaW5sZW5ndGg7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07XG5cbiAgaWYgKHdpbmRvdy5hbmd1bGFyLmJvb3RzdHJhcCkge1xuICAgIC8vQW5ndWxhckpTIGlzIGFscmVhZHkgbG9hZGVkLCBzbyB3ZSBjYW4gcmV0dXJuIGhlcmUuLi5cbiAgICBjb25zb2xlLmxvZygnV0FSTklORzogVHJpZWQgdG8gbG9hZCBhbmd1bGFyIG1vcmUgdGhhbiBvbmNlLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vdHJ5IHRvIGJpbmQgdG8ganF1ZXJ5IG5vdyBzbyB0aGF0IG9uZSBjYW4gd3JpdGUganFMaXRlKGRvY3VtZW50KS5yZWFkeSgpXG4gIC8vYnV0IHdlIHdpbGwgcmViaW5kIG9uIGJvb3RzdHJhcCBhZ2Fpbi5cbiAgYmluZEpRdWVyeSgpO1xuXG4gIHB1Ymxpc2hFeHRlcm5hbEFQSShhbmd1bGFyKTtcblxuICBqcUxpdGUoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuICAgIGFuZ3VsYXJJbml0KGRvY3VtZW50LCBib290c3RyYXApO1xuICB9KTtcblxufSkod2luZG93LCBkb2N1bWVudCk7XG5cbiF3aW5kb3cuYW5ndWxhci4kJGNzcCgpICYmIHdpbmRvdy5hbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuaGVhZCkucHJlcGVuZCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPkBjaGFyc2V0IFwiVVRGLThcIjtbbmdcXFxcOmNsb2FrXSxbbmctY2xvYWtdLFtkYXRhLW5nLWNsb2FrXSxbeC1uZy1jbG9ha10sLm5nLWNsb2FrLC54LW5nLWNsb2FrLC5uZy1oaWRlOm5vdCgubmctaGlkZS1hbmltYXRlKXtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9bmdcXFxcOmZvcm17ZGlzcGxheTpibG9jazt9Lm5nLWFuaW1hdGUtc2hpbXt2aXNpYmlsaXR5OmhpZGRlbjt9Lm5nLWFuY2hvcntwb3NpdGlvbjphYnNvbHV0ZTt9PC9zdHlsZT4nKTsiLCJyZXF1aXJlKCcuL2FuZ3VsYXInKTtcbm1vZHVsZS5leHBvcnRzID0gYW5ndWxhcjtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==