!function e(t,n,r){function o(a,s){if(!n[a]){if(!t[a]){var c="function"==typeof require&&require;if(!s&&c)return c(a,!0);if(i)return i(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var u=n[a]={exports:{}};t[a][0].call(u.exports,function(e){var n=t[a][1][e];return o(n?n:e)},u,u.exports,e,t,n,r)}return n[a].exports}for(var i="function"==typeof require&&require,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(e,t,n){"use strict";function r(e,t,n,r,i,a){function s(){var e=u||a.when(!0);e.then(function(){n("left").toggle()}),r.hide()}function c(t){e.selected=t,e.toggleList()}function l(t){function n(e){this.user=a,this.actions=[{name:"Phone",icon:"phone",icon_url:"assets/svg/phone.svg"},{name:"Twitter",icon:"twitter",icon_url:"assets/svg/twitter.svg"},{name:"Google+",icon:"google_plus",icon_url:"assets/svg/google_plus.svg"},{name:"Hangout",icon:"hangouts",icon_url:"assets/svg/hangouts.svg"}],this.submitContact=function(t){e.hide(t)}}var a=e.selected;return u=r.show({parent:o.element(document.getElementById("content")),templateUrl:"views/partials/contactSheet.html",controller:n,controllerAs:"cp",bindToController:!0,targetEvent:t}).then(function(e){e&&i.debug(e.name+" clicked!")}),n.$inject=["$mdBottomSheet"],u}e.selected=null,e.users=[],e.selectUser=c,e.toggleList=s,e.showContactOptions=l,e.isSidenavOpen=function(){return n("left").isOpen()},t.loadAllUsers().then(function(t){e.users=[].concat(t),e.selected=t[0]});var u}var o=e("angular");e("angular-material"),r.$inject=["$scope","userService","$mdSidenav","$mdBottomSheet","$log","$q"],n.UserController=r},{angular:14,"angular-material":12}],2:[function(e,t,n){"use strict";var r=e("angular"),o=r.module("sample.app"),i=e("./UserController");o.controller("UserController",i.UserController)},{"./UserController":1,angular:14}],3:[function(e,t,n){"use strict";{var r=e("angular");r.module("sample.app")}},{angular:14}],4:[function(e,t,n){"use strict";var r=e("angular");e("angular-aria"),e("angular-animate"),e("angular-material"),r.module("sample.app",["ngMaterial"]),e("./services"),e("./directives"),e("./controllers"),r.bootstrap(document,["sample.app"])},{"./controllers":2,"./directives":3,"./services":6,angular:14,"angular-animate":8,"angular-aria":10,"angular-material":12}],5:[function(e,t,n){"use strict";function r(e){var t=[{name:"Lia Lugo",avatar:"svg-1",content:"I love cheese, especially airedale queso. Cheese and biscuits halloumi cauliflower cheese cottage cheese swiss boursin fondue caerphilly. Cow port-salut camembert de normandie macaroni cheese feta who moved my cheese babybel boursin. Red leicester roquefort boursin squirty cheese jarlsberg blue castello caerphilly chalk and cheese. Lancashire."},{name:"George Duke",avatar:"svg-2",content:"Zombie ipsum reversus ab viral inferno, nam rick grimes malum cerebro. De carne lumbering animata corpora quaeritis. Summus brains sit​​, morbo vel maleficia? De apocalypsi gorger omero undead survivor dictum mauris."},{name:"Gener Delosreyes",avatar:"svg-3",content:"Raw denim pour-over readymade Etsy Pitchfork. Four dollar toast pickled locavore bitters McSweeney's blog. Try-hard art party Shoreditch selfies. Odd Future butcher VHS, disrupt pop-up Thundercats chillwave vinyl jean shorts taxidermy master cleanse letterpress Wes Anderson mustache Helvetica. Schlitz bicycle rights chillwave irony lumberhungry Kickstarter next level sriracha typewriter Intelligentsia, migas kogi heirloom tousled. Disrupt 3 wolf moon lomo four loko. Pug mlkshk fanny pack literally hoodie bespoke, put a bird on it Marfa messenger bag kogi VHS."},{name:"Lawrence Ray",avatar:"svg-4",content:"Scratch the furniture spit up on light gray carpet instead of adjacent linoleum so eat a plant, kill a hand pelt around the house and up and down stairs chasing phantoms run in circles, or claw drapes. Always hungry pelt around the house and up and down stairs chasing phantoms."},{name:"Ernesto Urbina",avatar:"svg-5",content:"Webtwo ipsum dolor sit amet, eskobo chumby doostang bebo. Bubbli greplin stypi prezi mzinga heroku wakoopa, shopify airbnb dogster dopplr gooru jumo, reddit plickers edmodo stypi zillow etsy."},{name:"Gani Ferrer",avatar:"svg-6",content:"Lebowski ipsum yeah? What do you think happens when you get rad? You turn in your library card? Get a new driver's license? Stop being awesome? Dolor sit amet, consectetur adipiscing elit praesent ac magna justo pellentesque ac lectus. You don't go out and make a living dressed like that in the middle of a weekday. Quis elit blandit fringilla a ut turpis praesent felis ligula, malesuada suscipit malesuada."}];return{loadAllUsers:function(){return e.when(t)}}}r.$inject=["$q"],n.UserServiceFactory=r},{}],6:[function(e,t,n){"use strict";var r=e("angular"),o=r.module("sample.app");o.config(["$mdThemingProvider","$mdIconProvider",function(e,t){t.defaultIconSet("./assets/svg/avatars.svg",128).icon("menu","./assets/svg/menu.svg",24).icon("share","./assets/svg/share.svg",24).icon("google_plus","./assets/svg/google_plus.svg",512).icon("hangouts","./assets/svg/hangouts.svg",512).icon("twitter","./assets/svg/twitter.svg",512).icon("phone","./assets/svg/phone.svg",512),e.theme("default").primaryPalette("indigo").accentPalette("blue-grey")}]);var i=e("./UserService");o.service("userService",i.UserServiceFactory)},{"./UserService":5,angular:14}],7:[function(e,t,n){!function(e,t,n){"use strict";function r(e,t,n){if(!e)throw ngMinErr("areq","Argument '{0}' is {1}",t||"?",n||"required");return e}function o(e,t){return e||t?e?t?(j(e)&&(e=e.join(" ")),j(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function i(e){var t={};return e&&(e.to||e.from)&&(t.to=e.to,t.from=e.from),t}function a(e,t,n){var r="";return e=j(e)?e:e&&L(e)&&e.length?e.split(/\s+/):[],P(e,function(e,o){e&&e.length>0&&(r+=o>0?" ":"",r+=n?t+e:e+t)}),r}function s(e,t){var n=e.indexOf(t);t>=0&&e.splice(n,1)}function c(e){if(e instanceof R)switch(e.length){case 0:return[];case 1:if(e[0].nodeType===z)return e;break;default:return R(l(e))}return e.nodeType===z?R(e):void 0}function l(e){if(!e[0])return e;for(var t=0;t<e.length;t++){var n=e[t];if(n.nodeType==z)return n}}function u(e,t,n){P(t,function(t){e.addClass(t,n)})}function d(e,t,n){P(t,function(t){e.removeClass(t,n)})}function m(e){return function(t,n){n.addClass&&(u(e,t,n.addClass),n.addClass=null),n.removeClass&&(d(e,t,n.removeClass),n.removeClass=null)}}function f(e){if(e=e||{},!e.$$prepared){var t=e.domOperation||D;e.domOperation=function(){e.$$domOperationFired=!0,t(),t=D},e.$$prepared=!0}return e}function p(e,t){h(e,t),g(e,t)}function h(e,t){t.from&&(e.css(t.from),t.from=null)}function g(e,t){t.to&&(e.css(t.to),t.to=null)}function v(e,t,n){var r=(t.addClass||"")+" "+(n.addClass||""),o=(t.removeClass||"")+" "+(n.removeClass||""),i=$(e.attr("class"),r,o);return I(t,n),t.addClass=i.addClass?i.addClass:null,t.removeClass=i.removeClass?i.removeClass:null,t}function $(e,t,n){function r(e){L(e)&&(e=e.split(" "));var t={};return P(e,function(e){e.length&&(t[e]=!0)}),t}var o=1,i=-1,a={};e=r(e),t=r(t),P(t,function(e,t){a[t]=o}),n=r(n),P(n,function(e,t){a[t]=a[t]===o?null:i});var s={addClass:"",removeClass:""};return P(a,function(t,n){var r,a;t===o?(r="addClass",a=!e[n]):t===i&&(r="removeClass",a=e[n]),a&&(s[r].length&&(s[r]+=" "),s[r]+=n)}),s}function b(e){return e instanceof t.element?e[0]:e}function E(e,t,n){var r=Object.create(null),o=e.getComputedStyle(t)||{};return P(n,function(e,t){var n=o[e];if(n){var i=n.charAt(0);("-"===i||"+"===i||i>=0)&&(n=y(n)),0===n&&(n=null),r[t]=n}}),r}function y(e){var t=0,n=e.split(/\s*,\s*/);return P(n,function(e){"s"==e.charAt(e.length-1)&&(e=e.substring(0,e.length-1)),e=parseFloat(e)||0,t=t?Math.max(e,t):e}),t}function M(e){return 0===e||null!=e}function w(e,t){var n=N,r=e+"s";return t?n+=Z:r+=" linear all",[n,r]}function C(e){return[ce,e+"s"]}function A(e,t){var n=t?se:le;return[n,e+"s"]}function x(e,t){var n=t?"-"+t+"s":"";return k(e,[le,n]),[le,n]}function T(e,t){var n=t?"paused":"",r=H+ne;return k(e,[r,n]),[r,n]}function k(e,t){var n=t[0],r=t[1];e.style[n]=r}function S(){var e=Object.create(null);return{flush:function(){e=Object.create(null)},count:function(t){var n=e[t];return n?n.total:0},get:function(t){var n=e[t];return n&&n.value},put:function(t,n){e[t]?e[t].total++:e[t]={total:1,value:n}}}}var N,_,H,O,D=t.noop,I=t.extend,R=t.element,P=t.forEach,j=t.isArray,L=t.isString,F=t.isObject,V=t.isUndefined,q=t.isDefined,B=t.isFunction,U=t.isElement,z=1,W="ng-animate",K="$$ngAnimateChildren",Y=["$$rAF",function(e){function t(e){i.push([].concat(e)),n()}function n(){if(i.length){for(var t=[],a=0;a<i.length;a++){var s=i[a];r(s),s.length&&t.push(s)}i=t,o||e(function(){o||n()})}}function r(e){var t=e.shift();t()}var o,i=[];return t.waitUntilQuiet=function(t){o&&o(),o=e(function(){o=null,t(),n()})},t}],G=[function(){return function(e,n,r){var o=r.ngAnimateChildren;t.isString(o)&&0===o.length?n.data(K,!0):r.$observe("ngAnimateChildren",function(e){e="on"===e||"true"===e,n.data(K,e)})}}],X="";e.ontransitionend===n&&e.onwebkittransitionend!==n?(X="-webkit-",N="WebkitTransition",_="webkitTransitionEnd transitionend"):(N="transition",_="transitionend"),e.onanimationend===n&&e.onwebkitanimationend!==n?(X="-webkit-",H="WebkitAnimation",O="webkitAnimationEnd animationend"):(H="animation",O="animationend");var Z="Duration",J="Property",Q="Delay",ee="TimingFunction",te="IterationCount",ne="PlayState",re=3,oe=1.5,ie=1e3,ae=9999,se=H+Q,ce=H+Z,le=N+Q,ue=N+Z,de={transitionDuration:ue,transitionDelay:le,transitionProperty:N+J,animationDuration:ce,animationDelay:se,animationIterationCount:H+te},me={transitionDuration:ue,transitionDelay:le,animationDuration:ce,animationDelay:se},fe=["$animateProvider",function(e){var t=S(),n=S();this.$get=["$window","$$jqLite","$$AnimateRunner","$timeout","$document","$sniffer","$$rAFScheduler",function(e,r,o,c,l,u,d){function v(e,t){var n="$$ngAnimateParentKey",r=e.parentNode,o=r[n]||(r[n]=++L);return o+"-"+e.getAttribute("class")+"-"+t}function $(n,r,o,i){var a=t.get(o);return a||(a=E(e,n,i),"infinite"===a.animationIterationCount&&(a.animationIterationCount=1)),t.put(o,a),a}function y(o,i,s,c){var l;if(t.count(s)>0&&(l=n.get(s),!l)){var u=a(i,"-stagger");r.addClass(o,u),l=E(e,o,c),l.animationDuration=Math.max(l.animationDuration,0),l.transitionDuration=Math.max(l.transitionDuration,0),r.removeClass(o,u),n.put(s,l)}return l||{}}function S(e){V.push(e),d.waitUntilQuiet(function(){t.flush(),n.flush();for(var e=F.offsetWidth+1,r=0;r<V.length;r++)V[r](e);V.length=0})}function D(e,t,n){var r=$(e,t,n,de),o=r.animationDelay,i=r.transitionDelay;return r.maxDelay=o&&i?Math.max(o,i):o||i,r.maxDuration=Math.max(r.animationDuration*r.animationIterationCount,r.transitionDuration),r}function I(e,n){function l(){m()}function d(){m(!0)}function m(t){F||q&&V||(F=!0,V=!1,r.removeClass(e,ce),r.removeClass(e,ue),T(L,!1),x(L,!1),P(G,function(e){L.style[e[0]]=""}),R(e,n),p(e,n),n.onDone&&n.onDone(),B&&B.complete(!t))}function $(e){Ae.blockTransition&&x(L,e),Ae.blockKeyframeAnimation&&T(L,!!e)}function E(){return B=new o({end:l,cancel:d}),m(),{$$willAnimate:!1,start:function(){return B},end:l}}function I(){function t(){if(!F){if($(!1),P(G,function(e){var t=e[0],n=e[1];L.style[t]=n}),R(e,n),r.addClass(e,ue),Ae.recalculateTimingStyles){if(le=L.className+" "+ce,pe=v(L,le),we=D(L,le,pe),Ce=we.maxDelay,z=Math.max(Ce,0),K=we.maxDuration,0===K)return void m();Ae.hasTransitions=we.transitionDuration>0,Ae.hasAnimations=we.animationDuration>0}if(Ae.applyTransitionDelay||Ae.applyAnimationDelay){Ce="boolean"!=typeof n.delay&&M(n.delay)?parseFloat(n.delay):Ce,z=Math.max(Ce,0);var t;Ae.applyTransitionDelay&&(we.transitionDelay=Ce,t=A(Ce),G.push(t),L.style[t[0]]=t[1]),Ae.applyAnimationDelay&&(we.animationDelay=Ce,t=A(Ce,!0),G.push(t),L.style[t[0]]=t[1])}if(W=z*ie,Y=K*ie,n.easing){var s,u=n.easing;Ae.hasTransitions&&(s=N+ee,G.push([s,u]),L.style[s]=u),Ae.hasAnimations&&(s=H+ee,G.push([s,u]),L.style[s]=u)}we.transitionDuration&&l.push(_),we.animationDuration&&l.push(O),a=Date.now(),e.on(l.join(" "),i),c(o,W+oe*Y),g(e,n)}}function o(){m()}function i(e){e.stopPropagation();var t=e.originalEvent||e,n=t.$manualTimeStamp||t.timeStamp||Date.now(),r=parseFloat(t.elapsedTime.toFixed(re));Math.max(n-a,0)>=W&&r>=K&&(q=!0,m())}if(!F){if(!L.parentNode)return void m();var a,l=[],u=function(e){if(q)V&&e&&(V=!1,m());else if(V=!e,we.animationDuration){var t=T(L,V);V?G.push(t):s(G,t)}},d=ye>0&&(we.transitionDuration&&0===he.transitionDuration||we.animationDuration&&0===he.animationDuration)&&Math.max(he.animationDelay,he.transitionDelay);d?c(t,Math.floor(d*ye*ie),!1):t(),U.resume=function(){u(!0)},U.pause=function(){u(!1)}}}var L=b(e);if(!L||!L.parentNode)return E();n=f(n);var F,V,q,B,U,z,W,K,Y,G=[],X=e.attr("class"),Z=i(n);if(0===n.duration||!u.animations&&!u.transitions)return E();var Q=n.event&&j(n.event)?n.event.join(" "):n.event,te=Q&&n.structural,ne="",se="";te?ne=a(Q,"ng-",!0):Q&&(ne=Q),n.addClass&&(se+=a(n.addClass,"-add")),n.removeClass&&(se.length&&(se+=" "),se+=a(n.removeClass,"-remove")),n.applyClassesEarly&&se.length&&(R(e,n),se="");var ce=[ne,se].join(" ").trim(),le=X+" "+ce,ue=a(ce,"-active"),de=Z.to&&Object.keys(Z.to).length>0,fe=(n.keyframeStyle||"").length>0;if(!fe&&!de&&!ce)return E();var pe,he;if(n.stagger>0){var ge=parseFloat(n.stagger);he={transitionDelay:ge,animationDelay:ge,transitionDuration:0,animationDuration:0}}else pe=v(L,le),he=y(L,ce,pe,me);r.addClass(e,ce);var ve;if(n.transitionStyle){var $e=[N,n.transitionStyle];k(L,$e),G.push($e)}if(n.duration>=0){ve=L.style[N].length>0;var be=w(n.duration,ve);k(L,be),G.push(be)}if(n.keyframeStyle){var Ee=[H,n.keyframeStyle];k(L,Ee),G.push(Ee)}var ye=he?n.staggerIndex>=0?n.staggerIndex:t.count(pe):0,Me=0===ye;Me&&x(L,ae);var we=D(L,le,pe),Ce=we.maxDelay;z=Math.max(Ce,0),K=we.maxDuration;var Ae={};return Ae.hasTransitions=we.transitionDuration>0,Ae.hasAnimations=we.animationDuration>0,Ae.hasTransitionAll=Ae.hasTransitions&&"all"==we.transitionProperty,Ae.applyTransitionDuration=de&&(Ae.hasTransitions&&!Ae.hasTransitionAll||Ae.hasAnimations&&!Ae.hasTransitions),Ae.applyAnimationDuration=n.duration&&Ae.hasAnimations,Ae.applyTransitionDelay=M(n.delay)&&(Ae.applyTransitionDuration||Ae.hasTransitions),Ae.applyAnimationDelay=M(n.delay)&&Ae.hasAnimations,Ae.recalculateTimingStyles=se.length>0,(Ae.applyTransitionDuration||Ae.applyAnimationDuration)&&(K=n.duration?parseFloat(n.duration):K,Ae.applyTransitionDuration&&(Ae.hasTransitions=!0,we.transitionDuration=K,ve=L.style[N+J].length>0,G.push(w(K,ve))),Ae.applyAnimationDuration&&(Ae.hasAnimations=!0,we.animationDuration=K,G.push(C(K)))),0!==K||Ae.recalculateTimingStyles?(null==n.duration&&we.transitionDuration>0&&(Ae.recalculateTimingStyles=Ae.recalculateTimingStyles||Me),W=z*ie,Y=K*ie,n.skipBlocking||(Ae.blockTransition=we.transitionDuration>0,Ae.blockKeyframeAnimation=we.animationDuration>0&&he.animationDelay>0&&0===he.animationDuration),h(e,n),Ae.blockTransition||x(L,!1),$(K),{$$willAnimate:!0,end:l,start:function(){return F?void 0:(U={end:l,cancel:d,resume:null,pause:null},B=new o(U),S(I),B)}}):E()}var R=m(r),L=0,F=b(l).body,V=[];return I}]}],pe=["$$animationProvider",function(e){e.drivers.push("$$animateCssDriver");var t="ng-animate-shim",n="ng-anchor",r="ng-anchor-out",o="ng-anchor-in";this.$get=["$animateCss","$rootScope","$$AnimateRunner","$rootElement","$document","$sniffer",function(e,i,a,s,c,l){function u(e){return e.replace(/\bng-\S+\b/g,"")}function d(e,t){return L(e)&&(e=e.split(" ")),L(t)&&(t=t.split(" ")),e.filter(function(e){return-1===t.indexOf(e)}).join(" ")}function m(i,s,c){function l(e){var t={},n=b(e).getBoundingClientRect();return P(["width","height","top","left"],function(e){var r=n[e];switch(e){case"top":r+=h.scrollTop;break;case"left":r+=h.scrollLeft}t[e]=Math.floor(r)+"px"}),t}function m(){var t=e($,{addClass:r,delay:!0,from:l(s)});return t.$$willAnimate?t:null}function f(e){return e.attr("class")||""}function p(){var t=u(f(c)),n=d(t,E),i=d(E,t),a=e($,{to:l(c),addClass:o+" "+n,removeClass:r+" "+i,delay:!0});return a.$$willAnimate?a:null}function g(){$.remove(),s.removeClass(t),c.removeClass(t)}var $=R(b(s).cloneNode(!0)),E=u(f($));s.addClass(t),c.addClass(t),$.addClass(n),v.append($);var y,M=m();if(!M&&(y=p(),!y))return g();var w=M||y;return{start:function(){function e(){n&&n.end()}var t,n=w.start();return n.done(function(){return n=null,!y&&(y=p())?(n=y.start(),n.done(function(){n=null,g(),t.complete()}),n):(g(),void t.complete())}),t=new a({end:e,cancel:e})}}}function f(e,t,n,r){var o=p(e),i=p(t),s=[];return P(r,function(e){var t=e.out,r=e["in"],o=m(n,t,r);o&&s.push(o)}),o||i||0!==s.length?{start:function(){function e(){P(t,function(e){e.end()})}var t=[];o&&t.push(o.start()),i&&t.push(i.start()),P(s,function(e){t.push(e.start())});var n=new a({end:e,cancel:e});return a.all(t,function(e){n.complete(e)}),n}}:void 0}function p(t){var n=t.element,r=t.options||{};t.structural?(r.structural=r.applyClassesEarly=!0,r.event=t.event,"leave"===r.event&&(r.onDone=r.domOperation)):r.event=null;var o=e(n,r);return o.$$willAnimate?o:null}if(!l.animations&&!l.transitions)return D;var h=b(c).body,g=b(s),v=R(h.parentNode===g?h:g);return function(e){return e.from&&e.to?f(e.from,e.to,e.classes,e.anchors):p(e)}}]}],he=["$animateProvider",function(e){this.$get=["$injector","$$AnimateRunner","$$rAFMutex","$$jqLite",function(t,n,r,o){function i(n){n=j(n)?n:n.split(" ");for(var r=[],o={},i=0;i<n.length;i++){var a=n[i],s=e.$$registeredAnimations[a];s&&!o[a]&&(r.push(t.get(s)),o[a]=!0)}return r}var a=m(o);return function(e,t,r,o){function s(){o.domOperation(),a(e,o)}function c(e,t,r,o,i){var a;switch(r){case"animate":a=[t,o.from,o.to,i];break;case"setClass":a=[t,h,g,i];break;case"addClass":a=[t,h,i];break;case"removeClass":a=[t,g,i];break;default:a=[t,i]}a.push(o);var s=e.apply(e,a);if(s)if(B(s.start)&&(s=s.start()),s instanceof n)s.done(i);else if(B(s))return s;return D}function l(e,t,r,o,i){var a=[];return P(o,function(o){var s=o[i];s&&a.push(function(){var o,i,a=!1,l=function(e){a||(a=!0,(i||D)(e),o.complete(!e))};return o=new n({end:function(){l()},cancel:function(){l(!0)}}),i=c(s,e,t,r,function(e){var t=e===!1;l(t)}),o})}),a}function u(e,t,r,o,i){var a=l(e,t,r,o,i);if(0===a.length){var s,c;"beforeSetClass"===i?(s=l(e,"removeClass",r,o,"beforeRemoveClass"),c=l(e,"addClass",r,o,"beforeAddClass")):"setClass"===i&&(s=l(e,"removeClass",r,o,"removeClass"),c=l(e,"addClass",r,o,"addClass")),s&&(a=a.concat(s)),c&&(a=a.concat(c))}if(0!==a.length)return function(e){var t=[];return a.length&&P(a,function(e){t.push(e())}),t.length?n.all(t,e):e(),function(e){P(t,function(t){e?t.cancel():t.end()})}}}3===arguments.length&&F(r)&&(o=r,r=null),o=f(o),r||(r=e.attr("class")||"",o.addClass&&(r+=" "+o.addClass),o.removeClass&&(r+=" "+o.removeClass));var d,m,h=o.addClass,g=o.removeClass,v=i(r);if(v.length){var $,b;"leave"==t?(b="leave",$="afterLeave"):(b="before"+t.charAt(0).toUpperCase()+t.substr(1),$=t),"enter"!==t&&"move"!==t&&(d=u(e,t,o,v,b)),m=u(e,t,o,v,$)}return d||m?{start:function(){function t(t){c=!0,s(),p(e,o),l.complete(t)}function r(e){c||((i||D)(e),t(e))}var i,a=[];d&&a.push(function(e){i=d(e)}),a.length?a.push(function(e){s(),e(!0)}):s(),m&&a.push(function(e){i=m(e)});var c=!1,l=new n({end:function(){r()},cancel:function(){r(!0)}});return n.chain(a,t),l}}:void 0}}]}],ge=["$$animationProvider",function(e){e.drivers.push("$$animateJsDriver"),this.$get=["$$animateJs","$$AnimateRunner",function(e,t){function n(t){var n=t.element,r=t.event,o=t.options,i=t.classes;return e(n,r,i,o)}return function(e){if(e.from&&e.to){var r=n(e.from),o=n(e.to);if(!r&&!o)return;return{start:function(){function e(){return function(){P(i,function(e){e.end()})}}function n(e){a.complete(e)}var i=[];r&&i.push(r.start()),o&&i.push(o.start()),t.all(i,n);var a=new t({end:e(),cancel:e()});return a}}}return n(e)}}]}],ve="data-ng-animate",$e="$ngAnimatePin",be=["$animateProvider",function(e){function t(e,t,n,r){return a[e].some(function(e){return e(t,n,r)})}function n(e,t){e=e||{};var n=(e.addClass||"").length>0,r=(e.removeClass||"").length>0;return t?n&&r:n||r}var o=1,i=2,a=this.rules={skip:[],cancel:[],join:[]};a.join.push(function(e,t,r){return!t.structural&&n(t.options)}),a.skip.push(function(e,t,r){return!t.structural&&!n(t.options)}),a.skip.push(function(e,t,n){return"leave"==n.event&&t.structural}),a.skip.push(function(e,t,n){return n.structural&&!t.structural}),a.cancel.push(function(e,t,n){return n.structural&&t.structural}),a.cancel.push(function(e,t,n){return n.state===i&&t.structural}),a.cancel.push(function(e,t,n){var r=t.options,o=n.options;return r.addClass&&r.addClass===o.removeClass||r.removeClass&&r.removeClass===o.addClass}),this.$get=["$$rAF","$rootScope","$rootElement","$document","$$HashMap","$$animation","$$AnimateRunner","$templateRequest","$$jqLite",function(a,s,u,d,h,g,$,E,y){function M(e,t){return v(e,t,{})}function w(e,t){var n=b(e),r=[],o=W[t];return o&&P(o,function(e){e.node.contains(n)&&r.push(e.callback)}),r}function C(e,t,n,r){a(function(){P(w(t,e),function(e){e(t,n,r)})})}function A(e,r,a){function l(t,n,r,o){C(n,e,r,o),t.progress(n,r,o)}function u(t){X(e,a),p(e,a),a.domOperation(),h.complete(!t)}var d,m;e=c(e),e&&(d=b(e),m=e.parent()),a=f(a);var h=new $;if(!d)return u(),h;j(a.addClass)&&(a.addClass=a.addClass.join(" ")),j(a.removeClass)&&(a.removeClass=a.removeClass.join(" ")),a.from&&!F(a.from)&&(a.from=null),a.to&&!F(a.to)&&(a.to=null);var E=[d.className,a.addClass,a.removeClass].join(" ");if(!G(E))return u(),h;var y=["enter","move","leave"].indexOf(r)>=0,w=!D||O.get(d),A=!w&&H.get(d)||{},k=!!A.state;if(w||k&&A.state==o||(w=!N(e,m,r)),w)return u(),h;y&&x(e);var I={structural:y,element:e,event:r,close:u,options:a,runner:h};if(k){var R=t("skip",e,I,A);if(R)return A.state===i?(u(),h):(v(e,A.options,a),A.runner);var P=t("cancel",e,I,A);if(P)A.state===i?A.runner.end():A.structural?A.close():v(e,I.options,A.options);else{var L=t("join",e,I,A);if(L){if(A.state!==i)return r=I.event=A.event,a=v(e,A.options,I.options),h;M(e,a)}}}else M(e,a);var V=I.structural;if(V||(V="animate"===I.event&&Object.keys(I.options.to||{}).length>0||n(I.options)),!V)return u(),T(e),h;y&&S(m);var q=(A.counter||0)+1;return I.counter=q,_(e,o,I),s.$$postDigest(function(){var t=H.get(d),o=!t;t=t||{};var s=e.parent()||[],c=s.length>0&&("animate"===t.event||t.structural||n(t.options));if(o||t.counter!==q||!c)return o&&(X(e,a),p(e,a)),(o||y&&t.event!==r)&&(a.domOperation(),h.end()),void(c||T(e));r=!t.structural&&n(t.options,!0)?"setClass":t.event,t.structural&&S(s),_(e,i);var m=g(e,r,t.options);m.done(function(t){u(!t);var n=H.get(d);n&&n.counter===q&&T(b(e)),l(h,r,"close",{})}),h.setHost(m),l(h,r,"start",{})}),h}function x(e){var t=b(e),n=t.querySelectorAll("["+ve+"]");P(n,function(e){var t=parseInt(e.getAttribute(ve)),n=H.get(e);switch(t){case i:n.runner.end();case o:n&&H.remove(e)}})}function T(e){var t=b(e);t.removeAttribute(ve),H.remove(t)}function k(e,t){return b(e)===b(t)}function S(e){function t(e,t){!t.structural&&n(t.options)&&(t.state===i&&t.runner.end(),T(e))}for(var r=b(e);;){if(!r||r.nodeType!==z)break;var o=H.get(r);o&&t(r,o),r=r.parentNode}}function N(e,t,n){var r,o=!1,i=!1,a=!1,s=e.data($e);for(s&&(t=s);t&&t.length;){i||(i=k(t,u));var c=t[0];if(c.nodeType!==z)break;var l=H.get(c)||{};if(a||(a=l.structural||O.get(c)),V(r)||r===!0){var d=t.data(K);q(d)&&(r=d)}if(a&&r===!1)break;i||(i=k(t,u),i||(s=t.data($e),s&&(t=s))),o||(o=k(t,B)),t=t.parent()}var m=!a||r;return m&&i&&o}function _(e,t,n){n=n||{},n.state=t;var r=b(e);r.setAttribute(ve,t);var o=H.get(r),i=o?I(o,n):n;H.put(r,i)}var H=new h,O=new h,D=null,L=s.$watch(function(){return 0===E.totalPendingRequests},function(e){e&&(L(),s.$$postDigest(function(){s.$$postDigest(function(){null===D&&(D=!0)})}))}),B=R(d[0].body),W={},Y=e.classNameFilter(),G=Y?function(e){return Y.test(e)}:function(){return!0},X=m(y);return{on:function(e,t,n){var r=l(t);W[e]=W[e]||[],W[e].push({node:r,callback:n})},off:function(e,t,n){function r(e,t,n){var r=l(t);return e.filter(function(e){var t=e.node===r&&(!n||e.callback===n);return!t})}var o=W[e];o&&(W[e]=1===arguments.length?null:r(o,t,n))},pin:function(e,t){r(U(e),"element","not an element"),r(U(t),"parentElement","not an element"),e.data($e,t)},push:function(e,t,n,r){return n=n||{},n.domOperation=r,A(e,t,n)},enabled:function(e,t){var n=arguments.length;if(0===n)t=!!D;else{var r=U(e);if(r){var o=b(e),i=O.get(o);1===n?t=!i:(t=!!t,t?i&&O.remove(o):O.put(o,!0))}else t=D=!!e}return t}}}]}],Ee=["$$rAF",function(e){return function(){var t=!1;return e(function(){t=!0}),function(n){t?n():e(n)}}}],ye=["$q","$$rAFMutex",function(e,t){function n(e){this.setHost(e),this._doneCallbacks=[],this._runInAnimationFrame=t(),this._state=0}var r=0,o=1,i=2;return n.chain=function(e,t){function n(){return r===e.length?void t(!0):void e[r](function(e){return e===!1?void t(!1):(r++,void n())})}var r=0;n()},n.all=function(e,t){function n(n){o=o&&n,++r===e.length&&t(o)}var r=0,o=!0;P(e,function(e){e.done(n)})},n.prototype={setHost:function(e){this.host=e||{}},done:function(e){this._state===i?e():this._doneCallbacks.push(e)},progress:D,getPromise:function(){if(!this.promise){var t=this;this.promise=e(function(e,n){t.done(function(t){t===!1?n():e()})})}return this.promise},then:function(e,t){return this.getPromise().then(e,t)},"catch":function(e){return this.getPromise()["catch"](e)},"finally":function(e){return this.getPromise()["finally"](e)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(e){var t=this;t._state===r&&(t._state=o,t._runInAnimationFrame(function(){t._resolve(e)}))},_resolve:function(e){this._state!==i&&(P(this._doneCallbacks,function(t){t(e)}),this._doneCallbacks.length=0,this._state=i)}},n}],Me=["$animateProvider",function(e){function t(e,t){e.data(s,t)}function n(e){e.removeData(s)}function r(e){return e.data(s)}var i="ng-animate-ref",a=this.drivers=[],s="$$animationRunner";this.$get=["$$jqLite","$rootScope","$injector","$$AnimateRunner","$$rAFScheduler",function(e,s,c,l,u){var d=[],h=m(e),g=0,v=0,$=[];return function(m,E,y){function M(e){var t="["+i+"]",n=e.hasAttribute(i)?[e]:e.querySelectorAll(t),r=[];return P(n,function(e){var t=e.getAttribute(i);t&&t.length&&r.push(e)}),r}function w(e){var t=[],n={};P(e,function(e,r){var o=e.element,a=b(o),s=e.event,c=["enter","move"].indexOf(s)>=0,l=e.structural?M(a):[];if(l.length){var u=c?"to":"from";P(l,function(e){var t=e.getAttribute(i);n[t]=n[t]||{},n[t][u]={animationID:r,element:R(e)}})}else t.push(e)});var r={},o={};return P(n,function(n,i){var a=n.from,s=n.to;if(!a||!s){var c=a?a.animationID:s.animationID,l=c.toString();return void(r[l]||(r[l]=!0,t.push(e[c])))}var u=e[a.animationID],d=e[s.animationID],m=a.animationID.toString();if(!o[m]){var f=o[m]={structural:!0,beforeStart:function(){u.beforeStart(),d.beforeStart()},close:function(){u.close(),d.close()},classes:C(u.classes,d.classes),from:u,to:d,anchors:[]};f.classes.length?t.push(f):(t.push(u),t.push(d))}o[m].anchors.push({out:a.element,"in":s.element})}),t}function C(e,t){e=e.split(" "),t=t.split(" ");for(var n=[],r=0;r<e.length;r++){var o=e[r];if("ng-"!==o.substring(0,3))for(var i=0;i<t.length;i++)if(o===t[i]){n.push(o);break}}return n.join(" ")}function A(e){for(var t=a.length-1;t>=0;t--){var n=a[t];if(c.has(n)){var r=c.get(n),o=r(e);if(o)return o}}}function x(){m.addClass(W),O&&e.addClass(m,O)}function T(e,t){function n(e){r(e).setHost(t)}e.from&&e.to?(n(e.from.element),n(e.to.element)):n(e.element)}function k(){var e=r(m);!e||"leave"===E&&y.$$domOperationFired||e.end()}function S(t){m.off("$destroy",k),n(m),h(m,y),p(m,y),y.domOperation(),O&&e.removeClass(m,O),m.removeClass(W),_.complete(!t)}y=f(y);var N=["enter","move","leave"].indexOf(E)>=0,_=new l({end:function(){S()},cancel:function(){S(!0)}});if(!a.length)return S(),_;t(m,_);var H=o(m.attr("class"),o(y.addClass,y.removeClass)),O=y.tempClasses;O&&(H+=" "+O,y.tempClasses=null);var D;return N||(D=g,g+=1),d.push({element:m,classes:H,event:E,classBasedIndex:D,structural:N,options:y,beforeStart:x,close:S}),m.on("$destroy",k),d.length>1?_:(s.$$postDigest(function(){v=g,g=0,$.length=0;var e=[];P(d,function(t){r(t.element)&&e.push(t)}),d.length=0,P(w(e),function(e){function t(){e.beforeStart();var t,n=e.close,o=e.anchors?e.from.element||e.to.element:e.element;if(r(o)&&b(o).parentNode){var i=A(e);i&&(t=i.start)}if(t){var a=t();a.done(function(e){n(!e)}),T(e,a)}else n()}e.structural?t():($.push({node:b(e.element),fn:t}),e.classBasedIndex===v-1&&($=$.sort(function(e,t){return t.node.contains(e.node)}).map(function(e){return e.fn}),u($)))})}),_)}}]}];t.module("ngAnimate",[]).directive("ngAnimateChildren",G).factory("$$rAFMutex",Ee).factory("$$rAFScheduler",Y).factory("$$AnimateRunner",ye).provider("$$animateQueue",be).provider("$$animation",Me).provider("$animateCss",fe).provider("$$animateCssDriver",pe).provider("$$animateJs",he).provider("$$animateJsDriver",ge)}(window,window.angular)},{}],8:[function(e,t,n){e("./angular-animate"),t.exports="ngAnimate"},{"./angular-animate":7}],9:[function(e,t,n){!function(e,t,n){"use strict";function r(){function e(e,t,r){return function(o,i,a){var s=a.$normalize(t);n[s]&&!a[s]&&o.$watch(a[e],function(e){e=r?!e:!!e,i.attr(t,e)})}}var n={ariaHidden:!0,ariaChecked:!0,ariaDisabled:!0,ariaRequired:!0,ariaInvalid:!0,ariaMultiline:!0,ariaValue:!0,tabindex:!0,bindKeypress:!0,bindRoleForClick:!0};this.config=function(e){n=t.extend(n,e)},this.$get=function(){return{config:function(e){return n[e]},$$watchExpr:e}}}var o=t.module("ngAria",["ng"]).provider("$aria",r);o.directive("ngShow",["$aria",function(e){return e.$$watchExpr("ngShow","aria-hidden",!0)}]).directive("ngHide",["$aria",function(e){return e.$$watchExpr("ngHide","aria-hidden",!1)}]).directive("ngModel",["$aria",function(e){function t(t,n,r){return e.config(n)&&!r.attr(t)}function n(e,t){return!t.attr("role")&&t.attr("type")===e&&"INPUT"!==t[0].nodeName}function r(e,t){var n=e.type,r=e.role;return"checkbox"===(n||r)||"menuitemcheckbox"===r?"checkbox":"radio"===(n||r)||"menuitemradio"===r?"radio":"range"===n||"progressbar"===r||"slider"===r?"range":"textbox"===(n||r)||"TEXTAREA"===t[0].nodeName?"multiline":""}return{restrict:"A",require:"?ngModel",priority:200,compile:function(o,i){var a=r(i,o);return{pre:function(e,t,n,r){"checkbox"===a&&"checkbox"!==n.type&&(r.$isEmpty=function(e){return e===!1})},post:function(r,o,i,s){function c(){return s.$modelValue}function l(){return d?(d=!1,function(e){var t=i.value==s.$viewValue;o.attr("aria-checked",t),o.attr("tabindex",0-!t)}):function(e){o.attr("aria-checked",i.value==s.$viewValue)}}function u(){o.attr("aria-checked",!s.$isEmpty(s.$viewValue))}var d=t("tabindex","tabindex",o);switch(a){case"radio":case"checkbox":n(a,o)&&o.attr("role",a),t("aria-checked","ariaChecked",o)&&r.$watch(c,"radio"===a?l():u);break;case"range":if(n(a,o)&&o.attr("role","slider"),e.config("ariaValue")){var m=!o.attr("aria-valuemin")&&(i.hasOwnProperty("min")||i.hasOwnProperty("ngMin")),f=!o.attr("aria-valuemax")&&(i.hasOwnProperty("max")||i.hasOwnProperty("ngMax")),p=!o.attr("aria-valuenow");m&&i.$observe("min",function(e){o.attr("aria-valuemin",e)}),f&&i.$observe("max",function(e){o.attr("aria-valuemax",e)}),p&&r.$watch(c,function(e){o.attr("aria-valuenow",e)})}break;case"multiline":t("aria-multiline","ariaMultiline",o)&&o.attr("aria-multiline",!0)}d&&o.attr("tabindex",0),s.$validators.required&&t("aria-required","ariaRequired",o)&&r.$watch(function(){return s.$error.required},function(e){o.attr("aria-required",!!e)}),t("aria-invalid","ariaInvalid",o)&&r.$watch(function(){return s.$invalid},function(e){o.attr("aria-invalid",!!e)})}}}}}]).directive("ngDisabled",["$aria",function(e){return e.$$watchExpr("ngDisabled","aria-disabled")}]).directive("ngMessages",function(){
return{restrict:"A",require:"?ngMessages",link:function(e,t,n,r){t.attr("aria-live")||t.attr("aria-live","assertive")}}}).directive("ngClick",["$aria","$parse",function(e,t){return{restrict:"A",compile:function(n,r){var o=t(r.ngClick,null,!0);return function(t,n,r){function i(e,t){return-1!==t.indexOf(e[0].nodeName)?!0:void 0}var a=["BUTTON","A","INPUT","TEXTAREA"];!e.config("bindRoleForClick")||n.attr("role")||i(n,a)||n.attr("role","button"),e.config("tabindex")&&!n.attr("tabindex")&&n.attr("tabindex",0),!e.config("bindKeypress")||r.ngKeypress||i(n,a)||n.on("keypress",function(e){function n(){o(t,{$event:e})}var r=e.which||e.keyCode;(32===r||13===r)&&t.$apply(n)})}}}}]).directive("ngDblclick",["$aria",function(e){return function(t,n,r){e.config("tabindex")&&!n.attr("tabindex")&&n.attr("tabindex",0)}}])}(window,window.angular)},{}],10:[function(e,t,n){e("./angular-aria"),t.exports="ngAria"},{"./angular-aria":9}],11:[function(e,t,n){!function(e,t,n){"use strict";!function(){t.module("ngMaterial",["ng","ngAnimate","ngAria","material.core","material.core.gestures","material.core.theming.palette","material.core.theming","material.components.autocomplete","material.components.backdrop","material.components.bottomSheet","material.components.button","material.components.card","material.components.checkbox","material.components.content","material.components.chips","material.components.dialog","material.components.fabActions","material.components.divider","material.components.fabSpeedDial","material.components.fabToolbar","material.components.gridList","material.components.fabTrigger","material.components.icon","material.components.input","material.components.list","material.components.menu","material.components.progressCircular","material.components.progressLinear","material.components.radioButton","material.components.select","material.components.sidenav","material.components.slider","material.components.subheader","material.components.sticky","material.components.swipe","material.components.switch","material.components.tabs","material.components.toast","material.components.toolbar","material.components.tooltip","material.components.whiteframe"])}(),function(){function e(e,t){e.decorator("$$rAF",["$delegate",n]),t.theme("default").primaryPalette("indigo").accentPalette("pink").warnPalette("red").backgroundPalette("grey")}function n(e){return e.throttle=function(t){var n,r,o,i;return function(){n=arguments,i=this,o=t,r||(r=!0,e(function(){o.apply(i,n),r=!1}))}},e}t.module("material.core",["material.core.gestures","material.core.theming"]).config(e),e.$inject=["$provide","$mdThemingProvider"]}(),function(){function e(e,t){function n(e){return r?"webkit"+e.charAt(0).toUpperCase()+e.substring(1):e}var r=/webkit/i.test(t.vendorPrefix);return{KEY_CODE:{ENTER:13,ESCAPE:27,SPACE:32,LEFT_ARROW:37,UP_ARROW:38,RIGHT_ARROW:39,DOWN_ARROW:40,TAB:9,BACKSPACE:8,DELETE:46},CSS:{TRANSITIONEND:"transitionend"+(r?" webkitTransitionEnd":""),ANIMATIONEND:"animationend"+(r?" webkitAnimationEnd":""),TRANSFORM:n("transform"),TRANSFORM_ORIGIN:n("transformOrigin"),TRANSITION:n("transition"),TRANSITION_DURATION:n("transitionDuration"),ANIMATION_PLAY_STATE:n("animationPlayState"),ANIMATION_DURATION:n("animationDuration"),ANIMATION_NAME:n("animationName"),ANIMATION_TIMING:n("animationTimingFunction"),ANIMATION_DIRECTION:n("animationDirection")},MEDIA:{sm:"(max-width: 600px)","gt-sm":"(min-width: 600px)",md:"(min-width: 600px) and (max-width: 960px)","gt-md":"(min-width: 960px)",lg:"(min-width: 960px) and (max-width: 1200px)","gt-lg":"(min-width: 1200px)"},MEDIA_PRIORITY:["gt-lg","lg","gt-md","md","gt-sm","sm"]}}t.module("material.core").factory("$mdConstant",e),e.$inject=["$$rAF","$sniffer"]}(),function(){function e(e,n){function r(){return[].concat($)}function o(){return $.length}function i(e){return $.length&&e>-1&&e<$.length}function a(e){return e?i(m(e)+1):!1}function s(e){return e?i(m(e)-1):!1}function c(e){return i(e)?$[e]:null}function l(e,t){return $.filter(function(n){return n[e]===t})}function u(e,n){return e?(t.isNumber(n)||(n=$.length),$.splice(n,0,e),m(e)):-1}function d(e){f(e)&&$.splice(m(e),1)}function m(e){return $.indexOf(e)}function f(e){return e&&m(e)>-1}function p(){return $.length?$[0]:null}function h(){return $.length?$[$.length-1]:null}function g(e,r,o,a){o=o||v;for(var s=m(r);;){if(!i(s))return null;var c=s+(e?-1:1),l=null;if(i(c)?l=$[c]:n&&(l=e?h():p(),c=m(l)),null===l||c===a)return null;if(o(l))return l;t.isUndefined(a)&&(a=c),s=c}}var v=function(){return!0};e&&!t.isArray(e)&&(e=Array.prototype.slice.call(e)),n=!!n;var $=e||[];return{items:r,count:o,inRange:i,contains:f,indexOf:m,itemAt:c,findBy:l,add:u,remove:d,first:p,last:h,next:t.bind(null,g,!1),previous:t.bind(null,g,!0),hasPrevious:s,hasNext:a}}t.module("material.core").config(["$provide",function(t){t.decorator("$mdUtil",["$delegate",function(t){return t.iterator=e,t}])}])}(),function(){function e(e,n,r){function o(e){var n=m[e];t.isUndefined(n)&&(n=m[e]=i(e));var r=p[n];return t.isUndefined(r)&&(r=a(n)),r}function i(t){return e.MEDIA[t]||("("!==t.charAt(0)?"("+t+")":t)}function a(e){var t=f[e]=r.matchMedia(e);return t.addListener(s),p[t.media]=!!t.matches}function s(e){n.$evalAsync(function(){p[e.media]=!!e.matches})}function c(e){return f[e]}function l(t,n){for(var r=0;r<e.MEDIA_PRIORITY.length;r++){var o=e.MEDIA_PRIORITY[r];if(f[m[o]].matches){var i=d(t,n+"-"+o);if(t[i])return t[i]}}return t[d(t,n)]}function u(n,r,o){var i=[];return n.forEach(function(n){var a=d(r,n);r[a]&&i.push(r.$observe(a,t.bind(void 0,o,null)));for(var s in e.MEDIA){if(a=d(r,n+"-"+s),!r[a])return;i.push(r.$observe(a,t.bind(void 0,o,s)))}}),function(){i.forEach(function(e){e()})}}function d(e,t){return h[t]||(h[t]=e.$normalize(t))}var m={},f={},p={},h={};return o.getResponsiveAttribute=l,o.getQuery=c,o.watchResponsiveAttributes=u,o}t.module("material.core").factory("$mdMedia",e),e.$inject=["$mdConstant","$rootScope","$window"]}(),function(){var r=0;t.module("material.core").factory("$mdUtil",["$cacheFactory","$document","$timeout","$q","$window","$mdConstant",function(o,i,a,s,c,l){function u(e){return e[0]||e}var d;return d={now:e.performance?t.bind(e.performance,e.performance.now):Date.now,clientRect:function(e,t,n){var r=u(e);t=u(t||r.offsetParent||document.body);var o=r.getBoundingClientRect(),i=n?t.getBoundingClientRect():{left:0,top:0,width:0,height:0};return{left:o.left-i.left,top:o.top-i.top,width:o.width,height:o.height}},offsetRect:function(e,t){return d.clientRect(e,t,!0)},nodesToArray:function(e){for(var t=[],n=0;n<e.length;++n)t.push(e.item(n));return t},disableScrollAround:function(e){function n(){function n(e){}function r(e){e.preventDefault()}var o=c.getComputedStyle(e[0]).zIndex-1;isNaN(o)&&(o=99);var s=t.element('<div class="md-scroll-mask" style="z-index: '+o+'">  <div class="md-scroll-mask-bar"></div></div>');return a.appendChild(s[0]),s.on("wheel",r),s.on("touchmove",r),i.on("keydown",n),function(){s.off("wheel"),s.off("touchmove"),s[0].parentNode.removeChild(s[0]),i.off("keydown",n),delete d.disableScrollAround._enableScrolling}}function r(){var e=a.getAttribute("style")||"",t=a.scrollTop+a.parentElement.scrollTop;return o(a,{position:"fixed",width:"100%",overflowY:"scroll",top:-t+"px"}),function(){a.setAttribute("style",e),a.scrollTop=t}}function o(e,t){for(var n in t)e.style[n]=t[n]}if(d.disableScrollAround._enableScrolling)return d.disableScrollAround._enableScrolling;e=t.element(e);var a=i[0].body,s=r(),l=n();return d.disableScrollAround._enableScrolling=function(){s(),l(),delete d.disableScrollAround._enableScrolling}},enableScrolling:function(){var e=this.disableScrollAround._enableScrolling;e&&e()},floatingScrollbars:function(){if(this.floatingScrollbars.cached===n){var e=t.element('<div style="width: 100%; z-index: -1; position: absolute; height: 35px; overflow-y: scroll"><div style="height: 60;"></div></div>');i[0].body.appendChild(e[0]),this.floatingScrollbars.cached=e[0].offsetWidth==e[0].childNodes[0].offsetWidth,e.remove()}return this.floatingScrollbars.cached},forceFocus:function(t){var n=t[0]||t;document.addEventListener("click",function o(e){e.target===n&&e.$focus&&(n.focus(),e.stopImmediatePropagation(),e.preventDefault(),n.removeEventListener("click",o))},!0);var r=document.createEvent("MouseEvents");r.initMouseEvent("click",!1,!0,e,{},0,0,0,0,!1,!1,!1,!1,0,null),r.$material=!0,r.$focus=!0,n.dispatchEvent(r)},transitionEndPromise:function(e,t){function n(t){t&&t.target!==e[0]||(e.off(l.CSS.TRANSITIONEND,n),r.resolve())}t=t||{};var r=s.defer();return e.on(l.CSS.TRANSITIONEND,n),t.timeout&&a(n,t.timeout),r.promise},fakeNgModel:function(){return{$fake:!0,$setTouched:t.noop,$setViewValue:function(e){this.$viewValue=e,this.$render(e),this.$viewChangeListeners.forEach(function(e){e()})},$isEmpty:function(e){return 0===(""+e).length},$parsers:[],$formatters:[],$viewChangeListeners:[],$render:t.noop}},debounce:function(e,t,r,o){var i;return function(){var s=r,c=Array.prototype.slice.call(arguments);a.cancel(i),i=a(function(){i=n,e.apply(s,c)},t||10,o)}},throttle:function(e,t){var n;return function(){var r=this,o=arguments,i=d.now();(!n||i-n>t)&&(e.apply(r,o),n=i)}},time:function(e){var t=d.now();return e(),d.now()-t},nextUid:function(){return""+r++},disconnectScope:function(e){if(e&&e.$root!==e&&!e.$$destroyed){var t=e.$parent;e.$$disconnected=!0,t.$$childHead===e&&(t.$$childHead=e.$$nextSibling),t.$$childTail===e&&(t.$$childTail=e.$$prevSibling),e.$$prevSibling&&(e.$$prevSibling.$$nextSibling=e.$$nextSibling),e.$$nextSibling&&(e.$$nextSibling.$$prevSibling=e.$$prevSibling),e.$$nextSibling=e.$$prevSibling=null}},reconnectScope:function(e){if(e&&e.$root!==e&&e.$$disconnected){var t=e,n=t.$parent;t.$$disconnected=!1,t.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=t,n.$$childTail=t):n.$$childHead=n.$$childTail=t}},getClosest:function(e,n,r){if(e instanceof t.element&&(e=e[0]),n=n.toUpperCase(),r&&(e=e.parentNode),!e)return null;do if(e.nodeName===n)return e;while(e=e.parentNode);return null},extractElementByName:function(e,n){for(var r=0,o=e.length;o>r;r++)if(e[r].nodeName.toLowerCase()===n)return t.element(e[r]);return e},initOptionalProperties:function(e,n,r){r=r||{},t.forEach(e.$$isolateBindings,function(o,i){if(o.optional&&t.isUndefined(e[i])){var a=n.hasOwnProperty(n.$normalize(o.attrName));e[i]=t.isDefined(r[i])?r[i]:a}})}}}]),t.element.prototype.focus=t.element.prototype.focus||function(){return this.length&&this[0].focus(),this},t.element.prototype.blur=t.element.prototype.blur||function(){return this.length&&this[0].blur(),this}}(),function(){function e(e,n,r){function o(e,r,o){var i=e[0]||e;!i||i.hasAttribute(r)&&0!==i.getAttribute(r).length||c(i,r)||(o=t.isString(o)?o.trim():"",o.length?e.attr(r,o):n.warn('ARIA: Attribute "',r,'", required for accessibility, is missing on node:',i))}function i(t,n,r){e(function(){o(t,n,r())})}function a(e,t){i(e,t,function(){return s(e)})}function s(e){return e.text().trim()}function c(e,t){function n(e){var t=e.currentStyle?e.currentStyle:r.getComputedStyle(e);return"none"===t.display}var o=e.hasChildNodes(),i=!1;if(o)for(var a=e.childNodes,s=0;s<a.length;s++){var c=a[s];1===c.nodeType&&c.hasAttribute(t)&&(n(c)||(i=!0))}return i}return{expect:o,expectAsync:i,expectWithText:a}}t.module("material.core").service("$mdAria",e),e.$inject=["$$rAF","$log","$window"]}(),function(){function e(e,n,r,o,i,a){this.compile=function(s){var c=s.templateUrl,l=s.template||"",u=s.controller,d=s.controllerAs,m=s.resolve||{},f=s.locals||{},p=s.transformTemplate||t.identity,h=s.bindToController;return t.forEach(m,function(e,n){m[n]=t.isString(e)?r.get(e):r.invoke(e)}),t.extend(m,f),m.$template=c?n.get(c,{cache:a}).then(function(e){return e.data}):e.when(l),e.all(m).then(function(e){var n=p(e.$template),r=s.element||t.element("<div>").html(n.trim()).contents(),a=o(r);return{locals:e,element:r,link:function(n){if(e.$scope=n,u){var o=i(u,e,!0);h&&t.extend(o.instance,e);var s=o();r.data("$ngControllerController",s),r.children().data("$ngControllerController",s),d&&(n[d]=s)}return a(n)}}})}}t.module("material.core").service("$mdCompiler",e),e.$inject=["$q","$http","$injector","$compile","$controller","$templateCache"]}(),function(){function n(){}function r(n,r,o){function i(e,t,n){var r=f[t.replace(/^\$md./,"")];if(!r)throw new Error("Failed to register element with handler "+t+". Available handlers: "+Object.keys(f).join(", "));return r.registerElement(e,n)}function a(e,r){var o=new n(e);return t.extend(o,r),f[e]=o,h}var c=navigator.userAgent||navigator.vendor||e.opera,u=c.match(/ipad|iphone|ipod/i),d=c.match(/android/i),m="undefined"!=typeof e.jQuery&&t.element===e.jQuery,h={handler:a,register:i,isHijackingClicks:(u||d)&&!m&&!p};return h.isHijackingClicks&&h.handler("click",{options:{maxDistance:6},onEnd:function(e,t){t.distance<this.state.options.maxDistance&&this.dispatchEvent(e,"click")}}),h.handler("press",{onStart:function(e,t){this.dispatchEvent(e,"$md.pressdown")},onEnd:function(e,t){this.dispatchEvent(e,"$md.pressup")}}).handler("hold",{options:{maxDistance:6,delay:500},onCancel:function(){o.cancel(this.state.timeout)},onStart:function(e,n){return this.state.registeredParent?(this.state.pos={x:n.x,y:n.y},void(this.state.timeout=o(t.bind(this,function(){this.dispatchEvent(e,"$md.hold"),this.cancel()}),this.state.options.delay,!1))):this.cancel()},onMove:function(e,t){e.preventDefault();var n=this.state.pos.x-t.x,r=this.state.pos.y-t.y;Math.sqrt(n*n+r*r)>this.options.maxDistance&&this.cancel()},onEnd:function(){this.onCancel()}}).handler("drag",{options:{minDistance:6,horizontal:!0,cancelMultiplier:1.5},onStart:function(e){this.state.registeredParent||this.cancel()},onMove:function(e,t){var n,r;e.preventDefault(),this.state.dragPointer?this.dispatchDragMove(e):(this.state.options.horizontal?(n=Math.abs(t.distanceX)>this.state.options.minDistance,r=Math.abs(t.distanceY)>this.state.options.minDistance*this.state.options.cancelMultiplier):(n=Math.abs(t.distanceY)>this.state.options.minDistance,r=Math.abs(t.distanceX)>this.state.options.minDistance*this.state.options.cancelMultiplier),n?(this.state.dragPointer=s(e),l(e,this.state.dragPointer),this.dispatchEvent(e,"$md.dragstart",this.state.dragPointer)):r&&this.cancel())},dispatchDragMove:r.throttle(function(e){this.state.isRunning&&(l(e,this.state.dragPointer),this.dispatchEvent(e,"$md.drag",this.state.dragPointer))}),onEnd:function(e,t){this.state.dragPointer&&(l(e,this.state.dragPointer),this.dispatchEvent(e,"$md.dragend",this.state.dragPointer))}}).handler("swipe",{options:{minVelocity:.65,minDistance:10},onEnd:function(e,t){if(Math.abs(t.velocityX)>this.state.options.minVelocity&&Math.abs(t.distanceX)>this.state.options.minDistance){var n="left"==t.directionX?"$md.swipeleft":"$md.swiperight";this.dispatchEvent(e,n)}}})}function o(e){this.name=e,this.state={}}function i(){function n(e,n,r){r=r||d;var o=new t.element.Event(n);o.$material=!0,o.pointer=r,o.srcEvent=e,t.extend(o,{clientX:r.x,clientY:r.y,screenX:r.x,screenY:r.y,pageX:r.x,pageY:r.y,ctrlKey:e.ctrlKey,altKey:e.altKey,shiftKey:e.shiftKey,metaKey:e.metaKey}),t.element(r.target).trigger(o)}function r(t,n,r){r=r||d;var o;"click"===n?(o=document.createEvent("MouseEvents"),o.initMouseEvent("click",!0,!0,e,t.detail,r.x,r.y,r.x,r.y,t.ctrlKey,t.altKey,t.shiftKey,t.metaKey,t.button,t.relatedTarget||null)):(o=document.createEvent("CustomEvent"),o.initCustomEvent(n,!0,!0,{})),o.$material=!0,o.pointer=r,o.srcEvent=t,r.target.dispatchEvent(o)}var i="undefined"!=typeof e.jQuery&&t.element===e.jQuery;return o.prototype={options:{},dispatchEvent:i?n:r,onStart:t.noop,onMove:t.noop,onEnd:t.noop,onCancel:t.noop,start:function(e,n){if(!this.state.isRunning){var r=this.getNearestParent(e.target),o=r&&r.$mdGesture[this.name]||{};this.state={isRunning:!0,options:t.extend({},this.options,o),registeredParent:r},this.onStart(e,n)}},move:function(e,t){this.state.isRunning&&this.onMove(e,t)},end:function(e,t){this.state.isRunning&&(this.onEnd(e,t),this.state.isRunning=!1)},cancel:function(e,t){this.onCancel(e,t),this.state={}},getNearestParent:function(e){for(var t=e;t;){if((t.$mdGesture||{})[this.name])return t;t=t.parentNode}return null},registerElement:function(e,t){function n(){delete e[0].$mdGesture[r.name],e.off("$destroy",n)}var r=this;return e[0].$mdGesture=e[0].$mdGesture||{},e[0].$mdGesture[this.name]=t||{},e.on("$destroy",n),n}},o}function a(e,n){function r(e,t){var r;for(var o in f)r=f[o],r instanceof n&&("start"===e&&r.cancel(),r[e](t,d))}function o(e){if(!d){var t=+Date.now();m&&!c(e,m)&&t-m.endTime<1500||(d=s(e),r("start",e))}}function i(e){d&&c(e,d)&&(l(e,d),r("move",e))}function a(e){d&&c(e,d)&&(l(e,d),d.endTime=+Date.now(),r("end",e),m=d,d=null)}document.contains||(document.contains=function(e){return document.body.contains(e)}),!h&&e.isHijackingClicks&&(document.addEventListener("click",function(e){var t=0===e.clientX&&0===e.clientY;t||e.$material||e.isIonicTap||(e.preventDefault(),e.stopPropagation())},!0),h=!0);var u="mousedown touchstart pointerdown",p="mousemove touchmove pointermove",g="mouseup mouseleave touchend touchcancel pointerup pointercancel";t.element(document).on(u,o).on(p,i).on(g,a).on("$$mdGestureReset",function(){m=d=null})}function s(e){var t=u(e),n={startTime:+Date.now(),target:e.target,type:e.type.charAt(0)};return n.startX=n.x=t.pageX,n.startY=n.y=t.pageY,n}function c(e,t){return e&&t&&e.type.charAt(0)===t.type}function l(e,t){var n=u(e),r=t.x=n.pageX,o=t.y=n.pageY;t.distanceX=r-t.startX,t.distanceY=o-t.startY,t.distance=Math.sqrt(t.distanceX*t.distanceX+t.distanceY*t.distanceY),t.directionX=t.distanceX>0?"right":t.distanceX<0?"left":"",t.directionY=t.distanceY>0?"up":t.distanceY<0?"down":"",t.duration=+Date.now()-t.startTime,t.velocityX=t.distanceX/t.duration,t.velocityY=t.distanceY/t.duration}function u(e){return e=e.originalEvent||e,e.touches&&e.touches[0]||e.changedTouches&&e.changedTouches[0]||e}var d,m,f={},p=!1,h=!1;t.module("material.core.gestures",[]).provider("$mdGesture",n).factory("$$MdGestureHandler",i).run(a),n.prototype={skipClickHijack:function(){return p=!0},$get:["$$MdGestureHandler","$$rAF","$timeout",function(e,t,n){return new r(e,t,n)}]},r.$inject=["$$MdGestureHandler","$$rAF","$timeout"],a.$inject=["$mdGesture","$$MdGestureHandler"]}(),function(){function e(){function e(e){function n(e){return c.optionsFactory=e.options,c.methods=(e.methods||[]).concat(a),l}function r(e,t){return s[e]=t,l}function o(t,n){if(n=n||{},n.methods=n.methods||[],n.options=n.options||function(){return{}},/^cancel|hide|show$/.test(t))throw new Error("Preset '"+t+"' in "+e+" is reserved!");if(n.methods.indexOf("_options")>-1)throw new Error("Method '_options' in "+e+" is reserved!");return c.presets[t]={methods:n.methods.concat(a),optionsFactory:n.options,argOption:n.argOption},l}function i(n,r,o){function i(e){return e&&e._options&&(e=e._options),d.show(t.extend({},u,e))}function a(t,n){var r={};return r[e]=m,o.invoke(t||function(){return n},{},r)}var l,u,d=n(),m={hide:d.hide,cancel:d.cancel,show:i};return l=c.methods||[],u=a(c.optionsFactory,{}),t.forEach(s,function(e,t){m[t]=e}),t.forEach(c.presets,function(e,n){function r(e){this._options=t.extend({},o,e)}var o=a(e.optionsFactory,{}),i=(e.methods||[]).concat(l);if(t.extend(o,{$type:n}),t.forEach(i,function(e){r.prototype[e]=function(t){return this._options[e]=t,this}}),e.argOption){var s="show"+n.charAt(0).toUpperCase()+n.slice(1);m[s]=function(e){var t=m[n](e);return m.show(t)}}m[n]=function(n){return arguments.length&&e.argOption&&!t.isObject(n)&&!t.isArray(n)?(new r)[e.argOption](n):new r(n)}}),m}var a=["onHide","onShow","onRemove"],s={},c={presets:{}},l={setDefaults:n,addPreset:o,addMethod:r,$get:i};return l.addPreset("build",{methods:["controller","controllerAs","resolve","template","templateUrl","themable","transformTemplate","parent"]}),i.$inject=["$$interimElement","$animate","$injector"],l}function r(e,r,o,i,a,s,c,l,u){function d(e){return e&&t.isString(e)?e.replace(/\{\{/g,m).replace(/}}/g,f):e}var m=c.startSymbol(),f=c.endSymbol(),p="{{"===m&&"}}"===f,h=p?t.identity:d;return function(){function c(e){if(g.length)return p.cancel().then(function(){return c(e)});var t=new f(e);return g.push(t),t.show().then(function(){return t.deferred.promise})}function d(e){var t=g.shift();return t&&t.remove().then(function(){t.deferred.resolve(e)})}function m(e){var t=g.shift();return r.when(t&&t.remove().then(function(){t.deferred.reject(e)}))}function f(c){var d,m,f,g,v;return c=c||{},c=t.extend({preserveScope:!1,scope:c.scope||o.$new(c.isolateScope),onShow:function(e,t,n){return s.enter(t,n.parent)},onRemove:function(e,t,n){return t&&s.leave(t)||r.when()}},c),c.template&&(c.template=h(c.template)),d={options:c,deferred:r.defer(),show:function(){var n;return n=c.skipCompile?r(function(e){e({locals:{},link:function(){return c.element}})}):l.compile(c),g=n.then(function(n){function o(){c.hideDelay&&(m=i(p.cancel,c.hideDelay))}if(t.extend(n.locals,d.options),f=n.link(c.scope),t.isFunction(c.parent)?c.parent=c.parent(c.scope,f,c):t.isString(c.parent)&&(c.parent=t.element(e[0].querySelector(c.parent))),!(c.parent||{}).length){var s;a[0]&&a[0].querySelector&&(s=a[0].querySelector(":not(svg) > body")),s||(s=a[0]),"#comment"==s.nodeName&&(s=e[0].body),c.parent=t.element(s)}c.themable&&u(f);var l=c.onShow(c.scope,f,c);return r.when(l).then(function(){(c.onComplete||t.noop)(c.scope,f,c),o()})},function(e){g=!0,d.deferred.reject(e)})},cancelTimeout:function(){m&&(i.cancel(m),m=n)},remove:function(){return d.cancelTimeout(),v=r.when(g).then(function(){var e=f?c.onRemove(c.scope,f,c):!0;return r.when(e).then(function(){c.preserveScope||c.scope.$destroy(),v=!0})})}}}var p,g=[];return p={show:c,hide:d,cancel:m}}}return e.$get=r,r.$inject=["$document","$q","$rootScope","$timeout","$rootElement","$animate","$interpolate","$mdCompiler","$mdTheming"],e}t.module("material.core").provider("$$interimElement",e)}(),function(){function e(e,n){function r(e){return e&&""!==e}var o,i=[],a={};return o={notFoundError:function(t){e.error("No instance found for handle",t)},getInstances:function(){return i},get:function(e){if(!r(e))return null;var t,n,o;for(t=0,n=i.length;n>t;t++)if(o=i[t],o.$$mdHandle===e)return o;return null},register:function(e,n){function r(){var t=i.indexOf(e);-1!==t&&i.splice(t,1)}function o(){var t=a[n];t&&(t.resolve(e),delete a[n])}return n?(e.$$mdHandle=n,i.push(e),o(),r):t.noop},when:function(e){if(r(e)){var t=n.defer(),i=o.get(e);return i?t.resolve(i):a[e]=t,t.promise}return n.reject("Invalid `md-component-id` value.")}}}t.module("material.core").factory("$mdComponentRegistry",e),e.$inject=["$log","$q"]}(),function(){!function(){function e(e){function n(n,o,i){var a=r(o);return e.attach(n,o,t.extend(a,i))}function r(e){return e.hasClass("md-icon-button")?{isMenuItem:e.hasClass("md-menu-item"),fitRipple:!0,center:!0}:{isMenuItem:e.hasClass("md-menu-item"),dimBackground:!0}}return{attach:n}}t.module("material.core").factory("$mdButtonInkRipple",e),e.$inject=["$mdInkRipple"]}()}(),function(){!function(){function e(e){function n(n,r,o){return e.attach(n,r,t.extend({center:!0,dimBackground:!1,fitRipple:!0},o))}return{attach:n}}t.module("material.core").factory("$mdCheckboxInkRipple",e),e.$inject=["$mdInkRipple"]}()}(),function(){!function(){function e(e){function n(n,r,o){return e.attach(n,r,t.extend({center:!1,dimBackground:!0,outline:!1,rippleSize:"full"},o))}return{attach:n}}t.module("material.core").factory("$mdListInkRipple",e),e.$inject=["$mdInkRipple"]}()}(),function(){function e(e,n){return{controller:t.noop,link:function(t,r,o){o.hasOwnProperty("mdInkRippleCheckbox")?n.attach(t,r):e.attach(t,r)}}}function n(e,n){function r(r,o,i){function a(){var e=o.data("$mdRippleContainer");return e?e:(e=t.element('<div class="md-ripple-container">'),o.append(e),o.data("$mdRippleContainer",e),e)}function s(e){function t(e){var t="#"===e.charAt(0)?e.substr(1):e,n=t.length/3,r=t.substr(0,n),o=t.substr(n,n),i=t.substr(2*n);return 1===n&&(r+=r,o+=o,i+=i),"rgba("+parseInt(r,16)+","+parseInt(o,16)+","+parseInt(i,16)+",0.1)"}function n(e){return e.replace(")",", 0.1)").replace("(","a(")}if(e)return 0===e.indexOf("rgba")?e.replace(/\d?\.?\d*\s*\)\s*$/,"0.1)"):0===e.indexOf("rgb")?n(e):0===e.indexOf("#")?t(e):void 0}function c(e,t){v.splice(v.indexOf(e),1),0===v.length&&a().css({backgroundColor:""}),n(function(){e.remove()},t,!1)}function l(e){var t=v.indexOf(e),n=$[t]||{},r=v.length>1?!1:E,o=v.length>1?!1:y;r||n.animating||o?e.addClass("md-ripple-visible"):e&&(e.removeClass("md-ripple-visible"),i.outline&&e.css({width:p+"px",height:p+"px",marginLeft:-1*p+"px",marginTop:-1*p+"px"}),c(e,i.outline?450:650))}function u(r,c){function u(e){var n=t.element('<div class="md-ripple" data-counter="'+g++ +'">');return v.unshift(n),$.unshift({animating:!0}),f.append(n),e&&n.css(e),n}function d(e,t){var n,r,o,a=f.prop("offsetWidth"),s=f.prop("offsetHeight");return i.isMenuItem?r=Math.sqrt(Math.pow(a,2)+Math.pow(s,2)):i.outline?(o=M.getBoundingClientRect(),e-=o.left,t-=o.top,a=Math.max(e,a-e),s=Math.max(t,s-t),r=2*Math.sqrt(Math.pow(a,2)+Math.pow(s,2))):(n=i.fullRipple?1.1:.8,r=Math.sqrt(Math.pow(a,2)+Math.pow(s,2))*n,i.fitRipple&&(r=Math.min(s,a,r))),r}function m(e,t,n){function r(e){return e.replace("rgba","rgb").replace(/,[^\),]+\)/,")")}var o=M.getBoundingClientRect(),a={backgroundColor:r(C),borderColor:r(C),width:e+"px",height:e+"px"};return i.outline?(a.width=0,a.height=0):a.marginLeft=a.marginTop=e*-.5+"px",i.center?a.left=a.top="50%":(a.left=Math.round((t-o.left)/f.prop("offsetWidth")*100)+"%",a.top=Math.round((n-o.top)/f.prop("offsetHeight")*100)+"%"),a}C=s(o.attr("md-ink-ripple"))||s(e.getComputedStyle(i.colorElement[0]).color||"rgb(0, 0, 0)");var f=a(),h=d(r,c),b=m(h,r,c),E=u(b),y=v.indexOf(E),w=$[y]||{};return p=h,w.animating=!0,n(function(){i.dimBackground&&f.css({backgroundColor:C}),E.addClass("md-ripple-placed md-ripple-scaled"),E.css(i.outline?{borderWidth:.5*h+"px",marginLeft:h*-.5+"px",marginTop:h*-.5+"px"}:{left:"50%",top:"50%"}),l(E),n(function(){w.animating=!1,l(E)},i.outline?450:225,!1)},0,!1),E}function d(e){f()&&(u(e.pointer.x,e.pointer.y),y=!0)}function m(){y=!1;var e=v[v.length-1];n(function(){l(e)},0,!1)}function f(){function e(e){return e&&e.hasAttribute&&e.hasAttribute("disabled")}var t=M.parentNode,n=t&&t.parentNode,r=n&&n.parentNode;return!(e(M)||e(t)||e(n)||e(r))}if(o.controller("mdNoInk"))return t.noop;i=t.extend({colorElement:o,mousedown:!0,hover:!0,focus:!0,center:!1,mousedownPauseTime:150,dimBackground:!1,outline:!1,fullRipple:!0,isMenuItem:!1,fitRipple:!1},i);var p,h=o.controller("mdInkRipple")||{},g=0,v=[],$=[],b=o.attr("md-highlight"),E=!1,y=!1,M=o[0],w=o.attr("md-ripple-size"),C=s(o.attr("md-ink-ripple"))||s(i.colorElement.length&&e.getComputedStyle(i.colorElement[0]).color||"rgb(0, 0, 0)");switch(w){case"full":i.fullRipple=!0;break;case"partial":i.fullRipple=!1}return i.mousedown&&o.on("$md.pressdown",d).on("$md.pressup",m),h.createRipple=u,b&&r.$watch(b,function(e){E=e,E&&!v.length&&n(function(){u(0,0)},0,!1),t.forEach(v,l)}),function(){o.off("$md.pressdown",d).off("$md.pressup",m),a().remove()}}return{attach:r}}function r(){return function(){return{controller:t.noop}}}t.module("material.core").factory("$mdInkRipple",n).directive("mdInkRipple",e).directive("mdNoInk",r()).directive("mdNoBar",r()).directive("mdNoStretch",r()),e.$inject=["$mdButtonInkRipple","$mdCheckboxInkRipple"],n.$inject=["$window","$timeout"]}(),function(){!function(){function e(e){function n(n,r,o){return e.attach(n,r,t.extend({center:!1,dimBackground:!0,outline:!1,rippleSize:"full"},o))}return{attach:n}}t.module("material.core").factory("$mdTabInkRipple",e),e.$inject=["$mdInkRipple"]}()}(),function(){t.module("material.core.theming.palette",[]).constant("$mdColorPalette",{red:{50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 400 A100",contrastStrongLightColors:"500 600 700 A200 A400 A700"},pink:{50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 400 A100",contrastStrongLightColors:"500 600 A200 A400 A700"},purple:{50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100",contrastStrongLightColors:"300 400 A200 A400 A700"},"deep-purple":{50:"#ede7f6",100:"#d1c4e9",200:"#b39ddb",300:"#9575cd",400:"#7e57c2",500:"#673ab7",600:"#5e35b1",700:"#512da8",800:"#4527a0",900:"#311b92",A100:"#b388ff",A200:"#7c4dff",A400:"#651fff",A700:"#6200ea",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100",contrastStrongLightColors:"300 400 A200"},indigo:{50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100",contrastStrongLightColors:"300 400 A200 A400"},blue:{50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff",contrastDefaultColor:"light",contrastDarkColors:"100 200 300 400 A100",contrastStrongLightColors:"500 600 700 A200 A400 A700"},"light-blue":{50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea",contrastDefaultColor:"dark",contrastLightColors:"500 600 700 800 900 A700",contrastStrongLightColors:"500 600 700 800 A700"},cyan:{50:"#e0f7fa",100:"#b2ebf2",200:"#80deea",300:"#4dd0e1",400:"#26c6da",500:"#00bcd4",600:"#00acc1",700:"#0097a7",800:"#00838f",900:"#006064",A100:"#84ffff",A200:"#18ffff",A400:"#00e5ff",A700:"#00b8d4",contrastDefaultColor:"dark",contrastLightColors:"500 600 700 800 900",contrastStrongLightColors:"500 600 700 800"},teal:{50:"#e0f2f1",100:"#b2dfdb",200:"#80cbc4",300:"#4db6ac",400:"#26a69a",500:"#009688",600:"#00897b",700:"#00796b",800:"#00695c",900:"#004d40",A100:"#a7ffeb",A200:"#64ffda",A400:"#1de9b6",A700:"#00bfa5",contrastDefaultColor:"dark",contrastLightColors:"500 600 700 800 900",contrastStrongLightColors:"500 600 700"},green:{50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853",contrastDefaultColor:"dark",contrastLightColors:"500 600 700 800 900",contrastStrongLightColors:"500 600 700"},"light-green":{50:"#f1f8e9",100:"#dcedc8",200:"#c5e1a5",300:"#aed581",400:"#9ccc65",500:"#8bc34a",600:"#7cb342",700:"#689f38",800:"#558b2f",900:"#33691e",A100:"#ccff90",A200:"#b2ff59",A400:"#76ff03",A700:"#64dd17",contrastDefaultColor:"dark",contrastLightColors:"800 900",contrastStrongLightColors:"800 900"},lime:{50:"#f9fbe7",100:"#f0f4c3",200:"#e6ee9c",300:"#dce775",400:"#d4e157",500:"#cddc39",600:"#c0ca33",700:"#afb42b",800:"#9e9d24",900:"#827717",A100:"#f4ff81",A200:"#eeff41",A400:"#c6ff00",A700:"#aeea00",contrastDefaultColor:"dark",contrastLightColors:"900",contrastStrongLightColors:"900"},yellow:{50:"#fffde7",100:"#fff9c4",200:"#fff59d",300:"#fff176",400:"#ffee58",500:"#ffeb3b",600:"#fdd835",700:"#fbc02d",800:"#f9a825",900:"#f57f17",A100:"#ffff8d",A200:"#ffff00",A400:"#ffea00",A700:"#ffd600",contrastDefaultColor:"dark"},amber:{50:"#fff8e1",100:"#ffecb3",200:"#ffe082",300:"#ffd54f",
400:"#ffca28",500:"#ffc107",600:"#ffb300",700:"#ffa000",800:"#ff8f00",900:"#ff6f00",A100:"#ffe57f",A200:"#ffd740",A400:"#ffc400",A700:"#ffab00",contrastDefaultColor:"dark"},orange:{50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00",contrastDefaultColor:"dark",contrastLightColors:"800 900",contrastStrongLightColors:"800 900"},"deep-orange":{50:"#fbe9e7",100:"#ffccbc",200:"#ffab91",300:"#ff8a65",400:"#ff7043",500:"#ff5722",600:"#f4511e",700:"#e64a19",800:"#d84315",900:"#bf360c",A100:"#ff9e80",A200:"#ff6e40",A400:"#ff3d00",A700:"#dd2c00",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 400 A100 A200",contrastStrongLightColors:"500 600 700 800 900 A400 A700"},brown:{50:"#efebe9",100:"#d7ccc8",200:"#bcaaa4",300:"#a1887f",400:"#8d6e63",500:"#795548",600:"#6d4c41",700:"#5d4037",800:"#4e342e",900:"#3e2723",A100:"#d7ccc8",A200:"#bcaaa4",A400:"#8d6e63",A700:"#5d4037",contrastDefaultColor:"light",contrastDarkColors:"50 100 200",contrastStrongLightColors:"300 400"},grey:{50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",1000:"#000000",A100:"#ffffff",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161",contrastDefaultColor:"dark",contrastLightColors:"600 700 800 900"},"blue-grey":{50:"#eceff1",100:"#cfd8dc",200:"#b0bec5",300:"#90a4ae",400:"#78909c",500:"#607d8b",600:"#546e7a",700:"#455a64",800:"#37474f",900:"#263238",A100:"#cfd8dc",A200:"#b0bec5",A400:"#78909c",A700:"#455a64",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300",contrastStrongLightColors:"400 500"}})}(),function(){function e(e){function r(e,t){return t=t||{},u[e]=a(e,t),v}function o(e,n){return a(e,t.extend({},u[e]||{},n))}function a(e,t){var n=C.filter(function(e){return!t[e]});if(n.length)throw new Error("Missing colors %1 in palette %2!".replace("%1",n.join(", ")).replace("%2",e));return t}function s(e,n){if(d[e])return d[e];n=n||"default";var r="string"==typeof n?d[n]:n,o=new c(e);return r&&t.forEach(r.colors,function(e,n){o.colors[n]={name:e.name,hues:t.extend({},e.hues)}}),d[e]=o,o}function c(e){function n(e){if(e=0===arguments.length?!0:!!e,e!==r.isDark){r.isDark=e,r.foregroundPalette=r.isDark?p:f,r.foregroundShadow=r.isDark?h:g;var n=r.isDark?w:M,o=r.isDark?M:w;return t.forEach(n,function(e,t){var n=r.colors[t],i=o[t];if(n)for(var a in n.hues)n.hues[a]===i[a]&&(n.hues[a]=e[a])}),r}}var r=this;r.name=e,r.colors={},r.dark=n,n(!1),E.forEach(function(e){var n=(r.isDark?w:M)[e];r[e+"Palette"]=function(o,i){var a=r.colors[e]={name:o,hues:t.extend({},n,i)};return Object.keys(a.hues).forEach(function(e){if(!n[e])throw new Error("Invalid hue name '%1' in theme %2's %3 color %4. Available hue names: %4".replace("%1",e).replace("%2",r.name).replace("%3",o).replace("%4",Object.keys(n).join(", ")))}),Object.keys(a.hues).map(function(e){return a.hues[e]}).forEach(function(t){if(-1==C.indexOf(t))throw new Error("Invalid hue value '%1' in theme %2's %3 color %4. Available hue values: %5".replace("%1",t).replace("%2",r.name).replace("%3",e).replace("%4",o).replace("%5",C.join(", ")))}),r},r[e+"Color"]=function(){var t=Array.prototype.slice.call(arguments);return console.warn("$mdThemingProviderTheme."+e+"Color() has been deprecated. Use $mdThemingProviderTheme."+e+"Palette() instead."),r[e+"Palette"].apply(r,t)}})}function m(e,r){function o(e){return e===n||""===e?!0:i.THEMES[e]!==n}function i(t,r){r===n&&(r=t,t=n),t===n&&(t=e),i.inherit(r,r)}return i.inherit=function(n,i){function a(e){o(e)||r.warn("Attempted to use unregistered theme '"+e+"'. Register it with $mdThemingProvider.theme().");var t=n.data("$mdThemeName");t&&n.removeClass("md-"+t+"-theme"),n.addClass("md-"+e+"-theme"),n.data("$mdThemeName",e)}var s=i.controller("mdTheme"),c=n.attr("md-theme-watch");if((b||t.isDefined(c))&&"false"!=c){var l=e.$watch(function(){return s&&s.$mdTheme||$},a);n.on("$destroy",l)}else{var u=s&&s.$mdTheme||$;a(u)}},i.THEMES=t.extend({},d),i.defaultTheme=function(){return $},i.registered=o,i}u={},d={};var v,$="default",b=!1;return t.extend(u,e),m.$inject=["$rootScope","$log"],v={definePalette:r,extendPalette:o,theme:s,setDefaultTheme:function(e){$=e},alwaysWatchTheme:function(e){b=e},$get:m,_LIGHT_DEFAULT_HUES:M,_DARK_DEFAULT_HUES:w,_PALETTES:u,_THEMES:d,_parseRules:i,_rgba:l}}function r(e,t,n){return{priority:100,link:{pre:function(r,o,i){var a={$setTheme:function(t){e.registered(t)||n.warn("attempted to use unregistered theme '"+t+"'"),a.$mdTheme=t}};o.data("$mdThemeController",a),a.$setTheme(t(i.mdTheme)(r)),i.$observe("mdTheme",a.$setTheme)}}}}function o(e){return e}function i(e,n,r){s(e,n),r=r.replace(/THEME_NAME/g,e.name);var o=[],i=e.colors[n],a=new RegExp(".md-"+e.name+"-theme","g"),c=new RegExp("('|\")?{{\\s*("+n+")-(color|contrast)-?(\\d\\.?\\d*)?\\s*}}(\"|')?","g"),d=/'?"?\{\{\s*([a-zA-Z]+)-(A?\d+|hue\-[0-3]|shadow)-?(\d\.?\d*)?\s*\}\}'?"?/g,m=u[i.name];return r=r.replace(d,function(t,n,r,o){return"foreground"===n?"shadow"==r?e.foregroundShadow:e.foregroundPalette[r]||e.foregroundPalette[1]:(0===r.indexOf("hue")&&(r=e.colors[n].hues[r]),l((u[e.colors[n].name][r]||"").value,o))}),t.forEach(i.hues,function(t,n){var i=r.replace(c,function(e,n,r,o,i){return l(m[t]["color"===o?"value":"contrast"],i)});"default"!==n&&(i=i.replace(a,".md-"+e.name+"-theme.md-"+n)),"default"==e.name&&(i=i.replace(/\.md-default-theme/g,"")),o.push(i)}),o}function a(e){function n(e){var n=e.contrastDefaultColor,r=e.contrastLightColors||[],o=e.contrastStrongLightColors||[],i=e.contrastDarkColors||[];"string"==typeof r&&(r=r.split(" ")),"string"==typeof o&&(o=o.split(" ")),"string"==typeof i&&(i=i.split(" ")),delete e.contrastDefaultColor,delete e.contrastLightColors,delete e.contrastStrongLightColors,delete e.contrastDarkColors,t.forEach(e,function(a,s){function l(){return"light"===n?i.indexOf(s)>-1?v:o.indexOf(s)>-1?b:$:r.indexOf(s)>-1?o.indexOf(s)>-1?b:$:v}if(!t.isObject(a)){var u=c(a);if(!u)throw new Error("Color %1, in palette %2's hue %3, is invalid. Hex or rgb(a) color expected.".replace("%1",a).replace("%2",e.name).replace("%3",s));e[s]={value:u,contrast:l()}}})}var r=document.getElementsByTagName("head")[0],o=r?r.firstElementChild:null,a=e.has("$MD_THEME_CSS")?e.get("$MD_THEME_CSS"):"";if(o&&0!==a.length){t.forEach(u,n);var s={},l=a.split(/\}(?!(\}|'|"|;))/).filter(function(e){return e&&e.length}).map(function(e){return e.trim()+"}"}),f=new RegExp("md-("+E.join("|")+")","g");E.forEach(function(e){s[e]=""}),l.forEach(function(e){for(var t,n=(e.match(f),0);t=E[n];n++)if(e.indexOf(".md-"+t)>-1)return s[t]+=e;for(n=0;t=E[n];n++)if(e.indexOf(t)>-1)return s[t]+=e;return s[y]+=e}),t.forEach(d,function(e){m[e.name]||(E.forEach(function(t){for(var n=i(e,t,s[t]);n.length;){var a=document.createElement("style");a.setAttribute("type","text/css"),a.appendChild(document.createTextNode(n.shift())),r.insertBefore(a,o)}}),e.colors.primary.name==e.colors.accent.name&&console.warn("$mdThemingProvider: Using the same palette for primary and accent. This violates the material design spec."),m[e.name]=!0)})}}function s(e,t){if(!u[(e.colors[t]||{}).name])throw new Error("You supplied an invalid color palette for theme %1's %2 palette. Available palettes: %3".replace("%1",e.name).replace("%2",t).replace("%3",Object.keys(u).join(", ")))}function c(e){if(t.isArray(e)&&3==e.length)return e;if(/^rgb/.test(e))return e.replace(/(^\s*rgba?\(|\)\s*$)/g,"").split(",").map(function(e,t){return 3==t?parseFloat(e,10):parseInt(e,10)});if("#"==e.charAt(0)&&(e=e.substring(1)),/^([a-fA-F0-9]{3}){1,2}$/g.test(e)){var n=e.length/3,r=e.substr(0,n),o=e.substr(n,n),i=e.substr(2*n);return 1===n&&(r+=r,o+=o,i+=i),[parseInt(r,16),parseInt(o,16),parseInt(i,16)]}}function l(e,n){return e?(4==e.length&&(e=t.copy(e),n?e.pop():n=e.pop()),n&&("number"==typeof n||"string"==typeof n&&n.length)?"rgba("+e.join(",")+","+n+")":"rgb("+e.join(",")+")"):"rgb('0,0,0')"}t.module("material.core.theming",["material.core.theming.palette"]).directive("mdTheme",r).directive("mdThemable",o).provider("$mdTheming",e).run(a);var u,d,m={},f={name:"dark",1:"rgba(0,0,0,0.87)",2:"rgba(0,0,0,0.54)",3:"rgba(0,0,0,0.26)",4:"rgba(0,0,0,0.12)"},p={name:"light",1:"rgba(255,255,255,1.0)",2:"rgba(255,255,255,0.7)",3:"rgba(255,255,255,0.3)",4:"rgba(255,255,255,0.12)"},h="1px 1px 0px rgba(0,0,0,0.4), -1px -1px 0px rgba(0,0,0,0.4)",g="",v=c("rgba(0,0,0,0.87)"),$=c("rgba(255,255,255,0.87"),b=c("rgb(255,255,255)"),E=["primary","accent","warn","background"],y="primary",M={accent:{"default":"A200","hue-1":"A100","hue-2":"A400","hue-3":"A700"},background:{"default":"A100","hue-1":"300","hue-2":"800","hue-3":"900"}},w={background:{"default":"800","hue-1":"300","hue-2":"600","hue-3":"900"}};E.forEach(function(e){var t={"default":"500","hue-1":"300","hue-2":"800","hue-3":"A100"};M[e]||(M[e]=t),w[e]||(w[e]=t)});var C=["50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700"];e.$inject=["$mdColorPalette"],r.$inject=["$mdTheming","$interpolate","$log"],o.$inject=["$mdTheming"],a.$inject=["$injector"]}(),function(){t.module("material.components.autocomplete",["material.core","material.components.icon"])}(),function(){function e(e){return e}t.module("material.components.backdrop",["material.core"]).directive("mdBackdrop",e),e.$inject=["$mdTheming"]}(),function(){function e(){return{restrict:"E"}}function n(e){function n(e,n,i,a,s,c,l,u,d){function m(r,o,d){o=i.extractElementByName(o,"md-bottom-sheet"),h=s('<md-backdrop class="md-opaque md-bottom-sheet-backdrop">')(r),h.on("click",function(){a(l.cancel)}),c.inherit(h,d.parent),e.enter(h,d.parent,null);var m=new p(o,d.parent);return d.bottomSheet=m,d.targetEvent&&t.element(d.targetEvent.target).blur(),c.inherit(m.element,d.parent),d.disableParentScroll&&(d.lastOverflow=d.parent.css("overflow"),d.parent.css("overflow","hidden")),e.enter(m.element,d.parent).then(function(){var e=t.element(o[0].querySelector("button")||o[0].querySelector("a")||o[0].querySelector("[ng-click]"));e.focus(),d.escapeToClose&&(d.rootElementKeyupCallback=function(e){e.keyCode===n.KEY_CODE.ESCAPE&&a(l.cancel)},u.on("keyup",d.rootElementKeyupCallback))})}function f(n,r,o){var i=o.bottomSheet;return e.leave(h),e.leave(i.element).then(function(){o.disableParentScroll&&(o.parent.css("overflow",o.lastOverflow),delete o.lastOverflow),i.cleanup(),o.targetEvent&&t.element(o.targetEvent.target).focus()})}function p(e,t){function i(t){e.css(n.CSS.TRANSITION_DURATION,"0ms")}function s(t){var r=t.pointer.distanceY;5>r&&(r=Math.max(-o,r/2)),e.css(n.CSS.TRANSFORM,"translate3d(0,"+(o+r)+"px,0)")}function c(t){if(t.pointer.distanceY>0&&(t.pointer.distanceY>20||Math.abs(t.pointer.velocityY)>r)){var o=e.prop("offsetHeight")-t.pointer.distanceY,i=Math.min(o/t.pointer.velocityY*.75,500);e.css(n.CSS.TRANSITION_DURATION,i+"ms"),a(l.cancel)}else e.css(n.CSS.TRANSITION_DURATION,""),e.css(n.CSS.TRANSFORM,"")}var u=d.register(t,"drag",{horizontal:!1});return t.on("$md.dragstart",i).on("$md.drag",s).on("$md.dragend",c),{element:e,cleanup:function(){u(),t.off("$md.dragstart",i).off("$md.drag",s).off("$md.dragend",c)}}}var h;return{themable:!0,targetEvent:null,onShow:m,onRemove:f,escapeToClose:!0,disableParentScroll:!0}}var r=.5,o=80;return n.$inject=["$animate","$mdConstant","$mdUtil","$timeout","$compile","$mdTheming","$mdBottomSheet","$rootElement","$mdGesture"],e("$mdBottomSheet").setDefaults({methods:["disableParentScroll","escapeToClose","targetEvent"],options:n})}t.module("material.components.bottomSheet",["material.core","material.components.backdrop"]).directive("mdBottomSheet",e).provider("$mdBottomSheet",n),n.$inject=["$$interimElementProvider"]}(),function(){function e(e,n,r,o){function i(e){return t.isDefined(e.href)||t.isDefined(e.ngHref)||t.isDefined(e.ngLink)||t.isDefined(e.uiSref)}function a(e,t){return i(t)?'<a class="md-button" ng-transclude></a>':'<button class="md-button" ng-transclude></button>'}function s(a,s,c){var l=s[0];n(s),e.attach(a,s);var u=l.textContent.trim();u||r.expect(s,"aria-label"),i(c)&&t.isDefined(c.ngDisabled)&&a.$watch(c.ngDisabled,function(e){s.attr("tabindex",e?-1:0)}),s.on("click",function(e){c.disabled===!0&&(e.preventDefault(),e.stopImmediatePropagation())}),a.mouseActive=!1,s.on("mousedown",function(){a.mouseActive=!0,o(function(){a.mouseActive=!1},100)}).on("focus",function(){a.mouseActive===!1&&s.addClass("md-focused")}).on("blur",function(){s.removeClass("md-focused")})}return{restrict:"EA",replace:!0,transclude:!0,template:a,link:s}}t.module("material.components.button",["material.core"]).directive("mdButton",e),e.$inject=["$mdButtonInkRipple","$mdTheming","$mdAria","$timeout"]}(),function(){function e(e){return{restrict:"E",link:function(t,n,r){e(n)}}}t.module("material.components.card",["material.core"]).directive("mdCard",e),e.$inject=["$mdTheming"]}(),function(){function e(e,n,r,o,i,a,s){function c(n,c){return c.type="checkbox",c.tabindex=c.tabindex||"0",n.attr("role",c.type),function(n,c,u,d){function m(e,t,r){u[e]&&n.$watch(u[e],function(e){r[e]&&c.attr(t,r[e])})}function f(e){var t=e.which||e.keyCode;(t===o.KEY_CODE.SPACE||t===o.KEY_CODE.ENTER)&&(e.preventDefault(),c.hasClass("md-focused")||c.addClass("md-focused"),p(e))}function p(e){c[0].hasAttribute("disabled")||n.$apply(function(){var t=u.ngChecked?u.checked:!d.$viewValue;d.$setViewValue(t,e&&e.type),d.$render()})}function h(){d.$viewValue?c.addClass(l):c.removeClass(l)}d=d||a.fakeNgModel(),i(c),u.ngChecked&&n.$watch(n.$eval.bind(n,u.ngChecked),d.$setViewValue.bind(d)),m("ngDisabled","tabindex",{"true":"-1","false":u.tabindex}),r.expectWithText(c,"aria-label"),e.link.pre(n,{on:t.noop,0:{}},u,[d]),n.mouseActive=!1,c.on("click",p).on("keypress",f).on("mousedown",function(){n.mouseActive=!0,s(function(){n.mouseActive=!1},100)}).on("focus",function(){n.mouseActive===!1&&c.addClass("md-focused")}).on("blur",function(){c.removeClass("md-focused")}),d.$render=h}}e=e[0];var l="md-checked";return{restrict:"E",transclude:!0,require:"?ngModel",priority:210,template:'<div class="md-container" md-ink-ripple md-ink-ripple-checkbox><div class="md-icon"></div></div><div ng-transclude class="md-label"></div>',compile:c}}t.module("material.components.checkbox",["material.core"]).directive("mdCheckbox",e),e.$inject=["inputDirective","$mdInkRipple","$mdAria","$mdConstant","$mdTheming","$mdUtil","$timeout"]}(),function(){function e(e){function t(e,t){this.$scope=e,this.$element=t}return{restrict:"E",controller:["$scope","$element",t],link:function(t,r,o){r[0];e(r),t.$broadcast("$mdContentLoaded",r),n(r[0])}}}function n(e){t.element(e).on("$md.pressdown",function(t){"t"===t.pointer.type&&(t.$materialScrollFixed||(t.$materialScrollFixed=!0,0===e.scrollTop?e.scrollTop=1:e.scrollHeight===e.scrollTop+e.offsetHeight&&(e.scrollTop-=1)))})}t.module("material.components.content",["material.core"]).directive("mdContent",e),e.$inject=["$mdTheming"]}(),function(){t.module("material.components.chips",["material.core","material.components.autocomplete"])}(),function(){function e(e,t){return{restrict:"E",link:function(n,r,o){t(r),e(function(){var e=r[0].querySelector("md-dialog-content");e&&e.scrollHeight>e.clientHeight&&r.addClass("md-content-overflow")})}}}function n(e){function n(e,t){return{template:['<md-dialog md-theme="{{ dialog.theme }}" aria-label="{{ dialog.ariaLabel }}">','<md-dialog-content role="document" tabIndex="-1">','<h2 class="md-title">{{ dialog.title }}</h2>',"<p>{{ dialog.content }}</p>","</md-dialog-content>",'<div class="md-actions">','<md-button ng-if="dialog.$type == \'confirm\'" ng-click="dialog.abort()" class="md-primary">',"{{ dialog.cancel }}","</md-button>",'<md-button ng-click="dialog.hide()" class="md-primary">',"{{ dialog.ok }}","</md-button>","</div>","</md-dialog>"].join(""),controller:function(){this.hide=function(){e.hide(!0)},this.abort=function(){e.cancel()}},controllerAs:"dialog",bindToController:!0,theme:t.defaultTheme()}}function r(e,n,r,o,i,a,s,c,l,u,d){function m(e){var t=document.querySelector("md-dialog");t&&!t.contains(e.target)&&(e.stopImmediatePropagation(),t.focus())}function f(e,u,d){function f(){var e=u[0].querySelector(".dialog-close");if(!e){var n=u[0].querySelectorAll(".md-actions button");e=n[n.length-1]}return t.element(e)}t.element(n[0].body).addClass("md-dialog-is-showing"),u=r.extractElementByName(u,"md-dialog"),d.parent=t.element(d.parent),d.popInTarget=t.element((d.targetEvent||{}).target);var p=f();if(d.hasBackdrop){var g=d.parent[0]==n[0].body&&n[0].documentElement&&n[0].documentElement.scrollTop?t.element(n[0].documentElement):d.parent,b=g.prop("scrollTop");d.backdrop=t.element('<md-backdrop class="md-dialog-backdrop md-opaque">'),d.backdrop.css("top",b+"px"),i.inherit(d.backdrop,d.parent),l.enter(d.backdrop,d.parent),u.css("top",b+"px")}var E="dialog",y=p;return"alert"===d.$type&&(E="alertdialog",y=u.find("md-dialog-content")),h(u.find("md-dialog"),E,d),document.addEventListener("focus",m,!0),d.disableParentScroll&&(d.lastOverflow=d.parent.css("overflow"),d.parent.css("overflow","hidden")),$(u,d.parent,d.popInTarget&&d.popInTarget.length&&d.popInTarget).then(function(){v(u,!0),d.escapeToClose&&(d.rootElementKeyupCallback=function(e){e.keyCode===o.KEY_CODE.ESCAPE&&s(a.cancel)},c.on("keyup",d.rootElementKeyupCallback)),d.clickOutsideToClose&&(d.dialogClickOutsideCallback=function(e){e.target===u[0]&&s(a.cancel)},u.on("click",d.dialogClickOutsideCallback)),d.focusOnOpen&&y.focus()})}function p(e,r,o){return t.element(n[0].body).removeClass("md-dialog-is-showing"),o.backdrop&&l.leave(o.backdrop),o.disableParentScroll&&(o.parent.css("overflow",o.lastOverflow),delete o.lastOverflow),o.escapeToClose&&c.off("keyup",o.rootElementKeyupCallback),o.clickOutsideToClose&&r.off("click",o.dialogClickOutsideCallback),v(r,!1),document.removeEventListener("focus",m,!0),b(r,o.parent,o.popInTarget&&o.popInTarget.length&&o.popInTarget).then(function(){r.remove(),o.popInTarget&&o.popInTarget.focus()})}function h(t,n,o){t.attr({role:n,tabIndex:"-1"});var i=t.find("md-dialog-content");0===i.length&&(i=t);var a=t.attr("id")||"dialog_"+r.nextUid();i.attr("id",a),t.attr("aria-describedby",a),o.ariaLabel?e.expect(t,"aria-label",o.ariaLabel):e.expectAsync(t,"aria-label",function(){var e=i.text().split(/\s+/);return e.length>3&&(e=e.slice(0,3).concat("...")),e.join(" ")})}function g(e,t){return-1!==t.indexOf(e.nodeName)?!0:void 0}function v(e,t){function n(e){for(;e.parentNode;){if(e===document.body)return;for(var o=e.parentNode.children,i=0;i<o.length;i++)e===o[i]||g(o[i],["SCRIPT","STYLE"])||o[i].setAttribute(r,t);n(e=e.parentNode)}}var r="aria-hidden";e=e[0],n(e)}function $(e,t,n){var i=e.find("md-dialog");return t.append(e),E(i,n),u(function(){i.addClass("transition-in").css(o.CSS.TRANSFORM,"")}),r.transitionEndPromise(i)}function b(e,t,n){var o=e.find("md-dialog");return o.addClass("transition-out").removeClass("transition-in"),E(o,n),r.transitionEndPromise(o)}function E(e,t){if(t){var n=t[0].getBoundingClientRect(),r=e[0].getBoundingClientRect(),i=Math.min(.5,n.width/r.width),a=Math.min(.5,n.height/r.height);e.css(o.CSS.TRANSFORM,"translate3d("+(-r.left+n.left+n.width/2-r.width/2)+"px,"+(-r.top+n.top+n.height/2-r.height/2)+"px,0) scale("+i+","+a+")")}}return{hasBackdrop:!0,isolateScope:!0,onShow:f,onRemove:p,clickOutsideToClose:!1,escapeToClose:!0,targetEvent:null,focusOnOpen:!0,disableParentScroll:!0,transformTemplate:function(e){return'<div class="md-dialog-container">'+e+"</div>"}}}return n.$inject=["$mdDialog","$mdTheming"],r.$inject=["$mdAria","$document","$mdUtil","$mdConstant","$mdTheming","$mdDialog","$timeout","$rootElement","$animate","$$rAF","$q"],e("$mdDialog").setDefaults({methods:["disableParentScroll","hasBackdrop","clickOutsideToClose","escapeToClose","targetEvent","parent"],options:r}).addPreset("alert",{methods:["title","content","ariaLabel","ok","theme"],options:n}).addPreset("confirm",{methods:["title","content","ariaLabel","ok","cancel","theme"],options:n})}t.module("material.components.dialog",["material.core","material.components.backdrop"]).directive("mdDialog",e).provider("$mdDialog",n),e.$inject=["$$rAF","$mdTheming"],n.$inject=["$$interimElementProvider"]}(),function(){!function(){function e(){return{restrict:"E",require:["^?mdFabSpeedDial","^?mdFabToolbar"],link:function(e,n,r,o){var i=o[0]||o[1];i&&t.forEach(n.children(),function(e){t.element(e).on("focus",i.open),t.element(e).on("blur",i.close)}),n.children().wrap('<div class="md-fab-action-item">')}}}t.module("material.components.fabActions",["material.core"]).directive("mdFabActions",e)}()}(),function(){function e(e){return{restrict:"E",link:e}}t.module("material.components.divider",["material.core"]).directive("mdDivider",e),e.$inject=["$mdTheming"]}(),function(){!function(){function e(){function e(e,t){t.prepend('<div class="md-css-variables"></div>')}function t(e,t,n){function r(){a.direction=a.direction||"down",a.isOpen=a.isOpen||!1}function o(){t.on("mouseenter",a.open),t.on("mouseleave",a.close)}function i(){e.$watch("vm.direction",function(e,r){n.removeClass(t,"md-"+r),n.addClass(t,"md-"+e)}),e.$watch("vm.isOpen",function(e){var r=e?"md-is-open":"",o=e?"":"md-is-open";n.setClass(t,r,o)})}var a=this;a.open=function(){e.$apply("vm.isOpen = true")},a.close=function(){e.$apply("vm.isOpen = false")},r(),o(),i()}return t.$inject=["$scope","$element","$animate"],{restrict:"E",scope:{direction:"@?mdDirection",isOpen:"=?mdOpen"},bindToController:!0,controller:t,controllerAs:"vm",link:e}}function n(){function e(e){var n=e[0],r=e.controller("mdFabSpeedDial"),o=n.querySelectorAll(".md-fab-action-item"),i=n.querySelector(".md-css-variables"),a=i.style.zIndex;t.forEach(o,function(e,t){var n=e.style;n.transform="",n.transitionDelay="",n.opacity=1,e.style.zIndex=o.length-t+a}),r.isOpen||t.forEach(o,function(e,t){var n,o;switch(r.direction){case"up":n=e.scrollHeight*(t+1),o="Y";break;case"down":n=-e.scrollHeight*(t+1),o="Y";break;case"left":n=e.scrollWidth*(t+1),o="X";break;case"right":n=-e.scrollWidth*(t+1),o="X"}e.style.transform="translate"+o+"("+n+"px)"})}return{addClass:function(t,n,r){t.hasClass("md-fling")&&e(t)},removeClass:function(t,n,r){e(t)}}}function r(){function e(e){var r=e[0],o=e.controller("mdFabSpeedDial"),i=r.querySelectorAll(".md-fab-action-item");t.forEach(i,function(e,t){var r=e.style,a=t*n;r.opacity=o.isOpen?1:0,r.transform=o.isOpen?"scale(1)":"scale(0)",r.transitionDelay=(o.isOpen?a:i.length-a)+"ms"})}var n=65;return{addClass:function(t,n,r){e(t)},removeClass:function(t,n,r){e(t)}}}t.module("material.components.fabSpeedDial",["material.core","material.components.fabTrigger","material.components.fabActions"]).directive("mdFabSpeedDial",e).animation(".md-fling",n).animation(".md-scale",r)}()}(),function(){!function(){function n(){function e(e,t,n){var r=this;r.isOpen=r.isOpen||!1,r.open=function(){r.isOpen=!0,e.$apply()},r.close=function(){r.isOpen=!1,e.$apply()},t.addClass("md-fab-toolbar"),t.on("mouseenter",r.open),t.on("mouseleave",r.close),e.$watch("vm.isOpen",function(e){var r=e?"md-is-open":"",o=e?"":"md-is-open";n.setClass(t,r,o)})}function t(e,t,n){t.find("md-fab-trigger").find("button").attr("tabindex","-1"),t.find("md-fab-trigger").find("button").prepend('<div class="md-fab-toolbar-background"></div>')}return e.$inject=["$scope","$element","$animate"],{restrict:"E",transclude:!0,template:'<div class="md-fab-toolbar-wrapper">  <div class="md-fab-toolbar-content" ng-transclude></div></div>',scope:{isOpen:"=?mdOpen"},bindToController:!0,controller:e,controllerAs:"vm",link:t}}function r(){function n(n,r,o){var i=n[0],a=n.controller("mdFabToolbar"),s=i.querySelector(".md-fab-toolbar-background"),c=i.querySelector("md-fab-trigger button"),l=i.querySelector("md-fab-trigger button md-icon"),u=n.find("md-fab-actions").children();if(c&&s){var d=e.getComputedStyle(c).getPropertyValue("background-color"),m=i.offsetWidth,f=(i.offsetHeight,2*m);s.style.backgroundColor=d,s.style.borderRadius=m+"px",a.isOpen?(s.style.width=f+"px",s.style.height=f+"px",s.style.top=-(f/2)+"px",n.hasClass("md-left")&&(s.style.left=-(f/2)+"px",s.style.right=null),n.hasClass("md-right")&&(s.style.right=-(f/2)+"px",s.style.left=null),s.style.transitionDelay="0ms",l.style.transitionDelay=".3s",t.forEach(u,function(e,t){e.style.transitionDelay=25*(u.length-t)+"ms"})):(s.style.width=c.offsetWidth+"px",s.style.height=c.offsetHeight+"px",s.style.top="0px",n.hasClass("md-left")&&(s.style.left="0px",s.style.right=null),n.hasClass("md-right")&&(s.style.right="0px",s.style.left=null),s.style.transitionDelay="200ms",l.style.transitionDelay="0ms",t.forEach(u,function(e,t){e.style.transitionDelay=25*t+"ms"}))}}return{addClass:function(e,t,r){n(e,t,r)},removeClass:function(e,t,r){n(e,t,r)}}}t.module("material.components.fabToolbar",["material.core","material.components.fabTrigger","material.components.fabActions"]).directive("mdFabToolbar",n).animation(".md-fab-toolbar",r)}()}(),function(){function e(e,r,o,i){function a(n,a,s,c){function l(){for(var e in r.MEDIA)i(e),i.getQuery(r.MEDIA[e]).addListener(w);return i.watchResponsiveAttributes(["md-cols","md-row-height"],s,d)}function u(){c.layoutDelegate=t.noop,C();for(var e in r.MEDIA)i.getQuery(r.MEDIA[e]).removeListener(w)}function d(e){null==e?c.invalidateLayout():i(e)&&c.invalidateLayout()}function m(e){var r=g(),i={tileSpans:v(r),colCount:$(),rowMode:y(),rowHeight:E(),gutter:b()};if(e||!t.equals(i,A)){var s=o(i.colCount,i.tileSpans,r).map(function(e,n){return{grid:{element:a,style:h(i.colCount,n,i.gutter,i.rowMode,i.rowHeight)},tiles:e.map(function(e,n){return{element:t.element(r[n]),style:p(e.position,e.spans,i.colCount,i.rowCount,i.gutter,i.rowMode,i.rowHeight)}})}}).reflow().performance();n.mdOnLayout({$event:{performance:s}}),A=i}}function f(e){return x+e+T}function p(e,t,n,r,o,i,a){var s=1/n*100,c=(n-1)/n,l=k({share:s,gutterShare:c,gutter:o}),u={left:S({unit:l,offset:e.col,gutter:o}),width:N({unit:l,span:t.col,gutter:o}),paddingTop:"",marginTop:"",top:"",height:""};switch(i){case"fixed":u.top=S({unit:a,offset:e.row,gutter:o}),u.height=N({unit:a,span:t.row,gutter:o});break;case"ratio":var d=s/a,m=k({share:d,gutterShare:c,gutter:o});u.paddingTop=N({unit:m,span:t.row,gutter:o}),u.marginTop=S({unit:m,offset:e.row,gutter:o});break;case"fit":var f=(r-1)/r,d=1/r*100,m=k({share:d,gutterShare:f,gutter:o});u.top=S({unit:m,offset:e.row,gutter:o}),u.height=N({unit:m,span:t.row,gutter:o})}return u}function h(e,t,n,r,o){var i={height:"",paddingBottom:""};switch(r){case"fixed":i.height=N({unit:o,span:t,gutter:n});break;case"ratio":var a=1===e?0:(e-1)/e,s=1/e*100,c=s*(1/o),l=k({share:c,gutterShare:a,gutter:n});i.paddingBottom=N({unit:l,span:t,gutter:n});break;case"fit":}return i}function g(){return[].filter.call(a.children(),function(e){return"MD-GRID-TILE"==e.tagName})}function v(e){return[].map.call(e,function(e){var n=t.element(e).controller("mdGridTile");return{row:parseInt(i.getResponsiveAttribute(n.$attrs,"md-rowspan"),10)||1,col:parseInt(i.getResponsiveAttribute(n.$attrs,"md-colspan"),10)||1}})}function $(){var e=parseInt(i.getResponsiveAttribute(s,"md-cols"),10);if(isNaN(e))throw"md-grid-list: md-cols attribute was not found, or contained a non-numeric value";return e}function b(){return M(i.getResponsiveAttribute(s,"md-gutter")||1)}function E(){var e=i.getResponsiveAttribute(s,"md-row-height");switch(y()){case"fixed":return M(e);case"ratio":var t=e.split(":");return parseFloat(t[0])/parseFloat(t[1]);case"fit":return 0}}function y(){var e=i.getResponsiveAttribute(s,"md-row-height");return"fit"==e?"fit":-1!==e.indexOf(":")?"ratio":"fixed"}function M(e){return/\D$/.test(e)?e:e+"px"}a.attr("role","list"),c.layoutDelegate=m;var w=t.bind(c,c.invalidateLayout),C=l();n.$on("$destroy",u);var A,x=e.startSymbol(),T=e.endSymbol(),k=e(f("share")+"% - ("+f("gutter")+" * "+f("gutterShare")+")"),S=e("calc(("+f("unit")+" + "+f("gutter")+") * "+f("offset")+")"),N=e("calc(("+f("unit")+") * "+f("span")+" + ("+f("span")+" - 1) * "+f("gutter")+")")}return{restrict:"E",controller:n,scope:{mdOnLayout:"&"},link:a}}function n(e){this.layoutInvalidated=!1,this.tilesInvalidated=!1,this.$timeout_=e,this.layoutDelegate=t.noop}function r(e){function n(t,n){var r,a,s,c,l,u;return c=e.time(function(){a=o(t,n)}),r={layoutInfo:function(){return a},map:function(t){return l=e.time(function(){var e=r.layoutInfo();s=t(e.positioning,e.rowCount)}),r},reflow:function(t){return u=e.time(function(){var e=t||i;e(s.grid,s.tiles)}),r},performance:function(){return{tileCount:n.length,layoutTime:c,mapTime:l,reflowTime:u,totalTime:c+l+u}}}}function r(e,t){e.element.css(e.style),t.forEach(function(e){e.element.css(e.style)})}function o(e,t){function n(t,n){if(t.col>e)throw"md-grid-list: Tile at position "+n+" has a colspan ("+t.col+") that exceeds the column count ("+e+")";for(var a=0,u=0;u-a<t.col;)s>=e?r():(a=l.indexOf(0,s),-1!==a&&-1!==(u=i(a+1))?s=u+1:(a=u=0,r()));return o(a,t.col,t.row),s=a+t.col,{col:a,row:c}}function r(){s=0,c++,o(0,e,-1)}function o(e,t,n){for(var r=e;e+t>r;r++)l[r]=Math.max(l[r]+n,0)}function i(e){var t;for(t=e;t<l.length;t++)if(0!==l[t])return t;return t===l.length?t:void 0}function a(){for(var t=[],n=0;e>n;n++)t.push(0);return t}var s=0,c=0,l=a();return{positioning:t.map(function(e,t){return{spans:e,position:n(e,t)}}),rowCount:c+Math.max.apply(Math,l)}}var i=r;return n.animateWith=function(e){i=t.isFunction(e)?e:r},n}function o(e){function n(n,r,o,i){r.attr("role","listitem");var a=e.watchResponsiveAttributes(["md-colspan","md-rowspan"],o,t.bind(i,i.invalidateLayout));i.invalidateTiles(),n.$on("$destroy",function(){a(),i.invalidateLayout()}),t.isDefined(n.$parent.$index)&&n.$watch(function(){return n.$parent.$index},function(e,t){e!==t&&i.invalidateTiles()})}return{restrict:"E",require:"^mdGridList",template:"<figure ng-transclude></figure>",transclude:!0,scope:{},controller:["$attrs",function(e){this.$attrs=e}],link:n}}function i(){return{template:"<figcaption ng-transclude></figcaption>",transclude:!0}}t.module("material.components.gridList",["material.core"]).directive("mdGridList",e).directive("mdGridTile",o).directive("mdGridTileFooter",i).directive("mdGridTileHeader",i).factory("$mdGridLayout",r),e.$inject=["$interpolate","$mdConstant","$mdGridLayout","$mdMedia"],n.$inject=["$timeout"],n.prototype={invalidateTiles:function(){this.tilesInvalidated=!0,this.invalidateLayout()},invalidateLayout:function(){this.layoutInvalidated||(this.layoutInvalidated=!0,this.$timeout_(t.bind(this,this.layout)))},layout:function(){try{this.layoutDelegate(this.tilesInvalidated)}finally{this.layoutInvalidated=!1,this.tilesInvalidated=!1}}},r.$inject=["$mdUtil"],o.$inject=["$mdMedia"]}(),function(){!function(){function e(){return{restrict:"E",require:["^?mdFabSpeedDial","^?mdFabToolbar"],link:function(e,n,r,o){var i=o[0]||o[1];i&&t.forEach(n.children(),function(e){t.element(e).on("focus",i.open),t.element(e).on("blur",i.close)})}}}t.module("material.components.fabTrigger",["material.core"]).directive("mdFabTrigger",e)}()}(),function(){function e(e,t,n,r){function o(r,o,i){function a(){var e=o.parent();return e.attr("aria-label")||e.text()?!0:e.parent().attr("aria-label")||e.parent().text()?!0:!1}function s(){r.svgIcon||r.svgSrc||(r.fontIcon?(o.addClass("md-font"),o.addClass(r.fontIcon)):o.addClass(e.fontSet(r.fontSet)))}t(o),s();var c=i.alt||r.fontIcon||r.svgIcon||o.text(),l=i.$normalize(i.$attr.mdSvgIcon||i.$attr.mdSvgSrc||"");i["aria-label"]||(""==c||a()?o.text()||n.expect(o,"aria-hidden","true"):(n.expect(o,"aria-label",c),n.expect(o,"role","img"))),l&&i.$observe(l,function(t){o.empty(),t&&e(t).then(function(e){o.append(e)})})}return{scope:{fontSet:"@mdFontSet",fontIcon:"@mdFontIcon",svgIcon:"@mdSvgIcon",svgSrc:"@mdSvgSrc"},restrict:"E",link:o}}t.module("material.components.icon",["material.core"]).directive("mdIcon",e),e.$inject=["$mdIcon","$mdTheming","$mdAria","$interpolate"]}(),function(){function e(){}
function n(e,t){this.url=e,this.viewBoxSize=t||o.defaultViewBoxSize}function r(e,n,r,o,i){function a(e){return e=e||"",$[e]?r.when($[e].clone()):b.test(e)?d(e).then(c(e)):(-1==e.indexOf(":")&&(e="$default:"+e),l(e)["catch"](u)["catch"](m)["catch"](f).then(c(e)))}function s(n){var r=t.isUndefined(n)||!(n&&n.length);if(r)return e.defaultFontSet;var o=n;return t.forEach(e.fontSets,function(e){e.alias==n&&(o=e.fontSet||o)}),o}function c(t){return function(n){return $[t]=p(n)?n:new h(n,e[t]),$[t].clone()}}function l(t){var n=e[t];return n?d(n.url).then(function(e){return new h(e,n)}):r.reject(t)}function u(t){function n(e){var n=t.slice(t.lastIndexOf(":")+1),o=e.querySelector("#"+n);return o?new h(o,i):r.reject(t)}var o=t.substring(0,t.lastIndexOf(":"))||"$default",i=e[o];return i?d(i.url).then(n):r.reject(t)}function d(e){return n.get(e,{cache:i}).then(function(e){return t.element("<div>").append(e.data).find("svg")[0]})}function m(e){var n;return t.isString(e)&&(n="icon "+e+" not found",o.warn(n)),r.reject(n||e)}function f(e){var n=t.isString(e)?e:e.message||e.data||e.statusText;return o.warn(n),r.reject(n)}function p(e){return t.isDefined(e.element)&&t.isDefined(e.config)}function h(e,n){"svg"!=e.tagName&&(e=t.element('<svg xmlns="http://www.w3.org/2000/svg">').append(e)[0]),e.getAttribute("xmlns")||e.setAttribute("xmlns","http://www.w3.org/2000/svg"),this.element=e,this.config=n,this.prepare()}function g(){var n=this.config?this.config.viewBoxSize:e.defaultViewBoxSize;t.forEach({fit:"",height:"100%",width:"100%",preserveAspectRatio:"xMidYMid meet",viewBox:this.element.getAttribute("viewBox")||"0 0 "+n+" "+n},function(e,t){this.element.setAttribute(t,e)},this),t.forEach({"pointer-events":"none",display:"block"},function(e,t){this.element.style[t]=e},this)}function v(){return this.element.cloneNode(!0)}var $={},b=/[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/i;return h.prototype={clone:v,prepare:g},a.fontSet=s,a}t.module("material.components.icon").provider("$mdIcon",e);var o={defaultViewBoxSize:24,defaultFontSet:"material-icons",fontSets:[]};e.prototype={icon:function(e,t,r){return-1==e.indexOf(":")&&(e="$default:"+e),o[e]=new n(t,r),this},iconSet:function(e,t,r){return o[e]=new n(t,r),this},defaultIconSet:function(e,t){var r="$default";return o[r]||(o[r]=new n(e,t)),o[r].viewBoxSize=t||o.defaultViewBoxSize,this},defaultViewBoxSize:function(e){return o.defaultViewBoxSize=e,this},fontSet:function(e,t){o.fontSets.push({alias:e,fontSet:t||e})},defaultFontSet:function(e){return o.defaultFontSet=e?e:"",this},defaultIconSize:function(e){return o.defaultIconSize=e,this},preloadIcons:function(e){var t=this,n=[{id:"md-tabs-arrow",url:"md-tabs-arrow.svg",svg:'<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><polygon points="15.4,7.4 14,6 8,12 14,18 15.4,16.6 10.8,12 "/></g></svg>'},{id:"md-close",url:"md-close.svg",svg:'<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z"/></g></svg>'},{id:"md-cancel",url:"md-cancel.svg",svg:'<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M12 2c-5.53 0-10 4.47-10 10s4.47 10 10 10 10-4.47 10-10-4.47-10-10-10zm5 13.59l-1.41 1.41-3.59-3.59-3.59 3.59-1.41-1.41 3.59-3.59-3.59-3.59 1.41-1.41 3.59 3.59 3.59-3.59 1.41 1.41-3.59 3.59 3.59 3.59z"/></g></svg>'},{id:"md-menu",url:"md-menu.svg",svg:'<svg version="1.1" x="0px" y="0px" viewBox="0 0 100 100"><path d="M 50 0 L 100 14 L 92 80 L 50 100 L 8 80 L 0 14 Z" fill="#b2b2b2"></path><path d="M 50 5 L 6 18 L 13.5 77 L 50 94 Z" fill="#E42939"></path><path d="M 50 5 L 94 18 L 86.5 77 L 50 94 Z" fill="#B72833"></path><path d="M 50 7 L 83 75 L 72 75 L 65 59 L 50 59 L 50 50 L 61 50 L 50 26 Z" fill="#b2b2b2"></path><path d="M 50 7 L 17 75 L 28 75 L 35 59 L 50 59 L 50 50 L 39 50 L 50 26 Z" fill="#fff"></path></svg>'},{id:"md-toggle-arrow",url:"md-toggle-arrow-svg",svg:'<svg version="1.1" x="0px" y="0px" viewBox="0 0 48 48"><path d="M24 16l-12 12 2.83 2.83 9.17-9.17 9.17 9.17 2.83-2.83z"/><path d="M0 0h48v48h-48z" fill="none"/></svg>'}];n.forEach(function(n){t.icon(n.id,n.url),e.put(n.url,n.svg)})},$get:["$http","$q","$log","$templateCache",function(e,t,n,i){return this.preloadIcons(i),r(o,e,t,n,i)}]}}(),function(){function e(e,t){function n(t,n,r){e(n)}function r(e,n,r){var o=this;o.isErrorGetter=r.mdIsError&&t(r.mdIsError),o.delegateClick=function(){o.input.focus()},o.element=n,o.setFocused=function(e){n.toggleClass("md-input-focused",!!e)},o.setHasValue=function(e){n.toggleClass("md-input-has-value",!!e)},o.setInvalid=function(e){n.toggleClass("md-input-invalid",!!e)},e.$watch(function(){return o.label&&o.input},function(e){e&&!o.label.attr("for")&&o.label.attr("for",o.input.attr("id"))})}return r.$inject=["$scope","$element","$attrs"],{restrict:"E",link:n,controller:r}}function n(){return{restrict:"E",require:"^?mdInputContainer",link:function(e,t,n,r){r&&!n.mdNoFloat&&(r.label=t,e.$on("$destroy",function(){r.label=null}))}}}function r(e,n,r){function o(o,i,a,s){function c(e){return d.setHasValue(!m.$isEmpty(e)),e}function l(){d.setHasValue(i.val().length>0||(i[0].validity||{}).badInput)}function u(){function r(e){return u(),e}function a(){l.style.height="auto",l.scrollTop=0;var e=s();e&&(l.style.height=e+"px")}function s(){var e=l.scrollHeight-l.offsetHeight;return l.offsetHeight+(e>0?e:0)}function c(e){l.scrollTop=0;var t=l.scrollHeight-l.offsetHeight,n=l.offsetHeight+t;l.style.height=n+"px"}var l=i[0],u=e.debounce(a,1);m?(m.$formatters.push(r),m.$viewChangeListeners.push(r)):u(),i.on("keydown input",u),i.on("scroll",c),t.element(n).on("resize",u),o.$on("$destroy",function(){t.element(n).off("resize",u)})}var d=s[0],m=s[1]||e.fakeNgModel(),f=t.isDefined(a.readonly);if(d){if(d.input)throw new Error("<md-input-container> can only have *one* <input> or <textarea> child element!");d.input=i,d.label||r.expect(i,"aria-label",i.attr("placeholder")),i.addClass("md-input"),i.attr("id")||i.attr("id","input_"+e.nextUid()),"textarea"===i[0].tagName.toLowerCase()&&u();var p=d.isErrorGetter||function(){return m.$invalid&&m.$touched};o.$watch(p,d.setInvalid),m.$parsers.push(c),m.$formatters.push(c),i.on("input",l),f||i.on("focus",function(e){d.setFocused(!0)}).on("blur",function(e){d.setFocused(!1),l()}),o.$on("$destroy",function(){d.setFocused(!1),d.setHasValue(!1),d.input=null})}}return{restrict:"E",require:["^?mdInputContainer","?ngModel"],link:o}}function o(e){function n(n,r,o,i){function a(e){return u.text((r.val()||e||"").length+"/"+s),e}var s,c=i[0],l=i[1],u=t.element('<div class="md-char-counter">');o.$set("ngTrim","false"),l.element.append(u),c.$formatters.push(a),c.$viewChangeListeners.push(a),r.on("input keydown",function(){a()}),n.$watch(o.mdMaxlength,function(n){s=n,t.isNumber(n)&&n>0?(u.parent().length||e.enter(u,l.element,t.element(l.element[0].lastElementChild)),a()):e.leave(u)}),c.$validators["md-maxlength"]=function(e,n){return!t.isNumber(s)||0>s?!0:(e||r.val()||n||"").length<=s}}return{restrict:"A",require:["ngModel","^mdInputContainer"],link:n}}function i(e){function n(n,o,i,a){if(a&&-1==r.indexOf(o[0].nodeName)&&!t.isDefined(a.element.attr("md-no-float"))){var s=i.placeholder;if(o.removeAttr("placeholder"),0==a.element.find("label").length){var c='<label ng-click="delegateClick()">'+s+"</label>";a.element.addClass("md-icon-float"),a.element.prepend(c)}else e.warn("The placeholder='"+s+"' will be ignored since this md-input-container has a child label element.")}}var r=["MD-SELECT"];return{restrict:"A",require:"^^?mdInputContainer",priority:200,link:n}}t.module("material.components.input",["material.core"]).directive("mdInputContainer",e).directive("label",n).directive("input",r).directive("textarea",r).directive("mdMaxlength",o).directive("placeholder",i),e.$inject=["$mdTheming","$parse"],r.$inject=["$mdUtil","$window","$mdAria"],o.$inject=["$animate"],i.$inject=["$log"]}(),function(){function e(e){return{restrict:"E",compile:function(t){return t[0].setAttribute("role","list"),e}}}function n(e,n,r){var o=["md-checkbox","md-switch"];return{restrict:"E",controller:"MdListController",compile:function(i,a){function s(){for(var e,t,n=["md-switch","md-checkbox"],r=0;t=n[r];++r)if((e=i.find(t)[0])&&!e.hasAttribute("aria-label")){var o=i.find("p")[0];if(!o)return;e.setAttribute("aria-label","Toggle "+o.textContent)}}function c(n){var r;if("div"==n)r=t.element('<div class="md-no-style md-list-item-inner">'),r.append(i.contents()),i.addClass("md-proxy-focus");else{r=t.element('<md-button class="md-no-style"><div class="md-list-item-inner"></div></md-button>');var o=["ng-click","aria-label","ng-disabled"];t.forEach(o,function(e){i[0].hasAttribute(e)&&(r[0].setAttribute(e,i[0].getAttribute(e)),i[0].removeAttribute(e))}),r.children().eq(0).append(i.contents())}if(i[0].setAttribute("tabindex","-1"),i.append(r),f&&f.hasAttribute("ng-click")){e.expect(f,"aria-label");var s=t.element('<md-button class="md-secondary-container md-icon-button">');s.attr("ng-click",f.getAttribute("ng-click")),f.removeAttribute("ng-click"),f.setAttribute("tabindex","-1"),f.classList.remove("md-secondary"),s.append(f),f=s[0]}f&&(f.hasAttribute("ng-click")||a.ngClick&&l(f))&&(i.addClass("md-with-secondary"),i.append(f))}function l(e){return-1!=o.indexOf(e.nodeName.toLowerCase())}function u(e,i,a,s){function c(){var e=i.children();e.length&&!e[0].hasAttribute("ng-click")&&t.forEach(o,function(e){t.forEach(d.querySelectorAll(e),function(e){u.push(e)})})}function l(){(u.length||m)&&(i.addClass("md-clickable"),s.attachRipple(e,t.element(i[0].querySelector(".md-no-style"))))}var u=[],d=i[0].firstElementChild,m=d&&d.hasAttribute("ng-click");c(),l(),i.hasClass("md-proxy-focus")&&u.length&&t.forEach(u,function(n){n=t.element(n),e.mouseActive=!1,n.on("mousedown",function(){e.mouseActive=!0,r(function(){e.mouseActive=!1},100)}).on("focus",function(){e.mouseActive===!1&&i.addClass("md-focused"),n.on("blur",function t(){i.removeClass("md-focused"),n.off("blur",t)})})}),m||u.length||d&&d.addEventListener("keypress",function(e){if("INPUT"!=e.target.nodeName&&"TEXTAREA"!=e.target.nodeName){var t=e.which||e.keyCode;t==n.KEY_CODE.SPACE&&d&&(d.click(),e.preventDefault(),e.stopPropagation())}}),i.off("click"),i.off("keypress"),u.length&&d&&i.children().eq(0).on("click",function(e){d.contains(e.target)&&t.forEach(u,function(n){e.target===n||n.contains(e.target)||t.element(n).triggerHandler("click")})})}var d,m,f=i[0].querySelector(".md-secondary");if(i[0].setAttribute("role","listitem"),a.ngClick)c("button");else{for(var p,h=0;p=o[h];++h)if(m=i[0].querySelector(p)){d=!0;break}d?c("div"):i[0].querySelector("md-button")||i.addClass("md-no-proxy")}return s(),u}}}function r(e,t,n){function r(e,t){var r={};n.attach(e,t,r)}var o=this;o.attachRipple=r}t.module("material.components.list",["material.core"]).controller("MdListController",r).directive("mdList",e).directive("mdListItem",n),e.$inject=["$mdTheming"],n.$inject=["$mdAria","$mdConstant","$timeout"],r.$inject=["$scope","$element","$mdListInkRipple"]}(),function(){function e(e){function n(e){e.addClass("md-menu");var t=e.children()[0];if(t.hasAttribute("ng-click")||(t=t.querySelector("[ng-click]")),t&&t.setAttribute("aria-haspopup","true"),2!=e.children().length)throw Error("Invalid HTML for md-menu. Expected two children elements.");return r}function r(e,n,r,o){var i=t.element('<div class="md-open-menu-container md-whiteframe-z2"></div>'),a=n.children()[1];i.append(a),o.init(i),e.$on("$destroy",function(){o.isOpen&&(i.remove(),o.close())})}return{restrict:"E",require:"mdMenu",controller:"mdMenuCtrl",scope:!0,compile:n}}function n(e,t,n,r){var o,i,a=this;this.init=function(e){o=e,i=n[0].querySelector("[ng-click]")},this.open=function(){a.isOpen=!0,i.setAttribute("aria-expanded","true"),e.show({mdMenuCtrl:a,element:o,target:n[0]})},r.$mdOpenMenu=this.open,this.close=function(t){a.isOpen=!1,i.setAttribute("aria-expanded","false"),e.hide(),t||n.children()[0].focus()},this.positionMode=function(){var e=(t.mdPositionMode||"target").split(" ");return 1==e.length&&e.push(e[0]),{left:e[0],top:e[1]}},this.offsets=function(){var e=(t.mdOffset||"0 0").split(" ").map(parseFloat);if(2==e.length)return{left:e[0],top:e[1]};if(1==e.length)return{top:e[0],left:e[0]};throw Error("Invalid offsets specified. Please follow format <x, y> or <n>")}}t.module("material.components.menu",["material.core","material.components.backdrop"]).directive("mdMenu",e).controller("mdMenuCtrl",n),e.$inject=["$mdMenu"],n.$inject=["$mdMenu","$attrs","$element","$scope"]}(),function(){function e(e){function r(e,r,i,a,s,c,l){function u(n,o,l){function u(){if(!l.target)throw Error("$mdMenu.show() expected a target to animate from in options.target");t.extend(l,{alreadyOpen:!1,isRemoved:!1,target:t.element(l.target),parent:t.element(l.parent),menuContentEl:t.element(o[0].querySelector("md-menu-content")),backdrop:l.hasBackdrop&&t.element('<md-backdrop class="md-menu-backdrop md-click-catcher">')})}function m(){l.resizeFn=function(){p(o,l)},t.element(r).on("resize",l.resizeFn),t.element(r).on("orientationchange",l.resizeFn)}function f(){l.parent.append(o),o.removeClass("md-leave"),e(function(){e(function(){p(o,l),e(function(){o.addClass("md-active"),l.alreadyOpen=!0,o[0].style[c.CSS.TRANSFORM]=""})})})}function h(){o.addClass("md-clickable"),l.backdrop&&l.backdrop.on("click",function(e){e.preventDefault(),e.stopPropagation(),l.mdMenuCtrl.close(!0)}),l.menuContentEl.on("keydown",function(e){n.$apply(function(){switch(e.keyCode){case c.KEY_CODE.ESCAPE:l.mdMenuCtrl.close();break;case c.KEY_CODE.UP_ARROW:d(e,l.menuContentEl,l,-1);break;case c.KEY_CODE.DOWN_ARROW:d(e,l.menuContentEl,l,1)}})}),l.menuContentEl.on("click",function(e){function t(){n.$apply(function(){l.mdMenuCtrl.close()})}var r=e.target;do if(r&&r.hasAttribute("ng-click")){r.hasAttribute("disabled")||t();break}while((r=r.parentNode)&&r!=l.menuContentEl)});var e=l.menuContentEl[0].querySelector("[md-menu-focus-target]");e||(e=l.menuContentEl[0].firstElementChild.firstElementChild),e.focus()}return u(l),a.inherit(l.menuContentEl,l.target),m(),l.disableParentScroll&&(l.restoreScroll=i.disableScrollAround(l.element)),s(h,75,!1),l.backdrop&&(a.inherit(l.backdrop,l.parent),l.parent.append(l.backdrop)),f(),i.transitionEndPromise(o,{timeout:350})}function d(e,t,n,r){for(var o=i.getClosest(e.target,"MD-MENU-ITEM"),a=i.nodesToArray(t[0].children),s=a.indexOf(o),c=s+r;c>=0&&c<a.length;c+=r){var l=a[c].firstElementChild||a[c],u=m(l);if(u)break}}function m(e){return e&&-1!=e.getAttribute("tabindex")?(e.focus(),l[0].activeElement==e?!0:!1):void 0}function f(e,o,a){return a.isRemoved=!0,o.addClass("md-leave").removeClass("md-clickable"),t.element(r).off("resize",a.resizeFn),t.element(r).off("orientationchange",a.resizeFn),a.resizeFn=n,i.transitionEndPromise(o,{timeout:350}).then(function(){o.removeClass("md-active"),a.backdrop&&a.backdrop.remove(),o[0].parentNode===a.parent[0]&&a.parent[0].removeChild(o[0]),a.restoreScroll&&a.restoreScroll()})}function p(e,t){function n(e){e.top=Math.max(Math.min(e.top,h.bottom-s.offsetHeight),h.top),e.left=Math.max(Math.min(e.left,h.right-s.offsetWidth),h.left)}if(!t.isRemoved){var r,i,a,s=e[0],l=e[0].firstElementChild,u=l.getBoundingClientRect(),d=t.parent[0],m=d.getBoundingClientRect(),f=t.target[0].querySelector("[md-menu-origin]")||t.target[0],p=f.getBoundingClientRect(),h={left:m.left+o,top:m.top+o,bottom:m.bottom-o,right:m.right-o},g=t.mdMenuCtrl.positionMode();("target"==g.top||"target"==g.left||"target-right"==g.left)&&(r=l.firstElementChild.firstElementChild||l.firstElementChild,r=r.querySelector("[md-menu-align-target]")||r,i=r.getBoundingClientRect(),a={top:parseFloat(s.style.top||0),left:parseFloat(s.style.left||0)});var v={},$="top ";switch(g.top){case"target":v.top=a.top+p.top-i.top;break;default:throw new Error('Invalid target mode "'+g.top+'" specified for md-menu on Y axis.')}switch(g.left){case"target":v.left=a.left+p.left-i.left,$+="left";break;case"target-right":v.left=p.right-u.width+(u.right-i.right),$+="right";break;default:throw new Error('Invalid target mode "'+g.left+'" specified for md-menu on X axis.')}var b=t.mdMenuCtrl.offsets();v.top+=b.top,v.left+=b.left,n(v),e.css({top:v.top+"px",left:v.left+"px"}),s.style[c.CSS.TRANSFORM_ORIGIN]=$,t.alreadyOpen||(s.style[c.CSS.TRANSFORM]="scale("+Math.min(p.width/s.offsetWidth,1)+","+Math.min(p.height/s.offsetHeight,1)+")")}}return{parent:"body",onShow:u,onRemove:f,hasBackdrop:!0,disableParentScroll:!0,skipCompile:!0,themable:!0}}var o=8;return r.$inject=["$$rAF","$window","$mdUtil","$mdTheming","$timeout","$mdConstant","$document"],e("$mdMenu").setDefaults({methods:["target"],options:r})}t.module("material.components.menu").provider("$mdMenu",e),e.$inject=["$$interimElementProvider"]}(),function(){function e(e,t){function n(e){return e.attr("aria-valuemin",0),e.attr("aria-valuemax",100),e.attr("role","progressbar"),r}function r(n,r,i){t(r);var a=r[0],s=i.mdDiameter||48,c=s/48;a.style[e.CSS.TRANSFORM]="scale("+c+")",i.$observe("value",function(e){var t=o(e);r.attr("aria-valuenow",t)})}function o(e){return Math.max(0,Math.min(e||0,100))}return{restrict:"E",template:'<div class="md-spinner-wrapper"><div class="md-inner"><div class="md-gap"></div><div class="md-left"><div class="md-half-circle"></div></div><div class="md-right"><div class="md-half-circle"></div></div></div></div>',compile:n}}t.module("material.components.progressCircular",["material.core"]).directive("mdProgressCircular",e),e.$inject=["$mdConstant","$mdTheming"]}(),function(){function e(e,r,o){function i(e,t,n){return e.attr("aria-valuemin",0),e.attr("aria-valuemax",100),e.attr("role","progressbar"),a}function a(i,a,c){o(a);var l=a[0].querySelector(".md-bar1").style,u=a[0].querySelector(".md-bar2").style,d=t.element(a[0].querySelector(".md-container"));c.$observe("value",function(e){if("query"!=c.mdMode){var t=s(e);a.attr("aria-valuenow",t),u[r.CSS.TRANSFORM]=n[t]}}),c.$observe("mdBufferValue",function(e){l[r.CSS.TRANSFORM]=n[s(e)]}),e(function(){d.addClass("md-ready")})}function s(e){return e>100?100:0>e?0:Math.ceil(e||0)}return{restrict:"E",template:'<div class="md-container"><div class="md-dashed"></div><div class="md-bar md-bar1"></div><div class="md-bar md-bar2"></div></div>',compile:i}}t.module("material.components.progressLinear",["material.core"]).directive("mdProgressLinear",e),e.$inject=["$$rAF","$mdConstant","$mdTheming"];var n=function(){function e(e){var t=e/100,n=(e-100)/2;return"translateX("+n.toString()+"%) scale("+t.toString()+", 1)"}for(var t=new Array(101),n=0;101>n;n++)t[n]=e(n);return t}()}(),function(){function e(e,n,r,o){function i(i,a,s,c){function l(){a.hasClass("md-focused")||a.addClass("md-focused")}function u(r){var o=r.which||r.keyCode;switch(o){case n.KEY_CODE.LEFT_ARROW:case n.KEY_CODE.UP_ARROW:r.preventDefault(),d.selectPrevious(),l();break;case n.KEY_CODE.RIGHT_ARROW:case n.KEY_CODE.DOWN_ARROW:r.preventDefault(),d.selectNext(),l();break;case n.KEY_CODE.ENTER:var i=t.element(e.getClosest(a[0],"form"));i.length>0&&i.triggerHandler("submit")}}r(a);var d=c[0],m=c[1]||e.fakeNgModel();d.init(m),i.mouseActive=!1,a.attr({role:"radiogroup",tabIndex:a.attr("tabindex")||"0"}).on("keydown",u).on("mousedown",function(e){i.mouseActive=!0,o(function(){i.mouseActive=!1},100)}).on("focus",function(){i.mouseActive===!1&&d.$element.addClass("md-focused")}).on("blur",function(){d.$element.removeClass("md-focused")})}function a(e){this._radioButtonRenderFns=[],this.$element=e}function s(){return{init:function(e){this._ngModelCtrl=e,this._ngModelCtrl.$render=t.bind(this,this.render)},add:function(e){this._radioButtonRenderFns.push(e)},remove:function(e){var t=this._radioButtonRenderFns.indexOf(e);-1!==t&&this._radioButtonRenderFns.splice(t,1)},render:function(){this._radioButtonRenderFns.forEach(function(e){e()})},setViewValue:function(e,t){this._ngModelCtrl.$setViewValue(e,t),this.render()},getViewValue:function(){return this._ngModelCtrl.$viewValue},selectNext:function(){return c(this.$element,1)},selectPrevious:function(){return c(this.$element,-1)},setActiveDescendant:function(e){this.$element.attr("aria-activedescendant",e)}}}function c(n,r){var o=e.iterator(n[0].querySelectorAll("md-radio-button"),!0);if(o.count()){var i=function(e){return!t.element(e).attr("disabled")},a=n[0].querySelector("md-radio-button.md-checked"),s=o[0>r?"previous":"next"](a,i)||o.first();t.element(s).triggerHandler("click")}}return a.prototype=s(),{restrict:"E",controller:["$element",a],require:["mdRadioGroup","?ngModel"],link:{pre:i}}}function n(e,t,n){function r(r,i,a,s){function c(e){i[0].hasAttribute("disabled")||r.$apply(function(){s.setViewValue(a.value,e&&e.type)})}function l(){var e=s.getViewValue()==a.value;e!==d&&(d=e,i.attr("aria-checked",e),e?(i.addClass(o),s.setActiveDescendant(i.attr("id"))):i.removeClass(o))}function u(n,r){function o(){return a.id||"radio_"+t.nextUid()}r.ariaId=o(),n.attr({id:r.ariaId,role:"radio","aria-checked":"false"}),e.expectWithText(n,"aria-label")}var d;n(i),u(i,r),s.add(l),a.$observe("value",l),i.on("click",c).on("$destroy",function(){s.remove(l)})}var o="md-checked";return{restrict:"E",require:"^mdRadioGroup",transclude:!0,template:'<div class="md-container" md-ink-ripple md-ink-ripple-checkbox><div class="md-off"></div><div class="md-on"></div></div><div ng-transclude class="md-label"></div>',link:r}}t.module("material.components.radioButton",["material.core"]).directive("mdRadioGroup",e).directive("mdRadioButton",n),e.$inject=["$mdUtil","$mdConstant","$mdTheming","$timeout"],n.$inject=["$mdAria","$mdUtil","$mdTheming"]}(),function(){function e(e,r,o,i,a,s,c){function l(a,l){var u=a.find("md-select-label").remove();if(u.length){if(!u[0].firstElementChild){var d=t.element("<span>");d.append(u.contents()),u.append(d)}}else u=t.element("<md-select-label><span></span></md-select-label>");if(u.append('<span class="md-select-icon" aria-hidden="true"></span>'),u.addClass("md-select-label"),u[0].hasAttribute("id")||u.attr("id","select_label_"+r.nextUid()),a.find("md-content").length||a.append(t.element("<md-content>").append(a.contents())),l.mdOnOpen&&a.find("md-content").prepend(t.element("<md-progress-circular>").attr("md-mode","indeterminate").attr("ng-hide","$$loadingAsyncDone").wrap("<div>").parent()),l.name){var m=t.element('<select class="md-visually-hidden">');m.attr({name:"."+l.name,"ng-model":l.ngModel,"aria-hidden":"true",tabindex:"-1"});var f=a.find("md-option");t.forEach(f,function(e){var n=t.element("<option>"+e.innerHTML+"</option>");e.hasAttribute("ng-value")?n.attr("ng-value",e.getAttribute("ng-value")):e.hasAttribute("value")&&n.attr("value",e.getAttribute("value")),m.append(n)}),a.parent().append(m)}var p='<div class="md-select-menu-container"><md-select-menu '+(t.isDefined(l.multiple)?"multiple":"")+">"+a.html()+"</md-select-menu></div>";return a.empty().append(u),l.tabindex=l.tabindex||"0",function(a,l,u,d){function m(){var e=l.attr("placeholder");e||(e=l.find("md-select-label").text()),i.expect(l,"aria-label",e)}function f(){E&&(M=M||E.find("md-select-menu").controller("mdSelectMenu"),w.setLabelText(M.selectedLabels()))}function h(){E=t.element(p);var e=E.find("md-select-menu");e.data("$ngModelController",C),e.data("$mdSelectController",w),y=a.$new(),E=s(E)(y),M=E.find("md-select-menu").controller("mdSelectMenu")}function g(e){var n=[32,13,38,40];if(-1!=n.indexOf(e.keyCode))e.preventDefault(),v(e);else if(e.keyCode<=90&&e.keyCode>=31){e.preventDefault();var r=M.optNodeForKeyboardSearch(e);if(!r)return;var o=t.element(r).controller("mdOption");M.isMultiple||M.deselect(Object.keys(M.selected)[0]),M.select(o.hashKey,o.value),M.refreshViewValue(),C.$render()}}function v(){a.$evalAsync(function(){$=!0,e.show({scope:y,preserveScope:!0,skipCompile:!0,element:E,target:l[0],hasBackdrop:!0,loadingAsync:u.mdOnOpen?a.$eval(u.mdOnOpen)||!0:!1}).then(function(e){$=!1})})}var $,b,E,y,M,w=d[0],C=d[1],A=d[2],x=l.find("md-select-label"),T=0!==x.text().length;if(h(),o(l),u.name&&A){var k=l.parent()[0].querySelector('select[name=".'+u.name+'"]');A.$removeControl(t.element(k).controller())}var S=C.$render;C.$render=function(){S(),f()},w.setLabelText=function(e){if(!T){w.setIsPlaceholder(!e),e=e||u.placeholder||"";var t=T?x:x.children().eq(0);t.text(e)}},w.setIsPlaceholder=function(e){e?x.addClass("md-placeholder"):x.removeClass("md-placeholder")},w.triggerClose=function(){c(u.mdOnClose)(a)},a.$$postDigest(function(){m(),f()});var N;u.$observe("ngMultiple",function(e){N&&N();var t=c(e);N=a.$watch(function(){return t(a)},function(e,t){(e!==n||t!==n)&&(e?l.attr("multiple","multiple"):l.removeAttr("multiple"),E&&(M.setMultiple(e),S=C.$render,C.$render=function(){S(),f()},M.refreshViewValue(),C.$render()))})}),u.$observe("disabled",function(e){"string"==typeof e&&(e=!0),(b===n||b!==e)&&(b=e,e?(l.attr({tabindex:-1,"aria-disabled":"true"}),l.off("click",v),l.off("keydown",g)):(l.attr({tabindex:u.tabindex,"aria-disabled":"false"}),l.on("click",v),l.on("keydown",g)))}),u.disabled||u.ngDisabled||(l.attr({tabindex:u.tabindex,"aria-disabled":"false"}),l.on("click",v),l.on("keydown",g));var _={role:"combobox","aria-expanded":"false"};l[0].hasAttribute("id")||(_.id="select_"+r.nextUid()),l.attr(_),a.$on("$destroy",function(){$?e.cancel().then(function(){E.remove()}):E.remove()})}}return{restrict:"E",require:["mdSelect","ngModel","?^form"],compile:l,controller:function(){}}}function r(e,r,o){function i(e,n,i,a){function s(){n.attr({id:"select_menu_"+r.nextUid(),role:"listbox","aria-multiselectable":u.isMultiple?"true":"false"})}function c(e){(13==e.keyCode||32==e.keyCode)&&l(e)}function l(n){var o=r.getClosest(n.target,"md-option"),i=o&&t.element(o).data("$mdOptionController");if(o&&i){var a=u.hashGetter(i.value),s=t.isDefined(u.selected[a]);e.$apply(function(){u.isMultiple?s?u.deselect(a):u.select(a,i.value):s||(u.deselect(Object.keys(u.selected)[0]),u.select(a,i.value)),u.refreshViewValue()})}}var u=a[0],d=a[1];o(n),n.on("click",l),n.on("keypress",c),d&&u.init(d),s()}function a(o,i,a){function s(){var e=u.ngModel.$modelValue||u.ngModel.$viewValue;if(t.isArray(e)){var n=Object.keys(u.selected),r=e.map(u.hashGetter),o=n.filter(function(e){return-1===r.indexOf(e)});o.forEach(u.deselect),r.forEach(function(t,n){u.select(t,e[n])})}}function l(){var e=u.ngModel.$viewValue||u.ngModel.$modelValue;Object.keys(u.selected).forEach(u.deselect),u.select(u.hashGetter(e),e)}var u=this;u.isMultiple=t.isDefined(i.multiple),u.selected={},u.options={},o.$watch(function(){return u.options},function(){u.ngModel.$render()},!0);var d;u.setMultiple=function(e){function n(e,n){return t.isArray(e||n||[])}var r=u.ngModel;u.isMultiple=e,d&&d(),u.isMultiple?(r.$validators["md-multiple"]=n,r.$render=s,o.$watchCollection(i.ngModel,function(e){n(e)&&s(e)})):(delete r.$validators["md-multiple"],r.$render=l)};var m,f,p,h="",g=300;u.optNodeForKeyboardSearch=function(e){m&&clearTimeout(m),m=setTimeout(function(){m=n,h="",p=n,f=n},g),h+=String.fromCharCode(e.keyCode);var r=new RegExp("^"+h,"i");f||(f=a.find("md-option"),p=new Array(f.length),t.forEach(f,function(e,t){p[t]=e.textContent.trim()}));for(var o=0;o<p.length;++o)if(r.test(p[o]))return f[o]},u.init=function(n){if(u.ngModel=n,n.$options&&n.$options.trackBy){var r={},i=e(n.$options.trackBy);u.hashGetter=function(e,t){return r.$value=e,i(t||o,r)}}else u.hashGetter=function(e){return t.isObject(e)?"object_"+(e.$$mdSelectId||(e.$$mdSelectId=++c)):e};u.setMultiple(u.isMultiple)},u.selectedLabels=function(){var e=r.nodesToArray(a[0].querySelectorAll("md-option[selected]"));return e.length?e.map(function(e){return e.textContent}).join(", "):""},u.select=function(e,t){var n=u.options[e];n&&n.setSelected(!0),u.selected[e]=t},u.deselect=function(e){var t=u.options[e];t&&t.setSelected(!1),delete u.selected[e]},u.addOption=function(e,n){if(t.isDefined(u.options[e]))throw new Error('Duplicate md-option values are not allowed in a select. Duplicate value "'+n.value+'" found.');u.options[e]=n,t.isDefined(u.selected[e])&&(u.select(e,n.value),u.refreshViewValue())},u.removeOption=function(e){delete u.options[e]},u.refreshViewValue=function(){var e,t=[];for(var n in u.selected)t.push((e=u.options[n])?e.value:u.selected[n]);u.ngModel.$setViewValue(u.isMultiple?t:t[0])}}return a.$inject=["$scope","$attrs","$element"],{restrict:"E",require:["mdSelectMenu","?ngModel"],controller:a,link:{pre:i}}}function o(e,n){function r(e,n){return e.append(t.element('<div class="md-text">').append(e.contents())),e.attr("tabindex",n.tabindex||"0"),o}function o(r,o,i,a){function s(e,t){var n=u.hashGetter(t,r),o=u.hashGetter(e,r);l.hashKey=o,l.value=e,u.removeOption(n,l),u.addOption(o,l)}function c(){var e={role:"option","aria-selected":"false"};o[0].hasAttribute("id")||(e.id="select_option_"+n.nextUid()),o.attr(e)}var l=a[0],u=a[1];t.isDefined(i.ngValue)?r.$watch(i.ngValue,s):t.isDefined(i.value)?s(i.value):r.$watch(function(){return o.text()},s),r.$$postDigest(function(){i.$observe("selected",function(e){t.isDefined(e)&&(e?(u.isMultiple||u.deselect(Object.keys(u.selected)[0]),u.select(l.hashKey,l.value)):u.deselect(l.hashKey),u.refreshViewValue(),u.ngModel.$render())})}),e.attach(r,o),c(),r.$on("$destroy",function(){u.removeOption(l.hashKey,l)})}function i(e){this.selected=!1,this.setSelected=function(t){t&&!this.selected?e.attr({selected:"selected","aria-selected":"true"}):!t&&this.selected&&(e.removeAttr("selected"),e.attr("aria-selected","false")),this.selected=t}}return i.$inject=["$element"],{restrict:"E",require:["mdOption","^^mdSelectMenu"],controller:i,compile:r}}function i(){function e(e,n){var r=e.find("label");r.length||(r=t.element("<label>"),e.prepend(r)),n.label&&r.text(n.label)}return{restrict:"E",compile:e}}function a(e){function r(e,r,a,c,l,u,d){function m(n,o,i){function s(){i.target.attr("aria-expanded","true")}function m(){function t(e){var t=c.nodesToArray(f),n=t.indexOf(i.focusedNode);-1===n?n=0:"next"===e&&n<t.length-1?n++:"prev"===e&&n>0&&n--;var r=i.focusedNode=t[n];r&&r.focus()}function a(){t("next")}function s(){t("prev")}function l(){u.isMultiple||(i.restoreFocus=!0,n.$evalAsync(function(){e.hide(u.ngModel.$viewValue)}))}if(!i.isRemoved){var u=i.selectEl.controller("mdSelectMenu")||{};o.addClass("md-clickable"),i.backdrop&&i.backdrop.on("click",function(t){t.preventDefault(),t.stopPropagation(),i.restoreFocus=!1,n.$apply(e.cancel)}),i.selectEl.on("keydown",function(t){switch(t.keyCode){case r.KEY_CODE.SPACE:case r.KEY_CODE.ENTER:var o=c.getClosest(t.target,"md-option");o&&(i.selectEl.triggerHandler({type:"click",target:o}),t.preventDefault());break;case r.KEY_CODE.TAB:case r.KEY_CODE.ESCAPE:t.preventDefault(),i.restoreFocus=!0,n.$apply(e.cancel)}}),i.selectEl.on("keydown",function(e){switch(e.keyCode){case r.KEY_CODE.UP_ARROW:return s();case r.KEY_CODE.DOWN_ARROW:return a();default:if(e.keyCode>=31&&e.keyCode<=90){var t=i.selectEl.controller("mdSelectMenu").optNodeForKeyboardSearch(e);t&&t.focus()}}}),i.selectEl.on("click",l),i.selectEl.on("keydown",function(e){(32==e.keyCode||13==e.keyCode)&&l()})}}if(!i.target)throw new Error('$mdSelect.show() expected a target element in options.target but got "'+i.target+'"!');t.extend(i,{isRemoved:!1,target:t.element(i.target),parent:t.element(i.parent),selectEl:o.find("md-select-menu"),contentEl:o.find("md-content"),backdrop:i.hasBackdrop&&t.element('<md-backdrop class="md-select-backdrop md-click-catcher">')}),i.resizeFn=function(){a(function(){a(function(){p(n,o,i)})})},t.element(d).on("resize",i.resizeFn),t.element(d).on("orientationchange",i.resizeFn),s(),o.removeClass("md-leave");var f=i.selectEl[0].getElementsByTagName("md-option");return i.loadingAsync&&i.loadingAsync.then?i.loadingAsync.then(function(){n.$$loadingAsyncDone=!0,a(function(){a(function(){i.isRemoved||p(n,o,i)})})}):i.loadingAsync&&(n.$$loadingAsyncDone=!0),i.disableParentScroll&&!c.getClosest(i.target,"MD-DIALOG")?i.restoreScroll=c.disableScrollAround(i.element):i.disableParentScroll=!1,
u(m,75,!1),i.backdrop&&(l.inherit(i.backdrop,i.parent),i.parent.append(i.backdrop)),i.parent.append(o),a(function(){a(function(){i.isRemoved||p(n,o,i)})}),c.transitionEndPromise(i.selectEl,{timeout:350})}function f(e,r,o){o.isRemoved=!0,r.addClass("md-leave").removeClass("md-clickable"),o.target.attr("aria-expanded","false"),t.element(d).off("resize",o.resizeFn),t.element(d).off("orientationchange",o.resizefn),o.resizeFn=n;var i=o.selectEl.controller("mdSelect");return i&&i.setLabelText(o.selectEl.controller("mdSelectMenu").selectedLabels()),c.transitionEndPromise(r,{timeout:350}).then(function(){r.removeClass("md-active"),o.backdrop&&o.backdrop.remove(),r[0].parentNode===o.parent[0]&&o.parent[0].removeChild(r[0]),o.disableParentScroll&&o.restoreScroll(),o.restoreFocus&&o.target.focus(),i&&i.triggerClose()})}function p(e,t,n){var l,u=t[0],m=n.target[0].firstElementChild.firstElementChild,f=n.parent[0],p=n.selectEl[0],h=n.contentEl[0],g=f.getBoundingClientRect(),v=m.getBoundingClientRect(),$=!1,b={left:g.left+s,top:s,bottom:g.height-s,right:g.width-s-(c.floatingScrollbars()?16:0)},E={top:v.top-b.top,left:v.left-b.left,right:b.right-(v.left+v.width),bottom:b.bottom-(v.top+v.height)},y=g.width-2*s,M=h.scrollHeight>h.offsetHeight,w=p.querySelector("md-option[selected]"),C=p.getElementsByTagName("md-option"),A=p.getElementsByTagName("md-optgroup");l=w?w:A.length?A[0]:C.length?C[0]:h.firstElementChild||h,h.offsetWidth>y&&(h.style["max-width"]=y+"px"),$&&(h.style["min-width"]=v.width+"px"),M&&p.classList.add("md-overflow");var x=p.getBoundingClientRect(),T=i(l);if(l){var k=d.getComputedStyle(l);T.paddingLeft=parseInt(k.paddingLeft,10)||0,T.paddingRight=parseInt(k.paddingRight,10)||0}var S=l;if("MD-OPTGROUP"===(S.tagName||"").toUpperCase()&&(S=C[0]||h.firstElementChild||h),M){var N=h.offsetHeight/2;h.scrollTop=T.top+T.height/2-N,E.top<N?h.scrollTop=Math.min(T.top,h.scrollTop+N-E.top):E.bottom<N&&(h.scrollTop=Math.max(T.top+T.height-x.height,h.scrollTop-N+E.bottom))}var _,H,O;$?(_=v.left,H=v.top+v.height,O="50% 0",H+x.height>b.bottom&&(H=v.top-x.height,O="50% 100%")):(_=v.left+T.left-T.paddingLeft,H=Math.floor(v.top+v.height/2-T.height/2-T.top+h.scrollTop),O=T.left+v.width/2+"px "+(T.top+T.height/2-h.scrollTop)+"px 0px",u.style.minWidth=v.width+T.paddingLeft+T.paddingRight+"px");var D=u.getBoundingClientRect();u.style.left=o(b.left,_,b.right-D.width)+"px",u.style.top=o(b.top,H,b.bottom-D.height)+"px",p.style[r.CSS.TRANSFORM_ORIGIN]=O,p.style[r.CSS.TRANSFORM]="scale("+Math.min(v.width/x.width,1)+","+Math.min(v.height/x.height,1)+")",a(function(){t.addClass("md-active"),p.style[r.CSS.TRANSFORM]="",S&&(n.focusedNode=S,S.focus())})}return{parent:"body",onShow:m,onRemove:f,hasBackdrop:!0,disableParentScroll:!0,themable:!0}}function o(e,t,n){return Math.max(e,Math.min(t,n))}function i(e){return e?{left:e.offsetLeft,top:e.offsetTop,width:e.offsetWidth,height:e.offsetHeight}:{left:0,top:0,width:0,height:0}}return r.$inject=["$mdSelect","$mdConstant","$$rAF","$mdUtil","$mdTheming","$timeout","$window"],e("$mdSelect").setDefaults({methods:["target"],options:r})}var s=8,c=0;t.module("material.components.select",["material.core","material.components.backdrop"]).directive("mdSelect",e).directive("mdSelectMenu",r).directive("mdOption",o).directive("mdOptgroup",i).provider("$mdSelect",a),e.$inject=["$mdSelect","$mdUtil","$mdTheming","$mdAria","$interpolate","$compile","$parse"],r.$inject=["$parse","$mdUtil","$mdTheming"],o.$inject=["$mdButtonInkRipple","$mdUtil"],a.$inject=["$$interimElementProvider"]}(),function(){function e(e,n){return function(r){function o(){return e.when(r).then(function(e){return s=e,e})}var i,a="SideNav '"+r+"' is not available!",s=e.get(r);return s||e.notFoundError(r),i={isOpen:function(){return s&&s.isOpen()},isLockedOpen:function(){return s&&s.isLockedOpen()},toggle:function(){return s?s.toggle():n.reject(a)},open:function(){return s?s.open():n.reject(a)},close:function(){return s?s.close():n.reject(a)},then:function(e){var r=s?n.when(s):o();return r.then(e||t.noop)}}}}function r(){return{restrict:"A",require:"^mdSidenav",link:function(e,t,n,r){r.focusElement(t)}}}function o(e,r,o,i,a,s,c,l,u,d){function m(m,f,p,h){function g(e,t){m.isLockedOpen=e,e===t?f.toggleClass("md-locked-open",!!e):r[e?"addClass":"removeClass"](f,"md-locked-open"),T.toggleClass("md-locked-open",!!e)}function v(e){var t=f.parent();t[e?"on":"off"]("keydown",E),T[e?"on":"off"]("click",y),e&&(w=d[0].activeElement);var n=h.focusElement();return $(e),C=u.all([e?r.enter(T,t):r.leave(T),r[e?"removeClass":"addClass"](f,"md-closed")]).then(function(){m.isOpen&&n&&n.focus()})}function $(e){var r=f.parent();e?(M=r.css("overflow"),r.css("overflow","hidden")):t.isDefined(M)&&(r.css("overflow",M),M=n)}function b(t){if(m.isOpen==t)return u.when(!0);var n=u.defer();return m.isOpen=t,e(function(){C.then(function(e){m.isOpen||(w&&w.focus(),w=null),n.resolve(e)})},0,!1),n.promise}function E(e){var t=e.keyCode===s.KEY_CODE.ESCAPE;return t?y(e):u.when(!0)}function y(e){return e.preventDefault(),e.stopPropagation(),h.close()}var M,w=null,C=u.when(!0),A=o(p.mdIsLockedOpen),x=function(){return A(m.$parent,{$media:function(e){return i.warn("$media is deprecated for is-locked-open. Use $mdMedia instead."),a(e)},$mdMedia:a})},T=c('<md-backdrop class="md-sidenav-backdrop md-opaque ng-enter">')(m);f.on("$destroy",h.destroy),l.inherit(T,f),m.$watch(x,g),m.$watch("isOpen",v),h.$toggleOpen=b,h.focusElement(h.focusElement()||f)}return{restrict:"E",scope:{isOpen:"=?mdIsOpen"},controller:"$mdSidenavController",compile:function(e){return e.addClass("md-closed"),e.attr("tabIndex","-1"),m}}}function i(e,n,r,o,i){var a,s=this;s.isOpen=function(){return!!e.isOpen},s.isLockedOpen=function(){return!!e.isLockedOpen},s.open=function(){return s.$toggleOpen(!0)},s.close=function(){return s.$toggleOpen(!1)},s.toggle=function(){return s.$toggleOpen(!e.isOpen)},s.focusElement=function(e){return t.isDefined(e)&&(a=e),a},s.$toggleOpen=function(){return i.when(e.isOpen)},s.destroy=o.register(s,r.mdComponentId)}t.module("material.components.sidenav",["material.core","material.components.backdrop"]).factory("$mdSidenav",e).directive("mdSidenav",o).directive("mdSidenavFocus",r).controller("$mdSidenavController",i),e.$inject=["$mdComponentRegistry","$q"],o.$inject=["$timeout","$animate","$parse","$log","$mdMedia","$mdConstant","$compile","$mdTheming","$q","$document"],i.$inject=["$scope","$element","$attrs","$mdComponentRegistry","$q"]}(),function(){function e(e,n,r,o,i,a,s,c){function l(e,t){return e.attr({tabIndex:0,role:"slider"}),r.expect(e,"aria-label"),u}function u(r,l,u,d){function m(){$(),M(),v()}function f(e){Y=parseFloat(e),l.attr("aria-valuemin",e),m()}function p(e){G=parseFloat(e),l.attr("aria-valuemax",e),m()}function h(e){X=parseFloat(e),v()}function g(e){l.attr("aria-disabled",!!e)}function v(){if(t.isDefined(u.mdDiscrete)){var e=Math.floor((G-Y)/X);if(!Z){var r=n.getComputedStyle(U[0]);Z=t.element('<canvas style="position:absolute;">'),J=Z[0].getContext("2d"),J.fillStyle=r.backgroundColor||"black",U.append(Z)}var o=b();Z[0].width=o.width,Z[0].height=o.height;for(var i,a=0;e>=a;a++)i=Math.floor(o.width*(a/e)),J.fillRect(i-1,0,2,o.height)}}function $(){Q=q[0].getBoundingClientRect()}function b(){return z(),Q}function E(e){if(!l[0].hasAttribute("disabled")){var t;e.keyCode===i.KEY_CODE.LEFT_ARROW?t=-X:e.keyCode===i.KEY_CODE.RIGHT_ARROW&&(t=X),t&&((e.metaKey||e.ctrlKey||e.altKey)&&(t*=4),e.preventDefault(),e.stopPropagation(),r.$evalAsync(function(){y(d.$viewValue+t)}))}}function y(e){d.$setViewValue(w(C(e)))}function M(){isNaN(d.$viewValue)&&(d.$viewValue=d.$modelValue);var e=(d.$viewValue-Y)/(G-Y);r.modelValue=d.$viewValue,l.attr("aria-valuenow",d.$viewValue),A(e),F.text(d.$viewValue)}function w(e){return t.isNumber(e)?Math.max(Y,Math.min(G,e)):void 0}function C(e){if(t.isNumber(e)){var n=Math.round(e/X)*X;return Math.round(1e3*n)/1e3}}function A(e){B.css("width",100*e+"%"),V.css("left",100*e+"%"),l.toggleClass("md-min",0===e)}function x(e){if(!j()){l.addClass("active"),l[0].focus(),$();var t=I(D(e.pointer.x)),n=w(C(t));r.$apply(function(){y(n),A(R(n))})}}function T(e){if(!j()){l.removeClass("dragging active");var t=I(D(e.pointer.x)),n=w(C(t));r.$apply(function(){y(n),M()})}}function k(e){j()||(ee=!0,e.stopPropagation(),l.addClass("dragging"),_(e))}function S(e){ee&&(e.stopPropagation(),_(e))}function N(e){ee&&(e.stopPropagation(),ee=!1)}function _(e){te?O(e.pointer.x):H(e.pointer.x)}function H(e){r.$evalAsync(function(){y(I(D(e)))})}function O(e){var t=I(D(e)),n=w(C(t));A(D(e)),F.text(n)}function D(e){return Math.max(0,Math.min(1,(e-Q.left)/Q.width))}function I(e){return Y+e*(G-Y)}function R(e){return(e-Y)/(G-Y)}a(l),d=d||{$setViewValue:function(e){this.$viewValue=e,this.$viewChangeListeners.forEach(function(e){e()})},$parsers:[],$formatters:[],$viewChangeListeners:[]};var P=u.ngDisabled&&c(u.ngDisabled),j=P?function(){return P(r.$parent)}:t.noop,L=t.element(l[0].querySelector(".md-thumb")),F=t.element(l[0].querySelector(".md-thumb-text")),V=L.parent(),q=t.element(l[0].querySelector(".md-track-container")),B=t.element(l[0].querySelector(".md-track-fill")),U=t.element(l[0].querySelector(".md-track-ticks")),z=o.throttle($,5e3);t.isDefined(u.min)?u.$observe("min",f):f(0),t.isDefined(u.max)?u.$observe("max",p):p(100),t.isDefined(u.step)?u.$observe("step",h):h(1);var W=t.noop;u.ngDisabled&&(W=r.$parent.$watch(u.ngDisabled,g)),s.register(l,"drag"),l.on("keydown",E).on("$md.pressdown",x).on("$md.pressup",T).on("$md.dragstart",k).on("$md.drag",S).on("$md.dragend",N),setTimeout(m);var K=e.throttle(m);t.element(n).on("resize",K),r.$on("$destroy",function(){t.element(n).off("resize",K),W()}),d.$render=M,d.$viewChangeListeners.push(M),d.$formatters.push(w),d.$formatters.push(C);var Y,G,X,Z,J,Q={};$();var ee=!1,te=t.isDefined(u.mdDiscrete)}return{scope:{},require:"?ngModel",template:'<div class="md-slider-wrapper">        <div class="md-track-container">          <div class="md-track"></div>          <div class="md-track md-track-fill"></div>          <div class="md-track-ticks"></div>        </div>        <div class="md-thumb-container">          <div class="md-thumb"></div>          <div class="md-focus-thumb"></div>          <div class="md-focus-ring"></div>          <div class="md-sign">            <span class="md-thumb-text"></span>          </div>          <div class="md-disabled-thumb"></div>        </div>      </div>',compile:l}}t.module("material.components.slider",["material.core"]).directive("mdSlider",e),e.$inject=["$$rAF","$window","$mdAria","$mdUtil","$mdConstant","$mdTheming","$mdGesture","$parse"]}(),function(){function e(e,n,r){return{restrict:"E",replace:!0,transclude:!0,template:'<h2 class="md-subheader"><div class="md-subheader-inner"><span class="md-subheader-content"></span></div></h2>',compile:function(o,i,a){return function(o,i,s){function c(e){return t.element(e[0].querySelector(".md-subheader-content"))}r(i);var l=i[0].outerHTML;a(o,function(e){c(i).append(e)}),i.hasClass("md-no-sticky")||a(o,function(r){var a=n(t.element(l))(o);c(a).append(r),e(o,i,a)})}}}}t.module("material.components.subheader",["material.core","material.components.sticky"]).directive("mdSubheader",e),e.$inject=["$mdSticky","$compile","$mdTheming"]}(),function(){function e(e,r,o,i,a){function s(e){function t(e,t){t.addClass("md-sticky-clone"),t.css("top",g+"px");var n={element:e,clone:t};return h.items.push(n),f.parent().prepend(n.clone),p(),function(){h.items.forEach(function(t,n){t.element[0]===e[0]&&(h.items.splice(n,1),t.clone.remove())}),p()}}function o(){h.items.forEach(s),h.items=h.items.sort(function(e,t){return e.top<t.top?-1:1});for(var e,t=f.prop("scrollTop"),n=h.items.length-1;n>=0;n--)if(t>h.items[n].top){e=h.items[n];break}u(e)}function s(e){var t=e.element[0];for(e.top=0,e.left=0;t&&t!==f[0];)e.top+=t.offsetTop,e.left+=t.offsetLeft,t=t.offsetParent;e.height=e.element.prop("offsetHeight"),e.clone.css("margin-left",e.left+"px"),a.floatingScrollbars()&&e.clone.css("margin-right","0")}function c(){var e=f.prop("scrollTop"),t=e>(c.prevScrollTop||0);c.prevScrollTop=e,0===e?u(null):t&&h.next?h.next.top-e<=0?u(h.next):h.current&&(h.next.top-e<=h.next.height?m(h.current,h.next.top-h.next.height-e):m(h.current,null)):!t&&h.current&&(e<h.current.top&&u(h.prev),h.current&&h.next&&(e>=h.next.top-h.current.height?m(h.current,h.next.top-e-h.current.height):m(h.current,null)))}function u(e){if(h.current!==e){h.current&&(m(h.current,null),d(h.current,null)),e&&d(e,"active"),h.current=e;var t=h.items.indexOf(e);h.next=h.items[t+1],h.prev=h.items[t-1],d(h.next,"next"),d(h.prev,"prev")}}function d(e,t){e&&e.state!==t&&(e.state&&(e.clone.attr("sticky-prev-state",e.state),e.element.attr("sticky-prev-state",e.state)),e.clone.attr("sticky-state",t),e.element.attr("sticky-state",t),e.state=t)}function m(e,t){e&&(null===t||t===n?e.translateY&&(e.translateY=null,e.clone.css(r.CSS.TRANSFORM,"")):(e.translateY=t,e.clone.css(r.CSS.TRANSFORM,"translate3d("+e.left+"px,"+t+"px,0)")))}var f=e.$element,p=i.throttle(o);l(f),f.on("$scrollstart",p),f.on("$scroll",c);var h,g=f.prop("offsetTop");return h={prev:null,current:null,next:null,items:[],add:t,refreshElements:o}}function c(n){var r,o=t.element("<div>");e[0].body.appendChild(o[0]);for(var i=["sticky","-webkit-sticky"],a=0;a<i.length;++a)if(o.css({position:i[a],top:0,"z-index":2}),o.css("position")==i[a]){r=i[a];break}return o.remove(),r}function l(e){function t(){+a.now()-r>o?(n=!1,e.triggerHandler("$scrollend")):(e.triggerHandler("$scroll"),i(t))}var n,r,o=200;e.on("scroll touchmove",function(){n||(n=!0,i(t),e.triggerHandler("$scrollstart")),e.triggerHandler("$scroll"),r=+a.now()})}var u=c();return function(e,t,n){var r=t.controller("mdContent");if(r)if(u)t.css({position:u,top:0,"z-index":2});else{var o=r.$element.data("$$sticky");o||(o=s(r),r.$element.data("$$sticky",o));var i=o.add(t,n||t.clone());e.$on("$destroy",i)}}}t.module("material.components.sticky",["material.core","material.components.content"]).factory("$mdSticky",e),e.$inject=["$document","$mdConstant","$compile","$$rAF","$mdUtil"]}(),function(){function e(e){function t(e){function t(t,o,i){var a=e(i[n]);o.on(r,function(e){t.$apply(function(){a(t,{$event:e})})})}return{restrict:"A",link:t}}var n="md"+e,r="$md."+e.toLowerCase();return t.$inject=["$parse"],t}t.module("material.components.swipe",["material.core"]).directive("mdSwipeLeft",e("SwipeLeft")).directive("mdSwipeRight",e("SwipeRight"))}(),function(){function e(e,n,r,o,i,a,s,c){function l(e,n){var o=u.compile(e,n);return e.addClass("md-dragging"),function(e,n,l,u){function d(t){h(e)||(t.stopPropagation(),n.addClass("md-dragging"),$={width:g.prop("offsetWidth")},n.removeClass("transition"))}function m(e){if($){e.stopPropagation(),e.srcEvent&&e.srcEvent.preventDefault();var t=e.pointer.distanceX/$.width,n=u.$viewValue?1+t:t;n=Math.max(0,Math.min(1,n)),g.css(i.CSS.TRANSFORM,"translate3d("+100*n+"%,0,0)"),$.translate=n}}function f(e){if($){e.stopPropagation(),n.removeClass("md-dragging"),g.css(i.CSS.TRANSFORM,"");var t=u.$viewValue?$.translate<.5:$.translate>.5;t&&p(!u.$viewValue),$=null}}function p(t){e.$apply(function(){u.$setViewValue(t),u.$render()})}u=u||r.fakeNgModel();var h=a(l.ngDisabled),g=t.element(n[0].querySelector(".md-thumb-container")),v=t.element(n[0].querySelector(".md-container"));s(function(){n.removeClass("md-dragging")}),o(e,n,l,u),t.isDefined(l.ngDisabled)&&e.$watch(h,function(e){n.attr("tabindex",e?-1:0)}),c.register(v,"drag"),v.on("$md.dragstart",d).on("$md.drag",m).on("$md.dragend",f);var $}}var u=e[0];return{restrict:"E",priority:210,transclude:!0,template:'<div class="md-container"><div class="md-bar"></div><div class="md-thumb-container"><div class="md-thumb" md-ink-ripple md-ink-ripple-checkbox></div></div></div><div ng-transclude class="md-label"></div>',require:"?ngModel",compile:l}}t.module("material.components.switch",["material.core","material.components.checkbox"]).directive("mdSwitch",e),e.$inject=["mdCheckboxDirective","$mdTheming","$mdUtil","$document","$mdConstant","$parse","$$rAF","$mdGesture"]}(),function(){t.module("material.components.tabs",["material.core","material.components.icon"])}(),function(){function e(){return{restrict:"E"}}function n(e){function t(e,t,r,o){function i(i,a,c){return a=o.extractElementByName(a,"md-toast"),n=c.content,a.addClass(c.position.split(" ").map(function(e){return"md-"+e}).join(" ")),c.parent.addClass(s(c.position)),c.onSwipe=function(t,n){a.addClass("md-"+t.type.replace("$md.","")),e(r.cancel)},a.on("$md.swipeleft $md.swiperight",c.onSwipe),t.enter(a,c.parent)}function a(e,n,r){return n.off("$md.swipeleft $md.swiperight",r.onSwipe),r.parent.removeClass(s(r.position)),t.leave(n)}function s(e){return"md-toast-open-"+(e.indexOf("top")>-1?"top":"bottom")}return{onShow:i,onRemove:a,position:"bottom left",themable:!0,hideDelay:3e3}}var n,r=e("$mdToast").setDefaults({methods:["position","hideDelay","capsule"],options:t}).addPreset("simple",{argOption:"content",methods:["content","action","highlightAction","theme","parent"],options:["$mdToast","$mdTheming",function(e,t){var r={template:['<md-toast md-theme="{{ toast.theme }}" ng-class="{\'md-capsule\': toast.capsule}">',"<span flex>{{ toast.content }}</span>",'<md-button class="md-action" ng-if="toast.action" ng-click="toast.resolve()" ng-class="{\'md-highlight\': toast.highlightAction}">',"{{ toast.action }}","</md-button>","</md-toast>"].join(""),controller:["$scope",function(t){var r=this;t.$watch(function(){return n},function(){r.content=n}),this.resolve=function(){e.hide()}}],theme:t.defaultTheme(),controllerAs:"toast",bindToController:!0};return r}]}).addMethod("updateContent",function(e){n=e});return t.$inject=["$timeout","$animate","$mdToast","$mdUtil"],r}t.module("material.components.toast",["material.core","material.components.button"]).directive("mdToast",e).provider("$mdToast",n),n.$inject=["$$interimElementProvider"]}(),function(){function e(e,n,r,o,i,a){return{restrict:"E",controller:t.noop,link:function(s,c,l){function u(){function t(t,n){c.parent()[0]===n.parent()[0]&&(m&&m.off("scroll",g),n.on("scroll",g),n.attr("scroll-shrink","true"),m=n,e(o))}function o(){d=c.prop("offsetHeight");var e=-d*h+"px";m.css("margin-top",e),m.css("margin-bottom",e),u()}function u(e){var t=e?e.target.scrollTop:p;v(),f=Math.min(d/h,Math.max(0,f+t-p)),c.css(n.CSS.TRANSFORM,"translate3d(0,"+-f*h+"px,0)"),m.css(n.CSS.TRANSFORM,"translate3d(0,"+(d-f)*h+"px,0)"),p=t,c.hasClass("md-whiteframe-z1")?f||a(function(){i.removeClass(c,"md-whiteframe-z1")}):f&&a(function(){i.addClass(c,"md-whiteframe-z1")})}var d,m,f=0,p=0,h=l.mdShrinkSpeedFactor||.5,g=e.throttle(u),v=r.debounce(o,5e3);s.$on("$mdContentLoaded",t)}o(c),t.isDefined(l.mdScrollShrink)&&u()}}}t.module("material.components.toolbar",["material.core","material.components.content"]).directive("mdToolbar",e),e.$inject=["$$rAF","$mdConstant","$mdUtil","$mdTheming","$animate","$timeout"]}(),function(){function e(e,n,r,o,i,a,s,c,l){function u(u,f,p){function h(){g(),b(),w(),v(),$()}function g(){t.isDefined(p.mdDelay)||(u.delay=d)}function v(){u.$on("$destroy",function(){u.visible=!1,f.remove(),t.element(n).off("resize",D)}),u.$watch("visible",function(e){e?A():x()})}function $(){k.attr("aria-label")||k.text().trim()||k.attr("aria-label",f.text().trim())}function b(){f.detach(),f.attr("role","tooltip")}function E(){for(var e=f.parent();e&&"none"==n.getComputedStyle(e[0])["pointer-events"];)e=e.parent();return e}function y(){for(var e=f.parent()[0];e&&e!==s[0]&&e!==document.body;)e=e.parentNode;return e}function M(e,r){var o=n.getComputedStyle(f[0]);return t.isDefined(o[e])&&o[e]==r}function w(){var e=!1,r=function(){M("pointer-events","none")||C(!0)},i=function(){var t=u.hasOwnProperty("autohide")?u.autohide:p.hasOwnProperty("mdAutohide");(t||e||o[0].activeElement!==k[0])&&C(!1),e=!1};k.on("mousedown",function(){e=!0}),k.on("focus mouseenter touchstart",r),k.on("blur mouseleave touchend touchcancel",i),t.element(n).on("resize",D)}function C(t){C.value=!!t,C.queued||(t?(C.queued=!0,e(function(){u.visible=C.value,C.queued=!1},u.delay)):e(function(){u.visible=!1}))}function A(){return O.append(f),M("display","none")?(u.visible=!1,void f.detach()):(T(),void t.forEach([f,S,N],function(e){c.addClass(e,"md-show")}))}function x(){l.all([c.removeClass(N,"md-show"),c.removeClass(S,"md-show"),c.removeClass(f,"md-show")]).then(function(){u.visible||f.detach()})}function T(){function e(){var e="left"===_||"right"===_?2*Math.sqrt(Math.pow(r.width,2)+Math.pow(r.height/2,2)):2*Math.sqrt(Math.pow(r.width/2,2)+Math.pow(r.height,2)),t="left"===_?{left:100,top:50}:"right"===_?{left:0,top:50}:"top"===_?{left:50,top:100}:{left:50,top:0};S.css({width:e+"px",height:e+"px",left:t.left+"%",top:t.top+"%"})}function t(e){var t={left:e.left,top:e.top};return t.left=Math.min(t.left,O.prop("scrollWidth")-r.width-m),t.left=Math.max(t.left,m),t.top=Math.min(t.top,O.prop("scrollHeight")-r.height-m),t.top=Math.max(t.top,m),t}function n(e){return"left"===e?{left:o.left-r.width-m,top:o.top+o.height/2-r.height/2}:"right"===e?{left:o.left+o.width+m,top:o.top+o.height/2-r.height/2}:"top"===e?{left:o.left+o.width/2-r.width/2,top:o.top-r.height-m}:{left:o.left+o.width/2-r.width/2,top:o.top+o.height+m}}var r=i.offsetRect(f,O),o=i.offsetRect(k,O),a=n(_);_?a=t(a):a.top>f.prop("offsetParent").scrollHeight-r.height-m&&(a=t(n("top"))),f.css({top:a.top+"px",left:a.left+"px"}),e()}a(f);var k=E(),S=t.element(f[0].getElementsByClassName("md-background")[0]),N=t.element(f[0].getElementsByClassName("md-content")[0]),_=p.mdDirection,H=y(),O=t.element(H||document.body),D=r.throttle(function(){u.visible&&T()});return h()}var d=300,m=8;return{restrict:"E",transclude:!0,priority:210,template:'        <div class="md-background"></div>        <div class="md-content" ng-transclude></div>',scope:{visible:"=?mdVisible",delay:"=?mdDelay",autohide:"=?mdAutohide"},link:u}}t.module("material.components.tooltip",["material.core"]).directive("mdTooltip",e),e.$inject=["$timeout","$window","$$rAF","$document","$mdUtil","$mdTheming","$rootElement","$animate","$q"]}(),function(){t.module("material.components.whiteframe",[])}(),function(){function e(e,n,i,a,s,c,l,u,d,m){function f(){i.initOptionalProperties(e,m,{searchText:null,selectedItem:null}),c(n),v(),s(function(){b(),g(),h()})}function p(){function e(){var e=J.ul.getBoundingClientRect(),n={};e.right>i.right-o&&(n.left=t.right-e.width+"px"),J.$.ul.css(n)}if(!J)return s(p,0,!1);var t=J.wrap.getBoundingClientRect(),n=J.snap.getBoundingClientRect(),i=J.root.getBoundingClientRect(),a=n.bottom-i.top,c=i.bottom-n.top,l=t.left-i.left,u=t.width,d={left:l+"px",minWidth:u+"px",maxWidth:Math.max(t.right-i.left,i.right-t.left)-o+"px"};a>c&&i.height-t.bottom-o<r?(d.top="auto",d.bottom=c+"px",d.maxHeight=Math.min(r,t.top-i.top-o)+"px"):(d.top=a+"px",d.bottom="auto",d.maxHeight=Math.min(r,i.bottom-t.bottom-o)+"px"),J.$.ul.css(d),s(e,0,!1)}function h(){J.$.root.length&&(c(J.$.ul),J.$.ul.detach(),J.$.root.append(J.$.ul),u.pin&&u.pin(J.$.ul,d))}function g(){e.autofocus&&J.input.focus()}function v(){var n=parseInt(e.delay,10)||0;m.$observe("disabled",function(e){G.isDisabled=e}),m.$observe("required",function(e){G.isRequired=null!==e}),e.$watch("searchText",n?i.debounce(N,n):N),k(x),e.$watch("selectedItem",T),t.element(l).on("resize",p),e.$on("$destroy",$)}function $(){t.element(l).off("resize",p),J.$.ul.remove()}function b(){J={main:n[0],ul:n.find("ul")[0],input:n.find("input")[0],wrap:n.find("md-autocomplete-wrap")[0],root:document.body},J.li=J.ul.getElementsByTagName("li"),J.snap=E(),J.$=y(J)}function E(){for(var e=n;e.length;e=e.parent())if(t.isDefined(e.attr("md-autocomplete-snap")))return e[0];return J.wrap}function y(e){var n={};for(var r in e)n[r]=t.element(e[r]);return n}function M(e,t){!e&&t&&p(),e?i.enableScrolling():J&&s(function(){i.disableScrollAround(J.ul)},0,!1)}function w(){te=!0}function C(){te=!1,re||(G.hidden=!0)}function A(){J.input.focus()}function x(t,n){t&&(e.searchText=I(t)),e.itemChange&&t!==n&&e.itemChange(R(t))}function T(e,t){for(var n=0;n<ne.length;++n)ne[n](e,t)}function k(e){-1==ne.indexOf(e)&&ne.push(e)}function S(e){var t=ne.indexOf(e);-1!=t&&ne.splice(t,1)}function N(t,n){G.index=P(),t!==n&&t!==I(e.selectedItem)&&(e.selectedItem=null,e.textChange&&t!==n&&e.textChange(R(e.selectedItem)),F()?Y():(G.loading=!1,G.matches=[],G.hidden=j(),z()))}function _(){re=!1,te||(G.hidden=!0)}function H(){re=!0,t.isString(e.searchText)||(e.searchText=""),e.minLength>0||(G.hidden=j(),G.hidden||Y())}function O(e){switch(e.keyCode){case a.KEY_CODE.DOWN_ARROW:if(G.loading)return;e.preventDefault(),G.index=Math.min(G.index+1,G.matches.length-1),K(),z();break;case a.KEY_CODE.UP_ARROW:if(G.loading)return;e.preventDefault(),G.index=G.index<0?G.matches.length-1:Math.max(0,G.index-1),K(),z();break;case a.KEY_CODE.TAB:case a.KEY_CODE.ENTER:if(G.hidden||G.loading||G.index<0||G.matches.length<1)return;e.preventDefault(),q(G.index);break;case a.KEY_CODE.ESCAPE:G.matches=[],G.hidden=!0,G.index=P()}}function D(){return t.isNumber(e.minLength)?e.minLength:1}function I(t){return t&&e.itemText?e.itemText(R(t)):t}function R(e){if(e){var t={};return G.itemName&&(t[G.itemName]=e),t}}function P(){return e.autoselect?0:-1}function j(){return F()?void 0:!0}function L(){return I(G.matches[G.index])}function F(){return t.isDefined(e.searchText)&&e.searchText.length>=D()}function V(e,t,n){Object.defineProperty(G,e,{get:function(){return n},set:function(e){var r=n;n=e,t(e,r)}})}function q(t){e.selectedItem=G.matches[t],G.hidden=!0,G.index=0,G.matches=[],s(function(){J.$.input.controller("ngModel").$setViewValue(I(e.selectedItem)||e.searchText),G.hidden=!0})}function B(){e.searchText="",q(-1);var t=document.createEvent("CustomEvent");t.initCustomEvent("input",!0,!0,{value:e.searchText}),J.input.dispatchEvent(t),J.input.focus()}function U(n){function r(t){ee[i]=t,n===e.searchText&&(G.loading=!1,Q=null,G.matches=t,G.hidden=j(),z(),p())}var o=e.$parent.$eval(Z),i=n.toLowerCase();t.isArray(o)?r(o):o&&(G.loading=!0,o.success&&o.success(r),o.then&&o.then(r),o.error&&o.error(function(){G.loading=!1}))}function z(){G.messages=[W(),L()]}function W(){if(oe===G.matches.length)return"";switch(oe=G.matches.length,G.matches.length){case 0:return"There are no matches available.";case 1:return"There is 1 match available.";default:return"There are "+G.matches.length+" matches available."}}function K(){if(J.li[G.index]){var e=J.li[G.index],t=e.offsetTop,n=t+e.offsetHeight,r=J.ul.clientHeight;t<J.ul.scrollTop?J.ul.scrollTop=t:n>J.ul.scrollTop+r&&(J.ul.scrollTop=n-r)}}function Y(){var t=e.searchText,n=t.toLowerCase();Q&&Q.cancel&&(Q.cancel(),Q=null),!e.noCache&&ee[n]?(G.matches=ee[n],z()):U(t),re&&(G.hidden=j())}var G=this,X=e.itemsExpr.split(/ in /i),Z=X[1],J=null,Q=null,ee={},te=!1,ne=[],re=!1,oe=0;return V("hidden",M,!0),G.scope=e,G.parent=e.$parent,G.itemName=X[0],G.matches=[],G.loading=!1,G.hidden=!0,G.index=null,G.messages=[],G.id=i.nextUid(),G.isDisabled=null,G.isRequired=null,G.keydown=O,G.blur=_,G.focus=H,G.clear=B,G.select=q,G.listEnter=w,G.listLeave=C,G.mouseUp=A,G.getCurrentDisplayValue=L,G.registerSelectedItemWatcher=k,G.unregisterSelectedItemWatcher=S,f()}t.module("material.components.autocomplete").controller("MdAutocompleteCtrl",e);var n=41,r=5.5*n,o=8;e.$inject=["$scope","$element","$mdUtil","$mdConstant","$timeout","$mdTheming","$window","$animate","$rootElement","$attrs"]}(),function(){function e(e,t){return{controller:"MdAutocompleteCtrl",controllerAs:"$mdAutocompleteCtrl",scope:{inputName:"@mdInputName",inputMinlength:"@mdInputMinlength",inputMaxlength:"@mdInputMaxlength",searchText:"=?mdSearchText",selectedItem:"=?mdSelectedItem",itemsExpr:"@mdItems",itemText:"&mdItemText",placeholder:"@placeholder",noCache:"=?mdNoCache",itemChange:"&?mdSelectedItemChange",textChange:"&?mdSearchTextChange",minLength:"=?mdMinLength",delay:"=?mdDelay",autofocus:"=?mdAutofocus",floatingLabel:"@?mdFloatingLabel",autoselect:"=?mdAutoselect",menuClass:"@?mdMenuClass"},template:function(e,t){function n(){var t=e.find("md-item-template").remove(),n=t.length?t.html():e.html();return t.length||e.empty(),n}function r(){var t=e.find("md-not-found").remove(),n=t.length?t.html():"";return n?'<li ng-if="!$mdAutocompleteCtrl.matches.length && !$mdAutocompleteCtrl.loading                         && !$mdAutocompleteCtrl.hidden"                         ng-hide="$mdAutocompleteCtrl.hidden"                         md-autocomplete-parent-scope>'+n+"</li>":""}function o(){return t.mdFloatingLabel?'            <md-input-container flex ng-if="floatingLabel">              <label>{{floatingLabel}}</label>              <input type="search"                  id="fl-input-{{$mdAutocompleteCtrl.id}}"                  name="{{inputName}}"                  autocomplete="off"                  ng-required="isRequired"                  ng-minlength="inputMinlength"                  ng-maxlength="inputMaxlength"                  ng-disabled="$mdAutocompleteCtrl.isDisabled"                  ng-model="$mdAutocompleteCtrl.scope.searchText"                  ng-keydown="$mdAutocompleteCtrl.keydown($event)"                  ng-blur="$mdAutocompleteCtrl.blur()"                  ng-focus="$mdAutocompleteCtrl.focus()"                  aria-owns="ul-{{$mdAutocompleteCtrl.id}}"                  aria-label="{{floatingLabel}}"                  aria-autocomplete="list"                  aria-haspopup="true"                  aria-activedescendant=""                  aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>              <div md-autocomplete-parent-scope md-autocomplete-replace>'+s+"</div>            </md-input-container>":'            <input flex type="search"                id="input-{{$mdAutocompleteCtrl.id}}"                name="{{inputName}}"                ng-if="!floatingLabel"                autocomplete="off"                ng-required="isRequired"                ng-disabled="$mdAutocompleteCtrl.isDisabled"                ng-model="$mdAutocompleteCtrl.scope.searchText"                ng-keydown="$mdAutocompleteCtrl.keydown($event)"                ng-blur="$mdAutocompleteCtrl.blur()"                ng-focus="$mdAutocompleteCtrl.focus()"                placeholder="{{placeholder}}"                aria-owns="ul-{{$mdAutocompleteCtrl.id}}"                aria-label="{{placeholder}}"                aria-autocomplete="list"                aria-haspopup="true"                aria-activedescendant=""                aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>            <button                type="button"                tabindex="-1"                ng-if="$mdAutocompleteCtrl.scope.searchText && !$mdAutocompleteCtrl.isDisabled"                ng-click="$mdAutocompleteCtrl.clear()">              <md-icon md-svg-icon="md-close"></md-icon>              <span class="md-visually-hidden">Clear</span>            </button>                '}var i=r(),a=n(),s=e.html();return'        <md-autocomplete-wrap            layout="row"            ng-class="{ \'md-whiteframe-z1\': !floatingLabel }"            role="listbox">          '+o()+'          <md-progress-linear              ng-if="$mdAutocompleteCtrl.loading"              md-mode="indeterminate"></md-progress-linear>          <ul role="presentation"              class="md-autocomplete-suggestions md-whiteframe-z1 {{menuClass || \'\'}}"              id="ul-{{$mdAutocompleteCtrl.id}}"              ng-hide="$mdAutocompleteCtrl.hidden"              ng-mouseenter="$mdAutocompleteCtrl.listEnter()"              ng-mouseleave="$mdAutocompleteCtrl.listLeave()"              ng-mouseup="$mdAutocompleteCtrl.mouseUp()">            <li ng-repeat="(index, item) in $mdAutocompleteCtrl.matches"                ng-class="{ selected: index === $mdAutocompleteCtrl.index }"                ng-click="$mdAutocompleteCtrl.select(index)"                md-autocomplete-list-item="$mdAutocompleteCtrl.itemName">                '+a+"            </li>            "+i+'          </ul>        </md-autocomplete-wrap>        <aria-status            class="md-visually-hidden"            role="status"            aria-live="assertive">          <p ng-repeat="message in $mdAutocompleteCtrl.messages" ng-if="message">{{message}}</p>        </aria-status>';

}}}t.module("material.components.autocomplete").directive("mdAutocomplete",e),e.$inject=["$mdTheming","$mdUtil"]}(),function(){function e(e,n,r){function o(o){var i=r(n.html())(e),s=t.element("<div>").text(i).html(),c=n.attr("md-highlight-flags")||"",l=e.$watch(o,function(e){var t=a(e,c),r=s.replace(t,'<span class="highlight">$&</span>');n.html(r)});n.on("$destroy",function(){l()})}function i(e){return e?e.replace(/[\\\^\$\*\+\?\.\(\)\|\{\}\[\]]/g,"\\$&"):e}function a(e,t){var n="";return t.indexOf("^")>=1&&(n+="^"),n+=e,t.indexOf("$")>=1&&(n+="$"),new RegExp(i(n),t.replace(/[\$\^]/g,""))}return this.init=o,o()}t.module("material.components.autocomplete").controller("MdHighlightCtrl",e),e.$inject=["$scope","$element","$interpolate"]}(),function(){function e(){return{terminal:!0,scope:!1,controller:"MdHighlightCtrl",link:function(e,t,n,r){r.init(n.mdHighlightText)}}}t.module("material.components.autocomplete").directive("mdHighlightText",e)}(),function(){function e(e,t){function n(n,r,o){var i=n.$parent.$mdAutocompleteCtrl,a=i.parent.$new(!1,i.parent),s=i.scope.$eval(o.mdAutocompleteListItem);a[s]=n.item,e(r.contents())(a),r.attr({role:"option",id:"item_"+t.nextUid()})}return{terminal:!0,link:n,scope:!1}}t.module("material.components.autocomplete").directive("mdAutocompleteListItem",e),e.$inject=["$compile","$mdUtil"]}(),function(){function e(e,t){function n(t,n,r){var o=t.$parent.$mdAutocompleteCtrl;e(n.contents())(o.parent),r.hasOwnProperty("mdAutocompleteReplace")&&(n.after(n.contents()),n.remove())}return{restrict:"A",terminal:!0,link:n,scope:!1}}t.module("material.components.autocomplete").directive("mdAutocompleteParentScope",e),e.$inject=["$compile","$mdUtil"]}(),function(){function e(e){function r(r,o){return r.append(n),function(n,r,o,i){r.addClass("md-chip"),e(r),i&&t.element(r[0].querySelector(".md-chip-content")).on("blur",function(){i.selectedChip=-1})}}return{restrict:"E",require:"^?mdChips",compile:r}}t.module("material.components.chips").directive("mdChip",e);var n='    <span ng-if="!$mdChipsCtrl.readonly" class="md-visually-hidden">      {{$mdChipsCtrl.deleteHint}}    </span>';e.$inject=["$mdTheming"]}(),function(){function e(e){function t(t,n,r,o){n.on("click",function(e){t.$apply(function(){o.removeChip(t.$$replacedScope.$index)})}),e(function(){n.attr({tabindex:-1,ariaHidden:!0}),n.find("button").attr("tabindex","-1")})}return{restrict:"A",require:"^mdChips",scope:!1,link:t}}t.module("material.components.chips").directive("mdChipRemove",e),e.$inject=["$timeout"]}(),function(){function e(e,t){function n(t,n,r){var o=t.$parent.$mdChipsCtrl,i=o.parent.$new(!1,o.parent);i.$$replacedScope=t,i.$chip=t.$chip,i.$mdChipsCtrl=o,n.html(o.$scope.$eval(r.mdChipTransclude)),e(n.contents())(i)}return{restrict:"EA",terminal:!0,link:n,scope:!1}}t.module("material.components.chips").directive("mdChipTransclude",e),e.$inject=["$compile","$mdUtil"]}(),function(){function e(e,t,n,r,o){this.$timeout=o,this.$mdConstant=t,this.$scope=e,this.parent=e.$parent,this.$log=n,this.$element=r,this.ngModelCtrl=null,this.userInputNgModelCtrl=null,this.userInputElement=null,this.items=[],this.selectedChip=-1,this.deleteHint="Press delete to remove this chip.",this.deleteButtonLabel="Remove",this.chipBuffer="",this.useMdOnAppend=!1}t.module("material.components.chips").controller("MdChipsCtrl",e),e.$inject=["$scope","$mdConstant","$log","$element","$timeout"],e.prototype.inputKeydown=function(e){var t=this.getChipBuffer();switch(e.keyCode){case this.$mdConstant.KEY_CODE.ENTER:if(this.$scope.requireMatch||!t)break;e.preventDefault(),this.appendChip(t),this.resetChipBuffer();break;case this.$mdConstant.KEY_CODE.BACKSPACE:if(t)break;e.stopPropagation(),this.items.length&&this.selectAndFocusChipSafe(this.items.length-1)}},e.prototype.chipKeydown=function(e){if(!this.getChipBuffer())switch(e.keyCode){case this.$mdConstant.KEY_CODE.BACKSPACE:case this.$mdConstant.KEY_CODE.DELETE:if(this.selectedChip<0)return;e.preventDefault(),this.removeAndSelectAdjacentChip(this.selectedChip);break;case this.$mdConstant.KEY_CODE.LEFT_ARROW:e.preventDefault(),this.selectedChip<0&&(this.selectedChip=this.items.length),this.items.length&&this.selectAndFocusChipSafe(this.selectedChip-1);break;case this.$mdConstant.KEY_CODE.RIGHT_ARROW:e.preventDefault(),this.selectAndFocusChipSafe(this.selectedChip+1);break;case this.$mdConstant.KEY_CODE.ESCAPE:case this.$mdConstant.KEY_CODE.TAB:if(this.selectedChip<0)return;e.preventDefault(),this.onFocus()}},e.prototype.getPlaceholder=function(){var e=this.items.length&&(""==this.secondaryPlaceholder||this.secondaryPlaceholder);return e?this.placeholder:this.secondaryPlaceholder},e.prototype.removeAndSelectAdjacentChip=function(e){var n=this.getAdjacentChipIndex(e);this.removeChip(e),this.$timeout(t.bind(this,function(){this.selectAndFocusChipSafe(n)}))},e.prototype.resetSelectedChip=function(){this.selectedChip=-1},e.prototype.getAdjacentChipIndex=function(e){var t=this.items.length-1;return 0==t?-1:e==t?e-1:e},e.prototype.appendChip=function(e){this.items.indexOf(e)+1||(this.useMdOnAppend&&this.mdOnAppend&&(e=this.mdOnAppend({$chip:e})),this.items.push(e))},e.prototype.useMdOnAppendExpression=function(){this.useMdOnAppend=!0},e.prototype.getChipBuffer=function(){return this.userInputElement?this.userInputNgModelCtrl?this.userInputNgModelCtrl.$viewValue:this.userInputElement[0].value:this.chipBuffer},e.prototype.resetChipBuffer=function(){this.userInputElement?this.userInputNgModelCtrl?(this.userInputNgModelCtrl.$setViewValue(""),this.userInputNgModelCtrl.$render()):this.userInputElement[0].value="":this.chipBuffer=""},e.prototype.removeChip=function(e){this.items.splice(e,1)},e.prototype.removeChipAndFocusInput=function(e){this.removeChip(e),this.onFocus()},e.prototype.selectAndFocusChipSafe=function(e){return this.items.length?e===this.items.length?this.onFocus():(e=Math.max(e,0),e=Math.min(e,this.items.length-1),this.selectChip(e),void this.focusChip(e)):(this.selectChip(-1),void this.onFocus())},e.prototype.selectChip=function(e){e>=-1&&e<=this.items.length?this.selectedChip=e:this.$log.warn("Selected Chip index out of bounds; ignoring.")},e.prototype.selectAndFocusChip=function(e){this.selectChip(e),-1!=e&&this.focusChip(e)},e.prototype.focusChip=function(e){this.$element[0].querySelector('md-chip[index="'+e+'"] .md-chip-content').focus()},e.prototype.configureNgModel=function(e){this.ngModelCtrl=e;var t=this;e.$render=function(){t.items=t.ngModelCtrl.$viewValue}},e.prototype.onFocus=function(){var e=this.$element[0].querySelector("input");e&&e.focus(),this.resetSelectedChip()},e.prototype.onInputFocus=function(){this.inputHasFocus=!0,this.resetSelectedChip()},e.prototype.onInputBlur=function(){this.inputHasFocus=!1},e.prototype.configureUserInput=function(e){this.userInputElement=e;var n=e.controller("ngModel");n!=this.ngModelCtrl&&(this.userInputNgModelCtrl=n);var r=this.$scope,o=this;e.attr({tabindex:0}).on("keydown",function(e){r.$apply(t.bind(o,function(){o.inputKeydown(e)}))}).on("focus",t.bind(o,o.onInputFocus)).on("blur",t.bind(o,o.onInputBlur))},e.prototype.configureAutocomplete=function(e){e.registerSelectedItemWatcher(t.bind(this,function(e){e&&(this.appendChip(e),this.resetChipBuffer())})),this.$element.find("input").on("focus",t.bind(this,this.onInputFocus)).on("blur",t.bind(this,this.onInputBlur))},e.prototype.hasFocus=function(){return this.inputHasFocus||this.selectedChip>=0}}(),function(){function e(e,t,a,s,c){function l(n,l){function u(e){if(l.ngModel){var t=d[0].querySelector(e);return t&&t.outerHTML}}var d=l.$mdUserTemplate;l.$mdUserTemplate=null;var m=u("md-chips>*[md-chip-remove]")||i,f=u("md-chips>md-chip-template")||o,p=u("md-chips>md-autocomplete")||u("md-chips>input")||r,h=d.find("md-chip");return d[0].querySelector("md-chip-template>*[md-chip-remove]")&&s.warn("invalid placement of md-chip-remove within md-chip-template."),function(n,o,i,s){t.initOptionalProperties(n,l),e(o);var u=s[0];if(u.chipContentsTemplate=f,u.chipRemoveTemplate=m,u.chipInputTemplate=p,o.attr({ariaHidden:!0,tabindex:-1}).on("focus",function(){u.onFocus()}),l.ngModel&&(u.configureNgModel(o.controller("ngModel")),i.mdOnAppend&&u.useMdOnAppendExpression(),p!=r&&c(function(){0===p.indexOf("<md-autocomplete")&&u.configureAutocomplete(o.find("md-autocomplete").controller("mdAutocomplete")),u.configureUserInput(o.find("input"))})),h.length>0){var d=a(h)(n.$parent);c(function(){o.find("md-chips-wrap").prepend(d)})}}}return{template:function(e,t){t.$mdUserTemplate=e.clone();return n},require:["mdChips"],restrict:"E",controller:"MdChipsCtrl",controllerAs:"$mdChipsCtrl",bindToController:!0,compile:l,scope:{readonly:"=readonly",placeholder:"@",secondaryPlaceholder:"@",mdOnAppend:"&",deleteHint:"@",deleteButtonLabel:"@",requireMatch:"=?mdRequireMatch"}}}t.module("material.components.chips").directive("mdChips",e);var n='      <md-chips-wrap          ng-if="!$mdChipsCtrl.readonly || $mdChipsCtrl.items.length > 0"          ng-keydown="$mdChipsCtrl.chipKeydown($event)"          ng-class="{ \'md-focused\': $mdChipsCtrl.hasFocus() }"          class="md-chips">        <md-chip ng-repeat="$chip in $mdChipsCtrl.items"            index="{{$index}}"            ng-class="{\'md-focused\': $mdChipsCtrl.selectedChip == $index}">          <div class="md-chip-content"              tabindex="-1"              aria-hidden="true"              ng-focus="!$mdChipsCtrl.readonly && $mdChipsCtrl.selectChip($index)"              md-chip-transclude="$mdChipsCtrl.chipContentsTemplate"></div>          <div class="md-chip-remove-container"              md-chip-transclude="$mdChipsCtrl.chipRemoveTemplate"></div>        </md-chip>        <div ng-if="!$mdChipsCtrl.readonly && $mdChipsCtrl.ngModelCtrl"            class="md-chip-input-container"            md-chip-transclude="$mdChipsCtrl.chipInputTemplate"></div>        </div>      </md-chips-wrap>',r='        <input            tabindex="0"            placeholder="{{$mdChipsCtrl.getPlaceholder()}}"            aria-label="{{$mdChipsCtrl.getPlaceholder()}}"            ng-model="$mdChipsCtrl.chipBuffer"            ng-focus="$mdChipsCtrl.onInputFocus()"            ng-blur="$mdChipsCtrl.onInputBlur()"            ng-keydown="$mdChipsCtrl.inputKeydown($event)">',o="      <span>{{$chip}}</span>",i='      <button          class="md-chip-remove"          ng-if="!$mdChipsCtrl.readonly"          ng-click="$mdChipsCtrl.removeChipAndFocusInput($$replacedScope.$index)"          type="button"          aria-hidden="true"          tabindex="-1">        <md-icon md-svg-icon="md-close"></md-icon>        <span class="md-visually-hidden">          {{$mdChipsCtrl.deleteButtonLabel}}        </span>      </button>';e.$inject=["$mdTheming","$mdUtil","$compile","$log","$timeout"]}(),function(){function e(){this.selectedItem=null,this.searchText=""}t.module("material.components.chips").controller("MdContactChipsCtrl",e),e.prototype.queryContact=function(e){var n=this.contactQuery({$query:e});return this.filterSelected?n.filter(t.bind(this,this.filterSelectedContacts)):n},e.prototype.filterSelectedContacts=function(e){return-1==this.contacts.indexOf(e)}}(),function(){function e(e,t){function r(n,r){return function(n,o,i,a){t.initOptionalProperties(n,r),e(o),o.attr("tabindex","-1")}}return{template:function(e,t){return n},restrict:"E",controller:"MdContactChipsCtrl",controllerAs:"$mdContactChipsCtrl",bindToController:!0,compile:r,scope:{contactQuery:"&mdContacts",placeholder:"@",secondaryPlaceholder:"@",contactName:"@mdContactName",contactImage:"@mdContactImage",contactEmail:"@mdContactEmail",contacts:"=ngModel",requireMatch:"=?mdRequireMatch"}}}t.module("material.components.chips").directive("mdContactChips",e);var n='      <md-chips class="md-contact-chips"          ng-model="$mdContactChipsCtrl.contacts"          md-require-match="$mdContactChipsCtrl.requireMatch"          md-autocomplete-snap>          <md-autocomplete              md-menu-class="md-contact-chips-suggestions"              md-selected-item="$mdContactChipsCtrl.selectedItem"              md-search-text="$mdContactChipsCtrl.searchText"              md-items="item in $mdContactChipsCtrl.queryContact($mdContactChipsCtrl.searchText)"              md-item-text="$mdContactChipsCtrl.mdContactName"              md-no-cache="true"              md-autoselect              placeholder="{{$mdContactChipsCtrl.contacts.length == 0 ?                  $mdContactChipsCtrl.placeholder : $mdContactChipsCtrl.secondaryPlaceholder}}">            <div class="md-contact-suggestion">              <img                   ng-src="{{item[$mdContactChipsCtrl.contactImage]}}"                  alt="{{item[$mdContactChipsCtrl.contactName]}}" />              <span class="md-contact-name" md-highlight-text="$mdContactChipsCtrl.searchText">                {{item[$mdContactChipsCtrl.contactName]}}              </span>              <span class="md-contact-email" >{{item[$mdContactChipsCtrl.contactEmail]}}</span>            </div>          </md-autocomplete>          <md-chip-template>            <div class="md-contact-avatar">              <img                   ng-src="{{$chip[$mdContactChipsCtrl.contactImage]}}"                  alt="{{$chip[$mdContactChipsCtrl.contactName]}}" />            </div>            <div class="md-contact-name">              {{$chip[$mdContactChipsCtrl.contactName]}}            </div>          </md-chip-template>      </md-chips>';e.$inject=["$mdTheming","$mdUtil"]}(),function(){function e(){function e(e,n,r,o){if(o){var i=n.parent()[0].getElementsByTagName("md-tab"),a=Array.prototype.indexOf.call(i,n[0]),s=n.find("md-tab-body").eq(0).remove(),c=n.find("md-tab-label").eq(0).remove(),l=o.insertTab({scope:e,parent:e.$parent,index:a,element:n,template:s.html(),label:c.html()},a);e.select=e.select||t.noop,e.deselect=e.deselect||t.noop,e.$watch("active",function(e){e&&o.select(l.getIndex())}),e.$watch("disabled",function(){o.refreshIndex()}),e.$watch(function(){return Array.prototype.indexOf.call(i,n[0])},function(e){l.index=e,o.updateTabOrder()}),e.$on("$destroy",function(){o.removeTab(l)})}}return{require:"^?mdTabs",terminal:!0,template:function(e,t){function n(){function n(){return t.label}function r(){var t=e.find("md-tab-label").eq(0);return t.length?t.remove().html():void 0}function o(){var t=e.html();return e.empty(),t}return r()||n()||o()}function r(){var n=e.find("md-tab-body").eq(0),r=n.length?n.html():t.label?e.html():"";return n.length?n.remove():t.label&&e.empty(),r}var o=n(),i=r();return"<md-tab-label>"+o+"</md-tab-label><md-tab-body>"+i+"</md-tab-body>"},scope:{active:"=?mdActive",disabled:"=?ngDisabled",select:"&?mdOnSelect",deselect:"&?mdOnDeselect"},link:e}}t.module("material.components.tabs").directive("mdTab",e)}(),function(){function e(){return{require:"^?mdTabs",link:function(e,t,n,r){r&&r.attachRipple(e,t)}}}t.module("material.components.tabs").directive("mdTabItem",e)}(),function(){function e(){return{terminal:!0}}t.module("material.components.tabs").directive("mdTabLabel",e)}(),function(){function e(e){return{restrict:"A",compile:function(t,n){var r=e(n.mdTabScroll,null,!0);return function(e,t){t.on("mousewheel",function(t){e.$apply(function(){r(e,{$event:t})})})}}}}t.module("material.components.tabs").directive("mdTabScroll",e),e.$inject=["$parse"]}(),function(){function e(e,n,r,o,i,a,s,c,l,u,d){function m(){e.selectedIndex=e.selectedIndex||0,f(),h(),p(),d(n),o(function(){W(),q(),j(),Z.tabs[e.selectedIndex]&&Z.tabs[e.selectedIndex].scope.select(),ne=!0})}function f(){var e=l.$mdTabsTemplate,n=t.element(Q.data);n.html(e),u(n.contents())(Z.parent),delete l.$mdTabsTemplate}function p(){t.element(r).on("resize",T),t.element(Q.paging).on("DOMSubtreeModified",Z.updateInkBarStyles),t.element(Q.paging).on("DOMSubtreeModified",j)}function h(){s.initOptionalProperties(e,l),l.$observe("mdNoBar",function(n){e.noInkBar=t.isDefined(n)}),e.$watch("selectedIndex",E),e.$watch("dynamicHeight",function(e){e?n.addClass("md-dynamic-height"):n.removeClass("md-dynamic-height")}),e.$on("$destroy",g)}function g(){te=!0,t.element(r).off("resize",T),t.element(Q.paging).off("DOMSubtreeModified",Z.updateInkBarStyles),t.element(Q.paging).off("DOMSubtreeModified",j)}function v(e){n[e?"removeClass":"addClass"]("md-no-tab-content")}function $(n){var r=Z.shouldCenterTabs?"":"-"+n+"px";t.element(Q.paging).css(i.CSS.TRANSFORM,"translate3d("+r+", 0, 0)"),e.$broadcast("$mdTabsPaginationChanged")}function b(e,t){e!==t&&Q.tabs[e]&&(q(),V())}function E(t,n){t!==n&&(e.selectedIndex=R(t),Z.lastSelectedIndex=n,Z.updateInkBarStyles(),W(),q(t),e.$broadcast("$mdTabsChanged"),Z.tabs[n]&&Z.tabs[n].scope.deselect(),Z.tabs[t]&&Z.tabs[t].scope.select())}function y(){y.watcher||(y.watcher=e.$watch(function(){o(function(){y.watcher&&n.prop("offsetParent")&&(y.watcher(),y.watcher=null,T())},0,!1)}))}function M(t){switch(t.keyCode){case i.KEY_CODE.LEFT_ARROW:t.preventDefault(),F(-1,!0);break;case i.KEY_CODE.RIGHT_ARROW:t.preventDefault(),F(1,!0);break;case i.KEY_CODE.SPACE:case i.KEY_CODE.ENTER:t.preventDefault(),J||(e.selectedIndex=Z.focusIndex)}Z.lastClick=!1}function w(t){J||(Z.focusIndex=e.selectedIndex=t),Z.lastClick=!0,Z.tabs[t].element.triggerHandler("click")}function C(e){Z.shouldPaginate&&(e.preventDefault(),Z.offsetLeft=G(Z.offsetLeft-e.wheelDelta))}function A(){var e,t,n=Q.canvas.clientWidth,r=n+Z.offsetLeft;for(e=0;e<Q.tabs.length&&(t=Q.tabs[e],!(t.offsetLeft+t.offsetWidth>r));e++);Z.offsetLeft=G(t.offsetLeft)}function x(){var e,t;for(e=0;e<Q.tabs.length&&(t=Q.tabs[e],!(t.offsetLeft+t.offsetWidth>=Z.offsetLeft));e++);Z.offsetLeft=G(t.offsetLeft+t.offsetWidth-Q.canvas.clientWidth)}function T(){e.$apply(function(){Z.lastSelectedIndex=e.selectedIndex,Z.offsetLeft=G(Z.offsetLeft),o(Z.updateInkBarStyles,0,!1),o(j)})}function k(t){var n=e.selectedIndex,r=Z.tabs.splice(t.getIndex(),1)[0];z(),e.selectedIndex!==n||te||(r.scope.deselect(),Z.tabs[e.selectedIndex]&&Z.tabs[e.selectedIndex].scope.select()),o(function(){j(),Z.offsetLeft=G(Z.offsetLeft)})}function S(n,r){var i={getIndex:function(){return Z.tabs.indexOf(a)},isActive:function(){return this.getIndex()===e.selectedIndex},isLeft:function(){return this.getIndex()<e.selectedIndex},isRight:function(){return this.getIndex()>e.selectedIndex},shouldRender:function(){return!e.noDisconnect||this.isActive()},hasFocus:function(){return!Z.lastClick&&Z.hasFocus&&this.getIndex()===Z.focusIndex},id:s.nextUid()},a=t.extend(i,n);return t.isDefined(r)?Z.tabs.splice(r,0,a):Z.tabs.push(a),B(),U(),ne&&e.autoselect&&o(function(){w(Z.tabs.indexOf(a))}),o(j),a}function N(){var e={};return e.wrapper=n[0].getElementsByTagName("md-tabs-wrapper")[0],e.data=n[0].getElementsByTagName("md-tab-data")[0],e.canvas=e.wrapper.getElementsByTagName("md-tabs-canvas")[0],e.paging=e.canvas.getElementsByTagName("md-pagination-wrapper")[0],e.tabs=e.paging.getElementsByTagName("md-tab-item"),e.dummies=e.canvas.getElementsByTagName("md-dummy-tab"),e.inkBar=e.paging.getElementsByTagName("md-ink-bar")[0],e.contentsWrapper=n[0].getElementsByTagName("md-tabs-content-wrapper")[0],e.contents=e.contentsWrapper.getElementsByTagName("md-tab-content"),e}function _(){return Z.offsetLeft>0}function H(){var e=Q.tabs[Q.tabs.length-1];return e&&e.offsetLeft+e.offsetWidth>Q.canvas.clientWidth+Z.offsetLeft}function O(){switch(e.stretchTabs){case"always":return!0;case"never":return!1;default:return!Z.shouldPaginate&&r.matchMedia("(max-width: 600px)").matches}}function D(){return e.centerTabs&&!Z.shouldPaginate}function I(){if(e.noPagination||!ne)return!1;var r=n.prop("clientWidth");return t.forEach(Q.dummies,function(e){r-=e.offsetWidth}),0>r}function R(e){var t,n,r=Math.max(Z.tabs.length-e,e);for(t=0;r>=t;t++){if(n=Z.tabs[e+t],n&&n.scope.disabled!==!0)return n.getIndex();if(n=Z.tabs[e-t],n&&n.scope.disabled!==!0)return n.getIndex()}return e}function P(e,t,n){Object.defineProperty(Z,e,{get:function(){return n},set:function(e){var r=n;n=e,t(e,r)}})}function j(){Z.shouldPaginate=I(),Z.shouldCenterTabs=D(),o(function(){q(e.selectedIndex)})}function L(){var t=Z.tabs[e.selectedIndex],n=Z.tabs[Z.focusIndex];Z.tabs=Z.tabs.sort(function(e,t){return e.index-t.index}),e.selectedIndex=Z.tabs.indexOf(t),Z.focusIndex=Z.tabs.indexOf(n)}function F(e){var t,n=Z.focusIndex;for(t=n+e;Z.tabs[t]&&Z.tabs[t].scope.disabled;t+=e);Z.tabs[t]&&(Z.focusIndex=t)}function V(){Q.dummies[Z.focusIndex].focus()}function q(e){if(!Z.shouldCenterTabs){null==e&&(e=Z.focusIndex);var t=Q.tabs[e],n=t.offsetLeft,r=t.offsetWidth+n;Z.offsetLeft=Math.max(Z.offsetLeft,G(r-Q.canvas.clientWidth)),Z.offsetLeft=Math.min(Z.offsetLeft,G(n))}}function B(){ee.forEach(function(e){o(e)}),ee=[]}function U(){var e=!1;t.forEach(Z.tabs,function(t){t.template&&(e=!0)}),Z.hasContent=e}function z(){e.selectedIndex=R(e.selectedIndex),Z.focusIndex=R(Z.focusIndex)}function W(){if(!e.dynamicHeight)return n.css("height","");if(!Z.tabs.length)return ee.push(W);var t=Q.contents[e.selectedIndex],r=t?t.offsetHeight:0,o=Q.wrapper.offsetHeight,i=r+o,a=n.prop("clientHeight");a!==i&&(J=!0,c.animate(n,{height:a+"px"},{height:i+"px"}).then(function(){n.css("height",""),J=!1}))}function K(){if(Q.tabs[e.selectedIndex]){if(!Z.tabs.length)return ee.push(Z.updateInkBarStyles);if(!n.prop("offsetParent"))return y();var r=e.selectedIndex,o=Q.paging.offsetWidth,i=Q.tabs[r],a=i.offsetLeft,s=o-a-i.offsetWidth;Y(),t.element(Q.inkBar).css({left:a+"px",right:s+"px"})}}function Y(){var n=e.selectedIndex,r=Z.lastSelectedIndex,o=t.element(Q.inkBar);t.isNumber(r)&&(r>n?o.addClass("md-left").removeClass("md-right"):n>r&&o.addClass("md-right").removeClass("md-left"))}function G(e){if(!Q.tabs.length||!Z.shouldPaginate)return 0;var t=Q.tabs[Q.tabs.length-1],n=t.offsetLeft+t.offsetWidth;return e=Math.max(0,e),e=Math.min(n-Q.canvas.clientWidth,e)}function X(e,n){var r={colorElement:t.element(Q.inkBar)};a.attach(e,n,r)}var Z=this,J=!1,Q=N(),ee=[],te=!1,ne=!1;P("focusIndex",b,e.selectedIndex||0),P("offsetLeft",$,0),P("hasContent",v,!1),Z.scope=e,Z.parent=e.$parent,Z.tabs=[],Z.lastSelectedIndex=null,Z.hasFocus=!1,Z.lastClick=!0,Z.shouldPaginate=!1,Z.shouldCenterTabs=D(),Z.redirectFocus=V,Z.attachRipple=X,Z.shouldStretchTabs=O,Z.insertTab=S,Z.removeTab=k,Z.select=w,Z.scroll=C,Z.nextPage=A,Z.previousPage=x,Z.keydown=M,Z.canPageForward=H,Z.canPageBack=_,Z.refreshIndex=z,Z.incrementSelectedIndex=F,Z.updateInkBarStyles=s.debounce(K,100),Z.updateTabOrder=s.debounce(L,100),m()}t.module("material.components.tabs").controller("MdTabsController",e),e.$inject=["$scope","$element","$window","$timeout","$mdConstant","$mdTabInkRipple","$mdUtil","$animate","$attrs","$compile","$mdTheming"]}(),function(){function e(e,t,n){return{scope:{noPagination:"=?mdNoPagination",dynamicHeight:"=?mdDynamicHeight",centerTabs:"=?mdCenterTabs",selectedIndex:"=?mdSelected",stretchTabs:"@?mdStretchTabs",swipeContent:"=?mdSwipeContent",noDisconnect:"=?mdNoDisconnect",autoselect:"=?mdAutoselect"},template:function(e,t){return t.$mdTabsTemplate=e.html(),'        <md-tabs-wrapper ng-class="{ \'md-stretch-tabs\': $mdTabsCtrl.shouldStretchTabs() }">          <md-tab-data></md-tab-data>          <md-prev-button              tabindex="-1"              role="button"              aria-label="Previous Page"              aria-disabled="{{!$mdTabsCtrl.canPageBack()}}"              ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageBack() }"              ng-if="$mdTabsCtrl.shouldPaginate"              ng-click="$mdTabsCtrl.previousPage()">            <md-icon md-svg-icon="md-tabs-arrow"></md-icon>          </md-prev-button>          <md-next-button              tabindex="-1"              role="button"              aria-label="Next Page"              aria-disabled="{{!$mdTabsCtrl.canPageForward()}}"              ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageForward() }"              ng-if="$mdTabsCtrl.shouldPaginate"              ng-click="$mdTabsCtrl.nextPage()">            <md-icon md-svg-icon="md-tabs-arrow"></md-icon>          </md-next-button>          <md-tabs-canvas              tabindex="0"              aria-activedescendant="tab-item-{{$mdTabsCtrl.tabs[$mdTabsCtrl.focusIndex].id}}"              ng-focus="$mdTabsCtrl.redirectFocus()"              ng-class="{                  \'md-paginated\': $mdTabsCtrl.shouldPaginate,                  \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs              }"              ng-keydown="$mdTabsCtrl.keydown($event)"              role="tablist">            <md-pagination-wrapper                ng-class="{ \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs }"                md-tab-scroll="$mdTabsCtrl.scroll($event)">              <md-tab-item                  tabindex="-1"                  class="md-tab"                  style="max-width: {{ tabWidth ? tabWidth + \'px\' : \'none\' }}"                  ng-repeat="tab in $mdTabsCtrl.tabs"                  role="tab"                  aria-controls="tab-content-{{tab.id}}"                  aria-selected="{{tab.isActive()}}"                  aria-disabled="{{tab.scope.disabled || \'false\'}}"                  ng-click="$mdTabsCtrl.select(tab.getIndex())"                  ng-class="{                      \'md-active\':    tab.isActive(),                      \'md-focused\':   tab.hasFocus(),                      \'md-disabled\':  tab.scope.disabled                  }"                  ng-disabled="tab.scope.disabled"                  md-swipe-left="$mdTabsCtrl.nextPage()"                  md-swipe-right="$mdTabsCtrl.previousPage()"                  md-template="tab.label"                  md-scope="tab.parent"></md-tab-item>              <md-ink-bar ng-hide="noInkBar"></md-ink-bar>            </md-pagination-wrapper>            <div class="md-visually-hidden md-dummy-wrapper">              <md-dummy-tab                  class="md-tab"                  tabindex="-1"                  id="tab-item-{{tab.id}}"                  role="tab"                  aria-controls="tab-content-{{tab.id}}"                  aria-selected="{{tab.isActive()}}"                  aria-disabled="{{tab.scope.disabled || \'false\'}}"                  ng-focus="$mdTabsCtrl.hasFocus = true"                  ng-blur="$mdTabsCtrl.hasFocus = false"                  ng-repeat="tab in $mdTabsCtrl.tabs"                  md-template="tab.label"                  md-scope="tab.parent"></md-dummy-tab>            </div>          </md-tabs-canvas>        </md-tabs-wrapper>        <md-tabs-content-wrapper ng-show="$mdTabsCtrl.hasContent">          <md-tab-content              id="tab-content-{{tab.id}}"              role="tabpanel"              aria-labelledby="tab-item-{{tab.id}}"              md-swipe-left="swipeContent && $mdTabsCtrl.incrementSelectedIndex(1)"              md-swipe-right="swipeContent && $mdTabsCtrl.incrementSelectedIndex(-1)"              ng-if="$mdTabsCtrl.hasContent"              ng-repeat="(index, tab) in $mdTabsCtrl.tabs"              md-connected-if="tab.isActive()"              ng-class="{                \'md-no-transition\': $mdTabsCtrl.lastSelectedIndex == null,                \'md-active\':        tab.isActive(),                \'md-left\':          tab.isLeft(),                \'md-right\':         tab.isRight(),                \'md-no-scroll\':     dynamicHeight              }">            <div                md-template="tab.template"                md-scope="tab.parent"                ng-if="tab.shouldRender()"></div>          </md-tab-content>        </md-tabs-content-wrapper>      '},controller:"MdTabsController",controllerAs:"$mdTabsCtrl"}}t.module("material.components.tabs").directive("mdTabs",e),e.$inject=["$mdTheming","$mdUtil","$compile"]}(),function(){function e(e,t,n){function r(r,o,i,a){function s(){r.$watch("connected",function(e){e===!1?c():l()}),r.$on("$destroy",l)}function c(){a.scope.noDisconnect||t.disconnectScope(u)}function l(){a.scope.noDisconnect||t.reconnectScope(u)}if(a){var u=r.compileScope.$new();return o.html(r.template),e(o.contents())(u),n(s)}}return{restrict:"A",link:r,scope:{template:"=mdTemplate",compileScope:"=mdScope",connected:"=?mdConnectedIf"},require:"^?mdTabs"}}t.module("material.components.tabs").directive("mdTemplate",e),e.$inject=["$compile","$mdUtil","$timeout"]}(),function(){t.module("material.core").constant("$MD_THEME_CSS","/* mixin definition ; sets LTR and RTL within the same style call */md-autocomplete.md-THEME_NAME-theme {  background: '{{background-50}}'; }  md-autocomplete.md-THEME_NAME-theme[disabled] {    background: '{{background-100}}'; }  md-autocomplete.md-THEME_NAME-theme button md-icon path {    fill: '{{background-600}}'; }  md-autocomplete.md-THEME_NAME-theme button:after {    background: '{{background-600-0.3}}'; }.md-autocomplete-suggestions.md-THEME_NAME-theme {  background: '{{background-50}}'; }  .md-autocomplete-suggestions.md-THEME_NAME-theme li {    color: '{{background-900}}'; }    .md-autocomplete-suggestions.md-THEME_NAME-theme li .highlight {      color: '{{background-600}}'; }    .md-autocomplete-suggestions.md-THEME_NAME-theme li:hover, .md-autocomplete-suggestions.md-THEME_NAME-theme li.selected {      background: '{{background-200}}'; }md-backdrop.md-opaque.md-THEME_NAME-theme {  background-color: '{{foreground-4-0.5}}'; }md-bottom-sheet.md-THEME_NAME-theme {  background-color: '{{background-50}}';  border-top-color: '{{background-300}}'; }  md-bottom-sheet.md-THEME_NAME-theme.md-list md-list-item {    color: '{{foreground-1}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    background-color: '{{background-50}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    color: '{{foreground-1}}'; }a.md-button.md-THEME_NAME-theme, .md-button.md-THEME_NAME-theme {  border-radius: 3px; }  a.md-button.md-THEME_NAME-theme:not([disabled]):hover, .md-button.md-THEME_NAME-theme:not([disabled]):hover {    background-color: '{{background-500-0.2}}'; }  a.md-button.md-THEME_NAME-theme:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme:not([disabled]).md-focused {    background-color: '{{background-500-0.2}}'; }  a.md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover, .md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover {    background-color: transparent; }  a.md-button.md-THEME_NAME-theme.md-fab, .md-button.md-THEME_NAME-theme.md-fab {    border-radius: 50%;    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-fab md-icon, .md-button.md-THEME_NAME-theme.md-fab md-icon {      color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {      background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {      background-color: '{{accent-A700}}'; }  a.md-button.md-THEME_NAME-theme.md-icon-button, .md-button.md-THEME_NAME-theme.md-icon-button {    border-radius: 50%; }  a.md-button.md-THEME_NAME-theme.md-primary, .md-button.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised, a.md-button.md-THEME_NAME-theme.md-primary.md-fab, .md-button.md-THEME_NAME-theme.md-primary.md-raised, .md-button.md-THEME_NAME-theme.md-primary.md-fab {      color: '{{primary-contrast}}';      background-color: '{{primary-color}}'; }      a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon {        color: '{{primary-contrast}}'; }      a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover {        background-color: '{{primary-color}}'; }      a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused {        background-color: '{{primary-600}}'; }    a.md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon {      color: '{{primary-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab, .md-button.md-THEME_NAME-theme.md-fab {    border-radius: 50%;    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon {      color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {      background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {      background-color: '{{accent-A700}}'; }  a.md-button.md-THEME_NAME-theme.md-raised, .md-button.md-THEME_NAME-theme.md-raised {    color: '{{background-contrast}}';    background-color: '{{background-50}}'; }    a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon {      color: '{{background-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover {      background-color: '{{background-50}}'; }    a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused {      background-color: '{{background-200}}'; }  a.md-button.md-THEME_NAME-theme.md-warn, .md-button.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised, a.md-button.md-THEME_NAME-theme.md-warn.md-fab, .md-button.md-THEME_NAME-theme.md-warn.md-raised, .md-button.md-THEME_NAME-theme.md-warn.md-fab {      color: '{{warn-contrast}}';      background-color: '{{warn-color}}'; }      a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon {        color: '{{warn-contrast}}'; }      a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover {        background-color: '{{warn-color}}'; }      a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused {        background-color: '{{warn-700}}'; }    a.md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon {      color: '{{warn-color}}'; }  a.md-button.md-THEME_NAME-theme.md-accent, .md-button.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised, a.md-button.md-THEME_NAME-theme.md-accent.md-fab, .md-button.md-THEME_NAME-theme.md-accent.md-raised, .md-button.md-THEME_NAME-theme.md-accent.md-fab {      color: '{{accent-contrast}}';      background-color: '{{accent-color}}'; }      a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon {        color: '{{accent-contrast}}'; }      a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover {        background-color: '{{accent-color}}'; }      a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused {        background-color: '{{accent-700}}'; }    a.md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon {      color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme[disabled], a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], a.md-button.md-THEME_NAME-theme.md-accent[disabled], a.md-button.md-THEME_NAME-theme.md-warn[disabled], .md-button.md-THEME_NAME-theme[disabled], .md-button.md-THEME_NAME-theme.md-raised[disabled], .md-button.md-THEME_NAME-theme.md-fab[disabled], .md-button.md-THEME_NAME-theme.md-accent[disabled], .md-button.md-THEME_NAME-theme.md-warn[disabled] {    color: '{{foreground-3}}';    cursor: not-allowed; }    a.md-button.md-THEME_NAME-theme[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon, .md-button.md-THEME_NAME-theme[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon {      color: '{{foreground-3}}'; }  a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], .md-button.md-THEME_NAME-theme.md-raised[disabled], .md-button.md-THEME_NAME-theme.md-fab[disabled] {    background-color: '{{foreground-4}}'; }  a.md-button.md-THEME_NAME-theme[disabled], .md-button.md-THEME_NAME-theme[disabled] {    background-color: transparent; }md-card.md-THEME_NAME-theme {  background-color: '{{background-color}}';  border-radius: 2px; }  md-card.md-THEME_NAME-theme .md-card-image {    border-radius: 2px 2px 0 0; }md-checkbox.md-THEME_NAME-theme .md-ripple {  color: '{{accent-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked.md-focused .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon {  background-color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ripple {  color: '{{primary-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon {  background-color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked.md-focused .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ripple {  color: '{{warn-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon {  background-color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked.md-focused:not([disabled]) .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-icon {  border-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon {  background-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-label {  color: '{{foreground-3}}'; }md-content.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }md-chips.md-THEME_NAME-theme .md-chips {  box-shadow: 0 1px '{{background-300}}'; }  md-chips.md-THEME_NAME-theme .md-chips.md-focused {    box-shadow: 0 2px '{{primary-color}}'; }md-chips.md-THEME_NAME-theme .md-chip {  background: '{{background-300}}';  color: '{{background-800}}'; }  md-chips.md-THEME_NAME-theme .md-chip.md-focused {    background: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-chips.md-THEME_NAME-theme .md-chip.md-focused md-icon {      color: '{{primary-contrast}}'; }md-chips.md-THEME_NAME-theme md-chip-remove .md-button md-icon path {  fill: '{{background-500}}'; }.md-contact-suggestion span.md-contact-email {  color: '{{background-400}}'; }md-dialog.md-THEME_NAME-theme {  border-radius: 4px;  background-color: '{{background-color}}'; }  md-dialog.md-THEME_NAME-theme.md-content-overflow .md-actions {    border-top-color: '{{foreground-4}}'; }md-divider.md-THEME_NAME-theme {  border-top-color: '{{foreground-4}}'; }md-icon.md-THEME_NAME-theme {  color: '{{foreground-2}}'; }  md-icon.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  md-icon.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  md-icon.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-input-container.md-THEME_NAME-theme .md-input {  color: '{{foreground-1}}';  border-color: '{{foreground-4}}';  text-shadow: '{{foreground-shadow}}'; }  md-input-container.md-THEME_NAME-theme .md-input::-webkit-input-placeholder, md-input-container.md-THEME_NAME-theme .md-input::-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-ms-input-placeholder {    color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme > md-icon {  color: '{{foreground-1}}'; }md-input-container.md-THEME_NAME-theme label, md-input-container.md-THEME_NAME-theme .md-placeholder {  text-shadow: '{{foreground-shadow}}';  color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme ng-messages, md-input-container.md-THEME_NAME-theme [ng-message], md-input-container.md-THEME_NAME-theme [data-ng-message], md-input-container.md-THEME_NAME-theme [x-ng-message] {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-has-value label {  color: '{{foreground-2}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused .md-input {  border-color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused label {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused md-icon {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent .md-input {  border-color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent label {  color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn .md-input {  border-color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn label {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid .md-input {  border-color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid.md-input-focused label {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid data-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid x-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid .md-char-counter {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme .md-input[disabled], [disabled] md-input-container.md-THEME_NAME-theme .md-input {  border-bottom-color: transparent;  color: '{{foreground-3}}';  background-image: linear-gradient(to right, '{{foreground-3}}' 0%, '{{foreground-3}}' 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, '{{foreground-3}}' 100%); }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h4, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h4 {  color: '{{foreground-1}}'; }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text p, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text p {  color: '{{foreground-2}}'; }md-list.md-THEME_NAME-theme .md-proxy-focus.md-focused div.md-no-style {  background-color: '{{background-100}}'; }md-list.md-THEME_NAME-theme md-list-item > md-icon {  color: '{{foreground-2}}'; }  md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight {    color: '{{primary-color}}'; }    md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight.md-accent {      color: '{{accent-color}}'; }md-list.md-THEME_NAME-theme md-list-item button {  background-color: '{{background-color}}'; }  md-list.md-THEME_NAME-theme md-list-item button.md-button:not([disabled]):hover {    background-color: '{{background-color}}'; }md-menu-content.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }  md-menu-content.md-THEME_NAME-theme md-menu-divider {    background-color: '{{foreground-4}}'; }md-progress-circular.md-THEME_NAME-theme {  background-color: transparent; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-gap {    border-top-color: '{{primary-color}}';    border-bottom-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-top-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-right-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle {    border-left-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-gap {    border-top-color: '{{warn-color}}';    border-bottom-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-top-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-right-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle {    border-left-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-gap {    border-top-color: '{{accent-color}}';    border-bottom-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-top-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-right-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle {    border-left-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme .md-container {  background-color: '{{primary-100}}'; }md-progress-linear.md-THEME_NAME-theme .md-bar {  background-color: '{{primary-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-container {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-bar {  background-color: '{{warn-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-container {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-bar {  background-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-bar1 {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-dashed:before {  background: radial-gradient('{{warn-100}}' 0%, '{{warn-100}}' 16%, transparent 42%); }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-bar1 {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-dashed:before {  background: radial-gradient('{{accent-100}}' 0%, '{{accent-100}}' 16%, transparent 42%); }md-radio-button.md-THEME_NAME-theme .md-off {  border-color: '{{foreground-2}}'; }md-radio-button.md-THEME_NAME-theme .md-on {  background-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-off {  border-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme .md-container .md-ripple {  color: '{{accent-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-on {  background-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off {  border-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple {  color: '{{primary-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-on {  background-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off {  border-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple {  color: '{{warn-600}}'; }md-radio-group.md-THEME_NAME-theme[disabled], md-radio-button.md-THEME_NAME-theme[disabled] {  color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-off, md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-off {    border-color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-on, md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-on {    border-color: '{{foreground-3}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked:not([disabled]).md-primary .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked.md-primary .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-select.md-THEME_NAME-theme.ng-invalid.ng-dirty .md-select-label {  color: '{{warn-500}}' !important;  border-bottom-color: '{{warn-500}}' !important; }md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-label {  border-bottom-color: '{{primary-color}}';  color: '{{ foreground-1 }}'; }  md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-label.md-placeholder {    color: '{{ foreground-1 }}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-accent .md-select-label {  border-bottom-color: '{{accent-color}}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-warn .md-select-label {  border-bottom-color: '{{warn-color}}'; }md-select.md-THEME_NAME-theme[disabled] .md-select-label {  color: '{{foreground-3}}'; }  md-select.md-THEME_NAME-theme[disabled] .md-select-label.md-placeholder {    color: '{{foreground-3}}'; }md-select.md-THEME_NAME-theme .md-select-label {  border-bottom-color: '{{foreground-4}}'; }  md-select.md-THEME_NAME-theme .md-select-label.md-placeholder {    color: '{{foreground-2}}'; }md-select-menu.md-THEME_NAME-theme md-optgroup {  color: '{{foreground-2}}'; }  md-select-menu.md-THEME_NAME-theme md-optgroup md-option {    color: '{{foreground-1}}'; }md-select-menu.md-THEME_NAME-theme md-option[selected] {  color: '{{primary-500}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected]:focus {    color: '{{primary-600}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent {    color: '{{accent-500}}'; }    md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent:focus {      color: '{{accent-600}}'; }md-select-menu.md-THEME_NAME-theme md-option:focus:not([selected]) {  background: '{{background-200}}'; }md-sidenav.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track {  background-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme .md-track-ticks {  background-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-focus-thumb {  background-color: '{{foreground-2}}'; }md-slider.md-THEME_NAME-theme .md-focus-ring {  border-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-disabled-thumb {  border-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme.md-min .md-thumb:after {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track.md-track-fill {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb:after {  border-color: '{{accent-color}}';  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-sign {  background-color: '{{accent-color}}'; }  md-slider.md-THEME_NAME-theme .md-sign:after {    border-top-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb-text {  color: '{{accent-contrast}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-track.md-track-fill {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb:after {  border-color: '{{warn-color}}';  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-sign {  background-color: '{{warn-color}}'; }  md-slider.md-THEME_NAME-theme.md-warn .md-sign:after {    border-top-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb-text {  color: '{{warn-contrast}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-track.md-track-fill {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb:after {  border-color: '{{primary-color}}';  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-sign {  background-color: '{{primary-color}}'; }  md-slider.md-THEME_NAME-theme.md-primary .md-sign:after {    border-top-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb-text {  color: '{{primary-contrast}}'; }md-slider.md-THEME_NAME-theme[disabled] .md-thumb:after {  border-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme[disabled]:not(.md-min) .md-thumb:after {  background-color: '{{foreground-3}}'; }.md-subheader.md-THEME_NAME-theme {  color: '{{ foreground-2-0.23 }}';  background-color: '{{background-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme .md-thumb {  background-color: '{{background-50}}'; }md-switch.md-THEME_NAME-theme .md-bar {  background-color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-thumb {  background-color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-bar {  background-color: '{{accent-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-focused .md-thumb:before {  background-color: '{{accent-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-thumb {  background-color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-bar {  background-color: '{{primary-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary.md-focused .md-thumb:before {  background-color: '{{primary-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-thumb {  background-color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-bar {  background-color: '{{warn-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn.md-focused .md-thumb:before {  background-color: '{{warn-color-0.26}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-thumb {  background-color: '{{background-400}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-bar {  background-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: transparent;  border-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme .md-paginator md-icon {  color: '{{primary-color}}'; }md-tabs.md-THEME_NAME-theme md-ink-bar {  color: '{{accent-color}}';  background: '{{accent-color}}'; }md-tabs.md-THEME_NAME-theme .md-tab {  color: '{{foreground-2}}'; }  md-tabs.md-THEME_NAME-theme .md-tab[disabled] {    color: '{{foreground-3}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-active, md-tabs.md-THEME_NAME-theme .md-tab.md-focused {    color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-focused {    background: '{{primary-color-0.1}}'; }  md-tabs.md-THEME_NAME-theme .md-tab .md-ripple-container {    color: '{{accent-100}}'; }md-tabs.md-THEME_NAME-theme.md-accent md-tabs-wrapper {  background-color: '{{accent-color}}'; }md-tabs.md-THEME_NAME-theme.md-accent md-tab-item:not([disabled]) {  color: '{{accent-100}}'; }  md-tabs.md-THEME_NAME-theme.md-accent md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-accent md-tab-item:not([disabled]).md-focused {    color: '{{accent-contrast}}'; }  md-tabs.md-THEME_NAME-theme.md-accent md-tab-item:not([disabled]).md-focused {    background: '{{accent-contrast-0.1}}'; }md-tabs.md-THEME_NAME-theme.md-accent md-ink-bar {  color: '{{primary-600-1}}';  background: '{{primary-600-1}}'; }md-tabs.md-THEME_NAME-theme.md-primary md-tabs-wrapper {  background-color: '{{primary-color}}'; }md-tabs.md-THEME_NAME-theme.md-primary md-tab-item:not([disabled]) {  color: '{{primary-100}}'; }  md-tabs.md-THEME_NAME-theme.md-primary md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-primary md-tab-item:not([disabled]).md-focused {    color: '{{primary-contrast}}'; }  md-tabs.md-THEME_NAME-theme.md-primary md-tab-item:not([disabled]).md-focused {    background: '{{primary-contrast-0.1}}'; }md-tabs.md-THEME_NAME-theme.md-warn md-tabs-wrapper {  background-color: '{{warn-color}}'; }md-tabs.md-THEME_NAME-theme.md-warn md-tab-item:not([disabled]) {  color: '{{warn-100}}'; }  md-tabs.md-THEME_NAME-theme.md-warn md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-warn md-tab-item:not([disabled]).md-focused {    color: '{{warn-contrast}}'; }  md-tabs.md-THEME_NAME-theme.md-warn md-tab-item:not([disabled]).md-focused {    background: '{{warn-contrast-0.1}}'; }md-toolbar > md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: '{{primary-color}}'; }md-toolbar > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]) {  color: '{{primary-100}}'; }  md-toolbar > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-active, md-toolbar > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-focused {    color: '{{primary-contrast}}'; }  md-toolbar > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-focused {    background: '{{primary-contrast-0.1}}'; }md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: '{{accent-color}}'; }md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]) {  color: '{{accent-100}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-active, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-focused {    color: '{{accent-contrast}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-focused {    background: '{{accent-contrast-0.1}}'; }md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme md-ink-bar {  color: '{{primary-600-1}}';  background: '{{primary-600-1}}'; }md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: '{{warn-color}}'; }md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]) {  color: '{{warn-100}}'; }  md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-active, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-focused {    color: '{{warn-contrast}}'; }  md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme md-tab-item:not([disabled]).md-focused {    background: '{{warn-contrast-0.1}}'; }md-toast.md-THEME_NAME-theme {  background-color: #323232;  color: '{{background-50}}'; }  md-toast.md-THEME_NAME-theme .md-button {    color: '{{background-50}}'; }    md-toast.md-THEME_NAME-theme .md-button.md-highlight {      color: '{{primary-A200}}'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-accent {        color: '{{accent-A200}}'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-warn {        color: '{{warn-A200}}'; }md-toolbar.md-THEME_NAME-theme {  background-color: '{{primary-color}}';  color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme md-icon {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme .md-button {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme.md-accent {    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }  md-toolbar.md-THEME_NAME-theme.md-warn {    background-color: '{{warn-color}}';    color: '{{warn-contrast}}'; }md-tooltip.md-THEME_NAME-theme {  color: '{{background-A100}}'; }  md-tooltip.md-THEME_NAME-theme .md-background {    background-color: '{{foreground-2}}'; }");

}()}(window,window.angular)},{}],12:[function(e,t,n){e("angular"),e("angular-animate"),e("angular-aria"),e("./angular-material"),t.exports="ngMaterial"},{"./angular-material":11,angular:14,"angular-animate":8,"angular-aria":10}],13:[function(e,t,n){!function(e,t,n){"use strict";function r(e,t){return t=t||Error,function(){var n,r,o=2,i=arguments,a=i[0],s="["+(e?e+":":"")+a+"] ",c=i[1];for(s+=c.replace(/\{\d+\}/g,function(e){var t=+e.slice(1,-1),n=t+o;return n<i.length?be(i[n]):e}),s+="\nhttp://errors.angularjs.org/1.4.3/"+(e?e+"/":"")+a,r=o,n="?";r<i.length;r++,n="&")s+=n+"p"+(r-o)+"="+encodeURIComponent(be(i[r]));return new t(s)}}function o(e){if(null==e||k(e))return!1;var t="length"in Object(e)&&e.length;return e.nodeType===Kr&&t?!0:w(e)||jr(e)||0===t||"number"==typeof t&&t>0&&t-1 in e}function i(e,t,n){var r,a;if(e)if(x(e))for(r in e)"prototype"==r||"length"==r||"name"==r||e.hasOwnProperty&&!e.hasOwnProperty(r)||t.call(n,e[r],r,e);else if(jr(e)||o(e)){var s="object"!=typeof e;for(r=0,a=e.length;a>r;r++)(s||r in e)&&t.call(n,e[r],r,e)}else if(e.forEach&&e.forEach!==i)e.forEach(t,n,e);else if(M(e))for(r in e)t.call(n,e[r],r,e);else if("function"==typeof e.hasOwnProperty)for(r in e)e.hasOwnProperty(r)&&t.call(n,e[r],r,e);else for(r in e)yr.call(e,r)&&t.call(n,e[r],r,e);return e}function a(e,t,n){for(var r=Object.keys(e).sort(),o=0;o<r.length;o++)t.call(n,e[r[o]],r[o]);return r}function s(e){return function(t,n){e(n,t)}}function c(){return++Rr}function l(e,t){t?e.$$hashKey=t:delete e.$$hashKey}function u(e,t,n){for(var r=e.$$hashKey,o=0,i=t.length;i>o;++o){var a=t[o];if(y(a)||x(a))for(var s=Object.keys(a),c=0,d=s.length;d>c;c++){var m=s[c],f=a[m];n&&y(f)?A(f)?e[m]=new Date(f.valueOf()):(y(e[m])||(e[m]=jr(f)?[]:{}),u(e[m],[f],!0)):e[m]=f}}return l(e,r),e}function d(e){return u(e,Sr.call(arguments,1),!1)}function m(e){return u(e,Sr.call(arguments,1),!0)}function f(e){return parseInt(e,10)}function p(e,t){return d(Object.create(e),t)}function h(){}function g(e){return e}function v(e){return function(){return e}}function $(e){return x(e.toString)&&e.toString!==Object.prototype.toString}function b(e){return"undefined"==typeof e}function E(e){return"undefined"!=typeof e}function y(e){return null!==e&&"object"==typeof e}function M(e){return null!==e&&"object"==typeof e&&!Or(e)}function w(e){return"string"==typeof e}function C(e){return"number"==typeof e}function A(e){return"[object Date]"===Hr.call(e)}function x(e){return"function"==typeof e}function T(e){return"[object RegExp]"===Hr.call(e)}function k(e){return e&&e.window===e}function S(e){return e&&e.$evalAsync&&e.$watch}function N(e){return"[object File]"===Hr.call(e)}function _(e){return"[object FormData]"===Hr.call(e)}function H(e){return"[object Blob]"===Hr.call(e)}function O(e){return"boolean"==typeof e}function D(e){return e&&x(e.then)}function I(e){return Lr.test(Hr.call(e))}function R(e){return!(!e||!(e.nodeName||e.prop&&e.attr&&e.find))}function P(e){var t,n={},r=e.split(",");for(t=0;t<r.length;t++)n[r[t]]=!0;return n}function j(e){return Er(e.nodeName||e[0]&&e[0].nodeName)}function L(e,t){var n=e.indexOf(t);return n>=0&&e.splice(n,1),n}function F(e,t,n,r){if(k(e)||S(e))throw Dr("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");if(I(t))throw Dr("cpta","Can't copy! TypedArray destination cannot be mutated.");if(t){if(e===t)throw Dr("cpi","Can't copy! Source and destination are identical.");n=n||[],r=r||[],y(e)&&(n.push(e),r.push(t));var o;if(jr(e)){t.length=0;for(var a=0;a<e.length;a++)t.push(F(e[a],null,n,r))}else{var s=t.$$hashKey;if(jr(t)?t.length=0:i(t,function(e,n){delete t[n]}),M(e))for(o in e)t[o]=F(e[o],null,n,r);else if(e&&"function"==typeof e.hasOwnProperty)for(o in e)e.hasOwnProperty(o)&&(t[o]=F(e[o],null,n,r));else for(o in e)yr.call(e,o)&&(t[o]=F(e[o],null,n,r));l(t,s)}}else if(t=e,y(e)){var c;if(n&&-1!==(c=n.indexOf(e)))return r[c];if(jr(e))return F(e,[],n,r);if(I(e))t=new e.constructor(e);else if(A(e))t=new Date(e.getTime());else{if(!T(e)){var u=Object.create(Or(e));return F(e,u,n,r)}t=new RegExp(e.source,e.toString().match(/[^\/]*$/)[0]),t.lastIndex=e.lastIndex}r&&(n.push(e),r.push(t))}return t}function V(e,t){if(jr(e)){t=t||[];for(var n=0,r=e.length;r>n;n++)t[n]=e[n]}else if(y(e)){t=t||{};for(var o in e)("$"!==o.charAt(0)||"$"!==o.charAt(1))&&(t[o]=e[o])}return t||e}function q(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!==e&&t!==t)return!0;var r,o,i,a=typeof e,s=typeof t;if(a==s&&"object"==a){if(!jr(e)){if(A(e))return A(t)?q(e.getTime(),t.getTime()):!1;if(T(e))return T(t)?e.toString()==t.toString():!1;if(S(e)||S(t)||k(e)||k(t)||jr(t)||A(t)||T(t))return!1;i=ge();for(o in e)if("$"!==o.charAt(0)&&!x(e[o])){if(!q(e[o],t[o]))return!1;i[o]=!0}for(o in t)if(!(o in i||"$"===o.charAt(0)||t[o]===n||x(t[o])))return!1;return!0}if(!jr(t))return!1;if((r=e.length)==t.length){for(o=0;r>o;o++)if(!q(e[o],t[o]))return!1;return!0}}return!1}function B(e,t,n){return e.concat(Sr.call(t,n))}function U(e,t){return Sr.call(e,t||0)}function z(e,t){var n=arguments.length>2?U(arguments,2):[];return!x(t)||t instanceof RegExp?t:n.length?function(){return arguments.length?t.apply(e,B(n,arguments,0)):t.apply(e,n)}:function(){return arguments.length?t.apply(e,arguments):t.call(e)}}function W(e,r){var o=r;return"string"==typeof e&&"$"===e.charAt(0)&&"$"===e.charAt(1)?o=n:k(r)?o="$WINDOW":r&&t===r?o="$DOCUMENT":S(r)&&(o="$SCOPE"),o}function K(e,t){return"undefined"==typeof e?n:(C(t)||(t=t?2:null),JSON.stringify(e,W,t))}function Y(e){return w(e)?JSON.parse(e):e}function G(e,t){var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(n)?t:n}function X(e,t){return e=new Date(e.getTime()),e.setMinutes(e.getMinutes()+t),e}function Z(e,t,n){n=n?-1:1;var r=G(t,e.getTimezoneOffset());return X(e,n*(r-e.getTimezoneOffset()))}function J(e){e=xr(e).clone();try{e.empty()}catch(t){}var n=xr("<div>").append(e).html();try{return e[0].nodeType===Gr?Er(n):n.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(e,t){return"<"+Er(t)})}catch(t){return Er(n)}}function Q(e){try{return decodeURIComponent(e)}catch(t){}}function ee(e){var t,n,r={};return i((e||"").split("&"),function(e){if(e&&(t=e.replace(/\+/g,"%20").split("="),n=Q(t[0]),E(n))){var o=E(t[1])?Q(t[1]):!0;yr.call(r,n)?jr(r[n])?r[n].push(o):r[n]=[r[n],o]:r[n]=o}}),r}function te(e){var t=[];return i(e,function(e,n){jr(e)?i(e,function(e){t.push(re(n,!0)+(e===!0?"":"="+re(e,!0)))}):t.push(re(n,!0)+(e===!0?"":"="+re(e,!0)))}),t.length?t.join("&"):""}function ne(e){return re(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function re(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,t?"%20":"+")}function oe(e,t){var n,r,o=Ur.length;for(r=0;o>r;++r)if(n=Ur[r]+t,w(n=e.getAttribute(n)))return n;return null}function ie(e,t){var n,r,o={};i(Ur,function(t){var o=t+"app";!n&&e.hasAttribute&&e.hasAttribute(o)&&(n=e,r=e.getAttribute(o))}),i(Ur,function(t){var o,i=t+"app";!n&&(o=e.querySelector("["+i.replace(":","\\:")+"]"))&&(n=o,r=o.getAttribute(i))}),n&&(o.strictDi=null!==oe(n,"strict-di"),t(n,r?[r]:[],o))}function ae(n,r,o){y(o)||(o={});var a={strictDi:!1};o=d(a,o);var s=function(){if(n=xr(n),n.injector()){var e=n[0]===t?"document":J(n);throw Dr("btstrpd","App Already Bootstrapped with this Element '{0}'",e.replace(/</,"&lt;").replace(/>/,"&gt;"))}r=r||[],r.unshift(["$provide",function(e){e.value("$rootElement",n)}]),o.debugInfoEnabled&&r.push(["$compileProvider",function(e){e.debugInfoEnabled(!0)}]),r.unshift("ng");var i=Je(r,o.strictDi);return i.invoke(["$rootScope","$rootElement","$compile","$injector",function(e,t,n,r){e.$apply(function(){t.data("$injector",r),n(t)(e)})}]),i},c=/^NG_ENABLE_DEBUG_INFO!/,l=/^NG_DEFER_BOOTSTRAP!/;return e&&c.test(e.name)&&(o.debugInfoEnabled=!0,e.name=e.name.replace(c,"")),e&&!l.test(e.name)?s():(e.name=e.name.replace(l,""),Ir.resumeBootstrap=function(e){return i(e,function(e){r.push(e)}),s()},void(x(Ir.resumeDeferredBootstrap)&&Ir.resumeDeferredBootstrap()))}function se(){e.name="NG_ENABLE_DEBUG_INFO!"+e.name,e.location.reload()}function ce(e){var t=Ir.element(e).injector();if(!t)throw Dr("test","no injector found for element argument to getTestability");return t.get("$$testability")}function le(e,t){return t=t||"_",e.replace(zr,function(e,n){return(n?t:"")+e.toLowerCase()})}function ue(){var t;if(!Wr){var r=Br();Tr=e.jQuery,E(r)&&(Tr=null===r?n:e[r]),Tr&&Tr.fn.on?(xr=Tr,d(Tr.fn,{scope:po.scope,isolateScope:po.isolateScope,controller:po.controller,injector:po.injector,inheritedData:po.inheritedData}),t=Tr.cleanData,Tr.cleanData=function(e){var n;if(Pr)Pr=!1;else for(var r,o=0;null!=(r=e[o]);o++)n=Tr._data(r,"events"),n&&n.$destroy&&Tr(r).triggerHandler("$destroy");t(e)}):xr=ke,Ir.element=xr,Wr=!0}}function de(e,t,n){if(!e)throw Dr("areq","Argument '{0}' is {1}",t||"?",n||"required");return e}function me(e,t,n){return n&&jr(e)&&(e=e[e.length-1]),de(x(e),t,"not a function, got "+(e&&"object"==typeof e?e.constructor.name||"Object":typeof e)),e}function fe(e,t){if("hasOwnProperty"===e)throw Dr("badname","hasOwnProperty is not a valid {0} name",t)}function pe(e,t,n){if(!t)return e;for(var r,o=t.split("."),i=e,a=o.length,s=0;a>s;s++)r=o[s],e&&(e=(i=e)[r]);return!n&&x(e)?z(i,e):e}function he(e){var t=e[0],n=e[e.length-1],r=[t];do{if(t=t.nextSibling,!t)break;r.push(t)}while(t!==n);return xr(r)}function ge(){return Object.create(null)}function ve(e){function t(e,t,n){return e[t]||(e[t]=n())}var n=r("$injector"),o=r("ng"),i=t(e,"angular",Object);return i.$$minErr=i.$$minErr||r,t(i,"module",function(){var e={};return function(r,i,a){var s=function(e,t){if("hasOwnProperty"===e)throw o("badname","hasOwnProperty is not a valid {0} name",t)};return s(r,"module"),i&&e.hasOwnProperty(r)&&(e[r]=null),t(e,r,function(){function e(e,t,n,r){return r||(r=o),function(){return r[n||"push"]([e,t,arguments]),u}}function t(e,t){return function(n,i){return i&&x(i)&&(i.$$moduleName=r),o.push([e,t,arguments]),u}}if(!i)throw n("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",r);var o=[],s=[],c=[],l=e("$injector","invoke","push",s),u={_invokeQueue:o,_configBlocks:s,_runBlocks:c,requires:i,name:r,provider:t("$provide","provider"),factory:t("$provide","factory"),service:t("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),decorator:t("$provide","decorator"),animation:t("$animateProvider","register"),filter:t("$filterProvider","register"),controller:t("$controllerProvider","register"),directive:t("$compileProvider","directive"),config:l,run:function(e){return c.push(e),this}};return a&&l(a),u})}})}function $e(e){var t=[];return JSON.stringify(e,function(e,n){if(n=W(e,n),y(n)){if(t.indexOf(n)>=0)return"<<already seen>>";t.push(n)}return n})}function be(e){return"function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof e?"undefined":"string"!=typeof e?$e(e):e}function Ee(t){d(t,{bootstrap:ae,copy:F,extend:d,merge:m,equals:q,element:xr,forEach:i,injector:Je,noop:h,bind:z,toJson:K,fromJson:Y,identity:g,isUndefined:b,isDefined:E,isString:w,isFunction:x,isObject:y,isNumber:C,isElement:R,isArray:jr,version:Qr,isDate:A,lowercase:Er,uppercase:Mr,callbacks:{counter:0},getTestability:ce,$$minErr:r,$$csp:qr,reloadWithDebugInfo:se}),kr=ve(e);try{kr("ngLocale")}catch(n){kr("ngLocale",[]).provider("$locale",_t)}kr("ng",["ngLocale"],["$provide",function(e){e.provider({$$sanitizeUri:vn}),e.provider("$compile",ct).directive({a:ui,input:Ti,textarea:Ti,form:hi,script:ba,select:Ma,style:Ca,option:wa,ngBind:Ni,ngBindHtml:Hi,ngBindTemplate:_i,ngClass:Di,ngClassEven:Ri,ngClassOdd:Ii,ngCloak:Pi,ngController:ji,ngForm:gi,ngHide:fa,ngIf:Vi,ngInclude:qi,ngInit:Ui,ngNonBindable:oa,ngPluralize:ca,ngRepeat:la,ngShow:ma,ngStyle:pa,ngSwitch:ha,ngSwitchWhen:ga,ngSwitchDefault:va,ngOptions:sa,ngTransclude:$a,ngModel:ta,ngList:zi,ngChange:Oi,pattern:xa,ngPattern:xa,required:Aa,ngRequired:Aa,minlength:ka,ngMinlength:ka,maxlength:Ta,ngMaxlength:Ta,ngValue:Si,ngModelOptions:ra}).directive({ngInclude:Bi}).directive(di).directive(Li),e.provider({$anchorScroll:Qe,$animate:So,$$animateQueue:ko,$$AnimateRunner:To,$browser:it,$cacheFactory:at,$controller:ft,$document:pt,$exceptionHandler:ht,$filter:_n,$interpolate:St,$interval:Nt,$http:At,$httpParamSerializer:vt,$httpParamSerializerJQLike:$t,$httpBackend:Tt,$location:zt,$log:Wt,$parse:dn,$rootScope:gn,$q:mn,$$q:fn,$sce:yn,$sceDelegate:En,$sniffer:Mn,$templateCache:st,$templateRequest:wn,$$testability:Cn,$timeout:An,$window:kn,$$rAF:hn,$$jqLite:Ke,$$HashMap:$o,$$cookieReader:Nn})}])}function ye(){return++to}function Me(e){return e.replace(oo,function(e,t,n,r){return r?n.toUpperCase():n}).replace(io,"Moz$1")}function we(e){return!lo.test(e)}function Ce(e){var t=e.nodeType;return t===Kr||!t||t===Zr}function Ae(e){for(var t in eo[e.ng339])return!0;return!1}function xe(e,t){var n,r,o,a,s=t.createDocumentFragment(),c=[];if(we(e))c.push(t.createTextNode(e));else{for(n=n||s.appendChild(t.createElement("div")),r=(uo.exec(e)||["",""])[1].toLowerCase(),o=fo[r]||fo._default,n.innerHTML=o[1]+e.replace(mo,"<$1></$2>")+o[2],a=o[0];a--;)n=n.lastChild;c=B(c,n.childNodes),n=s.firstChild,n.textContent=""}return s.textContent="",s.innerHTML="",i(c,function(e){s.appendChild(e)}),s}function Te(e,n){n=n||t;var r;return(r=co.exec(e))?[n.createElement(r[1])]:(r=xe(e,n))?r.childNodes:[]}function ke(e){if(e instanceof ke)return e;var t;if(w(e)&&(e=Fr(e),t=!0),!(this instanceof ke)){if(t&&"<"!=e.charAt(0))throw so("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new ke(e)}t?je(this,Te(e)):je(this,e)}function Se(e){return e.cloneNode(!0)}function Ne(e,t){if(t||He(e),e.querySelectorAll)for(var n=e.querySelectorAll("*"),r=0,o=n.length;o>r;r++)He(n[r])}function _e(e,t,n,r){if(E(r))throw so("offargs","jqLite#off() does not support the `selector` argument");var o=Oe(e),a=o&&o.events,s=o&&o.handle;if(s)if(t)i(t.split(" "),function(t){if(E(n)){var r=a[t];if(L(r||[],n),r&&r.length>0)return}ro(e,t,s),delete a[t]});else for(t in a)"$destroy"!==t&&ro(e,t,s),delete a[t]}function He(e,t){var r=e.ng339,o=r&&eo[r];if(o){if(t)return void delete o.data[t];o.handle&&(o.events.$destroy&&o.handle({},"$destroy"),_e(e)),delete eo[r],e.ng339=n}}function Oe(e,t){var r=e.ng339,o=r&&eo[r];return t&&!o&&(e.ng339=r=ye(),o=eo[r]={events:{},data:{},handle:n}),o}function De(e,t,n){if(Ce(e)){var r=E(n),o=!r&&t&&!y(t),i=!t,a=Oe(e,!o),s=a&&a.data;if(r)s[t]=n;else{if(i)return s;if(o)return s&&s[t];d(s,t)}}}function Ie(e,t){return e.getAttribute?(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+t+" ")>-1:!1}function Re(e,t){t&&e.setAttribute&&i(t.split(" "),function(t){e.setAttribute("class",Fr((" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+Fr(t)+" "," ")))})}function Pe(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");i(t.split(" "),function(e){e=Fr(e),-1===n.indexOf(" "+e+" ")&&(n+=e+" ")}),e.setAttribute("class",Fr(n))}}function je(e,t){if(t)if(t.nodeType)e[e.length++]=t;else{var n=t.length;if("number"==typeof n&&t.window!==t){if(n)for(var r=0;n>r;r++)e[e.length++]=t[r]}else e[e.length++]=t}}function Le(e,t){return Fe(e,"$"+(t||"ngController")+"Controller")}function Fe(e,t,r){e.nodeType==Zr&&(e=e.documentElement);for(var o=jr(t)?t:[t];e;){for(var i=0,a=o.length;a>i;i++)if((r=xr.data(e,o[i]))!==n)return r;e=e.parentNode||e.nodeType===Jr&&e.host}}function Ve(e){for(Ne(e,!0);e.firstChild;)e.removeChild(e.firstChild)}function qe(e,t){t||Ne(e);var n=e.parentNode;n&&n.removeChild(e)}function Be(t,n){n=n||e,"complete"===n.document.readyState?n.setTimeout(t):xr(n).on("load",t)}function Ue(e,t){var n=ho[t.toLowerCase()];return n&&go[j(e)]&&n}function ze(e,t){var n=e.nodeName;return("INPUT"===n||"TEXTAREA"===n)&&vo[t]}function We(e,t){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var o=t[r||n.type],i=o?o.length:0;if(i){if(b(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return n.immediatePropagationStopped===!0},i>1&&(o=V(o));for(var s=0;i>s;s++)n.isImmediatePropagationStopped()||o[s].call(e,n)}};return n.elem=e,n}function Ke(){this.$get=function(){return d(ke,{hasClass:function(e,t){return e.attr&&(e=e[0]),Ie(e,t)},addClass:function(e,t){return e.attr&&(e=e[0]),Pe(e,t)},removeClass:function(e,t){return e.attr&&(e=e[0]),Re(e,t)}})}}function Ye(e,t){var n=e&&e.$$hashKey;if(n)return"function"==typeof n&&(n=e.$$hashKey()),n;var r=typeof e;return n="function"==r||"object"==r&&null!==e?e.$$hashKey=r+":"+(t||c)():r+":"+e}function Ge(e,t){if(t){var n=0;this.nextUid=function(){return++n}}i(e,this.put,this)}function Xe(e){var t=e.toString().replace(Mo,""),n=t.match(bo);return n?"function("+(n[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function Ze(e,t,n){var r,o,a,s;if("function"==typeof e){if(!(r=e.$inject)){if(r=[],e.length){if(t)throw w(n)&&n||(n=e.name||Xe(e)),wo("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);o=e.toString().replace(Mo,""),a=o.match(bo),i(a[1].split(Eo),function(e){e.replace(yo,function(e,t,n){r.push(n)})})}e.$inject=r}}else jr(e)?(s=e.length-1,me(e[s],"fn"),r=e.slice(0,s)):me(e,"fn",!0);return r}function Je(e,t){function r(e){return function(t,n){return y(t)?void i(t,s(e)):e(t,n)}}function o(e,t){if(fe(e,"service"),(x(t)||jr(t))&&(t=C.instantiate(t)),!t.$get)throw wo("pget","Provider '{0}' must define $get factory method.",e);return M[e+g]=t}function a(e,t){return function(){var n=T.invoke(t,this);if(b(n))throw wo("undef","Provider '{0}' must return a value from $get factory method.",e);return n}}function c(e,t,n){return o(e,{$get:n!==!1?a(e,t):t})}function l(e,t){return c(e,["$injector",function(e){return e.instantiate(t)}])}function u(e,t){return c(e,v(t),!1)}function d(e,t){fe(e,"constant"),M[e]=t,A[e]=t}function m(e,t){var n=C.get(e+g),r=n.$get;n.$get=function(){var e=T.invoke(r,n);return T.invoke(t,null,{$delegate:e})}}function f(e){var t,n=[];return i(e,function(e){function r(e){var t,n;for(t=0,n=e.length;n>t;t++){var r=e[t],o=C.get(r[0]);o[r[1]].apply(o,r[2])}}if(!E.get(e)){E.put(e,!0);try{w(e)?(t=kr(e),n=n.concat(f(t.requires)).concat(t._runBlocks),r(t._invokeQueue),r(t._configBlocks)):x(e)?n.push(C.invoke(e)):jr(e)?n.push(C.invoke(e)):me(e,"module")}catch(o){throw jr(e)&&(e=e[e.length-1]),o.message&&o.stack&&-1==o.stack.indexOf(o.message)&&(o=o.message+"\n"+o.stack),wo("modulerr","Failed to instantiate module {0} due to:\n{1}",e,o.stack||o.message||o)}}}),n}function p(e,n){function r(t,r){if(e.hasOwnProperty(t)){if(e[t]===h)throw wo("cdep","Circular dependency found: {0}",t+" <- "+$.join(" <- "));return e[t]}try{return $.unshift(t),e[t]=h,e[t]=n(t,r)}catch(o){throw e[t]===h&&delete e[t],o}finally{$.shift()}}function o(e,n,o,i){"string"==typeof o&&(i=o,o=null);var a,s,c,l=[],u=Je.$$annotate(e,t,i);for(s=0,a=u.length;a>s;s++){if(c=u[s],"string"!=typeof c)throw wo("itkn","Incorrect injection token! Expected service name as string, got {0}",c);l.push(o&&o.hasOwnProperty(c)?o[c]:r(c,i))}return jr(e)&&(e=e[a]),e.apply(n,l)}function i(e,t,n){var r=Object.create((jr(e)?e[e.length-1]:e).prototype||null),i=o(e,r,t,n);return y(i)||x(i)?i:r}return{invoke:o,instantiate:i,get:r,annotate:Je.$$annotate,has:function(t){return M.hasOwnProperty(t+g)||e.hasOwnProperty(t)}}}t=t===!0;var h={},g="Provider",$=[],E=new Ge([],!0),M={$provide:{provider:r(o),factory:r(c),service:r(l),value:r(u),constant:r(d),decorator:m}},C=M.$injector=p(M,function(e,t){throw Ir.isString(t)&&$.push(t),wo("unpr","Unknown provider: {0}",$.join(" <- "))}),A={},T=A.$injector=p(A,function(e,t){var r=C.get(e+g,t);return T.invoke(r.$get,r,n,e)});return i(f(e),function(e){e&&T.invoke(e)}),T}function Qe(){var e=!0;this.disableAutoScrolling=function(){e=!1},this.$get=["$window","$location","$rootScope",function(t,n,r){function o(e){var t=null;return Array.prototype.some.call(e,function(e){return"a"===j(e)?(t=e,!0):void 0}),t}function i(){var e=s.yOffset;if(x(e))e=e();else if(R(e)){var n=e[0],r=t.getComputedStyle(n);e="fixed"!==r.position?0:n.getBoundingClientRect().bottom}else C(e)||(e=0);return e}function a(e){if(e){e.scrollIntoView();var n=i();if(n){var r=e.getBoundingClientRect().top;t.scrollBy(0,r-n)}}else t.scrollTo(0,0)}function s(e){e=w(e)?e:n.hash();var t;e?(t=c.getElementById(e))?a(t):(t=o(c.getElementsByName(e)))?a(t):"top"===e&&a(null):a(null)}var c=t.document;return e&&r.$watch(function(){return n.hash()},function(e,t){(e!==t||""!==e)&&Be(function(){r.$evalAsync(s)})}),s}]}function et(e,t){return e||t?e?t?(jr(e)&&(e=e.join(" ")),jr(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function tt(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.nodeType===Ao)return n}}function nt(e){w(e)&&(e=e.split(" "));var t=ge();return i(e,function(e){e.length&&(t[e]=!0)}),t}function rt(e){return y(e)?e:{}}function ot(e,t,n,r){function o(e){try{e.apply(null,U(arguments,1))}finally{if($--,0===$)for(;E.length;)try{E.pop()()}catch(t){n.error(t)}}}function a(e){var t=e.indexOf("#");return-1===t?"":e.substr(t)}function s(){l(),u()}function c(){try{return f.state}catch(e){}}function l(){y=c(),y=b(y)?null:y,q(y,k)&&(y=k),k=y}function u(){(w!==d.url()||M!==y)&&(w=d.url(),M=y,i(x,function(e){e(d.url(),y)}))}var d=this,m=(t[0],e.location),f=e.history,p=e.setTimeout,g=e.clearTimeout,v={};d.isMock=!1;var $=0,E=[];d.$$completeOutstandingRequest=o,d.$$incOutstandingRequestCount=function(){$++},d.notifyWhenNoOutstandingRequests=function(e){0===$?e():E.push(e)};var y,M,w=m.href,C=t.find("base"),A=null;l(),M=y,d.url=function(t,n,o){if(b(o)&&(o=null),m!==e.location&&(m=e.location),f!==e.history&&(f=e.history),t){var i=M===o;if(w===t&&(!r.history||i))return d;var s=w&&Rt(w)===Rt(t);return w=t,M=o,!r.history||s&&i?((!s||A)&&(A=t),n?m.replace(t):s?m.hash=a(t):m.href=t):(f[n?"replaceState":"pushState"](o,"",t),l(),M=y),d}return A||m.href.replace(/%27/g,"'")},d.state=function(){return y};var x=[],T=!1,k=null;d.onUrlChange=function(t){return T||(r.history&&xr(e).on("popstate",s),xr(e).on("hashchange",s),T=!0),x.push(t),t},d.$$applicationDestroyed=function(){xr(e).off("hashchange popstate",s)},d.$$checkUrlChange=u,d.baseHref=function(){var e=C.attr("href");return e?e.replace(/^(https?\:)?\/\/[^\/]*/,""):""},d.defer=function(e,t){var n;return $++,n=p(function(){delete v[n],o(e)},t||0),v[n]=!0,n},d.defer.cancel=function(e){return v[e]?(delete v[e],g(e),o(h),!0):!1}}function it(){this.$get=["$window","$log","$sniffer","$document",function(e,t,n,r){return new ot(e,r,t,n)}]}function at(){this.$get=function(){function e(e,n){function o(e){e!=m&&(f?f==e&&(f=e.n):f=e,i(e.n,e.p),i(e,m),m=e,m.n=null)}function i(e,t){e!=t&&(e&&(e.p=t),t&&(t.n=e))}if(e in t)throw r("$cacheFactory")("iid","CacheId '{0}' is already taken!",e);var a=0,s=d({},n,{id:e}),c={},l=n&&n.capacity||Number.MAX_VALUE,u={},m=null,f=null;return t[e]={put:function(e,t){if(!b(t)){if(l<Number.MAX_VALUE){var n=u[e]||(u[e]={key:e});o(n)}return e in c||a++,c[e]=t,a>l&&this.remove(f.key),t}},get:function(e){if(l<Number.MAX_VALUE){var t=u[e];if(!t)return;o(t)}return c[e]},remove:function(e){if(l<Number.MAX_VALUE){var t=u[e];if(!t)return;t==m&&(m=t.p),t==f&&(f=t.n),i(t.n,t.p),delete u[e]}delete c[e],a--},removeAll:function(){c={},a=0,u={},m=f=null},destroy:function(){c=null,s=null,u=null,delete t[e]},info:function(){return d({},s,{size:a})}}}var t={};return e.info=function(){var e={};return i(t,function(t,n){e[n]=t.info()}),e},e.get=function(e){return t[e]},e}}function st(){this.$get=["$cacheFactory",function(e){return e("templates")}]}function ct(e,r){function o(e,t,n){var r=/^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/,o={};return i(e,function(e,i){var a=e.match(r);if(!a)throw No("iscp","Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}",t,i,e,n?"controller bindings definition":"isolate scope definition");o[i]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||i}}),o}function a(e,t){var n={isolateScope:null,bindToController:null};if(y(e.scope)&&(e.bindToController===!0?(n.bindToController=o(e.scope,t,!0),n.isolateScope={}):n.isolateScope=o(e.scope,t,!1)),y(e.bindToController)&&(n.bindToController=o(e.bindToController,t,!0)),y(n.bindToController)){var r=e.controller,i=e.controllerAs;if(!r)throw No("noctrl","Cannot bind to controller without directive '{0}'s controller.",t);if(!mt(r,i))throw No("noident","Cannot bind to controller without identifier for directive '{0}'.",t)}return n}function c(e){var t=e.charAt(0);if(!t||t!==Er(t))throw No("baddir","Directive name '{0}' is invalid. The first character must be a lowercase letter",e);if(e!==e.trim())throw No("baddir","Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces",e)}var l={},u="Directive",m=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,f=/(([\w\-]+)(?:\:([^;]+))?;?)/,$=P("ngSrc,ngSrcset,src,srcset"),b=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,M=/^(on[a-z]+|formaction)$/;this.directive=function A(t,n){return fe(t,"directive"),w(t)?(c(t),de(n,"directiveFactory"),l.hasOwnProperty(t)||(l[t]=[],e.factory(t+u,["$injector","$exceptionHandler",function(e,n){var r=[];return i(l[t],function(o,i){try{var s=e.invoke(o);x(s)?s={compile:v(s)}:!s.compile&&s.link&&(s.compile=v(s.link)),s.priority=s.priority||0,s.index=i,s.name=s.name||t,s.require=s.require||s.controller&&s.name,s.restrict=s.restrict||"EA";var c=s.$$bindings=a(s,s.name);y(c.isolateScope)&&(s.$$isolateBindings=c.isolateScope),s.$$moduleName=o.$$moduleName,r.push(s)}catch(l){n(l)}}),r}])),l[t].push(n)):i(t,s(A)),this},this.aHrefSanitizationWhitelist=function(e){return E(e)?(r.aHrefSanitizationWhitelist(e),this):r.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(e){return E(e)?(r.imgSrcSanitizationWhitelist(e),this):r.imgSrcSanitizationWhitelist()};var C=!0;this.debugInfoEnabled=function(e){return E(e)?(C=e,this):C},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$document","$sce","$animate","$$sanitizeUri",function(e,r,o,a,s,c,v,E,A,T,k){function N(e,t){try{e.addClass(t)}catch(n){}}function _(e,t,n,r,o){e instanceof xr||(e=xr(e)),i(e,function(t,n){t.nodeType==Gr&&t.nodeValue.match(/\S+/)&&(e[n]=xr(t).wrap("<span></span>").parent()[0])});var a=O(e,t,e,n,r,o);_.$$addScopeClass(e);var s=null;return function(t,n,r){de(t,"scope"),r=r||{};var o=r.parentBoundTranscludeFn,i=r.transcludeControllers,c=r.futureParentElement;o&&o.$$boundTransclude&&(o=o.$$boundTransclude),s||(s=H(c));var l;if(l="html"!==s?xr(Z(s,xr("<div>").append(e).html())):n?po.clone.call(e):e,i)for(var u in i)l.data("$"+u+"Controller",i[u].instance);return _.$$addScopeInfo(l,t),n&&n(l,t),a&&a(t,l,l,o),l}}function H(e){var t=e&&e[0];return t&&"foreignobject"!==j(t)&&t.toString().match(/SVG/)?"svg":"html"}function O(e,t,r,o,i,a){function s(e,r,o,i){var a,s,c,l,u,d,m,f,g;if(p){var v=r.length;for(g=new Array(v),u=0;u<h.length;u+=3)m=h[u],g[m]=r[m]}else g=r;for(u=0,d=h.length;d>u;)if(c=g[h[u++]],a=h[u++],s=h[u++],a){if(a.scope){l=e.$new(),_.$$addScopeInfo(xr(c),l);var $=a.$$destroyBindings;$&&(a.$$destroyBindings=null,l.$on("$destroyed",$))}else l=e;f=a.transcludeOnThisElement?D(e,a.transclude,i):!a.templateOnThisElement&&i?i:!i&&t?D(e,t):null,a(s,l,c,o,f,a)}else s&&s(e,c.childNodes,n,i)}for(var c,l,u,d,m,f,p,h=[],g=0;g<e.length;g++)c=new ie,l=I(e[g],[],c,0===g?o:n,i),u=l.length?F(l,e[g],c,t,r,null,[],[],a):null,u&&u.scope&&_.$$addScopeClass(c.$$element),m=u&&u.terminal||!(d=e[g].childNodes)||!d.length?null:O(d,u?(u.transcludeOnThisElement||!u.templateOnThisElement)&&u.transclude:t),(u||m)&&(h.push(g,u,m),f=!0,p=p||u),a=null;return f?s:null}function D(e,t,n){var r=function(r,o,i,a,s){return r||(r=e.$new(!1,s),r.$$transcluded=!0),t(r,o,{parentBoundTranscludeFn:n,transcludeControllers:i,futureParentElement:a})};return r}function I(e,t,n,r,o){var i,a,s=e.nodeType,c=n.$attr;switch(s){case Kr:B(t,lt(j(e)),"E",r,o);for(var l,u,d,p,h,g,v=e.attributes,$=0,b=v&&v.length;b>$;$++){var E=!1,M=!1;l=v[$],u=l.name,h=Fr(l.value),p=lt(u),(g=ue.test(p))&&(u=u.replace(_o,"").substr(8).replace(/_(.)/g,function(e,t){return t.toUpperCase()}));var C=p.replace(/(Start|End)$/,"");z(C)&&p===C+"Start"&&(E=u,M=u.substr(0,u.length-5)+"end",u=u.substr(0,u.length-6)),d=lt(u.toLowerCase()),c[d]=u,(g||!n.hasOwnProperty(d))&&(n[d]=h,Ue(e,d)&&(n[d]=!0)),ee(e,t,h,d,g),B(t,d,"A",r,o,E,M)}if(a=e.className,y(a)&&(a=a.animVal),w(a)&&""!==a)for(;i=f.exec(a);)d=lt(i[2]),B(t,d,"C",r,o)&&(n[d]=Fr(i[3])),a=a.substr(i.index+i[0].length);break;case Gr:if(11===Ar)for(;e.parentNode&&e.nextSibling&&e.nextSibling.nodeType===Gr;)e.nodeValue=e.nodeValue+e.nextSibling.nodeValue,e.parentNode.removeChild(e.nextSibling);X(t,e.nodeValue);break;case Xr:try{i=m.exec(e.nodeValue),i&&(d=lt(i[1]),B(t,d,"M",r,o)&&(n[d]=Fr(i[2])))}catch(A){}}return t.sort(Y),t}function R(e,t,n){var r=[],o=0;if(t&&e.hasAttribute&&e.hasAttribute(t)){do{if(!e)throw No("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",t,n);e.nodeType==Kr&&(e.hasAttribute(t)&&o++,e.hasAttribute(n)&&o--),r.push(e),e=e.nextSibling}while(o>0)}else r.push(e);return xr(r)}function P(e,t,n){return function(r,o,i,a,s){return o=R(o[0],t,n),e(r,o,i,a,s)}}function F(e,r,i,a,s,l,u,d,m){function f(e,t,n,r){e&&(n&&(e=P(e,n,r)),e.require=v.require,e.directiveName=$,(N===v||v.$$isolateScope)&&(e=ne(e,{isolateScope:!0})),u.push(e)),t&&(n&&(t=P(t,n,r)),t.require=v.require,t.directiveName=$,(N===v||v.$$isolateScope)&&(t=ne(t,{isolateScope:!0})),d.push(t))}function p(e,t,n,r){var o;if(w(t)){var i=t.match(b),a=t.substring(i[0].length),s=i[1]||i[3],c="?"===i[2];if("^^"===s?n=n.parent():(o=r&&r[a],o=o&&o.instance),!o){var l="$"+a+"Controller";o=s?n.inheritedData(l):n.data(l)}if(!o&&!c)throw No("ctreq","Controller '{0}', required by directive '{1}', can't be found!",a,e)}else if(jr(t)){o=[];for(var u=0,d=t.length;d>u;u++)o[u]=p(e,t[u],n,r)}return o||null}function h(e,t,n,r,o,i){var a=ge();for(var s in r){var l=r[s],u={$scope:l===N||l.$$isolateScope?o:i,$element:e,$attrs:t,$transclude:n},d=l.controller;"@"==d&&(d=t[l.name]);var m=c(d,u,!0,l.controllerAs);a[l.name]=m,L||e.data("$"+l.name+"Controller",m.instance)}return a}function g(e,t,o,a,s,c){function l(e,t,r){var o;return S(e)||(r=t,t=e,e=n),L&&(o=b),r||(r=L?y.parent():y),s(e,t,o,r,O)}var m,f,g,v,$,b,E,y,M;if(r===o?(M=i,y=i.$$element):(y=xr(o),M=new ie(y,i)),N&&($=t.$new(!0)),s&&(E=l,E.$$boundTransclude=s),k&&(b=h(y,M,E,k,$,t)),N&&(_.$$addScopeInfo(y,$,!0,!(H&&(H===N||H===N.$$originalDirective))),_.$$addScopeClass(y,!0),$.$$isolateBindings=N.$$isolateBindings,oe(t,M,$,$.$$isolateBindings,N,$)),b){var w,C,A=N||T;A&&b[A.name]&&(w=A.$$bindings.bindToController,v=b[A.name],v&&v.identifier&&w&&(C=v,c.$$destroyBindings=oe(t,M,v.instance,w,A)));for(m in b){v=b[m];var x=v();x!==v.instance&&(v.instance=x,y.data("$"+m+"Controller",x),v===C&&(c.$$destroyBindings(),c.$$destroyBindings=oe(t,M,x,w,A)))}}for(m=0,f=u.length;f>m;m++)g=u[m],re(g,g.isolateScope?$:t,y,M,g.require&&p(g.directiveName,g.require,y,b),E);var O=t;for(N&&(N.template||null===N.templateUrl)&&(O=$),e&&e(O,o.childNodes,n,s),m=d.length-1;m>=0;m--)g=d[m],re(g,g.isolateScope?$:t,y,M,g.require&&p(g.directiveName,g.require,y,b),E)}m=m||{};for(var v,$,E,M,C,A=-Number.MAX_VALUE,T=m.newScopeDirective,k=m.controllerDirectives,N=m.newIsolateScopeDirective,H=m.templateDirective,O=m.nonTlbTranscludeDirective,D=!1,j=!1,L=m.hasElementTranscludeDirective,F=i.$$element=xr(r),q=l,B=a,z=0,Y=e.length;Y>z;z++){v=e[z];var X=v.$$start,Q=v.$$end;if(X&&(F=R(r,X,Q)),E=n,A>v.priority)break;if((C=v.scope)&&(v.templateUrl||(y(C)?(G("new/isolated scope",N||T,v,F),
N=v):G("new/isolated scope",N,v,F)),T=T||v),$=v.name,!v.templateUrl&&v.controller&&(C=v.controller,k=k||ge(),G("'"+$+"' controller",k[$],v,F),k[$]=v),(C=v.transclude)&&(D=!0,v.$$tlb||(G("transclusion",O,v,F),O=v),"element"==C?(L=!0,A=v.priority,E=F,F=i.$$element=xr(t.createComment(" "+$+": "+i[$]+" ")),r=F[0],te(s,U(E),r),B=_(E,a,A,q&&q.name,{nonTlbTranscludeDirective:O})):(E=xr(Se(r)).contents(),F.empty(),B=_(E,a))),v.template)if(j=!0,G("template",H,v,F),H=v,C=x(v.template)?v.template(F,i):v.template,C=ce(C),v.replace){if(q=v,E=we(C)?[]:dt(Z(v.templateNamespace,Fr(C))),r=E[0],1!=E.length||r.nodeType!==Kr)throw No("tplrt","Template for directive '{0}' must have exactly one root element. {1}",$,"");te(s,F,r);var ee={$attr:{}},ae=I(r,[],ee),se=e.splice(z+1,e.length-(z+1));N&&V(ae),e=e.concat(ae).concat(se),W(i,ee),Y=e.length}else F.html(C);if(v.templateUrl)j=!0,G("template",H,v,F),H=v,v.replace&&(q=v),g=K(e.splice(z,e.length-z),F,i,s,D&&B,u,d,{controllerDirectives:k,newScopeDirective:T!==v&&T,newIsolateScopeDirective:N,templateDirective:H,nonTlbTranscludeDirective:O}),Y=e.length;else if(v.compile)try{M=v.compile(F,i,B),x(M)?f(null,M,X,Q):M&&f(M.pre,M.post,X,Q)}catch(le){o(le,J(F))}v.terminal&&(g.terminal=!0,A=Math.max(A,v.priority))}return g.scope=T&&T.scope===!0,g.transcludeOnThisElement=D,g.templateOnThisElement=j,g.transclude=B,m.hasElementTranscludeDirective=L,g}function V(e){for(var t=0,n=e.length;n>t;t++)e[t]=p(e[t],{$$isolateScope:!0})}function B(t,r,i,a,s,c,d){if(r===s)return null;var m=null;if(l.hasOwnProperty(r))for(var f,h=e.get(r+u),g=0,v=h.length;v>g;g++)try{f=h[g],(a===n||a>f.priority)&&-1!=f.restrict.indexOf(i)&&(c&&(f=p(f,{$$start:c,$$end:d})),t.push(f),m=f)}catch($){o($)}return m}function z(t){if(l.hasOwnProperty(t))for(var n,r=e.get(t+u),o=0,i=r.length;i>o;o++)if(n=r[o],n.multiElement)return!0;return!1}function W(e,t){var n=t.$attr,r=e.$attr,o=e.$$element;i(e,function(r,o){"$"!=o.charAt(0)&&(t[o]&&t[o]!==r&&(r+=("style"===o?";":" ")+t[o]),e.$set(o,r,!0,n[o]))}),i(t,function(t,i){"class"==i?(N(o,t),e["class"]=(e["class"]?e["class"]+" ":"")+t):"style"==i?(o.attr("style",o.attr("style")+";"+t),e.style=(e.style?e.style+";":"")+t):"$"==i.charAt(0)||e.hasOwnProperty(i)||(e[i]=t,r[i]=n[i])})}function K(e,t,n,r,o,s,c,l){var u,d,m=[],f=t[0],h=e.shift(),g=p(h,{templateUrl:null,transclude:null,replace:null,$$originalDirective:h}),v=x(h.templateUrl)?h.templateUrl(t,n):h.templateUrl,$=h.templateNamespace;return t.empty(),a(v).then(function(a){var p,b,E,M;if(a=ce(a),h.replace){if(E=we(a)?[]:dt(Z($,Fr(a))),p=E[0],1!=E.length||p.nodeType!==Kr)throw No("tplrt","Template for directive '{0}' must have exactly one root element. {1}",h.name,v);b={$attr:{}},te(r,t,p);var w=I(p,[],b);y(h.scope)&&V(w),e=w.concat(e),W(n,b)}else p=f,t.html(a);for(e.unshift(g),u=F(e,p,n,o,t,h,s,c,l),i(r,function(e,n){e==p&&(r[n]=t[0])}),d=O(t[0].childNodes,o);m.length;){var C=m.shift(),A=m.shift(),x=m.shift(),T=m.shift(),k=t[0];if(!C.$$destroyed){if(A!==f){var S=A.className;l.hasElementTranscludeDirective&&h.replace||(k=Se(p)),te(x,xr(A),k),N(xr(k),S)}M=u.transcludeOnThisElement?D(C,u.transclude,T):T,u(d,C,k,r,M,u)}}m=null}),function(e,t,n,r,o){var i=o;t.$$destroyed||(m?m.push(t,n,r,i):(u.transcludeOnThisElement&&(i=D(t,u.transclude,o)),u(d,t,n,r,i,u)))}}function Y(e,t){var n=t.priority-e.priority;return 0!==n?n:e.name!==t.name?e.name<t.name?-1:1:e.index-t.index}function G(e,t,n,r){function o(e){return e?" (module: "+e+")":""}if(t)throw No("multidir","Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}",t.name,o(t.$$moduleName),n.name,o(n.$$moduleName),e,J(r))}function X(e,t){var n=r(t,!0);n&&e.push({priority:0,compile:function(e){var t=e.parent(),r=!!t.length;return r&&_.$$addBindingClass(t),function(e,t){var o=t.parent();r||_.$$addBindingClass(o),_.$$addBindingInfo(o,n.expressions),e.$watch(n,function(e){t[0].nodeValue=e})}}})}function Z(e,n){switch(e=Er(e||"html")){case"svg":case"math":var r=t.createElement("div");return r.innerHTML="<"+e+">"+n+"</"+e+">",r.childNodes[0].childNodes;default:return n}}function Q(e,t){if("srcdoc"==t)return A.HTML;var n=j(e);return"xlinkHref"==t||"form"==n&&"action"==t||"img"!=n&&("src"==t||"ngSrc"==t)?A.RESOURCE_URL:void 0}function ee(e,t,n,o,i){var a=Q(e,o);i=$[o]||i;var s=r(n,!0,a,i);if(s){if("multiple"===o&&"select"===j(e))throw No("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",J(e));t.push({priority:100,compile:function(){return{pre:function(e,t,c){var l=c.$$observers||(c.$$observers={});if(M.test(o))throw No("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");var u=c[o];u!==n&&(s=u&&r(u,!0,a,i),n=u),s&&(c[o]=s(e),(l[o]||(l[o]=[])).$$inter=!0,(c.$$observers&&c.$$observers[o].$$scope||e).$watch(s,function(e,t){"class"===o&&e!=t?c.$updateClass(e,t):c.$set(o,e)}))}}}})}}function te(e,n,r){var o,i,a=n[0],s=n.length,c=a.parentNode;if(e)for(o=0,i=e.length;i>o;o++)if(e[o]==a){e[o++]=r;for(var l=o,u=l+s-1,d=e.length;d>l;l++,u++)d>u?e[l]=e[u]:delete e[l];e.length-=s-1,e.context===a&&(e.context=r);break}c&&c.replaceChild(r,a);var m=t.createDocumentFragment();m.appendChild(a),xr.hasData(a)&&(xr(r).data(xr(a).data()),Tr?(Pr=!0,Tr.cleanData([a])):delete xr.cache[a[xr.expando]]);for(var f=1,p=n.length;p>f;f++){var h=n[f];xr(h).remove(),m.appendChild(h),delete n[f]}n[0]=r,n.length=1}function ne(e,t){return d(function(){return e.apply(null,arguments)},e,t)}function re(e,t,n,r,i,a){try{e(t,n,r,i,a)}catch(s){o(s,J(n))}}function oe(e,t,o,a,c,l){var u;i(a,function(i,a){var l,d,m,f,p=i.attrName,g=i.optional,v=i.mode;switch(yr.call(t,p)||(t[p]=n),v){case"@":t[p]||g||(o[a]=n),t.$observe(p,function(e){o[a]=e}),t.$$observers[p].$$scope=e,t[p]&&(o[a]=r(t[p])(e));break;case"=":if(g&&!t[p])return;d=s(t[p]),f=d.literal?q:function(e,t){return e===t||e!==e&&t!==t},m=d.assign||function(){throw l=o[a]=d(e),No("nonassign","Expression '{0}' used with directive '{1}' is non-assignable!",t[p],c.name)},l=o[a]=d(e);var $=function(t){return f(t,o[a])||(f(t,l)?m(e,t=o[a]):o[a]=t),l=t};$.$stateful=!0;var b;b=i.collection?e.$watchCollection(t[p],$):e.$watch(s(t[p],$),null,d.literal),u=u||[],u.push(b);break;case"&":if(d=s(t[p]),d===h&&g)break;o[a]=function(t){return d(e,t)}}});var d=u?function(){for(var e=0,t=u.length;t>e;++e)u[e]()}:h;return l&&d!==h?(l.$on("$destroy",d),h):d}var ie=function(e,t){if(t){var n,r,o,i=Object.keys(t);for(n=0,r=i.length;r>n;n++)o=i[n],this[o]=t[o]}else this.$attr={};this.$$element=e};ie.prototype={$normalize:lt,$addClass:function(e){e&&e.length>0&&T.addClass(this.$$element,e)},$removeClass:function(e){e&&e.length>0&&T.removeClass(this.$$element,e)},$updateClass:function(e,t){var n=ut(e,t);n&&n.length&&T.addClass(this.$$element,n);var r=ut(t,e);r&&r.length&&T.removeClass(this.$$element,r)},$set:function(e,t,r,a){var s,c=this.$$element[0],l=Ue(c,e),u=ze(c,e),d=e;if(l?(this.$$element.prop(e,t),a=l):u&&(this[u]=t,d=u),this[e]=t,a?this.$attr[e]=a:(a=this.$attr[e],a||(this.$attr[e]=a=le(e,"-"))),s=j(this.$$element),"a"===s&&"href"===e||"img"===s&&"src"===e)this[e]=t=k(t,"src"===e);else if("img"===s&&"srcset"===e){for(var m="",f=Fr(t),p=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,h=/\s/.test(f)?p:/(,)/,g=f.split(h),v=Math.floor(g.length/2),$=0;v>$;$++){var b=2*$;m+=k(Fr(g[b]),!0),m+=" "+Fr(g[b+1])}var E=Fr(g[2*$]).split(/\s/);m+=k(Fr(E[0]),!0),2===E.length&&(m+=" "+Fr(E[1])),this[e]=t=m}r!==!1&&(null===t||t===n?this.$$element.removeAttr(a):this.$$element.attr(a,t));var y=this.$$observers;y&&i(y[d],function(e){try{e(t)}catch(n){o(n)}})},$observe:function(e,t){var n=this,r=n.$$observers||(n.$$observers=ge()),o=r[e]||(r[e]=[]);return o.push(t),v.$evalAsync(function(){!o.$$inter&&n.hasOwnProperty(e)&&t(n[e])}),function(){L(o,t)}}};var ae=r.startSymbol(),se=r.endSymbol(),ce="{{"==ae||"}}"==se?g:function(e){return e.replace(/\{\{/g,ae).replace(/}}/g,se)},ue=/^ngAttr[A-Z]/;return _.$$addBindingInfo=C?function(e,t){var n=e.data("$binding")||[];jr(t)?n=n.concat(t):n.push(t),e.data("$binding",n)}:h,_.$$addBindingClass=C?function(e){N(e,"ng-binding")}:h,_.$$addScopeInfo=C?function(e,t,n,r){var o=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";e.data(o,t)}:h,_.$$addScopeClass=C?function(e,t){N(e,t?"ng-isolate-scope":"ng-scope")}:h,_}]}function lt(e){return Me(e.replace(_o,""))}function ut(e,t){var n="",r=e.split(/\s+/),o=t.split(/\s+/);e:for(var i=0;i<r.length;i++){for(var a=r[i],s=0;s<o.length;s++)if(a==o[s])continue e;n+=(n.length>0?" ":"")+a}return n}function dt(e){e=xr(e);var t=e.length;if(1>=t)return e;for(;t--;){var n=e[t];n.nodeType===Xr&&Nr.call(e,t,1)}return e}function mt(e,t){if(t&&w(t))return t;if(w(e)){var n=Oo.exec(e);if(n)return n[3]}}function ft(){var e={},t=!1;this.register=function(t,n){fe(t,"controller"),y(t)?d(e,t):e[t]=n},this.allowGlobals=function(){t=!0},this.$get=["$injector","$window",function(o,i){function a(e,t,n,o){if(!e||!y(e.$scope))throw r("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",o,t);e.$scope[t]=n}return function(r,s,c,l){var u,m,f,p;if(c=c===!0,l&&w(l)&&(p=l),w(r)){if(m=r.match(Oo),!m)throw Ho("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",r);f=m[1],p=p||m[3],r=e.hasOwnProperty(f)?e[f]:pe(s.$scope,f,!0)||(t?pe(i,f,!0):n),me(r,f,!0)}if(c){var h=(jr(r)?r[r.length-1]:r).prototype;u=Object.create(h||null),p&&a(s,p,u,f||r.name);var g;return g=d(function(){var e=o.invoke(r,u,s,f);return e!==u&&(y(e)||x(e))&&(u=e,p&&a(s,p,u,f||r.name)),u},{instance:u,identifier:p})}return u=o.instantiate(r,s,f),p&&a(s,p,u,f||r.name),u}}]}function pt(){this.$get=["$window",function(e){return xr(e.document)}]}function ht(){this.$get=["$log",function(e){return function(t,n){e.error.apply(e,arguments)}}]}function gt(e){return y(e)?A(e)?e.toISOString():K(e):e}function vt(){this.$get=function(){return function(e){if(!e)return"";var t=[];return a(e,function(e,n){null===e||b(e)||(jr(e)?i(e,function(e,r){t.push(re(n)+"="+re(gt(e)))}):t.push(re(n)+"="+re(gt(e))))}),t.join("&")}}}function $t(){this.$get=function(){return function(e){function t(e,r,o){null===e||b(e)||(jr(e)?i(e,function(e){t(e,r+"[]")}):y(e)&&!A(e)?a(e,function(e,n){t(e,r+(o?"":"[")+n+(o?"":"]"))}):n.push(re(r)+"="+re(gt(e))))}if(!e)return"";var n=[];return t(e,"",!0),n.join("&")}}}function bt(e,t){if(w(e)){var n=e.replace(jo,"").trim();if(n){var r=t("Content-Type");(r&&0===r.indexOf(Do)||Et(n))&&(e=Y(n))}}return e}function Et(e){var t=e.match(Ro);return t&&Po[t[0]].test(e)}function yt(e){function t(e,t){e&&(r[e]=r[e]?r[e]+", "+t:t)}var n,r=ge();return w(e)?i(e.split("\n"),function(e){n=e.indexOf(":"),t(Er(Fr(e.substr(0,n))),Fr(e.substr(n+1)))}):y(e)&&i(e,function(e,n){t(Er(n),Fr(e))}),r}function Mt(e){var t;return function(n){if(t||(t=yt(e)),n){var r=t[Er(n)];return void 0===r&&(r=null),r}return t}}function wt(e,t,n,r){return x(r)?r(e,t,n):(i(r,function(r){e=r(e,t,n)}),e)}function Ct(e){return e>=200&&300>e}function At(){var e=this.defaults={transformResponse:[bt],transformRequest:[function(e){return!y(e)||N(e)||H(e)||_(e)?e:K(e)}],headers:{common:{Accept:"application/json, text/plain, */*"},post:V(Io),put:V(Io),patch:V(Io)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer"},t=!1;this.useApplyAsync=function(e){return E(e)?(t=!!e,this):t};var o=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(a,s,c,l,u,m){function f(t){function o(e){var t=d({},e);return t.data=e.data?wt(e.data,e.headers,e.status,c.transformResponse):e.data,Ct(e.status)?t:u.reject(t)}function a(e,t){var n,r={};return i(e,function(e,o){x(e)?(n=e(t),null!=n&&(r[o]=n)):r[o]=e}),r}function s(t){var n,r,o,i=e.headers,s=d({},t.headers);i=d({},i.common,i[Er(t.method)]);e:for(n in i){r=Er(n);for(o in s)if(Er(o)===r)continue e;s[n]=i[n]}return a(s,V(t))}if(!Ir.isObject(t))throw r("$http")("badreq","Http request configuration must be an object.  Received: {0}",t);var c=d({method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse,paramSerializer:e.paramSerializer},t);c.headers=s(t),c.method=Mr(c.method),c.paramSerializer=w(c.paramSerializer)?m.get(c.paramSerializer):c.paramSerializer;var l=function(t){var r=t.headers,a=wt(t.data,Mt(r),n,t.transformRequest);return b(a)&&i(r,function(e,t){"content-type"===Er(t)&&delete r[t]}),b(t.withCredentials)&&!b(e.withCredentials)&&(t.withCredentials=e.withCredentials),g(t,a).then(o,o)},f=[l,n],p=u.when(c);for(i(M,function(e){(e.request||e.requestError)&&f.unshift(e.request,e.requestError),(e.response||e.responseError)&&f.push(e.response,e.responseError)});f.length;){var h=f.shift(),v=f.shift();p=p.then(h,v)}return p.success=function(e){return me(e,"fn"),p.then(function(t){e(t.data,t.status,t.headers,c)}),p},p.error=function(e){return me(e,"fn"),p.then(null,function(t){e(t.data,t.status,t.headers,c)}),p},p}function p(e){i(arguments,function(e){f[e]=function(t,n){return f(d({},n||{},{method:e,url:t}))}})}function h(e){i(arguments,function(e){f[e]=function(t,n,r){return f(d({},r||{},{method:e,url:t,data:n}))}})}function g(r,o){function i(e,n,r,o){function i(){c(n,e,r,o)}p&&(Ct(e)?p.put(C,[e,n,yt(r),o]):p.remove(C)),t?l.$applyAsync(i):(i(),l.$$phase||l.$apply())}function c(e,t,n,o){t=Math.max(t,0),(Ct(t)?g.resolve:g.reject)({data:e,status:t,headers:Mt(n),config:r,statusText:o})}function d(e){c(e.data,e.status,V(e.headers()),e.statusText)}function m(){var e=f.pendingRequests.indexOf(r);-1!==e&&f.pendingRequests.splice(e,1)}var p,h,g=u.defer(),M=g.promise,w=r.headers,C=v(r.url,r.paramSerializer(r.params));if(f.pendingRequests.push(r),M.then(m,m),!r.cache&&!e.cache||r.cache===!1||"GET"!==r.method&&"JSONP"!==r.method||(p=y(r.cache)?r.cache:y(e.cache)?e.cache:$),p&&(h=p.get(C),E(h)?D(h)?h.then(d,d):jr(h)?c(h[1],h[0],V(h[2]),h[3]):c(h,200,{},"OK"):p.put(C,M)),b(h)){var A=Tn(r.url)?s()[r.xsrfCookieName||e.xsrfCookieName]:n;A&&(w[r.xsrfHeaderName||e.xsrfHeaderName]=A),a(r.method,C,o,i,w,r.timeout,r.withCredentials,r.responseType)}return M}function v(e,t){return t.length>0&&(e+=(-1==e.indexOf("?")?"?":"&")+t),e}var $=c("$http");e.paramSerializer=w(e.paramSerializer)?m.get(e.paramSerializer):e.paramSerializer;var M=[];return i(o,function(e){M.unshift(w(e)?m.get(e):m.invoke(e))}),f.pendingRequests=[],p("get","delete","head","jsonp"),h("post","put","patch"),f.defaults=e,f}]}function xt(){return new e.XMLHttpRequest}function Tt(){this.$get=["$browser","$window","$document",function(e,t,n){return kt(e,xt,e.defer,t.angular.callbacks,n[0])}]}function kt(e,t,r,o,a){function s(e,t,n){var r=a.createElement("script"),i=null;return r.type="text/javascript",r.src=e,r.async=!0,i=function(e){ro(r,"load",i),ro(r,"error",i),a.body.removeChild(r),r=null;var s=-1,c="unknown";e&&("load"!==e.type||o[t].called||(e={type:"error"}),c=e.type,s="error"===e.type?404:200),n&&n(s,c)},no(r,"load",i),no(r,"error",i),a.body.appendChild(r),i}return function(a,c,l,u,d,m,f,p){function g(){b&&b(),y&&y.abort()}function v(t,o,i,a,s){C!==n&&r.cancel(C),b=y=null,t(o,i,a,s),e.$$completeOutstandingRequest(h)}if(e.$$incOutstandingRequestCount(),c=c||e.url(),"jsonp"==Er(a)){var $="_"+(o.counter++).toString(36);o[$]=function(e){o[$].data=e,o[$].called=!0};var b=s(c.replace("JSON_CALLBACK","angular.callbacks."+$),$,function(e,t){v(u,e,o[$].data,"",t),o[$]=h})}else{var y=t();y.open(a,c,!0),i(d,function(e,t){E(e)&&y.setRequestHeader(t,e)}),y.onload=function(){var e=y.statusText||"",t="response"in y?y.response:y.responseText,n=1223===y.status?204:y.status;0===n&&(n=t?200:"file"==xn(c).protocol?404:0),v(u,n,t,y.getAllResponseHeaders(),e)};var M=function(){v(u,-1,null,null,"")};if(y.onerror=M,y.onabort=M,f&&(y.withCredentials=!0),p)try{y.responseType=p}catch(w){if("json"!==p)throw w}y.send(l)}if(m>0)var C=r(g,m);else D(m)&&m.then(g)}}function St(){var e="{{",t="}}";this.startSymbol=function(t){return t?(e=t,this):e},this.endSymbol=function(e){return e?(t=e,this):t},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,o){function i(e){return"\\\\\\"+e}function a(n){return n.replace(m,e).replace(f,t)}function s(e){if(null==e)return"";switch(typeof e){case"string":break;case"number":e=""+e;break;default:e=K(e)}return e}function c(i,c,m,f){function p(e){try{return e=k(e),f&&!E(e)?e:s(e)}catch(t){r(Lo.interr(i,t))}}f=!!f;for(var h,g,v,$=0,y=[],M=[],w=i.length,C=[],A=[];w>$;){if(-1==(h=i.indexOf(e,$))||-1==(g=i.indexOf(t,h+l))){$!==w&&C.push(a(i.substring($)));break}$!==h&&C.push(a(i.substring($,h))),v=i.substring(h+l,g),y.push(v),M.push(n(v,p)),$=g+u,A.push(C.length),C.push("")}if(m&&C.length>1&&Lo.throwNoconcat(i),!c||y.length){var T=function(e){for(var t=0,n=y.length;n>t;t++){if(f&&b(e[t]))return;C[A[t]]=e[t]}return C.join("")},k=function(e){return m?o.getTrusted(m,e):o.valueOf(e)};return d(function(e){var t=0,n=y.length,o=new Array(n);try{for(;n>t;t++)o[t]=M[t](e);return T(o)}catch(a){r(Lo.interr(i,a))}},{exp:i,expressions:y,$$watchDelegate:function(e,t){var n;return e.$watchGroup(M,function(r,o){var i=T(r);x(t)&&t.call(this,i,r!==o?n:i,e),n=i})}})}}var l=e.length,u=t.length,m=new RegExp(e.replace(/./g,i),"g"),f=new RegExp(t.replace(/./g,i),"g");return c.startSymbol=function(){return e},c.endSymbol=function(){return t},c}]}function Nt(){this.$get=["$rootScope","$window","$q","$$q",function(e,t,n,r){function o(o,a,s,c){var l=arguments.length>4,u=l?U(arguments,4):[],d=t.setInterval,m=t.clearInterval,f=0,p=E(c)&&!c,h=(p?r:n).defer(),g=h.promise;return s=E(s)?s:0,g.then(null,null,l?function(){o.apply(null,u)}:o),g.$$intervalId=d(function(){h.notify(f++),s>0&&f>=s&&(h.resolve(f),m(g.$$intervalId),delete i[g.$$intervalId]),p||e.$apply()},a),i[g.$$intervalId]=h,g}var i={};return o.cancel=function(e){return e&&e.$$intervalId in i?(i[e.$$intervalId].reject("canceled"),t.clearInterval(e.$$intervalId),delete i[e.$$intervalId],!0):!1},o}]}function _t(){this.$get=function(){return{id:"en-us",NUMBER_FORMATS:{DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{minInt:1,minFrac:0,maxFrac:3,posPre:"",posSuf:"",negPre:"-",negSuf:"",gSize:3,lgSize:3},{minInt:1,minFrac:2,maxFrac:2,posPre:"¤",posSuf:"",negPre:"(¤",negSuf:")",gSize:3,lgSize:3}],CURRENCY_SYM:"$"},DATETIME_FORMATS:{MONTH:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),SHORTMONTH:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),DAY:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),SHORTDAY:"Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(","),AMPMS:["AM","PM"],medium:"MMM d, y h:mm:ss a","short":"M/d/yy h:mm a",fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",mediumDate:"MMM d, y",shortDate:"M/d/yy",mediumTime:"h:mm:ss a",shortTime:"h:mm a",ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"]},pluralCat:function(e){return 1===e?"one":"other"}}}}function Ht(e){for(var t=e.split("/"),n=t.length;n--;)t[n]=ne(t[n]);return t.join("/")}function Ot(e,t){var n=xn(e);t.$$protocol=n.protocol,t.$$host=n.hostname,t.$$port=f(n.port)||Vo[n.protocol]||null}function Dt(e,t){var n="/"!==e.charAt(0);n&&(e="/"+e);var r=xn(e);t.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),t.$$search=ee(r.search),t.$$hash=decodeURIComponent(r.hash),t.$$path&&"/"!=t.$$path.charAt(0)&&(t.$$path="/"+t.$$path)}function It(e,t){return 0===t.indexOf(e)?t.substr(e.length):void 0}function Rt(e){var t=e.indexOf("#");return-1==t?e:e.substr(0,t)}function Pt(e){return e.replace(/(#.+)|#$/,"$1")}function jt(e){return e.substr(0,Rt(e).lastIndexOf("/")+1)}function Lt(e){return e.substring(0,e.indexOf("/",e.indexOf("//")+2))}function Ft(e,t){this.$$html5=!0,t=t||"";var r=jt(e);Ot(e,this),this.$$parse=function(e){var t=It(r,e);if(!w(t))throw qo("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',e,r);Dt(t,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var e=te(this.$$search),t=this.$$hash?"#"+ne(this.$$hash):"";this.$$url=Ht(this.$$path)+(e?"?"+e:"")+t,this.$$absUrl=r+this.$$url.substr(1)},this.$$parseLinkUrl=function(o,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var a,s,c;return(a=It(e,o))!==n?(s=a,c=(a=It(t,a))!==n?r+(It("/",a)||a):e+s):(a=It(r,o))!==n?c=r+a:r==o+"/"&&(c=r),c&&this.$$parse(c),!!c}}function Vt(e,t){var n=jt(e);Ot(e,this),this.$$parse=function(r){function o(e,t,n){var r,o=/^\/[A-Z]:(\/.*)/;return 0===t.indexOf(n)&&(t=t.replace(n,"")),o.exec(t)?e:(r=o.exec(e),r?r[1]:e)}var i,a=It(e,r)||It(n,r);b(a)||"#"!==a.charAt(0)?this.$$html5?i=a:(i="",b(a)&&(e=r,this.replace())):(i=It(t,a),b(i)&&(i=a)),Dt(i,this),this.$$path=o(this.$$path,i,e),this.$$compose()},this.$$compose=function(){var n=te(this.$$search),r=this.$$hash?"#"+ne(this.$$hash):"";this.$$url=Ht(this.$$path)+(n?"?"+n:"")+r,this.$$absUrl=e+(this.$$url?t+this.$$url:"")},this.$$parseLinkUrl=function(t,n){return Rt(e)==Rt(t)?(this.$$parse(t),!0):!1}}function qt(e,t){this.$$html5=!0,Vt.apply(this,arguments);var n=jt(e);this.$$parseLinkUrl=function(r,o){if(o&&"#"===o[0])return this.hash(o.slice(1)),!0;var i,a;return e==Rt(r)?i=r:(a=It(n,r))?i=e+t+a:n===r+"/"&&(i=n),i&&this.$$parse(i),!!i},this.$$compose=function(){var n=te(this.$$search),r=this.$$hash?"#"+ne(this.$$hash):"";this.$$url=Ht(this.$$path)+(n?"?"+n:"")+r,this.$$absUrl=e+t+this.$$url}}function Bt(e){return function(){return this[e]}}function Ut(e,t){return function(n){return b(n)?this[e]:(this[e]=t(n),this.$$compose(),this)}}function zt(){var e="",t={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(t){return E(t)?(e=t,this):e},this.html5Mode=function(e){return O(e)?(t.enabled=e,this):y(e)?(O(e.enabled)&&(t.enabled=e.enabled),O(e.requireBase)&&(t.requireBase=e.requireBase),O(e.rewriteLinks)&&(t.rewriteLinks=e.rewriteLinks),this):t},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,o,i,a){function s(e,t,n){var o=l.url(),i=l.$$state;try{r.url(e,t,n),l.$$state=r.state()}catch(a){throw l.url(o),l.$$state=i,a}}function c(e,t){n.$broadcast("$locationChangeSuccess",l.absUrl(),e,l.$$state,t)}var l,u,d,m=r.baseHref(),f=r.url();if(t.enabled){if(!m&&t.requireBase)throw qo("nobase","$location in HTML5 mode requires a <base> tag to be present!");d=Lt(f)+(m||"/"),u=o.history?Ft:qt}else d=Rt(f),u=Vt;l=new u(d,"#"+e),l.$$parseLinkUrl(f,f),l.$$state=r.state();var p=/^\s*(javascript|mailto):/i;i.on("click",function(e){if(t.rewriteLinks&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey&&2!=e.which&&2!=e.button){for(var o=xr(e.target);"a"!==j(o[0]);)if(o[0]===i[0]||!(o=o.parent())[0])return;var s=o.prop("href"),c=o.attr("href")||o.attr("xlink:href");y(s)&&"[object SVGAnimatedString]"===s.toString()&&(s=xn(s.animVal).href),p.test(s)||!s||o.attr("target")||e.isDefaultPrevented()||l.$$parseLinkUrl(s,c)&&(e.preventDefault(),l.absUrl()!=r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}),Pt(l.absUrl())!=Pt(f)&&r.url(l.absUrl(),!0);var h=!0;return r.onUrlChange(function(e,t){n.$evalAsync(function(){var r,o=l.absUrl(),i=l.$$state;l.$$parse(e),l.$$state=t,r=n.$broadcast("$locationChangeStart",e,o,t,i).defaultPrevented,l.absUrl()===e&&(r?(l.$$parse(o),l.$$state=i,s(o,!1,i)):(h=!1,c(o,i)))}),n.$$phase||n.$digest()}),n.$watch(function(){var e=Pt(r.url()),t=Pt(l.absUrl()),i=r.state(),a=l.$$replace,u=e!==t||l.$$html5&&o.history&&i!==l.$$state;(h||u)&&(h=!1,n.$evalAsync(function(){var t=l.absUrl(),r=n.$broadcast("$locationChangeStart",t,e,l.$$state,i).defaultPrevented;l.absUrl()===t&&(r?(l.$$parse(e),l.$$state=i):(u&&s(t,a,i===l.$$state?null:l.$$state),c(e,i)))})),l.$$replace=!1}),l}]}function Wt(){var e=!0,t=this;this.debugEnabled=function(t){return E(t)?(e=t,this):e},this.$get=["$window",function(n){function r(e){return e instanceof Error&&(e.stack?e=e.message&&-1===e.stack.indexOf(e.message)?"Error: "+e.message+"\n"+e.stack:e.stack:e.sourceURL&&(e=e.message+"\n"+e.sourceURL+":"+e.line)),e}function o(e){var t=n.console||{},o=t[e]||t.log||h,a=!1;try{a=!!o.apply}catch(s){}return a?function(){var e=[];return i(arguments,function(t){e.push(r(t))}),o.apply(t,e)}:function(e,t){o(e,null==t?"":t)}}return{log:o("log"),info:o("info"),warn:o("warn"),error:o("error"),debug:function(){var n=o("debug");return function(){e&&n.apply(t,arguments)}}()}}]}function Kt(e,t){if("__defineGetter__"===e||"__defineSetter__"===e||"__lookupGetter__"===e||"__lookupSetter__"===e||"__proto__"===e)throw Uo("isecfld","Attempting to access a disallowed field in Angular expressions! Expression: {0}",t);return e}function Yt(e,t){if(e){if(e.constructor===e)throw Uo("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e.window===e)throw Uo("isecwindow","Referencing the Window in Angular expressions is disallowed! Expression: {0}",t);if(e.children&&(e.nodeName||e.prop&&e.attr&&e.find))throw Uo("isecdom","Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}",t);if(e===Object)throw Uo("isecobj","Referencing Object in Angular expressions is disallowed! Expression: {0}",t)}return e}function Gt(e,t){if(e){if(e.constructor===e)throw Uo("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e===zo||e===Wo||e===Ko)throw Uo("isecff","Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}",t)}}function Xt(e,t){return"undefined"!=typeof e?e:t}function Zt(e,t){return"undefined"==typeof e?t:"undefined"==typeof t?e:e+t}function Jt(e,t){var n=e(t);return!n.$stateful}function Qt(e,t){var n,r;switch(e.type){case Zo.Program:n=!0,i(e.body,function(e){Qt(e.expression,t),n=n&&e.expression.constant}),e.constant=n;break;case Zo.Literal:e.constant=!0,e.toWatch=[];break;case Zo.UnaryExpression:Qt(e.argument,t),e.constant=e.argument.constant,e.toWatch=e.argument.toWatch;break;case Zo.BinaryExpression:Qt(e.left,t),Qt(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.left.toWatch.concat(e.right.toWatch);break;case Zo.LogicalExpression:Qt(e.left,t),Qt(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.constant?[]:[e];break;case Zo.ConditionalExpression:Qt(e.test,t),Qt(e.alternate,t),Qt(e.consequent,t),e.constant=e.test.constant&&e.alternate.constant&&e.consequent.constant,e.toWatch=e.constant?[]:[e];break;case Zo.Identifier:e.constant=!1,e.toWatch=[e];break;case Zo.MemberExpression:Qt(e.object,t),e.computed&&Qt(e.property,t),e.constant=e.object.constant&&(!e.computed||e.property.constant),e.toWatch=[e];break;case Zo.CallExpression:n=e.filter?Jt(t,e.callee.name):!1,r=[],i(e.arguments,function(e){Qt(e,t),n=n&&e.constant,e.constant||r.push.apply(r,e.toWatch)}),e.constant=n,e.toWatch=e.filter&&Jt(t,e.callee.name)?r:[e];break;case Zo.AssignmentExpression:Qt(e.left,t),Qt(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=[e];break;case Zo.ArrayExpression:n=!0,r=[],i(e.elements,function(e){Qt(e,t),n=n&&e.constant,e.constant||r.push.apply(r,e.toWatch)}),e.constant=n,e.toWatch=r;break;case Zo.ObjectExpression:n=!0,r=[],i(e.properties,function(e){Qt(e.value,t),n=n&&e.value.constant,e.value.constant||r.push.apply(r,e.value.toWatch)}),e.constant=n,e.toWatch=r;break;case Zo.ThisExpression:e.constant=!1,e.toWatch=[]}}function en(e){if(1==e.length){var t=e[0].expression,r=t.toWatch;return 1!==r.length?r:r[0]!==t?r:n}}function tn(e){return e.type===Zo.Identifier||e.type===Zo.MemberExpression}function nn(e){return 1===e.body.length&&tn(e.body[0].expression)?{type:Zo.AssignmentExpression,left:e.body[0].expression,right:{type:Zo.NGValueParameter},operator:"="}:void 0}function rn(e){return 0===e.body.length||1===e.body.length&&(e.body[0].expression.type===Zo.Literal||e.body[0].expression.type===Zo.ArrayExpression||e.body[0].expression.type===Zo.ObjectExpression)}function on(e){return e.constant}function an(e,t){this.astBuilder=e,this.$filter=t}function sn(e,t){this.astBuilder=e,this.$filter=t}function cn(e,t,n,r){Yt(e,r);for(var o,i=t.split("."),a=0;i.length>1;a++){o=Kt(i.shift(),r);var s=Yt(e[o],r);s||(s={},e[o]=s),e=s}return o=Kt(i.shift(),r),Yt(e[o],r),e[o]=n,n}function ln(e){return"constructor"==e}function un(e){return x(e.valueOf)?e.valueOf():Qo.call(e)}function dn(){var e=ge(),t=ge();this.$get=["$filter","$sniffer",function(r,o){function a(e,t){return null==e||null==t?e===t:"object"==typeof e&&(e=un(e),"object"==typeof e)?!1:e===t||e!==e&&t!==t}function s(e,t,r,o,i){var s,c=o.inputs;if(1===c.length){var l=a;return c=c[0],e.$watch(function(e){var t=c(e);return a(t,l)||(s=o(e,n,n,[t]),l=t&&un(t)),s},t,r,i)}for(var u=[],d=[],m=0,f=c.length;f>m;m++)u[m]=a,d[m]=null;return e.$watch(function(e){for(var t=!1,r=0,i=c.length;i>r;r++){var l=c[r](e);(t||(t=!a(l,u[r])))&&(d[r]=l,u[r]=l&&un(l))}return t&&(s=o(e,n,n,d)),s},t,r,i)}function c(e,t,n,r){var o,i;return o=e.$watch(function(e){return r(e)},function(e,n,r){i=e,x(t)&&t.apply(this,arguments),E(e)&&r.$$postDigest(function(){E(i)&&o()})},n)}function l(e,t,n,r){function o(e){var t=!0;return i(e,function(e){E(e)||(t=!1)}),t}var a,s;return a=e.$watch(function(e){return r(e)},function(e,n,r){s=e,x(t)&&t.call(this,e,n,r),o(e)&&r.$$postDigest(function(){o(s)&&a()})},n)}function u(e,t,n,r){var o;return o=e.$watch(function(e){return r(e)},function(e,n,r){x(t)&&t.apply(this,arguments),o()},n)}function d(e,t){if(!t)return e;var n=e.$$watchDelegate,r=n!==l&&n!==c,o=r?function(n,r,o,i){var a=e(n,r,o,i);return t(a,n,r)}:function(n,r,o,i){var a=e(n,r,o,i),s=t(a,n,r);return E(a)?s:a};return e.$$watchDelegate&&e.$$watchDelegate!==s?o.$$watchDelegate=e.$$watchDelegate:t.$stateful||(o.$$watchDelegate=s,o.inputs=e.inputs?e.inputs:[e]),o}var m={csp:o.csp,expensiveChecks:!1},f={csp:o.csp,expensiveChecks:!0};return function(n,o,i){var a,p,g;switch(typeof n){case"string":n=n.trim(),g=n;var v=i?t:e;if(a=v[g],!a){":"===n.charAt(0)&&":"===n.charAt(1)&&(p=!0,n=n.substring(2));var $=i?f:m,b=new Xo($),E=new Jo(b,r,$);a=E.parse(n),a.constant?a.$$watchDelegate=u:p?a.$$watchDelegate=a.literal?l:c:a.inputs&&(a.$$watchDelegate=s),v[g]=a}return d(a,o);case"function":return d(n,o);default:return h}}}]}function mn(){this.$get=["$rootScope","$exceptionHandler",function(e,t){return pn(function(t){e.$evalAsync(t)},t)}]}function fn(){this.$get=["$browser","$exceptionHandler",function(e,t){return pn(function(t){e.defer(t)},t)}]}function pn(e,t){function o(e,t,n){function r(t){return function(n){o||(o=!0,t.call(e,n))}}var o=!1;return[r(t),r(n)]}function a(){this.$$state={status:0}}function s(e,t){return function(n){t.call(e,n)}}function c(e){var r,o,i;i=e.pending,e.processScheduled=!1,e.pending=n;for(var a=0,s=i.length;s>a;++a){o=i[a][0],r=i[a][e.status];try{x(r)?o.resolve(r(e.value)):1===e.status?o.resolve(e.value):o.reject(e.value)}catch(c){o.reject(c),t(c)}}}function l(t){!t.processScheduled&&t.pending&&(t.processScheduled=!0,e(function(){c(t)}))}function u(){this.promise=new a,this.resolve=s(this,this.resolve),this.reject=s(this,this.reject),this.notify=s(this,this.notify)}function d(e){var t=new u,n=0,r=jr(e)?[]:{};return i(e,function(e,o){n++,v(e).then(function(e){r.hasOwnProperty(o)||(r[o]=e,--n||t.resolve(r))},function(e){r.hasOwnProperty(o)||t.reject(e)})}),0===n&&t.resolve(r),t.promise}var m=r("$q",TypeError),f=function(){return new u};a.prototype={then:function(e,t,n){var r=new u;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,e,t,n]),this.$$state.status>0&&l(this.$$state),r.promise},"catch":function(e){return this.then(null,e)},"finally":function(e,t){return this.then(function(t){return g(t,!0,e)},function(t){return g(t,!1,e)},t)}},u.prototype={resolve:function(e){this.promise.$$state.status||(e===this.promise?this.$$reject(m("qcycle","Expected promise to be resolved with value other than itself '{0}'",e)):this.$$resolve(e))},$$resolve:function(e){var n,r;r=o(this,this.$$resolve,this.$$reject);try{(y(e)||x(e))&&(n=e&&e.then),x(n)?(this.promise.$$state.status=-1,n.call(e,r[0],r[1],this.notify)):(this.promise.$$state.value=e,this.promise.$$state.status=1,l(this.promise.$$state))}catch(i){
r[1](i),t(i)}},reject:function(e){this.promise.$$state.status||this.$$reject(e)},$$reject:function(e){this.promise.$$state.value=e,this.promise.$$state.status=2,l(this.promise.$$state)},notify:function(n){var r=this.promise.$$state.pending;this.promise.$$state.status<=0&&r&&r.length&&e(function(){for(var e,o,i=0,a=r.length;a>i;i++){o=r[i][0],e=r[i][3];try{o.notify(x(e)?e(n):n)}catch(s){t(s)}}})}};var p=function(e){var t=new u;return t.reject(e),t.promise},h=function(e,t){var n=new u;return t?n.resolve(e):n.reject(e),n.promise},g=function(e,t,n){var r=null;try{x(n)&&(r=n())}catch(o){return h(o,!1)}return D(r)?r.then(function(){return h(e,t)},function(e){return h(e,!1)}):h(e,t)},v=function(e,t,n,r){var o=new u;return o.resolve(e),o.promise.then(t,n,r)},$=v,b=function E(e){function t(e){r.resolve(e)}function n(e){r.reject(e)}if(!x(e))throw m("norslvr","Expected resolverFn, got '{0}'",e);if(!(this instanceof E))return new E(e);var r=new u;return e(t,n),r.promise};return b.defer=f,b.reject=p,b.when=v,b.resolve=$,b.all=d,b}function hn(){this.$get=["$window","$timeout",function(e,t){function n(){for(var e=0;e<u.length;e++){var t=u[e];t&&(u[e]=null,t())}l=u.length=0}function r(e){var t=u.length;return l++,u.push(e),0===t&&(c=s(n)),function(){t>=0&&(u[t]=null,t=null,0===--l&&c&&(c(),c=null,u.length=0))}}var o=e.requestAnimationFrame||e.webkitRequestAnimationFrame,i=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,a=!!o,s=a?function(e){var t=o(e);return function(){i(t)}}:function(e){var n=t(e,16.66,!1);return function(){t.cancel(n)}};r.supported=a;var c,l=0,u=[];return r}]}function gn(){function e(e){function t(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=c(),this.$$ChildScope=null}return t.prototype=e,t}var t=10,n=r("$rootScope"),a=null,s=null;this.digestTtl=function(e){return arguments.length&&(t=e),t},this.$get=["$injector","$exceptionHandler","$parse","$browser",function(r,l,u,d){function m(e){e.currentScope.$$destroyed=!0}function f(){this.$id=c(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function p(e){if(C.$$phase)throw n("inprog","{0} already in progress",C.$$phase);C.$$phase=e}function g(){C.$$phase=null}function v(e,t){do e.$$watchersCount+=t;while(e=e.$parent)}function $(e,t,n){do e.$$listenerCount[n]-=t,0===e.$$listenerCount[n]&&delete e.$$listenerCount[n];while(e=e.$parent)}function E(){}function M(){for(;k.length;)try{k.shift()()}catch(e){l(e)}s=null}function w(){null===s&&(s=d.defer(function(){C.$apply(M)}))}f.prototype={constructor:f,$new:function(t,n){var r;return n=n||this,t?(r=new f,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=e(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(t||n!=this)&&r.$on("$destroy",m),r},$watch:function(e,t,n,r){var o=u(e);if(o.$$watchDelegate)return o.$$watchDelegate(this,t,n,o,e);var i=this,s=i.$$watchers,c={fn:t,last:E,get:o,exp:r||e,eq:!!n};return a=null,x(t)||(c.fn=h),s||(s=i.$$watchers=[]),s.unshift(c),v(this,1),function(){L(s,c)>=0&&v(i,-1),a=null}},$watchGroup:function(e,t){function n(){c=!1,l?(l=!1,t(o,o,s)):t(o,r,s)}var r=new Array(e.length),o=new Array(e.length),a=[],s=this,c=!1,l=!0;if(!e.length){var u=!0;return s.$evalAsync(function(){u&&t(o,o,s)}),function(){u=!1}}return 1===e.length?this.$watch(e[0],function(e,n,i){o[0]=e,r[0]=n,t(o,e===n?o:r,i)}):(i(e,function(e,t){var i=s.$watch(e,function(e,i){o[t]=e,r[t]=i,c||(c=!0,s.$evalAsync(n))});a.push(i)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(e,t){function n(e){i=e;var t,n,r,s,c;if(!b(i)){if(y(i))if(o(i)){a!==f&&(a=f,g=a.length=0,d++),t=i.length,g!==t&&(d++,a.length=g=t);for(var l=0;t>l;l++)c=a[l],s=i[l],r=c!==c&&s!==s,r||c===s||(d++,a[l]=s)}else{a!==p&&(a=p={},g=0,d++),t=0;for(n in i)i.hasOwnProperty(n)&&(t++,s=i[n],c=a[n],n in a?(r=c!==c&&s!==s,r||c===s||(d++,a[n]=s)):(g++,a[n]=s,d++));if(g>t){d++;for(n in a)i.hasOwnProperty(n)||(g--,delete a[n])}}else a!==i&&(a=i,d++);return d}}function r(){if(h?(h=!1,t(i,i,c)):t(i,s,c),l)if(y(i))if(o(i)){s=new Array(i.length);for(var e=0;e<i.length;e++)s[e]=i[e]}else{s={};for(var n in i)yr.call(i,n)&&(s[n]=i[n])}else s=i}n.$stateful=!0;var i,a,s,c=this,l=t.length>1,d=0,m=u(e,n),f=[],p={},h=!0,g=0;return this.$watch(m,r)},$digest:function(){var e,r,o,i,c,u,m,f,h,v,$=t,b=this,y=[];p("$digest"),d.$$checkUrlChange(),this===C&&null!==s&&(d.defer.cancel(s),M()),a=null;do{for(u=!1,f=b;A.length;){try{v=A.shift(),v.scope.$eval(v.expression,v.locals)}catch(w){l(w)}a=null}e:do{if(i=f.$$watchers)for(c=i.length;c--;)try{if(e=i[c])if((r=e.get(f))===(o=e.last)||(e.eq?q(r,o):"number"==typeof r&&"number"==typeof o&&isNaN(r)&&isNaN(o))){if(e===a){u=!1;break e}}else u=!0,a=e,e.last=e.eq?F(r,null):r,e.fn(r,o===E?r:o,f),5>$&&(h=4-$,y[h]||(y[h]=[]),y[h].push({msg:x(e.exp)?"fn: "+(e.exp.name||e.exp.toString()):e.exp,newVal:r,oldVal:o}))}catch(w){l(w)}if(!(m=f.$$watchersCount&&f.$$childHead||f!==b&&f.$$nextSibling))for(;f!==b&&!(m=f.$$nextSibling);)f=f.$parent}while(f=m);if((u||A.length)&&!$--)throw g(),n("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",t,y)}while(u||A.length);for(g();T.length;)try{T.shift()()}catch(w){l(w)}},$destroy:function(){if(!this.$$destroyed){var e=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===C&&d.$$applicationDestroyed(),v(this,-this.$$watchersCount);for(var t in this.$$listenerCount)$(this,this.$$listenerCount[t],t);e&&e.$$childHead==this&&(e.$$childHead=this.$$nextSibling),e&&e.$$childTail==this&&(e.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=h,this.$on=this.$watch=this.$watchGroup=function(){return h},this.$$listeners={},this.$parent=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=this.$root=this.$$watchers=null}},$eval:function(e,t){return u(e)(this,t)},$evalAsync:function(e,t){C.$$phase||A.length||d.defer(function(){A.length&&C.$digest()}),A.push({scope:this,expression:e,locals:t})},$$postDigest:function(e){T.push(e)},$apply:function(e){try{return p("$apply"),this.$eval(e)}catch(t){l(t)}finally{g();try{C.$digest()}catch(t){throw l(t),t}}},$applyAsync:function(e){function t(){n.$eval(e)}var n=this;e&&k.push(t),w()},$on:function(e,t){var n=this.$$listeners[e];n||(this.$$listeners[e]=n=[]),n.push(t);var r=this;do r.$$listenerCount[e]||(r.$$listenerCount[e]=0),r.$$listenerCount[e]++;while(r=r.$parent);var o=this;return function(){var r=n.indexOf(t);-1!==r&&(n[r]=null,$(o,1,e))}},$emit:function(e,t){var n,r,o,i=[],a=this,s=!1,c={name:e,targetScope:a,stopPropagation:function(){s=!0},preventDefault:function(){c.defaultPrevented=!0},defaultPrevented:!1},u=B([c],arguments,1);do{for(n=a.$$listeners[e]||i,c.currentScope=a,r=0,o=n.length;o>r;r++)if(n[r])try{n[r].apply(null,u)}catch(d){l(d)}else n.splice(r,1),r--,o--;if(s)return c.currentScope=null,c;a=a.$parent}while(a);return c.currentScope=null,c},$broadcast:function(e,t){var n=this,r=n,o=n,i={name:e,targetScope:n,preventDefault:function(){i.defaultPrevented=!0},defaultPrevented:!1};if(!n.$$listenerCount[e])return i;for(var a,s,c,u=B([i],arguments,1);r=o;){for(i.currentScope=r,a=r.$$listeners[e]||[],s=0,c=a.length;c>s;s++)if(a[s])try{a[s].apply(null,u)}catch(d){l(d)}else a.splice(s,1),s--,c--;if(!(o=r.$$listenerCount[e]&&r.$$childHead||r!==n&&r.$$nextSibling))for(;r!==n&&!(o=r.$$nextSibling);)r=r.$parent}return i.currentScope=null,i}};var C=new f,A=C.$$asyncQueue=[],T=C.$$postDigestQueue=[],k=C.$$applyAsyncQueue=[];return C}]}function vn(){var e=/^\s*(https?|ftp|mailto|tel|file):/,t=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(t){return E(t)?(e=t,this):e},this.imgSrcSanitizationWhitelist=function(e){return E(e)?(t=e,this):t},this.$get=function(){return function(n,r){var o,i=r?t:e;return o=xn(n).href,""===o||o.match(i)?n:"unsafe:"+o}}}function $n(e){if("self"===e)return e;if(w(e)){if(e.indexOf("***")>-1)throw ei("iwcard","Illegal sequence *** in string matcher.  String: {0}",e);return e=Vr(e).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+e+"$")}if(T(e))return new RegExp("^"+e.source+"$");throw ei("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function bn(e){var t=[];return E(e)&&i(e,function(e){t.push($n(e))}),t}function En(){this.SCE_CONTEXTS=ti;var e=["self"],t=[];this.resourceUrlWhitelist=function(t){return arguments.length&&(e=bn(t)),e},this.resourceUrlBlacklist=function(e){return arguments.length&&(t=bn(e)),t},this.$get=["$injector",function(r){function o(e,t){return"self"===e?Tn(t):!!e.exec(t.href)}function i(n){var r,i,a=xn(n.toString()),s=!1;for(r=0,i=e.length;i>r;r++)if(o(e[r],a)){s=!0;break}if(s)for(r=0,i=t.length;i>r;r++)if(o(t[r],a)){s=!1;break}return s}function a(e){var t=function(e){this.$$unwrapTrustedValue=function(){return e}};return e&&(t.prototype=new e),t.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},t.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},t}function s(e,t){var r=m.hasOwnProperty(e)?m[e]:null;if(!r)throw ei("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",e,t);if(null===t||t===n||""===t)return t;if("string"!=typeof t)throw ei("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",e);return new r(t)}function c(e){return e instanceof d?e.$$unwrapTrustedValue():e}function l(e,t){if(null===t||t===n||""===t)return t;var r=m.hasOwnProperty(e)?m[e]:null;if(r&&t instanceof r)return t.$$unwrapTrustedValue();if(e===ti.RESOURCE_URL){if(i(t))return t;throw ei("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",t.toString())}if(e===ti.HTML)return u(t);throw ei("unsafe","Attempting to use an unsafe value in a safe context.")}var u=function(e){throw ei("unsafe","Attempting to use an unsafe value in a safe context.")};r.has("$sanitize")&&(u=r.get("$sanitize"));var d=a(),m={};return m[ti.HTML]=a(d),m[ti.CSS]=a(d),m[ti.URL]=a(d),m[ti.JS]=a(d),m[ti.RESOURCE_URL]=a(m[ti.URL]),{trustAs:s,getTrusted:l,valueOf:c}}]}function yn(){var e=!0;this.enabled=function(t){return arguments.length&&(e=!!t),e},this.$get=["$parse","$sceDelegate",function(t,n){if(e&&8>Ar)throw ei("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var r=V(ti);r.isEnabled=function(){return e},r.trustAs=n.trustAs,r.getTrusted=n.getTrusted,r.valueOf=n.valueOf,e||(r.trustAs=r.getTrusted=function(e,t){return t},r.valueOf=g),r.parseAs=function(e,n){var o=t(n);return o.literal&&o.constant?o:t(n,function(t){return r.getTrusted(e,t)})};var o=r.parseAs,a=r.getTrusted,s=r.trustAs;return i(ti,function(e,t){var n=Er(t);r[Me("parse_as_"+n)]=function(t){return o(e,t)},r[Me("get_trusted_"+n)]=function(t){return a(e,t)},r[Me("trust_as_"+n)]=function(t){return s(e,t)}}),r}]}function Mn(){this.$get=["$window","$document",function(e,t){var n,r,o={},i=f((/android (\d+)/.exec(Er((e.navigator||{}).userAgent))||[])[1]),a=/Boxee/i.test((e.navigator||{}).userAgent),s=t[0]||{},c=/^(Moz|webkit|ms)(?=[A-Z])/,l=s.body&&s.body.style,u=!1,d=!1;if(l){for(var m in l)if(r=c.exec(m)){n=r[0],n=n.substr(0,1).toUpperCase()+n.substr(1);break}n||(n="WebkitOpacity"in l&&"webkit"),u=!!("transition"in l||n+"Transition"in l),d=!!("animation"in l||n+"Animation"in l),!i||u&&d||(u=w(l.webkitTransition),d=w(l.webkitAnimation))}return{history:!(!e.history||!e.history.pushState||4>i||a),hasEvent:function(e){if("input"===e&&11>=Ar)return!1;if(b(o[e])){var t=s.createElement("div");o[e]="on"+e in t}return o[e]},csp:qr(),vendorPrefix:n,transitions:u,animations:d,android:i}}]}function wn(){this.$get=["$templateCache","$http","$q","$sce",function(e,t,n,r){function o(i,a){function s(e){if(!a)throw No("tpload","Failed to load template: {0} (HTTP status: {1} {2})",i,e.status,e.statusText);return n.reject(e)}o.totalPendingRequests++,w(i)&&e.get(i)||(i=r.getTrustedResourceUrl(i));var c=t.defaults&&t.defaults.transformResponse;jr(c)?c=c.filter(function(e){return e!==bt}):c===bt&&(c=null);var l={cache:e,transformResponse:c};return t.get(i,l)["finally"](function(){o.totalPendingRequests--}).then(function(t){return e.put(i,t.data),t.data},s)}return o.totalPendingRequests=0,o}]}function Cn(){this.$get=["$rootScope","$browser","$location",function(e,t,n){var r={};return r.findBindings=function(e,t,n){var r=e.getElementsByClassName("ng-binding"),o=[];return i(r,function(e){var r=Ir.element(e).data("$binding");r&&i(r,function(r){if(n){var i=new RegExp("(^|\\s)"+Vr(t)+"(\\s|\\||$)");i.test(r)&&o.push(e)}else-1!=r.indexOf(t)&&o.push(e)})}),o},r.findModels=function(e,t,n){for(var r=["ng-","data-ng-","ng\\:"],o=0;o<r.length;++o){var i=n?"=":"*=",a="["+r[o]+"model"+i+'"'+t+'"]',s=e.querySelectorAll(a);if(s.length)return s}},r.getLocation=function(){return n.url()},r.setLocation=function(t){t!==n.url()&&(n.url(t),e.$digest())},r.whenStable=function(e){t.notifyWhenNoOutstandingRequests(e)},r}]}function An(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(e,t,n,r,o){function i(i,s,c){x(i)||(c=s,s=i,i=h);var l,u=U(arguments,3),d=E(c)&&!c,m=(d?r:n).defer(),f=m.promise;return l=t.defer(function(){try{m.resolve(i.apply(null,u))}catch(t){m.reject(t),o(t)}finally{delete a[f.$$timeoutId]}d||e.$apply()},s),f.$$timeoutId=l,a[l]=m,f}var a={};return i.cancel=function(e){return e&&e.$$timeoutId in a?(a[e.$$timeoutId].reject("canceled"),delete a[e.$$timeoutId],t.defer.cancel(e.$$timeoutId)):!1},i}]}function xn(e){var t=e;return Ar&&(ni.setAttribute("href",t),t=ni.href),ni.setAttribute("href",t),{href:ni.href,protocol:ni.protocol?ni.protocol.replace(/:$/,""):"",host:ni.host,search:ni.search?ni.search.replace(/^\?/,""):"",hash:ni.hash?ni.hash.replace(/^#/,""):"",hostname:ni.hostname,port:ni.port,pathname:"/"===ni.pathname.charAt(0)?ni.pathname:"/"+ni.pathname}}function Tn(e){var t=w(e)?xn(e):e;return t.protocol===ri.protocol&&t.host===ri.host}function kn(){this.$get=v(e)}function Sn(e){function t(e){try{return decodeURIComponent(e)}catch(t){return e}}var r=e[0]||{},o={},i="";return function(){var e,a,s,c,l,u=r.cookie||"";if(u!==i)for(i=u,e=i.split("; "),o={},s=0;s<e.length;s++)a=e[s],c=a.indexOf("="),c>0&&(l=t(a.substring(0,c)),o[l]===n&&(o[l]=t(a.substring(c+1))));return o}}function Nn(){this.$get=Sn}function _n(e){function t(r,o){if(y(r)){var a={};return i(r,function(e,n){a[n]=t(n,e)}),a}return e.factory(r+n,o)}var n="Filter";this.register=t,this.$get=["$injector",function(e){return function(t){return e.get(t+n)}}],t("currency",Rn),t("date",Gn),t("filter",Hn),t("json",Xn),t("limitTo",Zn),t("lowercase",ci),t("number",Pn),t("orderBy",Jn),t("uppercase",li)}function Hn(){return function(e,t,n){if(!o(e)){if(null==e)return e;throw r("filter")("notarray","Expected array but received: {0}",e)}var i,a,s=In(t);switch(s){case"function":i=t;break;case"boolean":case"null":case"number":case"string":a=!0;case"object":i=On(t,n,a);break;default:return e}return Array.prototype.filter.call(e,i)}}function On(e,t,n){var r,o=y(e)&&"$"in e;return t===!0?t=q:x(t)||(t=function(e,t){return b(e)?!1:null===e||null===t?e===t:y(t)||y(e)&&!$(e)?!1:(e=Er(""+e),t=Er(""+t),-1!==e.indexOf(t))}),r=function(r){return o&&!y(r)?Dn(r,e.$,t,!1):Dn(r,e,t,n)}}function Dn(e,t,n,r,o){var i=In(e),a=In(t);if("string"===a&&"!"===t.charAt(0))return!Dn(e,t.substring(1),n,r);if(jr(e))return e.some(function(e){return Dn(e,t,n,r)});switch(i){case"object":var s;if(r){for(s in e)if("$"!==s.charAt(0)&&Dn(e[s],t,n,!0))return!0;return o?!1:Dn(e,t,n,!1)}if("object"===a){for(s in t){var c=t[s];if(!x(c)&&!b(c)){var l="$"===s,u=l?e:e[s];if(!Dn(u,c,n,l,l))return!1}}return!0}return n(e,t);case"function":return!1;default:return n(e,t)}}function In(e){return null===e?"null":typeof e}function Rn(e){var t=e.NUMBER_FORMATS;return function(e,n,r){return b(n)&&(n=t.CURRENCY_SYM),b(r)&&(r=t.PATTERNS[1].maxFrac),null==e?e:jn(e,t.PATTERNS[1],t.GROUP_SEP,t.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function Pn(e){var t=e.NUMBER_FORMATS;return function(e,n){return null==e?e:jn(e,t.PATTERNS[0],t.GROUP_SEP,t.DECIMAL_SEP,n)}}function jn(e,t,n,r,o){if(y(e))return"";var i=0>e;e=Math.abs(e);var a=e===1/0;if(!a&&!isFinite(e))return"";var s=e+"",c="",l=!1,u=[];if(a&&(c="∞"),!a&&-1!==s.indexOf("e")){var d=s.match(/([\d\.]+)e(-?)(\d+)/);d&&"-"==d[2]&&d[3]>o+1?e=0:(c=s,l=!0)}if(a||l)o>0&&1>e&&(c=e.toFixed(o),e=parseFloat(c));else{var m=(s.split(oi)[1]||"").length;b(o)&&(o=Math.min(Math.max(t.minFrac,m),t.maxFrac)),e=+(Math.round(+(e.toString()+"e"+o)).toString()+"e"+-o);var f=(""+e).split(oi),p=f[0];f=f[1]||"";var h,g=0,v=t.lgSize,$=t.gSize;if(p.length>=v+$)for(g=p.length-v,h=0;g>h;h++)(g-h)%$===0&&0!==h&&(c+=n),c+=p.charAt(h);for(h=g;h<p.length;h++)(p.length-h)%v===0&&0!==h&&(c+=n),c+=p.charAt(h);for(;f.length<o;)f+="0";o&&"0"!==o&&(c+=r+f.substr(0,o))}return 0===e&&(i=!1),u.push(i?t.negPre:t.posPre,c,i?t.negSuf:t.posSuf),u.join("")}function Ln(e,t,n){var r="";for(0>e&&(r="-",e=-e),e=""+e;e.length<t;)e="0"+e;return n&&(e=e.substr(e.length-t)),r+e}function Fn(e,t,n,r){return n=n||0,function(o){var i=o["get"+e]();return(n>0||i>-n)&&(i+=n),0===i&&-12==n&&(i=12),Ln(i,t,r)}}function Vn(e,t){return function(n,r){var o=n["get"+e](),i=Mr(t?"SHORT"+e:e);return r[i][o]}}function qn(e,t,n){var r=-1*n,o=r>=0?"+":"";return o+=Ln(Math[r>0?"floor":"ceil"](r/60),2)+Ln(Math.abs(r%60),2)}function Bn(e){var t=new Date(e,0,1).getDay();return new Date(e,0,(4>=t?5:12)-t)}function Un(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate()+(4-e.getDay()))}function zn(e){return function(t){var n=Bn(t.getFullYear()),r=Un(t),o=+r-+n,i=1+Math.round(o/6048e5);return Ln(i,e)}}function Wn(e,t){return e.getHours()<12?t.AMPMS[0]:t.AMPMS[1]}function Kn(e,t){return e.getFullYear()<=0?t.ERAS[0]:t.ERAS[1]}function Yn(e,t){return e.getFullYear()<=0?t.ERANAMES[0]:t.ERANAMES[1]}function Gn(e){function t(e){var t;if(t=e.match(n)){var r=new Date(0),o=0,i=0,a=t[8]?r.setUTCFullYear:r.setFullYear,s=t[8]?r.setUTCHours:r.setHours;t[9]&&(o=f(t[9]+t[10]),i=f(t[9]+t[11])),a.call(r,f(t[1]),f(t[2])-1,f(t[3]));var c=f(t[4]||0)-o,l=f(t[5]||0)-i,u=f(t[6]||0),d=Math.round(1e3*parseFloat("0."+(t[7]||0)));return s.call(r,c,l,u,d),r}return e}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,o){var a,s,c="",l=[];if(r=r||"mediumDate",r=e.DATETIME_FORMATS[r]||r,w(n)&&(n=si.test(n)?f(n):t(n)),C(n)&&(n=new Date(n)),!A(n)||!isFinite(n.getTime()))return n;for(;r;)s=ai.exec(r),s?(l=B(l,s,1),r=l.pop()):(l.push(r),r=null);var u=n.getTimezoneOffset();return o&&(u=G(o,n.getTimezoneOffset()),n=Z(n,o,!0)),i(l,function(t){a=ii[t],c+=a?a(n,e.DATETIME_FORMATS,u):t.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),c}}function Xn(){return function(e,t){return b(t)&&(t=2),K(e,t)}}function Zn(){return function(e,t,n){return t=Math.abs(Number(t))===1/0?Number(t):f(t),isNaN(t)?e:(C(e)&&(e=e.toString()),jr(e)||w(e)?(n=!n||isNaN(n)?0:f(n),n=0>n&&n>=-e.length?e.length+n:n,t>=0?e.slice(n,n+t):0===n?e.slice(t,e.length):e.slice(Math.max(0,n+t),n)):e)}}function Jn(e){function t(t,n){return n=n?-1:1,t.map(function(t){var r=1,o=g;if(x(t))o=t;else if(w(t)&&(("+"==t.charAt(0)||"-"==t.charAt(0))&&(r="-"==t.charAt(0)?-1:1,t=t.substring(1)),""!==t&&(o=e(t),o.constant))){var i=o();o=function(e){return e[i]}}return{get:o,descending:r*n}})}function n(e){switch(typeof e){case"number":case"boolean":case"string":return!0;default:return!1}}function r(e,t){return"function"==typeof e.valueOf&&(e=e.valueOf(),n(e))?e:$(e)&&(e=e.toString(),n(e))?e:t}function i(e,t){var n=typeof e;return null===e?(n="string",e="null"):"string"===n?e=e.toLowerCase():"object"===n&&(e=r(e,t)),{value:e,type:n}}function a(e,t){var n=0;return e.type===t.type?e.value!==t.value&&(n=e.value<t.value?-1:1):n=e.type<t.type?-1:1,n}return function(e,n,r){function s(e,t){return{value:e,predicateValues:l.map(function(n){return i(n.get(e),t)})}}function c(e,t){for(var n=0,r=0,o=l.length;o>r&&!(n=a(e.predicateValues[r],t.predicateValues[r])*l[r].descending);++r);return n}if(!o(e))return e;jr(n)||(n=[n]),0===n.length&&(n=["+"]);var l=t(n,r),u=Array.prototype.map.call(e,s);return u.sort(c),e=u.map(function(e){return e.value})}}function Qn(e){return x(e)&&(e={link:e}),e.restrict=e.restrict||"AC",v(e)}function er(e,t){e.$name=t}function tr(e,t,r,o,a){var s=this,c=[],l=s.$$parentForm=e.parent().controller("form")||mi;s.$error={},s.$$success={},s.$pending=n,s.$name=a(t.name||t.ngForm||"")(r),s.$dirty=!1,s.$pristine=!0,s.$valid=!0,s.$invalid=!1,s.$submitted=!1,l.$addControl(s),s.$rollbackViewValue=function(){i(c,function(e){e.$rollbackViewValue()})},s.$commitViewValue=function(){i(c,function(e){e.$commitViewValue()})},s.$addControl=function(e){fe(e.$name,"input"),c.push(e),e.$name&&(s[e.$name]=e)},s.$$renameControl=function(e,t){var n=e.$name;s[n]===e&&delete s[n],s[t]=e,e.$name=t},s.$removeControl=function(e){e.$name&&s[e.$name]===e&&delete s[e.$name],i(s.$pending,function(t,n){s.$setValidity(n,null,e)}),i(s.$error,function(t,n){s.$setValidity(n,null,e)}),i(s.$$success,function(t,n){s.$setValidity(n,null,e)}),L(c,e)},gr({ctrl:this,$element:e,set:function(e,t,n){var r=e[t];if(r){var o=r.indexOf(n);-1===o&&r.push(n)}else e[t]=[n]},unset:function(e,t,n){var r=e[t];r&&(L(r,n),0===r.length&&delete e[t])},parentForm:l,$animate:o}),s.$setDirty=function(){o.removeClass(e,Yi),o.addClass(e,Gi),s.$dirty=!0,s.$pristine=!1,l.$setDirty()},s.$setPristine=function(){o.setClass(e,Yi,Gi+" "+fi),s.$dirty=!1,s.$pristine=!0,s.$submitted=!1,i(c,function(e){e.$setPristine()})},s.$setUntouched=function(){i(c,function(e){e.$setUntouched()})},s.$setSubmitted=function(){o.addClass(e,fi),s.$submitted=!0,l.$setSubmitted()}}function nr(e){e.$formatters.push(function(t){return e.$isEmpty(t)?t:t.toString()})}function rr(e,t,n,r,o,i){or(e,t,n,r,o,i),nr(r)}function or(e,t,n,r,o,i){var a=Er(t[0].type);if(!o.android){var s=!1;t.on("compositionstart",function(e){s=!0}),t.on("compositionend",function(){s=!1,c()})}var c=function(e){if(l&&(i.defer.cancel(l),l=null),!s){var o=t.val(),c=e&&e.type;"password"===a||n.ngTrim&&"false"===n.ngTrim||(o=Fr(o)),(r.$viewValue!==o||""===o&&r.$$hasNativeValidators)&&r.$setViewValue(o,c)}};if(o.hasEvent("input"))t.on("input",c);else{var l,u=function(e,t,n){l||(l=i.defer(function(){l=null,t&&t.value===n||c(e)}))};t.on("keydown",function(e){var t=e.keyCode;91===t||t>15&&19>t||t>=37&&40>=t||u(e,this,this.value)}),o.hasEvent("paste")&&t.on("paste cut",u)}t.on("change",c),r.$render=function(){t.val(r.$isEmpty(r.$viewValue)?"":r.$viewValue)}}function ir(e,t){if(A(e))return e;if(w(e)){wi.lastIndex=0;var n=wi.exec(e);if(n){var r=+n[1],o=+n[2],i=0,a=0,s=0,c=0,l=Bn(r),u=7*(o-1);return t&&(i=t.getHours(),a=t.getMinutes(),s=t.getSeconds(),c=t.getMilliseconds()),new Date(r,0,l.getDate()+u,i,a,s,c)}}return 0/0}function ar(e,t){return function(n,r){var o,a;if(A(n))return n;if(w(n)){if('"'==n.charAt(0)&&'"'==n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),vi.test(n))return new Date(n);if(e.lastIndex=0,o=e.exec(n))return o.shift(),a=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},i(o,function(e,n){n<t.length&&(a[t[n]]=+e)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return 0/0}}function sr(e,t,r,o){return function(i,a,s,c,l,u,d){function m(e){return e&&!(e.getTime&&e.getTime()!==e.getTime())}function f(e){return E(e)?A(e)?e:r(e):n}cr(i,a,s,c),or(i,a,s,c,l,u);var p,h=c&&c.$options&&c.$options.timezone;if(c.$$parserName=e,c.$parsers.push(function(e){if(c.$isEmpty(e))return null;if(t.test(e)){var o=r(e,p);return h&&(o=Z(o,h)),o}return n}),c.$formatters.push(function(e){if(e&&!A(e))throw Qi("datefmt","Expected `{0}` to be a date",e);return m(e)?(p=e,p&&h&&(p=Z(p,h,!0)),d("date")(e,o,h)):(p=null,"")}),E(s.min)||s.ngMin){var g;c.$validators.min=function(e){return!m(e)||b(g)||r(e)>=g},s.$observe("min",function(e){g=f(e),c.$validate()})}if(E(s.max)||s.ngMax){var v;c.$validators.max=function(e){return!m(e)||b(v)||r(e)<=v},s.$observe("max",function(e){v=f(e),c.$validate()})}}}function cr(e,t,r,o){var i=t[0],a=o.$$hasNativeValidators=y(i.validity);a&&o.$parsers.push(function(e){var r=t.prop(br)||{};return r.badInput&&!r.typeMismatch?n:e})}function lr(e,t,r,o,i,a){if(cr(e,t,r,o),or(e,t,r,o,i,a),o.$$parserName="number",o.$parsers.push(function(e){return o.$isEmpty(e)?null:Ei.test(e)?parseFloat(e):n}),o.$formatters.push(function(e){if(!o.$isEmpty(e)){if(!C(e))throw Qi("numfmt","Expected `{0}` to be a number",e);e=e.toString()}return e}),E(r.min)||r.ngMin){var s;o.$validators.min=function(e){return o.$isEmpty(e)||b(s)||e>=s},r.$observe("min",function(e){E(e)&&!C(e)&&(e=parseFloat(e,10)),s=C(e)&&!isNaN(e)?e:n,o.$validate()})}if(E(r.max)||r.ngMax){var c;o.$validators.max=function(e){return o.$isEmpty(e)||b(c)||c>=e},r.$observe("max",function(e){E(e)&&!C(e)&&(e=parseFloat(e,10)),c=C(e)&&!isNaN(e)?e:n,o.$validate()})}}function ur(e,t,n,r,o,i){or(e,t,n,r,o,i),nr(r),r.$$parserName="url",r.$validators.url=function(e,t){var n=e||t;return r.$isEmpty(n)||$i.test(n)}}function dr(e,t,n,r,o,i){or(e,t,n,r,o,i),nr(r),r.$$parserName="email",r.$validators.email=function(e,t){var n=e||t;return r.$isEmpty(n)||bi.test(n)}}function mr(e,t,n,r){b(n.name)&&t.attr("name",c());var o=function(e){t[0].checked&&r.$setViewValue(n.value,e&&e.type)};t.on("click",o),r.$render=function(){var e=n.value;t[0].checked=e==r.$viewValue},n.$observe("value",r.$render)}function fr(e,t,n,o,i){var a;if(E(o)){if(a=e(o),!a.constant)throw r("ngModel")("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,o);return a(t)}return i}function pr(e,t,n,r,o,i,a,s){var c=fr(s,e,"ngTrueValue",n.ngTrueValue,!0),l=fr(s,e,"ngFalseValue",n.ngFalseValue,!1),u=function(e){r.$setViewValue(t[0].checked,e&&e.type)};t.on("click",u),r.$render=function(){t[0].checked=r.$viewValue},r.$isEmpty=function(e){return e===!1},r.$formatters.push(function(e){return q(e,c)}),r.$parsers.push(function(e){return e?c:l})}function hr(e,t){return e="ngClass"+e,["$animate",function(n){function r(e,t){var n=[];e:for(var r=0;r<e.length;r++){for(var o=e[r],i=0;i<t.length;i++)if(o==t[i])continue e;n.push(o)}return n}function o(e){var t=[];return jr(e)?(i(e,function(e){t=t.concat(o(e))}),t):w(e)?e.split(" "):y(e)?(i(e,function(e,n){e&&(t=t.concat(n.split(" ")))}),t):e}return{restrict:"AC",link:function(a,s,c){function l(e){var t=d(e,1);c.$addClass(t)}function u(e){var t=d(e,-1);c.$removeClass(t)}function d(e,t){var n=s.data("$classCounts")||ge(),r=[];return i(e,function(e){(t>0||n[e])&&(n[e]=(n[e]||0)+t,n[e]===+(t>0)&&r.push(e))}),s.data("$classCounts",n),r.join(" ")}function m(e,t){var o=r(t,e),i=r(e,t);o=d(o,1),i=d(i,-1),o&&o.length&&n.addClass(s,o),i&&i.length&&n.removeClass(s,i)}function f(e){if(t===!0||a.$index%2===t){var n=o(e||[]);if(p){if(!q(e,p)){var r=o(p);m(r,n)}}else l(n)}p=V(e)}var p;a.$watch(c[e],f,!0),c.$observe("class",function(t){f(a.$eval(c[e]))}),"ngClass"!==e&&a.$watch("$index",function(n,r){var i=1&n;if(i!==(1&r)){var s=o(a.$eval(c[e]));i===t?l(s):u(s)}})}}}]}function gr(e){function t(e,t,c){t===n?r("$pending",e,c):o("$pending",e,c),O(t)?t?(d(s.$error,e,c),u(s.$$success,e,c)):(u(s.$error,e,c),d(s.$$success,e,c)):(d(s.$error,e,c),d(s.$$success,e,c)),s.$pending?(i(Ji,!0),s.$valid=s.$invalid=n,a("",null)):(i(Ji,!1),s.$valid=vr(s.$error),s.$invalid=!s.$valid,a("",s.$valid));var l;l=s.$pending&&s.$pending[e]?n:s.$error[e]?!1:s.$$success[e]?!0:null,a(e,l),m.$setValidity(e,l,s)}function r(e,t,n){s[e]||(s[e]={}),u(s[e],t,n)}function o(e,t,r){s[e]&&d(s[e],t,r),vr(s[e])&&(s[e]=n)}function i(e,t){t&&!l[e]?(f.addClass(c,e),l[e]=!0):!t&&l[e]&&(f.removeClass(c,e),l[e]=!1)}function a(e,t){e=e?"-"+le(e,"-"):"",i(Wi+e,t===!0),i(Ki+e,t===!1)}var s=e.ctrl,c=e.$element,l={},u=e.set,d=e.unset,m=e.parentForm,f=e.$animate;l[Ki]=!(l[Wi]=c.hasClass(Wi)),s.$setValidity=t}function vr(e){if(e)for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}var $r=/^\/(.+)\/([a-z]*)$/,br="validity",Er=function(e){return w(e)?e.toLowerCase():e},yr=Object.prototype.hasOwnProperty,Mr=function(e){return w(e)?e.toUpperCase():e},wr=function(e){return w(e)?e.replace(/[A-Z]/g,function(e){return String.fromCharCode(32|e.charCodeAt(0))}):e},Cr=function(e){return w(e)?e.replace(/[a-z]/g,function(e){return String.fromCharCode(-33&e.charCodeAt(0))}):e};"i"!=="I".toLowerCase()&&(Er=wr,Mr=Cr);var Ar,xr,Tr,kr,Sr=[].slice,Nr=[].splice,_r=[].push,Hr=Object.prototype.toString,Or=Object.getPrototypeOf,Dr=r("ng"),Ir=e.angular||(e.angular={}),Rr=0;Ar=t.documentMode,h.$inject=[],g.$inject=[];var Pr,jr=Array.isArray,Lr=/^\[object (Uint8(Clamped)?)|(Uint16)|(Uint32)|(Int8)|(Int16)|(Int32)|(Float(32)|(64))Array\]$/,Fr=function(e){return w(e)?e.trim():e},Vr=function(e){return e.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},qr=function(){if(E(qr.isActive_))return qr.isActive_;var e=!(!t.querySelector("[ng-csp]")&&!t.querySelector("[data-ng-csp]"));if(!e)try{new Function("")}catch(n){e=!0}return qr.isActive_=e},Br=function(){if(E(Br.name_))return Br.name_;var e,n,r,o,i=Ur.length;for(n=0;i>n;++n)if(r=Ur[n],e=t.querySelector("["+r.replace(":","\\:")+"jq]")){o=e.getAttribute(r+"jq");break}return Br.name_=o},Ur=["ng-","data-ng-","ng:","x-ng-"],zr=/[A-Z]/g,Wr=!1,Kr=1,Yr=2,Gr=3,Xr=8,Zr=9,Jr=11,Qr={full:"1.4.3",major:1,minor:4,dot:3,codeName:"foam-acceleration"};ke.expando="ng339";var eo=ke.cache={},to=1,no=function(e,t,n){e.addEventListener(t,n,!1)},ro=function(e,t,n){e.removeEventListener(t,n,!1)};ke._data=function(e){return this.cache[e[this.expando]]||{}};var oo=/([\:\-\_]+(.))/g,io=/^moz([A-Z])/,ao={mouseleave:"mouseout",mouseenter:"mouseover"},so=r("jqLite"),co=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,lo=/<|&#?\w+;/,uo=/<([\w:]+)/,mo=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,fo={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};fo.optgroup=fo.option,fo.tbody=fo.tfoot=fo.colgroup=fo.caption=fo.thead,fo.th=fo.td;var po=ke.prototype={ready:function(n){function r(){o||(o=!0,n())}var o=!1;"complete"===t.readyState?setTimeout(r):(this.on("DOMContentLoaded",r),ke(e).on("load",r))},toString:function(){var e=[];return i(this,function(t){e.push(""+t)}),"["+e.join(", ")+"]"},eq:function(e){return xr(e>=0?this[e]:this[this.length+e])},length:0,push:_r,sort:[].sort,splice:[].splice},ho={};i("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(e){ho[Er(e)]=e});var go={};i("input,select,option,textarea,button,form,details".split(","),function(e){go[e]=!0});var vo={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};i({data:De,removeData:He,hasData:Ae},function(e,t){ke[t]=e}),i({data:De,inheritedData:Fe,scope:function(e){return xr.data(e,"$scope")||Fe(e.parentNode||e,["$isolateScope","$scope"])},isolateScope:function(e){return xr.data(e,"$isolateScope")||xr.data(e,"$isolateScopeNoTemplate")},controller:Le,injector:function(e){return Fe(e,"$injector")},removeAttr:function(e,t){e.removeAttribute(t)},hasClass:Ie,
css:function(e,t,n){return t=Me(t),E(n)?void(e.style[t]=n):e.style[t]},attr:function(e,t,r){var o=e.nodeType;if(o!==Gr&&o!==Yr&&o!==Xr){var i=Er(t);if(ho[i]){if(!E(r))return e[t]||(e.attributes.getNamedItem(t)||h).specified?i:n;r?(e[t]=!0,e.setAttribute(t,i)):(e[t]=!1,e.removeAttribute(i))}else if(E(r))e.setAttribute(t,r);else if(e.getAttribute){var a=e.getAttribute(t,2);return null===a?n:a}}},prop:function(e,t,n){return E(n)?void(e[t]=n):e[t]},text:function(){function e(e,t){if(b(t)){var n=e.nodeType;return n===Kr||n===Gr?e.textContent:""}e.textContent=t}return e.$dv="",e}(),val:function(e,t){if(b(t)){if(e.multiple&&"select"===j(e)){var n=[];return i(e.options,function(e){e.selected&&n.push(e.value||e.text)}),0===n.length?null:n}return e.value}e.value=t},html:function(e,t){return b(t)?e.innerHTML:(Ne(e,!0),void(e.innerHTML=t))},empty:Ve},function(e,t){ke.prototype[t]=function(t,r){var o,i,a=this.length;if(e!==Ve&&(2==e.length&&e!==Ie&&e!==Le?t:r)===n){if(y(t)){for(o=0;a>o;o++)if(e===De)e(this[o],t);else for(i in t)e(this[o],i,t[i]);return this}for(var s=e.$dv,c=s===n?Math.min(a,1):a,l=0;c>l;l++){var u=e(this[l],t,r);s=s?s+u:u}return s}for(o=0;a>o;o++)e(this[o],t,r);return this}}),i({removeData:He,on:function Sa(e,t,n,r){if(E(r))throw so("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(Ce(e)){var o=Oe(e,!0),i=o.events,a=o.handle;a||(a=o.handle=We(e,i));for(var s=t.indexOf(" ")>=0?t.split(" "):[t],c=s.length;c--;){t=s[c];var l=i[t];l||(i[t]=[],"mouseenter"===t||"mouseleave"===t?Sa(e,ao[t],function(e){var n=this,r=e.relatedTarget;(!r||r!==n&&!n.contains(r))&&a(e,t)}):"$destroy"!==t&&no(e,t,a),l=i[t]),l.push(n)}}},off:_e,one:function(e,t,n){e=xr(e),e.on(t,function r(){e.off(t,n),e.off(t,r)}),e.on(t,n)},replaceWith:function(e,t){var n,r=e.parentNode;Ne(e),i(new ke(t),function(t){n?r.insertBefore(t,n.nextSibling):r.replaceChild(t,e),n=t})},children:function(e){var t=[];return i(e.childNodes,function(e){e.nodeType===Kr&&t.push(e)}),t},contents:function(e){return e.contentDocument||e.childNodes||[]},append:function(e,t){var n=e.nodeType;if(n===Kr||n===Jr){t=new ke(t);for(var r=0,o=t.length;o>r;r++){var i=t[r];e.appendChild(i)}}},prepend:function(e,t){if(e.nodeType===Kr){var n=e.firstChild;i(new ke(t),function(t){e.insertBefore(t,n)})}},wrap:function(e,t){t=xr(t).eq(0).clone()[0];var n=e.parentNode;n&&n.replaceChild(t,e),t.appendChild(e)},remove:qe,detach:function(e){qe(e,!0)},after:function(e,t){var n=e,r=e.parentNode;t=new ke(t);for(var o=0,i=t.length;i>o;o++){var a=t[o];r.insertBefore(a,n.nextSibling),n=a}},addClass:Pe,removeClass:Re,toggleClass:function(e,t,n){t&&i(t.split(" "),function(t){var r=n;b(r)&&(r=!Ie(e,t)),(r?Pe:Re)(e,t)})},parent:function(e){var t=e.parentNode;return t&&t.nodeType!==Jr?t:null},next:function(e){return e.nextElementSibling},find:function(e,t){return e.getElementsByTagName?e.getElementsByTagName(t):[]},clone:Se,triggerHandler:function(e,t,n){var r,o,a,s=t.type||t,c=Oe(e),l=c&&c.events,u=l&&l[s];u&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return this.defaultPrevented===!0},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return this.immediatePropagationStopped===!0},stopPropagation:h,type:s,target:e},t.type&&(r=d(r,t)),o=V(u),a=n?[r].concat(n):[r],i(o,function(t){r.isImmediatePropagationStopped()||t.apply(e,a)}))}},function(e,t){ke.prototype[t]=function(t,n,r){for(var o,i=0,a=this.length;a>i;i++)b(o)?(o=e(this[i],t,n,r),E(o)&&(o=xr(o))):je(o,e(this[i],t,n,r));return E(o)?o:this},ke.prototype.bind=ke.prototype.on,ke.prototype.unbind=ke.prototype.off}),Ge.prototype={put:function(e,t){this[Ye(e,this.nextUid)]=t},get:function(e){return this[Ye(e,this.nextUid)]},remove:function(e){var t=this[e=Ye(e,this.nextUid)];return delete this[e],t}};var $o=[function(){this.$get=[function(){return Ge}]}],bo=/^function\s*[^\(]*\(\s*([^\)]*)\)/m,Eo=/,/,yo=/^\s*(_?)(\S+?)\1\s*$/,Mo=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,wo=r("$injector");Je.$$annotate=Ze;var Co=r("$animate"),Ao=1,xo="ng-animate",To=function(){this.$get=["$q","$$rAF",function(e,t){function n(){}return n.all=h,n.chain=h,n.prototype={end:h,cancel:h,resume:h,pause:h,complete:h,then:function(n,r){return e(function(e){t(function(){e()})}).then(n,r)}},n}]},ko=function(){var e=new Ge,t=[];this.$get=["$$AnimateRunner","$rootScope",function(n,r){function o(n,o,a){var s=e.get(n);s||(e.put(n,s={}),t.push(n)),o&&i(o.split(" "),function(e){e&&(s[e]=!0)}),a&&i(a.split(" "),function(e){e&&(s[e]=!1)}),t.length>1||r.$$postDigest(function(){i(t,function(t){var n=e.get(t);if(n){var r=nt(t.attr("class")),o="",a="";i(n,function(e,t){var n=!!r[t];e!==n&&(e?o+=(o.length?" ":"")+t:a+=(a.length?" ":"")+t)}),i(t,function(e){o&&Pe(e,o),a&&Re(e,a)}),e.remove(t)}}),t.length=0})}return{enabled:h,on:h,off:h,pin:h,push:function(e,t,r,i){return i&&i(),r=r||{},r.from&&e.css(r.from),r.to&&e.css(r.to),(r.addClass||r.removeClass)&&o(e,r.addClass,r.removeClass),new n}}}]},So=["$provide",function(e){var t=this;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw Co("notcsel","Expecting class selector starting with '.' got '{0}'.",n);var o=n+"-animation";t.$$registeredAnimations[n.substr(1)]=o,e.factory(o,r)},this.classNameFilter=function(e){if(1===arguments.length&&(this.$$classNameFilter=e instanceof RegExp?e:null,this.$$classNameFilter)){var t=new RegExp("(\\s+|\\/)"+xo+"(\\s+|\\/)");if(t.test(this.$$classNameFilter.toString()))throw Co("nongcls",'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',xo)}return this.$$classNameFilter},this.$get=["$$animateQueue",function(e){function t(e,t,n){if(n){var r=tt(n);!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(e):t.prepend(e)}return{on:e.on,off:e.off,pin:e.pin,enabled:e.enabled,cancel:function(e){e.end&&e.end()},enter:function(n,r,o,i){return r=r&&xr(r),o=o&&xr(o),r=r||o.parent(),t(n,r,o),e.push(n,"enter",rt(i))},move:function(n,r,o,i){return r=r&&xr(r),o=o&&xr(o),r=r||o.parent(),t(n,r,o),e.push(n,"move",rt(i))},leave:function(t,n){return e.push(t,"leave",rt(n),function(){t.remove()})},addClass:function(t,n,r){return r=rt(r),r.addClass=et(r.addclass,n),e.push(t,"addClass",r)},removeClass:function(t,n,r){return r=rt(r),r.removeClass=et(r.removeClass,n),e.push(t,"removeClass",r)},setClass:function(t,n,r,o){return o=rt(o),o.addClass=et(o.addClass,n),o.removeClass=et(o.removeClass,r),e.push(t,"setClass",o)},animate:function(t,n,r,o,i){return i=rt(i),i.from=i.from?d(i.from,n):n,i.to=i.to?d(i.to,r):r,o=o||"ng-inline-animate",i.tempClasses=et(i.tempClasses,o),e.push(t,"animate",i)}}}]}],No=r("$compile");ct.$inject=["$provide","$$sanitizeUriProvider"];var _o=/^((?:x|data)[\:\-_])/i,Ho=r("$controller"),Oo=/^(\S+)(\s+as\s+(\w+))?$/,Do="application/json",Io={"Content-Type":Do+";charset=utf-8"},Ro=/^\[|^\{(?!\{)/,Po={"[":/]$/,"{":/}$/},jo=/^\)\]\}',?\n/,Lo=Ir.$interpolateMinErr=r("$interpolate");Lo.throwNoconcat=function(e){throw Lo("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",e)},Lo.interr=function(e,t){return Lo("interr","Can't interpolate: {0}\n{1}",e,t.toString())};var Fo=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,Vo={http:80,https:443,ftp:21},qo=r("$location"),Bo={$$html5:!1,$$replace:!1,absUrl:Bt("$$absUrl"),url:function(e){if(b(e))return this.$$url;var t=Fo.exec(e);return(t[1]||""===e)&&this.path(decodeURIComponent(t[1])),(t[2]||t[1]||""===e)&&this.search(t[3]||""),this.hash(t[5]||""),this},protocol:Bt("$$protocol"),host:Bt("$$host"),port:Bt("$$port"),path:Ut("$$path",function(e){return e=null!==e?e.toString():"","/"==e.charAt(0)?e:"/"+e}),search:function(e,t){switch(arguments.length){case 0:return this.$$search;case 1:if(w(e)||C(e))e=e.toString(),this.$$search=ee(e);else{if(!y(e))throw qo("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");e=F(e,{}),i(e,function(t,n){null==t&&delete e[n]}),this.$$search=e}break;default:b(t)||null===t?delete this.$$search[e]:this.$$search[e]=t}return this.$$compose(),this},hash:Ut("$$hash",function(e){return null!==e?e.toString():""}),replace:function(){return this.$$replace=!0,this}};i([qt,Vt,Ft],function(e){e.prototype=Object.create(Bo),e.prototype.state=function(t){if(!arguments.length)return this.$$state;if(e!==Ft||!this.$$html5)throw qo("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=b(t)?null:t,this}});var Uo=r("$parse"),zo=Function.prototype.call,Wo=Function.prototype.apply,Ko=Function.prototype.bind,Yo=ge();i("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(e){Yo[e]=!0});var Go={n:"\n",f:"\f",r:"\r",t:"	",v:"","'":"'",'"':'"'},Xo=function(e){this.options=e};Xo.prototype={constructor:Xo,lex:function(e){for(this.text=e,this.index=0,this.tokens=[];this.index<this.text.length;){var t=this.text.charAt(this.index);if('"'===t||"'"===t)this.readString(t);else if(this.isNumber(t)||"."===t&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdent(t))this.readIdent();else if(this.is(t,"(){}[].,;:?"))this.tokens.push({index:this.index,text:t}),this.index++;else if(this.isWhitespace(t))this.index++;else{var n=t+this.peek(),r=n+this.peek(2),o=Yo[t],i=Yo[n],a=Yo[r];if(o||i||a){var s=a?r:i?n:t;this.tokens.push({index:this.index,text:s,operator:!0}),this.index+=s.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(e,t){return-1!==t.indexOf(e)},peek:function(e){var t=e||1;return this.index+t<this.text.length?this.text.charAt(this.index+t):!1},isNumber:function(e){return e>="0"&&"9">=e&&"string"==typeof e},isWhitespace:function(e){return" "===e||"\r"===e||"	"===e||"\n"===e||""===e||" "===e},isIdent:function(e){return e>="a"&&"z">=e||e>="A"&&"Z">=e||"_"===e||"$"===e},isExpOperator:function(e){return"-"===e||"+"===e||this.isNumber(e)},throwError:function(e,t,n){n=n||this.index;var r=E(t)?"s "+t+"-"+this.index+" ["+this.text.substring(t,n)+"]":" "+n;throw Uo("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",e,r,this.text)},readNumber:function(){for(var e="",t=this.index;this.index<this.text.length;){var n=Er(this.text.charAt(this.index));if("."==n||this.isNumber(n))e+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))e+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==e.charAt(e.length-1))e+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=e.charAt(e.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:t,text:e,constant:!0,value:Number(e)})},readIdent:function(){for(var e=this.index;this.index<this.text.length;){var t=this.text.charAt(this.index);if(!this.isIdent(t)&&!this.isNumber(t))break;this.index++}this.tokens.push({index:e,text:this.text.slice(e,this.index),identifier:!0})},readString:function(e){var t=this.index;this.index++;for(var n="",r=e,o=!1;this.index<this.text.length;){var i=this.text.charAt(this.index);if(r+=i,o){if("u"===i){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{var s=Go[i];n+=s||i}o=!1}else if("\\"===i)o=!0;else{if(i===e)return this.index++,void this.tokens.push({index:t,text:r,constant:!0,value:n});n+=i}this.index++}this.throwError("Unterminated quote",t)}};var Zo=function(e,t){this.lexer=e,this.options=t};Zo.Program="Program",Zo.ExpressionStatement="ExpressionStatement",Zo.AssignmentExpression="AssignmentExpression",Zo.ConditionalExpression="ConditionalExpression",Zo.LogicalExpression="LogicalExpression",Zo.BinaryExpression="BinaryExpression",Zo.UnaryExpression="UnaryExpression",Zo.CallExpression="CallExpression",Zo.MemberExpression="MemberExpression",Zo.Identifier="Identifier",Zo.Literal="Literal",Zo.ArrayExpression="ArrayExpression",Zo.Property="Property",Zo.ObjectExpression="ObjectExpression",Zo.ThisExpression="ThisExpression",Zo.NGValueParameter="NGValueParameter",Zo.prototype={ast:function(e){this.text=e,this.tokens=this.lexer.lex(e);var t=this.program();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),t},program:function(){for(var e=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&e.push(this.expressionStatement()),!this.expect(";"))return{type:Zo.Program,body:e}},expressionStatement:function(){return{type:Zo.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var e,t=this.expression();e=this.expect("|");)t=this.filter(t);return t},expression:function(){return this.assignment()},assignment:function(){var e=this.ternary();return this.expect("=")&&(e={type:Zo.AssignmentExpression,left:e,right:this.assignment(),operator:"="}),e},ternary:function(){var e,t,n=this.logicalOR();return this.expect("?")&&(e=this.expression(),this.consume(":"))?(t=this.expression(),{type:Zo.ConditionalExpression,test:n,alternate:e,consequent:t}):n},logicalOR:function(){for(var e=this.logicalAND();this.expect("||");)e={type:Zo.LogicalExpression,operator:"||",left:e,right:this.logicalAND()};return e},logicalAND:function(){for(var e=this.equality();this.expect("&&");)e={type:Zo.LogicalExpression,operator:"&&",left:e,right:this.equality()};return e},equality:function(){for(var e,t=this.relational();e=this.expect("==","!=","===","!==");)t={type:Zo.BinaryExpression,operator:e.text,left:t,right:this.relational()};return t},relational:function(){for(var e,t=this.additive();e=this.expect("<",">","<=",">=");)t={type:Zo.BinaryExpression,operator:e.text,left:t,right:this.additive()};return t},additive:function(){for(var e,t=this.multiplicative();e=this.expect("+","-");)t={type:Zo.BinaryExpression,operator:e.text,left:t,right:this.multiplicative()};return t},multiplicative:function(){for(var e,t=this.unary();e=this.expect("*","/","%");)t={type:Zo.BinaryExpression,operator:e.text,left:t,right:this.unary()};return t},unary:function(){var e;return(e=this.expect("+","-","!"))?{type:Zo.UnaryExpression,operator:e.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var e;this.expect("(")?(e=this.filterChain(),this.consume(")")):this.expect("[")?e=this.arrayDeclaration():this.expect("{")?e=this.object():this.constants.hasOwnProperty(this.peek().text)?e=F(this.constants[this.consume().text]):this.peek().identifier?e=this.identifier():this.peek().constant?e=this.constant():this.throwError("not a primary expression",this.peek());for(var t;t=this.expect("(","[",".");)"("===t.text?(e={type:Zo.CallExpression,callee:e,arguments:this.parseArguments()},this.consume(")")):"["===t.text?(e={type:Zo.MemberExpression,object:e,property:this.expression(),computed:!0},this.consume("]")):"."===t.text?e={type:Zo.MemberExpression,object:e,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return e},filter:function(e){for(var t=[e],n={type:Zo.CallExpression,callee:this.identifier(),arguments:t,filter:!0};this.expect(":");)t.push(this.expression());return n},parseArguments:function(){var e=[];if(")"!==this.peekToken().text)do e.push(this.expression());while(this.expect(","));return e},identifier:function(){var e=this.consume();return e.identifier||this.throwError("is not a valid identifier",e),{type:Zo.Identifier,name:e.text}},constant:function(){return{type:Zo.Literal,value:this.consume().value}},arrayDeclaration:function(){var e=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;e.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:Zo.ArrayExpression,elements:e}},object:function(){var e,t=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;e={type:Zo.Property,kind:"init"},this.peek().constant?e.key=this.constant():this.peek().identifier?e.key=this.identifier():this.throwError("invalid key",this.peek()),this.consume(":"),e.value=this.expression(),t.push(e)}while(this.expect(","));return this.consume("}"),{type:Zo.ObjectExpression,properties:t}},throwError:function(e,t){throw Uo("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",t.text,e,t.index+1,this.text,this.text.substring(t.index))},consume:function(e){if(0===this.tokens.length)throw Uo("ueoe","Unexpected end of expression: {0}",this.text);var t=this.expect(e);return t||this.throwError("is unexpected, expecting ["+e+"]",this.peek()),t},peekToken:function(){if(0===this.tokens.length)throw Uo("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(e,t,n,r){return this.peekAhead(0,e,t,n,r)},peekAhead:function(e,t,n,r,o){if(this.tokens.length>e){var i=this.tokens[e],a=i.text;if(a===t||a===n||a===r||a===o||!t&&!n&&!r&&!o)return i}return!1},expect:function(e,t,n,r){var o=this.peek(e,t,n,r);return o?(this.tokens.shift(),o):!1},constants:{"true":{type:Zo.Literal,value:!0},"false":{type:Zo.Literal,value:!1},"null":{type:Zo.Literal,value:null},undefined:{type:Zo.Literal,value:n},"this":{type:Zo.ThisExpression}}},an.prototype={compile:function(e,t){var r=this,o=this.astBuilder.ast(e);this.state={nextId:0,filters:{},expensiveChecks:t,fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},Qt(o,r.$filter);var a,s="";if(this.stage="assign",a=nn(o)){this.state.computing="assign";var c=this.nextId();this.recurse(a,c),s="fn.assign="+this.generateFunction("assign","s,v,l")}var l=en(o.body);r.stage="inputs",i(l,function(e,t){var n="fn"+t;r.state[n]={vars:[],body:[],own:{}},r.state.computing=n;var o=r.nextId();r.recurse(e,o),r.return_(o),r.state.inputs.push(n),e.watchId=t}),this.state.computing="fn",this.stage="main",this.recurse(o);var u='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+s+this.watchFns()+"return fn;",d=new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","ifDefined","plus","text",u)(this.$filter,Kt,Yt,Gt,Xt,Zt,e);return this.state=this.stage=n,d.literal=rn(o),d.constant=on(o),d},USE:"use",STRICT:"strict",watchFns:function(){var e=[],t=this.state.inputs,n=this;return i(t,function(t){e.push("var "+t+"="+n.generateFunction(t,"s"))}),t.length&&e.push("fn.inputs=["+t.join(",")+"];"),e.join("")},generateFunction:function(e,t){return"function("+t+"){"+this.varsPrefix(e)+this.body(e)+"};"},filterPrefix:function(){var e=[],t=this;return i(this.state.filters,function(n,r){e.push(n+"=$filter("+t.escape(r)+")")}),e.length?"var "+e.join(",")+";":""},varsPrefix:function(e){return this.state[e].vars.length?"var "+this.state[e].vars.join(",")+";":""},body:function(e){return this.state[e].body.join("")},recurse:function(e,t,r,o,a,s){var c,l,u,d,m=this;if(o=o||h,!s&&E(e.watchId))return t=t||this.nextId(),void this.if_("i",this.lazyAssign(t,this.computedMember("i",e.watchId)),this.lazyRecurse(e,t,r,o,a,!0));switch(e.type){case Zo.Program:i(e.body,function(t,r){m.recurse(t.expression,n,n,function(e){l=e}),r!==e.body.length-1?m.current().body.push(l,";"):m.return_(l)});break;case Zo.Literal:d=this.escape(e.value),this.assign(t,d),o(d);break;case Zo.UnaryExpression:this.recurse(e.argument,n,n,function(e){l=e}),d=e.operator+"("+this.ifDefined(l,0)+")",this.assign(t,d),o(d);break;case Zo.BinaryExpression:this.recurse(e.left,n,n,function(e){c=e}),this.recurse(e.right,n,n,function(e){l=e}),d="+"===e.operator?this.plus(c,l):"-"===e.operator?this.ifDefined(c,0)+e.operator+this.ifDefined(l,0):"("+c+")"+e.operator+"("+l+")",this.assign(t,d),o(d);break;case Zo.LogicalExpression:t=t||this.nextId(),m.recurse(e.left,t),m.if_("&&"===e.operator?t:m.not(t),m.lazyRecurse(e.right,t)),o(t);break;case Zo.ConditionalExpression:t=t||this.nextId(),m.recurse(e.test,t),m.if_(t,m.lazyRecurse(e.alternate,t),m.lazyRecurse(e.consequent,t)),o(t);break;case Zo.Identifier:t=t||this.nextId(),r&&(r.context="inputs"===m.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",e.name)+"?l:s"),r.computed=!1,r.name=e.name),Kt(e.name),m.if_("inputs"===m.stage||m.not(m.getHasOwnProperty("l",e.name)),function(){m.if_("inputs"===m.stage||"s",function(){a&&1!==a&&m.if_(m.not(m.nonComputedMember("s",e.name)),m.lazyAssign(m.nonComputedMember("s",e.name),"{}")),m.assign(t,m.nonComputedMember("s",e.name))})},t&&m.lazyAssign(t,m.nonComputedMember("l",e.name))),(m.state.expensiveChecks||ln(e.name))&&m.addEnsureSafeObject(t),o(t);break;case Zo.MemberExpression:c=r&&(r.context=this.nextId())||this.nextId(),t=t||this.nextId(),m.recurse(e.object,c,n,function(){m.if_(m.notNull(c),function(){e.computed?(l=m.nextId(),m.recurse(e.property,l),m.addEnsureSafeMemberName(l),a&&1!==a&&m.if_(m.not(m.computedMember(c,l)),m.lazyAssign(m.computedMember(c,l),"{}")),d=m.ensureSafeObject(m.computedMember(c,l)),m.assign(t,d),r&&(r.computed=!0,r.name=l)):(Kt(e.property.name),a&&1!==a&&m.if_(m.not(m.nonComputedMember(c,e.property.name)),m.lazyAssign(m.nonComputedMember(c,e.property.name),"{}")),d=m.nonComputedMember(c,e.property.name),(m.state.expensiveChecks||ln(e.property.name))&&(d=m.ensureSafeObject(d)),m.assign(t,d),r&&(r.computed=!1,r.name=e.property.name))},function(){m.assign(t,"undefined")}),o(t)},!!a);break;case Zo.CallExpression:t=t||this.nextId(),e.filter?(l=m.filter(e.callee.name),u=[],i(e.arguments,function(e){var t=m.nextId();m.recurse(e,t),u.push(t)}),d=l+"("+u.join(",")+")",m.assign(t,d),o(t)):(l=m.nextId(),c={},u=[],m.recurse(e.callee,l,c,function(){m.if_(m.notNull(l),function(){m.addEnsureSafeFunction(l),i(e.arguments,function(e){m.recurse(e,m.nextId(),n,function(e){u.push(m.ensureSafeObject(e))})}),c.name?(m.state.expensiveChecks||m.addEnsureSafeObject(c.context),d=m.member(c.context,c.name,c.computed)+"("+u.join(",")+")"):d=l+"("+u.join(",")+")",d=m.ensureSafeObject(d),m.assign(t,d)},function(){m.assign(t,"undefined")}),o(t)}));break;case Zo.AssignmentExpression:if(l=this.nextId(),c={},!tn(e.left))throw Uo("lval","Trying to assing a value to a non l-value");this.recurse(e.left,n,c,function(){m.if_(m.notNull(c.context),function(){m.recurse(e.right,l),m.addEnsureSafeObject(m.member(c.context,c.name,c.computed)),d=m.member(c.context,c.name,c.computed)+e.operator+l,m.assign(t,d),o(t||d)})},1);break;case Zo.ArrayExpression:u=[],i(e.elements,function(e){m.recurse(e,m.nextId(),n,function(e){u.push(e)})}),d="["+u.join(",")+"]",this.assign(t,d),o(d);break;case Zo.ObjectExpression:u=[],i(e.properties,function(e){m.recurse(e.value,m.nextId(),n,function(t){u.push(m.escape(e.key.type===Zo.Identifier?e.key.name:""+e.key.value)+":"+t)})}),d="{"+u.join(",")+"}",this.assign(t,d),o(d);break;case Zo.ThisExpression:this.assign(t,"s"),o("s");break;case Zo.NGValueParameter:this.assign(t,"v"),o("v")}},getHasOwnProperty:function(e,t){var n=e+"."+t,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,e+"&&("+this.escape(t)+" in "+e+")")),r[n]},assign:function(e,t){return e?(this.current().body.push(e,"=",t,";"),e):void 0},filter:function(e){return this.state.filters.hasOwnProperty(e)||(this.state.filters[e]=this.nextId(!0)),this.state.filters[e]},ifDefined:function(e,t){return"ifDefined("+e+","+this.escape(t)+")"},plus:function(e,t){return"plus("+e+","+t+")"},return_:function(e){this.current().body.push("return ",e,";")},if_:function(e,t,n){if(e===!0)t();else{var r=this.current().body;r.push("if(",e,"){"),t(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(e){return"!("+e+")"},notNull:function(e){return e+"!=null"},nonComputedMember:function(e,t){return e+"."+t},computedMember:function(e,t){return e+"["+t+"]"},member:function(e,t,n){return n?this.computedMember(e,t):this.nonComputedMember(e,t)},addEnsureSafeObject:function(e){this.current().body.push(this.ensureSafeObject(e),";")},addEnsureSafeMemberName:function(e){this.current().body.push(this.ensureSafeMemberName(e),";")},addEnsureSafeFunction:function(e){this.current().body.push(this.ensureSafeFunction(e),";")},ensureSafeObject:function(e){return"ensureSafeObject("+e+",text)"},ensureSafeMemberName:function(e){return"ensureSafeMemberName("+e+",text)"},ensureSafeFunction:function(e){return"ensureSafeFunction("+e+",text)"},lazyRecurse:function(e,t,n,r,o,i){var a=this;return function(){a.recurse(e,t,n,r,o,i)}},lazyAssign:function(e,t){var n=this;return function(){n.assign(e,t)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)},escape:function(e){if(w(e))return"'"+e.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(C(e))return e.toString();if(e===!0)return"true";if(e===!1)return"false";if(null===e)return"null";if("undefined"==typeof e)return"undefined";throw Uo("esc","IMPOSSIBLE")},nextId:function(e,t){var n="v"+this.state.nextId++;return e||this.current().vars.push(n+(t?"="+t:"")),n},current:function(){return this.state[this.state.computing]}},sn.prototype={compile:function(e,t){var n=this,r=this.astBuilder.ast(e);this.expression=e,this.expensiveChecks=t,Qt(r,n.$filter);var o,a;(o=nn(r))&&(a=this.recurse(o));var s,c=en(r.body);c&&(s=[],i(c,function(e,t){var r=n.recurse(e);e.input=r,s.push(r),e.watchId=t}));var l=[];i(r.body,function(e){l.push(n.recurse(e.expression))});var u=0===r.body.length?function(){}:1===r.body.length?l[0]:function(e,t){var n;return i(l,function(r){n=r(e,t)}),n};return a&&(u.assign=function(e,t,n){return a(e,n,t)}),s&&(u.inputs=s),u.literal=rn(r),u.constant=on(r),u},recurse:function(e,t,r){var o,a,s,c=this;if(e.input)return this.inputs(e.input,e.watchId);switch(e.type){case Zo.Literal:return this.value(e.value,t);case Zo.UnaryExpression:return a=this.recurse(e.argument),this["unary"+e.operator](a,t);case Zo.BinaryExpression:return o=this.recurse(e.left),a=this.recurse(e.right),this["binary"+e.operator](o,a,t);case Zo.LogicalExpression:return o=this.recurse(e.left),a=this.recurse(e.right),this["binary"+e.operator](o,a,t);case Zo.ConditionalExpression:return this["ternary?:"](this.recurse(e.test),this.recurse(e.alternate),this.recurse(e.consequent),t);case Zo.Identifier:return Kt(e.name,c.expression),c.identifier(e.name,c.expensiveChecks||ln(e.name),t,r,c.expression);case Zo.MemberExpression:return o=this.recurse(e.object,!1,!!r),e.computed||(Kt(e.property.name,c.expression),a=e.property.name),e.computed&&(a=this.recurse(e.property)),e.computed?this.computedMember(o,a,t,r,c.expression):this.nonComputedMember(o,a,c.expensiveChecks,t,r,c.expression);case Zo.CallExpression:return s=[],i(e.arguments,function(e){s.push(c.recurse(e))}),e.filter&&(a=this.$filter(e.callee.name)),e.filter||(a=this.recurse(e.callee,!0)),e.filter?function(e,r,o,i){for(var c=[],l=0;l<s.length;++l)c.push(s[l](e,r,o,i));var u=a.apply(n,c,i);return t?{context:n,name:n,value:u}:u}:function(e,n,r,o){var i,l=a(e,n,r,o);if(null!=l.value){Yt(l.context,c.expression),Gt(l.value,c.expression);for(var u=[],d=0;d<s.length;++d)u.push(Yt(s[d](e,n,r,o),c.expression));i=Yt(l.value.apply(l.context,u),c.expression)}return t?{value:i}:i};case Zo.AssignmentExpression:return o=this.recurse(e.left,!0,1),a=this.recurse(e.right),function(e,n,r,i){var s=o(e,n,r,i),l=a(e,n,r,i);return Yt(s.value,c.expression),s.context[s.name]=l,t?{value:l}:l};case Zo.ArrayExpression:return s=[],i(e.elements,function(e){s.push(c.recurse(e))}),function(e,n,r,o){for(var i=[],a=0;a<s.length;++a)i.push(s[a](e,n,r,o));return t?{value:i}:i};case Zo.ObjectExpression:return s=[],i(e.properties,function(e){s.push({key:e.key.type===Zo.Identifier?e.key.name:""+e.key.value,value:c.recurse(e.value)})}),function(e,n,r,o){for(var i={},a=0;a<s.length;++a)i[s[a].key]=s[a].value(e,n,r,o);return t?{value:i}:i};case Zo.ThisExpression:return function(e){return t?{value:e}:e};case Zo.NGValueParameter:return function(e,n,r,o){return t?{value:r}:r}}},"unary+":function(e,t){return function(n,r,o,i){var a=e(n,r,o,i);return a=E(a)?+a:0,t?{value:a}:a}},"unary-":function(e,t){return function(n,r,o,i){var a=e(n,r,o,i);return a=E(a)?-a:0,t?{value:a}:a}},"unary!":function(e,t){return function(n,r,o,i){var a=!e(n,r,o,i);return t?{value:a}:a}},"binary+":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a),c=t(r,o,i,a),l=Zt(s,c);return n?{value:l}:l}},"binary-":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a),c=t(r,o,i,a),l=(E(s)?s:0)-(E(c)?c:0);return n?{value:l}:l}},"binary*":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)*t(r,o,i,a);return n?{value:s}:s}},"binary/":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)/t(r,o,i,a);return n?{value:s}:s}},"binary%":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)%t(r,o,i,a);return n?{value:s}:s}},"binary===":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)===t(r,o,i,a);return n?{value:s}:s}},"binary!==":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)!==t(r,o,i,a);return n?{value:s}:s}},"binary==":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)==t(r,o,i,a);return n?{value:s}:s}},"binary!=":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)!=t(r,o,i,a);return n?{value:s}:s}},"binary<":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)<t(r,o,i,a);return n?{value:s}:s}},"binary>":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)>t(r,o,i,a);return n?{value:s}:s}},"binary<=":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)<=t(r,o,i,a);return n?{value:s}:s}},"binary>=":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)>=t(r,o,i,a);return n?{value:s}:s}},"binary&&":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)&&t(r,o,i,a);return n?{value:s}:s}},"binary||":function(e,t,n){return function(r,o,i,a){var s=e(r,o,i,a)||t(r,o,i,a);return n?{value:s}:s}},"ternary?:":function(e,t,n,r){return function(o,i,a,s){var c=e(o,i,a,s)?t(o,i,a,s):n(o,i,a,s);return r?{value:c}:c}},value:function(e,t){return function(){return t?{context:n,name:n,value:e}:e}},identifier:function(e,t,r,o,i){return function(a,s,c,l){var u=s&&e in s?s:a;o&&1!==o&&u&&!u[e]&&(u[e]={});var d=u?u[e]:n;return t&&Yt(d,i),r?{context:u,name:e,value:d}:d}},computedMember:function(e,t,n,r,o){return function(i,a,s,c){var l,u,d=e(i,a,s,c);return null!=d&&(l=t(i,a,s,c),Kt(l,o),r&&1!==r&&d&&!d[l]&&(d[l]={}),u=d[l],Yt(u,o)),n?{context:d,name:l,value:u}:u}},nonComputedMember:function(e,t,r,o,i,a){return function(s,c,l,u){var d=e(s,c,l,u);i&&1!==i&&d&&!d[t]&&(d[t]={});var m=null!=d?d[t]:n;return(r||ln(t))&&Yt(m,a),o?{context:d,name:t,value:m}:m}},inputs:function(e,t){return function(n,r,o,i){return i?i[t]:e(n,r,o)}}};var Jo=function(e,t,n){this.lexer=e,this.$filter=t,this.options=n,this.ast=new Zo(this.lexer),this.astCompiler=n.csp?new sn(this.ast,t):new an(this.ast,t)};Jo.prototype={constructor:Jo,parse:function(e){return this.astCompiler.compile(e,this.options.expensiveChecks)}};var Qo=(ge(),ge(),Object.prototype.valueOf),ei=r("$sce"),ti={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},No=r("$compile"),ni=t.createElement("a"),ri=xn(e.location.href);Sn.$inject=["$document"],_n.$inject=["$provide"],Rn.$inject=["$locale"],Pn.$inject=["$locale"];var oi=".",ii={yyyy:Fn("FullYear",4),yy:Fn("FullYear",2,0,!0),y:Fn("FullYear",1),MMMM:Vn("Month"),MMM:Vn("Month",!0),MM:Fn("Month",2,1),M:Fn("Month",1,1),dd:Fn("Date",2),d:Fn("Date",1),HH:Fn("Hours",2),H:Fn("Hours",1),hh:Fn("Hours",2,-12),h:Fn("Hours",1,-12),mm:Fn("Minutes",2),m:Fn("Minutes",1),ss:Fn("Seconds",2),s:Fn("Seconds",1),sss:Fn("Milliseconds",3),EEEE:Vn("Day"),EEE:Vn("Day",!0),a:Wn,Z:qn,ww:zn(2),w:zn(1),G:Kn,GG:Kn,GGG:Kn,GGGG:Yn},ai=/((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,si=/^\-?\d+$/;Gn.$inject=["$locale"];var ci=v(Er),li=v(Mr);Jn.$inject=["$parse"];var ui=v({restrict:"E",compile:function(e,t){return t.href||t.xlinkHref?void 0:function(e,t){if("a"===t[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===Hr.call(t.prop("href"))?"xlink:href":"href";t.on("click",function(e){
t.attr(n)||e.preventDefault()})}}}}),di={};i(ho,function(e,t){function n(e,n,o){e.$watch(o[r],function(e){o.$set(t,!!e)})}if("multiple"!=e){var r=lt("ng-"+t),o=n;"checked"===e&&(o=function(e,t,o){o.ngModel!==o[r]&&n(e,t,o)}),di[r]=function(){return{restrict:"A",priority:100,link:o}}}}),i(vo,function(e,t){di[t]=function(){return{priority:100,link:function(e,n,r){if("ngPattern"===t&&"/"==r.ngPattern.charAt(0)){var o=r.ngPattern.match($r);if(o)return void r.$set("ngPattern",new RegExp(o[1],o[2]))}e.$watch(r[t],function(e){r.$set(t,e)})}}}}),i(["src","srcset","href"],function(e){var t=lt("ng-"+e);di[t]=function(){return{priority:99,link:function(n,r,o){var i=e,a=e;"href"===e&&"[object SVGAnimatedString]"===Hr.call(r.prop("href"))&&(a="xlinkHref",o.$attr[a]="xlink:href",i=null),o.$observe(t,function(t){return t?(o.$set(a,t),void(Ar&&i&&r.prop(i,o[a]))):void("href"===e&&o.$set(a,null))})}}}});var mi={$addControl:h,$$renameControl:er,$removeControl:h,$setValidity:h,$setDirty:h,$setPristine:h,$setSubmitted:h},fi="ng-submitted";tr.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var pi=function(e){return["$timeout",function(t){var r={name:"form",restrict:e?"EAC":"E",controller:tr,compile:function(r,o){r.addClass(Yi).addClass(Wi);var i=o.name?"name":e&&o.ngForm?"ngForm":!1;return{pre:function(e,r,o,a){if(!("action"in o)){var s=function(t){e.$apply(function(){a.$commitViewValue(),a.$setSubmitted()}),t.preventDefault()};no(r[0],"submit",s),r.on("$destroy",function(){t(function(){ro(r[0],"submit",s)},0,!1)})}var c=a.$$parentForm;i&&(cn(e,a.$name,a,a.$name),o.$observe(i,function(t){a.$name!==t&&(cn(e,a.$name,n,a.$name),c.$$renameControl(a,t),cn(e,a.$name,a,a.$name))})),r.on("$destroy",function(){c.$removeControl(a),i&&cn(e,o[i],n,a.$name),d(a,mi)})}}}};return r}]},hi=pi(),gi=pi(!0),vi=/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,$i=/^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/,bi=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,Ei=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,yi=/^(\d{4})-(\d{2})-(\d{2})$/,Mi=/^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,wi=/^(\d{4})-W(\d\d)$/,Ci=/^(\d{4})-(\d\d)$/,Ai=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,xi={text:rr,date:sr("date",yi,ar(yi,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":sr("datetimelocal",Mi,ar(Mi,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:sr("time",Ai,ar(Ai,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:sr("week",wi,ir,"yyyy-Www"),month:sr("month",Ci,ar(Ci,["yyyy","MM"]),"yyyy-MM"),number:lr,url:ur,email:dr,radio:mr,checkbox:pr,hidden:h,button:h,submit:h,reset:h,file:h},Ti=["$browser","$sniffer","$filter","$parse",function(e,t,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(o,i,a,s){s[0]&&(xi[Er(a.type)]||xi.text)(o,i,a,s[0],t,e,n,r)}}}}],ki=/^(true|false|\d+)$/,Si=function(){return{restrict:"A",priority:100,compile:function(e,t){return ki.test(t.ngValue)?function(e,t,n){n.$set("value",e.$eval(n.ngValue))}:function(e,t,n){e.$watch(n.ngValue,function(e){n.$set("value",e)})}}}},Ni=["$compile",function(e){return{restrict:"AC",compile:function(t){return e.$$addBindingClass(t),function(t,r,o){e.$$addBindingInfo(r,o.ngBind),r=r[0],t.$watch(o.ngBind,function(e){r.textContent=e===n?"":e})}}}}],_i=["$interpolate","$compile",function(e,t){return{compile:function(r){return t.$$addBindingClass(r),function(r,o,i){var a=e(o.attr(i.$attr.ngBindTemplate));t.$$addBindingInfo(o,a.expressions),o=o[0],i.$observe("ngBindTemplate",function(e){o.textContent=e===n?"":e})}}}}],Hi=["$sce","$parse","$compile",function(e,t,n){return{restrict:"A",compile:function(r,o){var i=t(o.ngBindHtml),a=t(o.ngBindHtml,function(e){return(e||"").toString()});return n.$$addBindingClass(r),function(t,r,o){n.$$addBindingInfo(r,o.ngBindHtml),t.$watch(a,function(){r.html(e.getTrustedHtml(i(t))||"")})}}}}],Oi=v({restrict:"A",require:"ngModel",link:function(e,t,n,r){r.$viewChangeListeners.push(function(){e.$eval(n.ngChange)})}}),Di=hr("",!0),Ii=hr("Odd",0),Ri=hr("Even",1),Pi=Qn({compile:function(e,t){t.$set("ngCloak",n),e.removeClass("ng-cloak")}}),ji=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],Li={},Fi={blur:!0,focus:!0};i("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(e){var t=lt("ng-"+e);Li[t]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(o,i){var a=n(i[t],null,!0);return function(t,n){n.on(e,function(n){var o=function(){a(t,{$event:n})};Fi[e]&&r.$$phase?t.$evalAsync(o):t.$apply(o)})}}}}]});var Vi=["$animate",function(e){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,o,i,a){var s,c,l;n.$watch(o.ngIf,function(n){n?c||a(function(n,i){c=i,n[n.length++]=t.createComment(" end ngIf: "+o.ngIf+" "),s={clone:n},e.enter(n,r.parent(),r)}):(l&&(l.remove(),l=null),c&&(c.$destroy(),c=null),s&&(l=he(s.clone),e.leave(l).then(function(){l=null}),s=null))})}}}],qi=["$templateRequest","$anchorScroll","$animate",function(e,t,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:Ir.noop,compile:function(r,o){var i=o.ngInclude||o.src,a=o.onload||"",s=o.autoscroll;return function(r,o,c,l,u){var d,m,f,p=0,h=function(){m&&(m.remove(),m=null),d&&(d.$destroy(),d=null),f&&(n.leave(f).then(function(){m=null}),m=f,f=null)};r.$watch(i,function(i){var c=function(){!E(s)||s&&!r.$eval(s)||t()},m=++p;i?(e(i,!0).then(function(e){if(m===p){var t=r.$new();l.template=e;var s=u(t,function(e){h(),n.enter(e,null,o).then(c)});d=t,f=s,d.$emit("$includeContentLoaded",i),r.$eval(a)}},function(){m===p&&(h(),r.$emit("$includeContentError",i))}),r.$emit("$includeContentRequested",i)):(h(),l.template=null)})}}}}],Bi=["$compile",function(e){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,o,i){return/SVG/.test(r[0].toString())?(r.empty(),void e(xe(i.template,t).childNodes)(n,function(e){r.append(e)},{futureParentElement:r})):(r.html(i.template),void e(r.contents())(n))}}}],Ui=Qn({priority:450,compile:function(){return{pre:function(e,t,n){e.$eval(n.ngInit)}}}}),zi=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(e,t,r,o){var a=t.attr(r.$attr.ngList)||", ",s="false"!==r.ngTrim,c=s?Fr(a):a,l=function(e){if(!b(e)){var t=[];return e&&i(e.split(c),function(e){e&&t.push(s?Fr(e):e)}),t}};o.$parsers.push(l),o.$formatters.push(function(e){return jr(e)?e.join(a):n}),o.$isEmpty=function(e){return!e||!e.length}}}},Wi="ng-valid",Ki="ng-invalid",Yi="ng-pristine",Gi="ng-dirty",Xi="ng-untouched",Zi="ng-touched",Ji="ng-pending",Qi=new r("ngModel"),ea=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(e,t,r,o,a,s,c,l,u,d){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=n,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=n,this.$name=d(r.name||"",!1)(e);var m,f=a(r.ngModel),p=f.assign,g=f,v=p,$=null,y=this;this.$$setOptions=function(e){if(y.$options=e,e&&e.getterSetter){var t=a(r.ngModel+"()"),n=a(r.ngModel+"($$$p)");g=function(e){var n=f(e);return x(n)&&(n=t(e)),n},v=function(e,t){x(f(e))?n(e,{$$$p:y.$modelValue}):p(e,y.$modelValue)}}else if(!f.assign)throw Qi("nonassign","Expression '{0}' is non-assignable. Element: {1}",r.ngModel,J(o))},this.$render=h,this.$isEmpty=function(e){return b(e)||""===e||null===e||e!==e};var M=o.inheritedData("$formController")||mi,w=0;gr({ctrl:this,$element:o,set:function(e,t){e[t]=!0},unset:function(e,t){delete e[t]},parentForm:M,$animate:s}),this.$setPristine=function(){y.$dirty=!1,y.$pristine=!0,s.removeClass(o,Gi),s.addClass(o,Yi)},this.$setDirty=function(){y.$dirty=!0,y.$pristine=!1,s.removeClass(o,Yi),s.addClass(o,Gi),M.$setDirty()},this.$setUntouched=function(){y.$touched=!1,y.$untouched=!0,s.setClass(o,Xi,Zi)},this.$setTouched=function(){y.$touched=!0,y.$untouched=!1,s.setClass(o,Zi,Xi)},this.$rollbackViewValue=function(){c.cancel($),y.$viewValue=y.$$lastCommittedViewValue,y.$render()},this.$validate=function(){if(!C(y.$modelValue)||!isNaN(y.$modelValue)){var e=y.$$lastCommittedViewValue,t=y.$$rawModelValue,r=y.$valid,o=y.$modelValue,i=y.$options&&y.$options.allowInvalid;y.$$runValidators(t,e,function(e){i||r===e||(y.$modelValue=e?t:n,y.$modelValue!==o&&y.$$writeModelToScope())})}},this.$$runValidators=function(e,t,r){function o(){var e=y.$$parserName||"parse";return m!==n?(m||(i(y.$validators,function(e,t){c(t,null)}),i(y.$asyncValidators,function(e,t){c(t,null)})),c(e,m),m):(c(e,null),!0)}function a(){var n=!0;return i(y.$validators,function(r,o){var i=r(e,t);n=n&&i,c(o,i)}),n?!0:(i(y.$asyncValidators,function(e,t){c(t,null)}),!1)}function s(){var r=[],o=!0;i(y.$asyncValidators,function(i,a){var s=i(e,t);if(!D(s))throw Qi("$asyncValidators","Expected asynchronous validator to return a promise but got '{0}' instead.",s);c(a,n),r.push(s.then(function(){c(a,!0)},function(e){o=!1,c(a,!1)}))}),r.length?u.all(r).then(function(){l(o)},h):l(!0)}function c(e,t){d===w&&y.$setValidity(e,t)}function l(e){d===w&&r(e)}w++;var d=w;return o()&&a()?void s():void l(!1)},this.$commitViewValue=function(){var e=y.$viewValue;c.cancel($),(y.$$lastCommittedViewValue!==e||""===e&&y.$$hasNativeValidators)&&(y.$$lastCommittedViewValue=e,y.$pristine&&this.$setDirty(),this.$$parseAndValidate())},this.$$parseAndValidate=function(){function t(){y.$modelValue!==a&&y.$$writeModelToScope()}var r=y.$$lastCommittedViewValue,o=r;if(m=b(o)?n:!0)for(var i=0;i<y.$parsers.length;i++)if(o=y.$parsers[i](o),b(o)){m=!1;break}C(y.$modelValue)&&isNaN(y.$modelValue)&&(y.$modelValue=g(e));var a=y.$modelValue,s=y.$options&&y.$options.allowInvalid;y.$$rawModelValue=o,s&&(y.$modelValue=o,t()),y.$$runValidators(o,y.$$lastCommittedViewValue,function(e){s||(y.$modelValue=e?o:n,t())})},this.$$writeModelToScope=function(){v(e,y.$modelValue),i(y.$viewChangeListeners,function(e){try{e()}catch(n){t(n)}})},this.$setViewValue=function(e,t){y.$viewValue=e,(!y.$options||y.$options.updateOnDefault)&&y.$$debounceViewValueCommit(t)},this.$$debounceViewValueCommit=function(t){var n,r=0,o=y.$options;o&&E(o.debounce)&&(n=o.debounce,C(n)?r=n:C(n[t])?r=n[t]:C(n["default"])&&(r=n["default"])),c.cancel($),r?$=c(function(){y.$commitViewValue()},r):l.$$phase?y.$commitViewValue():e.$apply(function(){y.$commitViewValue()})},e.$watch(function(){var t=g(e);if(t!==y.$modelValue&&(y.$modelValue===y.$modelValue||t===t)){y.$modelValue=y.$$rawModelValue=t,m=n;for(var r=y.$formatters,o=r.length,i=t;o--;)i=r[o](i);y.$viewValue!==i&&(y.$viewValue=y.$$lastCommittedViewValue=i,y.$render(),y.$$runValidators(t,i,h))}return t})}],ta=["$rootScope",function(e){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:ea,priority:1,compile:function(t){return t.addClass(Yi).addClass(Xi).addClass(Wi),{pre:function(e,t,n,r){var o=r[0],i=r[1]||mi;o.$$setOptions(r[2]&&r[2].$options),i.$addControl(o),n.$observe("name",function(e){o.$name!==e&&i.$$renameControl(o,e)}),e.$on("$destroy",function(){i.$removeControl(o)})},post:function(t,n,r,o){var i=o[0];i.$options&&i.$options.updateOn&&n.on(i.$options.updateOn,function(e){i.$$debounceViewValueCommit(e&&e.type)}),n.on("blur",function(n){i.$touched||(e.$$phase?t.$evalAsync(i.$setTouched):t.$apply(i.$setTouched))})}}}}}],na=/(\s+|^)default(\s+|$)/,ra=function(){return{restrict:"A",controller:["$scope","$attrs",function(e,t){var r=this;this.$options=F(e.$eval(t.ngModelOptions)),this.$options.updateOn!==n?(this.$options.updateOnDefault=!1,this.$options.updateOn=Fr(this.$options.updateOn.replace(na,function(){return r.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},oa=Qn({terminal:!0,priority:1e3}),ia=r("ngOptions"),aa=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,sa=["$compile","$parse",function(e,n){function r(e,t,r){function i(e,t,n,r,o){this.selectValue=e,this.viewValue=t,this.label=n,this.group=r,this.disabled=o}function a(e){var t;if(!l&&o(e))t=e;else{t=[];for(var n in e)e.hasOwnProperty(n)&&"$"!==n.charAt(0)&&t.push(n)}return t}var s=e.match(aa);if(!s)throw ia("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",e,J(t));var c=s[5]||s[7],l=s[6],u=/ as /.test(s[0])&&s[1],d=s[9],m=n(s[2]?s[1]:c),f=u&&n(u),p=f||m,h=d&&n(d),g=d?function(e,t){return h(r,t)}:function(e){return Ye(e)},v=function(e,t){return g(e,w(e,t))},$=n(s[2]||s[1]),b=n(s[3]||""),E=n(s[4]||""),y=n(s[8]),M={},w=l?function(e,t){return M[l]=t,M[c]=e,M}:function(e){return M[c]=e,M};return{trackBy:d,getTrackByValue:v,getWatchables:n(y,function(e){var t=[];e=e||[];for(var n=a(e),o=n.length,i=0;o>i;i++){var c=e===n?i:n[i],l=(e[c],w(e[c],c)),u=g(e[c],l);if(t.push(u),s[2]||s[1]){var d=$(r,l);t.push(d)}if(s[4]){var m=E(r,l);t.push(m)}}return t}),getOptions:function(){for(var e=[],t={},n=y(r)||[],o=a(n),s=o.length,c=0;s>c;c++){var l=n===o?c:o[c],u=n[l],m=w(u,l),f=p(r,m),h=g(f,m),M=$(r,m),C=b(r,m),A=E(r,m),x=new i(h,f,M,C,A);e.push(x),t[h]=x}return{items:e,selectValueMap:t,getOptionFromViewValue:function(e){return t[v(e)]},getViewValueFromOption:function(e){return d?Ir.copy(e.viewValue):e.viewValue}}}}}var a=t.createElement("option"),s=t.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","?ngModel"],link:function(t,n,o,c){function l(e,t){e.element=t,t.disabled=e.disabled,e.value!==t.value&&(t.value=e.selectValue),e.label!==t.label&&(t.label=e.label,t.textContent=e.label)}function u(e,t,n,r){var o;return t&&Er(t.nodeName)===n?o=t:(o=r.cloneNode(!1),t?e.insertBefore(o,t):e.appendChild(o)),o}function d(e){for(var t;e;)t=e.nextSibling,qe(e),e=t}function m(e){var t=h&&h[0],n=M&&M[0];if(t||n)for(;e&&(e===t||e===n);)e=e.nextSibling;return e}function f(){var e=w&&g.readValue();w=C.getOptions();var t={},r=n[0].firstChild;if(y&&n.prepend(h),r=m(r),w.items.forEach(function(e){var o,i,c;e.group?(o=t[e.group],o||(i=u(n[0],r,"optgroup",s),r=i.nextSibling,i.label=e.group,o=t[e.group]={groupElement:i,currentOptionElement:i.firstChild}),c=u(o.groupElement,o.currentOptionElement,"option",a),l(e,c),o.currentOptionElement=c.nextSibling):(c=u(n[0],r,"option",a),l(e,c),r=c.nextSibling)}),Object.keys(t).forEach(function(e){d(t[e].currentOptionElement)}),d(r),p.$render(),!p.$isEmpty(e)){var o=g.readValue();(C.trackBy?q(e,o):e===o)||(p.$setViewValue(o),p.$render())}}var p=c[1];if(p){for(var h,g=c[0],v=o.multiple,$=0,b=n.children(),E=b.length;E>$;$++)if(""===b[$].value){h=b.eq($);break}var y=!!h,M=xr(a.cloneNode(!1));M.val("?");var w,C=r(o.ngOptions,n,t),A=function(){y||n.prepend(h),n.val(""),h.prop("selected",!0),h.attr("selected",!0)},x=function(){y||h.remove()},T=function(){n.prepend(M),n.val("?"),M.prop("selected",!0),M.attr("selected",!0)},k=function(){M.remove()};v?(p.$isEmpty=function(e){return!e||0===e.length},g.writeValue=function(e){w.items.forEach(function(e){e.element.selected=!1}),e&&e.forEach(function(e){var t=w.getOptionFromViewValue(e);t&&!t.disabled&&(t.element.selected=!0)})},g.readValue=function(){var e=n.val()||[],t=[];return i(e,function(e){var n=w.selectValueMap[e];n.disabled||t.push(w.getViewValueFromOption(n))}),t},C.trackBy&&t.$watchCollection(function(){return jr(p.$viewValue)?p.$viewValue.map(function(e){return C.getTrackByValue(e)}):void 0},function(){p.$render()})):(g.writeValue=function(e){var t=w.getOptionFromViewValue(e);t&&!t.disabled?n[0].value!==t.selectValue&&(k(),x(),n[0].value=t.selectValue,t.element.selected=!0,t.element.setAttribute("selected","selected")):null===e||y?(k(),A()):(x(),T())},g.readValue=function(){var e=w.selectValueMap[n.val()];return e&&!e.disabled?(x(),k(),w.getViewValueFromOption(e)):null},C.trackBy&&t.$watch(function(){return C.getTrackByValue(p.$viewValue)},function(){p.$render()})),y?(h.remove(),e(h)(t),h.removeClass("ng-scope")):h=xr(a.cloneNode(!1)),f(),t.$watchCollection(C.getWatchables,f)}}}}],ca=["$locale","$interpolate","$log",function(e,t,n){var r=/{}/g,o=/^when(Minus)?(.+)$/;return{link:function(a,s,c){function l(e){s.text(e||"")}var u,d=c.count,m=c.$attr.when&&s.attr(c.$attr.when),f=c.offset||0,p=a.$eval(m)||{},g={},v=t.startSymbol(),$=t.endSymbol(),E=v+d+"-"+f+$,y=Ir.noop;i(c,function(e,t){var n=o.exec(t);if(n){var r=(n[1]?"-":"")+Er(n[2]);p[r]=s.attr(c.$attr[t])}}),i(p,function(e,n){g[n]=t(e.replace(r,E))}),a.$watch(d,function(t){var r=parseFloat(t),o=isNaN(r);if(o||r in p||(r=e.pluralCat(r-f)),r!==u&&!(o&&C(u)&&isNaN(u))){y();var i=g[r];b(i)?(null!=t&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+m),y=h,l()):y=a.$watch(i,l),u=r}})}}}],la=["$parse","$animate",function(e,a){var s="$$NG_REMOVED",c=r("ngRepeat"),l=function(e,t,n,r,o,i,a){e[n]=r,o&&(e[o]=i),e.$index=t,e.$first=0===t,e.$last=t===a-1,e.$middle=!(e.$first||e.$last),e.$odd=!(e.$even=0===(1&t))},u=function(e){return e.clone[0]},d=function(e){return e.clone[e.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(r,m){var f=m.ngRepeat,p=t.createComment(" end ngRepeat: "+f+" "),h=f.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!h)throw c("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",f);var g=h[1],v=h[2],$=h[3],b=h[4];if(h=g.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/),!h)throw c("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",g);var E=h[3]||h[1],y=h[2];if($&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test($)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test($)))throw c("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",$);var M,w,C,A,x={$id:Ye};return b?M=e(b):(C=function(e,t){return Ye(t)},A=function(e){return e}),function(e,t,r,m,h){M&&(w=function(t,n,r){return y&&(x[y]=t),x[E]=n,x.$index=r,M(e,x)});var g=ge();e.$watchCollection(v,function(r){var m,v,b,M,x,T,k,S,N,_,H,O,D=t[0],I=ge();if($&&(e[$]=r),o(r))N=r,S=w||C;else{S=w||A,N=[];for(var R in r)r.hasOwnProperty(R)&&"$"!==R.charAt(0)&&N.push(R)}for(M=N.length,H=new Array(M),m=0;M>m;m++)if(x=r===N?m:N[m],T=r[x],k=S(x,T,m),g[k])_=g[k],delete g[k],I[k]=_,H[m]=_;else{if(I[k])throw i(H,function(e){e&&e.scope&&(g[e.id]=e)}),c("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",f,k,T);H[m]={id:k,scope:n,clone:n},I[k]=!0}for(var P in g){if(_=g[P],O=he(_.clone),a.leave(O),O[0].parentNode)for(m=0,v=O.length;v>m;m++)O[m][s]=!0;_.scope.$destroy()}for(m=0;M>m;m++)if(x=r===N?m:N[m],T=r[x],_=H[m],_.scope){b=D;do b=b.nextSibling;while(b&&b[s]);u(_)!=b&&a.move(he(_.clone),null,xr(D)),D=d(_),l(_.scope,m,E,T,y,x,M)}else h(function(e,t){_.scope=t;var n=p.cloneNode(!1);e[e.length++]=n,a.enter(e,null,xr(D)),D=n,_.clone=e,I[_.id]=_,l(_.scope,m,E,T,y,x,M)});g=I})}}}}],ua="ng-hide",da="ng-hide-animate",ma=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngShow,function(t){e[t?"removeClass":"addClass"](n,ua,{tempClasses:da})})}}}],fa=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngHide,function(t){e[t?"addClass":"removeClass"](n,ua,{tempClasses:da})})}}}],pa=Qn(function(e,t,n){e.$watch(n.ngStyle,function(e,n){n&&e!==n&&i(n,function(e,n){t.css(n,"")}),e&&t.css(e)},!0)}),ha=["$animate",function(e){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,r,o,a){var s=o.ngSwitch||o.on,c=[],l=[],u=[],d=[],m=function(e,t){return function(){e.splice(t,1)}};n.$watch(s,function(n){var r,o;for(r=0,o=u.length;o>r;++r)e.cancel(u[r]);for(u.length=0,r=0,o=d.length;o>r;++r){var s=he(l[r].clone);d[r].$destroy();var f=u[r]=e.leave(s);f.then(m(u,r))}l.length=0,d.length=0,(c=a.cases["!"+n]||a.cases["?"])&&i(c,function(n){n.transclude(function(r,o){d.push(o);var i=n.element;r[r.length++]=t.createComment(" end ngSwitchWhen: ");var a={clone:r};l.push(a),e.enter(r,i.parent(),i)})})})}}}],ga=Qn({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,o){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:o,element:t})}}),va=Qn({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,o){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:o,element:t})}}),$a=Qn({restrict:"EAC",link:function(e,t,n,o,i){if(!i)throw r("ngTransclude")("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",J(t));i(function(e){t.empty(),t.append(e)})}}),ba=["$templateCache",function(e){return{restrict:"E",terminal:!0,compile:function(t,n){if("text/ng-template"==n.type){var r=n.id,o=t[0].text;e.put(r,o)}}}}],Ea={$setViewValue:h,$render:h},ya=["$element","$scope","$attrs",function(e,r,o){var i=this,a=new Ge;i.ngModelCtrl=Ea,i.unknownOption=xr(t.createElement("option")),i.renderUnknownOption=function(t){var n="? "+Ye(t)+" ?";i.unknownOption.val(n),e.prepend(i.unknownOption),e.val(n)},r.$on("$destroy",function(){i.renderUnknownOption=h}),i.removeUnknownOption=function(){i.unknownOption.parent()&&i.unknownOption.remove()},i.readValue=function(){return i.removeUnknownOption(),e.val()},i.writeValue=function(t){i.hasOption(t)?(i.removeUnknownOption(),e.val(t),""===t&&i.emptyOption.prop("selected",!0)):null==t&&i.emptyOption?(i.removeUnknownOption(),e.val("")):i.renderUnknownOption(t)},i.addOption=function(e,t){fe(e,'"option value"'),""===e&&(i.emptyOption=t);var n=a.get(e)||0;a.put(e,n+1)},i.removeOption=function(e){var t=a.get(e);t&&(1===t?(a.remove(e),""===e&&(i.emptyOption=n)):a.put(e,t-1))},i.hasOption=function(e){return!!a.get(e)}}],Ma=function(){return{restrict:"E",require:["select","?ngModel"],controller:ya,link:function(e,t,n,r){var o=r[1];if(o){var a=r[0];if(a.ngModelCtrl=o,o.$render=function(){a.writeValue(o.$viewValue)},t.on("change",function(){e.$apply(function(){o.$setViewValue(a.readValue())})}),n.multiple){a.readValue=function(){var e=[];return i(t.find("option"),function(t){t.selected&&e.push(t.value)}),e},a.writeValue=function(e){var n=new Ge(e);i(t.find("option"),function(e){e.selected=E(n.get(e.value))})};var s,c=0/0;e.$watch(function(){c!==o.$viewValue||q(s,o.$viewValue)||(s=V(o.$viewValue),o.$render()),c=o.$viewValue}),o.$isEmpty=function(e){return!e||0===e.length}}}}}},wa=["$interpolate",function(e){function t(e){e[0].hasAttribute("selected")&&(e[0].selected=!0)}return{restrict:"E",priority:100,compile:function(n,r){if(b(r.value)){var o=e(n.text(),!0);o||r.$set("value",n.text())}return function(e,n,r){var i="$selectController",a=n.parent(),s=a.data(i)||a.parent().data(i);s&&s.ngModelCtrl&&(o?e.$watch(o,function(e,o){r.$set("value",e),o!==e&&s.removeOption(o),s.addOption(e,n),s.ngModelCtrl.$render(),t(n)}):(s.addOption(r.value,n),s.ngModelCtrl.$render(),t(n)),n.on("$destroy",function(){s.removeOption(r.value),s.ngModelCtrl.$render()}))}}}}],Ca=v({restrict:"E",terminal:!1}),Aa=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){r&&(n.required=!0,r.$validators.required=function(e,t){return!n.required||!r.$isEmpty(t)},n.$observe("required",function(){r.$validate()}))}}},xa=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,o,i){if(i){var a,s=o.ngPattern||o.pattern;o.$observe("pattern",function(e){if(w(e)&&e.length>0&&(e=new RegExp("^"+e+"$")),e&&!e.test)throw r("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",s,e,J(t));a=e||n,i.$validate()}),i.$validators.pattern=function(e){return i.$isEmpty(e)||b(a)||a.test(e)}}}}},Ta=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var o=-1;n.$observe("maxlength",function(e){var t=f(e);o=isNaN(t)?-1:t,r.$validate()}),r.$validators.maxlength=function(e,t){return 0>o||r.$isEmpty(t)||t.length<=o}}}}},ka=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var o=0;n.$observe("minlength",function(e){o=f(e)||0,r.$validate()}),r.$validators.minlength=function(e,t){return r.$isEmpty(t)||t.length>=o}}}}};return e.angular.bootstrap?void console.log("WARNING: Tried to load angular more than once."):(ue(),Ee(Ir),void xr(t).ready(function(){ie(t,ae)}))}(window,document),!window.angular.$$csp()&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>')},{}],14:[function(e,t,n){e("./angular"),t.exports=angular},{"./angular":13}]},{},[4]);
//# sourceMappingURL=data:application/json;base64,